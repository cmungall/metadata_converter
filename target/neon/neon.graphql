YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {'biolinkml': 'https://w3id.org/biolink/biolinkml/', 'neon': 'https://data.neonscience.org/', 'dwc': 'http://rs.tdwg.org/dwc/terms/', 'mixs': 'https://microbiomedata/schema/mixs#'}
YO SLOT: {'DP1.20163.001': {'description': 'Periphyton, seston, and phytoplankton chemical properties'}, 'DP0.20065.001': {'description': 'Plant and algae external lab chemistry'}, 'DP0.20206.001': {'description': 'Stable isotope concentrations in surface waters and groundwater field data'}, 'DP1.20276.001': {'description': 'Stable isotope concentrations in groundwater'}, 'DP0.20205.001': {'description': 'H2O isotopes external lab data'}, 'DP1.20063.001': {'description': 'Aquatic plant bryophyte chemical properties'}, 'DP0.10067.001': {'description': 'Root sampling tower plots, Level 0'}, 'DP1.10067.001': {'description': 'Root sampling tower plots'}, 'DP0.10017.001': {'description': 'Digital hemispheric photos of plot vegetation, Level 0'}, 'DP1.10017.001': {'description': 'Digital hemispheric photos of plot vegetation'}, 'DP1.00097.001': {'description': 'Soil chemical properties (megapit)'}, 'DP1.00096.001': {'description': 'Soil physical properties (megapit)'}, 'DP0.00096.001': {'description': 'Soil properties (megapit)'}, 'DP0.10066.001': {'description': 'Root sampling (megapit), Level 0'}, 'DP1.10066.001': {'description': 'Root sampling (megapit)'}, 'DP0.10086.001': {'description': 'Soil physical properties, distributed periodic, Level 0'}, 'DP1.10086.001': {'description': 'Soil physical properties (distributed periodic)'}, 'DP0.20093.001': {'description': 'Chemical properties of surface water, Level 0'}, 'DP0.20286.001': {'description': 'Water Chemistry External Lab Data'}, 'DP0.20287.001': {'description': 'Water Chemistry External Lab Summary Data'}, 'DP1.00013.001': {'description': 'Wet deposition chemical analysis'}, 'DP0.00019.001': {'description': 'Wet deposition chemical analysis from lab, Level 0'}, 'DP0.00018.001': {'description': 'Wet deposition from field operations Level 0'}, 'DP1.00038.001': {'description': 'Stable isotope concentrations in precipitation'}, 'DP0.20066.001': {'description': 'Aquatic plant bryophyte macroalgae clip harvest, Level 0'}, 'DP0.20072.001': {'description': 'Point counts of aquatic plants, bryophytes, lichens, and macroalgae from transects in wadeable streams, Level 0'}, 'DP1.20072.001': {'description': 'Aquatic plant, bryophyte, lichen, and macroalgae point counts in wadeable streams'}, 'DP0.10003.001': {'description': 'Ground beetles sampled from pitfall traps, Level 0'}, 'DP1.10022.001': {'description': 'Ground beetles sampled from pitfall traps'}, 'DP0.10006.001': {'description': 'Breeding landbird point counts, Level 0'}, 'DP1.10003.001': {'description': 'Breeding landbird point counts'}, 'DP0.10010.001': {'description': 'Coarse downed wood log survey, Level 0'}, 'DP1.10010.001': {'description': 'Coarse downed wood log survey'}, 'DP0.10005.001': {'description': 'Herbaceous clip harvest, Level 0'}, 'DP1.10023.001': {'description': 'Herbaceous clip harvest'}, 'DP0.10043.001': {'description': 'Mosquitoes, Level 0'}, 'DP1.10043.001': {'description': 'Mosquitoes sampled from CO2 traps'}, 'DP1.10041.001': {'description': 'Mosquito-borne pathogen status'}, 'DP0.10002.001': {'description': 'Plant phenology observations, Level 0'}, 'DP1.10055.001': {'description': 'Plant phenology observations'}, 'DP1.20275.001': {'description': 'Riparian composition and structure'}, 'DP0.20275.001': {'description': 'Riparian composition and structure, Level 0'}, 'DP1.20191.001': {'description': 'Riparian vegetation % cover'}, 'DP0.10064.001': {'description': 'Rodent-borne pathogen status, Level 0'}, 'DP1.10064.001': {'description': 'Rodent-borne pathogen status'}, 'DP1.20254.001': {'description': 'Depth profile at specific depths'}, 'DP0.20254.001': {'description': 'Depth profile at specific depths, Level 0'}, 'DP0.20252.001': {'description': 'Secchi depth, Level 0'}, 'DP1.20252.001': {'description': 'Secchi depth'}, 'DP0.10001.001': {'description': 'Small mammal box trapping, Level 0'}, 'DP0.10093.001': {'description': 'Ticks and tick pathogens, Level 0'}, 'DP1.10093.001': {'description': 'Ticks sampled using drag cloths'}, 'DP1.10092.001': {'description': 'Tick-borne pathogen status'}, 'DP1.10045.001': {'description': 'Non-herbaceous perennial vegetation structure'}, 'DP0.10098.001': {'description': 'Vegetation Structure, Level 0'}, 'DP0.20219.001': {'description': 'Zooplankton collection, Level 0'}, 'DP0.10107.001': {'description': 'Microbial metagenome sequences, Level 0'}, 'DP1.10107.001': {'description': 'Soil microbe metagenome sequences'}, 'DP1.10080.001': {'description': 'Soil inorganic nitrogen pools and transformations'}, 'DP0.10080.001': {'description': 'Soil inorganic nitrogen pools and transformations, Level 0'}, 'DP1.00101.001': {'description': 'Particulate mass'}, 'DP1.10020.001': {'description': 'Ground beetle sequences DNA barcode'}, 'DP0.20090.001': {'description': 'Water chemistry, isotopes, dissolved gas, and microbes sampling, Level 0'}, 'DP0.20107.001': {'description': 'Fish electrofishing, gill netting, and fyke netting counts, Level 0'}, 'DP1.20107.001': {'description': 'Fish electrofishing, gill netting, and fyke netting counts'}, 'DP0.20194.001': {'description': 'Sediment chemical and physical properties, level 0'}, 'DP1.20197.001': {'description': 'Sediment physical properties'}, 'DP0.10109.001': {'description': 'Microbial group abundances, Level 0'}, 'DP0.10108.001': {'description': 'Microbial marker gene sequences, Level 0'}, 'DP1.10108.001': {'description': 'Soil microbe marker gene sequences'}, 'DP0.10026.001': {'description': 'Plant sun-lit canopy foliar physical and chemical properties, Level 0'}, 'DP0.10035.001': {'description': 'Bryophyte clip harvest, Level 0'}, 'DP1.10035.001': {'description': 'Bryophyte clip harvest'}, 'DP1.20105.001': {'description': 'Fish sequences DNA barcode'}, 'DP0.00132.001': {'description': 'Bathymetric and morphological maps, Level 0'}, 'DP0.10014.001': {'description': 'Coarse downed wood bulk density sampling, Level 0'}, 'DP1.10014.001': {'description': 'Coarse downed wood bulk density sampling'}, 'DP1.10099.001': {'description': 'Root stable isotopes'}, 'DP0.10103.001': {'description': 'Carbon and nitrogen concentrations and stable isotopes in plants and soil, L0'}, 'DP1.10053.001': {'description': 'Plant foliar stable isotopes'}, 'DP1.10101.001': {'description': 'Litter stable isotopes'}, 'DP1.10100.001': {'description': 'Soil stable isotopes (distributed periodic)'}, 'DP1.10102.001': {'description': 'Root chemical properties'}, 'DP1.10078.001': {'description': 'Soil chemical properties (distributed periodic)'}, 'DP1.10031.001': {'description': 'Litter chemical properties'}, 'DP1.10026.001': {'description': 'Plant foliar physical and chemical properties'}, 'DP1.20277.001': {'description': 'Benthic microbe group abundances'}, 'DP1.20278.001': {'description': 'Surface water microbe group abundances'}, 'DP0.10081.001': {'description': 'Microbe community composition, Level 0'}, 'DP1.10081.001': {'description': 'Soil microbe community composition'}, 'DP1.10109.001': {'description': 'Soil microbe group abundances'}, 'DP4.00131.001': {'description': 'Stream morphology map'}, 'DP0.00131.001': {'description': 'Stream morphology map, Level 0'}, 'DP4.00133.001': {'description': 'Stream discharge rating curve'}, 'DP0.20221.001': {'description': 'Zooplankton DNA barcode, Level 0'}, 'DP0.20126.001': {'description': 'Macroinvertebrate DNA barcode, Level 0'}, 'DP0.20086.001': {'description': 'Benthic microbe community composition, Level 0'}, 'DP1.20280.001': {'description': 'Benthic microbe marker gene sequences'}, 'DP1.20282.001': {'description': 'Surface water microbe marker gene sequences'}, 'DP1.10076.001': {'description': 'Small mammal sequences DNA barcode'}, 'DP1.20219.001': {'description': 'Zooplankton collection'}, 'DP1.20221.001': {'description': 'Zooplankton DNA barcode'}, 'DP1.20126.001': {'description': 'Macroinvertebrate DNA barcode'}, 'DP0.20120.001': {'description': 'Macroinvertebrate collection, Level 0'}, 'DP0.10104.001': {'description': 'Soil microbe biomass, Level 0'}, 'DP1.20279.001': {'description': 'Benthic microbe metagenome sequences'}, 'DP1.20281.001': {'description': 'Surface water microbe metagenome sequences'}, 'DP1.10104.001': {'description': 'Soil microbe biomass'}, 'DP1.20086.001': {'description': 'Benthic microbe community composition'}, 'DP1.20141.001': {'description': 'Surface water microbe community composition'}, 'DP0.20048.001': {'description': 'Stream Water Discharge'}, 'DP1.20048.001': {'description': 'Stream discharge field collection'}, 'DP1.20092.001': {'description': 'Chemical properties of groundwater'}, 'DP1.20093.001': {'description': 'Chemical properties of surface water'}, 'DP0.20064.001': {'description': 'Plant and algae external lab taxonomy'}, 'DP4.00132.001': {'description': 'Bathymetric and morphological maps'}, 'DP0.10004.001': {'description': 'Plant presence and percent cover, Level 0'}, 'DP1.10058.001': {'description': 'Plant presence and percent cover'}, 'DP0.20166.001': {'description': 'Periphyton, seston and phytoplankton collection, Level 0'}, 'DP0.20099.001': {'description': 'Groundwater and active layer measurements at permafrost sites, Level 0'}, 'DP1.20099.001': {'description': 'Groundwater and active layer measurements at permafrost sites'}, 'DP0.20097.001': {'description': 'Dissolved gases in surface water, Level 0'}, 'DP1.20097.001': {'description': 'Dissolved gases in surface water'}, 'DP0.20190.001': {'description': 'Reaeration field and lab collection, Level 0'}, 'DP1.20190.001': {'description': 'Reaeration field and lab collection'}, 'DP1.20193.001': {'description': 'Salt-based stream discharge'}, 'DP0.20267.001': {'description': 'Gauge Height, Level 0'}, 'DP1.20267.001': {'description': 'Gauge height'}, 'DP0.10000.001': {'description': 'Sample custody, Level 0'}, 'DP0.20138.001': {'description': 'Surface water microbe cell count, Level 0'}, 'DP0.10033.001': {'description': 'Litterfall sampling'}, 'DP1.10033.001': {'description': 'Litterfall and fine woody debris sampling'}, 'DP1.10008.001': {'description': 'Soil chemical properties (distributed initial characterization)'}, 'DP0.10008.001': {'description': 'Soil chemical and physical properties (distributed initial characterization), Level 0'}, 'DP1.10047.001': {'description': 'Soil physical properties (distributed initial characterization)'}, 'DP1.10038.001': {'description': 'Mosquito sequences DNA barcode'}, 'DP0.10111.001': {'description': 'Site management and event reporting, Level 0'}, 'DP1.10111.001': {'description': 'Site management and event reporting'}, 'DP0.00121.001': {'description': 'Particulate mass field collection, Level 0'}, 'DP0.30012.001': {'description': 'Field spectra data, Level 0'}, 'DP0.10031.001': {'description': 'Plant lignin concentrations, Level 0'}, 'DP0.10106.001': {'description': 'Microbial DNA extraction metadata, Level 0'}, 'DP1.20166.001': {'description': 'Periphyton, seston, and phytoplankton collection'}, 'DP1.20066.001': {'description': 'Aquatic plant bryophyte macroalgae clip harvest'}, 'DP1.20206.001': {'description': 'Stable isotope concentrations in surface waters'}, 'DP1.30012.001': {'description': 'Field spectral data'}, 'DP1.20120.001': {'description': 'Macroinvertebrate collection'}, 'DP1.10072.001': {'description': 'Small mammal box trapping'}, 'DP1.10098.001': {'description': 'Woody plant vegetation structure'}, 'DP4.00130.001': {'description': 'Stream discharge'}, 'DP4.00001.001': {'description': 'Summary weather statistics'}, 'DP1.20042.001': {'description': 'Photosynthetically active radiation at water surface'}, 'DP1.00024.001': {'description': 'Photosynthetically active radiation (PAR)'}, 'DP1.00006.001': {'description': 'Precipitation'}, 'DP1.00002.001': {'description': 'Single aspirated air temperature'}, 'DP1.20033.001': {'description': 'Nitrate in surface water'}, 'DP1.20053.001': {'description': 'Temperature (PRT) in surface water'}, 'DP1.00005.001': {'description': 'IR biological temperature'}, 'DP1.00022.001': {'description': 'Shortwave radiation (primary pyranometer)'}, 'DP1.00066.001': {'description': 'Photosynthetically active radiation (quantum line)'}, 'DP1.00095.001': {'description': 'Soil CO2 concentration'}, 'DP1.00040.001': {'description': 'Soil heat flux plate'}, 'DP1.00041.001': {'description': 'Soil temperature'}, 'DP1.00003.001': {'description': 'Triple aspirated air temperature'}, 'DP1.20032.001': {'description': 'Shortwave and longwave radiation above water on-buoy (net radiometer)'}, 'DP1.00023.001': {'description': 'Shortwave and longwave radiation (net radiometer)'}, 'DP1.00001.001': {'description': '2D wind speed and direction'}, 'DP0.20059.001': {'description': 'Windspeed and direction on lakes on-buoy, Level 0'}, 'DP1.20004.001': {'description': 'Barometric pressure above water on-buoy'}, 'DP1.00004.001': {'description': 'Barometric pressure'}, 'DP1.00014.001': {'description': 'Shortwave radiation (direct and diffuse pyranometer)'}, 'DP1.20271.001': {'description': 'Relative humidity above water on-buoy'}, 'DP1.00098.001': {'description': 'Relative humidity'}, 'DP1.20046.001': {'description': 'Air temperature above water on-buoy'}, 'DP1.00094.001': {'description': 'Soil water content and water salinity'}, 'DP0.20005.001': {'description': 'pH, chlorophyll, actual conductivity, fDOM, turbidity, and dissolved oxygen in surface water'}, 'DP1.20288.001': {'description': 'Water quality'}, 'DP0.00001.001': {'description': '2D Wind Speed and Direction, Level 0'}, 'IP0.00001.001': {'description': "2D Wind Speed and Direction, Level 0'"}, 'DP0.00004.001': {'description': 'Barometric Pressure, Level 0'}, 'DP0.00098.001': {'description': 'Relative Humidity, Level 0'}, 'DP0.00101.001': {'description': 'Particulate Mass, Level 0'}, 'DP0.20004.001': {'description': 'Barometric pressure at lakes on-buoy, Level 0'}, 'DP0.20271.001': {'description': 'Relative Humidity of the air above lakes on buoy, Level 0'}, 'IP0.00098.001': {'description': "Relative Humidity, Level 0'"}, 'DP0.00005.001': {'description': 'IR Biological Temperature, Level 0'}, 'DP0.00023.001': {'description': 'Shortwave and Longwave Radiation (Net radiometer), Level 0'}, 'DP0.20032.001': {'description': 'Shortwave and longwave radiation on lakes on-buoy (Net radiometer), Level 0'}, 'DP0.00002.001': {'description': 'Single Aspirated Air Temperature, Level 0'}, 'DP0.00003.001': {'description': 'Triple Aspirated Air Temperature, Level 0'}, 'DP0.00007.001': {'description': 'soni'}, 'IP0.00002.001': {'description': "Single Aspirated Air Temperature, Level 0'"}, 'IP0.00007.001': {'description': "soni, Level 0'"}, 'IP0.00003.001': {'description': "Triple aspirated air temperature, Level 0'"}, 'DP0.00024.001': {'description': 'Photosynthetically Active Radiation (PAR), Level 0'}, 'DP0.20042.001': {'description': 'Photosynthetically active radiation at water surface, Level 0'}, 'DP0.20261.001': {'description': 'Photosynthetically active radiation below water surface, Level 0'}, 'DP0.00006.001': {'description': 'Precipitation, Level 0'}, 'DP0.00022.001': {'description': 'Shortwave Radiation (Primary Pyranometer), Level 0'}, 'DP0.20053.001': {'description': 'Temperature (PRT) in surface water, Level 0'}, 'DP0.00066.001': {'description': 'Photosynthetically active radiation (Quantum Line), Level 0'}, 'DP0.00043.001': {'description': 'Spectral Sun Photometer - Calibrated Sky Radiances, Level 0'}, 'DP0.00014.001': {'description': 'Shortwave Radiation (Direct and Diffuse Pyranometer), Level 0'}, 'DP0.20015.001': {'description': 'Actual conductivity, temperature, and elevation of groundwater'}, 'DP0.20054.001': {'description': 'Temperature (digital thermistor) of surface water, Level 0'}, 'DP0.20016.001': {'description': 'Elevation of surface water, Level 0'}, 'DP1.20217.001': {'description': 'Temperature of groundwater'}, 'DP1.20015.001': {'description': 'Specific conductivity in groundwater'}, 'DP1.20100.001': {'description': 'Elevation of groundwater'}, 'DP1.20016.001': {'description': 'Elevation of surface water'}, 'DP1.00017.001': {'description': 'Dust and particulate size distribution'}, 'DP1.20261.001': {'description': 'Photosynthetically active radiation below water surface'}, 'DP1.20059.001': {'description': 'Windspeed and direction above water on-buoy'}, 'DP1.20264.001': {'description': 'Temperature at specific depth in surface water'}, 'DP0.00041.001': {'description': 'Soil Temperature, Level 0'}, 'DP0.00095.001': {'description': 'Soil CO2 Concentration, Level 0'}, 'DP0.00033.001': {'description': 'Phenology Images, Level 0'}, 'DP0.00042.001': {'description': 'Snow Depth, Level 0'}, 'DP0.20002.001': {'description': 'Aquatic stream gauge photos, Level 0'}, 'DP0.00040.001': {'description': 'Soil Heat Flux, Level 0'}, 'DP0.00013.001': {'description': 'Wet deposition chemical analysis, Level 0'}, 'DP0.00010.001': {'description': 'soniAmrs'}, 'DP0.00016.001': {'description': 'irga'}, 'IP0.00010.001': {'description': "soniAmrs, Level 0'"}, 'IP0.00016.001': {'description': "irga, Level 0'"}, 'DP0.00017.001': {'description': 'Dust and Particulate Size Distribution, Level 0'}, 'DP0.00012.001': {'description': 'irgaMfcSamp'}, 'DP0.00015.001': {'description': 'irgaMfcVali'}, 'DP0.00036.001': {'description': 'irgaPresTrap'}, 'DP0.00106.001': {'description': 'profMfcSamp'}, 'DP0.00107.001': {'description': 'profMfcVali'}, 'DP0.00108.001': {'description': 'profMfm'}, 'IP0.00012.001': {'description': "irgaMfcSamp, Level 0'"}, 'IP0.00015.001': {'description': "irgaMfcVali, Level 0'"}, 'IP0.00036.001': {'description': "irgaPresTrap, Level 0'"}, 'IP0.00106.001': {'description': "profMfcSamp, Level 0'"}, 'IP0.00107.001': {'description': "profMfcVali, Level 0'"}, 'IP0.00108.001': {'description': "profMfm, Level 0'"}, 'DP0.00094.001': {'description': 'Soil water content and salinity'}, 'DP0.00105.001': {'description': 'profIrga'}, 'IP0.00105.001': {'description': "profIrga, Level 0'"}, 'IP0.00102.001': {'description': "CO2Iso, Level 0'"}, 'IP0.00103.001': {'description': "H2OIso, Level 0'"}, 'DP0.00102.001': {'description': 'CO2Iso'}, 'DP0.00117.001': {'description': 'irgaGasCyl'}, 'DP0.00118.001': {'description': 'profGasCyl'}, 'IP0.00118.001': {'description': "profGasCyl, Level 0'"}, 'IP1.00118.001': {'description': "profGasCyl, Level 1'"}, 'IP2.00118.001': {'description': "profGasCyl, Level 2'"}, 'DP0.00034.001': {'description': 'irgaPresValiRegIn'}, 'DP0.00035.001': {'description': 'irgaPresValiRegOut'}, 'DP0.00037.001': {'description': 'irgaPresValiLine'}, 'DP0.00109.001': {'description': 'profPresInlet'}, 'DP0.00110.001': {'description': 'profPresValiRegDel'}, 'DP0.00111.001': {'description': 'profPresValiRegTank'}, 'IP0.00034.001': {'description': "irgaPresValiRegIn, Level 0'"}, 'IP0.00035.001': {'description': "irgaPresValiRegOut, Level 0'"}, 'IP0.00037.001': {'description': "irgaPresValiLine, Level 0'"}, 'IP0.00109.001': {'description': "profPresInlet, Level 0'"}, 'IP0.00110.001': {'description': "profPresValiRegDel, Level 0'"}, 'IP0.00111.001': {'description': "profPresValiRegTank, Level 0'"}, 'DP0.00008.001': {'description': 'irgaSndLeakHeat'}, 'IP0.00008.001': {'description': "irgaSndLeakHeat, Level 0'"}, 'DP0.00009.001': {'description': 'irgaSndValiNema'}, 'DP0.00011.001': {'description': 'irgaSndValiHut'}, 'IP0.00009.001': {'description': "irgaSndValiNema, Level 0'"}, 'IP0.00011.001': {'description': "irgaSndValiHut, Level 0'"}, 'IP1.00009.001': {'description': "irgaSndValiNema, Level 1'"}, 'DP0.20033.001': {'description': 'Nitrate in surface water, Level 0'}, 'DP0.00103.001': {'description': 'H2OIso'}, 'DP0.00104.001': {'description': 'hutEnv'}, 'IP0.00104.001': {'description': "hutEnv, Level 0'"}, 'DP0.00112.001': {'description': 'profPumpSmp'}, 'DP0.00116.001': {'description': 'irgaPump'}, 'IP0.00116.001': {'description': "irgaPump, Level 0'"}, 'IP0.00112.001': {'description': "profPumpSmp, Level 0'"}, 'DP0.00115.001': {'description': 'profSndVapor'}, 'IP0.00115.001': {'description': "profSndVapor, Level 0'"}, 'DP0.00113.001': {'description': 'profSnd'}, 'DP0.00114.001': {'description': 'profSndAux'}, 'IP0.00113.001': {'description': "profSnd, Level 0'"}, 'IP0.00114.001': {'description': "profSndAux, Level 0'"}, 'DP0.00119.001': {'description': 'profTray45Vial'}, 'DP0.00120.001': {'description': 'profRefeH2oVali'}, 'IP0.00120.001': {'description': "profRefeH2OVali, Level 0'"}, 'DP0.00122.001': {'description': 'h2oIsoCVAL'}, 'DP0.20264.001': {'description': 'Temperature at specific depth in surface water, Level 0'}, 'DP0.00044.001': {'description': 'Soil moisture, temperature, permittivity and electrical conductivity'}}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {'uid': {'slot_uri': 'neon:uid', 'description': 'Unique ID within NEON database; an identifier for the record', 'range': 'string', 'aliases': ['uid'], 'mappings': []}, 'domainID': {'slot_uri': 'neon:domainID', 'description': 'Unique identifier of the NEON domain', 'range': 'string', 'aliases': ['domain i d'], 'mappings': ['dwc:locationID']}, 'siteID': {'slot_uri': 'neon:siteID', 'description': 'NEON site code', 'range': 'string', 'aliases': ['site i d'], 'mappings': ['dwc:locationID']}, 'plotID': {'slot_uri': 'neon:plotID', 'description': 'Plot identifier (NEON site code_XXX)', 'range': 'string', 'aliases': ['plot i d'], 'mappings': []}, 'date': {'slot_uri': 'neon:date', 'description': 'Date or date and time of measurement, observation, or collection event', 'range': 'time', 'aliases': ['date'], 'mappings': ['dwc:eventDate']}, 'samplingProtocol': {'slot_uri': 'neon:samplingProtocol', 'description': 'The NEON document number where detailed information regarding the sampling method used is available; format NEON.DOC.######', 'range': 'string', 'aliases': ['sampling protocol'], 'mappings': ['dwc:samplingProtocol']}, 'identificationReferences': {'slot_uri': 'neon:identificationReferences', 'description': 'A list of sources (concatenated and semicolon separated) used to derive the specific taxon concept; including field guide editions, books, or versions of NEON keys used', 'range': 'string', 'aliases': ['identification references'], 'mappings': []}, 'remarks': {'slot_uri': 'neon:remarks', 'description': 'Technician notes; free text comments accompanying the record', 'range': 'string', 'aliases': ['remarks'], 'mappings': []}, 'nightuid': {'slot_uri': 'neon:nightuid', 'description': 'Unique ID of associated record in perplotnight table', 'range': 'string', 'aliases': ['nightuid'], 'mappings': []}, 'trapCoordinate': {'slot_uri': 'neon:trapCoordinate', 'description': 'Relative coordinate of the trap within the given plotID (A1 - J10). If row or column coordinate is unknown, X is used', 'range': 'string', 'aliases': ['trap coordinate'], 'mappings': []}, 'trapStatus': {'slot_uri': 'neon:trapStatus', 'description': 'Categorical descriptor of trap status; 0 - no data; 1 - trap not set; 2 - trap disturbed/door closed but empty; 3 - trap door open or closed w/ spoor left; 4 - >1 capture in one trap; 5 - capture; 6 - trap set and empty', 'range': 'string', 'aliases': ['trap status'], 'mappings': []}, 'taxonID': {'slot_uri': 'neon:taxonID', 'description': 'Species code, based on one or more sources', 'range': 'string', 'aliases': ['taxon i d'], 'mappings': []}, 'identificationQualifier': {'slot_uri': 'neon:identificationQualifier', 'description': "A standard term to express the determiner's doubts about the Identification", 'range': 'string', 'aliases': ['identification qualifier'], 'mappings': []}, 'sex': {'slot_uri': 'neon:sex', 'description': 'M for male, F for female, U for unknown', 'range': 'string', 'aliases': ['sex'], 'mappings': []}, 'lifeStage': {'slot_uri': 'neon:lifeStage', 'description': 'The age class of the individual at the time the Occurrence was recorded. juvenile = obvious signs of a very young individual, small size, distinctive pelage coloration; subabult; adult', 'range': 'string', 'aliases': ['life stage'], 'mappings': []}, 'testes': {'slot_uri': 'neon:testes', 'description': 'Condition of the testes at time of capture; if mature: scrotal = testes descended, nonscrotal = testes abdominal', 'range': 'string', 'aliases': ['testes'], 'mappings': []}, 'nipples': {'slot_uri': 'neon:nipples', 'description': 'Condition of the nipples at time of capture; if mature: enlarged = nipples enlarged, nonenlarged = nipples not enlarged', 'range': 'string', 'aliases': ['nipples'], 'mappings': []}, 'pregnancyStatus': {'slot_uri': 'neon:pregnancyStatus', 'description': "Condition at time of capture; if mature: 'pregnant' | 'not'", 'range': 'string', 'aliases': ['pregnancy status'], 'mappings': []}, 'vagina': {'slot_uri': 'neon:vagina', 'description': 'Condition of the vagina at time of capture; if mature: swollen, plugged, neither', 'range': 'string', 'aliases': ['vagina'], 'mappings': []}, 'hindfootLength': {'slot_uri': 'neon:hindfootLength', 'description': 'length of left hindfoot; including claws; in millimeters', 'range': 'string', 'aliases': ['hindfoot length'], 'mappings': []}, 'earLength': {'slot_uri': 'neon:earLength', 'description': 'length of left ear; in millimeters', 'range': 'string', 'aliases': ['ear length'], 'mappings': []}, 'tailLength': {'slot_uri': 'neon:tailLength', 'description': 'length of tail; in millimeters', 'range': 'string', 'aliases': ['tail length'], 'mappings': []}, 'totalLength': {'slot_uri': 'neon:totalLength', 'description': 'total length (head + body); in millimeters', 'range': 'string', 'aliases': ['total length'], 'mappings': []}, 'weight': {'slot_uri': 'neon:weight', 'description': 'Live weight as measured with a spring scale; in grams', 'range': 'string', 'aliases': ['weight'], 'mappings': []}, 'tagID': {'slot_uri': 'neon:tagID', 'description': 'Domain-level unique identifier of tag used to mark the individual', 'range': 'string', 'aliases': ['tag i d'], 'mappings': []}, 'replacedTag': {'slot_uri': 'neon:replacedTag', 'description': "Indicates which ear tag was replaced (L#### | R####) or which ear appears to have lost a tag ('left' = left ear tag replaced; 'right' = right ear tag replaced)", 'range': 'string', 'aliases': ['replaced tag'], 'mappings': []}, 'recapture': {'slot_uri': 'neon:recapture', 'description': "Indicates whether or not the captured individual is a recapture; 'Y' for yes, 'N' for no", 'range': 'string', 'aliases': ['recapture'], 'mappings': []}, 'fate': {'slot_uri': 'neon:fate', 'description': "The fate of the individual, unless marked and released; 'dead' = dead, 'escaped' = escaped while handling, 'nontarget' = released, non-target species, 'released' = target or opportunistic species released without full processing", 'range': 'string', 'aliases': ['fate'], 'mappings': []}, 'bloodSampleID': {'slot_uri': 'neon:bloodSampleID', 'description': 'Unique identifier for the blood sample', 'range': 'string', 'aliases': ['blood sample i d'], 'mappings': []}, 'bloodSampleMethod': {'slot_uri': 'neon:bloodSampleMethod', 'description': 'Method used to collect the blood sample', 'range': 'string', 'aliases': ['blood sample method'], 'mappings': []}, 'fecalSampleID': {'slot_uri': 'neon:fecalSampleID', 'description': 'Unique identifier for the fecal sample', 'range': 'string', 'aliases': ['fecal sample i d'], 'mappings': []}, 'fecalSampleCondition': {'slot_uri': 'neon:fecalSampleCondition', 'description': "Condition of fecal sample at time of collection; 'fresh' = fresh fecal sample collected from mammal; 'old' = 'Old' fecal sample collected from trap", 'range': 'string', 'aliases': ['fecal sample condition'], 'mappings': []}, 'earSampleID': {'slot_uri': 'neon:earSampleID', 'description': 'Unique identifier for the ear sample', 'range': 'string', 'aliases': ['ear sample i d'], 'mappings': []}, 'hairSampleID': {'slot_uri': 'neon:hairSampleID', 'description': 'Unique identifier for the hair sample', 'range': 'string', 'aliases': ['hair sample i d'], 'mappings': []}, 'whiskerSampleID': {'slot_uri': 'neon:whiskerSampleID', 'description': 'Unique identifier for the whisker sample', 'range': 'string', 'aliases': ['whisker sample i d'], 'mappings': []}, 'voucherSampleID': {'slot_uri': 'neon:voucherSampleID', 'description': 'Unique identifier for the voucher sample', 'range': 'string', 'aliases': ['voucher sample i d'], 'mappings': []}, 'measuredBy': {'slot_uri': 'neon:measuredBy', 'description': 'An identifier for the technician who measured or collected the data', 'range': 'string', 'aliases': ['measured by'], 'mappings': []}, 'recordedBy': {'slot_uri': 'neon:recordedBy', 'description': 'An identifier for the technician who recorded the data', 'range': 'string', 'aliases': ['recorded by'], 'mappings': ['dwc:recordedBy']}, 'eventID': {'slot_uri': 'neon:eventID', 'description': 'An identifier for the set of information associated with the event, which includes information about the place and time of the event', 'range': 'string', 'aliases': ['event i d'], 'mappings': ['dwc:eventID']}, 'night': {'slot_uri': 'neon:night', 'description': 'Number of the night of trapping or collection event within the multi-night sampling bout', 'range': 'string', 'aliases': ['night'], 'mappings': []}, 'setTraps': {'slot_uri': 'neon:setTraps', 'description': 'Total number of traps set per reference area (site, plot, etc.)', 'range': 'string', 'aliases': ['set traps'], 'mappings': []}, 'disturbedTraps': {'slot_uri': 'neon:disturbedTraps', 'description': 'Total number of set traps that were closed or disturbed', 'range': 'string', 'aliases': ['disturbed traps'], 'mappings': []}, 'samplingEffort': {'slot_uri': 'neon:samplingEffort', 'description': 'The total amount of sampling effort (e.g. trapping effort) expended during a bout; with necessary corrections (e.g., for disturbed traps)', 'range': 'string', 'aliases': ['sampling effort'], 'mappings': []}, 'duplicateNightQF': {'slot_uri': 'neon:duplicateNightQF', 'description': 'Quality Flag for duplicate records per night', 'range': 'integer', 'aliases': ['duplicate night q f'], 'mappings': []}, 'missingRecordsPerBoutQF': {'slot_uri': 'neon:missingRecordsPerBoutQF', 'description': 'Quality Flag for missing records at the bout level', 'range': 'integer', 'aliases': ['missing records per bout q f'], 'mappings': []}, 'duplicateTrapCoordinateQF': {'slot_uri': 'neon:duplicateTrapCoordinateQF', 'description': 'Quality Flag for duplicate records for trap coordinate', 'range': 'integer', 'aliases': ['duplicate trap coordinate q f'], 'mappings': []}, 'individualID': {'slot_uri': 'neon:individualID', 'description': 'Domain-level unique identifier for an individual: NEON.MOD.D##.######', 'range': 'string', 'aliases': ['individual i d'], 'mappings': []}, 'nlcdClass': {'slot_uri': 'neon:nlcdClass', 'description': 'National Land Cover Database Vegetation Type Name', 'range': 'string', 'aliases': ['nlcd class'], 'mappings': []}, 'decimalLatitude': {'slot_uri': 'neon:decimalLatitude', 'description': 'The geographic latitude (in decimal degrees, WGS84) of the geographic center of the reference area', 'range': 'double', 'aliases': ['decimal latitude'], 'mappings': ['dwc:decimalLatitude']}, 'decimalLongitude': {'slot_uri': 'neon:decimalLongitude', 'description': 'The geographic longitude (in decimal degrees, WGS84) of the geographic center of the reference area', 'range': 'double', 'aliases': ['decimal longitude'], 'mappings': ['dwc:decimalLongitude']}, 'geodeticDatum': {'slot_uri': 'neon:geodeticDatum', 'description': 'Model used to measure horizontal position on the earth', 'range': 'string', 'aliases': ['geodetic datum'], 'mappings': ['dwc:geodeticDatum']}, 'coordinateUncertainty': {'slot_uri': 'neon:coordinateUncertainty', 'description': 'The horizontal distance (in meters) from the given decimalLatitude and decimalLongitude describing the smallest circle containing the whole of the Location. Zero is not a valid value for this term', 'range': 'double', 'aliases': ['coordinate uncertainty'], 'mappings': ['dwc:coordinateUncertaintyInMeters']}, 'elevation': {'slot_uri': 'neon:elevation', 'description': 'Elevation (in meters) above sea level', 'range': 'double', 'aliases': ['elevation'], 'mappings': ['dwc:verbatimElevation']}, 'elevationUncertainty': {'slot_uri': 'neon:elevationUncertainty', 'description': 'Uncertainty in elevation values (in meters)', 'range': 'double', 'aliases': ['elevation uncertainty'], 'mappings': []}, 'scientificName': {'slot_uri': 'neon:scientificName', 'description': 'Scientific name, associated with the taxonID. This is the name of the lowest level taxonomic rank that can be determined', 'range': 'string', 'aliases': ['scientific name'], 'mappings': ['http://rs.tdwg.org/dwc/terms/scientificName;', 'dwc:scientificName']}, 'taxonRank': {'slot_uri': 'neon:taxonRank', 'description': 'The lowest level taxonomic rank that can be determined for the individual or specimen', 'range': 'string', 'aliases': ['taxon rank'], 'mappings': ['http://rs.tdwg.org/dwc/terms/taxonRank']}, 'identificationStatus': {'slot_uri': 'neon:identificationStatus', 'description': 'A categorical indicator of changes applied to an identification based on conflicting sources, where applicable', 'range': 'string', 'aliases': ['identification status'], 'mappings': []}, 'reproductiveCondition': {'slot_uri': 'neon:reproductiveCondition', 'description': 'The reproductive condition of the individual at the time of capture. R for reproductive; N for non-reproductive', 'range': 'string', 'aliases': ['reproductive condition'], 'mappings': []}, 'consistencyTagIDSexQF': {'slot_uri': 'neon:consistencyTagIDSexQF', 'description': 'Quality Flag for temporal consistency - Tag ID and Sex', 'range': 'integer', 'aliases': ['consistency tag i d sex q f'], 'mappings': []}, 'consistencyTagIDTaxonIDQF': {'slot_uri': 'neon:consistencyTagIDTaxonIDQF', 'description': 'Quality Flag for temporal consistency - Tag ID and Taxon ID', 'range': 'integer', 'aliases': ['consistency tag i d taxon i d q f'], 'mappings': []}, 'consistencyTagIDLifeStageQF': {'slot_uri': 'neon:consistencyTagIDLifeStageQF', 'description': 'Quality Flag for temporal consistency - Tag ID and Life Stage', 'range': 'integer', 'aliases': ['consistency tag i d life stage q f'], 'mappings': []}, 'orderTagIDRecaptureQF': {'slot_uri': 'neon:orderTagIDRecaptureQF', 'description': 'Quality Flag for order - Tag ID and Fate', 'range': 'integer', 'aliases': ['order tag i d recapture q f'], 'mappings': []}, 'orderTagIDLifeStageQF': {'slot_uri': 'neon:orderTagIDLifeStageQF', 'description': 'Quality Flag for order - Life Stage', 'range': 'integer', 'aliases': ['order tag i d life stage q f'], 'mappings': []}, 'trapID': {'slot_uri': 'neon:trapID', 'description': 'Identifier for trap', 'range': 'string', 'aliases': ['trap i d'], 'mappings': []}, 'enteredBy': {'slot_uri': 'neon:enteredBy', 'description': 'An identifier for the technician who entered the data', 'range': 'string', 'aliases': ['entered by'], 'mappings': []}, 'boutNumber': {'slot_uri': 'neon:boutNumber', 'description': 'Number of the sampling bout within a calendar year, beginning with 1', 'range': 'string', 'aliases': ['bout number'], 'mappings': []}, 'sampleID': {'slot_uri': 'neon:sampleID', 'description': 'Identifier for sample', 'range': 'string', 'aliases': ['sample i d'], 'mappings': ['dwc:materialSampleID']}, 'setDate': {'slot_uri': 'neon:setDate', 'description': 'Date that trap was set', 'range': 'time', 'aliases': ['set date'], 'mappings': []}, 'collectDate': {'slot_uri': 'neon:collectDate', 'description': 'Date of the collection event', 'range': 'time', 'aliases': ['collect date'], 'mappings': ['dwc:eventDate']}, 'cupStatus': {'slot_uri': 'neon:cupStatus', 'description': 'Indicator of whether the cup of the trap was disturbed or missing during the sampling bout', 'range': 'string', 'aliases': ['cup status'], 'mappings': []}, 'lidStatus': {'slot_uri': 'neon:lidStatus', 'description': 'Indicator of whether the lid of the trap was disturbed or missing during the sampling bout', 'range': 'string', 'aliases': ['lid status'], 'mappings': []}, 'fluidLevel': {'slot_uri': 'neon:fluidLevel', 'description': 'Fluid level in the trap when it was collected; High (above line); Low (below line) or Ok', 'range': 'string', 'aliases': ['fluid level'], 'mappings': []}, 'trapReset': {'slot_uri': 'neon:trapReset', 'description': 'Indicator of whether the trap was reset following sample collection', 'range': 'string', 'aliases': ['trap reset'], 'mappings': []}, 'processingDate': {'slot_uri': 'neon:processingDate', 'description': 'Date that sample was processed (i.e., sorted or pinned) in the domain lab', 'range': 'time', 'aliases': ['processing date'], 'mappings': []}, 'associatedSampleID': {'slot_uri': 'neon:associatedSampleID', 'description': 'Identifier for sample being processed (e.g., sorted or analyzed)', 'range': 'string', 'aliases': ['associated sample i d'], 'mappings': []}, 'etOHChangeDate': {'slot_uri': 'neon:etOHChangeDate', 'description': 'Date the ethanol rinse was completed', 'range': 'time', 'aliases': ['et o h change date'], 'mappings': []}, 'targetTaxaPresent': {'slot_uri': 'neon:targetTaxaPresent', 'description': 'Indicator of whether the sample contained individuals of the target taxa', 'range': 'string', 'aliases': ['target taxa present'], 'mappings': []}, 'sampleType': {'slot_uri': 'neon:sampleType', 'description': 'Type of sample', 'range': 'string', 'aliases': ['sample type'], 'mappings': []}, 'individualCount': {'slot_uri': 'neon:individualCount', 'description': 'Number of individuals of the same type', 'range': 'string', 'aliases': ['individual count'], 'mappings': []}, 'acceptedTaxonID': {'slot_uri': 'neon:acceptedTaxonID', 'description': 'Accepted species code, based on one or more sources', 'range': 'string', 'aliases': ['accepted taxon i d'], 'mappings': []}, 'morphospeciesID': {'slot_uri': 'neon:morphospeciesID', 'description': 'Identifier for morphospecies', 'range': 'string', 'aliases': ['morphospecies i d'], 'mappings': []}, 'identifiedBy': {'slot_uri': 'neon:identifiedBy', 'description': 'An identifier for the technician who identified the specimen', 'range': 'string', 'aliases': ['identified by'], 'mappings': []}, 'identifiedDate': {'slot_uri': 'neon:identifiedDate', 'description': 'Date on which the sample, individual, or specimen was identified', 'range': 'time', 'aliases': ['identified date'], 'mappings': []}, 'specimenSource': {'slot_uri': 'neon:specimenSource', 'description': 'Physical source from which individual was obtained', 'range': 'string', 'aliases': ['specimen source'], 'mappings': []}, 'daysOfTrapping': {'slot_uri': 'neon:daysOfTrapping', 'description': 'number of days between trap setting and collecting events', 'range': 'string', 'aliases': ['days of trapping'], 'mappings': []}, 'duplicateCollectionEventQF': {'slot_uri': 'neon:duplicateCollectionEventQF', 'description': 'Quality Flag for duplicate records at the collection event level', 'range': 'integer', 'aliases': ['duplicate collection event q f'], 'mappings': []}, 'compareSetCollectDateQF': {'slot_uri': 'neon:compareSetCollectDateQF', 'description': 'Quality Flag for comparing dates that trap was set versus sample collected', 'range': 'integer', 'aliases': ['compare set collect date q f'], 'mappings': []}, 'scientificNameAuthorship': {'slot_uri': 'neon:scientificNameAuthorship', 'description': 'Name of the individual(s) who designated the scientific name of the taxon', 'range': 'string', 'aliases': ['scientific name authorship'], 'mappings': ['http://rs.tdwg.org/dwc/terms/scientificNameAuthorship']}, 'duplicateSampleIDQF': {'slot_uri': 'neon:duplicateSampleIDQF', 'description': 'Quality Flag for duplicate records at the sample ID level', 'range': 'integer', 'aliases': ['duplicate sample i d q f'], 'mappings': []}, 'duplicateIndividualIDQF': {'slot_uri': 'neon:duplicateIndividualIDQF', 'description': 'Quality Flag for duplicate records at the individualID level', 'range': 'integer', 'aliases': ['duplicate individual i d q f'], 'mappings': []}, 'addDate': {'slot_uri': 'neon:addDate', 'description': 'Date that individual was added for monitoring', 'range': 'time', 'aliases': ['add date'], 'mappings': []}, 'transectMeter': {'slot_uri': 'neon:transectMeter', 'description': 'Distance (in meters) of individual from beginning of transect, when transect is walked in clockwise direction', 'range': 'double', 'aliases': ['transect meter'], 'mappings': []}, 'directionFromTransect': {'slot_uri': 'neon:directionFromTransect', 'description': 'Direction (right or left) of individual from transect, when transect is walked in a clockwise direction', 'range': 'string', 'aliases': ['direction from transect'], 'mappings': []}, 'ninetyDegreeDistance': {'slot_uri': 'neon:ninetyDegreeDistance', 'description': 'Perpendicular distance from transect to selected individual (in meters)', 'range': 'double', 'aliases': ['ninety degree distance'], 'mappings': []}, 'growthForm': {'slot_uri': 'neon:growthForm', 'description': 'The growth form classification', 'range': 'string', 'aliases': ['growth form'], 'mappings': []}, 'phenophaseName': {'slot_uri': 'neon:phenophaseName', 'description': 'Name of phenophase following NPN definitions', 'range': 'string', 'aliases': ['phenophase name'], 'mappings': []}, 'phenophaseStatus': {'slot_uri': 'neon:phenophaseStatus', 'description': 'Status of the phenophase: yes, no, uncertain or missed', 'range': 'string', 'aliases': ['phenophase status'], 'mappings': []}, 'phenophaseIntensityDefinition': {'slot_uri': 'neon:phenophaseIntensityDefinition', 'description': 'Quantity monitored for evaluating phenophase intensity, derived from NPN intensity questions', 'range': 'string', 'aliases': ['phenophase intensity definition'], 'mappings': []}, 'phenophaseIntensity': {'slot_uri': 'neon:phenophaseIntensity', 'description': 'Intensity value range for the corresponding phenophase', 'range': 'string', 'aliases': ['phenophase intensity'], 'mappings': []}, 'dropPlant': {'slot_uri': 'neon:dropPlant', 'description': 'identifies an individual plant that will no longer be monitored, drop= dropped for good, seasonalDrop= Seasonally dropped', 'range': 'string', 'aliases': ['drop plant'], 'mappings': []}, 'patchOrIndividual': {'slot_uri': 'neon:patchOrIndividual', 'description': 'Unit of measurement', 'range': 'string', 'aliases': ['patch or individual'], 'mappings': []}, 'canopyPosition': {'slot_uri': 'neon:canopyPosition', 'description': 'Vertical status of an individual relative to its neighbors', 'range': 'string', 'aliases': ['canopy position'], 'mappings': []}, 'plantStatus': {'slot_uri': 'neon:plantStatus', 'description': 'Physical status of individual: live, dead, lost', 'range': 'string', 'aliases': ['plant status'], 'mappings': []}, 'stemDiameter': {'slot_uri': 'neon:stemDiameter', 'description': 'Cross-sectional stem diameter', 'range': 'double', 'aliases': ['stem diameter'], 'mappings': []}, 'measurementHeight': {'slot_uri': 'neon:measurementHeight', 'description': 'Height at which stemDiameter is measured', 'range': 'double', 'aliases': ['measurement height'], 'mappings': []}, 'maxCanopyDiameter': {'slot_uri': 'neon:maxCanopyDiameter', 'description': 'Maximum canopy diameter of the individual or patch', 'range': 'double', 'aliases': ['max canopy diameter'], 'mappings': []}, 'ninetyCanopyDiameter': {'slot_uri': 'neon:ninetyCanopyDiameter', 'description': 'Canopy diameter perpendicular to maxCanopyDiameter', 'range': 'double', 'aliases': ['ninety canopy diameter'], 'mappings': []}, 'percentCover': {'slot_uri': 'neon:percentCover', 'description': 'Ocular estimate of cover of the index (e.g., species) as a percent', 'range': 'double', 'aliases': ['percent cover'], 'mappings': []}, 'height': {'slot_uri': 'neon:height', 'description': 'Highest point of an individual or average height of a patch', 'range': 'double', 'aliases': ['height'], 'mappings': []}, 'adultLeafLength': {'slot_uri': 'neon:adultLeafLength', 'description': 'The length of an average adult leaf', 'range': 'double', 'aliases': ['adult leaf length'], 'mappings': []}, 'diseaseStatus': {'slot_uri': 'neon:diseaseStatus', 'description': 'Disease status', 'range': 'string', 'aliases': ['disease status'], 'mappings': []}, 'diseaseType': {'slot_uri': 'neon:diseaseType', 'description': 'Specific disease present, if known', 'range': 'string', 'aliases': ['disease type'], 'mappings': []}, 'dropDate': {'slot_uri': 'neon:dropDate', 'description': 'Date that individual was dropped from monitoring', 'range': 'time', 'aliases': ['drop date'], 'mappings': []}, 'duplicateIndividualYearQF': {'slot_uri': 'neon:duplicateIndividualYearQF', 'description': 'Quality flag for duplicate records - Per Individual Per Year', 'range': 'integer', 'aliases': ['duplicate individual year q f'], 'mappings': []}, 'missingRecordsIndividPerYearQF': {'slot_uri': 'neon:missingRecordsIndividPerYearQF', 'description': 'Quality flag for missing records - Per Individual Per Year', 'range': 'integer', 'aliases': ['missing records individ per year q f'], 'mappings': []}, 'dayOfYear': {'slot_uri': 'neon:dayOfYear', 'description': 'The ordinal day of the year on which the object or observation was collected_(1 for January 1, 365 for December 31, except in a leap year, in which case it is 366)', 'range': 'string', 'aliases': ['day of year'], 'mappings': []}, 'duplicateIndividualDayStatusQF': {'slot_uri': 'neon:duplicateIndividualDayStatusQF', 'description': 'Quality flag for duplicate records - Individual Day Status Intensity', 'range': 'integer', 'aliases': ['duplicate individual day status q f'], 'mappings': []}, 'startSamplingProtocol': {'slot_uri': 'neon:startSamplingProtocol', 'description': 'The NEON document number and version in which information on the definition or method first used for measurement, observation, or collection can be found', 'range': 'string', 'aliases': ['start sampling protocol'], 'mappings': []}, 'endSamplingProtocol': {'slot_uri': 'neon:endSamplingProtocol', 'description': 'The NEON document number and version in which information on the definition or method last used for measurement, observation, or collection can be found', 'range': 'string', 'aliases': ['end sampling protocol'], 'mappings': []}, 'phenophaseDefinition': {'slot_uri': 'neon:phenophaseDefinition', 'description': 'The title for each phenophase', 'range': 'string', 'aliases': ['phenophase definition'], 'mappings': []}, 'intensityQuestion': {'slot_uri': 'neon:intensityQuestion', 'description': 'The full definition for each phenophase, what behaviors or attributes of each species indicate the phenophase is occurring', 'range': 'string', 'aliases': ['intensity question'], 'mappings': []}, 'subplotID': {'slot_uri': 'neon:subplotID', 'description': 'Identifier for the NEON subplot', 'range': 'string', 'aliases': ['subplot i d'], 'mappings': []}, 'divDataType': {'slot_uri': 'neon:divDataType', 'description': 'Identifier for the type of data recorded: plantSpecies or otherVariables', 'range': 'string', 'aliases': ['div data type'], 'mappings': []}, 'otherVariablesPresent': {'slot_uri': 'neon:otherVariablesPresent', 'description': 'Indicator of whether the sample contained other variables, such as abiotic, biotic, and non-vascular plant cover', 'range': 'string', 'aliases': ['other variables present'], 'mappings': []}, 'taxonIDRemarks': {'slot_uri': 'neon:taxonIDRemarks', 'description': 'Technician notes about the specific taxon; free text comments accompanying the record', 'range': 'string', 'aliases': ['taxon i d remarks'], 'mappings': []}, 'otherVariables': {'slot_uri': 'neon:otherVariables', 'description': 'Descriptor of other variables present in the sample, including abiotic, biotic, and non-vascular plant cover', 'range': 'string', 'aliases': ['other variables'], 'mappings': []}, 'heightPlantOver300cm': {'slot_uri': 'neon:heightPlantOver300cm', 'description': 'Indicator of whether individuals of the species in the sample are taller than 300 cm', 'range': 'string', 'aliases': ['height plant over300cm'], 'mappings': []}, 'heightPlantSpecies': {'slot_uri': 'neon:heightPlantSpecies', 'description': 'Ocular estimate of the height of the plant species', 'range': 'string', 'aliases': ['height plant species'], 'mappings': []}, 'morphospeciesIDRemarks': {'slot_uri': 'neon:morphospeciesIDRemarks', 'description': 'Technician notes about the morphospecies; free text comments accompanying the record', 'range': 'string', 'aliases': ['morphospecies i d remarks'], 'mappings': []}, 'duplicateTaxonIDBoutPer1m2QF': {'slot_uri': 'neon:duplicateTaxonIDBoutPer1m2QF', 'description': 'Quality flag for duplicate records - Per 1m2 nested subplot', 'range': 'integer', 'aliases': ['duplicate taxon i d bout per1m2 q f'], 'mappings': []}, 'missingRecords1m2QF': {'slot_uri': 'neon:missingRecords1m2QF', 'description': 'Quality flag for missing records - count of 1m2 subplots missing records', 'range': 'integer', 'aliases': ['missing records1m2 q f'], 'mappings': []}, 'duplicateVariablesBout1m2QF': {'slot_uri': 'neon:duplicateVariablesBout1m2QF', 'description': 'Quality flag for duplicate records for non-target taxa variables - Per 1m2 nested subplot ', 'range': 'integer', 'aliases': ['duplicate variables bout1m2 q f'], 'mappings': []}, 'missingRecords10m2QF': {'slot_uri': 'neon:missingRecords10m2QF', 'description': 'Quality flag for missing records - count of 10m2 subplots missing records', 'range': 'integer', 'aliases': ['missing records10m2 q f'], 'mappings': []}, 'duplicateTaxonIDPerBout10m2QF': {'slot_uri': 'neon:duplicateTaxonIDPerBout10m2QF', 'description': 'Quality flag for duplicate records - Per 10m2 nested subplot', 'range': 'integer', 'aliases': ['duplicate taxon i d per bout10m2 q f'], 'mappings': []}, 'missingRecords100m2QF': {'slot_uri': 'neon:missingRecords100m2QF', 'description': 'Quality flag for missing records - count of 100m2 subplots missing records', 'range': 'integer', 'aliases': ['missing records100m2 q f'], 'mappings': []}, 'duplicateTaxonIDPerBout100m2QF': {'slot_uri': 'neon:duplicateTaxonIDPerBout100m2QF', 'description': 'Quality flag for duplicate records - Per 100m2 subplot', 'range': 'integer', 'aliases': ['duplicate taxon i d per bout100m2 q f'], 'mappings': []}, 'clipID': {'slot_uri': 'neon:clipID', 'description': 'Unique identifier for the clip-harvest location within the plot', 'range': 'string', 'aliases': ['clip i d'], 'mappings': []}, 'exclosure': {'slot_uri': 'neon:exclosure', 'description': 'Identifies whether clip harvest took place in an area protected by a grazing exclosure', 'range': 'string', 'aliases': ['exclosure'], 'mappings': []}, 'herbGroup': {'slot_uri': 'neon:herbGroup', 'description': 'Categories indicating herbaceous plant functional group', 'range': 'string', 'aliases': ['herb group'], 'mappings': []}, 'bagCount': {'slot_uri': 'neon:bagCount', 'description': 'A per clipID count of sample bags transported from the field to the laboratory for processing', 'range': 'string', 'aliases': ['bag count'], 'mappings': []}, 'ovenInDate': {'slot_uri': 'neon:ovenInDate', 'description': 'Date and time biomass from clipID was placed in the drying oven', 'range': 'time', 'aliases': ['oven in date'], 'mappings': []}, 'ovenOutDate': {'slot_uri': 'neon:ovenOutDate', 'description': 'Date and time biomass from clipID was removed from the drying oven', 'range': 'time', 'aliases': ['oven out date'], 'mappings': []}, 'weighDate': {'slot_uri': 'neon:weighDate', 'description': 'Date that sample or subsample was weighed', 'range': 'time', 'aliases': ['weigh date'], 'mappings': []}, 'qaDryMass': {'slot_uri': 'neon:qaDryMass', 'description': "Indicates whether 'dryMass' value is associated with 'qa' measurement type", 'range': 'string', 'aliases': ['qa dry mass'], 'mappings': []}, 'dryMass': {'slot_uri': 'neon:dryMass', 'description': 'Oven-dried mass of sample or subsample', 'range': 'double', 'aliases': ['dry mass'], 'mappings': []}, 'subsampleID': {'slot_uri': 'neon:subsampleID', 'description': 'Unique identifier associated with each subsample per sampleID', 'range': 'string', 'aliases': ['subsample i d'], 'mappings': []}, 'subsampleType': {'slot_uri': 'neon:subsampleType', 'description': 'Indicates type of subsample generated', 'range': 'string', 'aliases': ['subsample type'], 'mappings': []}, 'plotType': {'slot_uri': 'neon:plotType', 'description': 'NEON plot type in which sampling occurred: tower, distributed or gradient', 'range': 'string', 'aliases': ['plot type'], 'mappings': []}, 'plotSize': {'slot_uri': 'neon:plotSize', 'description': 'Size (in square meters) of the plot or grid', 'range': 'double', 'aliases': ['plot size'], 'mappings': []}, 'easting': {'slot_uri': 'neon:easting', 'description': "Geographic coordinate specifying the east-west position of a point on the Earth's surface (Universal Transverse Mercator, UTM)", 'range': 'double', 'aliases': ['easting'], 'mappings': []}, 'northing': {'slot_uri': 'neon:northing', 'description': "Geographic coordinate specifying the north-south position of a point on the Earth's surface (Universal Transverse Mercator, UTM)", 'range': 'double', 'aliases': ['northing'], 'mappings': []}, 'utmZone': {'slot_uri': 'neon:utmZone', 'description': 'UTM zone', 'range': 'string', 'aliases': ['utm zone'], 'mappings': []}, 'slopeAspect': {'slot_uri': 'neon:slopeAspect', 'description': 'Representative azimuth of slope gradient (0-360 degrees)', 'range': 'double', 'aliases': ['slope aspect'], 'mappings': []}, 'slopeGradient': {'slot_uri': 'neon:slopeGradient', 'description': 'Representative inclination of slope in degrees', 'range': 'double', 'aliases': ['slope gradient'], 'mappings': []}, 'storageHours': {'slot_uri': 'neon:storageHours', 'description': 'Total number of hours clipped biomass was stored between collection and processing', 'range': 'double', 'aliases': ['storage hours'], 'mappings': []}, 'dryingHours': {'slot_uri': 'neon:dryingHours', 'description': 'Number of hours material was in a drying oven until dried to constant weight', 'range': 'double', 'aliases': ['drying hours'], 'mappings': []}, 'duplicateClipQF': {'slot_uri': 'neon:duplicateClipQF', 'description': 'Quality Flag indicating a duplicate record based on the clipID and eventID fields', 'range': 'integer', 'aliases': ['duplicate clip q f'], 'mappings': []}, 'multipleClipQF': {'slot_uri': 'neon:multipleClipQF', 'description': 'Quality Flag indicating a clipID was sampled more than once in the 12 months prior to date', 'range': 'integer', 'aliases': ['multiple clip q f'], 'mappings': []}, 'exclosureQF': {'slot_uri': 'neon:exclosureQF', 'description': 'Quality Flag indicating that it is unclear whether an exclosure was installed around the clipID', 'range': 'integer', 'aliases': ['exclosure q f'], 'mappings': []}, 'duplicateMassQF': {'slot_uri': 'neon:duplicateMassQF', 'description': 'Quality Flag indicating a duplicate record based on the sampleID field', 'range': 'integer', 'aliases': ['duplicate mass q f'], 'mappings': []}, 'missingRecordsMassQF': {'slot_uri': 'neon:missingRecordsMassQF', 'description': 'Quality Flag indicating the number of reported records is less than the number of expected records for a given clipID', 'range': 'integer', 'aliases': ['missing records mass q f'], 'mappings': []}, 'subsampleDate': {'slot_uri': 'neon:subsampleDate', 'description': 'Date or date and time the subsample was created', 'range': 'time', 'aliases': ['subsample date'], 'mappings': []}, 'duplicateProcessQF': {'slot_uri': 'neon:duplicateProcessQF', 'description': 'Quality Flag indicating a duplicate record based on the subsampleID field', 'range': 'integer', 'aliases': ['duplicate process q f'], 'mappings': []}, 'missingRecordsProcessQF': {'slot_uri': 'neon:missingRecordsProcessQF', 'description': 'Quality Flag indicating the number of reported records is less than the number of expected records for each herbGroup', 'range': 'integer', 'aliases': ['missing records process q f'], 'mappings': []}, 'clipCellNumber': {'slot_uri': 'neon:clipCellNumber', 'description': 'A numeric identifier for the clip-harvest cell in which herbaceous biomass was sampled', 'range': 'string', 'aliases': ['clip cell number'], 'mappings': []}, 'almucantarRadiance': {'slot_uri': 'neon:almucantarRadiance', 'description': 'Measured radiance at a specific angular view, defined by degrees', 'range': 'double', 'aliases': ['almucantar radiance'], 'mappings': []}, 'rawPrincipalPlaneRadiance': {'slot_uri': 'neon:rawPrincipalPlaneRadiance', 'description': 'Measured radiance at a specific principal plane, defined by degrees', 'range': 'double', 'aliases': ['raw principal plane radiance'], 'mappings': []}, 'PARMean': {'slot_uri': 'neon:PARMean', 'description': 'Arithmetic mean of photosynthetically active radiation', 'range': 'double', 'aliases': ['p a r mean'], 'mappings': []}, 'PARMinimum': {'slot_uri': 'neon:PARMinimum', 'description': 'Minimum photosynthetically active radiation', 'range': 'double', 'aliases': ['p a r minimum'], 'mappings': []}, 'PARMaximum': {'slot_uri': 'neon:PARMaximum', 'description': 'Maximum photosynthetically active radiation', 'range': 'double', 'aliases': ['p a r maximum'], 'mappings': []}, 'PARVariance': {'slot_uri': 'neon:PARVariance', 'description': 'Variance in photosynthetically active radiation', 'range': 'double', 'aliases': ['p a r variance'], 'mappings': []}, 'PARNumPts': {'slot_uri': 'neon:PARNumPts', 'description': 'Number of points used to calculate the arithmetic mean of photosynthetically active radiation', 'range': 'double', 'aliases': ['p a r num pts'], 'mappings': []}, 'PARExpUncert': {'slot_uri': 'neon:PARExpUncert', 'description': 'Expanded uncertainty for photosynthetically active radiation', 'range': 'double', 'aliases': ['p a r exp uncert'], 'mappings': []}, 'PARStdErMean': {'slot_uri': 'neon:PARStdErMean', 'description': 'Standard error of the mean for photosynthetically active radiation', 'range': 'double', 'aliases': ['p a r std er mean'], 'mappings': []}, 'PARRangeQAQCRpt': {'slot_uri': 'neon:PARRangeQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r range q a q c rpt'], 'mappings': []}, 'PARPersistenceQAQCRpt': {'slot_uri': 'neon:PARPersistenceQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r persistence q a q c rpt'], 'mappings': []}, 'PARStepQAQCRpt': {'slot_uri': 'neon:PARStepQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r step q a q c rpt'], 'mappings': []}, 'PARNullQAQCRpt': {'slot_uri': 'neon:PARNullQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r null q a q c rpt'], 'mappings': []}, 'PARGapQAQCRpt': {'slot_uri': 'neon:PARGapQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p a r gap q a q c rpt'], 'mappings': []}, 'PARConsistencyQAQCRpt': {'slot_uri': 'neon:PARConsistencyQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r consistency q a q c rpt'], 'mappings': []}, 'PARSpikeQAQCRpt': {'slot_uri': 'neon:PARSpikeQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r spike q a q c rpt'], 'mappings': []}, 'PARAlphaQAQCRpt': {'slot_uri': 'neon:PARAlphaQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r alpha q a q c rpt'], 'mappings': []}, 'PARBetaQAQCRpt': {'slot_uri': 'neon:PARBetaQAQCRpt', 'description': 'Photosynthetically active radiation quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r beta q a q c rpt'], 'mappings': []}, 'PARRangeFailQM': {'slot_uri': 'neon:PARRangeFailQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r range fail q m'], 'mappings': []}, 'PARRangePassQM': {'slot_uri': 'neon:PARRangePassQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r range pass q m'], 'mappings': []}, 'PARRangeNAQM': {'slot_uri': 'neon:PARRangeNAQM', 'description': 'Photosynthetically active radiation quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r range n a q m'], 'mappings': []}, 'PARPersistenceFailQM': {'slot_uri': 'neon:PARPersistenceFailQM', 'description': 'Photosynthetically active radiation quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r persistence fail q m'], 'mappings': []}, 'PARPersistencePassQM': {'slot_uri': 'neon:PARPersistencePassQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r persistence pass q m'], 'mappings': []}, 'PARPersistenceNAQM': {'slot_uri': 'neon:PARPersistenceNAQM', 'description': 'Photosynthetically active radiation quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r persistence n a q m'], 'mappings': []}, 'PARStepFailQM': {'slot_uri': 'neon:PARStepFailQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r step fail q m'], 'mappings': []}, 'PARStepPassQM': {'slot_uri': 'neon:PARStepPassQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r step pass q m'], 'mappings': []}, 'PARStepNAQM': {'slot_uri': 'neon:PARStepNAQM', 'description': 'Photosynthetically active radiation quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r step n a q m'], 'mappings': []}, 'PARNullFailQM': {'slot_uri': 'neon:PARNullFailQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r null fail q m'], 'mappings': []}, 'PARNullPassQM': {'slot_uri': 'neon:PARNullPassQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r null pass q m'], 'mappings': []}, 'PARNullNAQM': {'slot_uri': 'neon:PARNullNAQM', 'description': 'Photosynthetically active radiation quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r null n a q m'], 'mappings': []}, 'PARGapFailQM': {'slot_uri': 'neon:PARGapFailQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r gap fail q m'], 'mappings': []}, 'PARGapPassQM': {'slot_uri': 'neon:PARGapPassQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r gap pass q m'], 'mappings': []}, 'PARGapNAQM': {'slot_uri': 'neon:PARGapNAQM', 'description': 'Photosynthetically active radiation quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r gap n a q m'], 'mappings': []}, 'PARSpikeFailQM': {'slot_uri': 'neon:PARSpikeFailQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r spike fail q m'], 'mappings': []}, 'PARSpikePassQM': {'slot_uri': 'neon:PARSpikePassQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r spike pass q m'], 'mappings': []}, 'PARSpikeNAQM': {'slot_uri': 'neon:PARSpikeNAQM', 'description': 'Photosynthetically active radiation quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r spike n a q m'], 'mappings': []}, 'PARConsistencyFailQM': {'slot_uri': 'neon:PARConsistencyFailQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r consistency fail q m'], 'mappings': []}, 'PARConsistencyPassQM': {'slot_uri': 'neon:PARConsistencyPassQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r consistency pass q m'], 'mappings': []}, 'PARConsistencyNAQM': {'slot_uri': 'neon:PARConsistencyNAQM', 'description': 'Photosynthetically active radiation quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r consistency n a q m'], 'mappings': []}, 'PARAlphaQM': {'slot_uri': 'neon:PARAlphaQM', 'description': 'Photosynthetically active radiation quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p a r alpha q m'], 'mappings': []}, 'PARBetaQM': {'slot_uri': 'neon:PARBetaQM', 'description': 'Photosynthetically active radiation quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p a r beta q m'], 'mappings': []}, 'PARFinalQF': {'slot_uri': 'neon:PARFinalQF', 'description': 'Photosynthetically active radiation quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p a r final q f'], 'mappings': []}, 'outPARMean': {'slot_uri': 'neon:outPARMean', 'description': 'Arithmetic mean of outgoing photosynthetically active radiation', 'range': 'double', 'aliases': ['out p a r mean'], 'mappings': []}, 'outPARMinimum': {'slot_uri': 'neon:outPARMinimum', 'description': 'Minimum outgoing photosynthetically active radiation', 'range': 'double', 'aliases': ['out p a r minimum'], 'mappings': []}, 'outPARMaximum': {'slot_uri': 'neon:outPARMaximum', 'description': 'Maximum outgoing photosynthetically active radiation', 'range': 'double', 'aliases': ['out p a r maximum'], 'mappings': []}, 'outPARVariance': {'slot_uri': 'neon:outPARVariance', 'description': 'Variance in outgoing photosynthetically active radiation', 'range': 'double', 'aliases': ['out p a r variance'], 'mappings': []}, 'outPARNumPts': {'slot_uri': 'neon:outPARNumPts', 'description': 'Number of points used to calculate the arithmetic mean of outgoing photosynthetically active radiation', 'range': 'double', 'aliases': ['out p a r num pts'], 'mappings': []}, 'outPARExpUncert': {'slot_uri': 'neon:outPARExpUncert', 'description': 'Expanded uncertainty for outgoing photosynthetically active radiation', 'range': 'double', 'aliases': ['out p a r exp uncert'], 'mappings': []}, 'outPARStdErMean': {'slot_uri': 'neon:outPARStdErMean', 'description': 'Standard error of the mean for outgoing photosynthetically active radiation', 'range': 'double', 'aliases': ['out p a r std er mean'], 'mappings': []}, 'outPARRangeQAQCRpt': {'slot_uri': 'neon:outPARRangeQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realisitc value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r range q a q c rpt'], 'mappings': []}, 'outPARPersistenceQAQCRpt': {'slot_uri': 'neon:outPARPersistenceQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r persistence q a q c rpt'], 'mappings': []}, 'outPARStepQAQCRpt': {'slot_uri': 'neon:outPARStepQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r step q a q c rpt'], 'mappings': []}, 'outPARNullQAQCRpt': {'slot_uri': 'neon:outPARNullQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r null q a q c rpt'], 'mappings': []}, 'outPARGapQAQCRpt': {'slot_uri': 'neon:outPARGapQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['out p a r gap q a q c rpt'], 'mappings': []}, 'outPARConsistencyQAQCRpt': {'slot_uri': 'neon:outPARConsistencyQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r consistency q a q c rpt'], 'mappings': []}, 'outPARSpikeQAQCRpt': {'slot_uri': 'neon:outPARSpikeQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r spike q a q c rpt'], 'mappings': []}, 'outPARAlphaQAQCRpt': {'slot_uri': 'neon:outPARAlphaQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r alpha q a q c rpt'], 'mappings': []}, 'outPARBetaQAQCRpt': {'slot_uri': 'neon:outPARBetaQAQCRpt', 'description': 'Outgoing PAR quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r beta q a q c rpt'], 'mappings': []}, 'outPARRangeFailQM': {'slot_uri': 'neon:outPARRangeFailQM', 'description': 'Outgoing PAR quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r range fail q m'], 'mappings': []}, 'outPARRangePassQM': {'slot_uri': 'neon:outPARRangePassQM', 'description': 'Outgoing PAR quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r range pass q m'], 'mappings': []}, 'outPARRangeNAQM': {'slot_uri': 'neon:outPARRangeNAQM', 'description': 'Outgoing photosynthetically active radiation quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r range n a q m'], 'mappings': []}, 'outPARPersistenceFailQM': {'slot_uri': 'neon:outPARPersistenceFailQM', 'description': 'Outgoing PAR quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r persistence fail q m'], 'mappings': []}, 'outPARPersistencePassQM': {'slot_uri': 'neon:outPARPersistencePassQM', 'description': 'Outgoing PAR quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r persistence pass q m'], 'mappings': []}, 'outPARPersistenceNAQM': {'slot_uri': 'neon:outPARPersistenceNAQM', 'description': 'Outgoing PAR quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r persistence n a q m'], 'mappings': []}, 'outPARStepFailQM': {'slot_uri': 'neon:outPARStepFailQM', 'description': 'Outgoing PAR quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r step fail q m'], 'mappings': []}, 'outPARStepPassQM': {'slot_uri': 'neon:outPARStepPassQM', 'description': 'Outgoing PAR quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r step pass q m'], 'mappings': []}, 'outPARStepNAQM': {'slot_uri': 'neon:outPARStepNAQM', 'description': 'Outgoing PAR quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r step n a q m'], 'mappings': []}, 'outPARNullFailQM': {'slot_uri': 'neon:outPARNullFailQM', 'description': 'Outgoing PAR quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r null fail q m'], 'mappings': []}, 'outPARNullPassQM': {'slot_uri': 'neon:outPARNullPassQM', 'description': 'Outgoing PAR quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r null pass q m'], 'mappings': []}, 'outPARNullNAQM': {'slot_uri': 'neon:outPARNullNAQM', 'description': 'Outgoing PAR quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r null n a q m'], 'mappings': []}, 'outPARGapFailQM': {'slot_uri': 'neon:outPARGapFailQM', 'description': 'Outgoing PAR quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r gap fail q m'], 'mappings': []}, 'outPARGapPassQM': {'slot_uri': 'neon:outPARGapPassQM', 'description': 'Outgoing PAR quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r gap pass q m'], 'mappings': []}, 'outPARGapNAQM': {'slot_uri': 'neon:outPARGapNAQM', 'description': 'Outgoing PAR quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r gap n a q m'], 'mappings': []}, 'outPARSpikeFailQM': {'slot_uri': 'neon:outPARSpikeFailQM', 'description': 'Outgoing PAR quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r spike fail q m'], 'mappings': []}, 'outPARSpikePassQM': {'slot_uri': 'neon:outPARSpikePassQM', 'description': 'Outgoing PAR quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r spike pass q m'], 'mappings': []}, 'outPARSpikeNAQM': {'slot_uri': 'neon:outPARSpikeNAQM', 'description': 'Outgoing PAR quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r spike n a q m'], 'mappings': []}, 'outPARConsistencyFailQM': {'slot_uri': 'neon:outPARConsistencyFailQM', 'description': 'Outgoing PAR quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r consistency fail q m'], 'mappings': []}, 'outPARConsistencyPassQM': {'slot_uri': 'neon:outPARConsistencyPassQM', 'description': 'Outgoing PAR quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r consistency pass q m'], 'mappings': []}, 'outPARConsistencyNAQM': {'slot_uri': 'neon:outPARConsistencyNAQM', 'description': 'Outgoing PAR quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r consistency n a q m'], 'mappings': []}, 'outPARAlphaQM': {'slot_uri': 'neon:outPARAlphaQM', 'description': 'Outgoing PAR quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['out p a r alpha q m'], 'mappings': []}, 'outPARBetaQM': {'slot_uri': 'neon:outPARBetaQM', 'description': 'Outgoing PAR quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['out p a r beta q m'], 'mappings': []}, 'outPARFinalQF': {'slot_uri': 'neon:outPARFinalQF', 'description': 'Outgoing PAR quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['out p a r final q f'], 'mappings': []}, 'priPrecipBulk': {'slot_uri': 'neon:priPrecipBulk', 'description': 'Bulk primary precipitation', 'range': 'double', 'aliases': ['pri precip bulk'], 'mappings': []}, 'priPrecipExpUncert': {'slot_uri': 'neon:priPrecipExpUncert', 'description': 'Expanded uncertainty for primary precipitation', 'range': 'double', 'aliases': ['pri precip exp uncert'], 'mappings': []}, 'priPrecipStabilityQF': {'slot_uri': 'neon:priPrecipStabilityQF', 'description': 'Stability quality flag indicating whether or not the strain gauges were stable for a measurement period, (0 = stable, 1 = unstable, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['pri precip stability q f'], 'mappings': []}, 'priPrecipHeaterQF': {'slot_uri': 'neon:priPrecipHeaterQF', 'description': 'Primary precipitation heater quality flag indicating whether the heater was operational for a measurement period, (0 = off, 1 = on, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['pri precip heater q f'], 'mappings': []}, 'priPrecipAveragingQF': {'slot_uri': 'neon:priPrecipAveragingQF', 'description': 'Quality flag indicating how the precipitation value was calculated from the three strain gauges (0 = average of all three strain gauges; 1,2, and 4 = average of two of the three strain gauges; 3,5, and 6 = only one strain gauge was used; 7 = average is determined according to averaging2QF), detailed in NEON.DOC.000654', 'range': 'string', 'aliases': ['pri precip averaging q f'], 'mappings': []}, 'priPrecipAveraging2QF': {'slot_uri': 'neon:priPrecipAveraging2QF', 'description': 'Quality flag indicating how the precipitation value was calculated from the three strain gauges if averaging QF = 7 (0 = average of all three strain gauges; 1,2, and 4 = average of two of the three strain gauges; 3,5, and 6 = only one strain gauge was used; 7 =no precipitation value was calculated for that time period), detailed in NEON.DOC.000654', 'range': 'string', 'aliases': ['pri precip averaging2 q f'], 'mappings': []}, 'priPrecipRangeQF': {'slot_uri': 'neon:priPrecipRangeQF', 'description': 'Primary precipitation quality flag for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['pri precip range q f'], 'mappings': []}, 'priPrecipNullQF': {'slot_uri': 'neon:priPrecipNullQF', 'description': 'Primary precipitation quality flag for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['pri precip null q f'], 'mappings': []}, 'secPrecipBulk': {'slot_uri': 'neon:secPrecipBulk', 'description': 'Bulk secondary precipitation', 'range': 'double', 'aliases': ['sec precip bulk'], 'mappings': []}, 'secPrecipExpUncert': {'slot_uri': 'neon:secPrecipExpUncert', 'description': 'Expanded uncertainty for secondary precipitation', 'range': 'double', 'aliases': ['sec precip exp uncert'], 'mappings': []}, 'secPrecipHeaterQAQCRpt': {'slot_uri': 'neon:secPrecipHeaterQAQCRpt', 'description': "Secondary precipitation quality assurance and quality control report for the heater test, which indicates the state of the sensor's heaters, detailed in NEON.DOC.000816 (0=off, 1=base heater is active, 2=funnel heater is active, 3=both heaters are active)", 'range': 'string', 'aliases': ['sec precip heater q a q c rpt'], 'mappings': []}, 'secPrecipHeater0QM': {'slot_uri': 'neon:secPrecipHeater0QM', 'description': 'Secondary precipitation quality metric that summarizes when the heater flag was set to 0 over the averaging period, as a percent and detailed in NEON.DOC.000816', 'range': 'double', 'aliases': ['sec precip heater0 q m'], 'mappings': []}, 'secPrecipHeater1QM': {'slot_uri': 'neon:secPrecipHeater1QM', 'description': 'Secondary precipitation quality metric that summarizes when the heater flag was set to 1 over the averaging period, as a percent and detailed in NEON.DOC.000816', 'range': 'double', 'aliases': ['sec precip heater1 q m'], 'mappings': []}, 'secPrecipHeater2QM': {'slot_uri': 'neon:secPrecipHeater2QM', 'description': 'Secondary precipitation quality metric that summarizes when the heater flag was set to 2 over the averaging period, as a percent and detailed in NEON.DOC.000816', 'range': 'double', 'aliases': ['sec precip heater2 q m'], 'mappings': []}, 'secPrecipHeater3QM': {'slot_uri': 'neon:secPrecipHeater3QM', 'description': 'Secondary precipitation quality metric that summarizes when the heater flag was set to 3 over the averaging period, as a percent and detailed in NEON.DOC.000816', 'range': 'double', 'aliases': ['sec precip heater3 q m'], 'mappings': []}, 'tempSingleMean': {'slot_uri': 'neon:tempSingleMean', 'description': 'Arithmetic mean of single aspirated air temperature', 'range': 'double', 'aliases': ['temp single mean'], 'mappings': []}, 'tempSingleMinimum': {'slot_uri': 'neon:tempSingleMinimum', 'description': 'Minimum single aspirated air temperature', 'range': 'double', 'aliases': ['temp single minimum'], 'mappings': []}, 'tempSingleMaximum': {'slot_uri': 'neon:tempSingleMaximum', 'description': 'Maximum single aspirated air temperature', 'range': 'double', 'aliases': ['temp single maximum'], 'mappings': []}, 'tempSingleVariance': {'slot_uri': 'neon:tempSingleVariance', 'description': 'Variance in single aspirated air temperature', 'range': 'double', 'aliases': ['temp single variance'], 'mappings': []}, 'tempSingleNumPts': {'slot_uri': 'neon:tempSingleNumPts', 'description': 'Number of points used to calculate the arithmetic mean of single aspirated air temperature', 'range': 'double', 'aliases': ['temp single num pts'], 'mappings': []}, 'tempSingleExpUncert': {'slot_uri': 'neon:tempSingleExpUncert', 'description': 'Expanded uncertainty for single aspirated air temperature', 'range': 'double', 'aliases': ['temp single exp uncert'], 'mappings': []}, 'tempSingleStdErMean': {'slot_uri': 'neon:tempSingleStdErMean', 'description': 'Standard error of the mean for single aspirated air temperature', 'range': 'double', 'aliases': ['temp single std er mean'], 'mappings': []}, 'rangeQAQCRpt': {'slot_uri': 'neon:rangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realisitc value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['range q a q c rpt'], 'mappings': []}, 'persistenceQAQCRpt': {'slot_uri': 'neon:persistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['persistence q a q c rpt'], 'mappings': []}, 'stepQAQCRpt': {'slot_uri': 'neon:stepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['step q a q c rpt'], 'mappings': []}, 'nullQAQCRpt': {'slot_uri': 'neon:nullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['null q a q c rpt'], 'mappings': []}, 'gapQAQCRpt': {'slot_uri': 'neon:gapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['gap q a q c rpt'], 'mappings': []}, 'consistencyQAQCRpt': {'slot_uri': 'neon:consistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['consistency q a q c rpt'], 'mappings': []}, 'spikeQAQCRpt': {'slot_uri': 'neon:spikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['spike q a q c rpt'], 'mappings': []}, 'alphaQAQCRpt': {'slot_uri': 'neon:alphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['alpha q a q c rpt'], 'mappings': []}, 'betaQAQCRpt': {'slot_uri': 'neon:betaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['beta q a q c rpt'], 'mappings': []}, 'flowQAQCRpt': {'slot_uri': 'neon:flowQAQCRpt', 'description': 'Quality assurance and quality control report for the flow rate flag, which indicates whether the sensor is adequately aspirated, detailed in NEON.DOC.000646 and NEON.DOC.000654 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['flow q a q c rpt'], 'mappings': []}, 'heaterQAQCRpt': {'slot_uri': 'neon:heaterQAQCRpt', 'description': 'Quality assurance and quality control report for the heater flag, which indicates whether the heater was operational as described in the sensor specific algorithm theoretical basis document (ATBD) (1=on, 0=off, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['heater q a q c rpt'], 'mappings': []}, 'rangeFailQM': {'slot_uri': 'neon:rangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['range fail q m'], 'mappings': []}, 'rangePassQM': {'slot_uri': 'neon:rangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['range pass q m'], 'mappings': []}, 'rangeNAQM': {'slot_uri': 'neon:rangeNAQM', 'description': 'Quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['range n a q m'], 'mappings': []}, 'persistenceFailQM': {'slot_uri': 'neon:persistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['persistence fail q m'], 'mappings': []}, 'persistencePassQM': {'slot_uri': 'neon:persistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['persistence pass q m'], 'mappings': []}, 'persistenceNAQM': {'slot_uri': 'neon:persistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['persistence n a q m'], 'mappings': []}, 'stepFailQM': {'slot_uri': 'neon:stepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['step fail q m'], 'mappings': []}, 'stepPassQM': {'slot_uri': 'neon:stepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['step pass q m'], 'mappings': []}, 'stepNAQM': {'slot_uri': 'neon:stepNAQM', 'description': 'Quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['step n a q m'], 'mappings': []}, 'nullFailQM': {'slot_uri': 'neon:nullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['null fail q m'], 'mappings': []}, 'nullPassQM': {'slot_uri': 'neon:nullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['null pass q m'], 'mappings': []}, 'nullNAQM': {'slot_uri': 'neon:nullNAQM', 'description': 'Quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['null n a q m'], 'mappings': []}, 'gapFailQM': {'slot_uri': 'neon:gapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['gap fail q m'], 'mappings': []}, 'gapPassQM': {'slot_uri': 'neon:gapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['gap pass q m'], 'mappings': []}, 'gapNAQM': {'slot_uri': 'neon:gapNAQM', 'description': 'Quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['gap n a q m'], 'mappings': []}, 'spikeFailQM': {'slot_uri': 'neon:spikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['spike fail q m'], 'mappings': []}, 'spikePassQM': {'slot_uri': 'neon:spikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['spike pass q m'], 'mappings': []}, 'spikeNAQM': {'slot_uri': 'neon:spikeNAQM', 'description': 'Quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['spike n a q m'], 'mappings': []}, 'consistencyFailQM': {'slot_uri': 'neon:consistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['consistency fail q m'], 'mappings': []}, 'consistencyPassQM': {'slot_uri': 'neon:consistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['consistency pass q m'], 'mappings': []}, 'consistencyNAQM': {'slot_uri': 'neon:consistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['consistency n a q m'], 'mappings': []}, 'flowFailQM': {'slot_uri': 'neon:flowFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the flow rate test over the averaging period, as a percent', 'range': 'double', 'aliases': ['flow fail q m'], 'mappings': []}, 'flowPassQM': {'slot_uri': 'neon:flowPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the flow rate test over the averaging period, as a percent', 'range': 'double', 'aliases': ['flow pass q m'], 'mappings': []}, 'flowNAQM': {'slot_uri': 'neon:flowNAQM', 'description': 'Quality metric that summarizes when the flow rate test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['flow n a q m'], 'mappings': []}, 'heaterFailQM': {'slot_uri': 'neon:heaterFailQM', 'description': 'Quality metric that summarizes when the heater was on over the averaging period, as a percent', 'range': 'double', 'aliases': ['heater fail q m'], 'mappings': []}, 'heaterPassQM': {'slot_uri': 'neon:heaterPassQM', 'description': 'Quality metric that summarizes when the heater was off over the averaging period, as a percent', 'range': 'double', 'aliases': ['heater pass q m'], 'mappings': []}, 'heaterNAQM': {'slot_uri': 'neon:heaterNAQM', 'description': 'Quality metric that summarizes when the heater status was unknown over the averaging period, as a percent', 'range': 'double', 'aliases': ['heater n a q m'], 'mappings': []}, 'alphaQM': {'slot_uri': 'neon:alphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['alpha q m'], 'mappings': []}, 'betaQM': {'slot_uri': 'neon:betaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['beta q m'], 'mappings': []}, 'finalQF': {'slot_uri': 'neon:finalQF', 'description': 'Quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['final q f'], 'mappings': []}, 'tempTripleMean': {'slot_uri': 'neon:tempTripleMean', 'description': 'Arithmetic mean of triple aspirated air temperature', 'range': 'double', 'aliases': ['temp triple mean'], 'mappings': []}, 'tempTripleMinimum': {'slot_uri': 'neon:tempTripleMinimum', 'description': 'Minimum triple aspirated air temperature', 'range': 'double', 'aliases': ['temp triple minimum'], 'mappings': []}, 'tempTripleMaximum': {'slot_uri': 'neon:tempTripleMaximum', 'description': 'Maximum triple aspirated air temperature', 'range': 'double', 'aliases': ['temp triple maximum'], 'mappings': []}, 'tempTripleVariance': {'slot_uri': 'neon:tempTripleVariance', 'description': 'Variance in triple aspirated air temperature', 'range': 'double', 'aliases': ['temp triple variance'], 'mappings': []}, 'tempTripleNumPts': {'slot_uri': 'neon:tempTripleNumPts', 'description': 'Number of points used to calculate the arithmetic mean of triple aspirated air temperature', 'range': 'double', 'aliases': ['temp triple num pts'], 'mappings': []}, 'tempTripleExpUncert': {'slot_uri': 'neon:tempTripleExpUncert', 'description': 'Expanded uncertainty for triple aspirated air temperature', 'range': 'double', 'aliases': ['temp triple exp uncert'], 'mappings': []}, 'tempTripleStdErMean': {'slot_uri': 'neon:tempTripleStdErMean', 'description': 'Standard error of the mean for triple aspirated air temperature', 'range': 'double', 'aliases': ['temp triple std er mean'], 'mappings': []}, 'tempAveQAQCRpt': {'slot_uri': 'neon:tempAveQAQCRpt', 'description': 'Quality assurance and quality control report for the averaging flag (0=average of all three platinum resistor thermometers (PRTs); 1,2, 4, and 7=median of the three PRTs; 3,5, and 6=only two PRTs were used to compute the average), detailed in NEON.DOC.000654', 'range': 'string', 'aliases': ['temp ave q a q c rpt'], 'mappings': []}, 'tempAve0QM': {'slot_uri': 'neon:tempAve0QM', 'description': 'Quality metric that summarizes when the averaging flag was set to 0 over the averaging period, as a percent and detailed in NEON.DOC.000654', 'range': 'double', 'aliases': ['temp ave0 q m'], 'mappings': []}, 'tempAve1QM': {'slot_uri': 'neon:tempAve1QM', 'description': 'Quality metric that summarizes when the averaging flag was set to 1 over the averaging period, as a percent and detailed in NEON.DOC.000654', 'range': 'double', 'aliases': ['temp ave1 q m'], 'mappings': []}, 'tempAve2QM': {'slot_uri': 'neon:tempAve2QM', 'description': 'Quality metric that summarizes when the averaging flag was set to 2 over the averaging period, as a percent and detailed in NEON.DOC.000654', 'range': 'double', 'aliases': ['temp ave2 q m'], 'mappings': []}, 'tempAve3QM': {'slot_uri': 'neon:tempAve3QM', 'description': 'Quality metric that summarizes when the averaging flag was set to 3 over the averaging period, as a percent and detailed in NEON.DOC.000654', 'range': 'double', 'aliases': ['temp ave3 q m'], 'mappings': []}, 'tempAve4QM': {'slot_uri': 'neon:tempAve4QM', 'description': 'Quality metric that summarizes when the averaging flag was set to 4 over the averaging period, as a percent and detailed in NEON.DOC.000654', 'range': 'double', 'aliases': ['temp ave4 q m'], 'mappings': []}, 'tempAve5QM': {'slot_uri': 'neon:tempAve5QM', 'description': 'Quality metric that summarizes when the averaging flag was set to 5 over the averaging period, as a percent and detailed in NEON.DOC.000654', 'range': 'double', 'aliases': ['temp ave5 q m'], 'mappings': []}, 'tempAve6QM': {'slot_uri': 'neon:tempAve6QM', 'description': 'Quality metric that summarizes when the averaging flag was set to 6 over the averaging period, as a percent and detailed in NEON.DOC.000654', 'range': 'double', 'aliases': ['temp ave6 q m'], 'mappings': []}, 'tempAve7QM': {'slot_uri': 'neon:tempAve7QM', 'description': 'Quality metric that summarizes when the averaging flag was set to 7 over the averaging period, as a percent and detailed in NEON.DOC.000654', 'range': 'double', 'aliases': ['temp ave7 q m'], 'mappings': []}, 'linePARMean': {'slot_uri': 'neon:linePARMean', 'description': 'Arithmetic mean of spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r mean'], 'mappings': []}, 'linePARMinimum': {'slot_uri': 'neon:linePARMinimum', 'description': 'Minimum spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r minimum'], 'mappings': []}, 'linePARMaximum': {'slot_uri': 'neon:linePARMaximum', 'description': 'Maximum spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r maximum'], 'mappings': []}, 'linePARVariance': {'slot_uri': 'neon:linePARVariance', 'description': 'Variance in spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r variance'], 'mappings': []}, 'linePARNumPts': {'slot_uri': 'neon:linePARNumPts', 'description': 'Number of points used to calculate the arithmetic mean of spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r num pts'], 'mappings': []}, 'linePARSkewness': {'slot_uri': 'neon:linePARSkewness', 'description': 'The asymmetry of the distribution of spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r skewness'], 'mappings': []}, 'linePARKurtosis': {'slot_uri': 'neon:linePARKurtosis', 'description': 'The peakedness of the distribution of  spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r kurtosis'], 'mappings': []}, 'linePARExpUncert': {'slot_uri': 'neon:linePARExpUncert', 'description': 'Expanded uncertainty for spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r exp uncert'], 'mappings': []}, 'linePARStdErMean': {'slot_uri': 'neon:linePARStdErMean', 'description': 'Standard error of the mean for spatial average of photosynthetically active radiation over the sensor length', 'range': 'double', 'aliases': ['line p a r std er mean'], 'mappings': []}, 'windSpeedMean': {'slot_uri': 'neon:windSpeedMean', 'description': 'Arithmetic mean of wind speed', 'range': 'double', 'aliases': ['wind speed mean'], 'mappings': []}, 'windSpeedMinimum': {'slot_uri': 'neon:windSpeedMinimum', 'description': 'Minimum wind speed', 'range': 'double', 'aliases': ['wind speed minimum'], 'mappings': []}, 'windSpeedMaximum': {'slot_uri': 'neon:windSpeedMaximum', 'description': 'Maximum wind speed', 'range': 'double', 'aliases': ['wind speed maximum'], 'mappings': []}, 'windSpeedVariance': {'slot_uri': 'neon:windSpeedVariance', 'description': 'Variance in wind speed', 'range': 'double', 'aliases': ['wind speed variance'], 'mappings': []}, 'windSpeedNumPts': {'slot_uri': 'neon:windSpeedNumPts', 'description': 'Number of points used to calculate the arithmetic mean of wind speed', 'range': 'double', 'aliases': ['wind speed num pts'], 'mappings': []}, 'windSpeedExpUncert': {'slot_uri': 'neon:windSpeedExpUncert', 'description': 'Expanded uncertainty for wind speed', 'range': 'double', 'aliases': ['wind speed exp uncert'], 'mappings': []}, 'windSpeedStdErMean': {'slot_uri': 'neon:windSpeedStdErMean', 'description': 'Standard error of the mean for wind speed', 'range': 'double', 'aliases': ['wind speed std er mean'], 'mappings': []}, 'windSpeedRangeQAQCRpt': {'slot_uri': 'neon:windSpeedRangeQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed range q a q c rpt'], 'mappings': []}, 'windSpeedPersistenceQAQCRpt': {'slot_uri': 'neon:windSpeedPersistenceQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed persistence q a q c rpt'], 'mappings': []}, 'windSpeedStepQAQCRpt': {'slot_uri': 'neon:windSpeedStepQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed step q a q c rpt'], 'mappings': []}, 'windSpeedNullQAQCRpt': {'slot_uri': 'neon:windSpeedNullQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed null q a q c rpt'], 'mappings': []}, 'windSpeedGapQAQCRpt': {'slot_uri': 'neon:windSpeedGapQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['wind speed gap q a q c rpt'], 'mappings': []}, 'windSpeedConsistencyQAQCRpt': {'slot_uri': 'neon:windSpeedConsistencyQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed consistency q a q c rpt'], 'mappings': []}, 'windSpeedSpikeQAQCRpt': {'slot_uri': 'neon:windSpeedSpikeQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed spike q a q c rpt'], 'mappings': []}, 'windSpeedAlphaQAQCRpt': {'slot_uri': 'neon:windSpeedAlphaQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed alpha q a q c rpt'], 'mappings': []}, 'windSpeedBetaQAQCRpt': {'slot_uri': 'neon:windSpeedBetaQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed beta q a q c rpt'], 'mappings': []}, 'windSpeedRangeFailQM': {'slot_uri': 'neon:windSpeedRangeFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed range fail q m'], 'mappings': []}, 'windSpeedRangePassQM': {'slot_uri': 'neon:windSpeedRangePassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed range pass q m'], 'mappings': []}, 'windSpeedRangeNAQM': {'slot_uri': 'neon:windSpeedRangeNAQM', 'description': 'Wind speed quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed range n a q m'], 'mappings': []}, 'windSpeedPersistenceFailQM': {'slot_uri': 'neon:windSpeedPersistenceFailQM', 'description': 'Wind speed quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed persistence fail q m'], 'mappings': []}, 'windSpeedPersistencePassQM': {'slot_uri': 'neon:windSpeedPersistencePassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed persistence pass q m'], 'mappings': []}, 'windSpeedPersistenceNAQM': {'slot_uri': 'neon:windSpeedPersistenceNAQM', 'description': 'Wind speed quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed persistence n a q m'], 'mappings': []}, 'windSpeedStepFailQM': {'slot_uri': 'neon:windSpeedStepFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed step fail q m'], 'mappings': []}, 'windSpeedStepPassQM': {'slot_uri': 'neon:windSpeedStepPassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed step pass q m'], 'mappings': []}, 'windSpeedStepNAQM': {'slot_uri': 'neon:windSpeedStepNAQM', 'description': 'Wind speed quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed step n a q m'], 'mappings': []}, 'windSpeedNullFailQM': {'slot_uri': 'neon:windSpeedNullFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed null fail q m'], 'mappings': []}, 'windSpeedNullPassQM': {'slot_uri': 'neon:windSpeedNullPassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed null pass q m'], 'mappings': []}, 'windSpeedNullNAQM': {'slot_uri': 'neon:windSpeedNullNAQM', 'description': 'Wind speed quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed null n a q m'], 'mappings': []}, 'windSpeedGapFailQM': {'slot_uri': 'neon:windSpeedGapFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed gap fail q m'], 'mappings': []}, 'windSpeedGapPassQM': {'slot_uri': 'neon:windSpeedGapPassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed gap pass q m'], 'mappings': []}, 'windSpeedGapNAQM': {'slot_uri': 'neon:windSpeedGapNAQM', 'description': 'Wind speed quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed gap n a q m'], 'mappings': []}, 'windSpeedSpikeFailQM': {'slot_uri': 'neon:windSpeedSpikeFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed spike fail q m'], 'mappings': []}, 'windSpeedSpikePassQM': {'slot_uri': 'neon:windSpeedSpikePassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed spike pass q m'], 'mappings': []}, 'windSpeedSpikeNAQM': {'slot_uri': 'neon:windSpeedSpikeNAQM', 'description': 'Wind speed quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed spike n a q m'], 'mappings': []}, 'windSpeedConsistencyFailQM': {'slot_uri': 'neon:windSpeedConsistencyFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed consistency fail q m'], 'mappings': []}, 'windSpeedConsistencyPassQM': {'slot_uri': 'neon:windSpeedConsistencyPassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed consistency pass q m'], 'mappings': []}, 'windSpeedConsistencyNAQM': {'slot_uri': 'neon:windSpeedConsistencyNAQM', 'description': 'Wind speed quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed consistency n a q m'], 'mappings': []}, 'windSpeedAlphaQM': {'slot_uri': 'neon:windSpeedAlphaQM', 'description': 'Wind speed quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['wind speed alpha q m'], 'mappings': []}, 'windSpeedBetaQM': {'slot_uri': 'neon:windSpeedBetaQM', 'description': 'Wind speed quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['wind speed beta q m'], 'mappings': []}, 'windSpeedFinalQF': {'slot_uri': 'neon:windSpeedFinalQF', 'description': 'Wind speed quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['wind speed final q f'], 'mappings': []}, 'windDirMean': {'slot_uri': 'neon:windDirMean', 'description': 'Arithmetic mean of wind direction', 'range': 'double', 'aliases': ['wind dir mean'], 'mappings': []}, 'windDirVariance': {'slot_uri': 'neon:windDirVariance', 'description': 'Variance in wind direction', 'range': 'double', 'aliases': ['wind dir variance'], 'mappings': []}, 'windDirNumPts': {'slot_uri': 'neon:windDirNumPts', 'description': 'Number of points used to calculate the arithmetic mean of wind direction', 'range': 'double', 'aliases': ['wind dir num pts'], 'mappings': []}, 'windDirExpUncert': {'slot_uri': 'neon:windDirExpUncert', 'description': 'Expanded uncertainty for wind direction', 'range': 'double', 'aliases': ['wind dir exp uncert'], 'mappings': []}, 'windDirStdErMean': {'slot_uri': 'neon:windDirStdErMean', 'description': 'Standard error of the mean for wind direction', 'range': 'double', 'aliases': ['wind dir std er mean'], 'mappings': []}, 'windDirRangeQAQCRpt': {'slot_uri': 'neon:windDirRangeQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir range q a q c rpt'], 'mappings': []}, 'windDirPersistenceQAQCRpt': {'slot_uri': 'neon:windDirPersistenceQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir persistence q a q c rpt'], 'mappings': []}, 'windDirStepQAQCRpt': {'slot_uri': 'neon:windDirStepQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir step q a q c rpt'], 'mappings': []}, 'windDirNullQAQCRpt': {'slot_uri': 'neon:windDirNullQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir null q a q c rpt'], 'mappings': []}, 'windDirGapQAQCRpt': {'slot_uri': 'neon:windDirGapQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['wind dir gap q a q c rpt'], 'mappings': []}, 'windDirConsistencyQAQCRpt': {'slot_uri': 'neon:windDirConsistencyQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir consistency q a q c rpt'], 'mappings': []}, 'windDirSpikeQAQCRpt': {'slot_uri': 'neon:windDirSpikeQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir spike q a q c rpt'], 'mappings': []}, 'windDirAlphaQAQCRpt': {'slot_uri': 'neon:windDirAlphaQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir alpha q a q c rpt'], 'mappings': []}, 'windDirBetaQAQCRpt': {'slot_uri': 'neon:windDirBetaQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir beta q a q c rpt'], 'mappings': []}, 'windDirRangeFailQM': {'slot_uri': 'neon:windDirRangeFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir range fail q m'], 'mappings': []}, 'windDirRangePassQM': {'slot_uri': 'neon:windDirRangePassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir range pass q m'], 'mappings': []}, 'windDirRangeNAQM': {'slot_uri': 'neon:windDirRangeNAQM', 'description': 'Wind direction quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir range n a q m'], 'mappings': []}, 'windDirPersistenceFailQM': {'slot_uri': 'neon:windDirPersistenceFailQM', 'description': 'Wind direction quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir persistence fail q m'], 'mappings': []}, 'windDirPersistencePassQM': {'slot_uri': 'neon:windDirPersistencePassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir persistence pass q m'], 'mappings': []}, 'windDirPersistenceNAQM': {'slot_uri': 'neon:windDirPersistenceNAQM', 'description': 'Wind direction quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir persistence n a q m'], 'mappings': []}, 'windDirStepFailQM': {'slot_uri': 'neon:windDirStepFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir step fail q m'], 'mappings': []}, 'windDirStepPassQM': {'slot_uri': 'neon:windDirStepPassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir step pass q m'], 'mappings': []}, 'windDirStepNAQM': {'slot_uri': 'neon:windDirStepNAQM', 'description': 'Wind direction quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir step n a q m'], 'mappings': []}, 'windDirNullFailQM': {'slot_uri': 'neon:windDirNullFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir null fail q m'], 'mappings': []}, 'windDirNullPassQM': {'slot_uri': 'neon:windDirNullPassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir null pass q m'], 'mappings': []}, 'windDirNullNAQM': {'slot_uri': 'neon:windDirNullNAQM', 'description': 'Wind direction quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir null n a q m'], 'mappings': []}, 'windDirGapFailQM': {'slot_uri': 'neon:windDirGapFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir gap fail q m'], 'mappings': []}, 'windDirGapPassQM': {'slot_uri': 'neon:windDirGapPassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir gap pass q m'], 'mappings': []}, 'windDirGapNAQM': {'slot_uri': 'neon:windDirGapNAQM', 'description': 'Wind direction quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir gap n a q m'], 'mappings': []}, 'windDirSpikeFailQM': {'slot_uri': 'neon:windDirSpikeFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir spike fail q m'], 'mappings': []}, 'windDirSpikePassQM': {'slot_uri': 'neon:windDirSpikePassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir spike pass q m'], 'mappings': []}, 'windDirSpikeNAQM': {'slot_uri': 'neon:windDirSpikeNAQM', 'description': 'Wind direction quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir spike n a q m'], 'mappings': []}, 'windDirConsistencyFailQM': {'slot_uri': 'neon:windDirConsistencyFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir consistency fail q m'], 'mappings': []}, 'windDirConsistencyPassQM': {'slot_uri': 'neon:windDirConsistencyPassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir consistency pass q m'], 'mappings': []}, 'windDirConsistencyNAQM': {'slot_uri': 'neon:windDirConsistencyNAQM', 'description': 'Wind direction quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir consistency n a q m'], 'mappings': []}, 'windDirAlphaQM': {'slot_uri': 'neon:windDirAlphaQM', 'description': 'Wind direction quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['wind dir alpha q m'], 'mappings': []}, 'windDirBetaQM': {'slot_uri': 'neon:windDirBetaQM', 'description': 'Wind direction quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['wind dir beta q m'], 'mappings': []}, 'windDirFinalQF': {'slot_uri': 'neon:windDirFinalQF', 'description': 'Wind direction quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['wind dir final q f'], 'mappings': []}, 'staPresMean': {'slot_uri': 'neon:staPresMean', 'description': 'Arithmetic mean of station pressure', 'range': 'double', 'aliases': ['sta pres mean'], 'mappings': []}, 'staPresMinimum': {'slot_uri': 'neon:staPresMinimum', 'description': 'Minimum station pressure', 'range': 'double', 'aliases': ['sta pres minimum'], 'mappings': []}, 'staPresMaximum': {'slot_uri': 'neon:staPresMaximum', 'description': 'Maximum station pressure', 'range': 'double', 'aliases': ['sta pres maximum'], 'mappings': []}, 'staPresVariance': {'slot_uri': 'neon:staPresVariance', 'description': 'Variance in station pressure', 'range': 'double', 'aliases': ['sta pres variance'], 'mappings': []}, 'staPresNumPts': {'slot_uri': 'neon:staPresNumPts', 'description': 'Number of points used to calculate the arithmetic mean of station pressure', 'range': 'double', 'aliases': ['sta pres num pts'], 'mappings': []}, 'staPresExpUncert': {'slot_uri': 'neon:staPresExpUncert', 'description': 'Expanded uncertainty for station pressure', 'range': 'double', 'aliases': ['sta pres exp uncert'], 'mappings': []}, 'staPresStdErMean': {'slot_uri': 'neon:staPresStdErMean', 'description': 'Standard error of the mean for station pressure', 'range': 'double', 'aliases': ['sta pres std er mean'], 'mappings': []}, 'staPresRangeQAQCRpt': {'slot_uri': 'neon:staPresRangeQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres range q a q c rpt'], 'mappings': []}, 'staPresPersistenceQAQCRpt': {'slot_uri': 'neon:staPresPersistenceQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres persistence q a q c rpt'], 'mappings': []}, 'staPresStepQAQCRpt': {'slot_uri': 'neon:staPresStepQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres step q a q c rpt'], 'mappings': []}, 'staPresNullQAQCRpt': {'slot_uri': 'neon:staPresNullQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres null q a q c rpt'], 'mappings': []}, 'staPresGapQAQCRpt': {'slot_uri': 'neon:staPresGapQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['sta pres gap q a q c rpt'], 'mappings': []}, 'staPresConsistencyQAQCRpt': {'slot_uri': 'neon:staPresConsistencyQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres consistency q a q c rpt'], 'mappings': []}, 'staPresSpikeQAQCRpt': {'slot_uri': 'neon:staPresSpikeQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres spike q a q c rpt'], 'mappings': []}, 'staPresAlphaQAQCRpt': {'slot_uri': 'neon:staPresAlphaQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres alpha q a q c rpt'], 'mappings': []}, 'staPresBetaQAQCRpt': {'slot_uri': 'neon:staPresBetaQAQCRpt', 'description': 'Station pressure quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres beta q a q c rpt'], 'mappings': []}, 'staPresRangeFailQM': {'slot_uri': 'neon:staPresRangeFailQM', 'description': 'Station pressure quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres range fail q m'], 'mappings': []}, 'staPresRangePassQM': {'slot_uri': 'neon:staPresRangePassQM', 'description': 'Station pressure quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres range pass q m'], 'mappings': []}, 'staPresRangeNAQM': {'slot_uri': 'neon:staPresRangeNAQM', 'description': 'Station pressure quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres range n a q m'], 'mappings': []}, 'staPresPersistenceFailQM': {'slot_uri': 'neon:staPresPersistenceFailQM', 'description': 'Station pressure quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres persistence fail q m'], 'mappings': []}, 'staPresPersistencePassQM': {'slot_uri': 'neon:staPresPersistencePassQM', 'description': 'Station pressure quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres persistence pass q m'], 'mappings': []}, 'staPresPersistenceNAQM': {'slot_uri': 'neon:staPresPersistenceNAQM', 'description': 'Station pressure quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres persistence n a q m'], 'mappings': []}, 'staPresStepFailQM': {'slot_uri': 'neon:staPresStepFailQM', 'description': 'Station pressure quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres step fail q m'], 'mappings': []}, 'staPresStepPassQM': {'slot_uri': 'neon:staPresStepPassQM', 'description': 'Station pressure quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres step pass q m'], 'mappings': []}, 'staPresStepNAQM': {'slot_uri': 'neon:staPresStepNAQM', 'description': 'Station pressure quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres step n a q m'], 'mappings': []}, 'staPresNullFailQM': {'slot_uri': 'neon:staPresNullFailQM', 'description': 'Station pressure quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres null fail q m'], 'mappings': []}, 'staPresNullPassQM': {'slot_uri': 'neon:staPresNullPassQM', 'description': 'Station pressure quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres null pass q m'], 'mappings': []}, 'staPresNullNAQM': {'slot_uri': 'neon:staPresNullNAQM', 'description': 'Station pressure quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres null n a q m'], 'mappings': []}, 'staPresGapFailQM': {'slot_uri': 'neon:staPresGapFailQM', 'description': 'Station pressure quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres gap fail q m'], 'mappings': []}, 'staPresGapPassQM': {'slot_uri': 'neon:staPresGapPassQM', 'description': 'Station pressure quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres gap pass q m'], 'mappings': []}, 'staPresGapNAQM': {'slot_uri': 'neon:staPresGapNAQM', 'description': 'Station pressure quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres gap n a q m'], 'mappings': []}, 'staPresSpikeFailQM': {'slot_uri': 'neon:staPresSpikeFailQM', 'description': 'Station pressure quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres spike fail q m'], 'mappings': []}, 'staPresSpikePassQM': {'slot_uri': 'neon:staPresSpikePassQM', 'description': 'Station pressure quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres spike pass q m'], 'mappings': []}, 'staPresSpikeNAQM': {'slot_uri': 'neon:staPresSpikeNAQM', 'description': 'Station pressure quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres spike n a q m'], 'mappings': []}, 'staPresConsistencyFailQM': {'slot_uri': 'neon:staPresConsistencyFailQM', 'description': 'Station pressure quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres consistency fail q m'], 'mappings': []}, 'staPresConsistencyPassQM': {'slot_uri': 'neon:staPresConsistencyPassQM', 'description': 'Station pressure quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres consistency pass q m'], 'mappings': []}, 'staPresConsistencyNAQM': {'slot_uri': 'neon:staPresConsistencyNAQM', 'description': 'Station pressure quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres consistency n a q m'], 'mappings': []}, 'staPresAlphaQM': {'slot_uri': 'neon:staPresAlphaQM', 'description': 'Station pressure quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['sta pres alpha q m'], 'mappings': []}, 'staPresBetaQM': {'slot_uri': 'neon:staPresBetaQM', 'description': 'Station pressure quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['sta pres beta q m'], 'mappings': []}, 'staPresFinalQF': {'slot_uri': 'neon:staPresFinalQF', 'description': 'Station pressure quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['sta pres final q f'], 'mappings': []}, 'corPres': {'slot_uri': 'neon:corPres', 'description': 'Mean station pressure corrected to sea level', 'range': 'double', 'aliases': ['cor pres'], 'mappings': []}, 'corPresMinimum': {'slot_uri': 'neon:corPresMinimum', 'description': 'Minimum pressure corrected to sea level', 'range': 'double', 'aliases': ['cor pres minimum'], 'mappings': []}, 'corPresMaximum': {'slot_uri': 'neon:corPresMaximum', 'description': 'Maximum pressure corrected to sea level', 'range': 'double', 'aliases': ['cor pres maximum'], 'mappings': []}, 'corPresVariance': {'slot_uri': 'neon:corPresVariance', 'description': 'Variance in pressure corrected to sea level', 'range': 'double', 'aliases': ['cor pres variance'], 'mappings': []}, 'corPresNumPts': {'slot_uri': 'neon:corPresNumPts', 'description': 'Number of points used to calculate the arithmetic mean of pressure corrected to sea level', 'range': 'double', 'aliases': ['cor pres num pts'], 'mappings': []}, 'corPresExpUncert': {'slot_uri': 'neon:corPresExpUncert', 'description': 'Expanded uncertainty for pressure corrected to sea level', 'range': 'double', 'aliases': ['cor pres exp uncert'], 'mappings': []}, 'corPresStdErMean': {'slot_uri': 'neon:corPresStdErMean', 'description': 'Standard error of the mean for pressure corrected to sea level', 'range': 'double', 'aliases': ['cor pres std er mean'], 'mappings': []}, 'corPresRangeQAQCRpt': {'slot_uri': 'neon:corPresRangeQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cor pres range q a q c rpt'], 'mappings': []}, 'corPresPersistenceQAQCRpt': {'slot_uri': 'neon:corPresPersistenceQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cor pres persistence q a q c rpt'], 'mappings': []}, 'corPresStepQAQCRpt': {'slot_uri': 'neon:corPresStepQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cor pres step q a q c rpt'], 'mappings': []}, 'corPresNullQAQCRpt': {'slot_uri': 'neon:corPresNullQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cor pres null q a q c rpt'], 'mappings': []}, 'corPresGapQAQCRpt': {'slot_uri': 'neon:corPresGapQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['cor pres gap q a q c rpt'], 'mappings': []}, 'corPresConsistencyQAQCRpt': {'slot_uri': 'neon:corPresConsistencyQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cor pres consistency q a q c rpt'], 'mappings': []}, 'corPresSpikeQAQCRpt': {'slot_uri': 'neon:corPresSpikeQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cor pres spike q a q c rpt'], 'mappings': []}, 'corPresAlphaQAQCRpt': {'slot_uri': 'neon:corPresAlphaQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cor pres alpha q a q c rpt'], 'mappings': []}, 'corPresBetaQAQCRpt': {'slot_uri': 'neon:corPresBetaQAQCRpt', 'description': 'Pressure corrected to sea level quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cor pres beta q a q c rpt'], 'mappings': []}, 'corPresRangeFailQM': {'slot_uri': 'neon:corPresRangeFailQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres range fail q m'], 'mappings': []}, 'corPresRangePassQM': {'slot_uri': 'neon:corPresRangePassQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres range pass q m'], 'mappings': []}, 'corPresRangeNAQM': {'slot_uri': 'neon:corPresRangeNAQM', 'description': 'Pressure corrected to sea level quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres range n a q m'], 'mappings': []}, 'corPresPersistenceFailQM': {'slot_uri': 'neon:corPresPersistenceFailQM', 'description': 'Pressure corrected to sea level quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres persistence fail q m'], 'mappings': []}, 'corPresPersistencePassQM': {'slot_uri': 'neon:corPresPersistencePassQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres persistence pass q m'], 'mappings': []}, 'corPresPersistenceNAQM': {'slot_uri': 'neon:corPresPersistenceNAQM', 'description': 'Pressure corrected to sea level quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres persistence n a q m'], 'mappings': []}, 'corPresStepFailQM': {'slot_uri': 'neon:corPresStepFailQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres step fail q m'], 'mappings': []}, 'corPresStepPassQM': {'slot_uri': 'neon:corPresStepPassQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres step pass q m'], 'mappings': []}, 'corPresStepNAQM': {'slot_uri': 'neon:corPresStepNAQM', 'description': 'Pressure corrected to sea level quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres step n a q m'], 'mappings': []}, 'corPresNullFailQM': {'slot_uri': 'neon:corPresNullFailQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres null fail q m'], 'mappings': []}, 'corPresNullPassQM': {'slot_uri': 'neon:corPresNullPassQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres null pass q m'], 'mappings': []}, 'corPresNullNAQM': {'slot_uri': 'neon:corPresNullNAQM', 'description': 'Pressure corrected to sea level quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres null n a q m'], 'mappings': []}, 'corPresGapFailQM': {'slot_uri': 'neon:corPresGapFailQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres gap fail q m'], 'mappings': []}, 'corPresGapPassQM': {'slot_uri': 'neon:corPresGapPassQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres gap pass q m'], 'mappings': []}, 'corPresGapNAQM': {'slot_uri': 'neon:corPresGapNAQM', 'description': 'Pressure corrected to sea level quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres gap n a q m'], 'mappings': []}, 'corPresSpikeFailQM': {'slot_uri': 'neon:corPresSpikeFailQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres spike fail q m'], 'mappings': []}, 'corPresSpikePassQM': {'slot_uri': 'neon:corPresSpikePassQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres spike pass q m'], 'mappings': []}, 'corPresSpikeNAQM': {'slot_uri': 'neon:corPresSpikeNAQM', 'description': 'Pressure corrected to sea level quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres spike n a q m'], 'mappings': []}, 'corPresConsistencyFailQM': {'slot_uri': 'neon:corPresConsistencyFailQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres consistency fail q m'], 'mappings': []}, 'corPresConsistencyPassQM': {'slot_uri': 'neon:corPresConsistencyPassQM', 'description': 'Pressure corrected to sea level quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres consistency pass q m'], 'mappings': []}, 'corPresConsistencyNAQM': {'slot_uri': 'neon:corPresConsistencyNAQM', 'description': 'Pressure corrected to sea level quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['cor pres consistency n a q m'], 'mappings': []}, 'corPresAlphaQM': {'slot_uri': 'neon:corPresAlphaQM', 'description': 'Pressure corrected to sea level quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['cor pres alpha q m'], 'mappings': []}, 'corPresBetaQM': {'slot_uri': 'neon:corPresBetaQM', 'description': 'Pressure corrected to sea level quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['cor pres beta q m'], 'mappings': []}, 'corPresFinalQF': {'slot_uri': 'neon:corPresFinalQF', 'description': 'Pressure corrected to sea level quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.000653 and NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['cor pres final q f'], 'mappings': []}, 'difRadMean': {'slot_uri': 'neon:difRadMean', 'description': 'Arithmetic mean of diffuse radiation', 'range': 'double', 'aliases': ['dif rad mean'], 'mappings': []}, 'difRadMinimum': {'slot_uri': 'neon:difRadMinimum', 'description': 'Minimum diffuse radiation', 'range': 'double', 'aliases': ['dif rad minimum'], 'mappings': []}, 'difRadMaximum': {'slot_uri': 'neon:difRadMaximum', 'description': 'Maximum diffuse radiation', 'range': 'double', 'aliases': ['dif rad maximum'], 'mappings': []}, 'difRadVariance': {'slot_uri': 'neon:difRadVariance', 'description': 'Variance in diffuse radiation', 'range': 'double', 'aliases': ['dif rad variance'], 'mappings': []}, 'difRadNumPts': {'slot_uri': 'neon:difRadNumPts', 'description': 'Number of points used to calculate the arithmetic mean of diffuse radiation', 'range': 'double', 'aliases': ['dif rad num pts'], 'mappings': []}, 'difRadExpUncert': {'slot_uri': 'neon:difRadExpUncert', 'description': 'Expanded uncertainty for diffuse radiation', 'range': 'double', 'aliases': ['dif rad exp uncert'], 'mappings': []}, 'difRadStdErMean': {'slot_uri': 'neon:difRadStdErMean', 'description': 'Standard error of the mean for diffuse radiation', 'range': 'double', 'aliases': ['dif rad std er mean'], 'mappings': []}, 'difRadRangeQAQCRpt': {'slot_uri': 'neon:difRadRangeQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad range q a q c rpt'], 'mappings': []}, 'difRadPersistenceQAQCRpt': {'slot_uri': 'neon:difRadPersistenceQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad persistence q a q c rpt'], 'mappings': []}, 'difRadStepQAQCRpt': {'slot_uri': 'neon:difRadStepQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad step q a q c rpt'], 'mappings': []}, 'difRadNullQAQCRpt': {'slot_uri': 'neon:difRadNullQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad null q a q c rpt'], 'mappings': []}, 'difRadGapQAQCRpt': {'slot_uri': 'neon:difRadGapQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['dif rad gap q a q c rpt'], 'mappings': []}, 'difRadConsistencyQAQCRpt': {'slot_uri': 'neon:difRadConsistencyQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad consistency q a q c rpt'], 'mappings': []}, 'difRadSpikeQAQCRpt': {'slot_uri': 'neon:difRadSpikeQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad spike q a q c rpt'], 'mappings': []}, 'difRadAlphaQAQCRpt': {'slot_uri': 'neon:difRadAlphaQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad alpha q a q c rpt'], 'mappings': []}, 'difRadBetaQAQCRpt': {'slot_uri': 'neon:difRadBetaQAQCRpt', 'description': 'Diffuse radiation quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad beta q a q c rpt'], 'mappings': []}, 'difRadRangeFailQM': {'slot_uri': 'neon:difRadRangeFailQM', 'description': 'Diffuse radiation quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad range fail q m'], 'mappings': []}, 'difRadRangePassQM': {'slot_uri': 'neon:difRadRangePassQM', 'description': 'Diffuse radiation quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad range pass q m'], 'mappings': []}, 'difRadRangeNAQM': {'slot_uri': 'neon:difRadRangeNAQM', 'description': 'Diffuse radiation quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad range n a q m'], 'mappings': []}, 'difRadPersistenceFailQM': {'slot_uri': 'neon:difRadPersistenceFailQM', 'description': 'Diffuse radiation quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad persistence fail q m'], 'mappings': []}, 'difRadPersistencePassQM': {'slot_uri': 'neon:difRadPersistencePassQM', 'description': 'Diffuse radiation quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad persistence pass q m'], 'mappings': []}, 'difRadPersistenceNAQM': {'slot_uri': 'neon:difRadPersistenceNAQM', 'description': 'Diffuse radiation quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad persistence n a q m'], 'mappings': []}, 'difRadStepFailQM': {'slot_uri': 'neon:difRadStepFailQM', 'description': 'Diffuse radiation quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad step fail q m'], 'mappings': []}, 'difRadStepPassQM': {'slot_uri': 'neon:difRadStepPassQM', 'description': 'Diffuse radiation quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad step pass q m'], 'mappings': []}, 'difRadStepNAQM': {'slot_uri': 'neon:difRadStepNAQM', 'description': 'Diffuse radiation quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad step n a q m'], 'mappings': []}, 'difRadNullFailQM': {'slot_uri': 'neon:difRadNullFailQM', 'description': 'Diffuse radiation quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad null fail q m'], 'mappings': []}, 'difRadNullPassQM': {'slot_uri': 'neon:difRadNullPassQM', 'description': 'Diffuse radiation quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad null pass q m'], 'mappings': []}, 'difRadNullNAQM': {'slot_uri': 'neon:difRadNullNAQM', 'description': 'Diffuse radiation quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad null n a q m'], 'mappings': []}, 'difRadGapFailQM': {'slot_uri': 'neon:difRadGapFailQM', 'description': 'Diffuse radiation quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad gap fail q m'], 'mappings': []}, 'difRadGapPassQM': {'slot_uri': 'neon:difRadGapPassQM', 'description': 'Diffuse radiation quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad gap pass q m'], 'mappings': []}, 'difRadGapNAQM': {'slot_uri': 'neon:difRadGapNAQM', 'description': 'Diffuse radiation quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad gap n a q m'], 'mappings': []}, 'difRadSpikeFailQM': {'slot_uri': 'neon:difRadSpikeFailQM', 'description': 'Diffuse radiation quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad spike fail q m'], 'mappings': []}, 'difRadSpikePassQM': {'slot_uri': 'neon:difRadSpikePassQM', 'description': 'Diffuse radiation quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad spike pass q m'], 'mappings': []}, 'difRadSpikeNAQM': {'slot_uri': 'neon:difRadSpikeNAQM', 'description': 'Diffuse radiation quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad spike n a q m'], 'mappings': []}, 'difRadConsistencyFailQM': {'slot_uri': 'neon:difRadConsistencyFailQM', 'description': 'Diffuse radiation quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad consistency fail q m'], 'mappings': []}, 'difRadConsistencyPassQM': {'slot_uri': 'neon:difRadConsistencyPassQM', 'description': 'Diffuse radiation quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad consistency pass q m'], 'mappings': []}, 'difRadConsistencyNAQM': {'slot_uri': 'neon:difRadConsistencyNAQM', 'description': 'Diffuse radiation quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad consistency n a q m'], 'mappings': []}, 'difRadAlphaQM': {'slot_uri': 'neon:difRadAlphaQM', 'description': 'Diffuse radiation quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['dif rad alpha q m'], 'mappings': []}, 'difRadBetaQM': {'slot_uri': 'neon:difRadBetaQM', 'description': 'Diffuse radiation quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['dif rad beta q m'], 'mappings': []}, 'difRadFinalQF': {'slot_uri': 'neon:difRadFinalQF', 'description': 'Diffuse radiation quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['dif rad final q f'], 'mappings': []}, 'dirRadMean': {'slot_uri': 'neon:dirRadMean', 'description': 'Arithmetic mean of direct radiation', 'range': 'double', 'aliases': ['dir rad mean'], 'mappings': []}, 'dirRadMinimum': {'slot_uri': 'neon:dirRadMinimum', 'description': 'Minimum direct radiation', 'range': 'double', 'aliases': ['dir rad minimum'], 'mappings': []}, 'dirRadMaximum': {'slot_uri': 'neon:dirRadMaximum', 'description': 'Maximum direct radiation', 'range': 'double', 'aliases': ['dir rad maximum'], 'mappings': []}, 'dirRadVariance': {'slot_uri': 'neon:dirRadVariance', 'description': 'Variance in direct radiation', 'range': 'double', 'aliases': ['dir rad variance'], 'mappings': []}, 'dirRadNumPts': {'slot_uri': 'neon:dirRadNumPts', 'description': 'Number of points used to calculate the arithmetic mean of direct radiation', 'range': 'double', 'aliases': ['dir rad num pts'], 'mappings': []}, 'dirRadExpUncert': {'slot_uri': 'neon:dirRadExpUncert', 'description': 'Expanded uncertainty for direct radiation', 'range': 'double', 'aliases': ['dir rad exp uncert'], 'mappings': []}, 'dirRadStdErMean': {'slot_uri': 'neon:dirRadStdErMean', 'description': 'Standard error of the mean for direct radiation', 'range': 'double', 'aliases': ['dir rad std er mean'], 'mappings': []}, 'dirRadRangeQAQCRpt': {'slot_uri': 'neon:dirRadRangeQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad range q a q c rpt'], 'mappings': []}, 'dirRadPersistenceQAQCRpt': {'slot_uri': 'neon:dirRadPersistenceQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad persistence q a q c rpt'], 'mappings': []}, 'dirRadStepQAQCRpt': {'slot_uri': 'neon:dirRadStepQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad step q a q c rpt'], 'mappings': []}, 'dirRadNullQAQCRpt': {'slot_uri': 'neon:dirRadNullQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad null q a q c rpt'], 'mappings': []}, 'dirRadGapQAQCRpt': {'slot_uri': 'neon:dirRadGapQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['dir rad gap q a q c rpt'], 'mappings': []}, 'dirRadConsistencyQAQCRpt': {'slot_uri': 'neon:dirRadConsistencyQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad consistency q a q c rpt'], 'mappings': []}, 'dirRadSpikeQAQCRpt': {'slot_uri': 'neon:dirRadSpikeQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad spike q a q c rpt'], 'mappings': []}, 'dirRadAlphaQAQCRpt': {'slot_uri': 'neon:dirRadAlphaQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad alpha q a q c rpt'], 'mappings': []}, 'dirRadBetaQAQCRpt': {'slot_uri': 'neon:dirRadBetaQAQCRpt', 'description': 'Direct radiation quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad beta q a q c rpt'], 'mappings': []}, 'dirRadRangeFailQM': {'slot_uri': 'neon:dirRadRangeFailQM', 'description': 'Direct radiation quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad range fail q m'], 'mappings': []}, 'dirRadRangePassQM': {'slot_uri': 'neon:dirRadRangePassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad range pass q m'], 'mappings': []}, 'dirRadRangeNAQM': {'slot_uri': 'neon:dirRadRangeNAQM', 'description': 'Direct radiation quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad range n a q m'], 'mappings': []}, 'dirRadPersistenceFailQM': {'slot_uri': 'neon:dirRadPersistenceFailQM', 'description': 'Direct radiation quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad persistence fail q m'], 'mappings': []}, 'dirRadPersistencePassQM': {'slot_uri': 'neon:dirRadPersistencePassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad persistence pass q m'], 'mappings': []}, 'dirRadPersistenceNAQM': {'slot_uri': 'neon:dirRadPersistenceNAQM', 'description': 'Direct radiation quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad persistence n a q m'], 'mappings': []}, 'dirRadStepFailQM': {'slot_uri': 'neon:dirRadStepFailQM', 'description': 'Direct radiation quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad step fail q m'], 'mappings': []}, 'dirRadStepPassQM': {'slot_uri': 'neon:dirRadStepPassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad step pass q m'], 'mappings': []}, 'dirRadStepNAQM': {'slot_uri': 'neon:dirRadStepNAQM', 'description': 'Direct radiation quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad step n a q m'], 'mappings': []}, 'dirRadNullFailQM': {'slot_uri': 'neon:dirRadNullFailQM', 'description': 'Direct radiation quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad null fail q m'], 'mappings': []}, 'dirRadNullPassQM': {'slot_uri': 'neon:dirRadNullPassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad null pass q m'], 'mappings': []}, 'dirRadNullNAQM': {'slot_uri': 'neon:dirRadNullNAQM', 'description': 'Direct radiation quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad null n a q m'], 'mappings': []}, 'dirRadGapFailQM': {'slot_uri': 'neon:dirRadGapFailQM', 'description': 'Direct radiation quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad gap fail q m'], 'mappings': []}, 'dirRadGapPassQM': {'slot_uri': 'neon:dirRadGapPassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad gap pass q m'], 'mappings': []}, 'dirRadGapNAQM': {'slot_uri': 'neon:dirRadGapNAQM', 'description': 'Direct radiation quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad gap n a q m'], 'mappings': []}, 'dirRadSpikeFailQM': {'slot_uri': 'neon:dirRadSpikeFailQM', 'description': 'Direct radiation quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad spike fail q m'], 'mappings': []}, 'dirRadSpikePassQM': {'slot_uri': 'neon:dirRadSpikePassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad spike pass q m'], 'mappings': []}, 'dirRadSpikeNAQM': {'slot_uri': 'neon:dirRadSpikeNAQM', 'description': 'Direct radiation quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad spike n a q m'], 'mappings': []}, 'dirRadConsistencyFailQM': {'slot_uri': 'neon:dirRadConsistencyFailQM', 'description': 'Direct radiation quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad consistency fail q m'], 'mappings': []}, 'dirRadConsistencyPassQM': {'slot_uri': 'neon:dirRadConsistencyPassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad consistency pass q m'], 'mappings': []}, 'dirRadConsistencyNAQM': {'slot_uri': 'neon:dirRadConsistencyNAQM', 'description': 'Direct radiation quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad consistency n a q m'], 'mappings': []}, 'dirRadAlphaQM': {'slot_uri': 'neon:dirRadAlphaQM', 'description': 'Direct radiation quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['dir rad alpha q m'], 'mappings': []}, 'dirRadBetaQM': {'slot_uri': 'neon:dirRadBetaQM', 'description': 'Direct radiation quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['dir rad beta q m'], 'mappings': []}, 'dirRadFinalQF': {'slot_uri': 'neon:dirRadFinalQF', 'description': 'Direct radiation quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['dir rad final q f'], 'mappings': []}, 'gloRadMean': {'slot_uri': 'neon:gloRadMean', 'description': 'Arithmetic mean of global radiation', 'range': 'double', 'aliases': ['glo rad mean'], 'mappings': []}, 'gloRadMinimum': {'slot_uri': 'neon:gloRadMinimum', 'description': 'Minimum global radiation', 'range': 'double', 'aliases': ['glo rad minimum'], 'mappings': []}, 'gloRadMaximum': {'slot_uri': 'neon:gloRadMaximum', 'description': 'Maximum global radiation', 'range': 'double', 'aliases': ['glo rad maximum'], 'mappings': []}, 'gloRadVariance': {'slot_uri': 'neon:gloRadVariance', 'description': 'Variance in global radiation', 'range': 'double', 'aliases': ['glo rad variance'], 'mappings': []}, 'gloRadNumPts': {'slot_uri': 'neon:gloRadNumPts', 'description': 'Number of points used to calculate the arithmetic mean of global radiation', 'range': 'double', 'aliases': ['glo rad num pts'], 'mappings': []}, 'gloRadExpUncert': {'slot_uri': 'neon:gloRadExpUncert', 'description': 'Expanded uncertainty for global radiation', 'range': 'double', 'aliases': ['glo rad exp uncert'], 'mappings': []}, 'gloRadStdErMean': {'slot_uri': 'neon:gloRadStdErMean', 'description': 'Standard error of the mean for global radiation', 'range': 'double', 'aliases': ['glo rad std er mean'], 'mappings': []}, 'gloRadRangeQAQCRpt': {'slot_uri': 'neon:gloRadRangeQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad range q a q c rpt'], 'mappings': []}, 'gloRadPersistenceQAQCRpt': {'slot_uri': 'neon:gloRadPersistenceQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad persistence q a q c rpt'], 'mappings': []}, 'gloRadStepQAQCRpt': {'slot_uri': 'neon:gloRadStepQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad step q a q c rpt'], 'mappings': []}, 'gloRadNullQAQCRpt': {'slot_uri': 'neon:gloRadNullQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad null q a q c rpt'], 'mappings': []}, 'gloRadGapQAQCRpt': {'slot_uri': 'neon:gloRadGapQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['glo rad gap q a q c rpt'], 'mappings': []}, 'gloRadConsistencyQAQCRpt': {'slot_uri': 'neon:gloRadConsistencyQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad consistency q a q c rpt'], 'mappings': []}, 'gloRadSpikeQAQCRpt': {'slot_uri': 'neon:gloRadSpikeQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad spike q a q c rpt'], 'mappings': []}, 'gloRadAlphaQAQCRpt': {'slot_uri': 'neon:gloRadAlphaQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad alpha q a q c rpt'], 'mappings': []}, 'gloRadBetaQAQCRpt': {'slot_uri': 'neon:gloRadBetaQAQCRpt', 'description': 'Global radiation quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad beta q a q c rpt'], 'mappings': []}, 'gloRadRangeFailQM': {'slot_uri': 'neon:gloRadRangeFailQM', 'description': 'Global radiation quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad range fail q m'], 'mappings': []}, 'gloRadRangePassQM': {'slot_uri': 'neon:gloRadRangePassQM', 'description': 'Global radiation quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad range pass q m'], 'mappings': []}, 'gloRadRangeNAQM': {'slot_uri': 'neon:gloRadRangeNAQM', 'description': 'Global radiation quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad range n a q m'], 'mappings': []}, 'gloRadPersistenceFailQM': {'slot_uri': 'neon:gloRadPersistenceFailQM', 'description': 'Global radiation quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad persistence fail q m'], 'mappings': []}, 'gloRadPersistencePassQM': {'slot_uri': 'neon:gloRadPersistencePassQM', 'description': 'Global radiation quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad persistence pass q m'], 'mappings': []}, 'gloRadPersistenceNAQM': {'slot_uri': 'neon:gloRadPersistenceNAQM', 'description': 'Global radiation quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad persistence n a q m'], 'mappings': []}, 'gloRadStepFailQM': {'slot_uri': 'neon:gloRadStepFailQM', 'description': 'Global radiation quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad step fail q m'], 'mappings': []}, 'gloRadStepPassQM': {'slot_uri': 'neon:gloRadStepPassQM', 'description': 'Global radiation quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad step pass q m'], 'mappings': []}, 'gloRadStepNAQM': {'slot_uri': 'neon:gloRadStepNAQM', 'description': 'Global radiation quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad step n a q m'], 'mappings': []}, 'gloRadNullFailQM': {'slot_uri': 'neon:gloRadNullFailQM', 'description': 'Global radiation quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad null fail q m'], 'mappings': []}, 'gloRadNullPassQM': {'slot_uri': 'neon:gloRadNullPassQM', 'description': 'Global radiation quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad null pass q m'], 'mappings': []}, 'gloRadNullNAQM': {'slot_uri': 'neon:gloRadNullNAQM', 'description': 'Global radiation quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad null n a q m'], 'mappings': []}, 'gloRadGapFailQM': {'slot_uri': 'neon:gloRadGapFailQM', 'description': 'Global radiation quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad gap fail q m'], 'mappings': []}, 'gloRadGapPassQM': {'slot_uri': 'neon:gloRadGapPassQM', 'description': 'Global radiation quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad gap pass q m'], 'mappings': []}, 'gloRadGapNAQM': {'slot_uri': 'neon:gloRadGapNAQM', 'description': 'Global radiation quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad gap n a q m'], 'mappings': []}, 'gloRadSpikeFailQM': {'slot_uri': 'neon:gloRadSpikeFailQM', 'description': 'Global radiation quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad spike fail q m'], 'mappings': []}, 'gloRadSpikePassQM': {'slot_uri': 'neon:gloRadSpikePassQM', 'description': 'Global radiation quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad spike pass q m'], 'mappings': []}, 'gloRadSpikeNAQM': {'slot_uri': 'neon:gloRadSpikeNAQM', 'description': 'Global radiation quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad spike n a q m'], 'mappings': []}, 'gloRadConsistencyFailQM': {'slot_uri': 'neon:gloRadConsistencyFailQM', 'description': 'Global radiation quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad consistency fail q m'], 'mappings': []}, 'gloRadConsistencyPassQM': {'slot_uri': 'neon:gloRadConsistencyPassQM', 'description': 'Global radiation quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad consistency pass q m'], 'mappings': []}, 'gloRadConsistencyNAQM': {'slot_uri': 'neon:gloRadConsistencyNAQM', 'description': 'Global radiation quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad consistency n a q m'], 'mappings': []}, 'gloRadAlphaQM': {'slot_uri': 'neon:gloRadAlphaQM', 'description': 'Global radiation quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['glo rad alpha q m'], 'mappings': []}, 'gloRadBetaQM': {'slot_uri': 'neon:gloRadBetaQM', 'description': 'Global radiation quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['glo rad beta q m'], 'mappings': []}, 'gloRadFinalQF': {'slot_uri': 'neon:gloRadFinalQF', 'description': 'Global radiation quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['glo rad final q f'], 'mappings': []}, 'sunPres': {'slot_uri': 'neon:sunPres', 'description': 'Sun presence as calculated as described in NEON.DOC.000815 (1 = sun presence; 0 = no sun presence)', 'range': 'double', 'aliases': ['sun pres'], 'mappings': []}, 'sunPresNumPts': {'slot_uri': 'neon:sunPresNumPts', 'description': 'Number of points used to calculate sun presence', 'range': 'double', 'aliases': ['sun pres num pts'], 'mappings': []}, 'RHMean': {'slot_uri': 'neon:RHMean', 'description': 'Arithmetic mean of relative humidity', 'range': 'double', 'aliases': ['r h mean'], 'mappings': []}, 'RHMinimum': {'slot_uri': 'neon:RHMinimum', 'description': 'Minimum relative humidity', 'range': 'double', 'aliases': ['r h minimum'], 'mappings': []}, 'RHMaximum': {'slot_uri': 'neon:RHMaximum', 'description': 'Maximum relative humidity', 'range': 'double', 'aliases': ['r h maximum'], 'mappings': []}, 'RHVariance': {'slot_uri': 'neon:RHVariance', 'description': 'Variance in relative humidity', 'range': 'double', 'aliases': ['r h variance'], 'mappings': []}, 'RHNumPts': {'slot_uri': 'neon:RHNumPts', 'description': 'Number of points used to calculate the arithmetic mean of relative humidity', 'range': 'double', 'aliases': ['r h num pts'], 'mappings': []}, 'RHExpUncert': {'slot_uri': 'neon:RHExpUncert', 'description': 'Expanded uncertainty for relative humidity', 'range': 'double', 'aliases': ['r h exp uncert'], 'mappings': []}, 'RHStdErMean': {'slot_uri': 'neon:RHStdErMean', 'description': 'Standard error of the mean for relative humidity', 'range': 'double', 'aliases': ['r h std er mean'], 'mappings': []}, 'RHRangeQAQCRpt': {'slot_uri': 'neon:RHRangeQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h range q a q c rpt'], 'mappings': []}, 'RHPersistenceQAQCRpt': {'slot_uri': 'neon:RHPersistenceQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h persistence q a q c rpt'], 'mappings': []}, 'RHStepQAQCRpt': {'slot_uri': 'neon:RHStepQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h step q a q c rpt'], 'mappings': []}, 'RHNullQAQCRpt': {'slot_uri': 'neon:RHNullQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h null q a q c rpt'], 'mappings': []}, 'RHGapQAQCRpt': {'slot_uri': 'neon:RHGapQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['r h gap q a q c rpt'], 'mappings': []}, 'RHConsistencyQAQCRpt': {'slot_uri': 'neon:RHConsistencyQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h consistency q a q c rpt'], 'mappings': []}, 'RHSpikeQAQCRpt': {'slot_uri': 'neon:RHSpikeQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h spike q a q c rpt'], 'mappings': []}, 'RHAlphaQAQCRpt': {'slot_uri': 'neon:RHAlphaQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h alpha q a q c rpt'], 'mappings': []}, 'RHBetaQAQCRpt': {'slot_uri': 'neon:RHBetaQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h beta q a q c rpt'], 'mappings': []}, 'RHRangeFailQM': {'slot_uri': 'neon:RHRangeFailQM', 'description': 'Relative humidity quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h range fail q m'], 'mappings': []}, 'RHRangePassQM': {'slot_uri': 'neon:RHRangePassQM', 'description': 'Relative humidity quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h range pass q m'], 'mappings': []}, 'RHRangeNAQM': {'slot_uri': 'neon:RHRangeNAQM', 'description': 'Relative humidity quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h range n a q m'], 'mappings': []}, 'RHPersistenceFailQM': {'slot_uri': 'neon:RHPersistenceFailQM', 'description': 'Relative humidity quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h persistence fail q m'], 'mappings': []}, 'RHPersistencePassQM': {'slot_uri': 'neon:RHPersistencePassQM', 'description': 'Relative humidity quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h persistence pass q m'], 'mappings': []}, 'RHPersistenceNAQM': {'slot_uri': 'neon:RHPersistenceNAQM', 'description': 'Relative humidity quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h persistence n a q m'], 'mappings': []}, 'RHStepFailQM': {'slot_uri': 'neon:RHStepFailQM', 'description': 'Relative humidity quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h step fail q m'], 'mappings': []}, 'RHStepPassQM': {'slot_uri': 'neon:RHStepPassQM', 'description': 'Relative humidity quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h step pass q m'], 'mappings': []}, 'RHStepNAQM': {'slot_uri': 'neon:RHStepNAQM', 'description': 'Relative humidity quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h step n a q m'], 'mappings': []}, 'RHNullFailQM': {'slot_uri': 'neon:RHNullFailQM', 'description': 'Relative humidity quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h null fail q m'], 'mappings': []}, 'RHNullPassQM': {'slot_uri': 'neon:RHNullPassQM', 'description': 'Relative humidity quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h null pass q m'], 'mappings': []}, 'RHNullNAQM': {'slot_uri': 'neon:RHNullNAQM', 'description': 'Relative humidity quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h null n a q m'], 'mappings': []}, 'RHGapFailQM': {'slot_uri': 'neon:RHGapFailQM', 'description': 'Relative humidity quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h gap fail q m'], 'mappings': []}, 'RHGapPassQM': {'slot_uri': 'neon:RHGapPassQM', 'description': 'Relative humidity quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h gap pass q m'], 'mappings': []}, 'RHGapNAQM': {'slot_uri': 'neon:RHGapNAQM', 'description': 'Relative humidity quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h gap n a q m'], 'mappings': []}, 'RHSpikeFailQM': {'slot_uri': 'neon:RHSpikeFailQM', 'description': 'Relative humidity quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h spike fail q m'], 'mappings': []}, 'RHSpikePassQM': {'slot_uri': 'neon:RHSpikePassQM', 'description': 'Relative humidity quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h spike pass q m'], 'mappings': []}, 'RHSpikeNAQM': {'slot_uri': 'neon:RHSpikeNAQM', 'description': 'Relative humidity quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h spike n a q m'], 'mappings': []}, 'RHConsistencyFailQM': {'slot_uri': 'neon:RHConsistencyFailQM', 'description': 'Relative humidity quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h consistency fail q m'], 'mappings': []}, 'RHConsistencyPassQM': {'slot_uri': 'neon:RHConsistencyPassQM', 'description': 'Relative humidity quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h consistency pass q m'], 'mappings': []}, 'RHConsistencyNAQM': {'slot_uri': 'neon:RHConsistencyNAQM', 'description': 'Relative humidity quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h consistency n a q m'], 'mappings': []}, 'RHAlphaQM': {'slot_uri': 'neon:RHAlphaQM', 'description': 'Relative humidity quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['r h alpha q m'], 'mappings': []}, 'RHBetaQM': {'slot_uri': 'neon:RHBetaQM', 'description': 'Relative humidity quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['r h beta q m'], 'mappings': []}, 'RHFinalQF': {'slot_uri': 'neon:RHFinalQF', 'description': 'Relative humidity quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['r h final q f'], 'mappings': []}, 'tempRHMean': {'slot_uri': 'neon:tempRHMean', 'description': 'Arithmetic mean of temperature measures by RH sensor', 'range': 'double', 'aliases': ['temp r h mean'], 'mappings': []}, 'tempRHMinimum': {'slot_uri': 'neon:tempRHMinimum', 'description': 'Minimum temperature measures by RH sensor', 'range': 'double', 'aliases': ['temp r h minimum'], 'mappings': []}, 'tempRHMaximum': {'slot_uri': 'neon:tempRHMaximum', 'description': 'Maximum temperature measures by RH sensor', 'range': 'double', 'aliases': ['temp r h maximum'], 'mappings': []}, 'tempRHVariance': {'slot_uri': 'neon:tempRHVariance', 'description': 'Variance in temperature measures by RH sensor', 'range': 'double', 'aliases': ['temp r h variance'], 'mappings': []}, 'tempRHNumPts': {'slot_uri': 'neon:tempRHNumPts', 'description': 'Number of points used to calculate the arithmetic mean of temperature measures by RH sensor', 'range': 'double', 'aliases': ['temp r h num pts'], 'mappings': []}, 'tempRHExpUncert': {'slot_uri': 'neon:tempRHExpUncert', 'description': 'Expanded uncertainty for temperature measures by RH sensor', 'range': 'double', 'aliases': ['temp r h exp uncert'], 'mappings': []}, 'tempRHStdErMean': {'slot_uri': 'neon:tempRHStdErMean', 'description': 'Standard error of the mean for temperature measures by RH sensor', 'range': 'double', 'aliases': ['temp r h std er mean'], 'mappings': []}, 'tempRHRangeQAQCRpt': {'slot_uri': 'neon:tempRHRangeQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h range q a q c rpt'], 'mappings': []}, 'tempRHPersistenceQAQCRpt': {'slot_uri': 'neon:tempRHPersistenceQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h persistence q a q c rpt'], 'mappings': []}, 'tempRHStepQAQCRpt': {'slot_uri': 'neon:tempRHStepQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h step q a q c rpt'], 'mappings': []}, 'tempRHNullQAQCRpt': {'slot_uri': 'neon:tempRHNullQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h null q a q c rpt'], 'mappings': []}, 'tempRHGapQAQCRpt': {'slot_uri': 'neon:tempRHGapQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['temp r h gap q a q c rpt'], 'mappings': []}, 'tempRHConsistencyQAQCRpt': {'slot_uri': 'neon:tempRHConsistencyQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h consistency q a q c rpt'], 'mappings': []}, 'tempRHSpikeQAQCRpt': {'slot_uri': 'neon:tempRHSpikeQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h spike q a q c rpt'], 'mappings': []}, 'tempRHAlphaQAQCRpt': {'slot_uri': 'neon:tempRHAlphaQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h alpha q a q c rpt'], 'mappings': []}, 'tempRHBetaQAQCRpt': {'slot_uri': 'neon:tempRHBetaQAQCRpt', 'description': 'Temperature measures by RH sensor quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h beta q a q c rpt'], 'mappings': []}, 'tempRHRangeFailQM': {'slot_uri': 'neon:tempRHRangeFailQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h range fail q m'], 'mappings': []}, 'tempRHRangePassQM': {'slot_uri': 'neon:tempRHRangePassQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h range pass q m'], 'mappings': []}, 'tempRHRangeNAQM': {'slot_uri': 'neon:tempRHRangeNAQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h range n a q m'], 'mappings': []}, 'tempRHPersistenceFailQM': {'slot_uri': 'neon:tempRHPersistenceFailQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h persistence fail q m'], 'mappings': []}, 'tempRHPersistencePassQM': {'slot_uri': 'neon:tempRHPersistencePassQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h persistence pass q m'], 'mappings': []}, 'tempRHPersistenceNAQM': {'slot_uri': 'neon:tempRHPersistenceNAQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h persistence n a q m'], 'mappings': []}, 'tempRHStepFailQM': {'slot_uri': 'neon:tempRHStepFailQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h step fail q m'], 'mappings': []}, 'tempRHStepPassQM': {'slot_uri': 'neon:tempRHStepPassQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h step pass q m'], 'mappings': []}, 'tempRHStepNAQM': {'slot_uri': 'neon:tempRHStepNAQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h step n a q m'], 'mappings': []}, 'tempRHNullFailQM': {'slot_uri': 'neon:tempRHNullFailQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h null fail q m'], 'mappings': []}, 'tempRHNullPassQM': {'slot_uri': 'neon:tempRHNullPassQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h null pass q m'], 'mappings': []}, 'tempRHNullNAQM': {'slot_uri': 'neon:tempRHNullNAQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h null n a q m'], 'mappings': []}, 'tempRHGapFailQM': {'slot_uri': 'neon:tempRHGapFailQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h gap fail q m'], 'mappings': []}, 'tempRHGapPassQM': {'slot_uri': 'neon:tempRHGapPassQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h gap pass q m'], 'mappings': []}, 'tempRHGapNAQM': {'slot_uri': 'neon:tempRHGapNAQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h gap n a q m'], 'mappings': []}, 'tempRHSpikeFailQM': {'slot_uri': 'neon:tempRHSpikeFailQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h spike fail q m'], 'mappings': []}, 'tempRHSpikePassQM': {'slot_uri': 'neon:tempRHSpikePassQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h spike pass q m'], 'mappings': []}, 'tempRHSpikeNAQM': {'slot_uri': 'neon:tempRHSpikeNAQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h spike n a q m'], 'mappings': []}, 'tempRHConsistencyFailQM': {'slot_uri': 'neon:tempRHConsistencyFailQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h consistency fail q m'], 'mappings': []}, 'tempRHConsistencyPassQM': {'slot_uri': 'neon:tempRHConsistencyPassQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h consistency pass q m'], 'mappings': []}, 'tempRHConsistencyNAQM': {'slot_uri': 'neon:tempRHConsistencyNAQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h consistency n a q m'], 'mappings': []}, 'tempRHAlphaQM': {'slot_uri': 'neon:tempRHAlphaQM', 'description': 'Temperature measures by RH sensor quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['temp r h alpha q m'], 'mappings': []}, 'tempRHBetaQM': {'slot_uri': 'neon:tempRHBetaQM', 'description': 'Temperature measures by RH sensor quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['temp r h beta q m'], 'mappings': []}, 'tempRHFinalQF': {'slot_uri': 'neon:tempRHFinalQF', 'description': 'Temperature measures by RH sensor quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['temp r h final q f'], 'mappings': []}, 'dewTempMean': {'slot_uri': 'neon:dewTempMean', 'description': 'Arithmetic mean of dew or frost point temperature', 'range': 'double', 'aliases': ['dew temp mean'], 'mappings': []}, 'dewTempMinimum': {'slot_uri': 'neon:dewTempMinimum', 'description': 'Minimum dew or frost point temperature', 'range': 'double', 'aliases': ['dew temp minimum'], 'mappings': []}, 'dewTempMaximum': {'slot_uri': 'neon:dewTempMaximum', 'description': 'Maximum dew or frost point temperature', 'range': 'double', 'aliases': ['dew temp maximum'], 'mappings': []}, 'dewTempVariance': {'slot_uri': 'neon:dewTempVariance', 'description': 'Variance in dew or frost point temperature', 'range': 'double', 'aliases': ['dew temp variance'], 'mappings': []}, 'dewTempNumPts': {'slot_uri': 'neon:dewTempNumPts', 'description': 'Number of points used to calculate the arithmetic mean of dew or frost point temperature', 'range': 'double', 'aliases': ['dew temp num pts'], 'mappings': []}, 'dewTempExpUncert': {'slot_uri': 'neon:dewTempExpUncert', 'description': 'Expanded uncertainty for dew or frost point temperature', 'range': 'double', 'aliases': ['dew temp exp uncert'], 'mappings': []}, 'dewTempStdErMean': {'slot_uri': 'neon:dewTempStdErMean', 'description': 'Standard error of the mean for dew or frost point temperature', 'range': 'double', 'aliases': ['dew temp std er mean'], 'mappings': []}, 'dewTempRangeQAQCRpt': {'slot_uri': 'neon:dewTempRangeQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp range q a q c rpt'], 'mappings': []}, 'dewTempPersistenceQAQCRpt': {'slot_uri': 'neon:dewTempPersistenceQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp persistence q a q c rpt'], 'mappings': []}, 'dewTempStepQAQCRpt': {'slot_uri': 'neon:dewTempStepQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp step q a q c rpt'], 'mappings': []}, 'dewTempNullQAQCRpt': {'slot_uri': 'neon:dewTempNullQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp null q a q c rpt'], 'mappings': []}, 'dewTempGapQAQCRpt': {'slot_uri': 'neon:dewTempGapQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['dew temp gap q a q c rpt'], 'mappings': []}, 'dewTempConsistencyQAQCRpt': {'slot_uri': 'neon:dewTempConsistencyQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp consistency q a q c rpt'], 'mappings': []}, 'dewTempSpikeQAQCRpt': {'slot_uri': 'neon:dewTempSpikeQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp spike q a q c rpt'], 'mappings': []}, 'dewTempAlphaQAQCRpt': {'slot_uri': 'neon:dewTempAlphaQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp alpha q a q c rpt'], 'mappings': []}, 'dewTempBetaQAQCRpt': {'slot_uri': 'neon:dewTempBetaQAQCRpt', 'description': 'Dew or frost point temperature quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp beta q a q c rpt'], 'mappings': []}, 'dewTempRangeFailQM': {'slot_uri': 'neon:dewTempRangeFailQM', 'description': 'Dew or frost point temperature quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp range fail q m'], 'mappings': []}, 'dewTempRangePassQM': {'slot_uri': 'neon:dewTempRangePassQM', 'description': 'Dew or frost point temperature quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp range pass q m'], 'mappings': []}, 'dewTempRangeNAQM': {'slot_uri': 'neon:dewTempRangeNAQM', 'description': 'Dew or frost point temperature quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp range n a q m'], 'mappings': []}, 'dewTempPersistenceFailQM': {'slot_uri': 'neon:dewTempPersistenceFailQM', 'description': 'Dew or frost point temperature quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp persistence fail q m'], 'mappings': []}, 'dewTempPersistencePassQM': {'slot_uri': 'neon:dewTempPersistencePassQM', 'description': 'Dew or frost point temperature quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp persistence pass q m'], 'mappings': []}, 'dewTempPersistenceNAQM': {'slot_uri': 'neon:dewTempPersistenceNAQM', 'description': 'Dew or frost point temperature quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp persistence n a q m'], 'mappings': []}, 'dewTempStepFailQM': {'slot_uri': 'neon:dewTempStepFailQM', 'description': 'Dew or frost point temperature quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp step fail q m'], 'mappings': []}, 'dewTempStepPassQM': {'slot_uri': 'neon:dewTempStepPassQM', 'description': 'Dew or frost point temperature quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp step pass q m'], 'mappings': []}, 'dewTempStepNAQM': {'slot_uri': 'neon:dewTempStepNAQM', 'description': 'Dew or frost point temperature quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp step n a q m'], 'mappings': []}, 'dewTempNullFailQM': {'slot_uri': 'neon:dewTempNullFailQM', 'description': 'Dew or frost point temperature quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp null fail q m'], 'mappings': []}, 'dewTempNullPassQM': {'slot_uri': 'neon:dewTempNullPassQM', 'description': 'Dew or frost point temperature quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp null pass q m'], 'mappings': []}, 'dewTempNullNAQM': {'slot_uri': 'neon:dewTempNullNAQM', 'description': 'Dew or frost point temperature quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp null n a q m'], 'mappings': []}, 'dewTempGapFailQM': {'slot_uri': 'neon:dewTempGapFailQM', 'description': 'Dew or frost point temperature quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp gap fail q m'], 'mappings': []}, 'dewTempGapPassQM': {'slot_uri': 'neon:dewTempGapPassQM', 'description': 'Dew or frost point temperature quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp gap pass q m'], 'mappings': []}, 'dewTempGapNAQM': {'slot_uri': 'neon:dewTempGapNAQM', 'description': 'Dew or frost point temperature quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp gap n a q m'], 'mappings': []}, 'dewTempSpikeFailQM': {'slot_uri': 'neon:dewTempSpikeFailQM', 'description': 'Dew or frost point temperature quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp spike fail q m'], 'mappings': []}, 'dewTempSpikePassQM': {'slot_uri': 'neon:dewTempSpikePassQM', 'description': 'Dew or frost point temperature quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp spike pass q m'], 'mappings': []}, 'dewTempSpikeNAQM': {'slot_uri': 'neon:dewTempSpikeNAQM', 'description': 'Dew or frost point temperature quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp spike n a q m'], 'mappings': []}, 'dewTempConsistencyFailQM': {'slot_uri': 'neon:dewTempConsistencyFailQM', 'description': 'Dew or frost point temperature quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp consistency fail q m'], 'mappings': []}, 'dewTempConsistencyPassQM': {'slot_uri': 'neon:dewTempConsistencyPassQM', 'description': 'Dew or frost point temperature quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp consistency pass q m'], 'mappings': []}, 'dewTempConsistencyNAQM': {'slot_uri': 'neon:dewTempConsistencyNAQM', 'description': 'Dew or frost point temperature quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp consistency n a q m'], 'mappings': []}, 'dewTempAlphaQM': {'slot_uri': 'neon:dewTempAlphaQM', 'description': 'Dew or frost point temperature quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['dew temp alpha q m'], 'mappings': []}, 'dewTempBetaQM': {'slot_uri': 'neon:dewTempBetaQM', 'description': 'Dew or frost point temperature quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['dew temp beta q m'], 'mappings': []}, 'dewTempFinalQF': {'slot_uri': 'neon:dewTempFinalQF', 'description': 'Dew or frost point temperature quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['dew temp final q f'], 'mappings': []}, 'inSWMean': {'slot_uri': 'neon:inSWMean', 'description': 'Arithmetic mean of incoming shortwave radiation', 'range': 'double', 'aliases': ['in s w mean'], 'mappings': []}, 'inSWMinimum': {'slot_uri': 'neon:inSWMinimum', 'description': 'Minimum incoming shortwave radiation', 'range': 'double', 'aliases': ['in s w minimum'], 'mappings': []}, 'inSWMaximum': {'slot_uri': 'neon:inSWMaximum', 'description': 'Maximum incoming shortwave radiation', 'range': 'double', 'aliases': ['in s w maximum'], 'mappings': []}, 'inSWVariance': {'slot_uri': 'neon:inSWVariance', 'description': 'Variance in incoming shortwave radiation', 'range': 'double', 'aliases': ['in s w variance'], 'mappings': []}, 'inSWNumPts': {'slot_uri': 'neon:inSWNumPts', 'description': 'Number of points used to calculate the arithmetic mean of incoming shortwave radiation', 'range': 'double', 'aliases': ['in s w num pts'], 'mappings': []}, 'inSWExpUncert': {'slot_uri': 'neon:inSWExpUncert', 'description': 'Expanded uncertainty for incoming shortwave radiation', 'range': 'double', 'aliases': ['in s w exp uncert'], 'mappings': []}, 'inSWStdErMean': {'slot_uri': 'neon:inSWStdErMean', 'description': 'Standard error of the mean for incoming shortwave radiation', 'range': 'double', 'aliases': ['in s w std er mean'], 'mappings': []}, 'inSWRangeQAQCRpt': {'slot_uri': 'neon:inSWRangeQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w range q a q c rpt'], 'mappings': []}, 'inSWPersistenceQAQCRpt': {'slot_uri': 'neon:inSWPersistenceQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w persistence q a q c rpt'], 'mappings': []}, 'inSWStepQAQCRpt': {'slot_uri': 'neon:inSWStepQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w step q a q c rpt'], 'mappings': []}, 'inSWNullQAQCRpt': {'slot_uri': 'neon:inSWNullQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w null q a q c rpt'], 'mappings': []}, 'inSWGapQAQCRpt': {'slot_uri': 'neon:inSWGapQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['in s w gap q a q c rpt'], 'mappings': []}, 'inSWConsistencyQAQCRpt': {'slot_uri': 'neon:inSWConsistencyQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w consistency q a q c rpt'], 'mappings': []}, 'inSWSpikeQAQCRpt': {'slot_uri': 'neon:inSWSpikeQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w spike q a q c rpt'], 'mappings': []}, 'inSWAlphaQAQCRpt': {'slot_uri': 'neon:inSWAlphaQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w alpha q a q c rpt'], 'mappings': []}, 'inSWBetaQAQCRpt': {'slot_uri': 'neon:inSWBetaQAQCRpt', 'description': 'Incoming shortwave radiation quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w beta q a q c rpt'], 'mappings': []}, 'inSWRangeFailQM': {'slot_uri': 'neon:inSWRangeFailQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w range fail q m'], 'mappings': []}, 'inSWRangePassQM': {'slot_uri': 'neon:inSWRangePassQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w range pass q m'], 'mappings': []}, 'inSWRangeNAQM': {'slot_uri': 'neon:inSWRangeNAQM', 'description': 'Incoming shortwave radiation quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w range n a q m'], 'mappings': []}, 'inSWPersistenceFailQM': {'slot_uri': 'neon:inSWPersistenceFailQM', 'description': 'Incoming shortwave radiation quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w persistence fail q m'], 'mappings': []}, 'inSWPersistencePassQM': {'slot_uri': 'neon:inSWPersistencePassQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w persistence pass q m'], 'mappings': []}, 'inSWPersistenceNAQM': {'slot_uri': 'neon:inSWPersistenceNAQM', 'description': 'Incoming shortwave radiation quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w persistence n a q m'], 'mappings': []}, 'inSWStepFailQM': {'slot_uri': 'neon:inSWStepFailQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w step fail q m'], 'mappings': []}, 'inSWStepPassQM': {'slot_uri': 'neon:inSWStepPassQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w step pass q m'], 'mappings': []}, 'inSWStepNAQM': {'slot_uri': 'neon:inSWStepNAQM', 'description': 'Incoming shortwave radiation quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w step n a q m'], 'mappings': []}, 'inSWNullFailQM': {'slot_uri': 'neon:inSWNullFailQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w null fail q m'], 'mappings': []}, 'inSWNullPassQM': {'slot_uri': 'neon:inSWNullPassQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w null pass q m'], 'mappings': []}, 'inSWNullNAQM': {'slot_uri': 'neon:inSWNullNAQM', 'description': 'Incoming shortwave radiation quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w null n a q m'], 'mappings': []}, 'inSWGapFailQM': {'slot_uri': 'neon:inSWGapFailQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w gap fail q m'], 'mappings': []}, 'inSWGapPassQM': {'slot_uri': 'neon:inSWGapPassQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w gap pass q m'], 'mappings': []}, 'inSWGapNAQM': {'slot_uri': 'neon:inSWGapNAQM', 'description': 'Incoming shortwave radiation quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w gap n a q m'], 'mappings': []}, 'inSWSpikeFailQM': {'slot_uri': 'neon:inSWSpikeFailQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w spike fail q m'], 'mappings': []}, 'inSWSpikePassQM': {'slot_uri': 'neon:inSWSpikePassQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w spike pass q m'], 'mappings': []}, 'inSWSpikeNAQM': {'slot_uri': 'neon:inSWSpikeNAQM', 'description': 'Incoming shortwave radiation quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w spike n a q m'], 'mappings': []}, 'inSWConsistencyFailQM': {'slot_uri': 'neon:inSWConsistencyFailQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w consistency fail q m'], 'mappings': []}, 'inSWConsistencyPassQM': {'slot_uri': 'neon:inSWConsistencyPassQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w consistency pass q m'], 'mappings': []}, 'inSWConsistencyNAQM': {'slot_uri': 'neon:inSWConsistencyNAQM', 'description': 'Incoming shortwave radiation quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w consistency n a q m'], 'mappings': []}, 'inSWAlphaQM': {'slot_uri': 'neon:inSWAlphaQM', 'description': 'Incoming shortwave radiation quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['in s w alpha q m'], 'mappings': []}, 'inSWBetaQM': {'slot_uri': 'neon:inSWBetaQM', 'description': 'Incoming shortwave radiation quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['in s w beta q m'], 'mappings': []}, 'inSWFinalQF': {'slot_uri': 'neon:inSWFinalQF', 'description': 'Incoming shortwave radiation quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['in s w final q f'], 'mappings': []}, 'outSWMean': {'slot_uri': 'neon:outSWMean', 'description': 'Arithmetic mean of outgoing shortwave radiation', 'range': 'double', 'aliases': ['out s w mean'], 'mappings': []}, 'outSWMinimum': {'slot_uri': 'neon:outSWMinimum', 'description': 'Minimum outgoing shortwave radiation', 'range': 'double', 'aliases': ['out s w minimum'], 'mappings': []}, 'outSWMaximum': {'slot_uri': 'neon:outSWMaximum', 'description': 'Maximum outgoing shortwave radiation', 'range': 'double', 'aliases': ['out s w maximum'], 'mappings': []}, 'outSWVariance': {'slot_uri': 'neon:outSWVariance', 'description': 'Variance in outgoing shortwave radiation', 'range': 'double', 'aliases': ['out s w variance'], 'mappings': []}, 'outSWNumPts': {'slot_uri': 'neon:outSWNumPts', 'description': 'Number of points used to calculate the arithmetic mean of outgoing shortwave radiation', 'range': 'double', 'aliases': ['out s w num pts'], 'mappings': []}, 'outSWExpUncert': {'slot_uri': 'neon:outSWExpUncert', 'description': 'Expanded uncertainty for outgoing shortwave radiation', 'range': 'double', 'aliases': ['out s w exp uncert'], 'mappings': []}, 'outSWStdErMean': {'slot_uri': 'neon:outSWStdErMean', 'description': 'Standard error of the mean for outgoing shortwave radiation', 'range': 'double', 'aliases': ['out s w std er mean'], 'mappings': []}, 'outSWRangeQAQCRpt': {'slot_uri': 'neon:outSWRangeQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w range q a q c rpt'], 'mappings': []}, 'outSWPersistenceQAQCRpt': {'slot_uri': 'neon:outSWPersistenceQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w persistence q a q c rpt'], 'mappings': []}, 'outSWStepQAQCRpt': {'slot_uri': 'neon:outSWStepQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w step q a q c rpt'], 'mappings': []}, 'outSWNullQAQCRpt': {'slot_uri': 'neon:outSWNullQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w null q a q c rpt'], 'mappings': []}, 'outSWGapQAQCRpt': {'slot_uri': 'neon:outSWGapQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['out s w gap q a q c rpt'], 'mappings': []}, 'outSWConsistencyQAQCRpt': {'slot_uri': 'neon:outSWConsistencyQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w consistency q a q c rpt'], 'mappings': []}, 'outSWSpikeQAQCRpt': {'slot_uri': 'neon:outSWSpikeQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w spike q a q c rpt'], 'mappings': []}, 'outSWAlphaQAQCRpt': {'slot_uri': 'neon:outSWAlphaQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w alpha q a q c rpt'], 'mappings': []}, 'outSWBetaQAQCRpt': {'slot_uri': 'neon:outSWBetaQAQCRpt', 'description': 'Outgoing shortwave radiation quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w beta q a q c rpt'], 'mappings': []}, 'outSWRangeFailQM': {'slot_uri': 'neon:outSWRangeFailQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w range fail q m'], 'mappings': []}, 'outSWRangePassQM': {'slot_uri': 'neon:outSWRangePassQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w range pass q m'], 'mappings': []}, 'outSWRangeNAQM': {'slot_uri': 'neon:outSWRangeNAQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w range n a q m'], 'mappings': []}, 'outSWPersistenceFailQM': {'slot_uri': 'neon:outSWPersistenceFailQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w persistence fail q m'], 'mappings': []}, 'outSWPersistencePassQM': {'slot_uri': 'neon:outSWPersistencePassQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w persistence pass q m'], 'mappings': []}, 'outSWPersistenceNAQM': {'slot_uri': 'neon:outSWPersistenceNAQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w persistence n a q m'], 'mappings': []}, 'outSWStepFailQM': {'slot_uri': 'neon:outSWStepFailQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w step fail q m'], 'mappings': []}, 'outSWStepPassQM': {'slot_uri': 'neon:outSWStepPassQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w step pass q m'], 'mappings': []}, 'outSWStepNAQM': {'slot_uri': 'neon:outSWStepNAQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w step n a q m'], 'mappings': []}, 'outSWNullFailQM': {'slot_uri': 'neon:outSWNullFailQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w null fail q m'], 'mappings': []}, 'outSWNullPassQM': {'slot_uri': 'neon:outSWNullPassQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w null pass q m'], 'mappings': []}, 'outSWNullNAQM': {'slot_uri': 'neon:outSWNullNAQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w null n a q m'], 'mappings': []}, 'outSWGapFailQM': {'slot_uri': 'neon:outSWGapFailQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w gap fail q m'], 'mappings': []}, 'outSWGapPassQM': {'slot_uri': 'neon:outSWGapPassQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w gap pass q m'], 'mappings': []}, 'outSWGapNAQM': {'slot_uri': 'neon:outSWGapNAQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w gap n a q m'], 'mappings': []}, 'outSWSpikeFailQM': {'slot_uri': 'neon:outSWSpikeFailQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w spike fail q m'], 'mappings': []}, 'outSWSpikePassQM': {'slot_uri': 'neon:outSWSpikePassQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w spike pass q m'], 'mappings': []}, 'outSWSpikeNAQM': {'slot_uri': 'neon:outSWSpikeNAQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w spike n a q m'], 'mappings': []}, 'outSWConsistencyFailQM': {'slot_uri': 'neon:outSWConsistencyFailQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w consistency fail q m'], 'mappings': []}, 'outSWConsistencyPassQM': {'slot_uri': 'neon:outSWConsistencyPassQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w consistency pass q m'], 'mappings': []}, 'outSWConsistencyNAQM': {'slot_uri': 'neon:outSWConsistencyNAQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w consistency n a q m'], 'mappings': []}, 'outSWAlphaQM': {'slot_uri': 'neon:outSWAlphaQM', 'description': 'Outgoing shortwave radiation quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['out s w alpha q m'], 'mappings': []}, 'outSWBetaQM': {'slot_uri': 'neon:outSWBetaQM', 'description': 'Outgoing shortwave radiation quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['out s w beta q m'], 'mappings': []}, 'outSWFinalQF': {'slot_uri': 'neon:outSWFinalQF', 'description': 'Outgoing shortwave radiation quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['out s w final q f'], 'mappings': []}, 'inLWMean': {'slot_uri': 'neon:inLWMean', 'description': 'Arithmetic mean of incoming longwave radiation', 'range': 'double', 'aliases': ['in l w mean'], 'mappings': []}, 'inLWMinimum': {'slot_uri': 'neon:inLWMinimum', 'description': 'Minimum incoming longwave radiation', 'range': 'double', 'aliases': ['in l w minimum'], 'mappings': []}, 'inLWMaximum': {'slot_uri': 'neon:inLWMaximum', 'description': 'Maximum incoming longwave radiation', 'range': 'double', 'aliases': ['in l w maximum'], 'mappings': []}, 'inLWVariance': {'slot_uri': 'neon:inLWVariance', 'description': 'Variance in incoming longwave radiation', 'range': 'double', 'aliases': ['in l w variance'], 'mappings': []}, 'inLWNumPts': {'slot_uri': 'neon:inLWNumPts', 'description': 'Number of points used to calculate the arithmetic mean of incoming longwave radiation', 'range': 'double', 'aliases': ['in l w num pts'], 'mappings': []}, 'inLWExpUncert': {'slot_uri': 'neon:inLWExpUncert', 'description': 'Expanded uncertainty for incoming longwave radiation', 'range': 'double', 'aliases': ['in l w exp uncert'], 'mappings': []}, 'inLWStdErMean': {'slot_uri': 'neon:inLWStdErMean', 'description': 'Standard error of the mean for incoming longwave radiation', 'range': 'double', 'aliases': ['in l w std er mean'], 'mappings': []}, 'inLWRangeQAQCRpt': {'slot_uri': 'neon:inLWRangeQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w range q a q c rpt'], 'mappings': []}, 'inLWPersistenceQAQCRpt': {'slot_uri': 'neon:inLWPersistenceQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w persistence q a q c rpt'], 'mappings': []}, 'inLWStepQAQCRpt': {'slot_uri': 'neon:inLWStepQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w step q a q c rpt'], 'mappings': []}, 'inLWNullQAQCRpt': {'slot_uri': 'neon:inLWNullQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w null q a q c rpt'], 'mappings': []}, 'inLWGapQAQCRpt': {'slot_uri': 'neon:inLWGapQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['in l w gap q a q c rpt'], 'mappings': []}, 'inLWConsistencyQAQCRpt': {'slot_uri': 'neon:inLWConsistencyQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w consistency q a q c rpt'], 'mappings': []}, 'inLWSpikeQAQCRpt': {'slot_uri': 'neon:inLWSpikeQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w spike q a q c rpt'], 'mappings': []}, 'inLWAlphaQAQCRpt': {'slot_uri': 'neon:inLWAlphaQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w alpha q a q c rpt'], 'mappings': []}, 'inLWBetaQAQCRpt': {'slot_uri': 'neon:inLWBetaQAQCRpt', 'description': 'Incoming longwave radiation  quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w beta q a q c rpt'], 'mappings': []}, 'inLWRangeFailQM': {'slot_uri': 'neon:inLWRangeFailQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w range fail q m'], 'mappings': []}, 'inLWRangePassQM': {'slot_uri': 'neon:inLWRangePassQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w range pass q m'], 'mappings': []}, 'inLWRangeNAQM': {'slot_uri': 'neon:inLWRangeNAQM', 'description': 'Incoming longwave radiation  quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w range n a q m'], 'mappings': []}, 'inLWPersistenceFailQM': {'slot_uri': 'neon:inLWPersistenceFailQM', 'description': 'Incoming longwave radiation  quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w persistence fail q m'], 'mappings': []}, 'inLWPersistencePassQM': {'slot_uri': 'neon:inLWPersistencePassQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w persistence pass q m'], 'mappings': []}, 'inLWPersistenceNAQM': {'slot_uri': 'neon:inLWPersistenceNAQM', 'description': 'Incoming longwave radiation  quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w persistence n a q m'], 'mappings': []}, 'inLWStepFailQM': {'slot_uri': 'neon:inLWStepFailQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w step fail q m'], 'mappings': []}, 'inLWStepPassQM': {'slot_uri': 'neon:inLWStepPassQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w step pass q m'], 'mappings': []}, 'inLWStepNAQM': {'slot_uri': 'neon:inLWStepNAQM', 'description': 'Incoming longwave radiation  quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w step n a q m'], 'mappings': []}, 'inLWNullFailQM': {'slot_uri': 'neon:inLWNullFailQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w null fail q m'], 'mappings': []}, 'inLWNullPassQM': {'slot_uri': 'neon:inLWNullPassQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w null pass q m'], 'mappings': []}, 'inLWNullNAQM': {'slot_uri': 'neon:inLWNullNAQM', 'description': 'Incoming longwave radiation  quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w null n a q m'], 'mappings': []}, 'inLWGapFailQM': {'slot_uri': 'neon:inLWGapFailQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w gap fail q m'], 'mappings': []}, 'inLWGapPassQM': {'slot_uri': 'neon:inLWGapPassQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w gap pass q m'], 'mappings': []}, 'inLWGapNAQM': {'slot_uri': 'neon:inLWGapNAQM', 'description': 'Incoming longwave radiation  quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w gap n a q m'], 'mappings': []}, 'inLWSpikeFailQM': {'slot_uri': 'neon:inLWSpikeFailQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w spike fail q m'], 'mappings': []}, 'inLWSpikePassQM': {'slot_uri': 'neon:inLWSpikePassQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w spike pass q m'], 'mappings': []}, 'inLWSpikeNAQM': {'slot_uri': 'neon:inLWSpikeNAQM', 'description': 'Incoming longwave radiation  quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w spike n a q m'], 'mappings': []}, 'inLWConsistencyFailQM': {'slot_uri': 'neon:inLWConsistencyFailQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w consistency fail q m'], 'mappings': []}, 'inLWConsistencyPassQM': {'slot_uri': 'neon:inLWConsistencyPassQM', 'description': 'Incoming longwave radiation  quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w consistency pass q m'], 'mappings': []}, 'inLWConsistencyNAQM': {'slot_uri': 'neon:inLWConsistencyNAQM', 'description': 'Incoming longwave radiation  quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w consistency n a q m'], 'mappings': []}, 'inLWAlphaQM': {'slot_uri': 'neon:inLWAlphaQM', 'description': 'Incoming longwave radiation  quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['in l w alpha q m'], 'mappings': []}, 'inLWBetaQM': {'slot_uri': 'neon:inLWBetaQM', 'description': 'Incoming longwave radiation  quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['in l w beta q m'], 'mappings': []}, 'inLWFinalQF': {'slot_uri': 'neon:inLWFinalQF', 'description': 'Incoming longwave radiation  quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['in l w final q f'], 'mappings': []}, 'outLWMean': {'slot_uri': 'neon:outLWMean', 'description': 'Arithmetic mean of outgoing longwave radiation', 'range': 'double', 'aliases': ['out l w mean'], 'mappings': []}, 'outLWMinimum': {'slot_uri': 'neon:outLWMinimum', 'description': 'Minimum outgoing longwave radiation', 'range': 'double', 'aliases': ['out l w minimum'], 'mappings': []}, 'outLWMaximum': {'slot_uri': 'neon:outLWMaximum', 'description': 'Maximum outgoing longwave radiation', 'range': 'double', 'aliases': ['out l w maximum'], 'mappings': []}, 'outLWVariance': {'slot_uri': 'neon:outLWVariance', 'description': 'Variance in outgoing longwave radiation', 'range': 'double', 'aliases': ['out l w variance'], 'mappings': []}, 'outLWNumPts': {'slot_uri': 'neon:outLWNumPts', 'description': 'Number of points used to calculate the arithmetic mean of outgoing longwave radiation', 'range': 'double', 'aliases': ['out l w num pts'], 'mappings': []}, 'outLWExpUncert': {'slot_uri': 'neon:outLWExpUncert', 'description': 'Expanded uncertainty for outgoing longwave radiation', 'range': 'double', 'aliases': ['out l w exp uncert'], 'mappings': []}, 'outLWStdErMean': {'slot_uri': 'neon:outLWStdErMean', 'description': 'Standard error of the mean for outgoing longwave radiation', 'range': 'double', 'aliases': ['out l w std er mean'], 'mappings': []}, 'outLWRangeQAQCRpt': {'slot_uri': 'neon:outLWRangeQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w range q a q c rpt'], 'mappings': []}, 'outLWPersistenceQAQCRpt': {'slot_uri': 'neon:outLWPersistenceQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w persistence q a q c rpt'], 'mappings': []}, 'outLWStepQAQCRpt': {'slot_uri': 'neon:outLWStepQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w step q a q c rpt'], 'mappings': []}, 'outLWNullQAQCRpt': {'slot_uri': 'neon:outLWNullQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w null q a q c rpt'], 'mappings': []}, 'outLWGapQAQCRpt': {'slot_uri': 'neon:outLWGapQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['out l w gap q a q c rpt'], 'mappings': []}, 'outLWConsistencyQAQCRpt': {'slot_uri': 'neon:outLWConsistencyQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w consistency q a q c rpt'], 'mappings': []}, 'outLWSpikeQAQCRpt': {'slot_uri': 'neon:outLWSpikeQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w spike q a q c rpt'], 'mappings': []}, 'outLWAlphaQAQCRpt': {'slot_uri': 'neon:outLWAlphaQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w alpha q a q c rpt'], 'mappings': []}, 'outLWBetaQAQCRpt': {'slot_uri': 'neon:outLWBetaQAQCRpt', 'description': 'Outgoing longwave radiation  quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w beta q a q c rpt'], 'mappings': []}, 'outLWRangeFailQM': {'slot_uri': 'neon:outLWRangeFailQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w range fail q m'], 'mappings': []}, 'outLWRangePassQM': {'slot_uri': 'neon:outLWRangePassQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w range pass q m'], 'mappings': []}, 'outLWRangeNAQM': {'slot_uri': 'neon:outLWRangeNAQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w range n a q m'], 'mappings': []}, 'outLWPersistenceFailQM': {'slot_uri': 'neon:outLWPersistenceFailQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w persistence fail q m'], 'mappings': []}, 'outLWPersistencePassQM': {'slot_uri': 'neon:outLWPersistencePassQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w persistence pass q m'], 'mappings': []}, 'outLWPersistenceNAQM': {'slot_uri': 'neon:outLWPersistenceNAQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w persistence n a q m'], 'mappings': []}, 'outLWStepFailQM': {'slot_uri': 'neon:outLWStepFailQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w step fail q m'], 'mappings': []}, 'outLWStepPassQM': {'slot_uri': 'neon:outLWStepPassQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w step pass q m'], 'mappings': []}, 'outLWStepNAQM': {'slot_uri': 'neon:outLWStepNAQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w step n a q m'], 'mappings': []}, 'outLWNullFailQM': {'slot_uri': 'neon:outLWNullFailQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w null fail q m'], 'mappings': []}, 'outLWNullPassQM': {'slot_uri': 'neon:outLWNullPassQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w null pass q m'], 'mappings': []}, 'outLWNullNAQM': {'slot_uri': 'neon:outLWNullNAQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w null n a q m'], 'mappings': []}, 'outLWGapFailQM': {'slot_uri': 'neon:outLWGapFailQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w gap fail q m'], 'mappings': []}, 'outLWGapPassQM': {'slot_uri': 'neon:outLWGapPassQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w gap pass q m'], 'mappings': []}, 'outLWGapNAQM': {'slot_uri': 'neon:outLWGapNAQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w gap n a q m'], 'mappings': []}, 'outLWSpikeFailQM': {'slot_uri': 'neon:outLWSpikeFailQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w spike fail q m'], 'mappings': []}, 'outLWSpikePassQM': {'slot_uri': 'neon:outLWSpikePassQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w spike pass q m'], 'mappings': []}, 'outLWSpikeNAQM': {'slot_uri': 'neon:outLWSpikeNAQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w spike n a q m'], 'mappings': []}, 'outLWConsistencyFailQM': {'slot_uri': 'neon:outLWConsistencyFailQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w consistency fail q m'], 'mappings': []}, 'outLWConsistencyPassQM': {'slot_uri': 'neon:outLWConsistencyPassQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w consistency pass q m'], 'mappings': []}, 'outLWConsistencyNAQM': {'slot_uri': 'neon:outLWConsistencyNAQM', 'description': 'Outgoing longwave radiation  quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w consistency n a q m'], 'mappings': []}, 'outLWAlphaQM': {'slot_uri': 'neon:outLWAlphaQM', 'description': 'Outgoing longwave radiation  quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['out l w alpha q m'], 'mappings': []}, 'outLWBetaQM': {'slot_uri': 'neon:outLWBetaQM', 'description': 'Outgoing longwave radiation  quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['out l w beta q m'], 'mappings': []}, 'outLWFinalQF': {'slot_uri': 'neon:outLWFinalQF', 'description': 'Outgoing longwave radiation quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['out l w final q f'], 'mappings': []}, 'soilTempMean': {'slot_uri': 'neon:soilTempMean', 'description': 'Arithmetic mean of Soil Temperature', 'range': 'double', 'aliases': ['soil temp mean'], 'mappings': []}, 'soilTempMinimum': {'slot_uri': 'neon:soilTempMinimum', 'description': 'Minimum Soil Temperature', 'range': 'double', 'aliases': ['soil temp minimum'], 'mappings': []}, 'soilTempMaximum': {'slot_uri': 'neon:soilTempMaximum', 'description': 'Maximum Soil Temperature', 'range': 'double', 'aliases': ['soil temp maximum'], 'mappings': []}, 'soilTempVariance': {'slot_uri': 'neon:soilTempVariance', 'description': 'Variance in Soil Temperature', 'range': 'double', 'aliases': ['soil temp variance'], 'mappings': []}, 'soilTempNumPts': {'slot_uri': 'neon:soilTempNumPts', 'description': 'Number of points used to calculate the arithmetic mean of Soil Temperature', 'range': 'double', 'aliases': ['soil temp num pts'], 'mappings': []}, 'soilTempExpUncert': {'slot_uri': 'neon:soilTempExpUncert', 'description': 'Expanded uncertainty for Soil Temperature', 'range': 'double', 'aliases': ['soil temp exp uncert'], 'mappings': []}, 'soilTempStdErMean': {'slot_uri': 'neon:soilTempStdErMean', 'description': 'Standard error of the mean for Soil Temperature', 'range': 'double', 'aliases': ['soil temp std er mean'], 'mappings': []}, 'shortRadMean': {'slot_uri': 'neon:shortRadMean', 'description': 'Arithmetic mean of Incoming Shortwave Radiation', 'range': 'double', 'aliases': ['short rad mean'], 'mappings': []}, 'shortRadMinimum': {'slot_uri': 'neon:shortRadMinimum', 'description': 'Minimum Incoming Shortwave Radiation', 'range': 'double', 'aliases': ['short rad minimum'], 'mappings': []}, 'shortRadMaximum': {'slot_uri': 'neon:shortRadMaximum', 'description': 'Maximum Incoming Shortwave Radiation', 'range': 'double', 'aliases': ['short rad maximum'], 'mappings': []}, 'shortRadVariance': {'slot_uri': 'neon:shortRadVariance', 'description': 'Variance in Incoming Shortwave Radiation', 'range': 'double', 'aliases': ['short rad variance'], 'mappings': []}, 'shortRadNumPts': {'slot_uri': 'neon:shortRadNumPts', 'description': 'Number of points used to calculate the arithmetic mean of Incoming Shortwave Radiation', 'range': 'double', 'aliases': ['short rad num pts'], 'mappings': []}, 'shortRadExpUncert': {'slot_uri': 'neon:shortRadExpUncert', 'description': 'Expanded uncertainty for Incoming Shortwave Radiation', 'range': 'double', 'aliases': ['short rad exp uncert'], 'mappings': []}, 'shortRadStdErMean': {'slot_uri': 'neon:shortRadStdErMean', 'description': 'Standard error of the mean for Incoming Shortwave Radiation', 'range': 'double', 'aliases': ['short rad std er mean'], 'mappings': []}, 'secPrecipRangeQF': {'slot_uri': 'neon:secPrecipRangeQF', 'description': 'Secondary precipitation quality flag for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['sec precip range q f'], 'mappings': []}, 'bioTempMean': {'slot_uri': 'neon:bioTempMean', 'description': 'Arithmetic mean of IR biological temperature', 'range': 'double', 'aliases': ['bio temp mean'], 'mappings': []}, 'bioTempMinimum': {'slot_uri': 'neon:bioTempMinimum', 'description': 'Minimum IR biological temperature', 'range': 'double', 'aliases': ['bio temp minimum'], 'mappings': []}, 'bioTempMaximum': {'slot_uri': 'neon:bioTempMaximum', 'description': 'Maximum IR biological temperature', 'range': 'double', 'aliases': ['bio temp maximum'], 'mappings': []}, 'bioTempVariance': {'slot_uri': 'neon:bioTempVariance', 'description': 'Variance in IR biological temperature', 'range': 'double', 'aliases': ['bio temp variance'], 'mappings': []}, 'bioTempNumPts': {'slot_uri': 'neon:bioTempNumPts', 'description': 'Number of points used to calculate the arithmetic mean of IR biological temperature', 'range': 'double', 'aliases': ['bio temp num pts'], 'mappings': []}, 'bioTempExpUncert': {'slot_uri': 'neon:bioTempExpUncert', 'description': 'Expanded uncertainty for IR biological temperature', 'range': 'double', 'aliases': ['bio temp exp uncert'], 'mappings': []}, 'bioTempStdErMean': {'slot_uri': 'neon:bioTempStdErMean', 'description': 'Standard error of the mean for IR biological temperature', 'range': 'double', 'aliases': ['bio temp std er mean'], 'mappings': []}, 'NANQAQCRpt': {'slot_uri': 'neon:NANQAQCRpt', 'description': 'Quality assurance and quality control report for the not a number test, which indicates whether inputs to calculate biological temperature were erroneous, detailed in NEON.DOC.000652 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['n a n q a q c rpt'], 'mappings': []}, 'NANFailQM': {'slot_uri': 'neon:NANFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the not a number test over the averaging period, as a percent', 'range': 'double', 'aliases': ['n a n fail q m'], 'mappings': []}, 'NANPassQM': {'slot_uri': 'neon:NANPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the not a number test over the averaging period, as a percent', 'range': 'double', 'aliases': ['n a n pass q m'], 'mappings': []}, 'NANNAQM': {'slot_uri': 'neon:NANNAQM', 'description': 'Quality metric that summarizes when the not a number test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['n a n n a q m'], 'mappings': []}, 'RHSensorErrorFailQM': {'slot_uri': 'neon:RHSensorErrorFailQM', 'description': 'Quality metric that summarizes when the sensor error occurred over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h sensor error fail q m'], 'mappings': []}, 'RHSensorErrorPassQM': {'slot_uri': 'neon:RHSensorErrorPassQM', 'description': 'Quality metric that summarizes when the sensor error was not occurred  over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h sensor error pass q m'], 'mappings': []}, 'RHSensorErrorNAQM': {'slot_uri': 'neon:RHSensorErrorNAQM', 'description': 'Quality metric that summarizes when the sensor error was unknown over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h sensor error n a q m'], 'mappings': []}, 'surfacePres': {'slot_uri': 'neon:surfacePres', 'description': 'Mean station pressure corrected to surface level (soil plot surface for terrestrial and water surface for aquatic sites)', 'range': 'double', 'aliases': ['surface pres'], 'mappings': []}, 'surfacePresExpUncert': {'slot_uri': 'neon:surfacePresExpUncert', 'description': 'Expanded uncertainty for pressure at surface level (soil plot surface for terrestrial and water surface for aquatic sites)', 'range': 'double', 'aliases': ['surface pres exp uncert'], 'mappings': []}, 'surfacePresFinalQF': {'slot_uri': 'neon:surfacePresFinalQF', 'description': 'Pressure at surface level (soil plot surface for terrestrial and water surface for lake sites) quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.000653 and NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['surface pres final q f'], 'mappings': []}, 'TFPrecipBulk': {'slot_uri': 'neon:TFPrecipBulk', 'description': 'Bulk throughfall precipitation', 'range': 'double', 'aliases': ['t f precip bulk'], 'mappings': []}, 'TFPrecipExpUncert': {'slot_uri': 'neon:TFPrecipExpUncert', 'description': 'Expanded uncertainty for throughfall precipitation', 'range': 'double', 'aliases': ['t f precip exp uncert'], 'mappings': []}, 'TFPrecipRangeQF': {'slot_uri': 'neon:TFPrecipRangeQF', 'description': 'Throughfall precipitation quality flag for the range test, which indicates whether a bulk precipitation value exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['t f precip range q f'], 'mappings': []}, 'VSWCMean': {'slot_uri': 'neon:VSWCMean', 'description': 'Arithmetic mean of volumetric soil water content', 'range': 'double', 'aliases': ['v s w c mean'], 'mappings': []}, 'VSWCMinimum': {'slot_uri': 'neon:VSWCMinimum', 'description': 'Minimum volumetric soil water content', 'range': 'double', 'aliases': ['v s w c minimum'], 'mappings': []}, 'VSWCMaximum': {'slot_uri': 'neon:VSWCMaximum', 'description': 'Maximum volumetric soil water content', 'range': 'double', 'aliases': ['v s w c maximum'], 'mappings': []}, 'VSWCVariance': {'slot_uri': 'neon:VSWCVariance', 'description': 'Variance in volumetric soil water content', 'range': 'double', 'aliases': ['v s w c variance'], 'mappings': []}, 'VSWCNumPts': {'slot_uri': 'neon:VSWCNumPts', 'description': 'Number of points used to calculate the arithmetic mean of volumetric soil water content', 'range': 'double', 'aliases': ['v s w c num pts'], 'mappings': []}, 'VSWCExpUncert': {'slot_uri': 'neon:VSWCExpUncert', 'description': 'Expanded uncertainty for volumetric soil water content', 'range': 'double', 'aliases': ['v s w c exp uncert'], 'mappings': []}, 'VSWCStdErMean': {'slot_uri': 'neon:VSWCStdErMean', 'description': 'Standard error of the mean for volumetric soil water content', 'range': 'double', 'aliases': ['v s w c std er mean'], 'mappings': []}, 'VSWCRangeQAQCRpt': {'slot_uri': 'neon:VSWCRangeQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s w c range q a q c rpt'], 'mappings': []}, 'VSWCPersistenceQAQCRpt': {'slot_uri': 'neon:VSWCPersistenceQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s w c persistence q a q c rpt'], 'mappings': []}, 'VSWCStepQAQCRpt': {'slot_uri': 'neon:VSWCStepQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s w c step q a q c rpt'], 'mappings': []}, 'VSWCNullQAQCRpt': {'slot_uri': 'neon:VSWCNullQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s w c null q a q c rpt'], 'mappings': []}, 'VSWCGapQAQCRpt': {'slot_uri': 'neon:VSWCGapQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['v s w c gap q a q c rpt'], 'mappings': []}, 'VSWCConsistencyQAQCRpt': {'slot_uri': 'neon:VSWCConsistencyQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s w c consistency q a q c rpt'], 'mappings': []}, 'VSWCSpikeQAQCRpt': {'slot_uri': 'neon:VSWCSpikeQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s w c spike q a q c rpt'], 'mappings': []}, 'VSWCAlphaQAQCRpt': {'slot_uri': 'neon:VSWCAlphaQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s w c alpha q a q c rpt'], 'mappings': []}, 'VSWCBetaQAQCRpt': {'slot_uri': 'neon:VSWCBetaQAQCRpt', 'description': 'Volumetric soil water content quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s w c beta q a q c rpt'], 'mappings': []}, 'VSWCRangeFailQM': {'slot_uri': 'neon:VSWCRangeFailQM', 'description': 'Volumetric soil water content quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c range fail q m'], 'mappings': []}, 'VSWCRangePassQM': {'slot_uri': 'neon:VSWCRangePassQM', 'description': 'Volumetric soil water content quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c range pass q m'], 'mappings': []}, 'VSWCRangeNAQM': {'slot_uri': 'neon:VSWCRangeNAQM', 'description': 'Volumetric soil water content quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c range n a q m'], 'mappings': []}, 'VSWCPersistenceFailQM': {'slot_uri': 'neon:VSWCPersistenceFailQM', 'description': 'Volumetric soil water content quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c persistence fail q m'], 'mappings': []}, 'VSWCPersistencePassQM': {'slot_uri': 'neon:VSWCPersistencePassQM', 'description': 'Volumetric soil water content quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c persistence pass q m'], 'mappings': []}, 'VSWCPersistenceNAQM': {'slot_uri': 'neon:VSWCPersistenceNAQM', 'description': 'Volumetric soil water content quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c persistence n a q m'], 'mappings': []}, 'VSWCStepFailQM': {'slot_uri': 'neon:VSWCStepFailQM', 'description': 'Volumetric soil water content quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c step fail q m'], 'mappings': []}, 'VSWCStepPassQM': {'slot_uri': 'neon:VSWCStepPassQM', 'description': 'Volumetric soil water content quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c step pass q m'], 'mappings': []}, 'VSWCStepNAQM': {'slot_uri': 'neon:VSWCStepNAQM', 'description': 'Volumetric soil water content quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c step n a q m'], 'mappings': []}, 'VSWCNullFailQM': {'slot_uri': 'neon:VSWCNullFailQM', 'description': 'Volumetric soil water content quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c null fail q m'], 'mappings': []}, 'VSWCNullPassQM': {'slot_uri': 'neon:VSWCNullPassQM', 'description': 'Volumetric soil water content quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c null pass q m'], 'mappings': []}, 'VSWCNullNAQM': {'slot_uri': 'neon:VSWCNullNAQM', 'description': 'Volumetric soil water content quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c null n a q m'], 'mappings': []}, 'VSWCGapFailQM': {'slot_uri': 'neon:VSWCGapFailQM', 'description': 'Volumetric soil water content quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c gap fail q m'], 'mappings': []}, 'VSWCGapPassQM': {'slot_uri': 'neon:VSWCGapPassQM', 'description': 'Volumetric soil water content quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c gap pass q m'], 'mappings': []}, 'VSWCGapNAQM': {'slot_uri': 'neon:VSWCGapNAQM', 'description': 'Volumetric soil water content quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c gap n a q m'], 'mappings': []}, 'VSWCSpikeFailQM': {'slot_uri': 'neon:VSWCSpikeFailQM', 'description': 'Volumetric soil water content quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c spike fail q m'], 'mappings': []}, 'VSWCSpikePassQM': {'slot_uri': 'neon:VSWCSpikePassQM', 'description': 'Volumetric soil water content quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c spike pass q m'], 'mappings': []}, 'VSWCSpikeNAQM': {'slot_uri': 'neon:VSWCSpikeNAQM', 'description': 'Volumetric soil water content quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c spike n a q m'], 'mappings': []}, 'VSWCConsistencyFailQM': {'slot_uri': 'neon:VSWCConsistencyFailQM', 'description': 'Volumetric soil water content quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c consistency fail q m'], 'mappings': []}, 'VSWCConsistencyPassQM': {'slot_uri': 'neon:VSWCConsistencyPassQM', 'description': 'Volumetric soil water content quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c consistency pass q m'], 'mappings': []}, 'VSWCConsistencyNAQM': {'slot_uri': 'neon:VSWCConsistencyNAQM', 'description': 'Volumetric soil water content quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c consistency n a q m'], 'mappings': []}, 'VSWCAlphaQM': {'slot_uri': 'neon:VSWCAlphaQM', 'description': 'Volumetric soil water content quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['v s w c alpha q m'], 'mappings': []}, 'VSWCBetaQM': {'slot_uri': 'neon:VSWCBetaQM', 'description': 'Volumetric soil water content quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['v s w c beta q m'], 'mappings': []}, 'VSWCFinalQF': {'slot_uri': 'neon:VSWCFinalQF', 'description': 'Volumetric soil water content quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['v s w c final q f'], 'mappings': []}, 'VSICMean': {'slot_uri': 'neon:VSICMean', 'description': 'Arithmetic mean of volumetric soil ion content', 'range': 'double', 'aliases': ['v s i c mean'], 'mappings': []}, 'VSICMinimum': {'slot_uri': 'neon:VSICMinimum', 'description': 'Minimum volumetric soil ion content', 'range': 'double', 'aliases': ['v s i c minimum'], 'mappings': []}, 'VSICMaximum': {'slot_uri': 'neon:VSICMaximum', 'description': 'Maximum volumetric soil ion content', 'range': 'double', 'aliases': ['v s i c maximum'], 'mappings': []}, 'VSICVariance': {'slot_uri': 'neon:VSICVariance', 'description': 'Variance in volumetric soil ion content', 'range': 'double', 'aliases': ['v s i c variance'], 'mappings': []}, 'VSICNumPts': {'slot_uri': 'neon:VSICNumPts', 'description': 'Number of points used to calculate the arithmetic mean of volumetric soil ion content', 'range': 'double', 'aliases': ['v s i c num pts'], 'mappings': []}, 'VSICExpUncert': {'slot_uri': 'neon:VSICExpUncert', 'description': 'Expanded uncertainty for volumetric soil ion content', 'range': 'double', 'aliases': ['v s i c exp uncert'], 'mappings': []}, 'VSICStdErMean': {'slot_uri': 'neon:VSICStdErMean', 'description': 'Standard error of the mean for volumetric soil ion content', 'range': 'double', 'aliases': ['v s i c std er mean'], 'mappings': []}, 'VSICRangeQAQCRpt': {'slot_uri': 'neon:VSICRangeQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s i c range q a q c rpt'], 'mappings': []}, 'VSICPersistenceQAQCRpt': {'slot_uri': 'neon:VSICPersistenceQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s i c persistence q a q c rpt'], 'mappings': []}, 'VSICStepQAQCRpt': {'slot_uri': 'neon:VSICStepQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s i c step q a q c rpt'], 'mappings': []}, 'VSICNullQAQCRpt': {'slot_uri': 'neon:VSICNullQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s i c null q a q c rpt'], 'mappings': []}, 'VSICGapQAQCRpt': {'slot_uri': 'neon:VSICGapQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['v s i c gap q a q c rpt'], 'mappings': []}, 'VSICConsistencyQAQCRpt': {'slot_uri': 'neon:VSICConsistencyQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s i c consistency q a q c rpt'], 'mappings': []}, 'VSICSpikeQAQCRpt': {'slot_uri': 'neon:VSICSpikeQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s i c spike q a q c rpt'], 'mappings': []}, 'VSICAlphaQAQCRpt': {'slot_uri': 'neon:VSICAlphaQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s i c alpha q a q c rpt'], 'mappings': []}, 'VSICBetaQAQCRpt': {'slot_uri': 'neon:VSICBetaQAQCRpt', 'description': 'Volumetric soil ion content quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['v s i c beta q a q c rpt'], 'mappings': []}, 'VSICRangeFailQM': {'slot_uri': 'neon:VSICRangeFailQM', 'description': 'Volumetric soil ion content quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c range fail q m'], 'mappings': []}, 'VSICRangePassQM': {'slot_uri': 'neon:VSICRangePassQM', 'description': 'Volumetric soil ion content quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c range pass q m'], 'mappings': []}, 'VSICRangeNAQM': {'slot_uri': 'neon:VSICRangeNAQM', 'description': 'Volumetric soil ion content quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c range n a q m'], 'mappings': []}, 'VSICPersistenceFailQM': {'slot_uri': 'neon:VSICPersistenceFailQM', 'description': 'Volumetric soil ion content quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c persistence fail q m'], 'mappings': []}, 'VSICPersistencePassQM': {'slot_uri': 'neon:VSICPersistencePassQM', 'description': 'Volumetric soil ion content quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c persistence pass q m'], 'mappings': []}, 'VSICPersistenceNAQM': {'slot_uri': 'neon:VSICPersistenceNAQM', 'description': 'Volumetric soil ion content quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c persistence n a q m'], 'mappings': []}, 'VSICStepFailQM': {'slot_uri': 'neon:VSICStepFailQM', 'description': 'Volumetric soil ion content quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c step fail q m'], 'mappings': []}, 'VSICStepPassQM': {'slot_uri': 'neon:VSICStepPassQM', 'description': 'Volumetric soil ion content quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c step pass q m'], 'mappings': []}, 'VSICStepNAQM': {'slot_uri': 'neon:VSICStepNAQM', 'description': 'Volumetric soil ion content quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c step n a q m'], 'mappings': []}, 'VSICNullFailQM': {'slot_uri': 'neon:VSICNullFailQM', 'description': 'Volumetric soil ion content quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c null fail q m'], 'mappings': []}, 'VSICNullPassQM': {'slot_uri': 'neon:VSICNullPassQM', 'description': 'Volumetric soil ion content quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c null pass q m'], 'mappings': []}, 'VSICNullNAQM': {'slot_uri': 'neon:VSICNullNAQM', 'description': 'Volumetric soil ion content quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c null n a q m'], 'mappings': []}, 'VSICGapFailQM': {'slot_uri': 'neon:VSICGapFailQM', 'description': 'Volumetric soil ion content quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c gap fail q m'], 'mappings': []}, 'VSICGapPassQM': {'slot_uri': 'neon:VSICGapPassQM', 'description': 'Volumetric soil ion content quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c gap pass q m'], 'mappings': []}, 'VSICGapNAQM': {'slot_uri': 'neon:VSICGapNAQM', 'description': 'Volumetric soil ion content quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c gap n a q m'], 'mappings': []}, 'VSICSpikeFailQM': {'slot_uri': 'neon:VSICSpikeFailQM', 'description': 'Volumetric soil ion content quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c spike fail q m'], 'mappings': []}, 'VSICSpikePassQM': {'slot_uri': 'neon:VSICSpikePassQM', 'description': 'Volumetric soil ion content quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c spike pass q m'], 'mappings': []}, 'VSICSpikeNAQM': {'slot_uri': 'neon:VSICSpikeNAQM', 'description': 'Volumetric soil ion content quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c spike n a q m'], 'mappings': []}, 'VSICConsistencyFailQM': {'slot_uri': 'neon:VSICConsistencyFailQM', 'description': 'Volumetric soil ion content quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c consistency fail q m'], 'mappings': []}, 'VSICConsistencyPassQM': {'slot_uri': 'neon:VSICConsistencyPassQM', 'description': 'Volumetric soil ion content quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c consistency pass q m'], 'mappings': []}, 'VSICConsistencyNAQM': {'slot_uri': 'neon:VSICConsistencyNAQM', 'description': 'Volumetric soil ion content quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c consistency n a q m'], 'mappings': []}, 'VSICAlphaQM': {'slot_uri': 'neon:VSICAlphaQM', 'description': 'Volumetric soil ion content quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['v s i c alpha q m'], 'mappings': []}, 'VSICBetaQM': {'slot_uri': 'neon:VSICBetaQM', 'description': 'Volumetric soil ion content quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['v s i c beta q m'], 'mappings': []}, 'VSICFinalQF': {'slot_uri': 'neon:VSICFinalQF', 'description': 'Volumetric soil ion content quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['v s i c final q f'], 'mappings': []}, 'tempQAQCRpt': {'slot_uri': 'neon:tempQAQCRpt', 'description': 'Quality assurance and quality control report for the temperature test, which indicates  whether the temperature is high enough to make meaningful measurements, detailed in NEON.DOC.000007 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp q a q c rpt'], 'mappings': []}, 'tempFailQM': {'slot_uri': 'neon:tempFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the temperature test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp fail q m'], 'mappings': []}, 'tempPassQM': {'slot_uri': 'neon:tempPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the temperature test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp pass q m'], 'mappings': []}, 'tempNA': {'slot_uri': 'neon:tempNA', 'description': 'Quality metric that summarizes when the temperature test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp n a'], 'mappings': []}, 'tempNAQM': {'slot_uri': 'neon:tempNAQM', 'description': 'Quality metric that summarizes when the temperature test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp n a q m'], 'mappings': []}, 'stationID': {'slot_uri': 'neon:stationID', 'description': 'Identifier for station where sample was collected', 'range': 'string', 'aliases': ['station i d'], 'mappings': []}, 'processedDate': {'slot_uri': 'neon:processedDate', 'description': 'Date or date and time of processing event', 'range': 'time', 'aliases': ['processed date'], 'mappings': []}, 'waterTemp': {'slot_uri': 'neon:waterTemp', 'description': 'Temperature of water (C)', 'range': 'double', 'aliases': ['water temp'], 'mappings': []}, 'specificConductance': {'slot_uri': 'neon:specificConductance', 'description': 'Conductivity auto-corrected to 25 degrees C', 'range': 'double', 'aliases': ['specific conductance'], 'mappings': []}, 'sampleVolumeFiltered': {'slot_uri': 'neon:sampleVolumeFiltered', 'description': 'Volume of water filtered onto the filter for external analysis', 'range': 'double', 'aliases': ['sample volume filtered'], 'mappings': []}, 'aCollectedBy': {'slot_uri': 'neon:aCollectedBy', 'description': 'Primary NEON technician username who collected the data', 'range': 'string', 'aliases': ['a collected by'], 'mappings': []}, 'bCollectedBy': {'slot_uri': 'neon:bCollectedBy', 'description': 'Secondary NEON technician username who collected the data', 'range': 'string', 'aliases': ['b collected by'], 'mappings': []}, 'altLocation': {'slot_uri': 'neon:altLocation', 'description': 'Alternate Sampling Location description', 'range': 'string', 'aliases': ['alt location'], 'mappings': []}, 'altLongitude': {'slot_uri': 'neon:altLongitude', 'description': 'Alternate Sampling Location coordinate - longitude', 'range': 'double', 'aliases': ['alt longitude'], 'mappings': []}, 'altLatitude': {'slot_uri': 'neon:altLatitude', 'description': 'Alternate Sampling Location coordinate - latitude', 'range': 'double', 'aliases': ['alt latitude'], 'mappings': []}, 'titrationLocation': {'slot_uri': 'neon:titrationLocation', 'description': 'Location where sample titration was completed', 'range': 'string', 'aliases': ['titration location'], 'mappings': []}, 'pH4CheckValue': {'slot_uri': 'neon:pH4CheckValue', 'description': 'pH meter reading during pH 4 check', 'range': 'double', 'aliases': ['p h4 check value'], 'mappings': []}, 'pH7CheckValue': {'slot_uri': 'neon:pH7CheckValue', 'description': 'pH meter reading during pH 7 check', 'range': 'double', 'aliases': ['p h7 check value'], 'mappings': []}, 'pHMeterCalibration': {'slot_uri': 'neon:pHMeterCalibration', 'description': 'Was pH meter recalibrated?', 'range': 'string', 'aliases': ['p h meter calibration'], 'mappings': []}, 'initialSamplepH': {'slot_uri': 'neon:initialSamplepH', 'description': 'pH at start of titration', 'range': 'double', 'aliases': ['initial samplep h'], 'mappings': []}, 'initialSampleTemp': {'slot_uri': 'neon:initialSampleTemp', 'description': 'Temperature at start of titration', 'range': 'double', 'aliases': ['initial sample temp'], 'mappings': []}, 'normality': {'slot_uri': 'neon:normality', 'description': 'Titrant normality used', 'range': 'string', 'aliases': ['normality'], 'mappings': []}, 'sampleVolume': {'slot_uri': 'neon:sampleVolume', 'description': 'Sample volume in milliliters', 'range': 'double', 'aliases': ['sample volume'], 'mappings': []}, 'methodType': {'slot_uri': 'neon:methodType', 'description': 'Method of titration used', 'range': 'string', 'aliases': ['method type'], 'mappings': []}, 'maxDepth': {'slot_uri': 'neon:maxDepth', 'description': 'Maximum depth', 'range': 'double', 'aliases': ['max depth'], 'mappings': []}, 'upperSegmentDepth': {'slot_uri': 'neon:upperSegmentDepth', 'description': 'Depth at top of stratified lake segment', 'range': 'double', 'aliases': ['upper segment depth'], 'mappings': []}, 'lowerSegmentDepth': {'slot_uri': 'neon:lowerSegmentDepth', 'description': 'Depth at bottom of stratified lake segment', 'range': 'double', 'aliases': ['lower segment depth'], 'mappings': []}, 'titrationDate': {'slot_uri': 'neon:titrationDate', 'description': 'Date and time of titration', 'range': 'time', 'aliases': ['titration date'], 'mappings': []}, 'titrationData': {'slot_uri': 'neon:titrationData', 'description': 'x,y pairs of pH and Counter Reading on digital titrator', 'range': 'string', 'aliases': ['titration data'], 'mappings': []}, 'startDate': {'slot_uri': 'neon:startDate', 'description': 'The start date-time or interval during which an event occurred', 'range': 'time', 'aliases': ['start date'], 'mappings': ['dwc:eventDate']}, 'endDate': {'slot_uri': 'neon:endDate', 'description': 'The end date-time or interval during which an event occurred', 'range': 'time', 'aliases': ['end date'], 'mappings': []}, 'initialStageHeight': {'slot_uri': 'neon:initialStageHeight', 'description': 'Initial stage (m)', 'range': 'double', 'aliases': ['initial stage height'], 'mappings': []}, 'endStageHeight': {'slot_uri': 'neon:endStageHeight', 'description': 'End stage (m)', 'range': 'double', 'aliases': ['end stage height'], 'mappings': []}, 'windDescrip': {'slot_uri': 'neon:windDescrip', 'description': 'Qualitative description of wind levels', 'range': 'string', 'aliases': ['wind descrip'], 'mappings': []}, 'cloudCoverPercentage': {'slot_uri': 'neon:cloudCoverPercentage', 'description': 'Sky Condition, % of cloud cover', 'range': 'double', 'aliases': ['cloud cover percentage'], 'mappings': []}, 'precipDescrip': {'slot_uri': 'neon:precipDescrip', 'description': 'Qualitative description of precipitation levels', 'range': 'string', 'aliases': ['precip descrip'], 'mappings': []}, 'previousRain': {'slot_uri': 'neon:previousRain', 'description': 'Previous Rain event within 48 hours (Yes/No)', 'range': 'string', 'aliases': ['previous rain'], 'mappings': []}, 'previousRainEvidence': {'slot_uri': 'neon:previousRainEvidence', 'description': 'Evidence of previous rain event', 'range': 'string', 'aliases': ['previous rain evidence'], 'mappings': []}, 'airTemperature': {'slot_uri': 'neon:airTemperature', 'description': 'Estimated Air Temperature', 'range': 'double', 'aliases': ['air temperature'], 'mappings': []}, 'waterColorDescrip': {'slot_uri': 'neon:waterColorDescrip', 'description': 'Qualitative description of water color and clarity', 'range': 'string', 'aliases': ['water color descrip'], 'mappings': []}, 'riparianPhenologyDescrip': {'slot_uri': 'neon:riparianPhenologyDescrip', 'description': 'Qualitative description of riparian phenology status', 'range': 'string', 'aliases': ['riparian phenology descrip'], 'mappings': []}, 'algaeRemarks': {'slot_uri': 'neon:algaeRemarks', 'description': 'Post Field Work Observations if applicable: Algae', 'range': 'string', 'aliases': ['algae remarks'], 'mappings': []}, 'macrophytesRemarks': {'slot_uri': 'neon:macrophytesRemarks', 'description': 'Post Field Work Observations: Macrophytes', 'range': 'string', 'aliases': ['macrophytes remarks'], 'mappings': []}, 'leafLitterRemarks': {'slot_uri': 'neon:leafLitterRemarks', 'description': 'Post Field Work Observations: Leaf Litter', 'range': 'string', 'aliases': ['leaf litter remarks'], 'mappings': []}, 'woodyDebrisRemarks': {'slot_uri': 'neon:woodyDebrisRemarks', 'description': 'Post Field Work Observations: Woody Debris', 'range': 'string', 'aliases': ['woody debris remarks'], 'mappings': []}, 'oilsRemarks': {'slot_uri': 'neon:oilsRemarks', 'description': 'Post Field Work Observations: Oils/Surface Films', 'range': 'string', 'aliases': ['oils remarks'], 'mappings': []}, 'trashRemarks': {'slot_uri': 'neon:trashRemarks', 'description': 'Post Field Work Observations: Trash', 'range': 'string', 'aliases': ['trash remarks'], 'mappings': []}, 'aRecordedBy': {'slot_uri': 'neon:aRecordedBy', 'description': 'Primary NEON technician username who recorded the data', 'range': 'string', 'aliases': ['a recorded by'], 'mappings': []}, 'bRecordedBy': {'slot_uri': 'neon:bRecordedBy', 'description': 'Secondary NEON technician username who recorded the data', 'range': 'string', 'aliases': ['b recorded by'], 'mappings': []}, 'samplingProtocolVersion': {'slot_uri': 'neon:samplingProtocolVersion', 'description': 'The NEON document number and version where detailed information regarding the sampling method used is available; format NEON.DOC.######vX', 'range': 'string', 'aliases': ['sampling protocol version'], 'mappings': []}, 'alkMeqPerL': {'slot_uri': 'neon:alkMeqPerL', 'description': 'alkalinity titration result in milliequivalents per Liter', 'range': 'double', 'aliases': ['alk meq per l'], 'mappings': []}, 'alkMgPerL': {'slot_uri': 'neon:alkMgPerL', 'description': 'alkalinity titration result in milligrams of Calcium Carbonate per Liter', 'range': 'double', 'aliases': ['alk mg per l'], 'mappings': []}, 'ancMeqPerL': {'slot_uri': 'neon:ancMeqPerL', 'description': 'acid neutralizing capacity titration result in milliequivalents per Liter', 'range': 'double', 'aliases': ['anc meq per l'], 'mappings': []}, 'ancMgPerL': {'slot_uri': 'neon:ancMgPerL', 'description': 'acid neutralizing capacity titration result in milligrams of Calcium Carbonate per Liter', 'range': 'double', 'aliases': ['anc mg per l'], 'mappings': []}, 'tpcnVolumeFiltered': {'slot_uri': 'neon:tpcnVolumeFiltered', 'description': 'Volume of water filtered onto the filter for external analysis of total particulate carbon and nitrogen (TPCN)', 'range': 'double', 'aliases': ['tpcn volume filtered'], 'mappings': []}, 'duplicateRecordQF': {'slot_uri': 'neon:duplicateRecordQF', 'description': 'Quality Flag for duplicate record', 'range': 'integer', 'aliases': ['duplicate record q f'], 'mappings': []}, 'exceedProcessTimeQF': {'slot_uri': 'neon:exceedProcessTimeQF', 'description': 'Quality Flag for exceeding processing time requirements - Domain Lab Data', 'range': 'integer', 'aliases': ['exceed process time q f'], 'mappings': []}, 'exceed72hrTitrationQF': {'slot_uri': 'neon:exceed72hrTitrationQF', 'description': 'Quality Flag for exceeding titration time requirements - Domain Lab Data', 'range': 'integer', 'aliases': ['exceed72hr titration q f'], 'mappings': []}, 'alkRangeTestQF': {'slot_uri': 'neon:alkRangeTestQF', 'description': 'Quality Flag for values out of range - ALK results, meq/L', 'range': 'integer', 'aliases': ['alk range test q f'], 'mappings': []}, 'ancRangeTestQF': {'slot_uri': 'neon:ancRangeTestQF', 'description': 'Quality Flag for values out of range - ANC results, meq/L', 'range': 'integer', 'aliases': ['anc range test q f'], 'mappings': []}, 'exceed24hrTitrationQF': {'slot_uri': 'neon:exceed24hrTitrationQF', 'description': 'Quality Flag for exceeding titration time recommendations - Domain Lab Data', 'range': 'integer', 'aliases': ['exceed24hr titration q f'], 'mappings': []}, 'dissolvedOxygen': {'slot_uri': 'neon:dissolvedOxygen', 'description': 'Dissolved Oxygen Concentration', 'range': 'double', 'aliases': ['dissolved oxygen'], 'mappings': []}, 'RHSensorErrorQAQCRpt': {'slot_uri': 'neon:RHSensorErrorQAQCRpt', 'description': 'Relative humidity quality assurance and quality control report for the sensor error flag, which indicates whether a sensor error occurred, detailed in NEON.DOC.000850 and NEON.DOC.000851 (1=error is detected, 0=no error, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h sensor error q a q c rpt'], 'mappings': []}, 'pitID': {'slot_uri': 'neon:pitID', 'description': 'An identifier for the soil pit', 'range': 'string', 'aliases': ['pit i d'], 'mappings': []}, 'pitDepth': {'slot_uri': 'neon:pitDepth', 'description': 'Depth of the bottom of the soil pit below the soil surface', 'range': 'double', 'aliases': ['pit depth'], 'mappings': []}, 'recordedByA': {'slot_uri': 'neon:recordedByA', 'description': 'An identifier for one of the people who recorded the data', 'range': 'string', 'aliases': ['recorded by a'], 'mappings': []}, 'recordedByB': {'slot_uri': 'neon:recordedByB', 'description': 'An identifier for one of the people who recorded the data', 'range': 'string', 'aliases': ['recorded by b'], 'mappings': []}, 'recordedByC': {'slot_uri': 'neon:recordedByC', 'description': 'An identifier for one of the people who recorded the data', 'range': 'string', 'aliases': ['recorded by c'], 'mappings': []}, 'recordedByD': {'slot_uri': 'neon:recordedByD', 'description': 'An identifier for one of the people who recorded the data', 'range': 'string', 'aliases': ['recorded by d'], 'mappings': []}, 'recordedByE': {'slot_uri': 'neon:recordedByE', 'description': 'An identifier for one of the people who recorded the data', 'range': 'string', 'aliases': ['recorded by e'], 'mappings': []}, 'rootsCollectedByA': {'slot_uri': 'neon:rootsCollectedByA', 'description': 'An identifier for one of the people who collected the root sample(s) or specimen(s)', 'range': 'string', 'aliases': ['roots collected by a'], 'mappings': []}, 'rootsCollectedByB': {'slot_uri': 'neon:rootsCollectedByB', 'description': 'An identifier for one of the people who collected the root sample(s) or specimen(s)', 'range': 'string', 'aliases': ['roots collected by b'], 'mappings': []}, 'rootsCollectedByC': {'slot_uri': 'neon:rootsCollectedByC', 'description': 'An identifier for one of the people who collected the root sample(s) or specimen(s)', 'range': 'string', 'aliases': ['roots collected by c'], 'mappings': []}, 'rootsCollectedByD': {'slot_uri': 'neon:rootsCollectedByD', 'description': 'An identifier for one of the people who collected the root sample(s) or specimen(s)', 'range': 'string', 'aliases': ['roots collected by d'], 'mappings': []}, 'safetyPersonnelA': {'slot_uri': 'neon:safetyPersonnelA', 'description': 'An identifier for one of the safety specialists present during part or all of the sample or specimen collection', 'range': 'string', 'aliases': ['safety personnel a'], 'mappings': []}, 'safetyPersonnelB': {'slot_uri': 'neon:safetyPersonnelB', 'description': 'An identifier for one of the safety specialists present during part or all of the sample or specimen collection', 'range': 'string', 'aliases': ['safety personnel b'], 'mappings': []}, 'safetyPersonnelC': {'slot_uri': 'neon:safetyPersonnelC', 'description': 'An identifier for one of the safety specialists present during part or all of the sample or specimen collection', 'range': 'string', 'aliases': ['safety personnel c'], 'mappings': []}, 'fccConstructionSupervisorA': {'slot_uri': 'neon:fccConstructionSupervisorA', 'description': 'An identifier for one of the FCC Construction Supervisors present during part or all of the sample or specimen collection', 'range': 'string', 'aliases': ['fcc construction supervisor a'], 'mappings': []}, 'fccConstructionSupervisorB': {'slot_uri': 'neon:fccConstructionSupervisorB', 'description': 'An identifier for one of the FCC Construction Supervisors present during part or all of the sample or specimen collection', 'range': 'string', 'aliases': ['fcc construction supervisor b'], 'mappings': []}, 'fccConstructionSupervisorC': {'slot_uri': 'neon:fccConstructionSupervisorC', 'description': 'An identifier for one of the FCC Construction Supervisors present during part or all of the sample or specimen collection', 'range': 'string', 'aliases': ['fcc construction supervisor c'], 'mappings': []}, 'fccConstructionContractor': {'slot_uri': 'neon:fccConstructionContractor', 'description': 'An identifier for the Construction Contractor that excavated TIS soil pit', 'range': 'string', 'aliases': ['fcc construction contractor'], 'mappings': []}, 'soilProfileDescriberA': {'slot_uri': 'neon:soilProfileDescriberA', 'description': 'An identifier for one of the people who described the soil profile', 'range': 'string', 'aliases': ['soil profile describer a'], 'mappings': []}, 'soilProfileDescriberB': {'slot_uri': 'neon:soilProfileDescriberB', 'description': 'An identifier for one of the people who described the soil profile', 'range': 'string', 'aliases': ['soil profile describer b'], 'mappings': []}, 'soilProfileDescriberC': {'slot_uri': 'neon:soilProfileDescriberC', 'description': 'An identifier for one of the people who described the soil profile', 'range': 'string', 'aliases': ['soil profile describer c'], 'mappings': []}, 'soilProfileDescriberD': {'slot_uri': 'neon:soilProfileDescriberD', 'description': 'An identifier for one of the people who described the soil profile', 'range': 'string', 'aliases': ['soil profile describer d'], 'mappings': []}, 'soilProfileDescriberE': {'slot_uri': 'neon:soilProfileDescriberE', 'description': 'An identifier for one of the people who described the soil profile', 'range': 'string', 'aliases': ['soil profile describer e'], 'mappings': []}, 'soilProfileDescriberF': {'slot_uri': 'neon:soilProfileDescriberF', 'description': 'An identifier for one of the people who described the soil profile', 'range': 'string', 'aliases': ['soil profile describer f'], 'mappings': []}, 'soilProfileDescriberInst': {'slot_uri': 'neon:soilProfileDescriberInst', 'description': 'Institution of the person/people that performed the soil profile description', 'range': 'string', 'aliases': ['soil profile describer inst'], 'mappings': []}, 'nrcsDescriptionID': {'slot_uri': 'neon:nrcsDescriptionID', 'description': 'NRCS identifier assigned to the soil profile description', 'range': 'string', 'aliases': ['nrcs description i d'], 'mappings': []}, 'soilSeries': {'slot_uri': 'neon:soilSeries', 'description': 'Soil taxonomy at the series level', 'range': 'string', 'aliases': ['soil series'], 'mappings': []}, 'soilFamily': {'slot_uri': 'neon:soilFamily', 'description': 'Soil taxonomy at the family level', 'range': 'string', 'aliases': ['soil family'], 'mappings': []}, 'soilSubgroup': {'slot_uri': 'neon:soilSubgroup', 'description': 'Soil taxonomy at the subgroup level', 'range': 'string', 'aliases': ['soil subgroup'], 'mappings': []}, 'soilGreatGroup': {'slot_uri': 'neon:soilGreatGroup', 'description': 'Soil taxonomy at the great group level', 'range': 'string', 'aliases': ['soil great group'], 'mappings': []}, 'soilSuborder': {'slot_uri': 'neon:soilSuborder', 'description': 'Soil taxonomy at the suborder level', 'range': 'string', 'aliases': ['soil suborder'], 'mappings': []}, 'soilOrder': {'slot_uri': 'neon:soilOrder', 'description': 'Soil taxonomy at the order level', 'range': 'string', 'aliases': ['soil order'], 'mappings': []}, 'horizonID': {'slot_uri': 'neon:horizonID', 'description': 'An identifier for the soil horizon', 'range': 'string', 'aliases': ['horizon i d'], 'mappings': []}, 'horizonTempName': {'slot_uri': 'neon:horizonTempName', 'description': 'Temporary soil horizon name assigned in the field', 'range': 'string', 'aliases': ['horizon temp name'], 'mappings': []}, 'horizonName': {'slot_uri': 'neon:horizonName', 'description': 'Soil horizon name', 'range': 'string', 'aliases': ['horizon name'], 'mappings': []}, 'horizonTopDepth': {'slot_uri': 'neon:horizonTopDepth', 'description': 'Depth below the soil surface of the top of a soil horizon', 'range': 'double', 'aliases': ['horizon top depth'], 'mappings': []}, 'horizonBottomDepth': {'slot_uri': 'neon:horizonBottomDepth', 'description': 'Depth below the soil surface of the bottom of a soil horizon', 'range': 'double', 'aliases': ['horizon bottom depth'], 'mappings': []}, 'laboratoryName': {'slot_uri': 'neon:laboratoryName', 'description': 'Name of the laboratory or facility that is processing the sample', 'range': 'string', 'aliases': ['laboratory name'], 'mappings': []}, 'labProjID': {'slot_uri': 'neon:labProjID', 'description': 'Identifier for soil physical properties analyses', 'range': 'string', 'aliases': ['lab proj i d'], 'mappings': []}, 'bulkDensID': {'slot_uri': 'neon:bulkDensID', 'description': 'Identifier for bulk density sample', 'range': 'string', 'aliases': ['bulk dens i d'], 'mappings': []}, 'bulkDensIDnrcs': {'slot_uri': 'neon:bulkDensIDnrcs', 'description': 'Identifier used by National Resource Conservation Service (NRCS) for bulk density sample', 'range': 'string', 'aliases': ['bulk dens i dnrcs'], 'mappings': []}, 'bulkDensHorizonProportion': {'slot_uri': 'neon:bulkDensHorizonProportion', 'description': 'Proportion of horizon represented by bulk density sample on a volume basis', 'range': 'double', 'aliases': ['bulk dens horizon proportion'], 'mappings': []}, 'bulkDensSampleType': {'slot_uri': 'neon:bulkDensSampleType', 'description': 'Type of bulk density sample', 'range': 'string', 'aliases': ['bulk dens sample type'], 'mappings': []}, 'bulkDensCenterDepth': {'slot_uri': 'neon:bulkDensCenterDepth', 'description': 'Depth of the vertical center of the bulk sample below the soil surface', 'range': 'double', 'aliases': ['bulk dens center depth'], 'mappings': []}, 'bulkDensDiameter': {'slot_uri': 'neon:bulkDensDiameter', 'description': 'Diameter of the excavation cavity used for bulk density sampling', 'range': 'double', 'aliases': ['bulk dens diameter'], 'mappings': []}, 'bulkDensLength': {'slot_uri': 'neon:bulkDensLength', 'description': 'Length of the excavation cavity used for bulk density sampling', 'range': 'double', 'aliases': ['bulk dens length'], 'mappings': []}, 'bulkDensVolume': {'slot_uri': 'neon:bulkDensVolume', 'description': 'Volume of the bulk density sample', 'range': 'double', 'aliases': ['bulk dens volume'], 'mappings': []}, 'bulkDensTopDepth': {'slot_uri': 'neon:bulkDensTopDepth', 'description': 'Top depth of the bulk density sample', 'range': 'double', 'aliases': ['bulk dens top depth'], 'mappings': []}, 'bulkDensBottomDepth': {'slot_uri': 'neon:bulkDensBottomDepth', 'description': 'Bottom depth of the bulk density sample', 'range': 'double', 'aliases': ['bulk dens bottom depth'], 'mappings': []}, 'bulkDensOrientation': {'slot_uri': 'neon:bulkDensOrientation', 'description': 'Orientation of the coring direction for the bulk density sample', 'range': 'string', 'aliases': ['bulk dens orientation'], 'mappings': []}, 'bulkDensWetWeight': {'slot_uri': 'neon:bulkDensWetWeight', 'description': 'Total weight of the bulk density sample prior to drying', 'range': 'double', 'aliases': ['bulk dens wet weight'], 'mappings': []}, 'bulkDensDryWeight': {'slot_uri': 'neon:bulkDensDryWeight', 'description': 'Total weight of the bulk density sample after drying', 'range': 'double', 'aliases': ['bulk dens dry weight'], 'mappings': []}, 'bulkDensCoarseFragWeight': {'slot_uri': 'neon:bulkDensCoarseFragWeight', 'description': 'Weight of the coarse (>2 mm) fragments in the bulk density sample', 'range': 'double', 'aliases': ['bulk dens coarse frag weight'], 'mappings': []}, 'bulkDensCoarseFragDens': {'slot_uri': 'neon:bulkDensCoarseFragDens', 'description': 'Density of the coarse (>2 mm) fragments in the bulk density sample', 'range': 'double', 'aliases': ['bulk dens coarse frag dens'], 'mappings': []}, 'bulkDensCoarseFragDensMeas': {'slot_uri': 'neon:bulkDensCoarseFragDensMeas', 'description': 'Identifies approach used to determine coarse fragment density', 'range': 'string', 'aliases': ['bulk dens coarse frag dens meas'], 'mappings': []}, 'bulkDensExclCoarseFrag': {'slot_uri': 'neon:bulkDensExclCoarseFrag', 'description': 'Bulk density of soil excluding coarse fragments (>2 mm)', 'range': 'double', 'aliases': ['bulk dens excl coarse frag'], 'mappings': []}, 'bulkDensInclCoarseFrag': {'slot_uri': 'neon:bulkDensInclCoarseFrag', 'description': 'Bulk density of soil including coarse fragments (>2 mm)', 'range': 'double', 'aliases': ['bulk dens incl coarse frag'], 'mappings': []}, 'coarseFragWeight': {'slot_uri': 'neon:coarseFragWeight', 'description': 'Coarse (>2 mm) fragment occurance expressed on weight basis', 'range': 'double', 'aliases': ['coarse frag weight'], 'mappings': []}, 'coarseFragVolume': {'slot_uri': 'neon:coarseFragVolume', 'description': 'Coarse (>2 mm) fragment occurance expressed on volume basis', 'range': 'double', 'aliases': ['coarse frag volume'], 'mappings': []}, 'biogeoID': {'slot_uri': 'neon:biogeoID', 'description': 'Identifier for the biogeochemistry sample', 'range': 'string', 'aliases': ['biogeo i d'], 'mappings': []}, 'biogeoIDnrcs': {'slot_uri': 'neon:biogeoIDnrcs', 'description': 'Identifier used by NRCS for the biogeochemistry sample', 'range': 'string', 'aliases': ['biogeo i dnrcs'], 'mappings': []}, 'biogeoHorizonProportion': {'slot_uri': 'neon:biogeoHorizonProportion', 'description': 'Proportion of horizon represented by biogeochemistry sample on a volume basis', 'range': 'double', 'aliases': ['biogeo horizon proportion'], 'mappings': []}, 'biogeoSampleType': {'slot_uri': 'neon:biogeoSampleType', 'description': 'Type of biogeochemistry sample', 'range': 'string', 'aliases': ['biogeo sample type'], 'mappings': []}, 'biogeoTopDepth': {'slot_uri': 'neon:biogeoTopDepth', 'description': 'Top depth of the biogeochemistry sample', 'range': 'double', 'aliases': ['biogeo top depth'], 'mappings': []}, 'biogeoBottomDepth': {'slot_uri': 'neon:biogeoBottomDepth', 'description': 'Bottom depth of the biogeochemistry sample', 'range': 'double', 'aliases': ['biogeo bottom depth'], 'mappings': []}, 'biogeoCenterDepth': {'slot_uri': 'neon:biogeoCenterDepth', 'description': 'Depth of the center of the biogeochemistry sample', 'range': 'double', 'aliases': ['biogeo center depth'], 'mappings': []}, 'biogeoTotWeight': {'slot_uri': 'neon:biogeoTotWeight', 'description': 'Total dry weight of the biogeochemistry soil sample', 'range': 'double', 'aliases': ['biogeo tot weight'], 'mappings': []}, 'biogeoTotWeight2To5': {'slot_uri': 'neon:biogeoTotWeight2To5', 'description': 'Total dry weight of the 2-5 mm size fraction of the biogeochemistry soil sample', 'range': 'double', 'aliases': ['biogeo tot weight2 to5'], 'mappings': []}, 'biogeoTotWeight5To20': {'slot_uri': 'neon:biogeoTotWeight5To20', 'description': 'Total dry weight of the 5-20 mm size fraction of the biogeochemistry soil sample', 'range': 'double', 'aliases': ['biogeo tot weight5 to20'], 'mappings': []}, 'biogeoTotWeight20To75': {'slot_uri': 'neon:biogeoTotWeight20To75', 'description': 'Total dry weight of the 20-75 mm size fraction of the biogeochemistry soil sample', 'range': 'double', 'aliases': ['biogeo tot weight20 to75'], 'mappings': []}, 'airDryOvenDry': {'slot_uri': 'neon:airDryOvenDry', 'description': 'Airdry/ovendry ratio of the <2 mm fraction', 'range': 'double', 'aliases': ['air dry oven dry'], 'mappings': []}, 'gypsum': {'slot_uri': 'neon:gypsum', 'description': 'Gypsum content of the <2 mm fraction', 'range': 'double', 'aliases': ['gypsum'], 'mappings': []}, 'caco3': {'slot_uri': 'neon:caco3', 'description': 'Carbonate content of the <2 mm fraction experssed as calcium carbonate', 'range': 'double', 'aliases': ['caco3'], 'mappings': []}, 'caNh4d': {'slot_uri': 'neon:caNh4d', 'description': 'Ammonium acetate extractable Calcium from the <2 mm fraction', 'range': 'double', 'aliases': ['ca nh4d'], 'mappings': []}, 'kNh4d': {'slot_uri': 'neon:kNh4d', 'description': 'Ammonium acetate extractable potassium from the <2 mm fraction', 'range': 'double', 'aliases': ['k nh4d'], 'mappings': []}, 'mgNh4d': {'slot_uri': 'neon:mgNh4d', 'description': 'Ammonium acetate extractable magnesium from the <2 mm fraction', 'range': 'double', 'aliases': ['mg nh4d'], 'mappings': []}, 'naNh4d': {'slot_uri': 'neon:naNh4d', 'description': 'Ammonium acetate extractable sodium from the <2 mm fraction', 'range': 'double', 'aliases': ['na nh4d'], 'mappings': []}, 'cecdNh4': {'slot_uri': 'neon:cecdNh4', 'description': 'Ammonium acetate cation exchange capacity (CEC) of the <2 mm fraction', 'range': 'double', 'aliases': ['cecd nh4'], 'mappings': []}, 'alSatCecd33': {'slot_uri': 'neon:alSatCecd33', 'description': 'Aluminum saturation of the <2 mm fraction', 'range': 'double', 'aliases': ['al sat cecd33'], 'mappings': []}, 'baseSumCecd10': {'slot_uri': 'neon:baseSumCecd10', 'description': 'Sum of Ammonium acetate extractable bases from the <2 mm fraction', 'range': 'double', 'aliases': ['base sum cecd10'], 'mappings': []}, 'bsesatCecd10': {'slot_uri': 'neon:bsesatCecd10', 'description': 'Base saturation of the <2 mm fraction', 'range': 'double', 'aliases': ['bsesat cecd10'], 'mappings': []}, 'ececCecd33': {'slot_uri': 'neon:ececCecd33', 'description': 'Effective cation exchange capacity (CEC) of the <2 mm fraction', 'range': 'double', 'aliases': ['ecec cecd33'], 'mappings': []}, 'alKcl': {'slot_uri': 'neon:alKcl', 'description': 'KCl extractable aluminum from the <2 mm fraction', 'range': 'double', 'aliases': ['al kcl'], 'mappings': []}, 'feKcl': {'slot_uri': 'neon:feKcl', 'description': 'KCl extractable iron from the <2 mm fraction', 'range': 'double', 'aliases': ['fe kcl'], 'mappings': []}, 'mnKcl': {'slot_uri': 'neon:mnKcl', 'description': 'KCl extractable manganese from the <2 mm fraction', 'range': 'double', 'aliases': ['mn kcl'], 'mappings': []}, 'alMjelm': {'slot_uri': 'neon:alMjelm', 'description': 'Total dissolution aluminum from the <2 mm fraction', 'range': 'double', 'aliases': ['al mjelm'], 'mappings': []}, 'caMjelm': {'slot_uri': 'neon:caMjelm', 'description': 'Total dissolution calcium from the <2 mm fraction', 'range': 'double', 'aliases': ['ca mjelm'], 'mappings': []}, 'feMjelm': {'slot_uri': 'neon:feMjelm', 'description': 'Total dissolution iron from the <2 mm fraction', 'range': 'double', 'aliases': ['fe mjelm'], 'mappings': []}, 'kMjelm': {'slot_uri': 'neon:kMjelm', 'description': 'Total dissolution potassium from the <2 mm fraction', 'range': 'double', 'aliases': ['k mjelm'], 'mappings': []}, 'mgMjelm': {'slot_uri': 'neon:mgMjelm', 'description': 'Total dissolution magnesium from the <2 mm fraction', 'range': 'double', 'aliases': ['mg mjelm'], 'mappings': []}, 'mnMjelm': {'slot_uri': 'neon:mnMjelm', 'description': 'Total dissolution manganese from the <2 mm fraction', 'range': 'double', 'aliases': ['mn mjelm'], 'mappings': []}, 'naMjelm': {'slot_uri': 'neon:naMjelm', 'description': 'Total dissolution sodium from the <2 mm fraction', 'range': 'double', 'aliases': ['na mjelm'], 'mappings': []}, 'pMjelm': {'slot_uri': 'neon:pMjelm', 'description': 'Total dissolution phosphorous from the <2 mm fraction', 'range': 'double', 'aliases': ['p mjelm'], 'mappings': []}, 'siMjelm': {'slot_uri': 'neon:siMjelm', 'description': 'Total dissolution silicon from the <2 mm fraction', 'range': 'double', 'aliases': ['si mjelm'], 'mappings': []}, 'srMjelm': {'slot_uri': 'neon:srMjelm', 'description': 'Total dissolution strontium from the <2 mm fraction', 'range': 'double', 'aliases': ['sr mjelm'], 'mappings': []}, 'tiMjelm': {'slot_uri': 'neon:tiMjelm', 'description': 'Total dissolution titanium from the <2 mm fraction', 'range': 'double', 'aliases': ['ti mjelm'], 'mappings': []}, 'zrMjelm': {'slot_uri': 'neon:zrMjelm', 'description': 'Total dissolution zirconium from the <2 mm fraction', 'range': 'double', 'aliases': ['zr mjelm'], 'mappings': []}, 'phCacl2': {'slot_uri': 'neon:phCacl2', 'description': 'pH of the <2 mm fraction in CaCl2', 'range': 'double', 'aliases': ['ph cacl2'], 'mappings': []}, 'phH2o': {'slot_uri': 'neon:phH2o', 'description': 'pH of the <2 mm fraction in water', 'range': 'double', 'aliases': ['ph h2o'], 'mappings': []}, 'ec12pre': {'slot_uri': 'neon:ec12pre', 'description': '1:2 Electrical conductivity of the <2 mm fraction', 'range': 'double', 'aliases': ['ec12pre'], 'mappings': []}, 'bSatx': {'slot_uri': 'neon:bSatx', 'description': 'Boron in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['b satx'], 'mappings': []}, 'brSatx': {'slot_uri': 'neon:brSatx', 'description': 'Bromine in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['br satx'], 'mappings': []}, 'caSatx': {'slot_uri': 'neon:caSatx', 'description': 'Calcium in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['ca satx'], 'mappings': []}, 'clSatx': {'slot_uri': 'neon:clSatx', 'description': 'Chlorine in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['cl satx'], 'mappings': []}, 'co3Satx': {'slot_uri': 'neon:co3Satx', 'description': 'Carbonate in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['co3 satx'], 'mappings': []}, 'ecSatp': {'slot_uri': 'neon:ecSatp', 'description': 'Electrical conductivity of the saturated paste from the <2 mm fraction', 'range': 'double', 'aliases': ['ec satp'], 'mappings': []}, 'flSatx': {'slot_uri': 'neon:flSatx', 'description': 'Florine in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['fl satx'], 'mappings': []}, 'h2oSatx': {'slot_uri': 'neon:h2oSatx', 'description': 'Water content of the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['h2o satx'], 'mappings': []}, 'hco3Sx': {'slot_uri': 'neon:hco3Sx', 'description': 'Bicarbonate in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['hco3 sx'], 'mappings': []}, 'kSatx': {'slot_uri': 'neon:kSatx', 'description': 'Potassium in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['k satx'], 'mappings': []}, 'mgSatx': {'slot_uri': 'neon:mgSatx', 'description': 'Magnesium in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['mg satx'], 'mappings': []}, 'naSatx': {'slot_uri': 'neon:naSatx', 'description': 'Sodium in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['na satx'], 'mappings': []}, 'no2Satx': {'slot_uri': 'neon:no2Satx', 'description': 'Nitrite in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['no2 satx'], 'mappings': []}, 'no3Satx': {'slot_uri': 'neon:no3Satx', 'description': 'Nitrate in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['no3 satx'], 'mappings': []}, 'pSatx': {'slot_uri': 'neon:pSatx', 'description': 'Phosphate in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['p satx'], 'mappings': []}, 'phSp': {'slot_uri': 'neon:phSp', 'description': 'pH of the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['ph sp'], 'mappings': []}, 'resist': {'slot_uri': 'neon:resist', 'description': 'Resistivity of the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['resist'], 'mappings': []}, 'so4Satx': {'slot_uri': 'neon:so4Satx', 'description': 'Sulfate in the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['so4 satx'], 'mappings': []}, 'cTot': {'slot_uri': 'neon:cTot', 'description': 'Total carbon of the <2 mm fraction', 'range': 'double', 'aliases': ['c tot'], 'mappings': []}, 'nTot': {'slot_uri': 'neon:nTot', 'description': 'Total nitrogen of the <2 mm fraction', 'range': 'double', 'aliases': ['n tot'], 'mappings': []}, 'sTot': {'slot_uri': 'neon:sTot', 'description': 'Total sulfur of the <2 mm fraction', 'range': 'double', 'aliases': ['s tot'], 'mappings': []}, 'eoc': {'slot_uri': 'neon:eoc', 'description': 'Estimated organic carbon of the <2 mm fraction', 'range': 'double', 'aliases': ['eoc'], 'mappings': []}, 'sandTot': {'slot_uri': 'neon:sandTot', 'description': 'Total sand (0.047-2 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['sand tot'], 'mappings': []}, 'siltTot': {'slot_uri': 'neon:siltTot', 'description': 'Total silt (0.002-0.047 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['silt tot'], 'mappings': []}, 'clayTot': {'slot_uri': 'neon:clayTot', 'description': 'Total clay (<0.002 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['clay tot'], 'mappings': []}, 'clayFine': {'slot_uri': 'neon:clayFine', 'description': 'Fine clay (<0.0002 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['clay fine'], 'mappings': []}, 'co3Clay': {'slot_uri': 'neon:co3Clay', 'description': 'Carbonate clay (<0.002 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['co3 clay'], 'mappings': []}, 'siltFine': {'slot_uri': 'neon:siltFine', 'description': 'Fine silt (0.002-0.02 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['silt fine'], 'mappings': []}, 'siltCoarse': {'slot_uri': 'neon:siltCoarse', 'description': 'Coarse silt (0.02-0.047 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['silt coarse'], 'mappings': []}, 'sandCoarse': {'slot_uri': 'neon:sandCoarse', 'description': 'Coarse sand (0.5-1 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['sand coarse'], 'mappings': []}, 'sandFine': {'slot_uri': 'neon:sandFine', 'description': 'Fine sand (0.105-0.25 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['sand fine'], 'mappings': []}, 'sandMedium': {'slot_uri': 'neon:sandMedium', 'description': 'Medium sand (0.25-0.5 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['sand medium'], 'mappings': []}, 'sandVeryCoarse': {'slot_uri': 'neon:sandVeryCoarse', 'description': 'Very coarse sand (1-2 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['sand very coarse'], 'mappings': []}, 'sandVeryFine': {'slot_uri': 'neon:sandVeryFine', 'description': 'Very fine sand (0.047-0.105 mm) content of the <2 mm fraction', 'range': 'double', 'aliases': ['sand very fine'], 'mappings': []}, 'coarseFrag2To5': {'slot_uri': 'neon:coarseFrag2To5', 'description': 'Coarse fragment (2-5 mm) content of the <20 mm size fraction of the biogeochemistry soil sample', 'range': 'double', 'aliases': ['coarse frag2 to5'], 'mappings': []}, 'coarseFrag5To20': {'slot_uri': 'neon:coarseFrag5To20', 'description': 'Coarse fragment (5-20 mm) content of the <20 mm size fraction of the biogeochemistry soil sample', 'range': 'double', 'aliases': ['coarse frag5 to20'], 'mappings': []}, 'archiveID': {'slot_uri': 'neon:archiveID', 'description': 'Identifier for the archive sample', 'range': 'string', 'aliases': ['archive i d'], 'mappings': []}, 'archiveTopDepth': {'slot_uri': 'neon:archiveTopDepth', 'description': 'Top depth of the archive sample', 'range': 'double', 'aliases': ['archive top depth'], 'mappings': []}, 'archiveBottomDepth': {'slot_uri': 'neon:archiveBottomDepth', 'description': 'Bottom depth of the archive sample', 'range': 'double', 'aliases': ['archive bottom depth'], 'mappings': []}, 'windDirMinimum': {'slot_uri': 'neon:windDirMinimum', 'description': 'Minimum wind direction', 'range': 'double', 'aliases': ['wind dir minimum'], 'mappings': []}, 'windDirMaximum': {'slot_uri': 'neon:windDirMaximum', 'description': 'Maximum wind direction', 'range': 'double', 'aliases': ['wind dir maximum'], 'mappings': []}, 'windSpeedCalmQAQCRpt': {'slot_uri': 'neon:windSpeedCalmQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for the calm wind test, which indicates whether or not windspeed measurements are calm, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed calm q a q c rpt'], 'mappings': []}, 'windSpeedCalmFailQM': {'slot_uri': 'neon:windSpeedCalmFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the calm wind test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed calm fail q m'], 'mappings': []}, 'windSpeedCalmPassQM': {'slot_uri': 'neon:windSpeedCalmPassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the calm wind test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed calm pass q m'], 'mappings': []}, 'windSpeedCalmNAQM': {'slot_uri': 'neon:windSpeedCalmNAQM', 'description': 'Wind speed quality metric that summarizes when the calm wind test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed calm n a q m'], 'mappings': []}, 'windDirDistortedFlowQAQCRpt': {'slot_uri': 'neon:windDirDistortedFlowQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for distorted flow, which indicates whether or not a wind measurement has been influenced by obstacles upstream of the sensor, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir distorted flow q a q c rpt'], 'mappings': []}, 'windDirDistortedFlowFailQM': {'slot_uri': 'neon:windDirDistortedFlowFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the distorted flow test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir distorted flow fail q m'], 'mappings': []}, 'windDirDistortedFlowPassQM': {'slot_uri': 'neon:windDirDistortedFlowPassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the distorted flow test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir distorted flow pass q m'], 'mappings': []}, 'windDirDistortedFlowNAQM': {'slot_uri': 'neon:windDirDistortedFlowNAQM', 'description': 'Wind direction quality metric that summarizes when the distorted flow test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir distorted flow n a q m'], 'mappings': []}, 'dirRadDirectionalQAQCRpt': {'slot_uri': 'neon:dirRadDirectionalQAQCRpt', 'description': "Direct radiation quality assurance and quality control report for the directional response test, which indicates  whether the Sun's zenith angle was outside of the specified thresholds, detailed in NEON.DOC.000815 (1=fail, 0=pass, -1=NA (i.e., could not be run))", 'range': 'string', 'aliases': ['dir rad directional q a q c rpt'], 'mappings': []}, 'dirRadDirectionalFailQM': {'slot_uri': 'neon:dirRadDirectionalFailQM', 'description': 'Direct radiation quality metric that summarizes the failed outcomes of the directional response test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad directional fail q m'], 'mappings': []}, 'dirRadDirectionalPassQM': {'slot_uri': 'neon:dirRadDirectionalPassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the directional response test over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad directional pass q m'], 'mappings': []}, 'dirRadDirectionalNAQM': {'slot_uri': 'neon:dirRadDirectionalNAQM', 'description': 'Direct radiation quality metric that summarizes when the directional response test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad directional n a q m'], 'mappings': []}, 'uVectorComponent': {'slot_uri': 'neon:uVectorComponent', 'description': 'U (North-South) vector component', 'range': 'double', 'aliases': ['u vector component'], 'mappings': []}, 'vVectorComponent': {'slot_uri': 'neon:vVectorComponent', 'description': 'V (East-West) vector component', 'range': 'double', 'aliases': ['v vector component'], 'mappings': []}, 'soundSpeed': {'slot_uri': 'neon:soundSpeed', 'description': 'Speed of sound', 'range': 'double', 'aliases': ['sound speed'], 'mappings': []}, 'sensorTemp': {'slot_uri': 'neon:sensorTemp', 'description': 'Temperature of sensor', 'range': 'double', 'aliases': ['sensor temp'], 'mappings': []}, '2dWindSensorStatus': {'slot_uri': 'neon:2dWindSensorStatus', 'description': 'Health Status of 2D wind speed sensor', 'range': 'integer', 'aliases': ['2d wind sensor status'], 'mappings': []}, 'rawBarometricPressure': {'slot_uri': 'neon:rawBarometricPressure', 'description': 'Uncalibrated barometric pressure', 'range': 'double', 'aliases': ['raw barometric pressure'], 'mappings': []}, 'sensorStatus': {'slot_uri': 'neon:sensorStatus', 'description': 'Sensor status', 'range': 'integer', 'aliases': ['sensor status'], 'mappings': []}, 'infraredThermopileOutput': {'slot_uri': 'neon:infraredThermopileOutput', 'description': 'Infrared thermopile output', 'range': 'double', 'aliases': ['infrared thermopile output'], 'mappings': []}, 'sensorResistance': {'slot_uri': 'neon:sensorResistance', 'description': 'Sensor body resistance', 'range': 'double', 'aliases': ['sensor resistance'], 'mappings': []}, 'inNetRadPyranometer': {'slot_uri': 'neon:inNetRadPyranometer', 'description': 'Net radiation from upward facing pyranometer', 'range': 'double', 'aliases': ['in net rad pyranometer'], 'mappings': []}, 'outNetRadPyranometer': {'slot_uri': 'neon:outNetRadPyranometer', 'description': 'Net radiation from downward facing pyranometer', 'range': 'double', 'aliases': ['out net rad pyranometer'], 'mappings': []}, 'inNetRadPyrgeometer': {'slot_uri': 'neon:inNetRadPyrgeometer', 'description': 'Net radiation from upward facing pyrgeometer', 'range': 'double', 'aliases': ['in net rad pyrgeometer'], 'mappings': []}, 'outNetRadPyrgeometer': {'slot_uri': 'neon:outNetRadPyrgeometer', 'description': 'Net radiation from downward facing pyrgeometer', 'range': 'double', 'aliases': ['out net rad pyrgeometer'], 'mappings': []}, 'heaterFlag': {'slot_uri': 'neon:heaterFlag', 'description': 'Heater flag indicating whether the heater was operational for a measurement period, (1 = on, no value = off)', 'range': 'integer', 'aliases': ['heater flag'], 'mappings': []}, 'inPAR': {'slot_uri': 'neon:inPAR', 'description': 'Incoming photosynthetically active radiation (PAR) (irradiance 400-700 nm)', 'range': 'double', 'aliases': ['in p a r'], 'mappings': []}, 'outPAR': {'slot_uri': 'neon:outPAR', 'description': 'Outgoing photosynthetically active radiation (PAR) (radiance 400-700 nm)', 'range': 'double', 'aliases': ['out p a r'], 'mappings': []}, 'secPrecipBucketTips': {'slot_uri': 'neon:secPrecipBucketTips', 'description': 'Indicator of secondary precipitation bucket tip', 'range': 'integer', 'aliases': ['sec precip bucket tips'], 'mappings': []}, 'heaterVoltage': {'slot_uri': 'neon:heaterVoltage', 'description': 'Voltage from heater', 'range': 'double', 'aliases': ['heater voltage'], 'mappings': []}, 'pyranometerOutput': {'slot_uri': 'neon:pyranometerOutput', 'description': 'Primary Shortwave Radiation Incident Pyranometer', 'range': 'double', 'aliases': ['pyranometer output'], 'mappings': []}, 'PRTResistance': {'slot_uri': 'neon:PRTResistance', 'description': 'Resistance of Platinum Resistance Thermometer (PRT) at temperature T', 'range': 'double', 'aliases': ['p r t resistance'], 'mappings': []}, 'fanSpeed': {'slot_uri': 'neon:fanSpeed', 'description': 'Fan speed', 'range': 'double', 'aliases': ['fan speed'], 'mappings': []}, 'heater1Flag': {'slot_uri': 'neon:heater1Flag', 'description': 'Heater flag indicating whether Heater 1 was operational for a measurement period, (1 = on, no value = off)', 'range': 'integer', 'aliases': ['heater1 flag'], 'mappings': []}, 'heater2Flag': {'slot_uri': 'neon:heater2Flag', 'description': 'Heater flag indicating whether Heater 2 was operational for a measurement period, (1 = on, no value = off)', 'range': 'integer', 'aliases': ['heater2 flag'], 'mappings': []}, 'linePAR': {'slot_uri': 'neon:linePAR', 'description': 'Incident photosynthetically active radiation along the length of the quantum line sensor', 'range': 'double', 'aliases': ['line p a r'], 'mappings': []}, 'turbineSpeed': {'slot_uri': 'neon:turbineSpeed', 'description': 'Turbine speed', 'range': 'double', 'aliases': ['turbine speed'], 'mappings': []}, 'spectralPhotometerK7': {'slot_uri': 'neon:spectralPhotometerK7', 'description': 'Spectral photometer output', 'range': 'string', 'aliases': ['spectral photometer k7'], 'mappings': []}, 'rawShortwaveRadiationGlobal': {'slot_uri': 'neon:rawShortwaveRadiationGlobal', 'description': 'Uncalibrated global shortwave radiation', 'range': 'double', 'aliases': ['raw shortwave radiation global'], 'mappings': []}, 'rawShortwaveRadiationDiffuse': {'slot_uri': 'neon:rawShortwaveRadiationDiffuse', 'description': 'Uncalibrated diffuse shortwave radiation', 'range': 'double', 'aliases': ['raw shortwave radiation diffuse'], 'mappings': []}, 'sunPresence': {'slot_uri': 'neon:sunPresence', 'description': 'Sun presence flag', 'range': 'integer', 'aliases': ['sun presence'], 'mappings': []}, 'pitNamedLocation': {'slot_uri': 'neon:pitNamedLocation', 'description': 'Named location identifier for the soil pit', 'range': 'string', 'aliases': ['pit named location'], 'mappings': []}, 'bulkDensLT2mm': {'slot_uri': 'neon:bulkDensLT2mm', 'description': 'Bulk density of the <2 mm size fraction', 'range': 'double', 'aliases': ['bulk dens l t2mm'], 'mappings': []}, 'porosity': {'slot_uri': 'neon:porosity', 'description': 'Fraction of soil volume comprised of voids', 'range': 'double', 'aliases': ['porosity'], 'mappings': []}, 'bulkDensLT2mmQF': {'slot_uri': 'neon:bulkDensLT2mmQF', 'description': 'Quality flag for bulk density of <2 mm size fraction', 'range': 'string', 'aliases': ['bulk dens l t2mm q f'], 'mappings': []}, 'porosityQF': {'slot_uri': 'neon:porosityQF', 'description': 'Quality flag for porosity of <2 mm size fraction', 'range': 'string', 'aliases': ['porosity q f'], 'mappings': []}, 'textureQF': {'slot_uri': 'neon:textureQF', 'description': 'Quality flag for sandTot, siltTot, and clayTot', 'range': 'string', 'aliases': ['texture q f'], 'mappings': []}, 'sandQF': {'slot_uri': 'neon:sandQF', 'description': 'Quality flag for sandVeryCoarse, sandCoarse, sandMedium, sandFine, and sandVeryFine', 'range': 'string', 'aliases': ['sand q f'], 'mappings': []}, 'siltQF': {'slot_uri': 'neon:siltQF', 'description': 'Quality flag for siltCoarse and siltFine', 'range': 'string', 'aliases': ['silt q f'], 'mappings': []}, 'archiveLaboratoryName': {'slot_uri': 'neon:archiveLaboratoryName', 'description': 'Name of the laboratory or facility that is processing the archive sample', 'range': 'string', 'aliases': ['archive laboratory name'], 'mappings': []}, 'windSpeedSensorErrorQAQCRpt': {'slot_uri': 'neon:windSpeedSensorErrorQAQCRpt', 'description': 'Wind speed quality assurance and quality control report for sensor errors, which indicates whether or not the sensor was reporting an error, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed sensor error q a q c rpt'], 'mappings': []}, 'windSpeedSensorErrorFailQM': {'slot_uri': 'neon:windSpeedSensorErrorFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the sensor error test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed sensor error fail q m'], 'mappings': []}, 'windSpeedSensorErrorPassQM': {'slot_uri': 'neon:windSpeedSensorErrorPassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the sensor error test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed sensor error pass q m'], 'mappings': []}, 'windSpeedSensorErrorNAQM': {'slot_uri': 'neon:windSpeedSensorErrorNAQM', 'description': 'Wind speed quality metric that summarizes when the sensor error test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed sensor error n a q m'], 'mappings': []}, 'windSpeedCalmWindQF': {'slot_uri': 'neon:windSpeedCalmWindQF', 'description': 'Wind speed quality flag for the calm wind test, as detailed in NEON.DOC.000780 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['wind speed calm wind q f'], 'mappings': []}, 'windDirSensorErrorQAQCRpt': {'slot_uri': 'neon:windDirSensorErrorQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for sensor errors, which indicates whether or not the sensor was reporting an error, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir sensor error q a q c rpt'], 'mappings': []}, 'windDirSensorErrorFailQM': {'slot_uri': 'neon:windDirSensorErrorFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the sensor error test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir sensor error fail q m'], 'mappings': []}, 'windDirSensorErrorPassQM': {'slot_uri': 'neon:windDirSensorErrorPassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the sensor error test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir sensor error pass q m'], 'mappings': []}, 'windDirSensorErrorNAQM': {'slot_uri': 'neon:windDirSensorErrorNAQM', 'description': 'Wind direction quality metric that summarizes when the sensor error test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir sensor error n a q m'], 'mappings': []}, 'windDirCalmWindQF': {'slot_uri': 'neon:windDirCalmWindQF', 'description': 'Wind direction quality flag for the calm wind test, as detailed in NEON.DOC.000780 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['wind dir calm wind q f'], 'mappings': []}, 'domainSampleID': {'slot_uri': 'neon:domainSampleID', 'description': 'Identifier for sample from domain lab', 'range': 'string', 'aliases': ['domain sample i d'], 'mappings': []}, 'RH': {'slot_uri': 'neon:RH', 'description': 'Relative humidity', 'range': 'double', 'aliases': ['r h'], 'mappings': []}, 'dewPoint': {'slot_uri': 'neon:dewPoint', 'description': 'Dew point temperature', 'range': 'double', 'aliases': ['dew point'], 'mappings': []}, 'RHStatus': {'slot_uri': 'neon:RHStatus', 'description': 'Status of the relative humidity sensor', 'range': 'double', 'aliases': ['r h status'], 'mappings': []}, 'dissolvedOxygenSaturation': {'slot_uri': 'neon:dissolvedOxygenSaturation', 'description': 'Dissolved Oxygen Percent Saturation', 'range': 'double', 'aliases': ['dissolved oxygen saturation'], 'mappings': []}, 'collectedBy': {'slot_uri': 'neon:collectedBy', 'description': 'An identifier for the technician who collected the sample or specimen', 'range': 'string', 'aliases': ['collected by'], 'mappings': ['dwc:recordedBy']}, 'streamStage': {'slot_uri': 'neon:streamStage', 'description': 'Reading of water height on staff gauge', 'range': 'double', 'aliases': ['stream stage'], 'mappings': []}, 'handheldDeviceID': {'slot_uri': 'neon:handheldDeviceID', 'description': 'Serial number of the handheld stream velocity device', 'range': 'string', 'aliases': ['handheld device i d'], 'mappings': []}, 'velocitySensorID': {'slot_uri': 'neon:velocitySensorID', 'description': 'Serial number of the velocity sensor for the handheld stream velocity device', 'range': 'string', 'aliases': ['velocity sensor i d'], 'mappings': []}, 'filterParamTime': {'slot_uri': 'neon:filterParamTime', 'description': 'Length of time over which each velocity measurement was collected; this is for fixed point averaging', 'range': 'double', 'aliases': ['filter param time'], 'mappings': []}, 'stationEntryTest': {'slot_uri': 'neon:stationEntryTest', 'description': 'Fixed or non-fixed sample station widths; should be non-fixed', 'range': 'string', 'aliases': ['station entry test'], 'mappings': []}, 'waterEdge': {'slot_uri': 'neon:waterEdge', 'description': 'Defines which edge of the stream where transect starts; follows standard right - left convention for streams', 'range': 'string', 'aliases': ['water edge'], 'mappings': []}, 'totalDischarge': {'slot_uri': 'neon:totalDischarge', 'description': 'Calculated discharge from the velocity meter device', 'range': 'double', 'aliases': ['total discharge'], 'mappings': []}, 'totalDischargeUnits': {'slot_uri': 'neon:totalDischargeUnits', 'description': 'Discharge measurement units; should be in lps - liters per second or m^3/s - cubic meters per second', 'range': 'string', 'aliases': ['total discharge units'], 'mappings': []}, 'rawDischargeFile': {'slot_uri': 'neon:rawDischargeFile', 'description': 'Raw data file from the handheld device; provided to users as metadata', 'range': 'string', 'aliases': ['raw discharge file'], 'mappings': []}, 'conductance': {'slot_uri': 'neon:conductance', 'description': 'Conductivity at ambient temperture', 'range': 'double', 'aliases': ['conductance'], 'mappings': []}, 'batteryVoltage': {'slot_uri': 'neon:batteryVoltage', 'description': 'Battery voltage', 'range': 'double', 'aliases': ['battery voltage'], 'mappings': []}, 'conductanceDataQualityID': {'slot_uri': 'neon:conductanceDataQualityID', 'description': 'Data quality code from sensor for conductance', 'range': 'double', 'aliases': ['conductance data quality i d'], 'mappings': []}, 'groundwaterTemp': {'slot_uri': 'neon:groundwaterTemp', 'description': 'Temperature in groundwater', 'range': 'double', 'aliases': ['groundwater temp'], 'mappings': []}, 'tempDataQualityID': {'slot_uri': 'neon:tempDataQualityID', 'description': 'Data quality code from sensor for temperature', 'range': 'double', 'aliases': ['temp data quality i d'], 'mappings': []}, 'groundwaterPressure': {'slot_uri': 'neon:groundwaterPressure', 'description': 'Pressure of groundwater', 'range': 'double', 'aliases': ['groundwater pressure'], 'mappings': []}, 'pressureDataQualityID': {'slot_uri': 'neon:pressureDataQualityID', 'description': 'Data quality code from sensor for pressure', 'range': 'double', 'aliases': ['pressure data quality i d'], 'mappings': []}, 'surfaceWaterTemperature': {'slot_uri': 'neon:surfaceWaterTemperature', 'description': 'Temperature in surface water', 'range': 'double', 'aliases': ['surface water temperature'], 'mappings': []}, 'surfaceWaterPressure': {'slot_uri': 'neon:surfaceWaterPressure', 'description': 'Pressure of surface water', 'range': 'double', 'aliases': ['surface water pressure'], 'mappings': []}, 'nitrate': {'slot_uri': 'neon:nitrate', 'description': 'Nitrate concentration as micromoler', 'range': 'double', 'aliases': ['nitrate'], 'mappings': []}, 'nitrogenInNitrate': {'slot_uri': 'neon:nitrogenInNitrate', 'description': 'Nitrogen in nitrate as mg/L', 'range': 'double', 'aliases': ['nitrogen in nitrate'], 'mappings': []}, 'abs254nm': {'slot_uri': 'neon:abs254nm', 'description': 'Absorbance at 254 nm', 'range': 'double', 'aliases': ['abs254nm'], 'mappings': []}, 'abs350nm': {'slot_uri': 'neon:abs350nm', 'description': 'Absorbance at 350 nm', 'range': 'double', 'aliases': ['abs350nm'], 'mappings': []}, 'bromideTrace': {'slot_uri': 'neon:bromideTrace', 'description': 'Bromide trace', 'range': 'string', 'aliases': ['bromide trace'], 'mappings': []}, 'correctionMethod': {'slot_uri': 'neon:correctionMethod', 'description': 'Spec Average or SW Average(Dark Correction Method)', 'range': 'double', 'aliases': ['correction method'], 'mappings': []}, 'spectrometerBackgroundSignal': {'slot_uri': 'neon:spectrometerBackgroundSignal', 'description': 'Dark Signal Average (average dark intensity)', 'range': 'double', 'aliases': ['spectrometer background signal'], 'mappings': []}, 'integrationTimeFactor': {'slot_uri': 'neon:integrationTimeFactor', 'description': 'Integration Time Factor', 'range': 'double', 'aliases': ['integration time factor'], 'mappings': []}, 'spectrometerSignalAt189.29nm': {'slot_uri': 'neon:spectrometerSignalAt189.29nm', 'description': 'spectrometer intensity at wavelength 189.29 nm', 'range': 'double', 'aliases': ['spectrometer signal at189.29nm'], 'mappings': []}, 'spectrometerSignalAt190.08nm': {'slot_uri': 'neon:spectrometerSignalAt190.08nm', 'description': 'spectrometer intensity at wavelength 190.08 nm', 'range': 'double', 'aliases': ['spectrometer signal at190.08nm'], 'mappings': []}, 'spectrometerSignalAt190.87nm': {'slot_uri': 'neon:spectrometerSignalAt190.87nm', 'description': 'spectrometer intensity at wavelength 190.87 nm', 'range': 'double', 'aliases': ['spectrometer signal at190.87nm'], 'mappings': []}, 'spectrometerSignalAt191.67nm': {'slot_uri': 'neon:spectrometerSignalAt191.67nm', 'description': 'spectrometer intensity at wavelength 191.67 nm', 'range': 'double', 'aliases': ['spectrometer signal at191.67nm'], 'mappings': []}, 'spectrometerSignalAt192.46nm': {'slot_uri': 'neon:spectrometerSignalAt192.46nm', 'description': 'spectrometer intensity at wavelength 192.46 nm', 'range': 'double', 'aliases': ['spectrometer signal at192.46nm'], 'mappings': []}, 'spectrometerSignalAt193.26nm': {'slot_uri': 'neon:spectrometerSignalAt193.26nm', 'description': 'spectrometer intensity at wavelength 193.26 nm', 'range': 'double', 'aliases': ['spectrometer signal at193.26nm'], 'mappings': []}, 'spectrometerSignalAt194.05nm': {'slot_uri': 'neon:spectrometerSignalAt194.05nm', 'description': 'spectrometer intensity at wavelength 194.05 nm', 'range': 'double', 'aliases': ['spectrometer signal at194.05nm'], 'mappings': []}, 'spectrometerSignalAt194.85nm': {'slot_uri': 'neon:spectrometerSignalAt194.85nm', 'description': 'spectrometer intensity at wavelength 194.85 nm', 'range': 'double', 'aliases': ['spectrometer signal at194.85nm'], 'mappings': []}, 'spectrometerSignalAt195.64nm': {'slot_uri': 'neon:spectrometerSignalAt195.64nm', 'description': 'spectrometer intensity at wavelength 195.64 nm', 'range': 'double', 'aliases': ['spectrometer signal at195.64nm'], 'mappings': []}, 'spectrometerSignalAt196.44nm': {'slot_uri': 'neon:spectrometerSignalAt196.44nm', 'description': 'spectrometer intensity at wavelength 196.44 nm', 'range': 'double', 'aliases': ['spectrometer signal at196.44nm'], 'mappings': []}, 'spectrometerSignalAt197.23nm': {'slot_uri': 'neon:spectrometerSignalAt197.23nm', 'description': 'spectrometer intensity at wavelength 197.23 nm', 'range': 'double', 'aliases': ['spectrometer signal at197.23nm'], 'mappings': []}, 'spectrometerSignalAt198.03nm': {'slot_uri': 'neon:spectrometerSignalAt198.03nm', 'description': 'spectrometer intensity at wavelength 198.03 nm', 'range': 'double', 'aliases': ['spectrometer signal at198.03nm'], 'mappings': []}, 'spectrometerSignalAt198.83nm': {'slot_uri': 'neon:spectrometerSignalAt198.83nm', 'description': 'spectrometer intensity at wavelength 198.83 nm', 'range': 'double', 'aliases': ['spectrometer signal at198.83nm'], 'mappings': []}, 'spectrometerSignalAt199.62nm': {'slot_uri': 'neon:spectrometerSignalAt199.62nm', 'description': 'spectrometer intensity at wavelength 199.62 nm', 'range': 'double', 'aliases': ['spectrometer signal at199.62nm'], 'mappings': []}, 'spectrometerSignalAt200.42nm': {'slot_uri': 'neon:spectrometerSignalAt200.42nm', 'description': 'spectrometer intensity at wavelength 200.42 nm', 'range': 'double', 'aliases': ['spectrometer signal at200.42nm'], 'mappings': []}, 'spectrometerSignalAt201.22nm': {'slot_uri': 'neon:spectrometerSignalAt201.22nm', 'description': 'spectrometer intensity at wavelength 201.22 nm', 'range': 'double', 'aliases': ['spectrometer signal at201.22nm'], 'mappings': []}, 'spectrometerSignalAt202.02nm': {'slot_uri': 'neon:spectrometerSignalAt202.02nm', 'description': 'spectrometer intensity at wavelength 202.02 nm', 'range': 'double', 'aliases': ['spectrometer signal at202.02nm'], 'mappings': []}, 'spectrometerSignalAt202.81nm': {'slot_uri': 'neon:spectrometerSignalAt202.81nm', 'description': 'spectrometer intensity at wavelength 202.81 nm', 'range': 'double', 'aliases': ['spectrometer signal at202.81nm'], 'mappings': []}, 'spectrometerSignalAt203.61nm': {'slot_uri': 'neon:spectrometerSignalAt203.61nm', 'description': 'spectrometer intensity at wavelength 203.61 nm', 'range': 'double', 'aliases': ['spectrometer signal at203.61nm'], 'mappings': []}, 'spectrometerSignalAt204.41nm': {'slot_uri': 'neon:spectrometerSignalAt204.41nm', 'description': 'spectrometer intensity at wavelength 204.41 nm', 'range': 'double', 'aliases': ['spectrometer signal at204.41nm'], 'mappings': []}, 'spectrometerSignalAt205.21nm': {'slot_uri': 'neon:spectrometerSignalAt205.21nm', 'description': 'spectrometer intensity at wavelength 205.21 nm', 'range': 'double', 'aliases': ['spectrometer signal at205.21nm'], 'mappings': []}, 'spectrometerSignalAt206.01nm': {'slot_uri': 'neon:spectrometerSignalAt206.01nm', 'description': 'spectrometer intensity at wavelength 206.01 nm', 'range': 'double', 'aliases': ['spectrometer signal at206.01nm'], 'mappings': []}, 'spectrometerSignalAt206.81nm': {'slot_uri': 'neon:spectrometerSignalAt206.81nm', 'description': 'spectrometer intensity at wavelength 206.81 nm', 'range': 'double', 'aliases': ['spectrometer signal at206.81nm'], 'mappings': []}, 'spectrometerSignalAt207.61nm': {'slot_uri': 'neon:spectrometerSignalAt207.61nm', 'description': 'spectrometer intensity at wavelength 207.61 nm', 'range': 'double', 'aliases': ['spectrometer signal at207.61nm'], 'mappings': []}, 'spectrometerSignalAt208.41nm': {'slot_uri': 'neon:spectrometerSignalAt208.41nm', 'description': 'spectrometer intensity at wavelength 208.41 nm', 'range': 'double', 'aliases': ['spectrometer signal at208.41nm'], 'mappings': []}, 'spectrometerSignalAt209.21nm': {'slot_uri': 'neon:spectrometerSignalAt209.21nm', 'description': 'spectrometer intensity at wavelength 209.21 nm', 'range': 'double', 'aliases': ['spectrometer signal at209.21nm'], 'mappings': []}, 'spectrometerSignalAt210.01nm': {'slot_uri': 'neon:spectrometerSignalAt210.01nm', 'description': 'spectrometer intensity at wavelength 210.01 nm', 'range': 'double', 'aliases': ['spectrometer signal at210.01nm'], 'mappings': []}, 'spectrometerSignalAt210.81nm': {'slot_uri': 'neon:spectrometerSignalAt210.81nm', 'description': 'spectrometer intensity at wavelength 210.81 nm', 'range': 'double', 'aliases': ['spectrometer signal at210.81nm'], 'mappings': []}, 'spectrometerSignalAt211.61nm': {'slot_uri': 'neon:spectrometerSignalAt211.61nm', 'description': 'spectrometer intensity at wavelength 211.61 nm', 'range': 'double', 'aliases': ['spectrometer signal at211.61nm'], 'mappings': []}, 'spectrometerSignalAt212.41nm': {'slot_uri': 'neon:spectrometerSignalAt212.41nm', 'description': 'spectrometer intensity at wavelength 212.41 nm', 'range': 'double', 'aliases': ['spectrometer signal at212.41nm'], 'mappings': []}, 'spectrometerSignalAt213.21nm': {'slot_uri': 'neon:spectrometerSignalAt213.21nm', 'description': 'spectrometer intensity at wavelength 213.21 nm', 'range': 'double', 'aliases': ['spectrometer signal at213.21nm'], 'mappings': []}, 'spectrometerSignalAt214.01nm': {'slot_uri': 'neon:spectrometerSignalAt214.01nm', 'description': 'spectrometer intensity at wavelength 214.01 nm', 'range': 'double', 'aliases': ['spectrometer signal at214.01nm'], 'mappings': []}, 'spectrometerSignalAt214.82nm': {'slot_uri': 'neon:spectrometerSignalAt214.82nm', 'description': 'spectrometer intensity at wavelength 214.82 nm', 'range': 'double', 'aliases': ['spectrometer signal at214.82nm'], 'mappings': []}, 'spectrometerSignalAt215.62nm': {'slot_uri': 'neon:spectrometerSignalAt215.62nm', 'description': 'spectrometer intensity at wavelength 215.62 nm', 'range': 'double', 'aliases': ['spectrometer signal at215.62nm'], 'mappings': []}, 'spectrometerSignalAt216.42nm': {'slot_uri': 'neon:spectrometerSignalAt216.42nm', 'description': 'spectrometer intensity at wavelength 216.42 nm', 'range': 'double', 'aliases': ['spectrometer signal at216.42nm'], 'mappings': []}, 'spectrometerSignalAt217.22nm': {'slot_uri': 'neon:spectrometerSignalAt217.22nm', 'description': 'spectrometer intensity at wavelength 217.22 nm', 'range': 'double', 'aliases': ['spectrometer signal at217.22nm'], 'mappings': []}, 'spectrometerSignalAt218.03nm': {'slot_uri': 'neon:spectrometerSignalAt218.03nm', 'description': 'spectrometer intensity at wavelength 218.03 nm', 'range': 'double', 'aliases': ['spectrometer signal at218.03nm'], 'mappings': []}, 'spectrometerSignalAt218.83nm': {'slot_uri': 'neon:spectrometerSignalAt218.83nm', 'description': 'spectrometer intensity at wavelength 218.83 nm', 'range': 'double', 'aliases': ['spectrometer signal at218.83nm'], 'mappings': []}, 'spectrometerSignalAt219.63nm': {'slot_uri': 'neon:spectrometerSignalAt219.63nm', 'description': 'spectrometer intensity at wavelength 219.63 nm', 'range': 'double', 'aliases': ['spectrometer signal at219.63nm'], 'mappings': []}, 'spectrometerSignalAt220.43nm': {'slot_uri': 'neon:spectrometerSignalAt220.43nm', 'description': 'spectrometer intensity at wavelength 220.43 nm', 'range': 'double', 'aliases': ['spectrometer signal at220.43nm'], 'mappings': []}, 'spectrometerSignalAt221.24nm': {'slot_uri': 'neon:spectrometerSignalAt221.24nm', 'description': 'spectrometer intensity at wavelength 221.24 nm', 'range': 'double', 'aliases': ['spectrometer signal at221.24nm'], 'mappings': []}, 'spectrometerSignalAt222.04nm': {'slot_uri': 'neon:spectrometerSignalAt222.04nm', 'description': 'spectrometer intensity at wavelength 222.04 nm', 'range': 'double', 'aliases': ['spectrometer signal at222.04nm'], 'mappings': []}, 'spectrometerSignalAt222.85nm': {'slot_uri': 'neon:spectrometerSignalAt222.85nm', 'description': 'spectrometer intensity at wavelength 222.85 nm', 'range': 'double', 'aliases': ['spectrometer signal at222.85nm'], 'mappings': []}, 'spectrometerSignalAt223.65nm': {'slot_uri': 'neon:spectrometerSignalAt223.65nm', 'description': 'spectrometer intensity at wavelength 223.65 nm', 'range': 'double', 'aliases': ['spectrometer signal at223.65nm'], 'mappings': []}, 'spectrometerSignalAt224.46nm': {'slot_uri': 'neon:spectrometerSignalAt224.46nm', 'description': 'spectrometer intensity at wavelength 224.46 nm', 'range': 'double', 'aliases': ['spectrometer signal at224.46nm'], 'mappings': []}, 'spectrometerSignalAt225.26nm': {'slot_uri': 'neon:spectrometerSignalAt225.26nm', 'description': 'spectrometer intensity at wavelength 225.26 nm', 'range': 'double', 'aliases': ['spectrometer signal at225.26nm'], 'mappings': []}, 'spectrometerSignalAt226.06nm': {'slot_uri': 'neon:spectrometerSignalAt226.06nm', 'description': 'spectrometer intensity at wavelength 226.06 nm', 'range': 'double', 'aliases': ['spectrometer signal at226.06nm'], 'mappings': []}, 'spectrometerSignalAt226.87nm': {'slot_uri': 'neon:spectrometerSignalAt226.87nm', 'description': 'spectrometer intensity at wavelength 226.87 nm', 'range': 'double', 'aliases': ['spectrometer signal at226.87nm'], 'mappings': []}, 'spectrometerSignalAt227.68nm': {'slot_uri': 'neon:spectrometerSignalAt227.68nm', 'description': 'spectrometer intensity at wavelength 227.68 nm', 'range': 'double', 'aliases': ['spectrometer signal at227.68nm'], 'mappings': []}, 'spectrometerSignalAt228.48nm': {'slot_uri': 'neon:spectrometerSignalAt228.48nm', 'description': 'spectrometer intensity at wavelength 228.48 nm', 'range': 'double', 'aliases': ['spectrometer signal at228.48nm'], 'mappings': []}, 'spectrometerSignalAt229.29nm': {'slot_uri': 'neon:spectrometerSignalAt229.29nm', 'description': 'spectrometer intensity at wavelength 229.29 nm', 'range': 'double', 'aliases': ['spectrometer signal at229.29nm'], 'mappings': []}, 'spectrometerSignalAt230.09nm': {'slot_uri': 'neon:spectrometerSignalAt230.09nm', 'description': 'spectrometer intensity at wavelength 230.09 nm', 'range': 'double', 'aliases': ['spectrometer signal at230.09nm'], 'mappings': []}, 'spectrometerSignalAt230.9nm': {'slot_uri': 'neon:spectrometerSignalAt230.9nm', 'description': 'spectrometer intensity at wavelength 230.9 nm', 'range': 'double', 'aliases': ['spectrometer signal at230.9nm'], 'mappings': []}, 'spectrometerSignalAt231.71nm': {'slot_uri': 'neon:spectrometerSignalAt231.71nm', 'description': 'spectrometer intensity at wavelength 231.71 nm', 'range': 'double', 'aliases': ['spectrometer signal at231.71nm'], 'mappings': []}, 'spectrometerSignalAt232.51nm': {'slot_uri': 'neon:spectrometerSignalAt232.51nm', 'description': 'spectrometer intensity at wavelength 232.51 nm', 'range': 'double', 'aliases': ['spectrometer signal at232.51nm'], 'mappings': []}, 'spectrometerSignalAt233.32nm': {'slot_uri': 'neon:spectrometerSignalAt233.32nm', 'description': 'spectrometer intensity at wavelength 233.32 nm', 'range': 'double', 'aliases': ['spectrometer signal at233.32nm'], 'mappings': []}, 'spectrometerSignalAt234.13nm': {'slot_uri': 'neon:spectrometerSignalAt234.13nm', 'description': 'spectrometer intensity at wavelength 234.13 nm', 'range': 'double', 'aliases': ['spectrometer signal at234.13nm'], 'mappings': []}, 'spectrometerSignalAt234.93nm': {'slot_uri': 'neon:spectrometerSignalAt234.93nm', 'description': 'spectrometer intensity at wavelength 234.93 nm', 'range': 'double', 'aliases': ['spectrometer signal at234.93nm'], 'mappings': []}, 'spectrometerSignalAt235.74nm': {'slot_uri': 'neon:spectrometerSignalAt235.74nm', 'description': 'spectrometer intensity at wavelength 235.74 nm', 'range': 'double', 'aliases': ['spectrometer signal at235.74nm'], 'mappings': []}, 'spectrometerSignalAt236.55nm': {'slot_uri': 'neon:spectrometerSignalAt236.55nm', 'description': 'spectrometer intensity at wavelength 236.55 nm', 'range': 'double', 'aliases': ['spectrometer signal at236.55nm'], 'mappings': []}, 'spectrometerSignalAt237.36nm': {'slot_uri': 'neon:spectrometerSignalAt237.36nm', 'description': 'spectrometer intensity at wavelength 237.36 nm', 'range': 'double', 'aliases': ['spectrometer signal at237.36nm'], 'mappings': []}, 'spectrometerSignalAt238.16nm': {'slot_uri': 'neon:spectrometerSignalAt238.16nm', 'description': 'spectrometer intensity at wavelength 238.16 nm', 'range': 'double', 'aliases': ['spectrometer signal at238.16nm'], 'mappings': []}, 'spectrometerSignalAt238.97nm': {'slot_uri': 'neon:spectrometerSignalAt238.97nm', 'description': 'spectrometer intensity at wavelength 238.97 nm', 'range': 'double', 'aliases': ['spectrometer signal at238.97nm'], 'mappings': []}, 'spectrometerSignalAt239.78nm': {'slot_uri': 'neon:spectrometerSignalAt239.78nm', 'description': 'spectrometer intensity at wavelength 239.78 nm', 'range': 'double', 'aliases': ['spectrometer signal at239.78nm'], 'mappings': []}, 'spectrometerSignalAt240.59nm': {'slot_uri': 'neon:spectrometerSignalAt240.59nm', 'description': 'spectrometer intensity at wavelength 240.59 nm', 'range': 'double', 'aliases': ['spectrometer signal at240.59nm'], 'mappings': []}, 'spectrometerSignalAt241.4nm': {'slot_uri': 'neon:spectrometerSignalAt241.4nm', 'description': 'spectrometer intensity at wavelength 241.4 nm', 'range': 'double', 'aliases': ['spectrometer signal at241.4nm'], 'mappings': []}, 'spectrometerSignalAt242.21nm': {'slot_uri': 'neon:spectrometerSignalAt242.21nm', 'description': 'spectrometer intensity at wavelength 242.21 nm', 'range': 'double', 'aliases': ['spectrometer signal at242.21nm'], 'mappings': []}, 'spectrometerSignalAt243.01nm': {'slot_uri': 'neon:spectrometerSignalAt243.01nm', 'description': 'spectrometer intensity at wavelength 243.01 nm', 'range': 'double', 'aliases': ['spectrometer signal at243.01nm'], 'mappings': []}, 'spectrometerSignalAt243.82nm': {'slot_uri': 'neon:spectrometerSignalAt243.82nm', 'description': 'spectrometer intensity at wavelength 243.82 nm', 'range': 'double', 'aliases': ['spectrometer signal at243.82nm'], 'mappings': []}, 'spectrometerSignalAt244.63nm': {'slot_uri': 'neon:spectrometerSignalAt244.63nm', 'description': 'spectrometer intensity at wavelength 244.63 nm', 'range': 'double', 'aliases': ['spectrometer signal at244.63nm'], 'mappings': []}, 'spectrometerSignalAt245.44nm': {'slot_uri': 'neon:spectrometerSignalAt245.44nm', 'description': 'spectrometer intensity at wavelength 245.44 nm', 'range': 'double', 'aliases': ['spectrometer signal at245.44nm'], 'mappings': []}, 'spectrometerSignalAt246.25nm': {'slot_uri': 'neon:spectrometerSignalAt246.25nm', 'description': 'spectrometer intensity at wavelength 246.25 nm', 'range': 'double', 'aliases': ['spectrometer signal at246.25nm'], 'mappings': []}, 'spectrometerSignalAt247.06nm': {'slot_uri': 'neon:spectrometerSignalAt247.06nm', 'description': 'spectrometer intensity at wavelength 247.06 nm', 'range': 'double', 'aliases': ['spectrometer signal at247.06nm'], 'mappings': []}, 'spectrometerSignalAt247.87nm': {'slot_uri': 'neon:spectrometerSignalAt247.87nm', 'description': 'spectrometer intensity at wavelength 247.87 nm', 'range': 'double', 'aliases': ['spectrometer signal at247.87nm'], 'mappings': []}, 'spectrometerSignalAt248.68nm': {'slot_uri': 'neon:spectrometerSignalAt248.68nm', 'description': 'spectrometer intensity at wavelength 248.68 nm', 'range': 'double', 'aliases': ['spectrometer signal at248.68nm'], 'mappings': []}, 'spectrometerSignalAt249.49nm': {'slot_uri': 'neon:spectrometerSignalAt249.49nm', 'description': 'spectrometer intensity at wavelength 249.49 nm', 'range': 'double', 'aliases': ['spectrometer signal at249.49nm'], 'mappings': []}, 'spectrometerSignalAt250.3nm': {'slot_uri': 'neon:spectrometerSignalAt250.3nm', 'description': 'spectrometer intensity at wavelength 250.3 nm', 'range': 'double', 'aliases': ['spectrometer signal at250.3nm'], 'mappings': []}, 'spectrometerSignalAt251.11nm': {'slot_uri': 'neon:spectrometerSignalAt251.11nm', 'description': 'spectrometer intensity at wavelength 251.11 nm', 'range': 'double', 'aliases': ['spectrometer signal at251.11nm'], 'mappings': []}, 'spectrometerSignalAt251.92nm': {'slot_uri': 'neon:spectrometerSignalAt251.92nm', 'description': 'spectrometer intensity at wavelength 251.92 nm', 'range': 'double', 'aliases': ['spectrometer signal at251.92nm'], 'mappings': []}, 'spectrometerSignalAt252.73nm': {'slot_uri': 'neon:spectrometerSignalAt252.73nm', 'description': 'spectrometer intensity at wavelength 252.73 nm', 'range': 'double', 'aliases': ['spectrometer signal at252.73nm'], 'mappings': []}, 'spectrometerSignalAt253.55nm': {'slot_uri': 'neon:spectrometerSignalAt253.55nm', 'description': 'spectrometer intensity at wavelength 253.55 nm', 'range': 'double', 'aliases': ['spectrometer signal at253.55nm'], 'mappings': []}, 'spectrometerSignalAt254.36nm': {'slot_uri': 'neon:spectrometerSignalAt254.36nm', 'description': 'spectrometer intensity at wavelength 254.36 nm', 'range': 'double', 'aliases': ['spectrometer signal at254.36nm'], 'mappings': []}, 'spectrometerSignalAt255.17nm': {'slot_uri': 'neon:spectrometerSignalAt255.17nm', 'description': 'spectrometer intensity at wavelength 255.17 nm', 'range': 'double', 'aliases': ['spectrometer signal at255.17nm'], 'mappings': []}, 'spectrometerSignalAt255.98nm': {'slot_uri': 'neon:spectrometerSignalAt255.98nm', 'description': 'spectrometer intensity at wavelength 255.98 nm', 'range': 'double', 'aliases': ['spectrometer signal at255.98nm'], 'mappings': []}, 'spectrometerSignalAt256.79nm': {'slot_uri': 'neon:spectrometerSignalAt256.79nm', 'description': 'spectrometer intensity at wavelength 256.79 nm', 'range': 'double', 'aliases': ['spectrometer signal at256.79nm'], 'mappings': []}, 'spectrometerSignalAt257.6nm': {'slot_uri': 'neon:spectrometerSignalAt257.6nm', 'description': 'spectrometer intensity at wavelength 257.6 nm', 'range': 'double', 'aliases': ['spectrometer signal at257.6nm'], 'mappings': []}, 'spectrometerSignalAt258.41nm': {'slot_uri': 'neon:spectrometerSignalAt258.41nm', 'description': 'spectrometer intensity at wavelength 258.41 nm', 'range': 'double', 'aliases': ['spectrometer signal at258.41nm'], 'mappings': []}, 'spectrometerSignalAt259.23nm': {'slot_uri': 'neon:spectrometerSignalAt259.23nm', 'description': 'spectrometer intensity at wavelength 259.23 nm', 'range': 'double', 'aliases': ['spectrometer signal at259.23nm'], 'mappings': []}, 'spectrometerSignalAt260.04nm': {'slot_uri': 'neon:spectrometerSignalAt260.04nm', 'description': 'spectrometer intensity at wavelength 260.04 nm', 'range': 'double', 'aliases': ['spectrometer signal at260.04nm'], 'mappings': []}, 'spectrometerSignalAt260.85nm': {'slot_uri': 'neon:spectrometerSignalAt260.85nm', 'description': 'spectrometer intensity at wavelength 260.85 nm', 'range': 'double', 'aliases': ['spectrometer signal at260.85nm'], 'mappings': []}, 'spectrometerSignalAt261.66nm': {'slot_uri': 'neon:spectrometerSignalAt261.66nm', 'description': 'spectrometer intensity at wavelength 261.66 nm', 'range': 'double', 'aliases': ['spectrometer signal at261.66nm'], 'mappings': []}, 'spectrometerSignalAt262.48nm': {'slot_uri': 'neon:spectrometerSignalAt262.48nm', 'description': 'spectrometer intensity at wavelength 262.48 nm', 'range': 'double', 'aliases': ['spectrometer signal at262.48nm'], 'mappings': []}, 'spectrometerSignalAt263.29nm': {'slot_uri': 'neon:spectrometerSignalAt263.29nm', 'description': 'spectrometer intensity at wavelength 263.29 nm', 'range': 'double', 'aliases': ['spectrometer signal at263.29nm'], 'mappings': []}, 'spectrometerSignalAt264.1nm': {'slot_uri': 'neon:spectrometerSignalAt264.1nm', 'description': 'spectrometer intensity at wavelength 264.1 nm', 'range': 'double', 'aliases': ['spectrometer signal at264.1nm'], 'mappings': []}, 'spectrometerSignalAt264.91nm': {'slot_uri': 'neon:spectrometerSignalAt264.91nm', 'description': 'spectrometer intensity at wavelength 264.91 nm', 'range': 'double', 'aliases': ['spectrometer signal at264.91nm'], 'mappings': []}, 'spectrometerSignalAt265.73nm': {'slot_uri': 'neon:spectrometerSignalAt265.73nm', 'description': 'spectrometer intensity at wavelength 265.73 nm', 'range': 'double', 'aliases': ['spectrometer signal at265.73nm'], 'mappings': []}, 'spectrometerSignalAt266.54nm': {'slot_uri': 'neon:spectrometerSignalAt266.54nm', 'description': 'spectrometer intensity at wavelength 266.54 nm', 'range': 'double', 'aliases': ['spectrometer signal at266.54nm'], 'mappings': []}, 'spectrometerSignalAt267.35nm': {'slot_uri': 'neon:spectrometerSignalAt267.35nm', 'description': 'spectrometer intensity at wavelength 267.35 nm', 'range': 'double', 'aliases': ['spectrometer signal at267.35nm'], 'mappings': []}, 'spectrometerSignalAt268.17nm': {'slot_uri': 'neon:spectrometerSignalAt268.17nm', 'description': 'spectrometer intensity at wavelength 268.17 nm', 'range': 'double', 'aliases': ['spectrometer signal at268.17nm'], 'mappings': []}, 'spectrometerSignalAt268.98nm': {'slot_uri': 'neon:spectrometerSignalAt268.98nm', 'description': 'spectrometer intensity at wavelength 268.98 nm', 'range': 'double', 'aliases': ['spectrometer signal at268.98nm'], 'mappings': []}, 'spectrometerSignalAt269.79nm': {'slot_uri': 'neon:spectrometerSignalAt269.79nm', 'description': 'spectrometer intensity at wavelength 269.79 nm', 'range': 'double', 'aliases': ['spectrometer signal at269.79nm'], 'mappings': []}, 'spectrometerSignalAt270.61nm': {'slot_uri': 'neon:spectrometerSignalAt270.61nm', 'description': 'spectrometer intensity at wavelength 270.61 nm', 'range': 'double', 'aliases': ['spectrometer signal at270.61nm'], 'mappings': []}, 'spectrometerSignalAt271.42nm': {'slot_uri': 'neon:spectrometerSignalAt271.42nm', 'description': 'spectrometer intensity at wavelength 271.42 nm', 'range': 'double', 'aliases': ['spectrometer signal at271.42nm'], 'mappings': []}, 'spectrometerSignalAt272.23nm': {'slot_uri': 'neon:spectrometerSignalAt272.23nm', 'description': 'spectrometer intensity at wavelength 272.23 nm', 'range': 'double', 'aliases': ['spectrometer signal at272.23nm'], 'mappings': []}, 'spectrometerSignalAt273.05nm': {'slot_uri': 'neon:spectrometerSignalAt273.05nm', 'description': 'spectrometer intensity at wavelength 273.05 nm', 'range': 'double', 'aliases': ['spectrometer signal at273.05nm'], 'mappings': []}, 'spectrometerSignalAt273.86nm': {'slot_uri': 'neon:spectrometerSignalAt273.86nm', 'description': 'spectrometer intensity at wavelength 273.86 nm', 'range': 'double', 'aliases': ['spectrometer signal at273.86nm'], 'mappings': []}, 'spectrometerSignalAt274.68nm': {'slot_uri': 'neon:spectrometerSignalAt274.68nm', 'description': 'spectrometer intensity at wavelength 274.68 nm', 'range': 'double', 'aliases': ['spectrometer signal at274.68nm'], 'mappings': []}, 'spectrometerSignalAt275.49nm': {'slot_uri': 'neon:spectrometerSignalAt275.49nm', 'description': 'spectrometer intensity at wavelength 275.49 nm', 'range': 'double', 'aliases': ['spectrometer signal at275.49nm'], 'mappings': []}, 'spectrometerSignalAt276.31nm': {'slot_uri': 'neon:spectrometerSignalAt276.31nm', 'description': 'spectrometer intensity at wavelength 276.31 nm', 'range': 'double', 'aliases': ['spectrometer signal at276.31nm'], 'mappings': []}, 'spectrometerSignalAt277.12nm': {'slot_uri': 'neon:spectrometerSignalAt277.12nm', 'description': 'spectrometer intensity at wavelength 277.12 nm', 'range': 'double', 'aliases': ['spectrometer signal at277.12nm'], 'mappings': []}, 'spectrometerSignalAt277.93nm': {'slot_uri': 'neon:spectrometerSignalAt277.93nm', 'description': 'spectrometer intensity at wavelength 277.93 nm', 'range': 'double', 'aliases': ['spectrometer signal at277.93nm'], 'mappings': []}, 'spectrometerSignalAt278.75nm': {'slot_uri': 'neon:spectrometerSignalAt278.75nm', 'description': 'spectrometer intensity at wavelength 278.75 nm', 'range': 'double', 'aliases': ['spectrometer signal at278.75nm'], 'mappings': []}, 'spectrometerSignalAt279.56nm': {'slot_uri': 'neon:spectrometerSignalAt279.56nm', 'description': 'spectrometer intensity at wavelength 279.56 nm', 'range': 'double', 'aliases': ['spectrometer signal at279.56nm'], 'mappings': []}, 'spectrometerSignalAt280.38nm': {'slot_uri': 'neon:spectrometerSignalAt280.38nm', 'description': 'spectrometer intensity at wavelength 280.38 nm', 'range': 'double', 'aliases': ['spectrometer signal at280.38nm'], 'mappings': []}, 'spectrometerSignalAt281.19nm': {'slot_uri': 'neon:spectrometerSignalAt281.19nm', 'description': 'spectrometer intensity at wavelength 281.19 nm', 'range': 'double', 'aliases': ['spectrometer signal at281.19nm'], 'mappings': []}, 'spectrometerSignalAt282.01nm': {'slot_uri': 'neon:spectrometerSignalAt282.01nm', 'description': 'spectrometer intensity at wavelength 282.01 nm', 'range': 'double', 'aliases': ['spectrometer signal at282.01nm'], 'mappings': []}, 'spectrometerSignalAt282.82nm': {'slot_uri': 'neon:spectrometerSignalAt282.82nm', 'description': 'spectrometer intensity at wavelength 282.82 nm', 'range': 'double', 'aliases': ['spectrometer signal at282.82nm'], 'mappings': []}, 'spectrometerSignalAt283.64nm': {'slot_uri': 'neon:spectrometerSignalAt283.64nm', 'description': 'spectrometer intensity at wavelength 283.64 nm', 'range': 'double', 'aliases': ['spectrometer signal at283.64nm'], 'mappings': []}, 'spectrometerSignalAt284.45nm': {'slot_uri': 'neon:spectrometerSignalAt284.45nm', 'description': 'spectrometer intensity at wavelength 284.45 nm', 'range': 'double', 'aliases': ['spectrometer signal at284.45nm'], 'mappings': []}, 'spectrometerSignalAt285.27nm': {'slot_uri': 'neon:spectrometerSignalAt285.27nm', 'description': 'spectrometer intensity at wavelength 285.27 nm', 'range': 'double', 'aliases': ['spectrometer signal at285.27nm'], 'mappings': []}, 'spectrometerSignalAt286.08nm': {'slot_uri': 'neon:spectrometerSignalAt286.08nm', 'description': 'spectrometer intensity at wavelength 286.08 nm', 'range': 'double', 'aliases': ['spectrometer signal at286.08nm'], 'mappings': []}, 'spectrometerSignalAt286.9nm': {'slot_uri': 'neon:spectrometerSignalAt286.9nm', 'description': 'spectrometer intensity at wavelength 286.9 nm', 'range': 'double', 'aliases': ['spectrometer signal at286.9nm'], 'mappings': []}, 'spectrometerSignalAt287.71nm': {'slot_uri': 'neon:spectrometerSignalAt287.71nm', 'description': 'spectrometer intensity at wavelength 287.71 nm', 'range': 'double', 'aliases': ['spectrometer signal at287.71nm'], 'mappings': []}, 'spectrometerSignalAt288.53nm': {'slot_uri': 'neon:spectrometerSignalAt288.53nm', 'description': 'spectrometer intensity at wavelength 288.53 nm', 'range': 'double', 'aliases': ['spectrometer signal at288.53nm'], 'mappings': []}, 'spectrometerSignalAt289.35nm': {'slot_uri': 'neon:spectrometerSignalAt289.35nm', 'description': 'spectrometer intensity at wavelength 289.35 nm', 'range': 'double', 'aliases': ['spectrometer signal at289.35nm'], 'mappings': []}, 'spectrometerSignalAt290.16nm': {'slot_uri': 'neon:spectrometerSignalAt290.16nm', 'description': 'spectrometer intensity at wavelength 290.16 nm', 'range': 'double', 'aliases': ['spectrometer signal at290.16nm'], 'mappings': []}, 'spectrometerSignalAt290.98nm': {'slot_uri': 'neon:spectrometerSignalAt290.98nm', 'description': 'spectrometer intensity at wavelength 290.98 nm', 'range': 'double', 'aliases': ['spectrometer signal at290.98nm'], 'mappings': []}, 'spectrometerSignalAt291.79nm': {'slot_uri': 'neon:spectrometerSignalAt291.79nm', 'description': 'spectrometer intensity at wavelength 291.79 nm', 'range': 'double', 'aliases': ['spectrometer signal at291.79nm'], 'mappings': []}, 'spectrometerSignalAt292.61nm': {'slot_uri': 'neon:spectrometerSignalAt292.61nm', 'description': 'spectrometer intensity at wavelength 292.61 nm', 'range': 'double', 'aliases': ['spectrometer signal at292.61nm'], 'mappings': []}, 'spectrometerSignalAt293.42nm': {'slot_uri': 'neon:spectrometerSignalAt293.42nm', 'description': 'spectrometer intensity at wavelength 293.42 nm', 'range': 'double', 'aliases': ['spectrometer signal at293.42nm'], 'mappings': []}, 'spectrometerSignalAt294.24nm': {'slot_uri': 'neon:spectrometerSignalAt294.24nm', 'description': 'spectrometer intensity at wavelength 294.24 nm', 'range': 'double', 'aliases': ['spectrometer signal at294.24nm'], 'mappings': []}, 'spectrometerSignalAt295.06nm': {'slot_uri': 'neon:spectrometerSignalAt295.06nm', 'description': 'spectrometer intensity at wavelength 295.06 nm', 'range': 'double', 'aliases': ['spectrometer signal at295.06nm'], 'mappings': []}, 'spectrometerSignalAt295.87nm': {'slot_uri': 'neon:spectrometerSignalAt295.87nm', 'description': 'spectrometer intensity at wavelength 295.87 nm', 'range': 'double', 'aliases': ['spectrometer signal at295.87nm'], 'mappings': []}, 'spectrometerSignalAt296.69nm': {'slot_uri': 'neon:spectrometerSignalAt296.69nm', 'description': 'spectrometer intensity at wavelength 296.69 nm', 'range': 'double', 'aliases': ['spectrometer signal at296.69nm'], 'mappings': []}, 'spectrometerSignalAt297.51nm': {'slot_uri': 'neon:spectrometerSignalAt297.51nm', 'description': 'spectrometer intensity at wavelength 297.51 nm', 'range': 'double', 'aliases': ['spectrometer signal at297.51nm'], 'mappings': []}, 'spectrometerSignalAt298.32nm': {'slot_uri': 'neon:spectrometerSignalAt298.32nm', 'description': 'spectrometer intensity at wavelength 298.32 nm', 'range': 'double', 'aliases': ['spectrometer signal at298.32nm'], 'mappings': []}, 'spectrometerSignalAt299.14nm': {'slot_uri': 'neon:spectrometerSignalAt299.14nm', 'description': 'spectrometer intensity at wavelength 299.14 nm', 'range': 'double', 'aliases': ['spectrometer signal at299.14nm'], 'mappings': []}, 'spectrometerSignalAt299.95nm': {'slot_uri': 'neon:spectrometerSignalAt299.95nm', 'description': 'spectrometer intensity at wavelength 299.95 nm', 'range': 'double', 'aliases': ['spectrometer signal at299.95nm'], 'mappings': []}, 'spectrometerSignalAt300.77nm': {'slot_uri': 'neon:spectrometerSignalAt300.77nm', 'description': 'spectrometer intensity at wavelength 300.77 nm', 'range': 'double', 'aliases': ['spectrometer signal at300.77nm'], 'mappings': []}, 'spectrometerSignalAt301.59nm': {'slot_uri': 'neon:spectrometerSignalAt301.59nm', 'description': 'spectrometer intensity at wavelength 301.59 nm', 'range': 'double', 'aliases': ['spectrometer signal at301.59nm'], 'mappings': []}, 'spectrometerSignalAt302.4nm': {'slot_uri': 'neon:spectrometerSignalAt302.4nm', 'description': 'spectrometer intensity at wavelength 302.4 nm', 'range': 'double', 'aliases': ['spectrometer signal at302.4nm'], 'mappings': []}, 'spectrometerSignalAt303.22nm': {'slot_uri': 'neon:spectrometerSignalAt303.22nm', 'description': 'spectrometer intensity at wavelength 303.22 nm', 'range': 'double', 'aliases': ['spectrometer signal at303.22nm'], 'mappings': []}, 'spectrometerSignalAt304.04nm': {'slot_uri': 'neon:spectrometerSignalAt304.04nm', 'description': 'spectrometer intensity at wavelength 304.04 nm', 'range': 'double', 'aliases': ['spectrometer signal at304.04nm'], 'mappings': []}, 'spectrometerSignalAt304.85nm': {'slot_uri': 'neon:spectrometerSignalAt304.85nm', 'description': 'spectrometer intensity at wavelength 304.85 nm', 'range': 'double', 'aliases': ['spectrometer signal at304.85nm'], 'mappings': []}, 'spectrometerSignalAt305.67nm': {'slot_uri': 'neon:spectrometerSignalAt305.67nm', 'description': 'spectrometer intensity at wavelength 305.67 nm', 'range': 'double', 'aliases': ['spectrometer signal at305.67nm'], 'mappings': []}, 'spectrometerSignalAt306.49nm': {'slot_uri': 'neon:spectrometerSignalAt306.49nm', 'description': 'spectrometer intensity at wavelength 306.49 nm', 'range': 'double', 'aliases': ['spectrometer signal at306.49nm'], 'mappings': []}, 'spectrometerSignalAt307.3nm': {'slot_uri': 'neon:spectrometerSignalAt307.3nm', 'description': 'spectrometer intensity at wavelength 307.3 nm', 'range': 'double', 'aliases': ['spectrometer signal at307.3nm'], 'mappings': []}, 'spectrometerSignalAt308.12nm': {'slot_uri': 'neon:spectrometerSignalAt308.12nm', 'description': 'spectrometer intensity at wavelength 308.12 nm', 'range': 'double', 'aliases': ['spectrometer signal at308.12nm'], 'mappings': []}, 'spectrometerSignalAt308.93nm': {'slot_uri': 'neon:spectrometerSignalAt308.93nm', 'description': 'spectrometer intensity at wavelength 308.93 nm', 'range': 'double', 'aliases': ['spectrometer signal at308.93nm'], 'mappings': []}, 'spectrometerSignalAt309.75nm': {'slot_uri': 'neon:spectrometerSignalAt309.75nm', 'description': 'spectrometer intensity at wavelength 309.75 nm', 'range': 'double', 'aliases': ['spectrometer signal at309.75nm'], 'mappings': []}, 'spectrometerSignalAt310.57nm': {'slot_uri': 'neon:spectrometerSignalAt310.57nm', 'description': 'spectrometer intensity at wavelength 310.57 nm', 'range': 'double', 'aliases': ['spectrometer signal at310.57nm'], 'mappings': []}, 'spectrometerSignalAt311.38nm': {'slot_uri': 'neon:spectrometerSignalAt311.38nm', 'description': 'spectrometer intensity at wavelength 311.38 nm', 'range': 'double', 'aliases': ['spectrometer signal at311.38nm'], 'mappings': []}, 'spectrometerSignalAt312.2nm': {'slot_uri': 'neon:spectrometerSignalAt312.2nm', 'description': 'spectrometer intensity at wavelength 312.2 nm', 'range': 'double', 'aliases': ['spectrometer signal at312.2nm'], 'mappings': []}, 'spectrometerSignalAt313.02nm': {'slot_uri': 'neon:spectrometerSignalAt313.02nm', 'description': 'spectrometer intensity at wavelength 313.02 nm', 'range': 'double', 'aliases': ['spectrometer signal at313.02nm'], 'mappings': []}, 'spectrometerSignalAt313.83nm': {'slot_uri': 'neon:spectrometerSignalAt313.83nm', 'description': 'spectrometer intensity at wavelength 313.83 nm', 'range': 'double', 'aliases': ['spectrometer signal at313.83nm'], 'mappings': []}, 'spectrometerSignalAt314.65nm': {'slot_uri': 'neon:spectrometerSignalAt314.65nm', 'description': 'spectrometer intensity at wavelength 314.65 nm', 'range': 'double', 'aliases': ['spectrometer signal at314.65nm'], 'mappings': []}, 'spectrometerSignalAt315.47nm': {'slot_uri': 'neon:spectrometerSignalAt315.47nm', 'description': 'spectrometer intensity at wavelength 315.47 nm', 'range': 'double', 'aliases': ['spectrometer signal at315.47nm'], 'mappings': []}, 'spectrometerSignalAt316.28nm': {'slot_uri': 'neon:spectrometerSignalAt316.28nm', 'description': 'spectrometer intensity at wavelength 316.28 nm', 'range': 'double', 'aliases': ['spectrometer signal at316.28nm'], 'mappings': []}, 'spectrometerSignalAt317.1nm': {'slot_uri': 'neon:spectrometerSignalAt317.1nm', 'description': 'spectrometer intensity at wavelength 317.1 nm', 'range': 'double', 'aliases': ['spectrometer signal at317.1nm'], 'mappings': []}, 'spectrometerSignalAt317.92nm': {'slot_uri': 'neon:spectrometerSignalAt317.92nm', 'description': 'spectrometer intensity at wavelength 317.92 nm', 'range': 'double', 'aliases': ['spectrometer signal at317.92nm'], 'mappings': []}, 'spectrometerSignalAt318.73nm': {'slot_uri': 'neon:spectrometerSignalAt318.73nm', 'description': 'spectrometer intensity at wavelength 318.73 nm', 'range': 'double', 'aliases': ['spectrometer signal at318.73nm'], 'mappings': []}, 'spectrometerSignalAt319.55nm': {'slot_uri': 'neon:spectrometerSignalAt319.55nm', 'description': 'spectrometer intensity at wavelength 319.55 nm', 'range': 'double', 'aliases': ['spectrometer signal at319.55nm'], 'mappings': []}, 'spectrometerSignalAt320.37nm': {'slot_uri': 'neon:spectrometerSignalAt320.37nm', 'description': 'spectrometer intensity at wavelength 320.37 nm', 'range': 'double', 'aliases': ['spectrometer signal at320.37nm'], 'mappings': []}, 'spectrometerSignalAt321.18nm': {'slot_uri': 'neon:spectrometerSignalAt321.18nm', 'description': 'spectrometer intensity at wavelength 321.18 nm', 'range': 'double', 'aliases': ['spectrometer signal at321.18nm'], 'mappings': []}, 'spectrometerSignalAt322nm': {'slot_uri': 'neon:spectrometerSignalAt322nm', 'description': 'spectrometer intensity at wavelength 322 nm', 'range': 'double', 'aliases': ['spectrometer signal at322nm'], 'mappings': []}, 'spectrometerSignalAt322.82nm': {'slot_uri': 'neon:spectrometerSignalAt322.82nm', 'description': 'spectrometer intensity at wavelength 322.82 nm', 'range': 'double', 'aliases': ['spectrometer signal at322.82nm'], 'mappings': []}, 'spectrometerSignalAt323.63nm': {'slot_uri': 'neon:spectrometerSignalAt323.63nm', 'description': 'spectrometer intensity at wavelength 323.63 nm', 'range': 'double', 'aliases': ['spectrometer signal at323.63nm'], 'mappings': []}, 'spectrometerSignalAt324.45nm': {'slot_uri': 'neon:spectrometerSignalAt324.45nm', 'description': 'spectrometer intensity at wavelength 324.45 nm', 'range': 'double', 'aliases': ['spectrometer signal at324.45nm'], 'mappings': []}, 'spectrometerSignalAt325.27nm': {'slot_uri': 'neon:spectrometerSignalAt325.27nm', 'description': 'spectrometer intensity at wavelength 325.27 nm', 'range': 'double', 'aliases': ['spectrometer signal at325.27nm'], 'mappings': []}, 'spectrometerSignalAt326.08nm': {'slot_uri': 'neon:spectrometerSignalAt326.08nm', 'description': 'spectrometer intensity at wavelength 326.08 nm', 'range': 'double', 'aliases': ['spectrometer signal at326.08nm'], 'mappings': []}, 'spectrometerSignalAt326.9nm': {'slot_uri': 'neon:spectrometerSignalAt326.9nm', 'description': 'spectrometer intensity at wavelength 326.9 nm', 'range': 'double', 'aliases': ['spectrometer signal at326.9nm'], 'mappings': []}, 'spectrometerSignalAt327.72nm': {'slot_uri': 'neon:spectrometerSignalAt327.72nm', 'description': 'spectrometer intensity at wavelength 327.72 nm', 'range': 'double', 'aliases': ['spectrometer signal at327.72nm'], 'mappings': []}, 'spectrometerSignalAt328.53nm': {'slot_uri': 'neon:spectrometerSignalAt328.53nm', 'description': 'spectrometer intensity at wavelength 328.53 nm', 'range': 'double', 'aliases': ['spectrometer signal at328.53nm'], 'mappings': []}, 'spectrometerSignalAt329.35nm': {'slot_uri': 'neon:spectrometerSignalAt329.35nm', 'description': 'spectrometer intensity at wavelength 329.35 nm', 'range': 'double', 'aliases': ['spectrometer signal at329.35nm'], 'mappings': []}, 'spectrometerSignalAt330.17nm': {'slot_uri': 'neon:spectrometerSignalAt330.17nm', 'description': 'spectrometer intensity at wavelength 330.17 nm', 'range': 'double', 'aliases': ['spectrometer signal at330.17nm'], 'mappings': []}, 'spectrometerSignalAt330.98nm': {'slot_uri': 'neon:spectrometerSignalAt330.98nm', 'description': 'spectrometer intensity at wavelength 330.98 nm', 'range': 'double', 'aliases': ['spectrometer signal at330.98nm'], 'mappings': []}, 'spectrometerSignalAt331.8nm': {'slot_uri': 'neon:spectrometerSignalAt331.8nm', 'description': 'spectrometer intensity at wavelength 331.8 nm', 'range': 'double', 'aliases': ['spectrometer signal at331.8nm'], 'mappings': []}, 'spectrometerSignalAt332.62nm': {'slot_uri': 'neon:spectrometerSignalAt332.62nm', 'description': 'spectrometer intensity at wavelength 332.62 nm', 'range': 'double', 'aliases': ['spectrometer signal at332.62nm'], 'mappings': []}, 'spectrometerSignalAt333.43nm': {'slot_uri': 'neon:spectrometerSignalAt333.43nm', 'description': 'spectrometer intensity at wavelength 333.43 nm', 'range': 'double', 'aliases': ['spectrometer signal at333.43nm'], 'mappings': []}, 'spectrometerSignalAt334.25nm': {'slot_uri': 'neon:spectrometerSignalAt334.25nm', 'description': 'spectrometer intensity at wavelength 334.25 nm', 'range': 'double', 'aliases': ['spectrometer signal at334.25nm'], 'mappings': []}, 'spectrometerSignalAt335.06nm': {'slot_uri': 'neon:spectrometerSignalAt335.06nm', 'description': 'spectrometer intensity at wavelength 335.06 nm', 'range': 'double', 'aliases': ['spectrometer signal at335.06nm'], 'mappings': []}, 'spectrometerSignalAt335.88nm': {'slot_uri': 'neon:spectrometerSignalAt335.88nm', 'description': 'spectrometer intensity at wavelength 335.88 nm', 'range': 'double', 'aliases': ['spectrometer signal at335.88nm'], 'mappings': []}, 'spectrometerSignalAt336.7nm': {'slot_uri': 'neon:spectrometerSignalAt336.7nm', 'description': 'spectrometer intensity at wavelength 336.7 nm', 'range': 'double', 'aliases': ['spectrometer signal at336.7nm'], 'mappings': []}, 'spectrometerSignalAt337.51nm': {'slot_uri': 'neon:spectrometerSignalAt337.51nm', 'description': 'spectrometer intensity at wavelength 337.51 nm', 'range': 'double', 'aliases': ['spectrometer signal at337.51nm'], 'mappings': []}, 'spectrometerSignalAt338.33nm': {'slot_uri': 'neon:spectrometerSignalAt338.33nm', 'description': 'spectrometer intensity at wavelength 338.33 nm', 'range': 'double', 'aliases': ['spectrometer signal at338.33nm'], 'mappings': []}, 'spectrometerSignalAt339.14nm': {'slot_uri': 'neon:spectrometerSignalAt339.14nm', 'description': 'spectrometer intensity at wavelength 339.14 nm', 'range': 'double', 'aliases': ['spectrometer signal at339.14nm'], 'mappings': []}, 'spectrometerSignalAt339.96nm': {'slot_uri': 'neon:spectrometerSignalAt339.96nm', 'description': 'spectrometer intensity at wavelength 339.96 nm', 'range': 'double', 'aliases': ['spectrometer signal at339.96nm'], 'mappings': []}, 'spectrometerSignalAt340.78nm': {'slot_uri': 'neon:spectrometerSignalAt340.78nm', 'description': 'spectrometer intensity at wavelength 340.78 nm', 'range': 'double', 'aliases': ['spectrometer signal at340.78nm'], 'mappings': []}, 'spectrometerSignalAt341.59nm': {'slot_uri': 'neon:spectrometerSignalAt341.59nm', 'description': 'spectrometer intensity at wavelength 341.59 nm', 'range': 'double', 'aliases': ['spectrometer signal at341.59nm'], 'mappings': []}, 'spectrometerSignalAt342.41nm': {'slot_uri': 'neon:spectrometerSignalAt342.41nm', 'description': 'spectrometer intensity at wavelength 342.41 nm', 'range': 'double', 'aliases': ['spectrometer signal at342.41nm'], 'mappings': []}, 'spectrometerSignalAt343.22nm': {'slot_uri': 'neon:spectrometerSignalAt343.22nm', 'description': 'spectrometer intensity at wavelength 343.22 nm', 'range': 'double', 'aliases': ['spectrometer signal at343.22nm'], 'mappings': []}, 'spectrometerSignalAt344.04nm': {'slot_uri': 'neon:spectrometerSignalAt344.04nm', 'description': 'spectrometer intensity at wavelength 344.04 nm', 'range': 'double', 'aliases': ['spectrometer signal at344.04nm'], 'mappings': []}, 'spectrometerSignalAt344.85nm': {'slot_uri': 'neon:spectrometerSignalAt344.85nm', 'description': 'spectrometer intensity at wavelength 344.85 nm', 'range': 'double', 'aliases': ['spectrometer signal at344.85nm'], 'mappings': []}, 'spectrometerSignalAt345.67nm': {'slot_uri': 'neon:spectrometerSignalAt345.67nm', 'description': 'spectrometer intensity at wavelength 345.67 nm', 'range': 'double', 'aliases': ['spectrometer signal at345.67nm'], 'mappings': []}, 'spectrometerSignalAt346.48nm': {'slot_uri': 'neon:spectrometerSignalAt346.48nm', 'description': 'spectrometer intensity at wavelength 346.48 nm', 'range': 'double', 'aliases': ['spectrometer signal at346.48nm'], 'mappings': []}, 'spectrometerSignalAt347.3nm': {'slot_uri': 'neon:spectrometerSignalAt347.3nm', 'description': 'spectrometer intensity at wavelength 347.3 nm', 'range': 'double', 'aliases': ['spectrometer signal at347.3nm'], 'mappings': []}, 'spectrometerSignalAt348.12nm': {'slot_uri': 'neon:spectrometerSignalAt348.12nm', 'description': 'spectrometer intensity at wavelength 348.12 nm', 'range': 'double', 'aliases': ['spectrometer signal at348.12nm'], 'mappings': []}, 'spectrometerSignalAt348.93nm': {'slot_uri': 'neon:spectrometerSignalAt348.93nm', 'description': 'spectrometer intensity at wavelength 348.93 nm', 'range': 'double', 'aliases': ['spectrometer signal at348.93nm'], 'mappings': []}, 'spectrometerSignalAt349.75nm': {'slot_uri': 'neon:spectrometerSignalAt349.75nm', 'description': 'spectrometer intensity at wavelength 349.75 nm', 'range': 'double', 'aliases': ['spectrometer signal at349.75nm'], 'mappings': []}, 'spectrometerSignalAt350.56nm': {'slot_uri': 'neon:spectrometerSignalAt350.56nm', 'description': 'spectrometer intensity at wavelength 350.56 nm', 'range': 'double', 'aliases': ['spectrometer signal at350.56nm'], 'mappings': []}, 'spectrometerSignalAt351.38nm': {'slot_uri': 'neon:spectrometerSignalAt351.38nm', 'description': 'spectrometer intensity at wavelength 351.38 nm', 'range': 'double', 'aliases': ['spectrometer signal at351.38nm'], 'mappings': []}, 'spectrometerSignalAt352.19nm': {'slot_uri': 'neon:spectrometerSignalAt352.19nm', 'description': 'spectrometer intensity at wavelength 352.19 nm', 'range': 'double', 'aliases': ['spectrometer signal at352.19nm'], 'mappings': []}, 'spectrometerSignalAt353.01nm': {'slot_uri': 'neon:spectrometerSignalAt353.01nm', 'description': 'spectrometer intensity at wavelength 353.01 nm', 'range': 'double', 'aliases': ['spectrometer signal at353.01nm'], 'mappings': []}, 'spectrometerSignalAt353.82nm': {'slot_uri': 'neon:spectrometerSignalAt353.82nm', 'description': 'spectrometer intensity at wavelength 353.82 nm', 'range': 'double', 'aliases': ['spectrometer signal at353.82nm'], 'mappings': []}, 'spectrometerSignalAt354.63nm': {'slot_uri': 'neon:spectrometerSignalAt354.63nm', 'description': 'spectrometer intensity at wavelength 354.63 nm', 'range': 'double', 'aliases': ['spectrometer signal at354.63nm'], 'mappings': []}, 'spectrometerSignalAt355.45nm': {'slot_uri': 'neon:spectrometerSignalAt355.45nm', 'description': 'spectrometer intensity at wavelength 355.45 nm', 'range': 'double', 'aliases': ['spectrometer signal at355.45nm'], 'mappings': []}, 'spectrometerSignalAt356.26nm': {'slot_uri': 'neon:spectrometerSignalAt356.26nm', 'description': 'spectrometer intensity at wavelength 356.26 nm', 'range': 'double', 'aliases': ['spectrometer signal at356.26nm'], 'mappings': []}, 'spectrometerSignalAt357.08nm': {'slot_uri': 'neon:spectrometerSignalAt357.08nm', 'description': 'spectrometer intensity at wavelength 357.08 nm', 'range': 'double', 'aliases': ['spectrometer signal at357.08nm'], 'mappings': []}, 'spectrometerSignalAt357.89nm': {'slot_uri': 'neon:spectrometerSignalAt357.89nm', 'description': 'spectrometer intensity at wavelength 357.89 nm', 'range': 'double', 'aliases': ['spectrometer signal at357.89nm'], 'mappings': []}, 'spectrometerSignalAt358.71nm': {'slot_uri': 'neon:spectrometerSignalAt358.71nm', 'description': 'spectrometer intensity at wavelength 358.71 nm', 'range': 'double', 'aliases': ['spectrometer signal at358.71nm'], 'mappings': []}, 'spectrometerSignalAt359.52nm': {'slot_uri': 'neon:spectrometerSignalAt359.52nm', 'description': 'spectrometer intensity at wavelength 359.52 nm', 'range': 'double', 'aliases': ['spectrometer signal at359.52nm'], 'mappings': []}, 'spectrometerSignalAt360.33nm': {'slot_uri': 'neon:spectrometerSignalAt360.33nm', 'description': 'spectrometer intensity at wavelength 360.33 nm', 'range': 'double', 'aliases': ['spectrometer signal at360.33nm'], 'mappings': []}, 'spectrometerSignalAt361.15nm': {'slot_uri': 'neon:spectrometerSignalAt361.15nm', 'description': 'spectrometer intensity at wavelength 361.15 nm', 'range': 'double', 'aliases': ['spectrometer signal at361.15nm'], 'mappings': []}, 'spectrometerSignalAt361.96nm': {'slot_uri': 'neon:spectrometerSignalAt361.96nm', 'description': 'spectrometer intensity at wavelength 361.96 nm', 'range': 'double', 'aliases': ['spectrometer signal at361.96nm'], 'mappings': []}, 'spectrometerSignalAt362.78nm': {'slot_uri': 'neon:spectrometerSignalAt362.78nm', 'description': 'spectrometer intensity at wavelength 362.78 nm', 'range': 'double', 'aliases': ['spectrometer signal at362.78nm'], 'mappings': []}, 'spectrometerSignalAt363.59nm': {'slot_uri': 'neon:spectrometerSignalAt363.59nm', 'description': 'spectrometer intensity at wavelength 363.59 nm', 'range': 'double', 'aliases': ['spectrometer signal at363.59nm'], 'mappings': []}, 'spectrometerSignalAt364.4nm': {'slot_uri': 'neon:spectrometerSignalAt364.4nm', 'description': 'spectrometer intensity at wavelength 364.4 nm', 'range': 'double', 'aliases': ['spectrometer signal at364.4nm'], 'mappings': []}, 'spectrometerSignalAt365.22nm': {'slot_uri': 'neon:spectrometerSignalAt365.22nm', 'description': 'spectrometer intensity at wavelength 365.22 nm', 'range': 'double', 'aliases': ['spectrometer signal at365.22nm'], 'mappings': []}, 'spectrometerSignalAt366.03nm': {'slot_uri': 'neon:spectrometerSignalAt366.03nm', 'description': 'spectrometer intensity at wavelength 366.03 nm', 'range': 'double', 'aliases': ['spectrometer signal at366.03nm'], 'mappings': []}, 'spectrometerSignalAt366.84nm': {'slot_uri': 'neon:spectrometerSignalAt366.84nm', 'description': 'spectrometer intensity at wavelength 366.84 nm', 'range': 'double', 'aliases': ['spectrometer signal at366.84nm'], 'mappings': []}, 'spectrometerSignalAt367.65nm': {'slot_uri': 'neon:spectrometerSignalAt367.65nm', 'description': 'spectrometer intensity at wavelength 367.65 nm', 'range': 'double', 'aliases': ['spectrometer signal at367.65nm'], 'mappings': []}, 'spectrometerSignalAt368.47nm': {'slot_uri': 'neon:spectrometerSignalAt368.47nm', 'description': 'spectrometer intensity at wavelength 368.47 nm', 'range': 'double', 'aliases': ['spectrometer signal at368.47nm'], 'mappings': []}, 'spectrometerSignalAt369.28nm': {'slot_uri': 'neon:spectrometerSignalAt369.28nm', 'description': 'spectrometer intensity at wavelength 369.28 nm', 'range': 'double', 'aliases': ['spectrometer signal at369.28nm'], 'mappings': []}, 'spectrometerSignalAt370.09nm': {'slot_uri': 'neon:spectrometerSignalAt370.09nm', 'description': 'spectrometer intensity at wavelength 370.09 nm', 'range': 'double', 'aliases': ['spectrometer signal at370.09nm'], 'mappings': []}, 'spectrometerSignalAt370.91nm': {'slot_uri': 'neon:spectrometerSignalAt370.91nm', 'description': 'spectrometer intensity at wavelength 370.91 nm', 'range': 'double', 'aliases': ['spectrometer signal at370.91nm'], 'mappings': []}, 'spectrometerSignalAt371.72nm': {'slot_uri': 'neon:spectrometerSignalAt371.72nm', 'description': 'spectrometer intensity at wavelength 371.72 nm', 'range': 'double', 'aliases': ['spectrometer signal at371.72nm'], 'mappings': []}, 'spectrometerSignalAt372.53nm': {'slot_uri': 'neon:spectrometerSignalAt372.53nm', 'description': 'spectrometer intensity at wavelength 372.53 nm', 'range': 'double', 'aliases': ['spectrometer signal at372.53nm'], 'mappings': []}, 'spectrometerSignalAt373.34nm': {'slot_uri': 'neon:spectrometerSignalAt373.34nm', 'description': 'spectrometer intensity at wavelength 373.34 nm', 'range': 'double', 'aliases': ['spectrometer signal at373.34nm'], 'mappings': []}, 'spectrometerSignalAt374.15nm': {'slot_uri': 'neon:spectrometerSignalAt374.15nm', 'description': 'spectrometer intensity at wavelength 374.15 nm', 'range': 'double', 'aliases': ['spectrometer signal at374.15nm'], 'mappings': []}, 'spectrometerSignalAt374.97nm': {'slot_uri': 'neon:spectrometerSignalAt374.97nm', 'description': 'spectrometer intensity at wavelength 374.97 nm', 'range': 'double', 'aliases': ['spectrometer signal at374.97nm'], 'mappings': []}, 'spectrometerSignalAt375.78nm': {'slot_uri': 'neon:spectrometerSignalAt375.78nm', 'description': 'spectrometer intensity at wavelength 375.78 nm', 'range': 'double', 'aliases': ['spectrometer signal at375.78nm'], 'mappings': []}, 'spectrometerSignalAt376.59nm': {'slot_uri': 'neon:spectrometerSignalAt376.59nm', 'description': 'spectrometer intensity at wavelength 376.59 nm', 'range': 'double', 'aliases': ['spectrometer signal at376.59nm'], 'mappings': []}, 'spectrometerSignalAt377.4nm': {'slot_uri': 'neon:spectrometerSignalAt377.4nm', 'description': 'spectrometer intensity at wavelength 377.4 nm', 'range': 'double', 'aliases': ['spectrometer signal at377.4nm'], 'mappings': []}, 'spectrometerSignalAt378.21nm': {'slot_uri': 'neon:spectrometerSignalAt378.21nm', 'description': 'spectrometer intensity at wavelength 378.21 nm', 'range': 'double', 'aliases': ['spectrometer signal at378.21nm'], 'mappings': []}, 'spectrometerSignalAt379.02nm': {'slot_uri': 'neon:spectrometerSignalAt379.02nm', 'description': 'spectrometer intensity at wavelength 379.02 nm', 'range': 'double', 'aliases': ['spectrometer signal at379.02nm'], 'mappings': []}, 'spectrometerSignalAt379.83nm': {'slot_uri': 'neon:spectrometerSignalAt379.83nm', 'description': 'spectrometer intensity at wavelength 379.83 nm', 'range': 'double', 'aliases': ['spectrometer signal at379.83nm'], 'mappings': []}, 'spectrometerSignalAt380.64nm': {'slot_uri': 'neon:spectrometerSignalAt380.64nm', 'description': 'spectrometer intensity at wavelength 380.64 nm', 'range': 'double', 'aliases': ['spectrometer signal at380.64nm'], 'mappings': []}, 'spectrometerSignalAt381.45nm': {'slot_uri': 'neon:spectrometerSignalAt381.45nm', 'description': 'spectrometer intensity at wavelength 381.45 nm', 'range': 'double', 'aliases': ['spectrometer signal at381.45nm'], 'mappings': []}, 'spectrometerSignalAt382.27nm': {'slot_uri': 'neon:spectrometerSignalAt382.27nm', 'description': 'spectrometer intensity at wavelength 382.27 nm', 'range': 'double', 'aliases': ['spectrometer signal at382.27nm'], 'mappings': []}, 'spectrometerSignalAt383.08nm': {'slot_uri': 'neon:spectrometerSignalAt383.08nm', 'description': 'spectrometer intensity at wavelength 383.08 nm', 'range': 'double', 'aliases': ['spectrometer signal at383.08nm'], 'mappings': []}, 'spectrometerSignalAt383.89nm': {'slot_uri': 'neon:spectrometerSignalAt383.89nm', 'description': 'spectrometer intensity at wavelength 383.89 nm', 'range': 'double', 'aliases': ['spectrometer signal at383.89nm'], 'mappings': []}, 'spectrometerSignalAt384.7nm': {'slot_uri': 'neon:spectrometerSignalAt384.7nm', 'description': 'spectrometer intensity at wavelength 384.7 nm', 'range': 'double', 'aliases': ['spectrometer signal at384.7nm'], 'mappings': []}, 'spectrometerSignalAt385.51nm': {'slot_uri': 'neon:spectrometerSignalAt385.51nm', 'description': 'spectrometer intensity at wavelength 385.51 nm', 'range': 'double', 'aliases': ['spectrometer signal at385.51nm'], 'mappings': []}, 'spectrometerSignalAt386.32nm': {'slot_uri': 'neon:spectrometerSignalAt386.32nm', 'description': 'spectrometer intensity at wavelength 386.32 nm', 'range': 'double', 'aliases': ['spectrometer signal at386.32nm'], 'mappings': []}, 'spectrometerSignalAt387.13nm': {'slot_uri': 'neon:spectrometerSignalAt387.13nm', 'description': 'spectrometer intensity at wavelength 387.13 nm', 'range': 'double', 'aliases': ['spectrometer signal at387.13nm'], 'mappings': []}, 'spectrometerSignalAt387.93nm': {'slot_uri': 'neon:spectrometerSignalAt387.93nm', 'description': 'spectrometer intensity at wavelength 387.93 nm', 'range': 'double', 'aliases': ['spectrometer signal at387.93nm'], 'mappings': []}, 'spectrometerSignalAt388.74nm': {'slot_uri': 'neon:spectrometerSignalAt388.74nm', 'description': 'spectrometer intensity at wavelength 388.74 nm', 'range': 'double', 'aliases': ['spectrometer signal at388.74nm'], 'mappings': []}, 'spectrometerSignalAt389.55nm': {'slot_uri': 'neon:spectrometerSignalAt389.55nm', 'description': 'spectrometer intensity at wavelength 389.55 nm', 'range': 'double', 'aliases': ['spectrometer signal at389.55nm'], 'mappings': []}, 'spectrometerSignalAt390.36nm': {'slot_uri': 'neon:spectrometerSignalAt390.36nm', 'description': 'spectrometer intensity at wavelength 390.36 nm', 'range': 'double', 'aliases': ['spectrometer signal at390.36nm'], 'mappings': []}, 'spectrometerSignalAt391.17nm': {'slot_uri': 'neon:spectrometerSignalAt391.17nm', 'description': 'spectrometer intensity at wavelength 391.17 nm', 'range': 'double', 'aliases': ['spectrometer signal at391.17nm'], 'mappings': []}, 'spectrometerSignalAt391.98nm': {'slot_uri': 'neon:spectrometerSignalAt391.98nm', 'description': 'spectrometer intensity at wavelength 391.98 nm', 'range': 'double', 'aliases': ['spectrometer signal at391.98nm'], 'mappings': []}, 'spectrometerSignalAt392.79nm': {'slot_uri': 'neon:spectrometerSignalAt392.79nm', 'description': 'spectrometer intensity at wavelength 392.79 nm', 'range': 'double', 'aliases': ['spectrometer signal at392.79nm'], 'mappings': []}, 'spectrometerSignalAt393.6nm': {'slot_uri': 'neon:spectrometerSignalAt393.6nm', 'description': 'spectrometer intensity at wavelength 393.6 nm', 'range': 'double', 'aliases': ['spectrometer signal at393.6nm'], 'mappings': []}, 'spectrometerSignalAt394.4nm': {'slot_uri': 'neon:spectrometerSignalAt394.4nm', 'description': 'spectrometer intensity at wavelength 394.4 nm', 'range': 'double', 'aliases': ['spectrometer signal at394.4nm'], 'mappings': []}, 'spectrometerSignalAt395.21nm': {'slot_uri': 'neon:spectrometerSignalAt395.21nm', 'description': 'spectrometer intensity at wavelength 395.21 nm', 'range': 'double', 'aliases': ['spectrometer signal at395.21nm'], 'mappings': []}, 'spectrometerSignalAt396.02nm': {'slot_uri': 'neon:spectrometerSignalAt396.02nm', 'description': 'spectrometer intensity at wavelength 396.02 nm', 'range': 'double', 'aliases': ['spectrometer signal at396.02nm'], 'mappings': []}, 'spectrometerTemp': {'slot_uri': 'neon:spectrometerTemp', 'description': 'Spectrometer temperature', 'range': 'double', 'aliases': ['spectrometer temp'], 'mappings': []}, 'lampTemp': {'slot_uri': 'neon:lampTemp', 'description': 'Lamp temperature', 'range': 'double', 'aliases': ['lamp temp'], 'mappings': []}, 'lampUseTime': {'slot_uri': 'neon:lampUseTime', 'description': 'Cumulative lamp time', 'range': 'double', 'aliases': ['lamp use time'], 'mappings': []}, 'sensorVoltage': {'slot_uri': 'neon:sensorVoltage', 'description': 'Main voltage', 'range': 'double', 'aliases': ['sensor voltage'], 'mappings': []}, 'lampVoltage': {'slot_uri': 'neon:lampVoltage', 'description': 'Lamp voltage', 'range': 'double', 'aliases': ['lamp voltage'], 'mappings': []}, 'spectrometerVoltage': {'slot_uri': 'neon:spectrometerVoltage', 'description': 'Internal voltage', 'range': 'double', 'aliases': ['spectrometer voltage'], 'mappings': []}, 'sensorCurrent': {'slot_uri': 'neon:sensorCurrent', 'description': 'Main current', 'range': 'double', 'aliases': ['sensor current'], 'mappings': []}, 'fitParameter1': {'slot_uri': 'neon:fitParameter1', 'description': 'Fit aux 1', 'range': 'double', 'aliases': ['fit parameter1'], 'mappings': []}, 'fitParameter2': {'slot_uri': 'neon:fitParameter2', 'description': 'Fit aux 2', 'range': 'double', 'aliases': ['fit parameter2'], 'mappings': []}, 'fitParameter3': {'slot_uri': 'neon:fitParameter3', 'description': 'Fit base 1', 'range': 'double', 'aliases': ['fit parameter3'], 'mappings': []}, 'fitParameter4': {'slot_uri': 'neon:fitParameter4', 'description': 'Fit base 2', 'range': 'double', 'aliases': ['fit parameter4'], 'mappings': []}, 'fitError': {'slot_uri': 'neon:fitError', 'description': 'Fit RMSE', 'range': 'double', 'aliases': ['fit error'], 'mappings': []}, 'checkSum': {'slot_uri': 'neon:checkSum', 'description': 'Check sum of data stream', 'range': 'double', 'aliases': ['check sum'], 'mappings': []}, 'pH': {'slot_uri': 'neon:pH', 'description': 'Measurement of pH in sample', 'range': 'double', 'aliases': ['p h'], 'mappings': []}, 'pHvoltage': {'slot_uri': 'neon:pHvoltage', 'description': 'pH meter voltage', 'range': 'double', 'aliases': ['p hvoltage'], 'mappings': []}, 'blueGreenAlgaePhycocyanin': {'slot_uri': 'neon:blueGreenAlgaePhycocyanin', 'description': 'Blue-green algae phycocyanin concentration in water', 'range': 'double', 'aliases': ['blue green algae phycocyanin'], 'mappings': []}, 'chlorophyll': {'slot_uri': 'neon:chlorophyll', 'description': 'Chlorophyll a concentration in water', 'range': 'double', 'aliases': ['chlorophyll'], 'mappings': []}, 'fDOM': {'slot_uri': 'neon:fDOM', 'description': 'Fluorescent dissolved organic matter concentration as quinine sulfate equivalents', 'range': 'double', 'aliases': ['f d o m'], 'mappings': []}, 'turbidity': {'slot_uri': 'neon:turbidity', 'description': 'Turbidity of water as FNU', 'range': 'double', 'aliases': ['turbidity'], 'mappings': []}, 'sondeSurfaceWaterPressure': {'slot_uri': 'neon:sondeSurfaceWaterPressure', 'description': 'Pressure of surface water measured by the multisonde in psi', 'range': 'double', 'aliases': ['sonde surface water pressure'], 'mappings': []}, 'sensorDepth': {'slot_uri': 'neon:sensorDepth', 'description': 'Water depth of measurement', 'range': 'double', 'aliases': ['sensor depth'], 'mappings': []}, 'sondeFaultCode': {'slot_uri': 'neon:sondeFaultCode', 'description': 'Sensor error code', 'range': 'double', 'aliases': ['sonde fault code'], 'mappings': []}, 'chlorophyllRaw': {'slot_uri': 'neon:chlorophyllRaw', 'description': 'Raw signal of chlorophyll a sensor', 'range': 'double', 'aliases': ['chlorophyll raw'], 'mappings': []}, 'blueGreenAlgaeRaw': {'slot_uri': 'neon:blueGreenAlgaeRaw', 'description': 'Raw signal of blue-green algae sensor', 'range': 'double', 'aliases': ['blue green algae raw'], 'mappings': []}, 'fDOMRaw': {'slot_uri': 'neon:fDOMRaw', 'description': 'Raw signal of fluorescent dissolved organic matter sensor as a percent of full scale detected in the sample', 'range': 'double', 'aliases': ['f d o m raw'], 'mappings': []}, 'turbidityRaw': {'slot_uri': 'neon:turbidityRaw', 'description': 'Raw signal of turbidity sensor', 'range': 'double', 'aliases': ['turbidity raw'], 'mappings': []}, 'wiperPosition': {'slot_uri': 'neon:wiperPosition', 'description': 'Position of wiper', 'range': 'double', 'aliases': ['wiper position'], 'mappings': []}, 'dscUnitsFail': {'slot_uri': 'neon:dscUnitsFail', 'description': 'A flag that indicates that discharge volume units from field device were not recognized', 'range': 'double', 'aliases': ['dsc units fail'], 'mappings': []}, 'dscWaterEdgeWarn': {'slot_uri': 'neon:dscWaterEdgeWarn', 'description': "A flag that indicates that discharge measurements were initiated on the 'left edge' of the stream transect, rather than the standard 'right edge'", 'range': 'double', 'aliases': ['dsc water edge warn'], 'mappings': []}, 'dscStationEntryWarn': {'slot_uri': 'neon:dscStationEntryWarn', 'description': "A flag that indicates that discharge measurements were not taken from 'non-fixed' stations", 'range': 'double', 'aliases': ['dsc station entry warn'], 'mappings': []}, 'dscFilterParamWarn': {'slot_uri': 'neon:dscFilterParamWarn', 'description': 'A flag that indicates that discharge measurements were taken with a filter parameter time less than 10 seconds', 'range': 'double', 'aliases': ['dsc filter param warn'], 'mappings': []}, 'startDateTime': {'slot_uri': 'neon:startDateTime', 'description': 'Date and time at which a sampling is initiated', 'range': 'time', 'aliases': ['start date time'], 'mappings': []}, 'endDateTime': {'slot_uri': 'neon:endDateTime', 'description': 'Date and time at which a sampling is completed', 'range': 'time', 'aliases': ['end date time'], 'mappings': []}, 'wellWaterDepth': {'slot_uri': 'neon:wellWaterDepth', 'description': 'Depth of water in well from top of well casing', 'range': 'double', 'aliases': ['well water depth'], 'mappings': []}, 'sampleDepth': {'slot_uri': 'neon:sampleDepth', 'description': 'Depth sample was collected', 'range': 'double', 'aliases': ['sample depth'], 'mappings': []}, 'sampleExtractionMethod': {'slot_uri': 'neon:sampleExtractionMethod', 'description': 'Method used to extract the sample', 'range': 'string', 'aliases': ['sample extraction method'], 'mappings': []}, 'wellDischargeRate': {'slot_uri': 'neon:wellDischargeRate', 'description': 'Rate at which  water is removed from well during sampling', 'range': 'double', 'aliases': ['well discharge rate'], 'mappings': []}, 'wellVolumePurged': {'slot_uri': 'neon:wellVolumePurged', 'description': 'Total volume removed from the well, prior to sampling', 'range': 'double', 'aliases': ['well volume purged'], 'mappings': []}, 'wellSampleDepth': {'slot_uri': 'neon:wellSampleDepth', 'description': 'Depth at which groundwater sample was collected. Depth measured from top of well casing', 'range': 'double', 'aliases': ['well sample depth'], 'mappings': []}, 'time': {'slot_uri': 'neon:time', 'description': 'The time or interval during which an event occurred', 'range': 'time', 'aliases': ['time'], 'mappings': []}, 'groundwaterTempExpUncert': {'slot_uri': 'neon:groundwaterTempExpUncert', 'description': 'Expanded uncertainty for temperature of groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater temp exp uncert'], 'mappings': []}, 'groundwaterTempRangeQF': {'slot_uri': 'neon:groundwaterTempRangeQF', 'description': 'Temperature of groundwater quality flag for the range test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater temp range q f'], 'mappings': []}, 'groundwaterTempPersistenceQF': {'slot_uri': 'neon:groundwaterTempPersistenceQF', 'description': 'Temperature of groundwater quality flag for the persistence test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater temp persistence q f'], 'mappings': []}, 'groundwaterTempStepQF': {'slot_uri': 'neon:groundwaterTempStepQF', 'description': 'Temperature of groundwater quality flag for the step test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater temp step q f'], 'mappings': []}, 'groundwaterTempNullQF': {'slot_uri': 'neon:groundwaterTempNullQF', 'description': 'Temperature of groundwater quality flag for the null test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater temp null q f'], 'mappings': []}, 'groundwaterTempGapQF': {'slot_uri': 'neon:groundwaterTempGapQF', 'description': 'Temperature of groundwater quality flag for the gap test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater temp gap q f'], 'mappings': []}, 'groundwaterTempConsistencyQF': {'slot_uri': 'neon:groundwaterTempConsistencyQF', 'description': 'Temperature of groundwater quality flag for the consistency test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater temp consistency q f'], 'mappings': []}, 'groundwaterTempSpikeQF': {'slot_uri': 'neon:groundwaterTempSpikeQF', 'description': 'Temperature of groundwater quality flag for the spike test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater temp spike q f'], 'mappings': []}, 'groundwaterTempMean': {'slot_uri': 'neon:groundwaterTempMean', 'description': 'Arithmetic mean of temperature of groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater temp mean'], 'mappings': []}, 'groundwaterTempMinimum': {'slot_uri': 'neon:groundwaterTempMinimum', 'description': 'Minimum temperature of groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater temp minimum'], 'mappings': []}, 'groundwaterTempMaximum': {'slot_uri': 'neon:groundwaterTempMaximum', 'description': 'Maximum temperature of groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater temp maximum'], 'mappings': []}, 'groundwaterTempVariance': {'slot_uri': 'neon:groundwaterTempVariance', 'description': 'Variance in temperature of groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater temp variance'], 'mappings': []}, 'groundwaterTempNumPts': {'slot_uri': 'neon:groundwaterTempNumPts', 'description': 'Number of points used to calculate the arithmetic mean of temperature of groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater temp num pts'], 'mappings': []}, 'groundwaterTempStdErMean': {'slot_uri': 'neon:groundwaterTempStdErMean', 'description': 'Standard error of the mean for temperature of groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater temp std er mean'], 'mappings': []}, 'groundwaterSpecCond': {'slot_uri': 'neon:groundwaterSpecCond', 'description': 'Specific conductivity in groundwater in microsiemens per centimeter', 'range': 'double', 'aliases': ['groundwater spec cond'], 'mappings': []}, 'groundwaterSpecCondExpUncert': {'slot_uri': 'neon:groundwaterSpecCondExpUncert', 'description': 'Expanded uncertainty for Specific Conductivity in groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater spec cond exp uncert'], 'mappings': []}, 'groundwaterSpecCondRangeQF': {'slot_uri': 'neon:groundwaterSpecCondRangeQF', 'description': 'Specific Conductivity in groundwater quality flag for the range test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater spec cond range q f'], 'mappings': []}, 'groundwaterSpecCondPersistQF': {'slot_uri': 'neon:groundwaterSpecCondPersistQF', 'description': 'Specific Conductivity in groundwater quality flag for the persistence test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater spec cond persist q f'], 'mappings': []}, 'groundwaterSpecCondStepQF': {'slot_uri': 'neon:groundwaterSpecCondStepQF', 'description': 'Specific Conductivity in groundwater quality flag for the step test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater spec cond step q f'], 'mappings': []}, 'groundwaterSpecCondNullQF': {'slot_uri': 'neon:groundwaterSpecCondNullQF', 'description': 'Specific Conductivity in groundwater quality flag for the null test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater spec cond null q f'], 'mappings': []}, 'groundwaterSpecCondGapQF': {'slot_uri': 'neon:groundwaterSpecCondGapQF', 'description': 'Specific Conductivity in groundwater quality flag for the gap test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater spec cond gap q f'], 'mappings': []}, 'groundwaterSpecCondConsistQF': {'slot_uri': 'neon:groundwaterSpecCondConsistQF', 'description': 'Specific Conductivity in groundwater quality flag for the consistency test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater spec cond consist q f'], 'mappings': []}, 'groundwaterSpecCondSpikeQF': {'slot_uri': 'neon:groundwaterSpecCondSpikeQF', 'description': 'Specific Conductivity in groundwater quality flag for the spike test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater spec cond spike q f'], 'mappings': []}, 'groundwaterSpecCondMean': {'slot_uri': 'neon:groundwaterSpecCondMean', 'description': 'Arithmetic mean of Specific Conductivity in groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater spec cond mean'], 'mappings': []}, 'groundwaterSpecCondMinimum': {'slot_uri': 'neon:groundwaterSpecCondMinimum', 'description': 'Minimum Specific Conductivity in groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater spec cond minimum'], 'mappings': []}, 'groundwaterSpecCondMaximum': {'slot_uri': 'neon:groundwaterSpecCondMaximum', 'description': 'Maximum Specific Conductivity in groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater spec cond maximum'], 'mappings': []}, 'groundwaterSpecCondVariance': {'slot_uri': 'neon:groundwaterSpecCondVariance', 'description': 'Variance in Specific Conductivity in groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater spec cond variance'], 'mappings': []}, 'groundwaterSpecCondNumPts': {'slot_uri': 'neon:groundwaterSpecCondNumPts', 'description': 'Number of points used to calculate the arithmetic mean of Specific Conductivity in groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater spec cond num pts'], 'mappings': []}, 'groundwaterSpecCondStdErMean': {'slot_uri': 'neon:groundwaterSpecCondStdErMean', 'description': 'Standard error of the mean for Specific Conductivity in groundwater in degrees celsius', 'range': 'double', 'aliases': ['groundwater spec cond std er mean'], 'mappings': []}, 'groundwaterElev': {'slot_uri': 'neon:groundwaterElev', 'description': 'Elevation of groundwater', 'range': 'double', 'aliases': ['groundwater elev'], 'mappings': []}, 'groundwaterElevExpUncert': {'slot_uri': 'neon:groundwaterElevExpUncert', 'description': 'Expanded uncertainty for elevation of groundwater', 'range': 'double', 'aliases': ['groundwater elev exp uncert'], 'mappings': []}, 'groundwaterElevRangeQF': {'slot_uri': 'neon:groundwaterElevRangeQF', 'description': 'Elevation of groundwater quality flag for the range test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater elev range q f'], 'mappings': []}, 'groundwaterElevPersistQF': {'slot_uri': 'neon:groundwaterElevPersistQF', 'description': 'Elevation of groundwater quality flag for the persistence test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater elev persist q f'], 'mappings': []}, 'groundwaterElevStepQF': {'slot_uri': 'neon:groundwaterElevStepQF', 'description': 'Elevation of groundwater quality flag for the step test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater elev step q f'], 'mappings': []}, 'groundwaterElevNullQF': {'slot_uri': 'neon:groundwaterElevNullQF', 'description': 'Elevation of groundwater quality flag for the null test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater elev null q f'], 'mappings': []}, 'groundwaterElevGapQF': {'slot_uri': 'neon:groundwaterElevGapQF', 'description': 'Elevation of groundwater quality flag for the gap test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater elev gap q f'], 'mappings': []}, 'groundwaterElevConsistQF': {'slot_uri': 'neon:groundwaterElevConsistQF', 'description': 'Elevation of groundwater quality flag for the consistency test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater elev consist q f'], 'mappings': []}, 'groundwaterElevSpikeQF': {'slot_uri': 'neon:groundwaterElevSpikeQF', 'description': 'Elevation of groundwater quality flag for the spike test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['groundwater elev spike q f'], 'mappings': []}, 'groundwaterElevMean': {'slot_uri': 'neon:groundwaterElevMean', 'description': 'Arithmetic mean of elevation of groundwater', 'range': 'double', 'aliases': ['groundwater elev mean'], 'mappings': []}, 'groundwaterElevMinimum': {'slot_uri': 'neon:groundwaterElevMinimum', 'description': 'Minimum elevation of groundwater', 'range': 'double', 'aliases': ['groundwater elev minimum'], 'mappings': []}, 'groundwaterElevMaximum': {'slot_uri': 'neon:groundwaterElevMaximum', 'description': 'Maximum elevation of groundwater', 'range': 'double', 'aliases': ['groundwater elev maximum'], 'mappings': []}, 'groundwaterElevVariance': {'slot_uri': 'neon:groundwaterElevVariance', 'description': 'Variance in elevation of groundwater', 'range': 'double', 'aliases': ['groundwater elev variance'], 'mappings': []}, 'groundwaterElevNumPts': {'slot_uri': 'neon:groundwaterElevNumPts', 'description': 'Number of points used to calculate the arithmetic mean of elevation of groundwater', 'range': 'double', 'aliases': ['groundwater elev num pts'], 'mappings': []}, 'groundwaterElevStdErMean': {'slot_uri': 'neon:groundwaterElevStdErMean', 'description': 'Standard error of the mean for elevation of groundwater', 'range': 'double', 'aliases': ['groundwater elev std er mean'], 'mappings': []}, 'soilPRTResistance': {'slot_uri': 'neon:soilPRTResistance', 'description': 'Resistance of soil deployed Platinum Resistance Thermometer (PRT) at temperature T', 'range': 'double', 'aliases': ['soil p r t resistance'], 'mappings': []}, 'rawCO2': {'slot_uri': 'neon:rawCO2', 'description': 'Raw CO2 concentration prior to application of the calibration or temperature, pressure, oxygen, and humidity compensations', 'range': 'double', 'aliases': ['raw c o2'], 'mappings': []}, 'headspaceTemp': {'slot_uri': 'neon:headspaceTemp', 'description': 'Temperature in the sensor headspace', 'range': 'double', 'aliases': ['headspace temp'], 'mappings': []}, 'errorStatus': {'slot_uri': 'neon:errorStatus', 'description': 'Error status of the sensor', 'range': 'double', 'aliases': ['error status'], 'mappings': []}, 'trapType': {'slot_uri': 'neon:trapType', 'description': 'Type of trap from which a sample was collected', 'range': 'string', 'aliases': ['trap type'], 'mappings': []}, 'externalConductance': {'slot_uri': 'neon:externalConductance', 'description': 'Specific conductivity (auto-corrected to 25 degrees C) measured at the external lab', 'range': 'double', 'aliases': ['external conductance'], 'mappings': []}, 'waterCarbonate': {'slot_uri': 'neon:waterCarbonate', 'description': 'Carbonate concentration', 'range': 'double', 'aliases': ['water carbonate'], 'mappings': []}, 'waterBicarbonate': {'slot_uri': 'neon:waterBicarbonate', 'description': 'Bicarbonate concentration', 'range': 'double', 'aliases': ['water bicarbonate'], 'mappings': []}, 'externalANC': {'slot_uri': 'neon:externalANC', 'description': 'Acid neutralizing capacity titration result from external lab in milligrams of Calcium Carbonate per liter', 'range': 'double', 'aliases': ['external a n c'], 'mappings': []}, 'waterCalcium': {'slot_uri': 'neon:waterCalcium', 'description': 'Calcium concentration', 'range': 'double', 'aliases': ['water calcium'], 'mappings': []}, 'waterMagnesium': {'slot_uri': 'neon:waterMagnesium', 'description': 'Magnesium concentration', 'range': 'double', 'aliases': ['water magnesium'], 'mappings': []}, 'waterSodium': {'slot_uri': 'neon:waterSodium', 'description': 'Sodium concentration', 'range': 'double', 'aliases': ['water sodium'], 'mappings': []}, 'waterPotassium': {'slot_uri': 'neon:waterPotassium', 'description': 'Potassium concentration', 'range': 'double', 'aliases': ['water potassium'], 'mappings': []}, 'waterSulfate': {'slot_uri': 'neon:waterSulfate', 'description': 'Sulfate concentration', 'range': 'double', 'aliases': ['water sulfate'], 'mappings': []}, 'waterChlorine': {'slot_uri': 'neon:waterChlorine', 'description': 'Chlorine concentration', 'range': 'double', 'aliases': ['water chlorine'], 'mappings': []}, 'waterManganese': {'slot_uri': 'neon:waterManganese', 'description': 'Manganese concentration', 'range': 'double', 'aliases': ['water manganese'], 'mappings': []}, 'waterIron': {'slot_uri': 'neon:waterIron', 'description': 'Iron concentration', 'range': 'double', 'aliases': ['water iron'], 'mappings': []}, 'waterBromine': {'slot_uri': 'neon:waterBromine', 'description': 'Bromine concentration', 'range': 'double', 'aliases': ['water bromine'], 'mappings': []}, 'waterFluorine': {'slot_uri': 'neon:waterFluorine', 'description': 'Fluorine concentration', 'range': 'double', 'aliases': ['water fluorine'], 'mappings': []}, 'waterSilica': {'slot_uri': 'neon:waterSilica', 'description': 'Silica concentration', 'range': 'double', 'aliases': ['water silica'], 'mappings': []}, 'totalSuspendedSolids': {'slot_uri': 'neon:totalSuspendedSolids', 'description': 'Total suspended solids concentration', 'range': 'double', 'aliases': ['total suspended solids'], 'mappings': []}, 'totalSuspendedSolidsDryMass': {'slot_uri': 'neon:totalSuspendedSolidsDryMass', 'description': 'Dry mass of total suspended solids', 'range': 'double', 'aliases': ['total suspended solids dry mass'], 'mappings': []}, 'totalDissolvedSolids': {'slot_uri': 'neon:totalDissolvedSolids', 'description': 'Total dissolved solids concentration', 'range': 'double', 'aliases': ['total dissolved solids'], 'mappings': []}, 'waterNitrateAndNitriteN': {'slot_uri': 'neon:waterNitrateAndNitriteN', 'description': 'Nitrate plus nitrite concentration as milligrams Nitrogen per liter', 'range': 'double', 'aliases': ['water nitrate and nitrite n'], 'mappings': []}, 'waterNitriteN': {'slot_uri': 'neon:waterNitriteN', 'description': 'Nitrite concentration concentration as milligrams Nitrogen per liter', 'range': 'double', 'aliases': ['water nitrite n'], 'mappings': []}, 'waterAmmoniumN': {'slot_uri': 'neon:waterAmmoniumN', 'description': 'Ammonium concentration as milligrams Nitrogen per liter', 'range': 'double', 'aliases': ['water ammonium n'], 'mappings': []}, 'waterOrthophosphateP': {'slot_uri': 'neon:waterOrthophosphateP', 'description': 'Orthophosphate concentration as milligrams Phosphorus per liter', 'range': 'double', 'aliases': ['water orthophosphate p'], 'mappings': []}, 'waterTotalNitrogen': {'slot_uri': 'neon:waterTotalNitrogen', 'description': 'Total nitrogen concentration', 'range': 'double', 'aliases': ['water total nitrogen'], 'mappings': []}, 'totalDissolvedNitrogen': {'slot_uri': 'neon:totalDissolvedNitrogen', 'description': 'Total dissolved nitrogen concentration', 'range': 'double', 'aliases': ['total dissolved nitrogen'], 'mappings': []}, 'dissolvedInorganicCarbon': {'slot_uri': 'neon:dissolvedInorganicCarbon', 'description': 'Dissolved inorganic carbon concentration', 'range': 'double', 'aliases': ['dissolved inorganic carbon'], 'mappings': []}, 'dissolvedOrganicCarbon': {'slot_uri': 'neon:dissolvedOrganicCarbon', 'description': 'Dissolved organic carbon concentration', 'range': 'double', 'aliases': ['dissolved organic carbon'], 'mappings': []}, 'waterTotalOrganicCarbon': {'slot_uri': 'neon:waterTotalOrganicCarbon', 'description': 'Total organic carbon', 'range': 'double', 'aliases': ['water total organic carbon'], 'mappings': []}, 'waterTotalPhosphorus': {'slot_uri': 'neon:waterTotalPhosphorus', 'description': 'Total phosphorus', 'range': 'double', 'aliases': ['water total phosphorus'], 'mappings': []}, 'totalDissolvedPhosphorus': {'slot_uri': 'neon:totalDissolvedPhosphorus', 'description': 'Total dissolved phosphorus', 'range': 'double', 'aliases': ['total dissolved phosphorus'], 'mappings': []}, 'totalParticulateCarbonMass': {'slot_uri': 'neon:totalParticulateCarbonMass', 'description': 'Total particulate carbon as milligrams Carbon', 'range': 'double', 'aliases': ['total particulate carbon mass'], 'mappings': []}, 'totalParticulateNitrogenMass': {'slot_uri': 'neon:totalParticulateNitrogenMass', 'description': 'Total particulate nitrogen as milligrams Nitrogen', 'range': 'double', 'aliases': ['total particulate nitrogen mass'], 'mappings': []}, 'uvAbsorbance250': {'slot_uri': 'neon:uvAbsorbance250', 'description': 'Ultraviolet absorbance at 250nm reported per 1cm path length', 'range': 'double', 'aliases': ['uv absorbance250'], 'mappings': []}, 'uvAbsorbance284': {'slot_uri': 'neon:uvAbsorbance284', 'description': 'Ultraviolet absorbance at 284nm reported per 1cm path length', 'range': 'double', 'aliases': ['uv absorbance284'], 'mappings': []}, 'nitrateNitriteNRunID': {'slot_uri': 'neon:nitrateNitriteNRunID', 'description': 'a linking value provided by the external lab that associates the nitrate plus nitrite to the run metadata', 'range': 'string', 'aliases': ['nitrate nitrite n run i d'], 'mappings': []}, 'nitriteRunID': {'slot_uri': 'neon:nitriteRunID', 'description': 'a linking value provided by the external lab that associates the nitrite to the run metadata', 'range': 'string', 'aliases': ['nitrite run i d'], 'mappings': []}, 'nh4RunID': {'slot_uri': 'neon:nh4RunID', 'description': 'a linking value provided by the external lab that associates the ammonium to the run metadata', 'range': 'string', 'aliases': ['nh4 run i d'], 'mappings': []}, 'OrthoPRunID': {'slot_uri': 'neon:OrthoPRunID', 'description': 'a linking value provided by the external lab that associates the orthophosphates to the run metadata', 'range': 'string', 'aliases': ['ortho p run i d'], 'mappings': []}, 'tnRunID': {'slot_uri': 'neon:tnRunID', 'description': 'a linking value provided by the external lab that associates the total nitrogen to the run metadata', 'range': 'string', 'aliases': ['tn run i d'], 'mappings': []}, 'tdnRunID': {'slot_uri': 'neon:tdnRunID', 'description': 'a linking value provided by the external lab that associates the total dissolved nitrogen to the run metadata', 'range': 'string', 'aliases': ['tdn run i d'], 'mappings': []}, 'dicRunID': {'slot_uri': 'neon:dicRunID', 'description': 'a linking value provided by the external lab that associates the dissolved inorganic carbon to the run metadata', 'range': 'string', 'aliases': ['dic run i d'], 'mappings': []}, 'docRunID': {'slot_uri': 'neon:docRunID', 'description': 'a linking value provided by the external lab that associates the dissolved organic carbon to the run metadata', 'range': 'string', 'aliases': ['doc run i d'], 'mappings': []}, 'tocRunID': {'slot_uri': 'neon:tocRunID', 'description': 'a linking value provided by the external lab that associates the total organic carbon to the run metadata', 'range': 'string', 'aliases': ['toc run i d'], 'mappings': []}, 'tpcnRunDate': {'slot_uri': 'neon:tpcnRunDate', 'description': 'A linking value provided by the external lab that associates the total carbon or total nitrogen to run date', 'range': 'time', 'aliases': ['tpcn run date'], 'mappings': []}, 'tpcnVolume': {'slot_uri': 'neon:tpcnVolume', 'description': 'Water volume used for total particulate carbon and nitrogen in milliliters', 'range': 'double', 'aliases': ['tpcn volume'], 'mappings': []}, 'uvBatchID': {'slot_uri': 'neon:uvBatchID', 'description': 'a linking value provided by the external lab that associates the ultraviolet absorbance to the batch metadata', 'range': 'string', 'aliases': ['uv batch i d'], 'mappings': []}, 'coolerTemp': {'slot_uri': 'neon:coolerTemp', 'description': 'Temperature of the cooler when the sample arrived at the external lab', 'range': 'double', 'aliases': ['cooler temp'], 'mappings': []}, 'externalLabMetadata': {'slot_uri': 'neon:externalLabMetadata', 'description': "The external lab's metadata", 'range': 'string', 'aliases': ['external lab metadata'], 'mappings': []}, 'internalLabID': {'slot_uri': 'neon:internalLabID', 'description': 'Internal identifier used by the external facility', 'range': 'string', 'aliases': ['internal lab i d'], 'mappings': []}, 'shipmentReceivedDate': {'slot_uri': 'neon:shipmentReceivedDate', 'description': 'Date a sample was received', 'range': 'time', 'aliases': ['shipment received date'], 'mappings': []}, 'receivedBy': {'slot_uri': 'neon:receivedBy', 'description': 'Anonymized name of lab personnel receiving the shipment', 'range': 'string', 'aliases': ['received by'], 'mappings': []}, 'shipDate': {'slot_uri': 'neon:shipDate', 'description': 'Date shipment sent by domain lab', 'range': 'time', 'aliases': ['ship date'], 'mappings': []}, 'shipmentID': {'slot_uri': 'neon:shipmentID', 'description': 'Unique identifier associated with shipment', 'range': 'string', 'aliases': ['shipment i d'], 'mappings': []}, 'shipmentCondition': {'slot_uri': 'neon:shipmentCondition', 'description': 'The condition in which the shipment was received', 'range': 'string', 'aliases': ['shipment condition'], 'mappings': []}, 'waterCarbonNitrogenRatio': {'slot_uri': 'neon:waterCarbonNitrogenRatio', 'description': 'Carbon to nitrogen ratio, calculated as TOC/TN', 'range': 'double', 'aliases': ['water carbon nitrogen ratio'], 'mappings': []}, 'shipmentWarmQF': {'slot_uri': 'neon:shipmentWarmQF', 'description': 'Quality Flag for cooler arriving at external lab too warm (above 6 C)', 'range': 'double', 'aliases': ['shipment warm q f'], 'mappings': []}, 'shipmentLateQF': {'slot_uri': 'neon:shipmentLateQF', 'description': 'Quality Flag for shipment arriving more than one day after shipment sent', 'range': 'double', 'aliases': ['shipment late q f'], 'mappings': []}, 'belowDetectionQF': {'slot_uri': 'neon:belowDetectionQF', 'description': 'Quality Flag indicating that at least one of the parameters in this record is below the method detection limit', 'range': 'double', 'aliases': ['below detection q f'], 'mappings': []}, 'totalParticulateCarbon': {'slot_uri': 'neon:totalParticulateCarbon', 'description': 'total particulate carbon as milligrams Carbon per liter', 'range': 'double', 'aliases': ['total particulate carbon'], 'mappings': []}, 'totalParticulateNitrogen': {'slot_uri': 'neon:totalParticulateNitrogen', 'description': 'total particulate nitrogen as milligrams Nitrogen per liter', 'range': 'double', 'aliases': ['total particulate nitrogen'], 'mappings': []}, 'externalRemarks': {'slot_uri': 'neon:externalRemarks', 'description': 'External lab notes; free text comments accompanying the record', 'range': 'string', 'aliases': ['external remarks'], 'mappings': []}, 'externalDuplicateRecordQF': {'slot_uri': 'neon:externalDuplicateRecordQF', 'description': 'Quality Flag for duplicate record from external facility', 'range': 'integer', 'aliases': ['external duplicate record q f'], 'mappings': []}, 'analytesBelowDetection': {'slot_uri': 'neon:analytesBelowDetection', 'description': 'List of analytes that are below detection', 'range': 'string', 'aliases': ['analytes below detection'], 'mappings': []}, 'idqQF': {'slot_uri': 'neon:idqQF', 'description': 'Quality Flag for identification qualifiers assigned at a different rank than taxonID', 'range': 'integer', 'aliases': ['idq q f'], 'mappings': []}, 'rawIRImage': {'slot_uri': 'neon:rawIRImage', 'description': 'Image captured in the infrared spectrum', 'range': 'string', 'aliases': ['raw i r image'], 'mappings': []}, 'rawRGBImage': {'slot_uri': 'neon:rawRGBImage', 'description': 'Image captured in the RGB color space', 'range': 'string', 'aliases': ['raw r g b image'], 'mappings': []}, 'SHFVoltage': {'slot_uri': 'neon:SHFVoltage', 'description': 'Soil heat flux sensor voltage\t', 'range': 'double', 'aliases': ['s h f voltage'], 'mappings': []}, 'SHFCalHeaterFlag': {'slot_uri': 'neon:SHFCalHeaterFlag', 'description': 'Calibration heater flag indicating whether the heater was operational to perform a self-calibration (0 = off, 1 = on)\t', 'range': 'double', 'aliases': ['s h f cal heater flag'], 'mappings': []}, 'curVoltage': {'slot_uri': 'neon:curVoltage', 'description': 'Voltage across the current sensing resistor\t', 'range': 'double', 'aliases': ['cur voltage'], 'mappings': []}, 'uploadDate': {'slot_uri': 'neon:uploadDate', 'description': 'Date the file was uploaded', 'range': 'time', 'aliases': ['upload date'], 'mappings': []}, 'analyte': {'slot_uri': 'neon:analyte', 'description': 'Analyte or parameter measured', 'range': 'string', 'aliases': ['analyte'], 'mappings': []}, 'instrument': {'slot_uri': 'neon:instrument', 'description': 'Type of instrument used for the analysis', 'range': 'string', 'aliases': ['instrument'], 'mappings': []}, 'method': {'slot_uri': 'neon:method', 'description': 'Published method used for analysis', 'range': 'string', 'aliases': ['method'], 'mappings': ['dwc:samplingProtocol']}, 'methodModification': {'slot_uri': 'neon:methodModification', 'description': 'Any remarks on modifications to published methods', 'range': 'string', 'aliases': ['method modification'], 'mappings': []}, 'methodDetectionLimit': {'slot_uri': 'neon:methodDetectionLimit', 'description': 'Detection limit for method used', 'range': 'double', 'aliases': ['method detection limit'], 'mappings': []}, 'analyteUnits': {'slot_uri': 'neon:analyteUnits', 'description': 'Associated units of measure for analyte', 'range': 'string', 'aliases': ['analyte units'], 'mappings': []}, 'precision': {'slot_uri': 'neon:precision', 'description': 'Closeness of agreement between indications or measured quantity values obtained by replicate measurements on the same or similar objects under specified conditions', 'range': 'double', 'aliases': ['precision'], 'mappings': []}, 'measurementUncertainty': {'slot_uri': 'neon:measurementUncertainty', 'description': 'Parameter, associated with the result of a measurement, that characterizes the dispersion of the values that could reasonably be attributed to the measurant', 'range': 'double', 'aliases': ['measurement uncertainty'], 'mappings': []}, 'internalLabName': {'slot_uri': 'neon:internalLabName', 'description': 'Name of internal laboratory or facility that is processing the sample', 'range': 'string', 'aliases': ['internal lab name'], 'mappings': []}, 'labSpecificStartDate': {'slot_uri': 'neon:labSpecificStartDate', 'description': 'Date a specific analyte, instrument, and associated method detection limit combination started', 'range': 'time', 'aliases': ['lab specific start date'], 'mappings': []}, 'labSpecificEndDate': {'slot_uri': 'neon:labSpecificEndDate', 'description': 'Date a specific analyte, instrument, and associated method detection limit combination ended', 'range': 'time', 'aliases': ['lab specific end date'], 'mappings': []}, 'rawSWCSalinity': {'slot_uri': 'neon:rawSWCSalinity', 'description': 'Raw measurement of soil water content and index of salinity', 'range': 'double', 'aliases': ['raw s w c salinity'], 'mappings': []}, 'baroPressParticulateMass': {'slot_uri': 'neon:baroPressParticulateMass', 'description': 'Barometric pressure measurements for proper pressure compensation to ensure constant flow rate\t', 'range': 'double', 'aliases': ['baro press particulate mass'], 'mappings': []}, 'flowRate': {'slot_uri': 'neon:flowRate', 'description': 'Flow rate in cubic meters per hour', 'range': 'double', 'aliases': ['flow rate'], 'mappings': []}, 'corrAirVolume': {'slot_uri': 'neon:corrAirVolume', 'description': 'Accumulated sample air volume, corrected to standard conditions of temperature and pressure of 298 K (25 degrees C) and 101.3 kPa (760mm Hg)', 'range': 'double', 'aliases': ['corr air volume'], 'mappings': []}, 'uncorrAirVolume': {'slot_uri': 'neon:uncorrAirVolume', 'description': 'Accumulated sample air volume, uncorrected ', 'range': 'double', 'aliases': ['uncorr air volume'], 'mappings': []}, 'chamberTemperature': {'slot_uri': 'neon:chamberTemperature', 'description': 'Temperature of the wet deposition chamber', 'range': 'double', 'aliases': ['chamber temperature'], 'mappings': []}, 'powerStatus': {'slot_uri': 'neon:powerStatus', 'description': 'Power status of the instrument (0=powered; 1=no power)', 'range': 'double', 'aliases': ['power status'], 'mappings': []}, 'lidStatusWetDep': {'slot_uri': 'neon:lidStatusWetDep', 'description': 'Lid status of the wet deposition collector (0=lid closed; 1=lid open)', 'range': 'double', 'aliases': ['lid status wet dep'], 'mappings': []}, 'rawWaterCalcium': {'slot_uri': 'neon:rawWaterCalcium', 'description': 'Raw measurement of calcium concentration', 'range': 'double', 'aliases': ['raw water calcium'], 'mappings': []}, 'rawWaterMagnesium': {'slot_uri': 'neon:rawWaterMagnesium', 'description': 'Raw measurement of magnesium concentration', 'range': 'double', 'aliases': ['raw water magnesium'], 'mappings': []}, 'rawWaterPotassium': {'slot_uri': 'neon:rawWaterPotassium', 'description': 'Raw measurement of potassium concentration', 'range': 'double', 'aliases': ['raw water potassium'], 'mappings': []}, 'rawWaterSodium': {'slot_uri': 'neon:rawWaterSodium', 'description': 'Raw measurement of sodium concentration', 'range': 'double', 'aliases': ['raw water sodium'], 'mappings': []}, 'rawWaterAmmonium': {'slot_uri': 'neon:rawWaterAmmonium', 'description': 'Raw measurement of ammonium concentration', 'range': 'double', 'aliases': ['raw water ammonium'], 'mappings': []}, 'rawWaterNitrate': {'slot_uri': 'neon:rawWaterNitrate', 'description': 'Raw measurement of nitrate concentration', 'range': 'double', 'aliases': ['raw water nitrate'], 'mappings': []}, 'rawWaterSulfate': {'slot_uri': 'neon:rawWaterSulfate', 'description': 'Raw measurement of sulfate concentration', 'range': 'double', 'aliases': ['raw water sulfate'], 'mappings': []}, 'rawWaterPhosphate': {'slot_uri': 'neon:rawWaterPhosphate', 'description': 'Raw measurement of phosphate concentration', 'range': 'double', 'aliases': ['raw water phosphate'], 'mappings': []}, 'rawPH': {'slot_uri': 'neon:rawPH', 'description': 'Raw measurement of pH in water', 'range': 'double', 'aliases': ['raw p h'], 'mappings': []}, 'rawConductance': {'slot_uri': 'neon:rawConductance', 'description': 'Raw measurement of conductivity at ambient temperature', 'range': 'double', 'aliases': ['raw conductance'], 'mappings': []}, 'wetDepChemicalWeightField': {'slot_uri': 'neon:wetDepChemicalWeightField', 'description': 'Weight of the chemical constituent wet deposition sample as measured by NEON field technicians', 'range': 'double', 'aliases': ['wet dep chemical weight field'], 'mappings': []}, 'wetDepChemicalWeightLab': {'slot_uri': 'neon:wetDepChemicalWeightLab', 'description': 'Weight of the chemical constituent wet deposition sample as measured by the contracting laboratory\t', 'range': 'double', 'aliases': ['wet dep chemical weight lab'], 'mappings': []}, 'rawOxygen18': {'slot_uri': 'neon:rawOxygen18', 'description': 'Atmospheric oxygen 18 (isotope) as measured via wet deposition\t', 'range': 'double', 'aliases': ['raw oxygen18'], 'mappings': []}, 'rawDeuterium': {'slot_uri': 'neon:rawDeuterium', 'description': 'Atmospheric deuterium as measured via wet deposition', 'range': 'double', 'aliases': ['raw deuterium'], 'mappings': []}, 'wetDepIsotopeWeightField': {'slot_uri': 'neon:wetDepIsotopeWeightField', 'description': 'Weight of the chemical constituent wet deposition sample as measured by NEON field technicians\t', 'range': 'double', 'aliases': ['wet dep isotope weight field'], 'mappings': []}, 'wetDepIsotopeWeightLab': {'slot_uri': 'neon:wetDepIsotopeWeightLab', 'description': 'Weight of the isotopic wet deposition sample as measured by the contracting laboratory\t', 'range': 'double', 'aliases': ['wet dep isotope weight lab'], 'mappings': []}, 'corPresTempQF': {'slot_uri': 'neon:corPresTempQF', 'description': 'Corrected pressure quality flag that assesses whether temperature measurements for correcting pressure were available (0=yes, 1=no)', 'range': 'string', 'aliases': ['cor pres temp q f'], 'mappings': []}, 'corPresDewPtQF': {'slot_uri': 'neon:corPresDewPtQF', 'description': 'Corrected pressure quality flag that assesses whether dew point measurements for correcting pressure were available (0=yes, 1=no)', 'range': 'string', 'aliases': ['cor pres dew pt q f'], 'mappings': []}, 'surfacePresTempQF': {'slot_uri': 'neon:surfacePresTempQF', 'description': 'Surface pressure (soil plot surface for terrestrial and water surface for aquatic sites) quality flag that assesses whether temperature measurements for correcting pressure were available (0=yes, 1=no)', 'range': 'double', 'aliases': ['surface pres temp q f'], 'mappings': []}, 'surfacePresDewPtQF': {'slot_uri': 'neon:surfacePresDewPtQF', 'description': 'Surface pressure (soil plot surface for terrestrial and water surface for aquatic sites) quality flag that assesses whether dew point measurements for correcting pressure were available (0=yes, 1=no)', 'range': 'double', 'aliases': ['surface pres dew pt q f'], 'mappings': []}, 'larvalTicksAttached': {'slot_uri': 'neon:larvalTicksAttached', 'description': 'Indicates whether larval ticks are observed on the captured individual', 'range': 'string', 'aliases': ['larval ticks attached'], 'mappings': []}, 'nymphalTicksAttached': {'slot_uri': 'neon:nymphalTicksAttached', 'description': 'Indicates whether nymphal ticks are observed on the captured individual', 'range': 'string', 'aliases': ['nymphal ticks attached'], 'mappings': []}, 'adultTicksAttached': {'slot_uri': 'neon:adultTicksAttached', 'description': 'Indicates whether adult ticks are observed on the captured individual', 'range': 'string', 'aliases': ['adult ticks attached'], 'mappings': []}, 'individualNid': {'slot_uri': 'neon:individualNid', 'description': 'NEON unique identifier for an individual', 'range': 'string', 'aliases': ['individual nid'], 'mappings': []}, 'setDateTime': {'slot_uri': 'neon:setDateTime', 'description': 'Date and time of the trap setting event', 'range': 'time', 'aliases': ['set date time'], 'mappings': []}, 'collectDateTime': {'slot_uri': 'neon:collectDateTime', 'description': 'Date and time of the collection event', 'range': 'time', 'aliases': ['collect date time'], 'mappings': []}, 'sampleTiming': {'slot_uri': 'neon:sampleTiming', 'description': 'Timing of the sampling event with regard to the field season', 'range': 'string', 'aliases': ['sample timing'], 'mappings': []}, 'numVialsSampleID': {'slot_uri': 'neon:numVialsSampleID', 'description': 'Number of vials associated with a sampleID', 'range': 'string', 'aliases': ['num vials sample i d'], 'mappings': []}, 'fanStatus': {'slot_uri': 'neon:fanStatus', 'description': 'Indicator of the status of the trap fan at the time of sample collection', 'range': 'string', 'aliases': ['fan status'], 'mappings': []}, 'catchCupStatus': {'slot_uri': 'neon:catchCupStatus', 'description': 'Indicator of the status of the trap catch cup at the time of sample collection', 'range': 'string', 'aliases': ['catch cup status'], 'mappings': []}, 'dryIceStatus': {'slot_uri': 'neon:dryIceStatus', 'description': 'Dry ice status at the time of sample collection', 'range': 'string', 'aliases': ['dry ice status'], 'mappings': []}, 'sampleCompromised': {'slot_uri': 'neon:sampleCompromised', 'description': "Indicator of compromised sample integrity; 'other' requires further specification in remarks", 'range': 'string', 'aliases': ['sample compromised'], 'mappings': []}, 'receivedDate': {'slot_uri': 'neon:receivedDate', 'description': 'Date a sample was received', 'range': 'time', 'aliases': ['received date'], 'mappings': []}, 'sortDate': {'slot_uri': 'neon:sortDate', 'description': 'Date sample was sorted', 'range': 'time', 'aliases': ['sort date'], 'mappings': []}, 'totalWeight': {'slot_uri': 'neon:totalWeight', 'description': 'Weight of entire sample', 'range': 'double', 'aliases': ['total weight'], 'mappings': []}, 'subsampleWeight': {'slot_uri': 'neon:subsampleWeight', 'description': 'Weight of subsample', 'range': 'double', 'aliases': ['subsample weight'], 'mappings': []}, 'bycatchWeight': {'slot_uri': 'neon:bycatchWeight', 'description': 'Weight of bycatch', 'range': 'double', 'aliases': ['bycatch weight'], 'mappings': []}, 'sortedBy': {'slot_uri': 'neon:sortedBy', 'description': 'An identifier for the technician who sorted the sample', 'range': 'string', 'aliases': ['sorted by'], 'mappings': []}, 'testingID': {'slot_uri': 'neon:testingID', 'description': 'Identifier for the group of specimens for testing', 'range': 'string', 'aliases': ['testing i d'], 'mappings': []}, 'individualIDList': {'slot_uri': 'neon:individualIDList', 'description': 'List of individualIDs', 'range': 'string', 'aliases': ['individual i d list'], 'mappings': []}, 'identificationRemarks': {'slot_uri': 'neon:identificationRemarks', 'description': 'Comments or notes about the identification', 'range': 'string', 'aliases': ['identification remarks'], 'mappings': []}, 'testingVialID': {'slot_uri': 'neon:testingVialID', 'description': 'Identifier for the vial containing specimens for testing (e.g., pathogen testing, chemical analysis, etc.)', 'range': 'string', 'aliases': ['testing vial i d'], 'mappings': ['dwc:materialSampleID']}, 'poolSize': {'slot_uri': 'neon:poolSize', 'description': 'Number of individuals in the pathogen testing pool', 'range': 'string', 'aliases': ['pool size'], 'mappings': []}, 'archiveVialIDList': {'slot_uri': 'neon:archiveVialIDList', 'description': 'Identifier(s) for the vial(s) containing specimens for archive', 'range': 'string', 'aliases': ['archive vial i d list'], 'mappings': []}, 'archivedCount': {'slot_uri': 'neon:archivedCount', 'description': 'Number of individuals in the archive vial', 'range': 'string', 'aliases': ['archived count'], 'mappings': []}, 'archiveMedium': {'slot_uri': 'neon:archiveMedium', 'description': 'Method of preservation for the sample or specimen', 'range': 'string', 'aliases': ['archive medium'], 'mappings': []}, 'deprecatedVialID': {'slot_uri': 'neon:deprecatedVialID', 'description': 'Identifier on vial label, if different from standard ID', 'range': 'string', 'aliases': ['deprecated vial i d'], 'mappings': ['dwc:eventID']}, 'testedDate': {'slot_uri': 'neon:testedDate', 'description': 'Date test was conducted', 'range': 'time', 'aliases': ['tested date'], 'mappings': []}, 'senderID': {'slot_uri': 'neon:senderID', 'description': 'Identifier for the facility or technician sending the sample or specimen', 'range': 'string', 'aliases': ['sender i d'], 'mappings': []}, 'testProtocolVersion': {'slot_uri': 'neon:testProtocolVersion', 'description': 'The protocol version used to test the sample', 'range': 'string', 'aliases': ['test protocol version'], 'mappings': []}, 'testMethod': {'slot_uri': 'neon:testMethod', 'description': 'Method used to conduct test', 'range': 'string', 'aliases': ['test method'], 'mappings': []}, 'testResult': {'slot_uri': 'neon:testResult', 'description': 'Result of the test', 'range': 'string', 'aliases': ['test result'], 'mappings': []}, 'testPathogenName': {'slot_uri': 'neon:testPathogenName', 'description': 'The name of the pathogen', 'range': 'string', 'aliases': ['test pathogen name'], 'mappings': []}, 'testNumber': {'slot_uri': 'neon:testNumber', 'description': 'Test number in a sequence of tests', 'range': 'string', 'aliases': ['test number'], 'mappings': []}, 'finalResult': {'slot_uri': 'neon:finalResult', 'description': 'Whether or not this is the conclusive test result for this sample', 'range': 'string', 'aliases': ['final result'], 'mappings': []}, 'locus': {'slot_uri': 'neon:locus', 'description': 'Name of genetic marker sequenced', 'range': 'string', 'aliases': ['locus'], 'mappings': []}, 'percentIdentity': {'slot_uri': 'neon:percentIdentity', 'description': 'Percent match between sample and reference sequence', 'range': 'string', 'aliases': ['percent identity'], 'mappings': []}, 'sequenceDatabase': {'slot_uri': 'neon:sequenceDatabase', 'description': 'Name of database where sequence is stored', 'range': 'string', 'aliases': ['sequence database'], 'mappings': []}, 'sequenceDatabaseID': {'slot_uri': 'neon:sequenceDatabaseID', 'description': 'Identifier for sample in sequence database', 'range': 'string', 'aliases': ['sequence database i d'], 'mappings': []}, 'extractDepleted': {'slot_uri': 'neon:extractDepleted', 'description': 'Whether or not sample extract is depleted', 'range': 'string', 'aliases': ['extract depleted'], 'mappings': []}, 'testedBy': {'slot_uri': 'neon:testedBy', 'description': 'An identifier for the technician who tested the sample', 'range': 'string', 'aliases': ['tested by'], 'mappings': []}, 'pdaDecimalLatitude': {'slot_uri': 'neon:pdaDecimalLatitude', 'description': 'The geographic latitude (in decimal degrees, WGS84) of the geographic center of the reference area as recorded by the PDA in the field', 'range': 'double', 'aliases': ['pda decimal latitude'], 'mappings': []}, 'pdaDecimalLongitude': {'slot_uri': 'neon:pdaDecimalLongitude', 'description': 'The geographic longitude (in decimal degrees, WGS84) of the geographic center of the reference area as recorded by the PDA in the field', 'range': 'double', 'aliases': ['pda decimal longitude'], 'mappings': []}, 'pdaAccuracy': {'slot_uri': 'neon:pdaAccuracy', 'description': 'The 68% confidence (1 standard deviation) horizontal distance (in meters) from the given pdaDecimalLatitude and pdaDecimalLongitude. If this location does not have an accuracy, then 0.0 is returned.', 'range': 'double', 'aliases': ['pda accuracy'], 'mappings': []}, 'pdaElevation': {'slot_uri': 'neon:pdaElevation', 'description': 'Elevation (in meters) above sea level as recorded by the PDA in the field', 'range': 'double', 'aliases': ['pda elevation'], 'mappings': []}, 'nightOrDay': {'slot_uri': 'neon:nightOrDay', 'description': 'Whether sampling occurred primarily during the day or at night', 'range': 'string', 'aliases': ['night or day'], 'mappings': []}, 'trapHours': {'slot_uri': 'neon:trapHours', 'description': 'Number of hours between trap setting and collecting events', 'range': 'double', 'aliases': ['trap hours'], 'mappings': []}, 'trapRecordedBy': {'slot_uri': 'neon:trapRecordedBy', 'description': 'An identifier for the technician who recorded the data', 'range': 'string', 'aliases': ['trap recorded by'], 'mappings': []}, 'trappingRemarks': {'slot_uri': 'neon:trappingRemarks', 'description': 'Remarks from trapping', 'range': 'string', 'aliases': ['trapping remarks'], 'mappings': []}, 'trapCompromisedQF': {'slot_uri': 'neon:trapCompromisedQF', 'description': 'Indicator of the status of the trap at the time of sample collection', 'range': 'integer', 'aliases': ['trap compromised q f'], 'mappings': []}, 'sampleCompromisedAtTrapping': {'slot_uri': 'neon:sampleCompromisedAtTrapping', 'description': 'Indicator of compromised sample integrity at the trapping stage', 'range': 'string', 'aliases': ['sample compromised at trapping'], 'mappings': []}, 'sampleLostQF': {'slot_uri': 'neon:sampleLostQF', 'description': 'Indicator that sample has been lost', 'range': 'integer', 'aliases': ['sample lost q f'], 'mappings': []}, 'duplicatesInTrappingQF': {'slot_uri': 'neon:duplicatesInTrappingQF', 'description': 'Quality Flag for duplicate record generated during trapping', 'range': 'integer', 'aliases': ['duplicates in trapping q f'], 'mappings': []}, 'estimatedAbundance': {'slot_uri': 'neon:estimatedAbundance', 'description': 'Estimated number of individuals per trap', 'range': 'string', 'aliases': ['estimated abundance'], 'mappings': []}, 'percentCounted': {'slot_uri': 'neon:percentCounted', 'description': 'Percent of total sample counted', 'range': 'string', 'aliases': ['percent counted'], 'mappings': []}, 'TFPrecipBucketTips': {'slot_uri': 'neon:TFPrecipBucketTips', 'description': 'Indicator of throughfall precipitation bucket tips', 'range': 'integer', 'aliases': ['t f precip bucket tips'], 'mappings': []}, 'strainGauge1Stability': {'slot_uri': 'neon:strainGauge1Stability', 'description': 'Stability flag indicating if strain gauge 1 in the primary precipitation sensor is reporting a stable frequency (1 = stable, 0 = unstable, -1 = sensor failure)', 'range': 'integer', 'aliases': ['strain gauge1 stability'], 'mappings': []}, 'strainGauge1Temp': {'slot_uri': 'neon:strainGauge1Temp', 'description': 'Strain gauge 1 transducer temperature in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge1 temp'], 'mappings': []}, 'strainGauge1Amplitude': {'slot_uri': 'neon:strainGauge1Amplitude', 'description': 'Strain gauge 1 signal amplitude in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge1 amplitude'], 'mappings': []}, 'strainGauge1FreqRaw': {'slot_uri': 'neon:strainGauge1FreqRaw', 'description': 'The raw frequency reported by strain gauge 1 in the primary precipitation sensor (i.e., uncompensated for temperature)', 'range': 'double', 'aliases': ['strain gauge1 freq raw'], 'mappings': []}, 'strainGauge1Weight': {'slot_uri': 'neon:strainGauge1Weight', 'description': 'The weight reported by strain gauge 1 in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge1 weight'], 'mappings': []}, 'strainGaugeFailureFlag': {'slot_uri': 'neon:strainGaugeFailureFlag', 'description': 'A flag indicating a strain gauge has failed (1 = strain gauge failed, 0 = pass)', 'range': 'integer', 'aliases': ['strain gauge failure flag'], 'mappings': []}, 'totalGaugeWeight': {'slot_uri': 'neon:totalGaugeWeight', 'description': 'The combined weight from the 3 strain gauges in the primary precipitation sensor', 'range': 'double', 'aliases': ['total gauge weight'], 'mappings': []}, 'totalPrecipDepth': {'slot_uri': 'neon:totalPrecipDepth', 'description': 'The total depth reported by the internal calculations of the 3 strain gauges in the primary precipitation sensor', 'range': 'double', 'aliases': ['total precip depth'], 'mappings': []}, 'inletTemp': {'slot_uri': 'neon:inletTemp', 'description': 'The inlet orifice temperature, which is monitored to control orifice heater operation for the primary precipitation sensor', 'range': 'double', 'aliases': ['inlet temp'], 'mappings': []}, 'internalTemp': {'slot_uri': 'neon:internalTemp', 'description': 'Ambient temperature inside the sensor, which is monitored to control orifice heater operation for the primary precipitation sensor', 'range': 'double', 'aliases': ['internal temp'], 'mappings': []}, 'precipAccumulationRate': {'slot_uri': 'neon:precipAccumulationRate', 'description': 'Accumulation of precipitation calculated by internal calculations of the 3 strain gauges in the primary precipitation sensor', 'range': 'double', 'aliases': ['precip accumulation rate'], 'mappings': []}, 'fieldCalibrationFlag': {'slot_uri': 'neon:fieldCalibrationFlag', 'description': 'Flag indicating that field calibration is being performed on the sensor (1 = field calibration is being performed, 0 = normal operation)', 'range': 'integer', 'aliases': ['field calibration flag'], 'mappings': []}, 'sortingLaboratoryName': {'slot_uri': 'neon:sortingLaboratoryName', 'description': 'Name of the laboratory or facility that is sorting the sample', 'range': 'string', 'aliases': ['sorting laboratory name'], 'mappings': []}, 'idLaboratoryName': {'slot_uri': 'neon:idLaboratoryName', 'description': 'Name of the laboratory or facility that is identifying the sample', 'range': 'string', 'aliases': ['id laboratory name'], 'mappings': []}, 'sortingRemarks': {'slot_uri': 'neon:sortingRemarks', 'description': 'Remarks from sorting', 'range': 'string', 'aliases': ['sorting remarks'], 'mappings': []}, 'identificationLabRemarks': {'slot_uri': 'neon:identificationLabRemarks', 'description': 'Remarks other than identification notes', 'range': 'string', 'aliases': ['identification lab remarks'], 'mappings': []}, 'sampleCompromisedAtSorting': {'slot_uri': 'neon:sampleCompromisedAtSorting', 'description': 'Indicator of compromised sample integrity at the sorting stage', 'range': 'string', 'aliases': ['sample compromised at sorting'], 'mappings': []}, 'sampleCompromisedAtIDLab': {'slot_uri': 'neon:sampleCompromisedAtIDLab', 'description': 'Indicator of compromised sample integrity at the identification stage', 'range': 'string', 'aliases': ['sample compromised at i d lab'], 'mappings': []}, 'taxonRangeQF': {'slot_uri': 'neon:taxonRangeQF', 'description': 'Quality Flag indicating taxon out of typical range', 'range': 'integer', 'aliases': ['taxon range q f'], 'mappings': []}, 'duplicatesInSortingQF': {'slot_uri': 'neon:duplicatesInSortingQF', 'description': 'Quality Flag for duplicate record generated during sorting', 'range': 'integer', 'aliases': ['duplicates in sorting q f'], 'mappings': []}, 'duplicatesInIdentificationQF': {'slot_uri': 'neon:duplicatesInIdentificationQF', 'description': 'Quality Flag for duplicate record generated during identification', 'range': 'integer', 'aliases': ['duplicates in identification q f'], 'mappings': []}, 'startCollectDate': {'slot_uri': 'neon:startCollectDate', 'description': 'Earliest known collection date for this sample', 'range': 'time', 'aliases': ['start collect date'], 'mappings': []}, 'endCollectDate': {'slot_uri': 'neon:endCollectDate', 'description': 'Latest known collection date for this sample', 'range': 'time', 'aliases': ['end collect date'], 'mappings': []}, 'duplicatesInArchivePoolingQF': {'slot_uri': 'neon:duplicatesInArchivePoolingQF', 'description': 'Quality Flag for duplicate record generated during archive pooling', 'range': 'integer', 'aliases': ['duplicates in archive pooling q f'], 'mappings': []}, 'nonStandardPoolQF': {'slot_uri': 'neon:nonStandardPoolQF', 'description': 'Quality flag for pools of individuals aggregated by non-standard methods', 'range': 'integer', 'aliases': ['non standard pool q f'], 'mappings': []}, 'duplicatesInPathogenPoolingQF': {'slot_uri': 'neon:duplicatesInPathogenPoolingQF', 'description': 'Quality Flag for duplicate record in pathogen pooling', 'range': 'integer', 'aliases': ['duplicates in pathogen pooling q f'], 'mappings': []}, 'duplicatesInPathogenResultsQF': {'slot_uri': 'neon:duplicatesInPathogenResultsQF', 'description': 'Quality Flag for duplicate record in pathogen results', 'range': 'integer', 'aliases': ['duplicates in pathogen results q f'], 'mappings': []}, 'sampleCompromisedAtTesting': {'slot_uri': 'neon:sampleCompromisedAtTesting', 'description': "Indicator of compromised sample integrity at testing; 'other' requires further specification in remarks", 'range': 'string', 'aliases': ['sample compromised at testing'], 'mappings': []}, 'rawVSWC': {'slot_uri': 'neon:rawVSWC', 'description': 'Raw measurement of volumetric soil water content', 'range': 'double', 'aliases': ['raw v s w c'], 'mappings': []}, 'rawVSIC': {'slot_uri': 'neon:rawVSIC', 'description': 'Raw measurement of volumetric soil ion content', 'range': 'double', 'aliases': ['raw v s i c'], 'mappings': []}, 'veloXaxs': {'slot_uri': 'neon:veloXaxs', 'description': 'Linear velocity (velo) of wind in 3-D sonic anemometer along-axis direction (Xaxs), positive backward', 'range': 'double', 'aliases': ['velo xaxs'], 'mappings': []}, 'veloYaxs': {'slot_uri': 'neon:veloYaxs', 'description': 'Linear velocity (velo) of wind in 3-D sonic anemometer cross-axis direction (Yaxs), positive right', 'range': 'double', 'aliases': ['velo yaxs'], 'mappings': []}, 'veloZaxs': {'slot_uri': 'neon:veloZaxs', 'description': 'Linear velocity (velo) of wind in 3-D sonic anemometer vertical-axis direction (Zaxs), positive upwards', 'range': 'double', 'aliases': ['velo zaxs'], 'mappings': []}, 'idx': {'slot_uri': 'neon:idx', 'description': 'Index value (idx)', 'range': 'integer', 'aliases': ['idx'], 'mappings': []}, 'diag': {'slot_uri': 'neon:diag', 'description': 'Diagnostic value (diag), output as a 32 bit integer Bit assignment according to NEONDOC000807 (L0 prime processing ATBD)', 'range': 'integer', 'aliases': ['diag'], 'mappings': []}, 'tempTranTop': {'slot_uri': 'neon:tempTranTop', 'description': 'Temperature (temp) of the transducer (Tran) top zone (Top) measured by platinum resistance thermometers (heated 3-D sonic anemometer only)', 'range': 'double', 'aliases': ['temp tran top'], 'mappings': []}, 'tempArmTop': {'slot_uri': 'neon:tempArmTop', 'description': 'Temperature (temp) of the arm (Arm) top zone (Top) measured by platinum resistance thermometers (heated 3-D sonic anemometer only)', 'range': 'double', 'aliases': ['temp arm top'], 'mappings': []}, 'tempArmBot': {'slot_uri': 'neon:tempArmBot', 'description': 'Temperature (temp) of the arm (Arm) bottom (Bot) zone measured by platinum resistance thermometers (heated 3-D sonic anemometer only)', 'range': 'double', 'aliases': ['temp arm bot'], 'mappings': []}, 'tempTranBot': {'slot_uri': 'neon:tempTranBot', 'description': 'Temperature (temp) of the transducer (Tran) bottom zone (Bot) measured by platinum resistance thermometers (heated 3-D sonic anemometer only)', 'range': 'double', 'aliases': ['temp tran bot'], 'mappings': []}, 'tempBloc': {'slot_uri': 'neon:tempBloc', 'description': 'Temperature (temp) of the instrument block (Bloc)', 'range': 'double', 'aliases': ['temp bloc'], 'mappings': []}, 'heatingPower': {'slot_uri': 'neon:heatingPower', 'description': 'Heating power (current measurement)', 'range': 'double', 'aliases': ['heating power'], 'mappings': []}, 'globalTimeSourceFlag': {'slot_uri': 'neon:globalTimeSourceFlag', 'description': 'Network Time Protocol (NTP) flag for loss of global time source', 'range': 'integer', 'aliases': ['global time source flag'], 'mappings': []}, 'particulateMass1.0': {'slot_uri': 'neon:particulateMass1.0', 'description': 'Near real-time measurements of particulate mass 1.0 in the atmosphere using a optical sensor', 'range': 'double', 'aliases': ['particulate mass1.0'], 'mappings': []}, 'particulateMass2.5': {'slot_uri': 'neon:particulateMass2.5', 'description': 'Near real-time measurements of particulate mass 2.5 in the atmosphere using a optical sensor', 'range': 'double', 'aliases': ['particulate mass2.5'], 'mappings': []}, 'particulateMass4.0': {'slot_uri': 'neon:particulateMass4.0', 'description': 'Near real-time measurements of particulate mass 4.0 in the atmosphere using a optical sensor', 'range': 'double', 'aliases': ['particulate mass4.0'], 'mappings': []}, 'particulateMass10': {'slot_uri': 'neon:particulateMass10', 'description': 'Near real-time measurements of particulate mass 10 in the atmosphere using a optical sensor', 'range': 'double', 'aliases': ['particulate mass10'], 'mappings': []}, 'particulateMass15': {'slot_uri': 'neon:particulateMass15', 'description': 'Near real-time measurements of particulate mass 15 in the atmosphere using a optical sensor', 'range': 'double', 'aliases': ['particulate mass15'], 'mappings': []}, 'pressureFM': {'slot_uri': 'neon:pressureFM', 'description': 'Absolute pressure from flow meter', 'range': 'double', 'aliases': ['pressure f m'], 'mappings': []}, 'tempFM': {'slot_uri': 'neon:tempFM', 'description': 'Temperature output from flow meter', 'range': 'double', 'aliases': ['temp f m'], 'mappings': []}, 'flowRateVolFM': {'slot_uri': 'neon:flowRateVolFM', 'description': 'Volumetric flow rate from flow meter at ambient conditions', 'range': 'double', 'aliases': ['flow rate vol f m'], 'mappings': []}, 'flowRateMassFM': {'slot_uri': 'neon:flowRateMassFM', 'description': 'Mass flow rate from flow meter at NIST standard conditions (293.15 K, 101.325 kPa)', 'range': 'double', 'aliases': ['flow rate mass f m'], 'mappings': []}, 'presAtm': {'slot_uri': 'neon:presAtm', 'description': 'Pressure (pres), measured as atmospheric (Atm) pressure, synonymous with absolute pressure or total pressure (at sea level the standard atmospheric pressure is 101.325 kPa)', 'range': 'double', 'aliases': ['pres atm'], 'mappings': []}, 'temp': {'slot_uri': 'neon:temp', 'description': 'Temperature (temp)', 'range': 'double', 'aliases': ['temp'], 'mappings': []}, 'frt': {'slot_uri': 'neon:frt', 'description': 'Flow rate (frt) at site temperature and pressure, synonymous with volumetric flow rate', 'range': 'double', 'aliases': ['frt'], 'mappings': []}, 'frt0': {'slot_uri': 'neon:frt0', 'description': 'Flow rate (frt) at National Institute of Standards and Technology standard conditions (0, which are  293.15 K, 101.325 kPa), synonymous with mass flow rate', 'range': 'double', 'aliases': ['frt0'], 'mappings': []}, 'frtSet0': {'slot_uri': 'neon:frtSet0', 'description': 'Flow rate (frt) set point (Set) at National Institute of Standards and Technology standard conditions (0, which are 293.15 K, 101.325 kPa), synonymous with mass flow rate set point', 'range': 'double', 'aliases': ['frt set0'], 'mappings': []}, 'SHFMean': {'slot_uri': 'neon:SHFMean', 'description': 'Arithmetic mean of soil heat flux', 'range': 'double', 'aliases': ['s h f mean'], 'mappings': []}, 'SHFMinimum': {'slot_uri': 'neon:SHFMinimum', 'description': 'Minimum soil heat flux', 'range': 'double', 'aliases': ['s h f minimum'], 'mappings': []}, 'SHFMaximum': {'slot_uri': 'neon:SHFMaximum', 'description': 'Maximum soil heat flux', 'range': 'double', 'aliases': ['s h f maximum'], 'mappings': []}, 'SHFVariance': {'slot_uri': 'neon:SHFVariance', 'description': 'Variance in soil heat flux', 'range': 'double', 'aliases': ['s h f variance'], 'mappings': []}, 'SHFNumPts': {'slot_uri': 'neon:SHFNumPts', 'description': 'Number of points used to calculate the arithmetic mean of soil heat flux', 'range': 'double', 'aliases': ['s h f num pts'], 'mappings': []}, 'SHFExpUncert': {'slot_uri': 'neon:SHFExpUncert', 'description': 'Expanded uncertainty for soil heat flux', 'range': 'double', 'aliases': ['s h f exp uncert'], 'mappings': []}, 'SHFStdErMean': {'slot_uri': 'neon:SHFStdErMean', 'description': 'Standard error of the mean for soil heat flux', 'range': 'double', 'aliases': ['s h f std er mean'], 'mappings': []}, 'SHFCalHeaterQF': {'slot_uri': 'neon:SHFCalHeaterQF', 'description': 'Quality flag indicating whether the calibration heater turned on correctly as described in the sensor specific algorithm theoretical basis document  (ATBD) (1=calibration heater failed to turn on, 0=calibration heater turned on correctly, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['s h f cal heater q f'], 'mappings': []}, 'SHFCalPeriodFlag': {'slot_uri': 'neon:SHFCalPeriodFlag', 'description': 'Calibration period flag indicating when the sensor is operated under calibration period as described in the sensor specific algorithm theoretical basis document  (ATBD), (1=calibration period, 0=normal operating condition)', 'range': 'double', 'aliases': ['s h f cal period flag'], 'mappings': []}, 'SHFInSituCorFactor': {'slot_uri': 'neon:SHFInSituCorFactor', 'description': 'In situ correction factor of soil heat flux', 'range': 'double', 'aliases': ['s h f in situ cor factor'], 'mappings': []}, 'SHFInSituCorQF': {'slot_uri': 'neon:SHFInSituCorQF', 'description': 'Quality flag indicating whether an error occur during the self-calibration process to determine the in situ correction factor as described in the sensor specific algorithm theoretical basis document  (ATBD) (1=error is detected, 0=no error, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['s h f in situ cor q f'], 'mappings': []}, 'SHFCalHeaterOnMetric': {'slot_uri': 'neon:SHFCalHeaterOnMetric', 'description': 'A metric that summarizes when the calibration heater was on over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f cal heater on metric'], 'mappings': []}, 'SHFCalHeaterOffMetric': {'slot_uri': 'neon:SHFCalHeaterOffMetric', 'description': 'A metric that summarizes when the calibration heater was off over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f cal heater off metric'], 'mappings': []}, 'SHFCalHeaterFailQM': {'slot_uri': 'neon:SHFCalHeaterFailQM', 'description': 'Quality metric that summarizes when the calibration heater was on over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f cal heater fail q m'], 'mappings': []}, 'SHFCalHeaterPassQM': {'slot_uri': 'neon:SHFCalHeaterPassQM', 'description': 'Quality metric that summarizes when the calibration heater was off over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f cal heater pass q m'], 'mappings': []}, 'SHFCalHeaterNAQM': {'slot_uri': 'neon:SHFCalHeaterNAQM', 'description': 'Quality metric that summarizes when the calibration heater status was unknown over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f cal heater n a q m'], 'mappings': []}, 'SHFCalPeriodOnMetric': {'slot_uri': 'neon:SHFCalPeriodOnMetric', 'description': 'A metric that summarizes when the sensor is operated during a calibration period over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f cal period on metric'], 'mappings': []}, 'SHFCalPeriodOffMetric': {'slot_uri': 'neon:SHFCalPeriodOffMetric', 'description': 'A metric that summarizes when the sensor is operated under normal conditions over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f cal period off metric'], 'mappings': []}, 'SHFInSituCorFailQM': {'slot_uri': 'neon:SHFInSituCorFailQM', 'description': 'Quality metric that summarizes when an error occur during the self-calibration process to determine the in situ correction factor over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f in situ cor fail q m'], 'mappings': []}, 'SHFInSituCorPassQM': {'slot_uri': 'neon:SHFInSituCorPassQM', 'description': 'Quality metric that summarizes when no error occur during the self-calibration process to determine the in situ correction factor over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f in situ cor pass q m'], 'mappings': []}, 'SHFInSituCorNAQM': {'slot_uri': 'neon:SHFInSituCorNAQM', 'description': 'Quality metric that summarizes when  the self-calibration process to determine the in situ correction factor was unknown over the averaging period, as a percent', 'range': 'double', 'aliases': ['s h f in situ cor n a q m'], 'mappings': []}, 'archiveFacilityID': {'slot_uri': 'neon:archiveFacilityID', 'description': 'Identifier at archive facility', 'range': 'string', 'aliases': ['archive facility i d'], 'mappings': []}, 'gWatTempRangeFailQM': {'slot_uri': 'neon:gWatTempRangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp range fail q m'], 'mappings': []}, 'gWatTempRangePassQM': {'slot_uri': 'neon:gWatTempRangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp range pass q m'], 'mappings': []}, 'gWatTempRangeNAQM': {'slot_uri': 'neon:gWatTempRangeNAQM', 'description': 'Quality metric that summarizes when the range test for groundwater temperature could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp range n a q m'], 'mappings': []}, 'gWatTempPersistenceFailQM': {'slot_uri': 'neon:gWatTempPersistenceFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the persistence test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp persistence fail q m'], 'mappings': []}, 'gWatTempPersistencePassQM': {'slot_uri': 'neon:gWatTempPersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp persistence pass q m'], 'mappings': []}, 'gWatTempPersistenceNAQM': {'slot_uri': 'neon:gWatTempPersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for groundwater temperature could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp persistence n a q m'], 'mappings': []}, 'gWatTempStepFailQM': {'slot_uri': 'neon:gWatTempStepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp step fail q m'], 'mappings': []}, 'gWatTempStepPassQM': {'slot_uri': 'neon:gWatTempStepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp step pass q m'], 'mappings': []}, 'gWatTempStepNAQM': {'slot_uri': 'neon:gWatTempStepNAQM', 'description': 'Quality metric that summarizes when the step test for groundwater temperature could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp step n a q m'], 'mappings': []}, 'gWatTempNullFailQM': {'slot_uri': 'neon:gWatTempNullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp null fail q m'], 'mappings': []}, 'gWatTempNullPassQM': {'slot_uri': 'neon:gWatTempNullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp null pass q m'], 'mappings': []}, 'gWatTempNullNAQM': {'slot_uri': 'neon:gWatTempNullNAQM', 'description': 'Quality metric that summarizes when the null test for groundwater temperature could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp null n a q m'], 'mappings': []}, 'gWatTempGapFailQM': {'slot_uri': 'neon:gWatTempGapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp gap fail q m'], 'mappings': []}, 'gWatTempGapPassQM': {'slot_uri': 'neon:gWatTempGapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp gap pass q m'], 'mappings': []}, 'gWatTempGapNAQM': {'slot_uri': 'neon:gWatTempGapNAQM', 'description': 'Quality metric that summarizes when the gap test for groundwater temperature could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp gap n a q m'], 'mappings': []}, 'gWatTempSpikeFailQM': {'slot_uri': 'neon:gWatTempSpikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp spike fail q m'], 'mappings': []}, 'gWatTempSpikePassQM': {'slot_uri': 'neon:gWatTempSpikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp spike pass q m'], 'mappings': []}, 'gWatTempSpikeNAQM': {'slot_uri': 'neon:gWatTempSpikeNAQM', 'description': 'Quality metric that summarizes when the spike test for groundwater temperature could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp spike n a q m'], 'mappings': []}, 'gWatTempConsistencyFailQM': {'slot_uri': 'neon:gWatTempConsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp consistency fail q m'], 'mappings': []}, 'gWatTempConsistencyPassQM': {'slot_uri': 'neon:gWatTempConsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for groundwater temperature over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp consistency pass q m'], 'mappings': []}, 'gWatTempConsistencyNAQM': {'slot_uri': 'neon:gWatTempConsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for groundwater temperature could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat temp consistency n a q m'], 'mappings': []}, 'gWatTempAlphaQM': {'slot_uri': 'neon:gWatTempAlphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for groundwater temperature over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['g wat temp alpha q m'], 'mappings': []}, 'localSetDateTime': {'slot_uri': 'neon:localSetDateTime', 'description': 'Date and time of the trap setting event (local time zone at trap location)', 'range': 'string', 'aliases': ['local set date time'], 'mappings': []}, 'localCollectDateTime': {'slot_uri': 'neon:localCollectDateTime', 'description': 'Date and time of the collection event (local time zone at trap location)', 'range': 'string', 'aliases': ['local collect date time'], 'mappings': []}, 'strainGauge1FreqComp': {'slot_uri': 'neon:strainGauge1FreqComp', 'description': 'The temperature compensated frequency reported by strain gauge 1 in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge1 freq comp'], 'mappings': []}, 'orificeHeaterFlag': {'slot_uri': 'neon:orificeHeaterFlag', 'description': 'Heater flag indicating the number of orifice heaters that were operational for a measurement period, (i.e., 000 = off, 100 = one on, 110 = two on, and 111 = all three on)', 'range': 'integer', 'aliases': ['orifice heater flag'], 'mappings': []}, 'gWatTempBetaQM': {'slot_uri': 'neon:gWatTempBetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for groundwater temperature over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['g wat temp beta q m'], 'mappings': []}, 'gWatTempFinalQF': {'slot_uri': 'neon:gWatTempFinalQF', 'description': 'Quality flag indicating whether the groundwater temperature data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['g wat temp final q f'], 'mappings': []}, 'gWatElevRangeFailQM': {'slot_uri': 'neon:gWatElevRangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev range fail q m'], 'mappings': []}, 'gWatElevRangePassQM': {'slot_uri': 'neon:gWatElevRangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev range pass q m'], 'mappings': []}, 'gWatElevRangeNAQM': {'slot_uri': 'neon:gWatElevRangeNAQM', 'description': 'Quality metric that summarizes when the range test for groundwater elevation could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev range n a q m'], 'mappings': []}, 'gWatElevPersistenceFailQM': {'slot_uri': 'neon:gWatElevPersistenceFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the persistence test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev persistence fail q m'], 'mappings': []}, 'gWatElevPersistencePassQM': {'slot_uri': 'neon:gWatElevPersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev persistence pass q m'], 'mappings': []}, 'gWatElevPersistenceNAQM': {'slot_uri': 'neon:gWatElevPersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for groundwater elevation could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev persistence n a q m'], 'mappings': []}, 'gWatElevStepFailQM': {'slot_uri': 'neon:gWatElevStepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev step fail q m'], 'mappings': []}, 'gWatElevStepPassQM': {'slot_uri': 'neon:gWatElevStepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev step pass q m'], 'mappings': []}, 'gWatElevStepNAQM': {'slot_uri': 'neon:gWatElevStepNAQM', 'description': 'Quality metric that summarizes when the step test for groundwater elevation could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev step n a q m'], 'mappings': []}, 'gWatElevNullFailQM': {'slot_uri': 'neon:gWatElevNullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev null fail q m'], 'mappings': []}, 'gWatElevNullPassQM': {'slot_uri': 'neon:gWatElevNullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev null pass q m'], 'mappings': []}, 'gWatElevNullNAQM': {'slot_uri': 'neon:gWatElevNullNAQM', 'description': 'Quality metric that summarizes when the null test for groundwater elevation could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev null n a q m'], 'mappings': []}, 'gWatElevGapFailQM': {'slot_uri': 'neon:gWatElevGapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev gap fail q m'], 'mappings': []}, 'gWatElevGapPassQM': {'slot_uri': 'neon:gWatElevGapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev gap pass q m'], 'mappings': []}, 'gWatElevGapNAQM': {'slot_uri': 'neon:gWatElevGapNAQM', 'description': 'Quality metric that summarizes when the gap test for groundwater elevation could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev gap n a q m'], 'mappings': []}, 'gWatElevSpikeFailQM': {'slot_uri': 'neon:gWatElevSpikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev spike fail q m'], 'mappings': []}, 'gWatElevSpikePassQM': {'slot_uri': 'neon:gWatElevSpikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev spike pass q m'], 'mappings': []}, 'gWatElevSpikeNAQM': {'slot_uri': 'neon:gWatElevSpikeNAQM', 'description': 'Quality metric that summarizes when the spike test for groundwater elevation could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev spike n a q m'], 'mappings': []}, 'gWatElevConsistencyFailQM': {'slot_uri': 'neon:gWatElevConsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev consistency fail q m'], 'mappings': []}, 'gWatElevConsistencyPassQM': {'slot_uri': 'neon:gWatElevConsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for groundwater elevation over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev consistency pass q m'], 'mappings': []}, 'gWatElevConsistencyNAQM': {'slot_uri': 'neon:gWatElevConsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for groundwater elevation could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat elev consistency n a q m'], 'mappings': []}, 'gWatElevAlphaQM': {'slot_uri': 'neon:gWatElevAlphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for groundwater elevation over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['g wat elev alpha q m'], 'mappings': []}, 'gWatElevBetaQM': {'slot_uri': 'neon:gWatElevBetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for groundwater elevation over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['g wat elev beta q m'], 'mappings': []}, 'gWatElevFinalQF': {'slot_uri': 'neon:gWatElevFinalQF', 'description': 'Quality flag indicating whether groundwater elevation data has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['g wat elev final q f'], 'mappings': []}, 'gWatSCondRangeFailQM': {'slot_uri': 'neon:gWatSCondRangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond range fail q m'], 'mappings': []}, 'gWatSCondRangePassQM': {'slot_uri': 'neon:gWatSCondRangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond range pass q m'], 'mappings': []}, 'gWatSCondRangeNAQM': {'slot_uri': 'neon:gWatSCondRangeNAQM', 'description': 'Quality metric that summarizes when the range test for groundwater specific conductivity could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond range n a q m'], 'mappings': []}, 'gWatSCondPersistenceFailQM': {'slot_uri': 'neon:gWatSCondPersistenceFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the persistence test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond persistence fail q m'], 'mappings': []}, 'gWatSCondPersistencePassQM': {'slot_uri': 'neon:gWatSCondPersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond persistence pass q m'], 'mappings': []}, 'gWatSCondPersistenceNAQM': {'slot_uri': 'neon:gWatSCondPersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for groundwater specific conductivity could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond persistence n a q m'], 'mappings': []}, 'gWatSCondStepFailQM': {'slot_uri': 'neon:gWatSCondStepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond step fail q m'], 'mappings': []}, 'gWatSCondStepPassQM': {'slot_uri': 'neon:gWatSCondStepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond step pass q m'], 'mappings': []}, 'gWatSCondStepNAQM': {'slot_uri': 'neon:gWatSCondStepNAQM', 'description': 'Quality metric that summarizes when the step test for groundwater specific conductivity could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond step n a q m'], 'mappings': []}, 'gWatSCondNullFailQM': {'slot_uri': 'neon:gWatSCondNullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond null fail q m'], 'mappings': []}, 'gWatSCondNullPassQM': {'slot_uri': 'neon:gWatSCondNullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond null pass q m'], 'mappings': []}, 'gWatSCondNullNAQM': {'slot_uri': 'neon:gWatSCondNullNAQM', 'description': 'Quality metric that summarizes when the null test for groundwater specific conductivity could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond null n a q m'], 'mappings': []}, 'gWatSCondGapFailQM': {'slot_uri': 'neon:gWatSCondGapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond gap fail q m'], 'mappings': []}, 'gWatSCondGapPassQM': {'slot_uri': 'neon:gWatSCondGapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond gap pass q m'], 'mappings': []}, 'gWatSCondGapNAQM': {'slot_uri': 'neon:gWatSCondGapNAQM', 'description': 'Quality metric that summarizes when the gap test for groundwater specific conductivity could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond gap n a q m'], 'mappings': []}, 'gWatSCondSpikeFailQM': {'slot_uri': 'neon:gWatSCondSpikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond spike fail q m'], 'mappings': []}, 'gWatSCondSpikePassQM': {'slot_uri': 'neon:gWatSCondSpikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond spike pass q m'], 'mappings': []}, 'gWatSCondSpikeNAQM': {'slot_uri': 'neon:gWatSCondSpikeNAQM', 'description': 'Quality metric that summarizes when the spike test for groundwater specific conductivity could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond spike n a q m'], 'mappings': []}, 'gWatSCondConsistencyFailQM': {'slot_uri': 'neon:gWatSCondConsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond consistency fail q m'], 'mappings': []}, 'gWatSCondConsistencyPassQM': {'slot_uri': 'neon:gWatSCondConsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for groundwater specific conductivity over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond consistency pass q m'], 'mappings': []}, 'gWatSCondConsistencyNAQM': {'slot_uri': 'neon:gWatSCondConsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for groundwater specific conductivity could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['g wat s cond consistency n a q m'], 'mappings': []}, 'gWatSCondAlphaQM': {'slot_uri': 'neon:gWatSCondAlphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for groundwater specific conductivity over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['g wat s cond alpha q m'], 'mappings': []}, 'gWatSCondBetaQM': {'slot_uri': 'neon:gWatSCondBetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for groundwater specific conductivity over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['g wat s cond beta q m'], 'mappings': []}, 'gWatSCondFinalQF': {'slot_uri': 'neon:gWatSCondFinalQF', 'description': 'Quality flag indicating whether groundwater specific conductivity data has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['g wat s cond final q f'], 'mappings': []}, 'IRmetadata': {'slot_uri': 'neon:IRmetadata', 'description': 'IR metadata stream', 'range': 'string', 'aliases': ['i rmetadata'], 'mappings': []}, 'RGBmetadata': {'slot_uri': 'neon:RGBmetadata', 'description': 'RGB metadata stream', 'range': 'string', 'aliases': ['r g bmetadata'], 'mappings': []}, 'pitProfileID': {'slot_uri': 'neon:pitProfileID', 'description': 'An identifier for the vertical sampling profile', 'range': 'string', 'aliases': ['pit profile i d'], 'mappings': []}, 'rootStatus': {'slot_uri': 'neon:rootStatus', 'description': 'The state of an individual or sample', 'range': 'string', 'aliases': ['root status'], 'mappings': []}, 'sizeCategory': {'slot_uri': 'neon:sizeCategory', 'description': 'Categorical size class of an individual or sample', 'range': 'string', 'aliases': ['size category'], 'mappings': []}, 'maxProfileDepth': {'slot_uri': 'neon:maxProfileDepth', 'description': 'The bottom most sampling depth per pitProfileID', 'range': 'double', 'aliases': ['max profile depth'], 'mappings': []}, 'totalRootBiomass': {'slot_uri': 'neon:totalRootBiomass', 'description': 'Total root biomass per horizontal surface area to max pit depth', 'range': 'double', 'aliases': ['total root biomass'], 'mappings': []}, 'depth100RootBiomass': {'slot_uri': 'neon:depth100RootBiomass', 'description': 'Total root biomass per horizontal surface area to 100 cm depth', 'range': 'double', 'aliases': ['depth100 root biomass'], 'mappings': []}, 'topDepth': {'slot_uri': 'neon:topDepth', 'description': 'Depth below the soil surface at the top of a soil root sample', 'range': 'double', 'aliases': ['top depth'], 'mappings': []}, 'bottomDepth': {'slot_uri': 'neon:bottomDepth', 'description': 'Depth below the soil surface at the bottom of a soil root sample', 'range': 'double', 'aliases': ['bottom depth'], 'mappings': []}, 'depthIncrementID': {'slot_uri': 'neon:depthIncrementID', 'description': 'An identifier for the depth increment within a pit profile', 'range': 'string', 'aliases': ['depth increment i d'], 'mappings': []}, 'depthIncrementVolume': {'slot_uri': 'neon:depthIncrementVolume', 'description': 'Sample volume within depth increment', 'range': 'double', 'aliases': ['depth increment volume'], 'mappings': []}, 'sampleMethod': {'slot_uri': 'neon:sampleMethod', 'description': 'Method used to collect samples', 'range': 'string', 'aliases': ['sample method'], 'mappings': []}, 'sampleMethodOrientation': {'slot_uri': 'neon:sampleMethodOrientation', 'description': 'The orientation of the sampling axis from a flat horizontal plane', 'range': 'string', 'aliases': ['sample method orientation'], 'mappings': []}, 'rootDryMass': {'slot_uri': 'neon:rootDryMass', 'description': 'Oven-dried mass of root sample or subsample', 'range': 'double', 'aliases': ['root dry mass'], 'mappings': []}, 'incrementRootBiomass': {'slot_uri': 'neon:incrementRootBiomass', 'description': 'Root biomass per horizontal surface area per depth increment', 'range': 'double', 'aliases': ['increment root biomass'], 'mappings': []}, 'incrementRootDensity': {'slot_uri': 'neon:incrementRootDensity', 'description': 'Root biomass per collected soil volume per depth increment', 'range': 'double', 'aliases': ['increment root density'], 'mappings': []}, 'strainGauge2Stability': {'slot_uri': 'neon:strainGauge2Stability', 'description': 'Stability flag indicating if strain gauge 2 in the primary precipitation sensor is reporting a stable frequency (1 = stable, 0 = unstable, -1 = sensor failure)', 'range': 'integer', 'aliases': ['strain gauge2 stability'], 'mappings': []}, 'strainGauge3Stability': {'slot_uri': 'neon:strainGauge3Stability', 'description': 'Stability flag indicating if strain gauge 3 in the primary precipitation sensor is reporting a stable frequency (1 = stable, 0 = unstable, -1 = sensor failure)', 'range': 'integer', 'aliases': ['strain gauge3 stability'], 'mappings': []}, 'strainGauge2Temp': {'slot_uri': 'neon:strainGauge2Temp', 'description': 'Strain gauge 2 transducer temperature in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge2 temp'], 'mappings': []}, 'strainGauge3Temp': {'slot_uri': 'neon:strainGauge3Temp', 'description': 'Strain gauge 3 transducer temperature in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge3 temp'], 'mappings': []}, 'strainGauge2FreqRaw': {'slot_uri': 'neon:strainGauge2FreqRaw', 'description': 'The raw frequency reported by strain gauge 2 in the primary precipitation sensor (i.e., uncompensated for temperature)', 'range': 'double', 'aliases': ['strain gauge2 freq raw'], 'mappings': []}, 'strainGauge3FreqRaw': {'slot_uri': 'neon:strainGauge3FreqRaw', 'description': 'The raw frequency reported by strain gauge 3 in the primary precipitation sensor (i.e., uncompensated for temperature)', 'range': 'double', 'aliases': ['strain gauge3 freq raw'], 'mappings': []}, 'strainGauge2Weight': {'slot_uri': 'neon:strainGauge2Weight', 'description': 'The weight reported by strain gauge 2 in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge2 weight'], 'mappings': []}, 'strainGauge3Weight': {'slot_uri': 'neon:strainGauge3Weight', 'description': 'The weight reported by strain gauge 3 in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge3 weight'], 'mappings': []}, 'strainGauge2FreqComp': {'slot_uri': 'neon:strainGauge2FreqComp', 'description': 'The temperature compensated frequency reported by strain gauge 2 in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge2 freq comp'], 'mappings': []}, 'strainGauge3FreqComp': {'slot_uri': 'neon:strainGauge3FreqComp', 'description': 'The temperature compensated frequency reported by strain gauge 3 in the primary precipitation sensor', 'range': 'double', 'aliases': ['strain gauge3 freq comp'], 'mappings': []}, 'externalLabNamedLocation': {'slot_uri': 'neon:externalLabNamedLocation', 'description': 'Named location of the external lab', 'range': 'string', 'aliases': ['external lab named location'], 'mappings': []}, 'externalLabSummaryFile': {'slot_uri': 'neon:externalLabSummaryFile', 'description': 'File containing summary data from the external lab', 'range': 'string', 'aliases': ['external lab summary file'], 'mappings': []}, 'heaterMonitor': {'slot_uri': 'neon:heaterMonitor', 'description': 'Heater sensed current which is reported in voltage using a scale factor of 4.6A/V', 'range': 'double', 'aliases': ['heater monitor'], 'mappings': []}, 'rawVSWC0': {'slot_uri': 'neon:rawVSWC0', 'description': 'Raw measurement of volumetric soil water content from shallowest depth', 'range': 'double', 'aliases': ['raw v s w c0'], 'mappings': []}, 'rawVSIC0': {'slot_uri': 'neon:rawVSIC0', 'description': 'Raw measurement of volumetric soil ion content from shallowest depth', 'range': 'double', 'aliases': ['raw v s i c0'], 'mappings': []}, 'rawVSWC1': {'slot_uri': 'neon:rawVSWC1', 'description': 'Raw measurement of volumetric soil water content from 2nd shallowest depth', 'range': 'double', 'aliases': ['raw v s w c1'], 'mappings': []}, 'rawVSIC1': {'slot_uri': 'neon:rawVSIC1', 'description': 'Raw measurement of volumetric soil ion content from 2nd shallowest depth', 'range': 'double', 'aliases': ['raw v s i c1'], 'mappings': []}, 'rawVSWC2': {'slot_uri': 'neon:rawVSWC2', 'description': 'Raw measurement of volumetric soil water content from 3rd shallowest depth', 'range': 'double', 'aliases': ['raw v s w c2'], 'mappings': []}, 'rawVSIC2': {'slot_uri': 'neon:rawVSIC2', 'description': 'Raw measurement of volumetric soil ion content from 3rd shallowest depth', 'range': 'double', 'aliases': ['raw v s i c2'], 'mappings': []}, 'rawVSWC3': {'slot_uri': 'neon:rawVSWC3', 'description': 'Raw measurement of volumetric soil water content from 4th shallowest depth', 'range': 'double', 'aliases': ['raw v s w c3'], 'mappings': []}, 'rawVSIC3': {'slot_uri': 'neon:rawVSIC3', 'description': 'Raw measurement of volumetric soil ion content from 4th shallowest depth', 'range': 'double', 'aliases': ['raw v s i c3'], 'mappings': []}, 'rawVSWC4': {'slot_uri': 'neon:rawVSWC4', 'description': 'Raw measurement of volumetric soil water content from 5th shallowest depth', 'range': 'double', 'aliases': ['raw v s w c4'], 'mappings': []}, 'rawVSIC4': {'slot_uri': 'neon:rawVSIC4', 'description': 'Raw measurement of volumetric soil ion content from 5th shallowest depth', 'range': 'double', 'aliases': ['raw v s i c4'], 'mappings': []}, 'rawVSWC5': {'slot_uri': 'neon:rawVSWC5', 'description': 'Raw measurement of volumetric soil water content from 6th shallowest depth', 'range': 'double', 'aliases': ['raw v s w c5'], 'mappings': []}, 'rawVSIC5': {'slot_uri': 'neon:rawVSIC5', 'description': 'Raw measurement of volumetric soil ion content from 6th shallowest depth', 'range': 'double', 'aliases': ['raw v s i c5'], 'mappings': []}, 'rawVSWC6': {'slot_uri': 'neon:rawVSWC6', 'description': 'Raw measurement of volumetric soil water content from 7th shallowest depth', 'range': 'double', 'aliases': ['raw v s w c6'], 'mappings': []}, 'rawVSIC6': {'slot_uri': 'neon:rawVSIC6', 'description': 'Raw measurement of volumetric soil ion content from 7th shallowest depth', 'range': 'double', 'aliases': ['raw v s i c6'], 'mappings': []}, 'rawVSWC7': {'slot_uri': 'neon:rawVSWC7', 'description': 'Raw measurement of volumetric soil water content from 8th shallowest depth', 'range': 'double', 'aliases': ['raw v s w c7'], 'mappings': []}, 'rawVSIC7': {'slot_uri': 'neon:rawVSIC7', 'description': 'Raw measurement of volumetric soil ion content from 8th shallowest depth', 'range': 'double', 'aliases': ['raw v s i c7'], 'mappings': []}, 'wire1StabilityPassQM': {'slot_uri': 'neon:wire1StabilityPassQM', 'description': 'Quality metric that summarizes when strain gauge 1 stability passed over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire1 stability pass q m'], 'mappings': []}, 'wire1StabilitySearchQM': {'slot_uri': 'neon:wire1StabilitySearchQM', 'description': 'Quality metric that summarizes when strain gauge 1 was searching for stability over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire1 stability search q m'], 'mappings': []}, 'wire1StabilityFailQM': {'slot_uri': 'neon:wire1StabilityFailQM', 'description': 'Quality metric that summarizes when strain gauge 1 stability failed over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire1 stability fail q m'], 'mappings': []}, 'wire2StabilityPassQM': {'slot_uri': 'neon:wire2StabilityPassQM', 'description': 'Quality metric that summarizes when strain gauge 2 stability passed over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire2 stability pass q m'], 'mappings': []}, 'wire2StabilitySearchQM': {'slot_uri': 'neon:wire2StabilitySearchQM', 'description': 'Quality metric that summarizes when strain gauge 2 was searching for stability over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire2 stability search q m'], 'mappings': []}, 'wire2StabilityFailQM': {'slot_uri': 'neon:wire2StabilityFailQM', 'description': 'Quality metric that summarizes when strain gauge 2 stability failed over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire2 stability fail q m'], 'mappings': []}, 'wire3StabilityPassQM': {'slot_uri': 'neon:wire3StabilityPassQM', 'description': 'Quality metric that summarizes when strain gauge 3 stability passed over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire3 stability pass q m'], 'mappings': []}, 'wire3StabilitySearchQM': {'slot_uri': 'neon:wire3StabilitySearchQM', 'description': 'Quality metric that summarizes when strain gauge 3 was searching for stability over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire3 stability search q m'], 'mappings': []}, 'wire3StabilityFailQM': {'slot_uri': 'neon:wire3StabilityFailQM', 'description': 'Quality metric that summarizes when strain gauge 3 stability failed over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire3 stability fail q m'], 'mappings': []}, 'inletHeaters1QM': {'slot_uri': 'neon:inletHeaters1QM', 'description': 'Quality metric that summarizes when one of the inlet heaters was on over the measurement period, as a percent', 'range': 'double', 'aliases': ['inlet heaters1 q m'], 'mappings': []}, 'inletHeaters2QM': {'slot_uri': 'neon:inletHeaters2QM', 'description': 'Quality metric that summarizes when two of the inlet heaters were on over the measurement period, as a percent', 'range': 'double', 'aliases': ['inlet heaters2 q m'], 'mappings': []}, 'inletHeaters3QM': {'slot_uri': 'neon:inletHeaters3QM', 'description': 'Quality metric that summarizes when all three of the inlet heaters were on over the measurement period, as a percent', 'range': 'double', 'aliases': ['inlet heaters3 q m'], 'mappings': []}, 'priorDepthQF': {'slot_uri': 'neon:priorDepthQF', 'description': 'Quality flag indicating whether or not precipitation could calculated because the previous depth measurements were missing from two or more of the strain gauges (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['prior depth q f'], 'mappings': []}, 'unstableQF': {'slot_uri': 'neon:unstableQF', 'description': 'Quality flag indicating whether or not two or more strain gauges were stable to allow for precipitation to be calculated, (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['unstable q f'], 'mappings': []}, 'lowDepthQF': {'slot_uri': 'neon:lowDepthQF', 'description': 'Quality flag that that indicates whether one or more of the depth measurements from the strain gauges were too low, which is typically a sign of a broken strain gauge (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['low depth q f'], 'mappings': []}, 'exDeltaQF': {'slot_uri': 'neon:exDeltaQF', 'description': 'Quality flag that indicates whether the depth change for any of the strain gauges was too extreme (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['ex delta q f'], 'mappings': []}, 'missingWireInfoQF': {'slot_uri': 'neon:missingWireInfoQF', 'description': 'Quality flag that indicates when measurements are invalid from two or more strain gauges and precipitation could not be calculated (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['missing wire info q f'], 'mappings': []}, 'gaugeNoiseQF': {'slot_uri': 'neon:gaugeNoiseQF', 'description': 'Quality flag that indicates there was too much variability among the strain gauge measurements and precipitation was set to zero for a time interval (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['gauge noise q f'], 'mappings': []}, 'wireNoiseQF': {'slot_uri': 'neon:wireNoiseQF', 'description': "Quality flag that indicates whether one or more of the strain gauge's depth change was negative, resulting in setting precipitation to zero for a time interval (0 = pass, 1 = fail)", 'range': 'string', 'aliases': ['wire noise q f'], 'mappings': []}, 'overflowQF': {'slot_uri': 'neon:overflowQF', 'description': 'Quality flag indicating the gauge was overflowing and precipitation could not be calculated (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['overflow q f'], 'mappings': []}, 'heaterErrorQF': {'slot_uri': 'neon:heaterErrorQF', 'description': 'Quality flag that indicates whether the heaters were malfunctioning (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['heater error q f'], 'mappings': []}, 'priPrecipFinalQF': {'slot_uri': 'neon:priPrecipFinalQF', 'description': 'Primary precipitation quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.000898 (0 = pass, 1 = fail)', 'range': 'string', 'aliases': ['pri precip final q f'], 'mappings': []}, 'priPrecipNumPts': {'slot_uri': 'neon:priPrecipNumPts', 'description': 'Number of five-minute bulk precipitation values that were used to compute the 30-minute bulk precipitation value', 'range': 'double', 'aliases': ['pri precip num pts'], 'mappings': []}, 'profileID': {'slot_uri': 'neon:profileID', 'description': 'The identifier for the set of sample depths that comprise one complete profile', 'range': 'string', 'aliases': ['profile i d'], 'mappings': []}, 'iceThickness': {'slot_uri': 'neon:iceThickness', 'description': 'Thickness of the ice covering the lake or river', 'range': 'double', 'aliases': ['ice thickness'], 'mappings': []}, 'thermalStratification': {'slot_uri': 'neon:thermalStratification', 'description': 'Indication of whether the water column is stratified or non-stratified', 'range': 'string', 'aliases': ['thermal stratification'], 'mappings': []}, 'metalimnionDepth': {'slot_uri': 'neon:metalimnionDepth', 'description': 'Depth of upper/lower bound of the metalimnion', 'range': 'string', 'aliases': ['metalimnion depth'], 'mappings': []}, 'secchi1Depth': {'slot_uri': 'neon:secchi1Depth', 'description': 'First secchi disk depth at sampling location', 'range': 'double', 'aliases': ['secchi1 depth'], 'mappings': []}, 'secchi2Depth': {'slot_uri': 'neon:secchi2Depth', 'description': 'Second secchi disk depth at sampling location', 'range': 'double', 'aliases': ['secchi2 depth'], 'mappings': []}, 'clearToBottom': {'slot_uri': 'neon:clearToBottom', 'description': 'Designation for when the secchi disk can be seen all the way to the bottom', 'range': 'string', 'aliases': ['clear to bottom'], 'mappings': []}, 'secchiMeanDepth': {'slot_uri': 'neon:secchiMeanDepth', 'description': 'Mean secchi depth at sampling location', 'range': 'double', 'aliases': ['secchi mean depth'], 'mappings': []}, 'euphoticDepth': {'slot_uri': 'neon:euphoticDepth', 'description': 'Depth of euphotic zone, 2.5 x secchiMeanDepth', 'range': 'double', 'aliases': ['euphotic depth'], 'mappings': []}, 'wetMass': {'slot_uri': 'neon:wetMass', 'description': 'Fresh mass of the sample', 'range': 'double', 'aliases': ['wet mass'], 'mappings': []}, 'wetMassSubsample': {'slot_uri': 'neon:wetMassSubsample', 'description': 'Fresh mass of the subsample', 'range': 'double', 'aliases': ['wet mass subsample'], 'mappings': []}, 'boatID': {'slot_uri': 'neon:boatID', 'description': 'Identifier for the weigh boat', 'range': 'string', 'aliases': ['boat i d'], 'mappings': []}, 'boatMass': {'slot_uri': 'neon:boatMass', 'description': 'Mass of the weigh boat', 'range': 'double', 'aliases': ['boat mass'], 'mappings': []}, 'dryMassBoatMass': {'slot_uri': 'neon:dryMassBoatMass', 'description': 'Oven-dried mass of the sample and weigh boat', 'range': 'double', 'aliases': ['dry mass boat mass'], 'mappings': []}, 'ashMassBoatMass': {'slot_uri': 'neon:ashMassBoatMass', 'description': 'Combusted mass of the sample and weigh boat', 'range': 'double', 'aliases': ['ash mass boat mass'], 'mappings': []}, 'habitatType': {'slot_uri': 'neon:habitatType', 'description': 'Habitat type sampled', 'range': 'string', 'aliases': ['habitat type'], 'mappings': []}, 'fieldID': {'slot_uri': 'neon:fieldID', 'description': 'Identifier for sample generated in the field', 'range': 'string', 'aliases': ['field i d'], 'mappings': []}, 'sampleCollected': {'slot_uri': 'neon:sampleCollected', 'description': 'Indicator of whether a sample was collected', 'range': 'string', 'aliases': ['sample collected'], 'mappings': []}, 'locationID': {'slot_uri': 'neon:locationID', 'description': 'Identifier for location where sample was collected', 'range': 'string', 'aliases': ['location i d'], 'mappings': []}, 'locationDry': {'slot_uri': 'neon:locationDry', 'description': 'Indicator of whether the sample location was dry', 'range': 'string', 'aliases': ['location dry'], 'mappings': []}, 'aquaticPlantType': {'slot_uri': 'neon:aquaticPlantType', 'description': 'Indicator of the type of aquatic plant in the sample', 'range': 'string', 'aliases': ['aquatic plant type'], 'mappings': []}, 'plantSampleID': {'slot_uri': 'neon:plantSampleID', 'description': 'Identifier for the plant sample', 'range': 'string', 'aliases': ['plant sample i d'], 'mappings': []}, 'macroalgaeSampleID': {'slot_uri': 'neon:macroalgaeSampleID', 'description': 'Identifier for the macroalgae sample', 'range': 'string', 'aliases': ['macroalgae sample i d'], 'mappings': []}, 'qcTaxonomyStatus': {'slot_uri': 'neon:qcTaxonomyStatus', 'description': 'Sample chosen as part of 10% of samples for quality control (QC)', 'range': 'string', 'aliases': ['qc taxonomy status'], 'mappings': []}, 'qcReidentification': {'slot_uri': 'neon:qcReidentification', 'description': 'Reidentification of individual(s) for quality control (QC) due to taxonomic or count discrepancies', 'range': 'string', 'aliases': ['qc reidentification'], 'mappings': []}, 'algalType': {'slot_uri': 'neon:algalType', 'description': 'Informal taxonomic grouping of algal species', 'range': 'string', 'aliases': ['algal type'], 'mappings': []}, 'slideID': {'slot_uri': 'neon:slideID', 'description': 'Unique identifier associated with each slide per sampleID or subsampleID', 'range': 'string', 'aliases': ['slide i d'], 'mappings': []}, 'algalParameter': {'slot_uri': 'neon:algalParameter', 'description': 'Parameter used for analysis of algal assemblages', 'range': 'string', 'aliases': ['algal parameter'], 'mappings': []}, 'accessionNumber': {'slot_uri': 'neon:accessionNumber', 'description': 'Identifier for the archived specimen or sample', 'range': 'string', 'aliases': ['accession number'], 'mappings': []}, 'algalParameterValue': {'slot_uri': 'neon:algalParameterValue', 'description': 'Value of the algalParameter', 'range': 'double', 'aliases': ['algal parameter value'], 'mappings': []}, 'algalParameterUnit': {'slot_uri': 'neon:algalParameterUnit', 'description': 'Unit of measure associated with the algalParameter', 'range': 'string', 'aliases': ['algal parameter unit'], 'mappings': []}, 'kingdom': {'slot_uri': 'neon:kingdom', 'description': 'The scientific name of the kingdom in which the taxon is classified', 'range': 'string', 'aliases': ['kingdom'], 'mappings': ['http://rs.tdwg.org/dwc/terms/kingdom']}, 'phylum': {'slot_uri': 'neon:phylum', 'description': 'The scientific name of the phylum or division in which the taxon is classified', 'range': 'string', 'aliases': ['phylum'], 'mappings': ['http://rs.tdwg.org/dwc/terms/phylum']}, 'class': {'slot_uri': 'neon:class', 'description': 'The scientific name of the class in which the taxon is classified', 'range': 'string', 'aliases': ['class'], 'mappings': ['http://rs.tdwg.org/dwc/terms/class']}, 'order': {'slot_uri': 'neon:order', 'description': 'The scientific name of the order in which the taxon is classified', 'range': 'string', 'aliases': ['order'], 'mappings': ['http://rs.tdwg.org/dwc/terms/order']}, 'family': {'slot_uri': 'neon:family', 'description': 'The scientific name of the family in which the taxon is classified', 'range': 'string', 'aliases': ['family'], 'mappings': ['http://rs.tdwg.org/dwc/terms/family']}, 'subfamily': {'slot_uri': 'neon:subfamily', 'description': 'The scientific name of the subfamily in which the organism is classified', 'range': 'string', 'aliases': ['subfamily'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subfamily']}, 'genus': {'slot_uri': 'neon:genus', 'description': 'The scientific name of the genus in which the organism is classified', 'range': 'string', 'aliases': ['genus'], 'mappings': ['http://rs.tdwg.org/dwc/terms/genus']}, 'subgenus': {'slot_uri': 'neon:subgenus', 'description': 'The scientific name of the subgenus in which the taxon is classified. Values should include the genus to avoid homonym confusion', 'range': 'string', 'aliases': ['subgenus'], 'mappings': ['http://rs.tdwg.org/dwc/terms/subgenus']}, 'specificEpithet': {'slot_uri': 'neon:specificEpithet', 'description': 'The specific epithet (second part of the species name) of the scientific name applied to the taxon', 'range': 'string', 'aliases': ['specific epithet'], 'mappings': ['http://rs.tdwg.org/dwc/terms/specificEpithet']}, 'infraspecificEpithet': {'slot_uri': 'neon:infraspecificEpithet', 'description': 'The infraspecific epithet (scientific name below the rank of species) of the scientific name applied to the taxon', 'range': 'string', 'aliases': ['infraspecific epithet'], 'mappings': ['http://rs.tdwg.org/dwc/terms/infraspecificEpithet']}, 'tribe': {'slot_uri': 'neon:tribe', 'description': 'The scientific name of the tribe in which the taxon is classified', 'range': 'string', 'aliases': ['tribe'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/tribe']}, 'variety': {'slot_uri': 'neon:variety', 'description': 'The variety (infraspecific name below the rank of infraspecific epithet) of the scientific name applied to the taxon', 'range': 'string', 'aliases': ['variety'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/variety']}, 'taxonomicForm': {'slot_uri': 'neon:taxonomicForm', 'description': 'The form (infraspecific name below the rank of variety) of the scientific name applied to the taxon', 'range': 'string', 'aliases': ['taxonomic form'], 'mappings': []}, 'authority': {'slot_uri': 'neon:authority', 'description': 'Name of the scientist who first published the scientific name', 'range': 'string', 'aliases': ['authority'], 'mappings': []}, 'taxonDatabaseName': {'slot_uri': 'neon:taxonDatabaseName', 'description': 'Name of the taxonomic database', 'range': 'string', 'aliases': ['taxon database name'], 'mappings': []}, 'taxonDatabaseID': {'slot_uri': 'neon:taxonDatabaseID', 'description': 'Unique identifier for the taxon within the database', 'range': 'string', 'aliases': ['taxon database i d'], 'mappings': []}, 'benthicArea': {'slot_uri': 'neon:benthicArea', 'description': 'Area of the benthos sampled', 'range': 'double', 'aliases': ['benthic area'], 'mappings': []}, 'samplerType': {'slot_uri': 'neon:samplerType', 'description': 'Type of sampler used to collect the sample', 'range': 'string', 'aliases': ['sampler type'], 'mappings': []}, 'storageDays': {'slot_uri': 'neon:storageDays', 'description': 'Total number of days clipped biomass was stored between collection and processing', 'range': 'double', 'aliases': ['storage days'], 'mappings': []}, 'adjDryMass': {'slot_uri': 'neon:adjDryMass', 'description': 'Oven-dried mass of the sample, multiplied to account for lab subsampling', 'range': 'double', 'aliases': ['adj dry mass'], 'mappings': []}, 'adjAshFreeDryMass': {'slot_uri': 'neon:adjAshFreeDryMass', 'description': 'Combusted mass of the sample, multiplied to account for lab subsampling', 'range': 'double', 'aliases': ['adj ash free dry mass'], 'mappings': []}, 'arealAdjDryMass': {'slot_uri': 'neon:arealAdjDryMass', 'description': 'Oven-dried mass of the sample, multiplied to account for lab subsampling and the area sampled based on samplerType', 'range': 'double', 'aliases': ['areal adj dry mass'], 'mappings': []}, 'arealAdjAshFreeDryMass': {'slot_uri': 'neon:arealAdjAshFreeDryMass', 'description': 'Combusted mass of the sample, multiplied to account for lab subsampling and the area sampled based on samplerType', 'range': 'double', 'aliases': ['areal adj ash free dry mass'], 'mappings': []}, 'wire1StabilityNAQM': {'slot_uri': 'neon:wire1StabilityNAQM', 'description': 'Quality metric that summarizes when strain gauge 1 stability information was not available  over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire1 stability n a q m'], 'mappings': []}, 'wire2StabilityNAQM': {'slot_uri': 'neon:wire2StabilityNAQM', 'description': 'Quality metric that summarizes when strain gauge 2 stability information was not available  over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire2 stability n a q m'], 'mappings': []}, 'wire3StabilityNAQM': {'slot_uri': 'neon:wire3StabilityNAQM', 'description': 'Quality metric that summarizes when strain gauge 3 stability information was not available  over the measurement period, as a percent', 'range': 'double', 'aliases': ['wire3 stability n a q m'], 'mappings': []}, 'inletHeatersNAQM': {'slot_uri': 'neon:inletHeatersNAQM', 'description': 'Quality metric that summarizes when no heater information was available over the measurement period, as a percent', 'range': 'double', 'aliases': ['inlet heaters n a q m'], 'mappings': []}, 'tempCellIn': {'slot_uri': 'neon:tempCellIn', 'description': 'Temperature (temp) of the optical cell (Cell) inlet (In) thermocouple', 'range': 'double', 'aliases': ['temp cell in'], 'mappings': []}, 'tempCellOut': {'slot_uri': 'neon:tempCellOut', 'description': 'Temperature (temp) of the optical cell (Cell) outlet (Out) thermocouple', 'range': 'double', 'aliases': ['temp cell out'], 'mappings': []}, 'presAtmBox': {'slot_uri': 'neon:presAtmBox', 'description': 'Pressure (pres), measured as atmospheric (Atm) pressure of the control box (Box), synonymous with absolute pressure or total pressure (at sea level the standard atmospheric pressure is 101.325 kPa)', 'range': 'double', 'aliases': ['pres atm box'], 'mappings': []}, 'presGageCell': {'slot_uri': 'neon:presGageCell', 'description': 'Pressure (pres), measured as differential against ambient pressure, synonymous with gage (Gage) pressure (at sea level the gage pressure equals total pressure minus 101.325 kPa), between the optical cell (Cell) and the control box', 'range': 'double', 'aliases': ['pres gage cell'], 'mappings': []}, 'pwrH2OSamp': {'slot_uri': 'neon:pwrH2OSamp', 'description': 'Power (pwr) of the water vapor (H2O) signal in the absorption band used for sampling (Samp)', 'range': 'double', 'aliases': ['pwr h2 o samp'], 'mappings': []}, 'pwrH2ORef': {'slot_uri': 'neon:pwrH2ORef', 'description': 'Power (pwr) of the water vapor (H2O) signal in the absorption band used for reference (Ref)', 'range': 'double', 'aliases': ['pwr h2 o ref'], 'mappings': []}, 'asrpH2O': {'slot_uri': 'neon:asrpH2O', 'description': 'Electromagnetic absorptance (asrp) in the water vapor (H2O) absorption band', 'range': 'double', 'aliases': ['asrp h2 o'], 'mappings': []}, 'rhoMoleH2O': {'slot_uri': 'neon:rhoMoleH2O', 'description': 'Density (rho) on molar basis (Mole) of water vapor (H2O), synonymous with number density', 'range': 'double', 'aliases': ['rho mole h2 o'], 'mappings': []}, 'fdMoleH2O': {'slot_uri': 'neon:fdMoleH2O', 'description': 'Dry mole fraction (fd) on molar basis (Mole) of water vapor (H2O), synonymous with mixing ratio', 'range': 'double', 'aliases': ['fd mole h2 o'], 'mappings': []}, 'pwrCO2Samp': {'slot_uri': 'neon:pwrCO2Samp', 'description': 'Power (pwr) of the carbondioxide (CO2) signal in the absorption band used for sampling (Samp)', 'range': 'double', 'aliases': ['pwr c o2 samp'], 'mappings': []}, 'pwrCO2Ref': {'slot_uri': 'neon:pwrCO2Ref', 'description': 'Power (pwr) of the carbondioxide (CO2) signal in the absorption band used for reference (Ref)', 'range': 'double', 'aliases': ['pwr c o2 ref'], 'mappings': []}, 'asrpCO2': {'slot_uri': 'neon:asrpCO2', 'description': 'Electromagnetic absorptance (asrp) in the carbondioxide (CO2) absorption band', 'range': 'double', 'aliases': ['asrp c o2'], 'mappings': []}, 'rhoMoleCO2': {'slot_uri': 'neon:rhoMoleCO2', 'description': 'Density (rho) on molar basis (Mole) of carbondioxide (CO2), synonymous with number density', 'range': 'double', 'aliases': ['rho mole c o2'], 'mappings': []}, 'fdMoleCO2': {'slot_uri': 'neon:fdMoleCO2', 'description': 'Dry mole fraction (fd) on molar basis (Mole) of carbondioxide (CO2), synonymous with mixing ratio', 'range': 'double', 'aliases': ['fd mole c o2'], 'mappings': []}, 'diag2': {'slot_uri': 'neon:diag2', 'description': 'Diagnostic value (diag) number 2 (2; sync clocks)', 'range': 'integer', 'aliases': ['diag2'], 'mappings': []}, 'poteCool': {'slot_uri': 'neon:poteCool', 'description': 'Electric potential (pote) at the cooler (Cool)', 'range': 'double', 'aliases': ['pote cool'], 'mappings': []}, 'ssiCO2': {'slot_uri': 'neon:ssiCO2', 'description': 'Signal strength indicator (ssi) for the carbondioxide (CO2) absorption band', 'range': 'double', 'aliases': ['ssi c o2'], 'mappings': []}, 'ssiH2O': {'slot_uri': 'neon:ssiH2O', 'description': 'Signal strength indicator (ssi) for the water vapor (H2O) absorption band', 'range': 'double', 'aliases': ['ssi h2 o'], 'mappings': []}, 'presGage': {'slot_uri': 'neon:presGage', 'description': 'Pressure (pres), measured as differential against ambient pressure, synonymous with gage (Gage) pressure (at sea level the gage pressure equals total pressure minus 101.325 kPa)', 'range': 'double', 'aliases': ['pres gage'], 'mappings': []}, 'qfTrapIn': {'slot_uri': 'neon:qfTrapIn', 'description': 'Qualifying flag (qf) indicating the status of the water trap (Trap) inlet (In) solenoid (0 = open [default], 1 = close)', 'range': 'integer', 'aliases': ['qf trap in'], 'mappings': []}, 'qfTrapOut': {'slot_uri': 'neon:qfTrapOut', 'description': 'Qualifying flag (qf) indicating the status of the water trap (Trap) vent (Out) solenoid (0 = close [default], 1 = open)', 'range': 'integer', 'aliases': ['qf trap out'], 'mappings': []}, 'qfLeak': {'slot_uri': 'neon:qfLeak', 'description': 'Qualifying flag (qf) indicating the status of the samling line leak (Leak) test master solenoid (0 = leak test not being performed [default], 1 = leak test being perfomed)', 'range': 'integer', 'aliases': ['qf leak'], 'mappings': []}, 'acceXaxs': {'slot_uri': 'neon:acceXaxs', 'description': 'Linear acceleration (acce) in attitude and motion reference system along-axis direction (Xaxs), positive forward', 'range': 'double', 'aliases': ['acce xaxs'], 'mappings': []}, 'acceYaxs': {'slot_uri': 'neon:acceYaxs', 'description': 'Linear acceleration (acce) in attitude and motion reference system cross-axis direction (Yaxs), positive left', 'range': 'double', 'aliases': ['acce yaxs'], 'mappings': []}, 'acceZaxs': {'slot_uri': 'neon:acceZaxs', 'description': 'Linear acceleration (acce) in attitude and motion reference system vertical-axis direction (Zaxs), positive upwards', 'range': 'double', 'aliases': ['acce zaxs'], 'mappings': []}, 'acceXaxsFree': {'slot_uri': 'neon:acceXaxsFree', 'description': "Linear acceleration (acce) in attitude and motion reference system along-axis direction (Xaxs), positive forward, after subtraction of acceleration due to earth's gravity (free)", 'range': 'double', 'aliases': ['acce xaxs free'], 'mappings': []}, 'acceYaxsFree': {'slot_uri': 'neon:acceYaxsFree', 'description': "Linear acceleration (acce) in attitude and motion reference system cross-axis direction (Yaxs), positive left, after subtraction of acceleration due to earth's gravity (free)", 'range': 'double', 'aliases': ['acce yaxs free'], 'mappings': []}, 'acceZaxsFree': {'slot_uri': 'neon:acceZaxsFree', 'description': "Linear acceleration (acce) in attitude and motion reference system vertical-axis direction (Zaxs), positive upwards, after subtraction of acceleration due to earth's gravity (free)", 'range': 'double', 'aliases': ['acce zaxs free'], 'mappings': []}, 'omegYaxs': {'slot_uri': 'neon:omegYaxs', 'description': 'Angular velocity (omeg) around the attitude and motion reference system cross-axis (Yaxs), positive in clockwise direction, synonymous with pitch rate', 'range': 'double', 'aliases': ['omeg yaxs'], 'mappings': []}, 'omegXaxs': {'slot_uri': 'neon:omegXaxs', 'description': 'Angular velocity (omeg) around the attitude and motion reference system along-axis (Xaxs), positive in clockwise direction, synonymous with roll rate', 'range': 'double', 'aliases': ['omeg xaxs'], 'mappings': []}, 'omegZaxs': {'slot_uri': 'neon:omegZaxs', 'description': 'Angular velocity (omeg) around the attitude and motion reference system vertical-axis (Zaxs), positive in clockwise direction, synonymous with yaw rate', 'range': 'double', 'aliases': ['omeg zaxs'], 'mappings': []}, 'thetYaxs': {'slot_uri': 'neon:thetYaxs', 'description': 'Angle (thet) around the attitude and motion reference system cross-axis (Yaxs), positive in clockwise direction, synonymous with pitch angle', 'range': 'double', 'aliases': ['thet yaxs'], 'mappings': []}, 'thetXaxs': {'slot_uri': 'neon:thetXaxs', 'description': 'Angle (thet) around the attitude and motion reference system along-axis (Xaxs), positive in clockwise direction, synonymous with roll angle', 'range': 'double', 'aliases': ['thet xaxs'], 'mappings': []}, 'thetZaxs': {'slot_uri': 'neon:thetZaxs', 'description': 'Angle (thet) around the attitude and motion reference system vertical-axis (Zaxs), positive in clockwise direction, synonymous with yaw angle', 'range': 'double', 'aliases': ['thet zaxs'], 'mappings': []}, 'qfGas1': {'slot_uri': 'neon:qfGas1', 'description': 'Qualifying flag (qf) indicating validation gas (Gas) number 1 solenoid status (1; 0 = close [default], 1 = open)', 'range': 'integer', 'aliases': ['qf gas1'], 'mappings': []}, 'qfGas2': {'slot_uri': 'neon:qfGas2', 'description': 'Qualifying flag (qf) indicating validation gas (Gas) number 2 solenoid status (2; 0 = close [default], 1 = open)', 'range': 'integer', 'aliases': ['qf gas2'], 'mappings': []}, 'qfGas3': {'slot_uri': 'neon:qfGas3', 'description': 'Qualifying flag (qf) indicating validation gas (Gas) number 3 solenoid status (3; 0 = close [default], 1 = open)', 'range': 'integer', 'aliases': ['qf gas3'], 'mappings': []}, 'qfGas4': {'slot_uri': 'neon:qfGas4', 'description': 'Qualifying flag (qf) indicating validation gas (Gas) number 4 solenoid status (4; 0 = close [default], 1 = open)', 'range': 'integer', 'aliases': ['qf gas4'], 'mappings': []}, 'qfGas5': {'slot_uri': 'neon:qfGas5', 'description': 'Qualifying flag (qf) indicating validation gas (Gas) number 5 solenoid status (5; 0 = close [default], 1 = open)', 'range': 'integer', 'aliases': ['qf gas5'], 'mappings': []}, 'calQAQCRpt': {'slot_uri': 'neon:calQAQCRpt', 'description': 'Quality assurance and quality control report for the calibration test, which indicates  the type of calibration coefficients used in the data product calculations, detailed in NEON.DOC.000007 (1=manufacturer default, 0=NEON site- and depth-specific, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['cal q a q c rpt'], 'mappings': []}, 'calDefaultQM': {'slot_uri': 'neon:calDefaultQM', 'description': 'Quality metric that summarizes the occurrence of manufacturer default calibration coefficient outcomes of the calibration test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cal default q m'], 'mappings': []}, 'calNEONQM': {'slot_uri': 'neon:calNEONQM', 'description': 'Quality metric that summarizes the occurrence of NEON site- and depth-specific calibration coefficient outcomes of the calibration test over the averaging period, as a percent', 'range': 'double', 'aliases': ['cal n e o n q m'], 'mappings': []}, 'calNAQM': {'slot_uri': 'neon:calNAQM', 'description': 'Quality metric that summarizes when the calibration test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['cal n a q m'], 'mappings': []}, 'qfHeatSoni': {'slot_uri': 'neon:qfHeatSoni', 'description': 'Qualifying flag (qf) indicating the status of the heater (Heat; heated 3-D sonic (Soni) anemometer only; 0 = off [default], 1 = on)', 'range': 'integer', 'aliases': ['qf heat soni'], 'mappings': []}, 'qfHeatTube': {'slot_uri': 'neon:qfHeatTube', 'description': 'Qualifying flag (qf) indicating the status of the heater (Heat) for the intake tube (Tube; 0 = heater on [default], 1 = heater off)', 'range': 'integer', 'aliases': ['qf heat tube'], 'mappings': []}, 'qfHeatCap': {'slot_uri': 'neon:qfHeatCap', 'description': 'Qualifying flag (qf) indicating the status of the heater (Heat) for the rain cap (Cap; 0 = heater off [default], 1 = heater on)', 'range': 'integer', 'aliases': ['qf heat cap'], 'mappings': []}, 'qfHeatVali': {'slot_uri': 'neon:qfHeatVali', 'description': 'Qualifying flag (qf) indicating the status of the heater (Heat) for the validation gas (Vali) path (0 = heater off [default], 1 = heater on)', 'range': 'integer', 'aliases': ['qf heat vali'], 'mappings': []}, 'diag16': {'slot_uri': 'neon:diag16', 'description': 'Diagnostic value (diag), output as a 16-bit (16) integer Bit assignment according to NEONDOC000807 (L0 prime processing ATBD)', 'range': 'integer', 'aliases': ['diag16'], 'mappings': []}, 'diag32': {'slot_uri': 'neon:diag32', 'description': 'Diagnostic value (diag), output as a 32-bit (32) integer Bit assignment according to NEONDOC000807 (L0 prime processing ATBD)', 'range': 'integer', 'aliases': ['diag32'], 'mappings': []}, 'surfWaterTemp': {'slot_uri': 'neon:surfWaterTemp', 'description': 'Temperature in surface water', 'range': 'double', 'aliases': ['surf water temp'], 'mappings': []}, 'surfWaterTempExpUncert': {'slot_uri': 'neon:surfWaterTempExpUncert', 'description': 'Expanded uncertainty for temperature of surface water in degrees celsius', 'range': 'double', 'aliases': ['surf water temp exp uncert'], 'mappings': []}, 'surfWaterTempRangeQF': {'slot_uri': 'neon:surfWaterTempRangeQF', 'description': 'Temperature of surface water quality flag for the range test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['surf water temp range q f'], 'mappings': []}, 'surfWaterTempPersistenceQF': {'slot_uri': 'neon:surfWaterTempPersistenceQF', 'description': 'Temperature of surface water quality flag for the persistence test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['surf water temp persistence q f'], 'mappings': []}, 'surfWaterTempStepQF': {'slot_uri': 'neon:surfWaterTempStepQF', 'description': 'Temperature of surface water quality flag for the step test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['surf water temp step q f'], 'mappings': []}, 'surfWaterTempNullQF': {'slot_uri': 'neon:surfWaterTempNullQF', 'description': 'Temperature of surface water quality flag for the null test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['surf water temp null q f'], 'mappings': []}, 'surfWaterTempGapQF': {'slot_uri': 'neon:surfWaterTempGapQF', 'description': 'Temperature of surface water quality flag for the gap test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['surf water temp gap q f'], 'mappings': []}, 'surfWaterTempConsistencyQF': {'slot_uri': 'neon:surfWaterTempConsistencyQF', 'description': 'Temperature of surface water quality flag for the consistency test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['surf water temp consistency q f'], 'mappings': []}, 'surfWaterTempSpikeQF': {'slot_uri': 'neon:surfWaterTempSpikeQF', 'description': 'Temperature of surface water quality flag for the spike test, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['surf water temp spike q f'], 'mappings': []}, 'surfWaterTempMean': {'slot_uri': 'neon:surfWaterTempMean', 'description': 'Arithmetic mean of temperature of surface water in degrees celsius', 'range': 'double', 'aliases': ['surf water temp mean'], 'mappings': []}, 'surfWaterTempMinimum': {'slot_uri': 'neon:surfWaterTempMinimum', 'description': 'Minimum temperature of surface water in degrees celsius', 'range': 'double', 'aliases': ['surf water temp minimum'], 'mappings': []}, 'surfWaterTempMaximum': {'slot_uri': 'neon:surfWaterTempMaximum', 'description': 'Maximum temperature of surface water in degrees celsius', 'range': 'double', 'aliases': ['surf water temp maximum'], 'mappings': []}, 'surfWaterTempVariance': {'slot_uri': 'neon:surfWaterTempVariance', 'description': 'Variance in temperature of surface water in degrees celsius', 'range': 'double', 'aliases': ['surf water temp variance'], 'mappings': []}, 'surfWaterTempNumPts': {'slot_uri': 'neon:surfWaterTempNumPts', 'description': 'Number of points used to calculate the arithmetic mean of temperature of surface water in degrees celsius', 'range': 'double', 'aliases': ['surf water temp num pts'], 'mappings': []}, 'surfWaterTempStdErMean': {'slot_uri': 'neon:surfWaterTempStdErMean', 'description': 'Standard error of the mean for temperature of surface water in degrees celsius', 'range': 'double', 'aliases': ['surf water temp std er mean'], 'mappings': []}, 'rawNitrateSingleCompressedStream': {'slot_uri': 'neon:rawNitrateSingleCompressedStream', 'description': 'Single compressed data stream from SUNA to be parsed at NEON headquarters', 'range': 'string', 'aliases': ['raw nitrate single compressed stream'], 'mappings': []}, 'parentSampleID': {'slot_uri': 'neon:parentSampleID', 'description': 'Parent sampleID of sample being processed', 'range': 'string', 'aliases': ['parent sample i d'], 'mappings': []}, 'lakeWaterTemp1': {'slot_uri': 'neon:lakeWaterTemp1', 'description': 'Water temperature of a single lake sample collected below the surface; the water temperature of the upper sample for a composite lake sample collected below the surface', 'range': 'double', 'aliases': ['lake water temp1'], 'mappings': []}, 'lakeWaterTemp2': {'slot_uri': 'neon:lakeWaterTemp2', 'description': 'Water temperature of the lower sample for a composite lake sample collected below the surface', 'range': 'double', 'aliases': ['lake water temp2'], 'mappings': []}, 'lakeSampleDepth1': {'slot_uri': 'neon:lakeSampleDepth1', 'description': 'Sample depth of a single lake sample collected below the surface; the sample depth of the upper sample for a composite lake sample collected below the surface', 'range': 'double', 'aliases': ['lake sample depth1'], 'mappings': []}, 'lakeSampleDepth2': {'slot_uri': 'neon:lakeSampleDepth2', 'description': 'Sample depth of the lower sample for a composite lake sample collected below the surface', 'range': 'double', 'aliases': ['lake sample depth2'], 'mappings': []}, 'equilibratedAirSampleID': {'slot_uri': 'neon:equilibratedAirSampleID', 'description': 'Identifier for sample of air that has been equilibrated with water (i.e., a mixture)', 'range': 'string', 'aliases': ['equilibrated air sample i d'], 'mappings': []}, 'referenceAirSampleID': {'slot_uri': 'neon:referenceAirSampleID', 'description': 'Identifier for sample of reference air', 'range': 'string', 'aliases': ['reference air sample i d'], 'mappings': []}, 'storageWaterTemp': {'slot_uri': 'neon:storageWaterTemp', 'description': 'Temperature of storage water', 'range': 'double', 'aliases': ['storage water temp'], 'mappings': []}, 'ptBarometricPressure': {'slot_uri': 'neon:ptBarometricPressure', 'description': 'Point (pt)-based barometric pressure, measured by a handheld device during sampling activity', 'range': 'double', 'aliases': ['pt barometric pressure'], 'mappings': []}, 'waterVolumeSyringe': {'slot_uri': 'neon:waterVolumeSyringe', 'description': 'Volume of water in syringe', 'range': 'double', 'aliases': ['water volume syringe'], 'mappings': []}, 'gasVolumeSyringe': {'slot_uri': 'neon:gasVolumeSyringe', 'description': 'Volume of air in syringe', 'range': 'double', 'aliases': ['gas volume syringe'], 'mappings': []}, 'airVolumeSample': {'slot_uri': 'neon:airVolumeSample', 'description': 'Volume of background air injected into sample vial', 'range': 'double', 'aliases': ['air volume sample'], 'mappings': []}, 'gasVolumeSample': {'slot_uri': 'neon:gasVolumeSample', 'description': 'Volume of sample gas injected into sample vial', 'range': 'double', 'aliases': ['gas volume sample'], 'mappings': []}, 'analysisDate': {'slot_uri': 'neon:analysisDate', 'description': 'Date that the sample was analyzed', 'range': 'time', 'aliases': ['analysis date'], 'mappings': []}, 'internalSampleName': {'slot_uri': 'neon:internalSampleName', 'description': 'Internal lab specific identifier', 'range': 'string', 'aliases': ['internal sample name'], 'mappings': []}, 'internalLabFileName': {'slot_uri': 'neon:internalLabFileName', 'description': 'Internal lab specific file name for raw data', 'range': 'string', 'aliases': ['internal lab file name'], 'mappings': []}, 'concentrationCH4': {'slot_uri': 'neon:concentrationCH4', 'description': 'Concentration of CH4 in sample', 'range': 'double', 'aliases': ['concentration c h4'], 'mappings': []}, 'concentrationCO2': {'slot_uri': 'neon:concentrationCO2', 'description': 'Concentration of CO2 in sample', 'range': 'double', 'aliases': ['concentration c o2'], 'mappings': []}, 'concentrationN2O': {'slot_uri': 'neon:concentrationN2O', 'description': 'Concentration of N2O in sample', 'range': 'double', 'aliases': ['concentration n2 o'], 'mappings': []}, 'volumeGasAnalyzed': {'slot_uri': 'neon:volumeGasAnalyzed', 'description': 'Amount of gas sample analyzed', 'range': 'double', 'aliases': ['volume gas analyzed'], 'mappings': []}, 'CH4RT': {'slot_uri': 'neon:CH4RT', 'description': 'Retention time of CH4', 'range': 'double', 'aliases': ['c h4 r t'], 'mappings': []}, 'CH4Area': {'slot_uri': 'neon:CH4Area', 'description': 'Area of CH4 peak', 'range': 'double', 'aliases': ['c h4 area'], 'mappings': []}, 'CH4Height': {'slot_uri': 'neon:CH4Height', 'description': 'Height of CH4 peak', 'range': 'double', 'aliases': ['c h4 height'], 'mappings': []}, 'CH4Amount': {'slot_uri': 'neon:CH4Amount', 'description': 'Amount of CH4 in sample', 'range': 'double', 'aliases': ['c h4 amount'], 'mappings': []}, 'CO2RT': {'slot_uri': 'neon:CO2RT', 'description': 'Retention time of CO2', 'range': 'double', 'aliases': ['c o2 r t'], 'mappings': []}, 'CO2Area': {'slot_uri': 'neon:CO2Area', 'description': 'Area of CO2 peak', 'range': 'double', 'aliases': ['c o2 area'], 'mappings': []}, 'CO2Height': {'slot_uri': 'neon:CO2Height', 'description': 'Height of CO2 peak', 'range': 'double', 'aliases': ['c o2 height'], 'mappings': []}, 'CO2Amount': {'slot_uri': 'neon:CO2Amount', 'description': 'Amount of CO2 in sample', 'range': 'double', 'aliases': ['c o2 amount'], 'mappings': []}, 'N2ORT': {'slot_uri': 'neon:N2ORT', 'description': 'Retention time of N2O', 'range': 'double', 'aliases': ['n2 o r t'], 'mappings': []}, 'N2OArea': {'slot_uri': 'neon:N2OArea', 'description': 'Area of N2O peak', 'range': 'double', 'aliases': ['n2 o area'], 'mappings': []}, 'N2OHeight': {'slot_uri': 'neon:N2OHeight', 'description': 'Height of N2O peak', 'range': 'double', 'aliases': ['n2 o height'], 'mappings': []}, 'N2OAmount': {'slot_uri': 'neon:N2OAmount', 'description': 'Amount of N2O in sample', 'range': 'double', 'aliases': ['n2 o amount'], 'mappings': []}, 'runDetectionLimitCH4': {'slot_uri': 'neon:runDetectionLimitCH4', 'description': 'Run detection limit - CH4ppm', 'range': 'double', 'aliases': ['run detection limit c h4'], 'mappings': []}, 'runDetectionLimitCO2': {'slot_uri': 'neon:runDetectionLimitCO2', 'description': 'Run detection limit - CO2ppm', 'range': 'double', 'aliases': ['run detection limit c o2'], 'mappings': []}, 'runDetectionLimitN2O': {'slot_uri': 'neon:runDetectionLimitN2O', 'description': 'Run detection limit - N2Oppm', 'range': 'double', 'aliases': ['run detection limit n2 o'], 'mappings': []}, 'precisionCH4': {'slot_uri': 'neon:precisionCH4', 'description': 'Precision (CV%) - CH4ppm', 'range': 'double', 'aliases': ['precision c h4'], 'mappings': []}, 'precisionCO2': {'slot_uri': 'neon:precisionCO2', 'description': 'Precision (CV%) - CO2ppm', 'range': 'double', 'aliases': ['precision c o2'], 'mappings': []}, 'precisionN2O': {'slot_uri': 'neon:precisionN2O', 'description': 'Precision (CV%) - N2Oppm', 'range': 'double', 'aliases': ['precision n2 o'], 'mappings': []}, 'gasStandardAccuracy': {'slot_uri': 'neon:gasStandardAccuracy', 'description': 'Accuracy of standards used for gas calibration', 'range': 'double', 'aliases': ['gas standard accuracy'], 'mappings': []}, 'methodCH4': {'slot_uri': 'neon:methodCH4', 'description': 'Method for CH4 analysis', 'range': 'string', 'aliases': ['method c h4'], 'mappings': []}, 'methodDetectionLimitCH4': {'slot_uri': 'neon:methodDetectionLimitCH4', 'description': 'Method Detection Limit for CH4', 'range': 'double', 'aliases': ['method detection limit c h4'], 'mappings': []}, 'methodCO2': {'slot_uri': 'neon:methodCO2', 'description': 'Method for CO2 analysis', 'range': 'string', 'aliases': ['method c o2'], 'mappings': []}, 'methodDetectionLimitCO2': {'slot_uri': 'neon:methodDetectionLimitCO2', 'description': 'Method Detection Limit for CO2', 'range': 'double', 'aliases': ['method detection limit c o2'], 'mappings': []}, 'methodN2O': {'slot_uri': 'neon:methodN2O', 'description': 'Method for N2O analysis', 'range': 'string', 'aliases': ['method n2 o'], 'mappings': []}, 'methodDetectionLimitN2O': {'slot_uri': 'neon:methodDetectionLimitN2O', 'description': 'Method Detection Limit for N2O', 'range': 'double', 'aliases': ['method detection limit n2 o'], 'mappings': []}, 'internalLabQAQC': {'slot_uri': 'neon:internalLabQAQC', 'description': 'Free form notes on additional lab QA/QC', 'range': 'string', 'aliases': ['internal lab q a q c'], 'mappings': []}, 'instrumentCH4N2O': {'slot_uri': 'neon:instrumentCH4N2O', 'description': 'Type of instrument used to analyze CH4 and N2O', 'range': 'string', 'aliases': ['instrument c h4 n2 o'], 'mappings': []}, 'instrumentCO2': {'slot_uri': 'neon:instrumentCO2', 'description': 'Type of instrument used to analyze CO2', 'range': 'string', 'aliases': ['instrument c o2'], 'mappings': []}, 'changeLog': {'slot_uri': 'neon:changeLog', 'description': 'Free form notes that describe changes made from the previous version of the summary file, e.g. specific hardware, method process or software changes', 'range': 'string', 'aliases': ['change log'], 'mappings': []}, 'analyzedBy': {'slot_uri': 'neon:analyzedBy', 'description': 'Name of lab personnel analyzing sample', 'range': 'string', 'aliases': ['analyzed by'], 'mappings': []}, 'dissolvedCH4': {'slot_uri': 'neon:dissolvedCH4', 'description': 'Concentration of dissolved CH4 in water calculated from reference air and water equilibrated air samples', 'range': 'double', 'aliases': ['dissolved c h4'], 'mappings': []}, 'dissolvedCO2': {'slot_uri': 'neon:dissolvedCO2', 'description': 'Concentration of dissolved CO2 in water calculated from reference air and water equilibrated air samples', 'range': 'double', 'aliases': ['dissolved c o2'], 'mappings': []}, 'dissolvedN2O': {'slot_uri': 'neon:dissolvedN2O', 'description': 'Concentration of dissolved N2O in water calculated from reference air and water equilibrated air samples', 'range': 'double', 'aliases': ['dissolved n2 o'], 'mappings': []}, 'rawWaterCO2': {'slot_uri': 'neon:rawWaterCO2', 'description': 'Concentration of CO2 in water equilibrated gas sample from external lab', 'range': 'double', 'aliases': ['raw water c o2'], 'mappings': []}, 'rawWaterCH4': {'slot_uri': 'neon:rawWaterCH4', 'description': 'Concentration of CH4 in water equilibrated gas sample from external lab', 'range': 'double', 'aliases': ['raw water c h4'], 'mappings': []}, 'rawWaterN2O': {'slot_uri': 'neon:rawWaterN2O', 'description': 'Concentration of N2O in water equilibrated gas sample from external lab', 'range': 'double', 'aliases': ['raw water n2 o'], 'mappings': []}, 'rawAirCO2': {'slot_uri': 'neon:rawAirCO2', 'description': 'Concentration of CO2 in reference air gas sample from external lab', 'range': 'double', 'aliases': ['raw air c o2'], 'mappings': []}, 'rawAirCH4': {'slot_uri': 'neon:rawAirCH4', 'description': 'Concentration of CH4 in reference air gas sample from external lab', 'range': 'double', 'aliases': ['raw air c h4'], 'mappings': []}, 'rawAirN2O': {'slot_uri': 'neon:rawAirN2O', 'description': 'Concentration of N2O in reference air gas sample from external lab', 'range': 'double', 'aliases': ['raw air n2 o'], 'mappings': []}, 'volumeRatioAssumedQF': {'slot_uri': 'neon:volumeRatioAssumedQF', 'description': 'Quality Flag for the volumes of a mixture not being explicitly specified - Domain Lab Data', 'range': 'integer', 'aliases': ['volume ratio assumed q f'], 'mappings': []}, 'lowGasVolumeQF': {'slot_uri': 'neon:lowGasVolumeQF', 'description': 'Quality flag for low gas volume injected into evacuated vial', 'range': 'integer', 'aliases': ['low gas volume q f'], 'mappings': []}, 'lowAirVolumeQF': {'slot_uri': 'neon:lowAirVolumeQF', 'description': 'Quality flag for low air volume injected into evacuated vial', 'range': 'integer', 'aliases': ['low air volume q f'], 'mappings': []}, 'sdgDuplicateRecordGroupQF': {'slot_uri': 'neon:sdgDuplicateRecordGroupQF', 'description': 'Concatenated duplicate record quality flag for the processing of dissolved gas in water data. A quality flag of 0 indicates no duplicate values. A quality flag of 1 indicates reconcilable duplicates, i.e. identical, and only one of the duplicates is reported. A quality flag of 2 indicates irreconcilable duplicates and all are reported. A quality flag of -1 indicates the absence of a sample of that type. From left to right the duplicates indicate: duplicate sampleID of sampleClass gas" in the externalLabData_in table', 'range': 'string', 'aliases': ['sdg duplicate record group q f'], 'mappings': []}, 'instStat': {'slot_uri': 'neon:instStat', 'description': 'Instrument status bit (963 = good, other values indicate either temperature or pressure is not stable)', 'range': 'integer', 'aliases': ['inst stat'], 'mappings': []}, 'presCavi': {'slot_uri': 'neon:presCavi', 'description': 'Pressure of instrument cavity', 'range': 'double', 'aliases': ['pres cavi'], 'mappings': []}, 'tempCavi': {'slot_uri': 'neon:tempCavi', 'description': 'Temperature of instrument cavity', 'range': 'double', 'aliases': ['temp cavi'], 'mappings': []}, 'tempDas': {'slot_uri': 'neon:tempDas', 'description': 'Temperature inside chassis', 'range': 'double', 'aliases': ['temp das'], 'mappings': []}, 'tempEtal': {'slot_uri': 'neon:tempEtal', 'description': 'Temperature of Etalon', 'range': 'double', 'aliases': ['temp etal'], 'mappings': []}, 'tempWarmBox': {'slot_uri': 'neon:tempWarmBox', 'description': 'Temperature of the warm box" - the temperature-controlled electronics and wavelength monitor chamber"', 'range': 'double', 'aliases': ['temp warm box'], 'mappings': []}, 'posiMPV': {'slot_uri': 'neon:posiMPV', 'description': 'State of external rotary valve (if attached), 0-n for an n-port rotary valve', 'range': 'double', 'aliases': ['posi m p v'], 'mappings': []}, 'valvOutl': {'slot_uri': 'neon:valvOutl', 'description': 'Digitizer value of outlet proportional valve, max open = 65000, closed = 0', 'range': 'double', 'aliases': ['valv outl'], 'mappings': []}, 'valvSol': {'slot_uri': 'neon:valvSol', 'description': 'State of external solenoid valves (if attached)', 'range': 'double', 'aliases': ['valv sol'], 'mappings': []}, 'specID': {'slot_uri': 'neon:specID', 'description': 'Identity of the spectrum being collected at a point in time; used to identify gas species being analyzed', 'range': 'double', 'aliases': ['spec i d'], 'mappings': []}, 'fwMoleCO2': {'slot_uri': 'neon:fwMoleCO2', 'description': 'Total wet mole fraction (fw) of CO2 in the air', 'range': 'double', 'aliases': ['fw mole c o2'], 'mappings': []}, 'fwMole12CO2': {'slot_uri': 'neon:fwMole12CO2', 'description': 'Total wet mole fraction (fw) of 12CO2 in the air', 'range': 'double', 'aliases': ['fw mole12 c o2'], 'mappings': []}, 'fdMole12CO2': {'slot_uri': 'neon:fdMole12CO2', 'description': 'Dry molar fraction (fd) of 12CO2 in the air', 'range': 'double', 'aliases': ['fd mole12 c o2'], 'mappings': []}, 'fwMole13CO2': {'slot_uri': 'neon:fwMole13CO2', 'description': 'Total wet mole fraction (fw) of 13CO2 in the air', 'range': 'double', 'aliases': ['fw mole13 c o2'], 'mappings': []}, 'fdMole13CO2': {'slot_uri': 'neon:fdMole13CO2', 'description': 'Dry molar fraction (fd) of 13CO2 in the air', 'range': 'double', 'aliases': ['fd mole13 c o2'], 'mappings': []}, '2Mind13CO2': {'slot_uri': 'neon:2Mind13CO2', 'description': 'Measure of the ratio of stable isotopes 13C:12C in CO2, relative to the Vienna Pee Dee Belemnite with 2 minute box averaging', 'range': 'double', 'aliases': ['2 mind13 c o2'], 'mappings': []}, '30Secd13CO2': {'slot_uri': 'neon:30Secd13CO2', 'description': 'Measure of the ratio of stable isotopes 13C:12C in CO2, relative to the Vienna Pee Dee Belemnite with 30 second box averaging', 'range': 'double', 'aliases': ['30 secd13 c o2'], 'mappings': []}, '5Mind13CO2': {'slot_uri': 'neon:5Mind13CO2', 'description': 'Measure of the ratio of stable isotopes 13C:12C in CO2, relative to the Vienna Pee Dee Belemnite with 5 minute box averaging', 'range': 'double', 'aliases': ['5 mind13 c o2'], 'mappings': []}, 'd13CO2': {'slot_uri': 'neon:d13CO2', 'description': 'Measure of the ratio of stable isotopes 13C:12C in CO2, relative to the Vienna Pee Dee Belemnite', 'range': 'double', 'aliases': ['d13 c o2'], 'mappings': []}, 'percentFwMoleH2O': {'slot_uri': 'neon:percentFwMoleH2O', 'description': 'Total wet mole fraction (fw) in percent of water vapor (H2O) in the air', 'range': 'double', 'aliases': ['percent fw mole h2 o'], 'mappings': []}, '2MinCO2IsoRatio': {'slot_uri': 'neon:2MinCO2IsoRatio', 'description': 'The isotopic ratio of 13CO2/12CO2 with 2 minute box averaging', 'range': 'double', 'aliases': ['2 min c o2 iso ratio'], 'mappings': []}, '30SecCO2IsoRatio': {'slot_uri': 'neon:30SecCO2IsoRatio', 'description': 'The isotopic ratio of 13CO2/12CO2 with 30 seconds box averaging', 'range': 'double', 'aliases': ['30 sec c o2 iso ratio'], 'mappings': []}, '5MinCO2IsoRatio': {'slot_uri': 'neon:5MinCO2IsoRatio', 'description': 'The isotopic ratio of 13CO2/12CO2 with 5 minute box averaging', 'range': 'double', 'aliases': ['5 min c o2 iso ratio'], 'mappings': []}, 'CO2IsoRatio': {'slot_uri': 'neon:CO2IsoRatio', 'description': 'The isotopic ratio of 13CO2/12CO2 without any averaging', 'range': 'double', 'aliases': ['c o2 iso ratio'], 'mappings': []}, 'fwMoleCH4': {'slot_uri': 'neon:fwMoleCH4', 'description': 'Total molar fraction of methane (CH4) in the air; used for correction of the isotopic CO2 measure for methane crosstalk', 'range': 'double', 'aliases': ['fw mole c h4'], 'mappings': []}, 'fdMoleCH4': {'slot_uri': 'neon:fdMoleCH4', 'description': 'Dry molar fraction of methane (CH4) in the air', 'range': 'double', 'aliases': ['fd mole c h4'], 'mappings': []}, 'fwMoleHPCH4': {'slot_uri': 'neon:fwMoleHPCH4', 'description': 'High precision total molar fraction of methane (CH4) in the air based on the 12CH4 peak', 'range': 'double', 'aliases': ['fw mole h p c h4'], 'mappings': []}, 'fdMoleHPCH4': {'slot_uri': 'neon:fdMoleHPCH4', 'description': 'High precision dry molar fraction of methane (CH4) in the air based on the 12CH4 peak', 'range': 'double', 'aliases': ['fd mole h p c h4'], 'mappings': []}, 'peakHeigH2O': {'slot_uri': 'neon:peakHeigH2O', 'description': 'Peak height of H2O line, peak height of the H2O feature used for the H2O concentration', 'range': 'double', 'aliases': ['peak heig h2 o'], 'mappings': []}, 'spliFitCH4': {'slot_uri': 'neon:spliFitCH4', 'description': 'Maximum of the spline fit to the CH4 line, used to calculate methane concentration', 'range': 'double', 'aliases': ['spli fit c h4'], 'mappings': []}, 'peakHeig12C': {'slot_uri': 'neon:peakHeig12C', 'description': 'Peak height of 12C line', 'range': 'double', 'aliases': ['peak heig12 c'], 'mappings': []}, 'peakHeig13C': {'slot_uri': 'neon:peakHeig13C', 'description': 'Peak height of 13C line', 'range': 'double', 'aliases': ['peak heig13 c'], 'mappings': []}, 'valvMask': {'slot_uri': 'neon:valvMask', 'description': 'State of external solenoid valves if attached, as a decimal representation of valves 1-6 where each valve is a binary bit (e.g., valve 1 = 1, valve 2 = 2, valve 3 = 4, etc. and the values are added)', 'range': 'double', 'aliases': ['valv mask'], 'mappings': []}, 'ppmvFwMoleH2O': {'slot_uri': 'neon:ppmvFwMoleH2O', 'description': 'Total wet mole fraction (fw) of water vapor (H2O) in the air', 'range': 'double', 'aliases': ['ppmv fw mole h2 o'], 'mappings': []}, 'N2Flag': {'slot_uri': 'neon:N2Flag', 'description': 'Signal to indicate if the instrument is processing the data for N2 gas or background air. 0=air mode, 1=N2 mode', 'range': 'double', 'aliases': ['n2 flag'], 'mappings': []}, 'baseShift': {'slot_uri': 'neon:baseShift', 'description': 'Change in constant term of fitted baseline relative to the empty cavity baseline measured at the factory', 'range': 'double', 'aliases': ['base shift'], 'mappings': []}, 'slopShift': {'slot_uri': 'neon:slopShift', 'description': 'Change in linear term of fitted baseline relative to the empty cavity baseline measured at the factory', 'range': 'double', 'aliases': ['slop shift'], 'mappings': []}, 'resiRMS': {'slot_uri': 'neon:resiRMS', 'description': 'Root mean square (RMS) residuals of the least-squares fit', 'range': 'double', 'aliases': ['resi r m s'], 'mappings': []}, 'tempHut': {'slot_uri': 'neon:tempHut', 'description': 'Temperature in the instrument hut', 'range': 'double', 'aliases': ['temp hut'], 'mappings': []}, 'RHHut': {'slot_uri': 'neon:RHHut', 'description': 'Humidity in the instrument hut', 'range': 'double', 'aliases': ['r h hut'], 'mappings': []}, 'baroPresHut': {'slot_uri': 'neon:baroPresHut', 'description': 'Barometric pressure in the instrument hut', 'range': 'double', 'aliases': ['baro pres hut'], 'mappings': []}, 'H2OMixRatioHut': {'slot_uri': 'neon:H2OMixRatioHut', 'description': 'Mixing ratio of water vapor (H2O) in the instrument hut', 'range': 'double', 'aliases': ['h2 o mix ratio hut'], 'mappings': []}, 'fwMoleH2O': {'slot_uri': 'neon:fwMoleH2O', 'description': 'Total wet mole fraction (fw) of water vapor (H2O) in the air', 'range': 'double', 'aliases': ['fw mole h2 o'], 'mappings': []}, 'tempCell': {'slot_uri': 'neon:tempCell', 'description': 'Temperature (temp) of the optical cell', 'range': 'double', 'aliases': ['temp cell'], 'mappings': []}, 'presCell': {'slot_uri': 'neon:presCell', 'description': 'Pressure (pres) of the optical cell', 'range': 'double', 'aliases': ['pres cell'], 'mappings': []}, 'pumpVoltage': {'slot_uri': 'neon:pumpVoltage', 'description': 'Voltage provided to pump', 'range': 'double', 'aliases': ['pump voltage'], 'mappings': []}, 'valvStat1': {'slot_uri': 'neon:valvStat1', 'description': 'Solenoid valve 1 status (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv stat1'], 'mappings': []}, 'valvStat2': {'slot_uri': 'neon:valvStat2', 'description': 'Solenoid valve 2 status (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv stat2'], 'mappings': []}, 'valvStat3': {'slot_uri': 'neon:valvStat3', 'description': 'Solenoid valve 3 status (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv stat3'], 'mappings': []}, 'valvStat4': {'slot_uri': 'neon:valvStat4', 'description': 'Solenoid valve 4 status (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv stat4'], 'mappings': []}, 'valvStat5': {'slot_uri': 'neon:valvStat5', 'description': 'Solenoid valve 5 status (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv stat5'], 'mappings': []}, 'valvStat6': {'slot_uri': 'neon:valvStat6', 'description': 'Solenoid valve 6 status (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv stat6'], 'mappings': []}, 'valvStat7': {'slot_uri': 'neon:valvStat7', 'description': 'Solenoid valve 7 status (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv stat7'], 'mappings': []}, 'valvStat8': {'slot_uri': 'neon:valvStat8', 'description': 'Solenoid valve 8 status (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv stat8'], 'mappings': []}, 'valvCmd1': {'slot_uri': 'neon:valvCmd1', 'description': 'Solenoid valve 1 command (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv cmd1'], 'mappings': []}, 'valvCmd2': {'slot_uri': 'neon:valvCmd2', 'description': 'Solenoid valve 2 command (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv cmd2'], 'mappings': []}, 'valvCmd3': {'slot_uri': 'neon:valvCmd3', 'description': 'Solenoid valve 3 command (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv cmd3'], 'mappings': []}, 'valvCmd4': {'slot_uri': 'neon:valvCmd4', 'description': 'Solenoid valve 4 command (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv cmd4'], 'mappings': []}, 'valvCmd5': {'slot_uri': 'neon:valvCmd5', 'description': 'Solenoid valve 5 command (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv cmd5'], 'mappings': []}, 'valvCmd6': {'slot_uri': 'neon:valvCmd6', 'description': 'Solenoid valve 6 command (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv cmd6'], 'mappings': []}, 'valvCmd7': {'slot_uri': 'neon:valvCmd7', 'description': 'Solenoid valve 7 command (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv cmd7'], 'mappings': []}, 'valvCmd8': {'slot_uri': 'neon:valvCmd8', 'description': 'Solenoid valve 8 command (0 = close, 1 = open)', 'range': 'integer', 'aliases': ['valv cmd8'], 'mappings': []}, 'd18OWater': {'slot_uri': 'neon:d18OWater', 'description': 'Measure of the ratio of stable isotopes 18O:16O in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d18 o water'], 'mappings': []}, 'd2HWater': {'slot_uri': 'neon:d2HWater', 'description': 'Measure of the ratio of stable isotopes 2H:1H in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d2 h water'], 'mappings': []}, 'sdgSamplingProtocolVersion': {'slot_uri': 'neon:sdgSamplingProtocolVersion', 'description': 'The NEON document number and version of the dissolved gas protocol where detailed information regarding the sampling method used is available; format NEON.DOC.######vX', 'range': 'string', 'aliases': ['sdg sampling protocol version'], 'mappings': []}, 'asiSamplingProtocolVersion': {'slot_uri': 'neon:asiSamplingProtocolVersion', 'description': 'The NEON document number and version of the aquatic stable isotopes protocol where detailed information regarding the sampling method used is available; format NEON.DOC.######vX', 'range': 'string', 'aliases': ['asi sampling protocol version'], 'mappings': []}, 'H2OIsotopeSampleCollected': {'slot_uri': 'neon:H2OIsotopeSampleCollected', 'description': 'Indicator of whether a sample was collected for H2O isotope analysis', 'range': 'string', 'aliases': ['h2 o isotope sample collected'], 'mappings': []}, 'processedDateH2OIsotopes': {'slot_uri': 'neon:processedDateH2OIsotopes', 'description': 'Date or date and time of processing event of H2O isotope sample', 'range': 'time', 'aliases': ['processed date h2 o isotopes'], 'mappings': []}, 'processedDateFilters': {'slot_uri': 'neon:processedDateFilters', 'description': 'Date or date and time of processing event of filtered samples', 'range': 'time', 'aliases': ['processed date filters'], 'mappings': []}, 'sampleVolumeFilteredPOMRep1': {'slot_uri': 'neon:sampleVolumeFilteredPOMRep1', 'description': 'Volume of water filtered through the filter for particulate organic matter (POM) replicate 1 for isotope external analysis', 'range': 'double', 'aliases': ['sample volume filtered p o m rep1'], 'mappings': []}, 'sampleVolumeFilteredPOMRep2': {'slot_uri': 'neon:sampleVolumeFilteredPOMRep2', 'description': 'Volume of water filtered through the filter for particulate organic matter (POM) replicate 2 for isotope external analysis', 'range': 'double', 'aliases': ['sample volume filtered p o m rep2'], 'mappings': []}, 'isotopeH2OSampleID': {'slot_uri': 'neon:isotopeH2OSampleID', 'description': 'Identifier of sample for 2H:1H and 18O:16O water stable isotope sample', 'range': 'string', 'aliases': ['isotope h2 o sample i d'], 'mappings': []}, 'isotopePOMSampleID': {'slot_uri': 'neon:isotopePOMSampleID', 'description': 'Identifier of sample for 13C:12C and 15N:14N particulate organic matter (POM) stable isotope sample', 'range': 'string', 'aliases': ['isotope p o m sample i d'], 'mappings': []}, 'isotopePOMRep2SampleID': {'slot_uri': 'neon:isotopePOMRep2SampleID', 'description': 'Identifier of sample for 13C:12C and 15N:14N particulate organic matter (POM) stable isotope sample for replicate 2', 'range': 'string', 'aliases': ['isotope p o m rep2 sample i d'], 'mappings': []}, 'sampleNumber': {'slot_uri': 'neon:sampleNumber', 'description': 'Number of sample collected', 'range': 'string', 'aliases': ['sample number'], 'mappings': []}, 'substratumSizeClass': {'slot_uri': 'neon:substratumSizeClass', 'description': 'Size class of the substratum sampled', 'range': 'string', 'aliases': ['substratum size class'], 'mappings': []}, 'ponarDepth': {'slot_uri': 'neon:ponarDepth', 'description': 'Depth of petite ponar sample', 'range': 'double', 'aliases': ['ponar depth'], 'mappings': []}, 'snagLength': {'slot_uri': 'neon:snagLength', 'description': 'Length of snag sampled', 'range': 'double', 'aliases': ['snag length'], 'mappings': []}, 'snagDiameter': {'slot_uri': 'neon:snagDiameter', 'description': 'Diameter of snag sampled', 'range': 'double', 'aliases': ['snag diameter'], 'mappings': []}, 'subsamplePercent': {'slot_uri': 'neon:subsamplePercent', 'description': 'Percent of the total sample contained in the subsample', 'range': 'double', 'aliases': ['subsample percent'], 'mappings': []}, 'qcSortDate': {'slot_uri': 'neon:qcSortDate', 'description': 'Date sample sorted for QC', 'range': 'time', 'aliases': ['qc sort date'], 'mappings': []}, 'primaryMatrix': {'slot_uri': 'neon:primaryMatrix', 'description': 'Primary material in the sample', 'range': 'string', 'aliases': ['primary matrix'], 'mappings': []}, 'preRinseVolume': {'slot_uri': 'neon:preRinseVolume', 'description': 'Estimated volume of sample upon arrival at lab', 'range': 'double', 'aliases': ['pre rinse volume'], 'mappings': []}, 'postRinseVolume': {'slot_uri': 'neon:postRinseVolume', 'description': 'Estimated volume of sample after preservative has been rinsed', 'range': 'double', 'aliases': ['post rinse volume'], 'mappings': []}, 'qcSortedBy': {'slot_uri': 'neon:qcSortedBy', 'description': 'Anonymized name of lab personnel sorting for QC', 'range': 'string', 'aliases': ['qc sorted by'], 'mappings': []}, 'qcPercentSimilarity': {'slot_uri': 'neon:qcPercentSimilarity', 'description': 'Percent similarity of original taxonomy report and QC taxonomy report (identification + count)', 'range': 'double', 'aliases': ['qc percent similarity'], 'mappings': []}, 'benchRemarks': {'slot_uri': 'neon:benchRemarks', 'description': 'Lab technician notes; free text accompanying the record', 'range': 'string', 'aliases': ['bench remarks'], 'mappings': []}, 'invertebrateLifeStage': {'slot_uri': 'neon:invertebrateLifeStage', 'description': 'Macroinvertebrate stage of development (larva, pupa, adult)', 'range': 'string', 'aliases': ['invertebrate life stage'], 'mappings': []}, 'sizeClass': {'slot_uri': 'neon:sizeClass', 'description': 'Size class of individual(s)', 'range': 'string', 'aliases': ['size class'], 'mappings': []}, 'immatureSpecimen': {'slot_uri': 'neon:immatureSpecimen', 'description': 'Sample contains immature specimen(s) for which target level of identification cannot be achieved', 'range': 'string', 'aliases': ['immature specimen'], 'mappings': []}, 'indeterminateSpecimen': {'slot_uri': 'neon:indeterminateSpecimen', 'description': 'Specimens are not well-described in the literature, not all taxa for a group are included in the literature, or observed characters are such that they do not fit described taxa. See accompanying identificationRemarks', 'range': 'string', 'aliases': ['indeterminate specimen'], 'mappings': []}, 'distinctTaxon': {'slot_uri': 'neon:distinctTaxon', 'description': 'Taxon is known to be distinct within the sample, used for species richness metrics', 'range': 'string', 'aliases': ['distinct taxon'], 'mappings': []}, 'qcSortingEfficacy': {'slot_uri': 'neon:qcSortingEfficacy', 'description': 'Total percent of sample recovered, verified by QC process', 'range': 'double', 'aliases': ['qc sorting efficacy'], 'mappings': []}, 'qcIterationCount': {'slot_uri': 'neon:qcIterationCount', 'description': 'Number of iterations of QC process performed', 'range': 'string', 'aliases': ['qc iteration count'], 'mappings': []}, 'qcChecked': {'slot_uri': 'neon:qcChecked', 'description': 'Whether or not QC procedure was performed', 'range': 'string', 'aliases': ['qc checked'], 'mappings': []}, 'indeterminateSpecies': {'slot_uri': 'neon:indeterminateSpecies', 'description': 'Sample contains specimen(s) not well-described in the literature, not all taxa for a group are included in the literature, or observed characters are such that they do not fit described taxa. See accompanying identificationRemarks', 'range': 'string', 'aliases': ['indeterminate species'], 'mappings': []}, 'notSubsampled': {'slot_uri': 'neon:notSubsampled', 'description': 'Subsampling was not performed (for example, due to relative taxon abundance or rareness within a sample)', 'range': 'string', 'aliases': ['not subsampled'], 'mappings': []}, 'subphylum': {'slot_uri': 'neon:subphylum', 'description': 'The scientific name of the subphylum in which the taxon is classified', 'range': 'string', 'aliases': ['subphylum'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subphylum']}, 'subclass': {'slot_uri': 'neon:subclass', 'description': 'The scientific name of the subclass in which the taxon is classified', 'range': 'string', 'aliases': ['subclass'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subclass']}, 'infraclass': {'slot_uri': 'neon:infraclass', 'description': 'The scientific name of the infraclass in which the taxon is classified', 'range': 'string', 'aliases': ['infraclass'], 'mappings': []}, 'superorder': {'slot_uri': 'neon:superorder', 'description': 'The scientific name of the superorder in which the taxon is classified', 'range': 'string', 'aliases': ['superorder'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/superorder']}, 'suborder': {'slot_uri': 'neon:suborder', 'description': 'The scientific name of the suborder in which the taxon is classified', 'range': 'string', 'aliases': ['suborder'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/suborder']}, 'infraorder': {'slot_uri': 'neon:infraorder', 'description': 'The scientific name of the infraorder in which the taxon is classified', 'range': 'string', 'aliases': ['infraorder'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/infraorder']}, 'superfamily': {'slot_uri': 'neon:superfamily', 'description': 'The scientific name of the superfamily in which the taxon is classified', 'range': 'string', 'aliases': ['superfamily'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/superfamily']}, 'subtribe': {'slot_uri': 'neon:subtribe', 'description': 'The scientific name of the subtribe in which the taxon is classified', 'range': 'string', 'aliases': ['subtribe'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subtribe']}, 'referenceCount': {'slot_uri': 'neon:referenceCount', 'description': 'Number of individuals removed from this sample and placed in reference collection', 'range': 'string', 'aliases': ['reference count'], 'mappings': []}, 'referenceID': {'slot_uri': 'neon:referenceID', 'description': 'Unique identifier associated with the reference collection', 'range': 'string', 'aliases': ['reference i d'], 'mappings': []}, 'fieldRemarks': {'slot_uri': 'neon:fieldRemarks', 'description': 'Field technician notes; free text accompanying the record', 'range': 'string', 'aliases': ['field remarks'], 'mappings': []}, 'estimatedTotalCount': {'slot_uri': 'neon:estimatedTotalCount', 'description': 'Estimated total count of individuals within a sample, of given taxon, life stage, and size class', 'range': 'double', 'aliases': ['estimated total count'], 'mappings': []}, 'estimatedArealCount': {'slot_uri': 'neon:estimatedArealCount', 'description': 'Estimated count of individuals per unit area within a sample, of given taxon, life stage, and size class', 'range': 'double', 'aliases': ['estimated areal count'], 'mappings': []}, 'observerInstitutionName': {'slot_uri': 'neon:observerInstitutionName', 'description': 'The name of the institution with which the observer is affiliated', 'range': 'string', 'aliases': ['observer institution name'], 'mappings': []}, 'technicianID': {'slot_uri': 'neon:technicianID', 'description': 'Unique identifier for technician', 'range': 'string', 'aliases': ['technician i d'], 'mappings': []}, 'fullName': {'slot_uri': 'neon:fullName', 'description': 'Full name of personnel', 'range': 'string', 'aliases': ['full name'], 'mappings': []}, 'evaluationMethod': {'slot_uri': 'neon:evaluationMethod', 'description': 'Method of evaluation for technician', 'range': 'string', 'aliases': ['evaluation method'], 'mappings': []}, 'evaluationScore': {'slot_uri': 'neon:evaluationScore', 'description': 'Score for the evaluation method', 'range': 'string', 'aliases': ['evaluation score'], 'mappings': []}, 'localDate': {'slot_uri': 'neon:localDate', 'description': 'Date of measurement, observation, or collection event (local time zone at sampling location)', 'range': 'string', 'aliases': ['local date'], 'mappings': []}, 'localStartTime': {'slot_uri': 'neon:localStartTime', 'description': 'Time at which sampling is initiated (local time zone at sampling location)', 'range': 'string', 'aliases': ['local start time'], 'mappings': []}, 'startCloudCoverPercentage': {'slot_uri': 'neon:startCloudCoverPercentage', 'description': 'Observer estimate of percent cloud cover at start of sampling', 'range': 'string', 'aliases': ['start cloud cover percentage'], 'mappings': []}, 'endCloudCoverPercentage': {'slot_uri': 'neon:endCloudCoverPercentage', 'description': 'Observer estimate of percent cloud cover at end of sampling', 'range': 'string', 'aliases': ['end cloud cover percentage'], 'mappings': []}, 'startRH': {'slot_uri': 'neon:startRH', 'description': 'Relative humidity as measured by handheld weather meter at the start of sampling', 'range': 'string', 'aliases': ['start r h'], 'mappings': []}, 'endRH': {'slot_uri': 'neon:endRH', 'description': 'Relative humidity as measured by handheld weather meter at the end of sampling', 'range': 'string', 'aliases': ['end r h'], 'mappings': []}, 'observedHabitat': {'slot_uri': 'neon:observedHabitat', 'description': 'Observer assessment of dominant habitat at the sampling point at sampling time', 'range': 'string', 'aliases': ['observed habitat'], 'mappings': []}, 'observedAirTemp': {'slot_uri': 'neon:observedAirTemp', 'description': 'The air temperature measured with a handheld weather meter', 'range': 'double', 'aliases': ['observed air temp'], 'mappings': []}, 'kmPerHourObservedWindSpeed': {'slot_uri': 'neon:kmPerHourObservedWindSpeed', 'description': 'The average wind speed measured with a handheld weather meter, in kilometers per hour', 'range': 'double', 'aliases': ['km per hour observed wind speed'], 'mappings': []}, 'pointCountMinute': {'slot_uri': 'neon:pointCountMinute', 'description': 'The minute of sampling within the point count period', 'range': 'string', 'aliases': ['point count minute'], 'mappings': []}, 'observerDistance': {'slot_uri': 'neon:observerDistance', 'description': 'Radial distance between the observer and the individual(s) being observed', 'range': 'double', 'aliases': ['observer distance'], 'mappings': []}, 'detectionMethod': {'slot_uri': 'neon:detectionMethod', 'description': 'How the individual(s) was (were) first detected by the observer', 'range': 'string', 'aliases': ['detection method'], 'mappings': []}, 'sexOrAge': {'slot_uri': 'neon:sexOrAge', 'description': 'Sex of individual if detectable, age of individual if individual can not be sexed', 'range': 'string', 'aliases': ['sex or age'], 'mappings': []}, 'observedWindSpeed': {'slot_uri': 'neon:observedWindSpeed', 'description': 'The average wind speed measured with a handheld weather meter', 'range': 'double', 'aliases': ['observed wind speed'], 'mappings': []}, 'visualConfirmation': {'slot_uri': 'neon:visualConfirmation', 'description': 'Whether the individual(s) was (were) seen after the initial detection', 'range': 'string', 'aliases': ['visual confirmation'], 'mappings': []}, 'clusterCode': {'slot_uri': 'neon:clusterCode', 'description': 'Alphabetic code (A-Z) linked to clusters (groups of individuals of the same species) spanning multiple records', 'range': 'string', 'aliases': ['cluster code'], 'mappings': []}, 'clusterSize': {'slot_uri': 'neon:clusterSize', 'description': 'Number of individuals in a cluster (a group of individuals of the same species)', 'range': 'string', 'aliases': ['cluster size'], 'mappings': []}, 'pointID': {'slot_uri': 'neon:pointID', 'description': 'Identifier for a point location', 'range': 'string', 'aliases': ['point i d'], 'mappings': []}, 'referencePointPosition': {'slot_uri': 'neon:referencePointPosition', 'description': 'The pointID used to describe the spatial position of the plot', 'range': 'string', 'aliases': ['reference point position'], 'mappings': []}, 'vernacularName': {'slot_uri': 'neon:vernacularName', 'description': 'A common or vernacular name', 'range': 'string', 'aliases': ['vernacular name'], 'mappings': ['http://rs.tdwg.org/dwc/terms/vernacularName']}, 'section': {'slot_uri': 'neon:section', 'description': 'The scientific name of the section in which the organism is classified', 'range': 'string', 'aliases': ['section'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/section']}, 'subkingdom': {'slot_uri': 'neon:subkingdom', 'description': 'The scientific name of the subkingdom in which the taxon is classified', 'range': 'string', 'aliases': ['subkingdom'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subkingdom']}, 'infrakingdom': {'slot_uri': 'neon:infrakingdom', 'description': 'The scientific name of the infrakingdom in which the taxon is classified', 'range': 'string', 'aliases': ['infrakingdom'], 'mappings': []}, 'superdivision': {'slot_uri': 'neon:superdivision', 'description': 'The scientific name of the superdivision in which the taxon is classified', 'range': 'string', 'aliases': ['superdivision'], 'mappings': []}, 'division': {'slot_uri': 'neon:division', 'description': 'The scientific name of the division in which the taxon is classified', 'range': 'string', 'aliases': ['division'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/phylum']}, 'subdivision': {'slot_uri': 'neon:subdivision', 'description': 'The scientific name of the subdivision in which the taxon is classified', 'range': 'string', 'aliases': ['subdivision'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subphylum']}, 'infradivision': {'slot_uri': 'neon:infradivision', 'description': 'The scientific name of the infradivision in which the taxon is classified', 'range': 'string', 'aliases': ['infradivision'], 'mappings': []}, 'parvdivision': {'slot_uri': 'neon:parvdivision', 'description': 'The scientific name of the parvdivision in which the taxon is classified', 'range': 'string', 'aliases': ['parvdivision'], 'mappings': []}, 'superclass': {'slot_uri': 'neon:superclass', 'description': 'The scientific name of the superclass in which the taxon is classified', 'range': 'string', 'aliases': ['superclass'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/superclass']}, 'subsection': {'slot_uri': 'neon:subsection', 'description': 'The scientific name of the subsection in which the organism is classified', 'range': 'string', 'aliases': ['subsection'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subsection']}, 'subspecies': {'slot_uri': 'neon:subspecies', 'description': 'The subspecies (infraspecific name below the rank of infraspecific epithet) of the scientific name applied to the taxon', 'range': 'string', 'aliases': ['subspecies'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subspecies']}, 'subvariety': {'slot_uri': 'neon:subvariety', 'description': 'The subvariety (infraspecific name below the rank of variety) of the scientific name applied to the taxon', 'range': 'string', 'aliases': ['subvariety'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subvariety']}, 'subform': {'slot_uri': 'neon:subform', 'description': 'The subform (infraspecific name below the rank of form) of the scientific name applied to the taxon', 'range': 'string', 'aliases': ['subform'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/subform']}, 'form': {'slot_uri': 'neon:form', 'description': 'The form (infraspecific name below the rank of infraspecific epithet) of the scientific name applied to the taxon', 'range': 'string', 'aliases': ['form'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/form']}, 'speciesGroup': {'slot_uri': 'neon:speciesGroup', 'description': 'The unofficial species group into which the taxon is categorized', 'range': 'string', 'aliases': ['species group'], 'mappings': []}, 'gasCyl': {'slot_uri': 'neon:gasCyl', 'description': 'Dummy term for gas cylinder so gas concentration can be accessed through existing CalVal input system', 'range': 'double', 'aliases': ['gas cyl'], 'mappings': []}, 'tray45Vial': {'slot_uri': 'neon:tray45Vial', 'description': 'Dummy term for L2130-I autosampler tray with 45 vials so concentration can be accessed through existing CalVal input system', 'range': 'double', 'aliases': ['tray45 vial'], 'mappings': []}, 'tray90Vial': {'slot_uri': 'neon:tray90Vial', 'description': 'Dummy term for L2130-I autosampler tray with 90 vials so concentration can be accessed through existing CalVal input system', 'range': 'double', 'aliases': ['tray90 vial'], 'mappings': []}, 'PM15Median': {'slot_uri': 'neon:PM15Median', 'description': 'Median particulate matter 15', 'range': 'double', 'aliases': ['p m15 median'], 'mappings': []}, 'PM15Minimum': {'slot_uri': 'neon:PM15Minimum', 'description': 'Minimum particulate matter 15', 'range': 'double', 'aliases': ['p m15 minimum'], 'mappings': []}, 'PM15Maximum': {'slot_uri': 'neon:PM15Maximum', 'description': 'Maximum particulate matter 15', 'range': 'double', 'aliases': ['p m15 maximum'], 'mappings': []}, 'PM15NumPts': {'slot_uri': 'neon:PM15NumPts', 'description': 'Number of points used to calculate the Median particulate matter 15', 'range': 'double', 'aliases': ['p m15 num pts'], 'mappings': []}, 'PM15MAD': {'slot_uri': 'neon:PM15MAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 15', 'range': 'double', 'aliases': ['p m15 m a d'], 'mappings': []}, 'PM15rangeQAQCRpt': {'slot_uri': 'neon:PM15rangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for particulate matter 15, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15range q a q c rpt'], 'mappings': []}, 'PM15persistenceQAQCRpt': {'slot_uri': 'neon:PM15persistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for particulate matter 15, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15persistence q a q c rpt'], 'mappings': []}, 'PM15stepQAQCRpt': {'slot_uri': 'neon:PM15stepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for particulate matter 15, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15step q a q c rpt'], 'mappings': []}, 'PM15nullQAQCRpt': {'slot_uri': 'neon:PM15nullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for particulate matter 15, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15null q a q c rpt'], 'mappings': []}, 'PM15gapQAQCRpt': {'slot_uri': 'neon:PM15gapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for particulate matter 15, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m15gap q a q c rpt'], 'mappings': []}, 'PM15consistencyQAQCRpt': {'slot_uri': 'neon:PM15consistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for particulate matter 15, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15consistency q a q c rpt'], 'mappings': []}, 'PM15spikeQAQCRpt': {'slot_uri': 'neon:PM15spikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for particulate matter 15, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15spike q a q c rpt'], 'mappings': []}, 'PM15alphaQAQCRpt': {'slot_uri': 'neon:PM15alphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for particulate matter 15, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15alpha q a q c rpt'], 'mappings': []}, 'PM15betaQAQCRpt': {'slot_uri': 'neon:PM15betaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for particulate matter 15, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15beta q a q c rpt'], 'mappings': []}, 'PM15rangeFailQM': {'slot_uri': 'neon:PM15rangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15range fail q m'], 'mappings': []}, 'PM15rangePassQM': {'slot_uri': 'neon:PM15rangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15range pass q m'], 'mappings': []}, 'PM15rangeNAQM': {'slot_uri': 'neon:PM15rangeNAQM', 'description': 'Quality metric that summarizes when the range test for particulate matter 15 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15range n a q m'], 'mappings': []}, 'PM15persistenceFailQM': {'slot_uri': 'neon:PM15persistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15persistence fail q m'], 'mappings': []}, 'PM15persistencePassQM': {'slot_uri': 'neon:PM15persistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15persistence pass q m'], 'mappings': []}, 'PM15persistenceNAQM': {'slot_uri': 'neon:PM15persistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for particulate matter 15 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15persistence n a q m'], 'mappings': []}, 'PM15stepFailQM': {'slot_uri': 'neon:PM15stepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15step fail q m'], 'mappings': []}, 'PM15stepPassQM': {'slot_uri': 'neon:PM15stepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15step pass q m'], 'mappings': []}, 'PM15stepNAQM': {'slot_uri': 'neon:PM15stepNAQM', 'description': 'Quality metric that summarizes when the step test for particulate matter 15 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15step n a q m'], 'mappings': []}, 'PM15nullFailQM': {'slot_uri': 'neon:PM15nullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15null fail q m'], 'mappings': []}, 'PM15nullPassQM': {'slot_uri': 'neon:PM15nullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15null pass q m'], 'mappings': []}, 'PM15nullNAQM': {'slot_uri': 'neon:PM15nullNAQM', 'description': 'Quality metric that summarizes when the null test for particulate matter 15 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15null n a q m'], 'mappings': []}, 'PM15gapFailQM': {'slot_uri': 'neon:PM15gapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15gap fail q m'], 'mappings': []}, 'PM15gapPassQM': {'slot_uri': 'neon:PM15gapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15gap pass q m'], 'mappings': []}, 'PM15gapNAQM': {'slot_uri': 'neon:PM15gapNAQM', 'description': 'Quality metric that summarizes when the gap test for particulate matter 15 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15gap n a q m'], 'mappings': []}, 'PM15spikeFailQM': {'slot_uri': 'neon:PM15spikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15spike fail q m'], 'mappings': []}, 'PM15spikePassQM': {'slot_uri': 'neon:PM15spikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15spike pass q m'], 'mappings': []}, 'PM15spikeNAQM': {'slot_uri': 'neon:PM15spikeNAQM', 'description': 'Quality metric that summarizes when the spike test for particulate matter 15 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15spike n a q m'], 'mappings': []}, 'PM15consistencyFailQM': {'slot_uri': 'neon:PM15consistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15consistency fail q m'], 'mappings': []}, 'PM15consistencyPassQM': {'slot_uri': 'neon:PM15consistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for particulate matter 15 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15consistency pass q m'], 'mappings': []}, 'PM15consistencyNAQM': {'slot_uri': 'neon:PM15consistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for particulate matter 15 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15consistency n a q m'], 'mappings': []}, 'PM15alphaQM': {'slot_uri': 'neon:PM15alphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for particulate matter 15 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m15alpha q m'], 'mappings': []}, 'PM15betaQM': {'slot_uri': 'neon:PM15betaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for particulate matter 15 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m15beta q m'], 'mappings': []}, 'PM15finalQF': {'slot_uri': 'neon:PM15finalQF', 'description': 'Quality flag indicating whether the PM15 data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m15final q f'], 'mappings': []}, 'PM10Median': {'slot_uri': 'neon:PM10Median', 'description': 'Median particulate matter 10', 'range': 'double', 'aliases': ['p m10 median'], 'mappings': []}, 'PM10Minimum': {'slot_uri': 'neon:PM10Minimum', 'description': 'Minimum particulate matter 10', 'range': 'double', 'aliases': ['p m10 minimum'], 'mappings': []}, 'PM10Maximum': {'slot_uri': 'neon:PM10Maximum', 'description': 'Maximum particulate matter 10', 'range': 'double', 'aliases': ['p m10 maximum'], 'mappings': []}, 'PM10NumPts': {'slot_uri': 'neon:PM10NumPts', 'description': 'Number of points used to calculate the Median particulate matter 10', 'range': 'double', 'aliases': ['p m10 num pts'], 'mappings': []}, 'PM10MAD': {'slot_uri': 'neon:PM10MAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 10', 'range': 'double', 'aliases': ['p m10 m a d'], 'mappings': []}, 'PM10rangeQAQCRpt': {'slot_uri': 'neon:PM10rangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for particulate matter 10, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10range q a q c rpt'], 'mappings': []}, 'PM10persistenceQAQCRpt': {'slot_uri': 'neon:PM10persistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for particulate matter 10, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10persistence q a q c rpt'], 'mappings': []}, 'PM10stepQAQCRpt': {'slot_uri': 'neon:PM10stepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for particulate matter 10, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10step q a q c rpt'], 'mappings': []}, 'PM10nullQAQCRpt': {'slot_uri': 'neon:PM10nullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for particulate matter 10, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10null q a q c rpt'], 'mappings': []}, 'PM10gapQAQCRpt': {'slot_uri': 'neon:PM10gapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for particulate matter 10, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m10gap q a q c rpt'], 'mappings': []}, 'PM10consistencyQAQCRpt': {'slot_uri': 'neon:PM10consistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for particulate matter 10, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10consistency q a q c rpt'], 'mappings': []}, 'PM10spikeQAQCRpt': {'slot_uri': 'neon:PM10spikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for particulate matter 10, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10spike q a q c rpt'], 'mappings': []}, 'PM10alphaQAQCRpt': {'slot_uri': 'neon:PM10alphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for particulate matter 10, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10alpha q a q c rpt'], 'mappings': []}, 'PM10betaQAQCRpt': {'slot_uri': 'neon:PM10betaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for particulate matter 10, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10beta q a q c rpt'], 'mappings': []}, 'PM10rangeFailQM': {'slot_uri': 'neon:PM10rangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10range fail q m'], 'mappings': []}, 'PM10rangePassQM': {'slot_uri': 'neon:PM10rangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10range pass q m'], 'mappings': []}, 'PM10rangeNAQM': {'slot_uri': 'neon:PM10rangeNAQM', 'description': 'Quality metric that summarizes when the range test for particulate matter 10 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10range n a q m'], 'mappings': []}, 'PM10persistenceFailQM': {'slot_uri': 'neon:PM10persistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10persistence fail q m'], 'mappings': []}, 'PM10persistencePassQM': {'slot_uri': 'neon:PM10persistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10persistence pass q m'], 'mappings': []}, 'PM10persistenceNAQM': {'slot_uri': 'neon:PM10persistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for particulate matter 10 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10persistence n a q m'], 'mappings': []}, 'PM10stepFailQM': {'slot_uri': 'neon:PM10stepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10step fail q m'], 'mappings': []}, 'PM10stepPassQM': {'slot_uri': 'neon:PM10stepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10step pass q m'], 'mappings': []}, 'PM10stepNAQM': {'slot_uri': 'neon:PM10stepNAQM', 'description': 'Quality metric that summarizes when the step test for particulate matter 10 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10step n a q m'], 'mappings': []}, 'PM10nullFailQM': {'slot_uri': 'neon:PM10nullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10null fail q m'], 'mappings': []}, 'PM10nullPassQM': {'slot_uri': 'neon:PM10nullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10null pass q m'], 'mappings': []}, 'PM10nullNAQM': {'slot_uri': 'neon:PM10nullNAQM', 'description': 'Quality metric that summarizes when the null test for particulate matter 10 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10null n a q m'], 'mappings': []}, 'PM10gapFailQM': {'slot_uri': 'neon:PM10gapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10gap fail q m'], 'mappings': []}, 'PM10gapPassQM': {'slot_uri': 'neon:PM10gapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10gap pass q m'], 'mappings': []}, 'PM10gapNAQM': {'slot_uri': 'neon:PM10gapNAQM', 'description': 'Quality metric that summarizes when the gap test for particulate matter 10 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10gap n a q m'], 'mappings': []}, 'PM10spikeFailQM': {'slot_uri': 'neon:PM10spikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10spike fail q m'], 'mappings': []}, 'PM10spikePassQM': {'slot_uri': 'neon:PM10spikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10spike pass q m'], 'mappings': []}, 'PM10spikeNAQM': {'slot_uri': 'neon:PM10spikeNAQM', 'description': 'Quality metric that summarizes when the spike test for particulate matter 10 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10spike n a q m'], 'mappings': []}, 'PM10consistencyFailQM': {'slot_uri': 'neon:PM10consistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10consistency fail q m'], 'mappings': []}, 'PM10consistencyPassQM': {'slot_uri': 'neon:PM10consistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for particulate matter 10 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10consistency pass q m'], 'mappings': []}, 'PM10consistencyNAQM': {'slot_uri': 'neon:PM10consistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for particulate matter 10 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10consistency n a q m'], 'mappings': []}, 'PM10alphaQM': {'slot_uri': 'neon:PM10alphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for particulate matter 10 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m10alpha q m'], 'mappings': []}, 'PM10betaQM': {'slot_uri': 'neon:PM10betaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for particulate matter 10 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m10beta q m'], 'mappings': []}, 'PM10finalQF': {'slot_uri': 'neon:PM10finalQF', 'description': 'Quality flag indicating whether the PM10 data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m10final q f'], 'mappings': []}, 'PM4Median': {'slot_uri': 'neon:PM4Median', 'description': 'Median particulate matter 4', 'range': 'double', 'aliases': ['p m4 median'], 'mappings': []}, 'PM4Minimum': {'slot_uri': 'neon:PM4Minimum', 'description': 'Minimum particulate matter 4', 'range': 'double', 'aliases': ['p m4 minimum'], 'mappings': []}, 'PM4Maximum': {'slot_uri': 'neon:PM4Maximum', 'description': 'Maximum particulate matter 4', 'range': 'double', 'aliases': ['p m4 maximum'], 'mappings': []}, 'PM4NumPts': {'slot_uri': 'neon:PM4NumPts', 'description': 'Number of points used to calculate the Median particulate matter 4', 'range': 'double', 'aliases': ['p m4 num pts'], 'mappings': []}, 'PM4MAD': {'slot_uri': 'neon:PM4MAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 4', 'range': 'double', 'aliases': ['p m4 m a d'], 'mappings': []}, 'PM4rangeQAQCRpt': {'slot_uri': 'neon:PM4rangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for particulate matter 4, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4range q a q c rpt'], 'mappings': []}, 'PM4persistenceQAQCRpt': {'slot_uri': 'neon:PM4persistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for particulate matter 4, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4persistence q a q c rpt'], 'mappings': []}, 'PM4stepQAQCRpt': {'slot_uri': 'neon:PM4stepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for particulate matter 4, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4step q a q c rpt'], 'mappings': []}, 'PM4nullQAQCRpt': {'slot_uri': 'neon:PM4nullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for particulate matter 4, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4null q a q c rpt'], 'mappings': []}, 'PM4gapQAQCRpt': {'slot_uri': 'neon:PM4gapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for particulate matter 4, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m4gap q a q c rpt'], 'mappings': []}, 'PM4consistencyQAQCRpt': {'slot_uri': 'neon:PM4consistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for particulate matter 4, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4consistency q a q c rpt'], 'mappings': []}, 'PM4spikeQAQCRpt': {'slot_uri': 'neon:PM4spikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for particulate matter 4, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4spike q a q c rpt'], 'mappings': []}, 'PM4alphaQAQCRpt': {'slot_uri': 'neon:PM4alphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for particulate matter 4, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4alpha q a q c rpt'], 'mappings': []}, 'PM4betaQAQCRpt': {'slot_uri': 'neon:PM4betaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for particulate matter 4, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4beta q a q c rpt'], 'mappings': []}, 'PM4rangeFailQM': {'slot_uri': 'neon:PM4rangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4range fail q m'], 'mappings': []}, 'PM4rangePassQM': {'slot_uri': 'neon:PM4rangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4range pass q m'], 'mappings': []}, 'PM4rangeNAQM': {'slot_uri': 'neon:PM4rangeNAQM', 'description': 'Quality metric that summarizes when the range test for particulate matter 4 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4range n a q m'], 'mappings': []}, 'PM4persistenceFailQM': {'slot_uri': 'neon:PM4persistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4persistence fail q m'], 'mappings': []}, 'PM4persistencePassQM': {'slot_uri': 'neon:PM4persistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4persistence pass q m'], 'mappings': []}, 'PM4persistenceNAQM': {'slot_uri': 'neon:PM4persistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for particulate matter 4 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4persistence n a q m'], 'mappings': []}, 'PM4stepFailQM': {'slot_uri': 'neon:PM4stepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4step fail q m'], 'mappings': []}, 'PM4stepPassQM': {'slot_uri': 'neon:PM4stepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4step pass q m'], 'mappings': []}, 'PM4stepNAQM': {'slot_uri': 'neon:PM4stepNAQM', 'description': 'Quality metric that summarizes when the step test for particulate matter 4 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4step n a q m'], 'mappings': []}, 'PM4nullFailQM': {'slot_uri': 'neon:PM4nullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4null fail q m'], 'mappings': []}, 'PM4nullPassQM': {'slot_uri': 'neon:PM4nullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4null pass q m'], 'mappings': []}, 'PM4nullNAQM': {'slot_uri': 'neon:PM4nullNAQM', 'description': 'Quality metric that summarizes when the null test for particulate matter 4 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4null n a q m'], 'mappings': []}, 'PM4gapFailQM': {'slot_uri': 'neon:PM4gapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4gap fail q m'], 'mappings': []}, 'PM4gapPassQM': {'slot_uri': 'neon:PM4gapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4gap pass q m'], 'mappings': []}, 'PM4gapNAQM': {'slot_uri': 'neon:PM4gapNAQM', 'description': 'Quality metric that summarizes when the gap test for particulate matter 4 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4gap n a q m'], 'mappings': []}, 'PM4spikeFailQM': {'slot_uri': 'neon:PM4spikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4spike fail q m'], 'mappings': []}, 'PM4spikePassQM': {'slot_uri': 'neon:PM4spikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4spike pass q m'], 'mappings': []}, 'PM4spikeNAQM': {'slot_uri': 'neon:PM4spikeNAQM', 'description': 'Quality metric that summarizes when the spike test for particulate matter 4 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4spike n a q m'], 'mappings': []}, 'PM4consistencyFailQM': {'slot_uri': 'neon:PM4consistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4consistency fail q m'], 'mappings': []}, 'PM4consistencyPassQM': {'slot_uri': 'neon:PM4consistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for particulate matter 4 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4consistency pass q m'], 'mappings': []}, 'PM4consistencyNAQM': {'slot_uri': 'neon:PM4consistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for particulate matter 4 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4consistency n a q m'], 'mappings': []}, 'PM4alphaQM': {'slot_uri': 'neon:PM4alphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for particulate matter 4 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m4alpha q m'], 'mappings': []}, 'PM4betaQM': {'slot_uri': 'neon:PM4betaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for particulate matter 4 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m4beta q m'], 'mappings': []}, 'PM4finalQF': {'slot_uri': 'neon:PM4finalQF', 'description': 'Quality flag indicating whether the PM4 data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m4final q f'], 'mappings': []}, 'PM2.5Median': {'slot_uri': 'neon:PM2.5Median', 'description': 'Median particulate matter 2.5', 'range': 'double', 'aliases': ['p m2.5 median'], 'mappings': []}, 'PM2.5Minimum': {'slot_uri': 'neon:PM2.5Minimum', 'description': 'Minimum particulate matter 2.5', 'range': 'double', 'aliases': ['p m2.5 minimum'], 'mappings': []}, 'PM2.5Maximum': {'slot_uri': 'neon:PM2.5Maximum', 'description': 'Maximum particulate matter 2.5', 'range': 'double', 'aliases': ['p m2.5 maximum'], 'mappings': []}, 'PM2.5NumPts': {'slot_uri': 'neon:PM2.5NumPts', 'description': 'Number of points used to calculate the Median particulate matter 2.5', 'range': 'double', 'aliases': ['p m2.5 num pts'], 'mappings': []}, 'PM2.5MAD': {'slot_uri': 'neon:PM2.5MAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 2.5', 'range': 'double', 'aliases': ['p m2.5 m a d'], 'mappings': []}, 'PM2.5rangeQAQCRpt': {'slot_uri': 'neon:PM2.5rangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for particulate matter 2.5, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5range q a q c rpt'], 'mappings': []}, 'PM2.5persistenceQAQCRpt': {'slot_uri': 'neon:PM2.5persistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for particulate matter 2.5, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5persistence q a q c rpt'], 'mappings': []}, 'PM2.5stepQAQCRpt': {'slot_uri': 'neon:PM2.5stepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for particulate matter 2.5, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5step q a q c rpt'], 'mappings': []}, 'PM2.5nullQAQCRpt': {'slot_uri': 'neon:PM2.5nullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for particulate matter 2.5, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5null q a q c rpt'], 'mappings': []}, 'PM2.5gapQAQCRpt': {'slot_uri': 'neon:PM2.5gapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for particulate matter 2.5, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m2.5gap q a q c rpt'], 'mappings': []}, 'PM2.5consistencyQAQCRpt': {'slot_uri': 'neon:PM2.5consistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for particulate matter 2.5, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5consistency q a q c rpt'], 'mappings': []}, 'PM2.5spikeQAQCRpt': {'slot_uri': 'neon:PM2.5spikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for particulate matter 2.5, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5spike q a q c rpt'], 'mappings': []}, 'PM2.5alphaQAQCRpt': {'slot_uri': 'neon:PM2.5alphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for particulate matter 2.5, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5alpha q a q c rpt'], 'mappings': []}, 'PM2.5betaQAQCRpt': {'slot_uri': 'neon:PM2.5betaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for particulate matter 2.5, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5beta q a q c rpt'], 'mappings': []}, 'PM2.5rangeFailQM': {'slot_uri': 'neon:PM2.5rangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5range fail q m'], 'mappings': []}, 'PM2.5rangePassQM': {'slot_uri': 'neon:PM2.5rangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5range pass q m'], 'mappings': []}, 'PM2.5rangeNAQM': {'slot_uri': 'neon:PM2.5rangeNAQM', 'description': 'Quality metric that summarizes when the range test for particulate matter 2.5 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5range n a q m'], 'mappings': []}, 'PM2.5persistenceFailQM': {'slot_uri': 'neon:PM2.5persistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5persistence fail q m'], 'mappings': []}, 'PM2.5persistencePassQM': {'slot_uri': 'neon:PM2.5persistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5persistence pass q m'], 'mappings': []}, 'PM2.5persistenceNAQM': {'slot_uri': 'neon:PM2.5persistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for particulate matter 2.5 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5persistence n a q m'], 'mappings': []}, 'PM2.5stepFailQM': {'slot_uri': 'neon:PM2.5stepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5step fail q m'], 'mappings': []}, 'PM2.5stepPassQM': {'slot_uri': 'neon:PM2.5stepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5step pass q m'], 'mappings': []}, 'PM2.5stepNAQM': {'slot_uri': 'neon:PM2.5stepNAQM', 'description': 'Quality metric that summarizes when the step test for particulate matter 2.5 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5step n a q m'], 'mappings': []}, 'PM2.5nullFailQM': {'slot_uri': 'neon:PM2.5nullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5null fail q m'], 'mappings': []}, 'PM2.5nullPassQM': {'slot_uri': 'neon:PM2.5nullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5null pass q m'], 'mappings': []}, 'PM2.5nullNAQM': {'slot_uri': 'neon:PM2.5nullNAQM', 'description': 'Quality metric that summarizes when the null test for particulate matter 2.5 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5null n a q m'], 'mappings': []}, 'PM2.5gapFailQM': {'slot_uri': 'neon:PM2.5gapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5gap fail q m'], 'mappings': []}, 'PM2.5gapPassQM': {'slot_uri': 'neon:PM2.5gapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5gap pass q m'], 'mappings': []}, 'PM2.5gapNAQM': {'slot_uri': 'neon:PM2.5gapNAQM', 'description': 'Quality metric that summarizes when the gap test for particulate matter 2.5 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5gap n a q m'], 'mappings': []}, 'PM2.5spikeFailQM': {'slot_uri': 'neon:PM2.5spikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5spike fail q m'], 'mappings': []}, 'PM2.5spikePassQM': {'slot_uri': 'neon:PM2.5spikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5spike pass q m'], 'mappings': []}, 'PM2.5spikeNAQM': {'slot_uri': 'neon:PM2.5spikeNAQM', 'description': 'Quality metric that summarizes when the spike test for particulate matter 2.5 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5spike n a q m'], 'mappings': []}, 'PM2.5consistencyFailQM': {'slot_uri': 'neon:PM2.5consistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5consistency fail q m'], 'mappings': []}, 'PM2.5consistencyPassQM': {'slot_uri': 'neon:PM2.5consistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for particulate matter 2.5 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5consistency pass q m'], 'mappings': []}, 'PM2.5consistencyNAQM': {'slot_uri': 'neon:PM2.5consistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for particulate matter 2.5 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5consistency n a q m'], 'mappings': []}, 'PM2.5alphaQM': {'slot_uri': 'neon:PM2.5alphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for particulate matter 2.5 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m2.5alpha q m'], 'mappings': []}, 'PM2.5betaQM': {'slot_uri': 'neon:PM2.5betaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for particulate matter 2.5 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m2.5beta q m'], 'mappings': []}, 'PM2.5finalQF': {'slot_uri': 'neon:PM2.5finalQF', 'description': 'Quality flag indicating whether the PM2.5 data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m2.5final q f'], 'mappings': []}, 'PM1Median': {'slot_uri': 'neon:PM1Median', 'description': 'Median particulate matter 1', 'range': 'double', 'aliases': ['p m1 median'], 'mappings': []}, 'PM1Minimum': {'slot_uri': 'neon:PM1Minimum', 'description': 'Minimum particulate matter 1', 'range': 'double', 'aliases': ['p m1 minimum'], 'mappings': []}, 'PM1Maximum': {'slot_uri': 'neon:PM1Maximum', 'description': 'Maximum particulate matter 1', 'range': 'double', 'aliases': ['p m1 maximum'], 'mappings': []}, 'PM1NumPts': {'slot_uri': 'neon:PM1NumPts', 'description': 'Number of points used to calculate the Median particulate matter 1', 'range': 'double', 'aliases': ['p m1 num pts'], 'mappings': []}, 'PM1MAD': {'slot_uri': 'neon:PM1MAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 1', 'range': 'double', 'aliases': ['p m1 m a d'], 'mappings': []}, 'PM1rangeQAQCRpt': {'slot_uri': 'neon:PM1rangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for particulate matter 1, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1range q a q c rpt'], 'mappings': []}, 'PM1persistenceQAQCRpt': {'slot_uri': 'neon:PM1persistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for particulate matter 1, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1persistence q a q c rpt'], 'mappings': []}, 'PM1stepQAQCRpt': {'slot_uri': 'neon:PM1stepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for particulate matter 1, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1step q a q c rpt'], 'mappings': []}, 'PM1nullQAQCRpt': {'slot_uri': 'neon:PM1nullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for particulate matter 1, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1null q a q c rpt'], 'mappings': []}, 'PM1gapQAQCRpt': {'slot_uri': 'neon:PM1gapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for particulate matter 1, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m1gap q a q c rpt'], 'mappings': []}, 'PM1consistencyQAQCRpt': {'slot_uri': 'neon:PM1consistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for particulate matter 1, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1consistency q a q c rpt'], 'mappings': []}, 'PM1spikeQAQCRpt': {'slot_uri': 'neon:PM1spikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for particulate matter 1, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1spike q a q c rpt'], 'mappings': []}, 'PM1alphaQAQCRpt': {'slot_uri': 'neon:PM1alphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for particulate matter 1, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1alpha q a q c rpt'], 'mappings': []}, 'PM1betaQAQCRpt': {'slot_uri': 'neon:PM1betaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for particulate matter 1, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1beta q a q c rpt'], 'mappings': []}, 'PM1rangeFailQM': {'slot_uri': 'neon:PM1rangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1range fail q m'], 'mappings': []}, 'PM1rangePassQM': {'slot_uri': 'neon:PM1rangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1range pass q m'], 'mappings': []}, 'PM1rangeNAQM': {'slot_uri': 'neon:PM1rangeNAQM', 'description': 'Quality metric that summarizes when the range test for particulate matter 1 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1range n a q m'], 'mappings': []}, 'PM1persistenceFailQM': {'slot_uri': 'neon:PM1persistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1persistence fail q m'], 'mappings': []}, 'PM1persistencePassQM': {'slot_uri': 'neon:PM1persistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1persistence pass q m'], 'mappings': []}, 'PM1persistenceNAQM': {'slot_uri': 'neon:PM1persistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for particulate matter 1 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1persistence n a q m'], 'mappings': []}, 'PM1stepFailQM': {'slot_uri': 'neon:PM1stepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1step fail q m'], 'mappings': []}, 'PM1stepPassQM': {'slot_uri': 'neon:PM1stepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1step pass q m'], 'mappings': []}, 'PM1stepNAQM': {'slot_uri': 'neon:PM1stepNAQM', 'description': 'Quality metric that summarizes when the step test for particulate matter 1 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1step n a q m'], 'mappings': []}, 'PM1nullFailQM': {'slot_uri': 'neon:PM1nullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1null fail q m'], 'mappings': []}, 'PM1nullPassQM': {'slot_uri': 'neon:PM1nullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1null pass q m'], 'mappings': []}, 'PM1nullNAQM': {'slot_uri': 'neon:PM1nullNAQM', 'description': 'Quality metric that summarizes when the null test for particulate matter 1 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1null n a q m'], 'mappings': []}, 'PM1gapFailQM': {'slot_uri': 'neon:PM1gapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1gap fail q m'], 'mappings': []}, 'PM1gapPassQM': {'slot_uri': 'neon:PM1gapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1gap pass q m'], 'mappings': []}, 'PM1gapNAQM': {'slot_uri': 'neon:PM1gapNAQM', 'description': 'Quality metric that summarizes when the gap test for particulate matter 1 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1gap n a q m'], 'mappings': []}, 'PM1spikeFailQM': {'slot_uri': 'neon:PM1spikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1spike fail q m'], 'mappings': []}, 'PM1spikePassQM': {'slot_uri': 'neon:PM1spikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1spike pass q m'], 'mappings': []}, 'PM1spikeNAQM': {'slot_uri': 'neon:PM1spikeNAQM', 'description': 'Quality metric that summarizes when the spike test for particulate matter 1 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1spike n a q m'], 'mappings': []}, 'PM1consistencyFailQM': {'slot_uri': 'neon:PM1consistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1consistency fail q m'], 'mappings': []}, 'PM1consistencyPassQM': {'slot_uri': 'neon:PM1consistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for particulate matter 1 over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1consistency pass q m'], 'mappings': []}, 'PM1consistencyNAQM': {'slot_uri': 'neon:PM1consistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for particulate matter 1 could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1consistency n a q m'], 'mappings': []}, 'PM1alphaQM': {'slot_uri': 'neon:PM1alphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for particulate matter 1 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m1alpha q m'], 'mappings': []}, 'PM1betaQM': {'slot_uri': 'neon:PM1betaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for particulate matter 1 over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m1beta q m'], 'mappings': []}, 'PM1finalQF': {'slot_uri': 'neon:PM1finalQF', 'description': 'Quality flag indicating whether the PM1 data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m1final q f'], 'mappings': []}, 'PM15sub50RHMedian': {'slot_uri': 'neon:PM15sub50RHMedian', 'description': 'Median of particulate matter 15 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m15sub50 r h median'], 'mappings': []}, 'PM15sub50RHMinimum': {'slot_uri': 'neon:PM15sub50RHMinimum', 'description': 'Minimum particulate matter 15 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m15sub50 r h minimum'], 'mappings': []}, 'PM15sub50RHMaximum': {'slot_uri': 'neon:PM15sub50RHMaximum', 'description': 'Maximum particulate matter 15 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m15sub50 r h maximum'], 'mappings': []}, 'PM15sub50RHNumPts': {'slot_uri': 'neon:PM15sub50RHNumPts', 'description': 'Number of points used to calculate the Median of particulate matter 15 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m15sub50 r h num pts'], 'mappings': []}, 'PM15sub50RHMAD': {'slot_uri': 'neon:PM15sub50RHMAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 15 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m15sub50 r h m a d'], 'mappings': []}, 'PM15sub50RHrangeQAQCRpt': {'slot_uri': 'neon:PM15sub50RHrangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for PM15 at RH <50%, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15sub50 r hrange q a q c rpt'], 'mappings': []}, 'PM15sub50RHpersistenceQAQCRpt': {'slot_uri': 'neon:PM15sub50RHpersistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for PM15 at RH <50%, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15sub50 r hpersistence q a q c rpt'], 'mappings': []}, 'PM15sub50RHstepQAQCRpt': {'slot_uri': 'neon:PM15sub50RHstepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for PM15 at RH <50%, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15sub50 r hstep q a q c rpt'], 'mappings': []}, 'PM15sub50RHnullQAQCRpt': {'slot_uri': 'neon:PM15sub50RHnullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for PM15 at RH <50%, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15sub50 r hnull q a q c rpt'], 'mappings': []}, 'PM15sub50RHgapQAQCRpt': {'slot_uri': 'neon:PM15sub50RHgapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for PM15 at RH <50%, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m15sub50 r hgap q a q c rpt'], 'mappings': []}, 'PM15sub50RHconsistencyQAQCRpt': {'slot_uri': 'neon:PM15sub50RHconsistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for PM15 at RH <50%, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15sub50 r hconsistency q a q c rpt'], 'mappings': []}, 'PM15sub50RHspikeQAQCRpt': {'slot_uri': 'neon:PM15sub50RHspikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for PM15 at RH <50%, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15sub50 r hspike q a q c rpt'], 'mappings': []}, 'PM15sub50RHalphaQAQCRpt': {'slot_uri': 'neon:PM15sub50RHalphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for PM15 at RH <50%, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15sub50 r halpha q a q c rpt'], 'mappings': []}, 'PM15sub50RHbetaQAQCRpt': {'slot_uri': 'neon:PM15sub50RHbetaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for PM15 at RH <50%, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m15sub50 r hbeta q a q c rpt'], 'mappings': []}, 'PM15sub50RHrangeFailQM': {'slot_uri': 'neon:PM15sub50RHrangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hrange fail q m'], 'mappings': []}, 'PM15sub50RHrangePassQM': {'slot_uri': 'neon:PM15sub50RHrangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hrange pass q m'], 'mappings': []}, 'PM15sub50RHrangeNAQM': {'slot_uri': 'neon:PM15sub50RHrangeNAQM', 'description': 'Quality metric that summarizes when the range test for PM15 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hrange n a q m'], 'mappings': []}, 'PM15sub50RHpersistenceFailQM': {'slot_uri': 'neon:PM15sub50RHpersistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hpersistence fail q m'], 'mappings': []}, 'PM15sub50RHpersistencePassQM': {'slot_uri': 'neon:PM15sub50RHpersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hpersistence pass q m'], 'mappings': []}, 'PM15sub50RHpersistenceNAQM': {'slot_uri': 'neon:PM15sub50RHpersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for PM15 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hpersistence n a q m'], 'mappings': []}, 'PM15sub50RHstepFailQM': {'slot_uri': 'neon:PM15sub50RHstepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hstep fail q m'], 'mappings': []}, 'PM15sub50RHstepPassQM': {'slot_uri': 'neon:PM15sub50RHstepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hstep pass q m'], 'mappings': []}, 'PM15sub50RHstepNAQM': {'slot_uri': 'neon:PM15sub50RHstepNAQM', 'description': 'Quality metric that summarizes when the step test for PM15 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hstep n a q m'], 'mappings': []}, 'PM15sub50RHnullFailQM': {'slot_uri': 'neon:PM15sub50RHnullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hnull fail q m'], 'mappings': []}, 'PM15sub50RHnullPassQM': {'slot_uri': 'neon:PM15sub50RHnullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hnull pass q m'], 'mappings': []}, 'PM15sub50RHnullNAQM': {'slot_uri': 'neon:PM15sub50RHnullNAQM', 'description': 'Quality metric that summarizes when the null test for PM15 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hnull n a q m'], 'mappings': []}, 'PM15sub50RHgapFailQM': {'slot_uri': 'neon:PM15sub50RHgapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hgap fail q m'], 'mappings': []}, 'PM15sub50RHgapPassQM': {'slot_uri': 'neon:PM15sub50RHgapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hgap pass q m'], 'mappings': []}, 'PM15sub50RHgapNAQM': {'slot_uri': 'neon:PM15sub50RHgapNAQM', 'description': 'Quality metric that summarizes when the gap test for PM15 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hgap n a q m'], 'mappings': []}, 'PM15sub50RHspikeFailQM': {'slot_uri': 'neon:PM15sub50RHspikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hspike fail q m'], 'mappings': []}, 'PM15sub50RHspikePassQM': {'slot_uri': 'neon:PM15sub50RHspikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hspike pass q m'], 'mappings': []}, 'PM15sub50RHspikeNAQM': {'slot_uri': 'neon:PM15sub50RHspikeNAQM', 'description': 'Quality metric that summarizes when the spike test for PM15 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hspike n a q m'], 'mappings': []}, 'PM15sub50RHconsistencyFailQM': {'slot_uri': 'neon:PM15sub50RHconsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hconsistency fail q m'], 'mappings': []}, 'PM15sub50RHconsistencyPassQM': {'slot_uri': 'neon:PM15sub50RHconsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for PM15 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hconsistency pass q m'], 'mappings': []}, 'PM15sub50RHconsistencyNAQM': {'slot_uri': 'neon:PM15sub50RHconsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for PM15 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m15sub50 r hconsistency n a q m'], 'mappings': []}, 'PM15sub50RHalphaQM': {'slot_uri': 'neon:PM15sub50RHalphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for PM15 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m15sub50 r halpha q m'], 'mappings': []}, 'PM15sub50RHbetaQM': {'slot_uri': 'neon:PM15sub50RHbetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for PM15 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m15sub50 r hbeta q m'], 'mappings': []}, 'PM15sub50RHfinalQF': {'slot_uri': 'neon:PM15sub50RHfinalQF', 'description': 'Quality flag indicating whether the PM15 at RH <50% data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m15sub50 r hfinal q f'], 'mappings': []}, 'PM10sub50RHMedian': {'slot_uri': 'neon:PM10sub50RHMedian', 'description': 'Median of particulate matter 10 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m10sub50 r h median'], 'mappings': []}, 'PM10sub50RHMinimum': {'slot_uri': 'neon:PM10sub50RHMinimum', 'description': 'Minimum particulate matter 10 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m10sub50 r h minimum'], 'mappings': []}, 'PM10sub50RHMaximum': {'slot_uri': 'neon:PM10sub50RHMaximum', 'description': 'Maximum particulate matter 10 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m10sub50 r h maximum'], 'mappings': []}, 'PM10sub50RHNumPts': {'slot_uri': 'neon:PM10sub50RHNumPts', 'description': 'Number of points used to calculate the Median of particulate matter 10 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m10sub50 r h num pts'], 'mappings': []}, 'PM10sub50RHMAD': {'slot_uri': 'neon:PM10sub50RHMAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 10 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m10sub50 r h m a d'], 'mappings': []}, 'PM10sub50RHrangeQAQCRpt': {'slot_uri': 'neon:PM10sub50RHrangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for PM10 at RH <50%, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10sub50 r hrange q a q c rpt'], 'mappings': []}, 'PM10sub50RHpersistenceQAQCRpt': {'slot_uri': 'neon:PM10sub50RHpersistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for PM10 at RH <50%, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10sub50 r hpersistence q a q c rpt'], 'mappings': []}, 'PM10sub50RHstepQAQCRpt': {'slot_uri': 'neon:PM10sub50RHstepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for PM10 at RH <50%, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10sub50 r hstep q a q c rpt'], 'mappings': []}, 'PM10sub50RHnullQAQCRpt': {'slot_uri': 'neon:PM10sub50RHnullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for PM10 at RH <50%, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10sub50 r hnull q a q c rpt'], 'mappings': []}, 'PM10sub50RHgapQAQCRpt': {'slot_uri': 'neon:PM10sub50RHgapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for PM10 at RH <50%, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m10sub50 r hgap q a q c rpt'], 'mappings': []}, 'PM10sub50RHconsistencyQAQCRpt': {'slot_uri': 'neon:PM10sub50RHconsistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for PM10 at RH <50%, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10sub50 r hconsistency q a q c rpt'], 'mappings': []}, 'PM10sub50RHspikeQAQCRpt': {'slot_uri': 'neon:PM10sub50RHspikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for PM10 at RH <50%, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10sub50 r hspike q a q c rpt'], 'mappings': []}, 'PM10sub50RHalphaQAQCRpt': {'slot_uri': 'neon:PM10sub50RHalphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for PM10 at RH <50%, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10sub50 r halpha q a q c rpt'], 'mappings': []}, 'PM10sub50RHbetaQAQCRpt': {'slot_uri': 'neon:PM10sub50RHbetaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for PM10 at RH <50%, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m10sub50 r hbeta q a q c rpt'], 'mappings': []}, 'PM10sub50RHrangeFailQM': {'slot_uri': 'neon:PM10sub50RHrangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hrange fail q m'], 'mappings': []}, 'PM10sub50RHrangePassQM': {'slot_uri': 'neon:PM10sub50RHrangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hrange pass q m'], 'mappings': []}, 'PM10sub50RHrangeNAQM': {'slot_uri': 'neon:PM10sub50RHrangeNAQM', 'description': 'Quality metric that summarizes when the range test for PM10 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hrange n a q m'], 'mappings': []}, 'PM10sub50RHpersistenceFailQM': {'slot_uri': 'neon:PM10sub50RHpersistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hpersistence fail q m'], 'mappings': []}, 'PM10sub50RHpersistencePassQM': {'slot_uri': 'neon:PM10sub50RHpersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hpersistence pass q m'], 'mappings': []}, 'PM10sub50RHpersistenceNAQM': {'slot_uri': 'neon:PM10sub50RHpersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for PM10 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hpersistence n a q m'], 'mappings': []}, 'PM10sub50RHstepFailQM': {'slot_uri': 'neon:PM10sub50RHstepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hstep fail q m'], 'mappings': []}, 'PM10sub50RHstepPassQM': {'slot_uri': 'neon:PM10sub50RHstepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hstep pass q m'], 'mappings': []}, 'PM10sub50RHstepNAQM': {'slot_uri': 'neon:PM10sub50RHstepNAQM', 'description': 'Quality metric that summarizes when the step test for PM10 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hstep n a q m'], 'mappings': []}, 'PM10sub50RHnullFailQM': {'slot_uri': 'neon:PM10sub50RHnullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hnull fail q m'], 'mappings': []}, 'PM10sub50RHnullPassQM': {'slot_uri': 'neon:PM10sub50RHnullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hnull pass q m'], 'mappings': []}, 'PM10sub50RHnullNAQM': {'slot_uri': 'neon:PM10sub50RHnullNAQM', 'description': 'Quality metric that summarizes when the null test for PM10 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hnull n a q m'], 'mappings': []}, 'PM10sub50RHgapFailQM': {'slot_uri': 'neon:PM10sub50RHgapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hgap fail q m'], 'mappings': []}, 'PM10sub50RHgapPassQM': {'slot_uri': 'neon:PM10sub50RHgapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hgap pass q m'], 'mappings': []}, 'PM10sub50RHgapNAQM': {'slot_uri': 'neon:PM10sub50RHgapNAQM', 'description': 'Quality metric that summarizes when the gap test for PM10 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hgap n a q m'], 'mappings': []}, 'PM10sub50RHspikeFailQM': {'slot_uri': 'neon:PM10sub50RHspikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hspike fail q m'], 'mappings': []}, 'PM10sub50RHspikePassQM': {'slot_uri': 'neon:PM10sub50RHspikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hspike pass q m'], 'mappings': []}, 'PM10sub50RHspikeNAQM': {'slot_uri': 'neon:PM10sub50RHspikeNAQM', 'description': 'Quality metric that summarizes when the spike test for PM10 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hspike n a q m'], 'mappings': []}, 'PM10sub50RHconsistencyFailQM': {'slot_uri': 'neon:PM10sub50RHconsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hconsistency fail q m'], 'mappings': []}, 'PM10sub50RHconsistencyPassQM': {'slot_uri': 'neon:PM10sub50RHconsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for PM10 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hconsistency pass q m'], 'mappings': []}, 'PM10sub50RHconsistencyNAQM': {'slot_uri': 'neon:PM10sub50RHconsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for PM10 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m10sub50 r hconsistency n a q m'], 'mappings': []}, 'PM10sub50RHalphaQM': {'slot_uri': 'neon:PM10sub50RHalphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for PM10 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m10sub50 r halpha q m'], 'mappings': []}, 'PM10sub50RHbetaQM': {'slot_uri': 'neon:PM10sub50RHbetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for PM10 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m10sub50 r hbeta q m'], 'mappings': []}, 'PM10sub50RHfinalQF': {'slot_uri': 'neon:PM10sub50RHfinalQF', 'description': 'Quality flag indicating whether the PM10 at RH <50% data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m10sub50 r hfinal q f'], 'mappings': []}, 'PM4sub50RHMedian': {'slot_uri': 'neon:PM4sub50RHMedian', 'description': 'Median of particulate matter 4 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m4sub50 r h median'], 'mappings': []}, 'PM4sub50RHMinimum': {'slot_uri': 'neon:PM4sub50RHMinimum', 'description': 'Minimum particulate matter 4 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m4sub50 r h minimum'], 'mappings': []}, 'PM4sub50RHMaximum': {'slot_uri': 'neon:PM4sub50RHMaximum', 'description': 'Maximum particulate matter 4 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m4sub50 r h maximum'], 'mappings': []}, 'PM4sub50RHNumPts': {'slot_uri': 'neon:PM4sub50RHNumPts', 'description': 'Number of points used to calculate the Median of particulate matter 4 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m4sub50 r h num pts'], 'mappings': []}, 'PM4sub50RHMAD': {'slot_uri': 'neon:PM4sub50RHMAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 4 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m4sub50 r h m a d'], 'mappings': []}, 'PM4sub50RHrangeQAQCRpt': {'slot_uri': 'neon:PM4sub50RHrangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for PM4 at RH <50%, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4sub50 r hrange q a q c rpt'], 'mappings': []}, 'PM4sub50RHpersistenceQAQCRpt': {'slot_uri': 'neon:PM4sub50RHpersistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for PM4 at RH <50%, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4sub50 r hpersistence q a q c rpt'], 'mappings': []}, 'PM4sub50RHstepQAQCRpt': {'slot_uri': 'neon:PM4sub50RHstepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for PM4 at RH <50%, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4sub50 r hstep q a q c rpt'], 'mappings': []}, 'PM4sub50RHnullQAQCRpt': {'slot_uri': 'neon:PM4sub50RHnullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for PM4 at RH <50%, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4sub50 r hnull q a q c rpt'], 'mappings': []}, 'PM4sub50RHgapQAQCRpt': {'slot_uri': 'neon:PM4sub50RHgapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for PM4 at RH <50%, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m4sub50 r hgap q a q c rpt'], 'mappings': []}, 'PM4sub50RHconsistencyQAQCRpt': {'slot_uri': 'neon:PM4sub50RHconsistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for PM4 at RH <50%, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4sub50 r hconsistency q a q c rpt'], 'mappings': []}, 'PM4sub50RHspikeQAQCRpt': {'slot_uri': 'neon:PM4sub50RHspikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for PM4 at RH <50%, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4sub50 r hspike q a q c rpt'], 'mappings': []}, 'PM4sub50RHalphaQAQCRpt': {'slot_uri': 'neon:PM4sub50RHalphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for PM4 at RH <50%, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4sub50 r halpha q a q c rpt'], 'mappings': []}, 'PM4sub50RHbetaQAQCRpt': {'slot_uri': 'neon:PM4sub50RHbetaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for PM4 at RH <50%, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m4sub50 r hbeta q a q c rpt'], 'mappings': []}, 'PM4sub50RHrangeFailQM': {'slot_uri': 'neon:PM4sub50RHrangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hrange fail q m'], 'mappings': []}, 'PM4sub50RHrangePassQM': {'slot_uri': 'neon:PM4sub50RHrangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hrange pass q m'], 'mappings': []}, 'PM4sub50RHrangeNAQM': {'slot_uri': 'neon:PM4sub50RHrangeNAQM', 'description': 'Quality metric that summarizes when the range test for PM4 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hrange n a q m'], 'mappings': []}, 'PM4sub50RHpersistenceFailQM': {'slot_uri': 'neon:PM4sub50RHpersistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hpersistence fail q m'], 'mappings': []}, 'PM4sub50RHpersistencePassQM': {'slot_uri': 'neon:PM4sub50RHpersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hpersistence pass q m'], 'mappings': []}, 'PM4sub50RHpersistenceNAQM': {'slot_uri': 'neon:PM4sub50RHpersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for PM4 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hpersistence n a q m'], 'mappings': []}, 'PM4sub50RHstepFailQM': {'slot_uri': 'neon:PM4sub50RHstepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hstep fail q m'], 'mappings': []}, 'PM4sub50RHstepPassQM': {'slot_uri': 'neon:PM4sub50RHstepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hstep pass q m'], 'mappings': []}, 'PM4sub50RHstepNAQM': {'slot_uri': 'neon:PM4sub50RHstepNAQM', 'description': 'Quality metric that summarizes when the step test for PM4 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hstep n a q m'], 'mappings': []}, 'PM4sub50RHnullFailQM': {'slot_uri': 'neon:PM4sub50RHnullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hnull fail q m'], 'mappings': []}, 'PM4sub50RHnullPassQM': {'slot_uri': 'neon:PM4sub50RHnullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hnull pass q m'], 'mappings': []}, 'PM4sub50RHnullNAQM': {'slot_uri': 'neon:PM4sub50RHnullNAQM', 'description': 'Quality metric that summarizes when the null test for PM4 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hnull n a q m'], 'mappings': []}, 'PM4sub50RHgapFailQM': {'slot_uri': 'neon:PM4sub50RHgapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hgap fail q m'], 'mappings': []}, 'PM4sub50RHgapPassQM': {'slot_uri': 'neon:PM4sub50RHgapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hgap pass q m'], 'mappings': []}, 'PM4sub50RHgapNAQM': {'slot_uri': 'neon:PM4sub50RHgapNAQM', 'description': 'Quality metric that summarizes when the gap test for PM4 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hgap n a q m'], 'mappings': []}, 'PM4sub50RHspikeFailQM': {'slot_uri': 'neon:PM4sub50RHspikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hspike fail q m'], 'mappings': []}, 'PM4sub50RHspikePassQM': {'slot_uri': 'neon:PM4sub50RHspikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hspike pass q m'], 'mappings': []}, 'PM4sub50RHspikeNAQM': {'slot_uri': 'neon:PM4sub50RHspikeNAQM', 'description': 'Quality metric that summarizes when the spike test for PM4 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hspike n a q m'], 'mappings': []}, 'PM4sub50RHconsistencyFailQM': {'slot_uri': 'neon:PM4sub50RHconsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hconsistency fail q m'], 'mappings': []}, 'PM4sub50RHconsistencyPassQM': {'slot_uri': 'neon:PM4sub50RHconsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for PM4 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hconsistency pass q m'], 'mappings': []}, 'PM4sub50RHconsistencyNAQM': {'slot_uri': 'neon:PM4sub50RHconsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for PM4 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m4sub50 r hconsistency n a q m'], 'mappings': []}, 'PM4sub50RHalphaQM': {'slot_uri': 'neon:PM4sub50RHalphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for PM4 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m4sub50 r halpha q m'], 'mappings': []}, 'PM4sub50RHbetaQM': {'slot_uri': 'neon:PM4sub50RHbetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for PM4 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m4sub50 r hbeta q m'], 'mappings': []}, 'PM4sub50RHfinalQF': {'slot_uri': 'neon:PM4sub50RHfinalQF', 'description': 'Quality flag indicating whether the PM4 at RH <50% data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m4sub50 r hfinal q f'], 'mappings': []}, 'PM2.5sub50RHMedian': {'slot_uri': 'neon:PM2.5sub50RHMedian', 'description': 'Median of particulate matter 2.5 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m2.5sub50 r h median'], 'mappings': []}, 'PM2.5sub50RHMinimum': {'slot_uri': 'neon:PM2.5sub50RHMinimum', 'description': 'Minimum particulate matter 2.5 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m2.5sub50 r h minimum'], 'mappings': []}, 'PM2.5sub50RHMaximum': {'slot_uri': 'neon:PM2.5sub50RHMaximum', 'description': 'Maximum particulate matter 2.5 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m2.5sub50 r h maximum'], 'mappings': []}, 'PM2.5sub50RHNumPts': {'slot_uri': 'neon:PM2.5sub50RHNumPts', 'description': 'Number of points used to calculate the Median of particulate matter 2.5 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m2.5sub50 r h num pts'], 'mappings': []}, 'PM2.5sub50RHMAD': {'slot_uri': 'neon:PM2.5sub50RHMAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 2.5 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m2.5sub50 r h m a d'], 'mappings': []}, 'PM2.5sub50RHrangeQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHrangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for PM2.5 at RH <50%, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5sub50 r hrange q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHpersistenceQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHpersistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for PM2.5 at RH <50%, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5sub50 r hpersistence q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHstepQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHstepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for PM2.5 at RH <50%, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5sub50 r hstep q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHnullQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHnullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for PM2.5 at RH <50%, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5sub50 r hnull q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHgapQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHgapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for PM2.5 at RH <50%, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m2.5sub50 r hgap q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHconsistencyQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHconsistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for PM2.5 at RH <50%, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5sub50 r hconsistency q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHspikeQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHspikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for PM2.5 at RH <50%, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5sub50 r hspike q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHalphaQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHalphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for PM2.5 at RH <50%, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5sub50 r halpha q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHbetaQAQCRpt': {'slot_uri': 'neon:PM2.5sub50RHbetaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for PM2.5 at RH <50%, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m2.5sub50 r hbeta q a q c rpt'], 'mappings': []}, 'PM2.5sub50RHrangeFailQM': {'slot_uri': 'neon:PM2.5sub50RHrangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hrange fail q m'], 'mappings': []}, 'PM2.5sub50RHrangePassQM': {'slot_uri': 'neon:PM2.5sub50RHrangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hrange pass q m'], 'mappings': []}, 'PM2.5sub50RHrangeNAQM': {'slot_uri': 'neon:PM2.5sub50RHrangeNAQM', 'description': 'Quality metric that summarizes when the range test for PM2.5 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hrange n a q m'], 'mappings': []}, 'PM2.5sub50RHpersistenceFailQM': {'slot_uri': 'neon:PM2.5sub50RHpersistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hpersistence fail q m'], 'mappings': []}, 'PM2.5sub50RHpersistencePassQM': {'slot_uri': 'neon:PM2.5sub50RHpersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hpersistence pass q m'], 'mappings': []}, 'PM2.5sub50RHpersistenceNAQM': {'slot_uri': 'neon:PM2.5sub50RHpersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for PM2.5 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hpersistence n a q m'], 'mappings': []}, 'PM2.5sub50RHstepFailQM': {'slot_uri': 'neon:PM2.5sub50RHstepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hstep fail q m'], 'mappings': []}, 'PM2.5sub50RHstepPassQM': {'slot_uri': 'neon:PM2.5sub50RHstepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hstep pass q m'], 'mappings': []}, 'PM2.5sub50RHstepNAQM': {'slot_uri': 'neon:PM2.5sub50RHstepNAQM', 'description': 'Quality metric that summarizes when the step test for PM2.5 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hstep n a q m'], 'mappings': []}, 'PM2.5sub50RHnullFailQM': {'slot_uri': 'neon:PM2.5sub50RHnullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hnull fail q m'], 'mappings': []}, 'PM2.5sub50RHnullPassQM': {'slot_uri': 'neon:PM2.5sub50RHnullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hnull pass q m'], 'mappings': []}, 'PM2.5sub50RHnullNAQM': {'slot_uri': 'neon:PM2.5sub50RHnullNAQM', 'description': 'Quality metric that summarizes when the null test for PM2.5 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hnull n a q m'], 'mappings': []}, 'PM2.5sub50RHgapFailQM': {'slot_uri': 'neon:PM2.5sub50RHgapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hgap fail q m'], 'mappings': []}, 'PM2.5sub50RHgapPassQM': {'slot_uri': 'neon:PM2.5sub50RHgapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hgap pass q m'], 'mappings': []}, 'PM2.5sub50RHgapNAQM': {'slot_uri': 'neon:PM2.5sub50RHgapNAQM', 'description': 'Quality metric that summarizes when the gap test for PM2.5 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hgap n a q m'], 'mappings': []}, 'PM2.5sub50RHspikeFailQM': {'slot_uri': 'neon:PM2.5sub50RHspikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hspike fail q m'], 'mappings': []}, 'PM2.5sub50RHspikePassQM': {'slot_uri': 'neon:PM2.5sub50RHspikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hspike pass q m'], 'mappings': []}, 'PM2.5sub50RHspikeNAQM': {'slot_uri': 'neon:PM2.5sub50RHspikeNAQM', 'description': 'Quality metric that summarizes when the spike test for PM2.5 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hspike n a q m'], 'mappings': []}, 'PM2.5sub50RHconsistencyFailQM': {'slot_uri': 'neon:PM2.5sub50RHconsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hconsistency fail q m'], 'mappings': []}, 'PM2.5sub50RHconsistencyPassQM': {'slot_uri': 'neon:PM2.5sub50RHconsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for PM2.5 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hconsistency pass q m'], 'mappings': []}, 'PM2.5sub50RHconsistencyNAQM': {'slot_uri': 'neon:PM2.5sub50RHconsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for PM2.5 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m2.5sub50 r hconsistency n a q m'], 'mappings': []}, 'PM2.5sub50RHalphaQM': {'slot_uri': 'neon:PM2.5sub50RHalphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for PM2.5 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m2.5sub50 r halpha q m'], 'mappings': []}, 'PM2.5sub50RHbetaQM': {'slot_uri': 'neon:PM2.5sub50RHbetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for PM2.5 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m2.5sub50 r hbeta q m'], 'mappings': []}, 'PM2.5sub50RHfinalQF': {'slot_uri': 'neon:PM2.5sub50RHfinalQF', 'description': 'Quality flag indicating whether the PM2.5 at RH <50% data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m2.5sub50 r hfinal q f'], 'mappings': []}, 'PM1sub50RHMedian': {'slot_uri': 'neon:PM1sub50RHMedian', 'description': 'Median of particulate matter 1 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m1sub50 r h median'], 'mappings': []}, 'PM1sub50RHMinimum': {'slot_uri': 'neon:PM1sub50RHMinimum', 'description': 'Minimum particulate matter 1 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m1sub50 r h minimum'], 'mappings': []}, 'PM1sub50RHMaximum': {'slot_uri': 'neon:PM1sub50RHMaximum', 'description': 'Maximum particulate matter 1 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m1sub50 r h maximum'], 'mappings': []}, 'PM1sub50RHNumPts': {'slot_uri': 'neon:PM1sub50RHNumPts', 'description': 'Number of points used to calculate the Median of particulate matter 1 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m1sub50 r h num pts'], 'mappings': []}, 'PM1sub50RHMAD': {'slot_uri': 'neon:PM1sub50RHMAD', 'description': 'Median Absolute Deviation (from the median) for particulate matter 1 measured at <50% relative humidity', 'range': 'double', 'aliases': ['p m1sub50 r h m a d'], 'mappings': []}, 'PM1sub50RHrangeQAQCRpt': {'slot_uri': 'neon:PM1sub50RHrangeQAQCRpt', 'description': 'Quality assurance and quality control report for the range test for PM1 at RH <50%, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1sub50 r hrange q a q c rpt'], 'mappings': []}, 'PM1sub50RHpersistenceQAQCRpt': {'slot_uri': 'neon:PM1sub50RHpersistenceQAQCRpt', 'description': 'Quality assurance and quality control report for the persistence test for PM1 at RH <50%, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1sub50 r hpersistence q a q c rpt'], 'mappings': []}, 'PM1sub50RHstepQAQCRpt': {'slot_uri': 'neon:PM1sub50RHstepQAQCRpt', 'description': 'Quality assurance and quality control report for the step test for PM1 at RH <50%, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1sub50 r hstep q a q c rpt'], 'mappings': []}, 'PM1sub50RHnullQAQCRpt': {'slot_uri': 'neon:PM1sub50RHnullQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for PM1 at RH <50%, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1sub50 r hnull q a q c rpt'], 'mappings': []}, 'PM1sub50RHgapQAQCRpt': {'slot_uri': 'neon:PM1sub50RHgapQAQCRpt', 'description': 'Quality assurance and quality control report for the gap test for PM1 at RH <50%, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m1sub50 r hgap q a q c rpt'], 'mappings': []}, 'PM1sub50RHconsistencyQAQCRpt': {'slot_uri': 'neon:PM1sub50RHconsistencyQAQCRpt', 'description': 'Quality assurance and quality control report for the consistency test for PM1 at RH <50%, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1sub50 r hconsistency q a q c rpt'], 'mappings': []}, 'PM1sub50RHspikeQAQCRpt': {'slot_uri': 'neon:PM1sub50RHspikeQAQCRpt', 'description': 'Quality assurance and quality control report for the spike test for PM1 at RH <50%, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1sub50 r hspike q a q c rpt'], 'mappings': []}, 'PM1sub50RHalphaQAQCRpt': {'slot_uri': 'neon:PM1sub50RHalphaQAQCRpt', 'description': 'Quality assurance and quality control report for the alpha quality flag for PM1 at RH <50%, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1sub50 r halpha q a q c rpt'], 'mappings': []}, 'PM1sub50RHbetaQAQCRpt': {'slot_uri': 'neon:PM1sub50RHbetaQAQCRpt', 'description': 'Quality assurance and quality control report for the beta quality flag for PM1 at RH <50%, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p m1sub50 r hbeta q a q c rpt'], 'mappings': []}, 'PM1sub50RHrangeFailQM': {'slot_uri': 'neon:PM1sub50RHrangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hrange fail q m'], 'mappings': []}, 'PM1sub50RHrangePassQM': {'slot_uri': 'neon:PM1sub50RHrangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hrange pass q m'], 'mappings': []}, 'PM1sub50RHrangeNAQM': {'slot_uri': 'neon:PM1sub50RHrangeNAQM', 'description': 'Quality metric that summarizes when the range test for PM1 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hrange n a q m'], 'mappings': []}, 'PM1sub50RHpersistenceFailQM': {'slot_uri': 'neon:PM1sub50RHpersistenceFailQM', 'description': 'Quality metric that summarizes  the failed outcomes of the persistence test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hpersistence fail q m'], 'mappings': []}, 'PM1sub50RHpersistencePassQM': {'slot_uri': 'neon:PM1sub50RHpersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hpersistence pass q m'], 'mappings': []}, 'PM1sub50RHpersistenceNAQM': {'slot_uri': 'neon:PM1sub50RHpersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for PM1 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hpersistence n a q m'], 'mappings': []}, 'PM1sub50RHstepFailQM': {'slot_uri': 'neon:PM1sub50RHstepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hstep fail q m'], 'mappings': []}, 'PM1sub50RHstepPassQM': {'slot_uri': 'neon:PM1sub50RHstepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hstep pass q m'], 'mappings': []}, 'PM1sub50RHstepNAQM': {'slot_uri': 'neon:PM1sub50RHstepNAQM', 'description': 'Quality metric that summarizes when the step test for PM1 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hstep n a q m'], 'mappings': []}, 'PM1sub50RHnullFailQM': {'slot_uri': 'neon:PM1sub50RHnullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hnull fail q m'], 'mappings': []}, 'PM1sub50RHnullPassQM': {'slot_uri': 'neon:PM1sub50RHnullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hnull pass q m'], 'mappings': []}, 'PM1sub50RHnullNAQM': {'slot_uri': 'neon:PM1sub50RHnullNAQM', 'description': 'Quality metric that summarizes when the null test for PM1 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hnull n a q m'], 'mappings': []}, 'PM1sub50RHgapFailQM': {'slot_uri': 'neon:PM1sub50RHgapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hgap fail q m'], 'mappings': []}, 'PM1sub50RHgapPassQM': {'slot_uri': 'neon:PM1sub50RHgapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hgap pass q m'], 'mappings': []}, 'PM1sub50RHgapNAQM': {'slot_uri': 'neon:PM1sub50RHgapNAQM', 'description': 'Quality metric that summarizes when the gap test for PM1 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hgap n a q m'], 'mappings': []}, 'PM1sub50RHspikeFailQM': {'slot_uri': 'neon:PM1sub50RHspikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hspike fail q m'], 'mappings': []}, 'PM1sub50RHspikePassQM': {'slot_uri': 'neon:PM1sub50RHspikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hspike pass q m'], 'mappings': []}, 'PM1sub50RHspikeNAQM': {'slot_uri': 'neon:PM1sub50RHspikeNAQM', 'description': 'Quality metric that summarizes when the spike test for PM1 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hspike n a q m'], 'mappings': []}, 'PM1sub50RHconsistencyFailQM': {'slot_uri': 'neon:PM1sub50RHconsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hconsistency fail q m'], 'mappings': []}, 'PM1sub50RHconsistencyPassQM': {'slot_uri': 'neon:PM1sub50RHconsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for PM1 at RH <50% over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hconsistency pass q m'], 'mappings': []}, 'PM1sub50RHconsistencyNAQM': {'slot_uri': 'neon:PM1sub50RHconsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for PM1 at RH <50% could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p m1sub50 r hconsistency n a q m'], 'mappings': []}, 'PM1sub50RHalphaQM': {'slot_uri': 'neon:PM1sub50RHalphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for PM1 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m1sub50 r halpha q m'], 'mappings': []}, 'PM1sub50RHbetaQM': {'slot_uri': 'neon:PM1sub50RHbetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for PM1 at RH <50% over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['p m1sub50 r hbeta q m'], 'mappings': []}, 'PM1sub50RHfinalQF': {'slot_uri': 'neon:PM1sub50RHfinalQF', 'description': 'Quality flag indicating whether the PM1 at RH <50% data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['p m1sub50 r hfinal q f'], 'mappings': []}, 'sensorFlowRateFailQM': {'slot_uri': 'neon:sensorFlowRateFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the sensor flow rate test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sensor flow rate fail q m'], 'mappings': []}, 'sensorFlowRatePassQM': {'slot_uri': 'neon:sensorFlowRatePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the sensor flow rate test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sensor flow rate pass q m'], 'mappings': []}, 'sensorFlowRateNAQM': {'slot_uri': 'neon:sensorFlowRateNAQM', 'description': 'Quality metric that summarizes when the sensor flow rate test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sensor flow rate n a q m'], 'mappings': []}, 'assemblyFlowRateFailQM': {'slot_uri': 'neon:assemblyFlowRateFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the assembly flow rate test over the averaging period, as a percent', 'range': 'double', 'aliases': ['assembly flow rate fail q m'], 'mappings': []}, 'assemblyFlowRatePassQM': {'slot_uri': 'neon:assemblyFlowRatePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the assembly flow rate test over the averaging period, as a percent', 'range': 'double', 'aliases': ['assembly flow rate pass q m'], 'mappings': []}, 'assemblyFlowRateNAQM': {'slot_uri': 'neon:assemblyFlowRateNAQM', 'description': 'Quality metric that summarizes when the assembly flow rate test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['assembly flow rate n a q m'], 'mappings': []}, 'measurementValidityFailQM': {'slot_uri': 'neon:measurementValidityFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the measurement validity test over the averaging period, as a percent', 'range': 'double', 'aliases': ['measurement validity fail q m'], 'mappings': []}, 'measurementValidityPassQM': {'slot_uri': 'neon:measurementValidityPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the measurement validity test over the averaging period, as a percent', 'range': 'double', 'aliases': ['measurement validity pass q m'], 'mappings': []}, 'measurementValidityNAQM': {'slot_uri': 'neon:measurementValidityNAQM', 'description': 'Quality metric that summarizes when the measurement validity test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['measurement validity n a q m'], 'mappings': []}, 'waterSampleID': {'slot_uri': 'neon:waterSampleID', 'description': 'Unique identifier for the water sample to be equilibrated with air', 'range': 'string', 'aliases': ['water sample i d'], 'mappings': []}, 'd2HWaterLow': {'slot_uri': 'neon:d2HWaterLow', 'description': 'Measure in the low standard of the ratio of stable isotopes 2H:1H in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d2 h water low'], 'mappings': []}, 'd18OWaterLow': {'slot_uri': 'neon:d18OWaterLow', 'description': 'Measure in the low standard of the ratio of stable isotopes 18O:16O in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d18 o water low'], 'mappings': []}, 'd2HWaterMed': {'slot_uri': 'neon:d2HWaterMed', 'description': 'Measure in the medium standard of the ratio of stable isotopes 2H:1H in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d2 h water med'], 'mappings': []}, 'd18OWaterMed': {'slot_uri': 'neon:d18OWaterMed', 'description': 'Measure in the medium standard of the ratio of stable isotopes 18O:16O in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d18 o water med'], 'mappings': []}, 'd2HWaterHigh': {'slot_uri': 'neon:d2HWaterHigh', 'description': 'Measure in the high standard of the ratio of stable isotopes 2H:1H in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d2 h water high'], 'mappings': []}, 'd18OWaterHigh': {'slot_uri': 'neon:d18OWaterHigh', 'description': 'Measure in the high standard of the ratio of stable isotopes 18O:16O in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d18 o water high'], 'mappings': []}, 'surfacewaterElevMean': {'slot_uri': 'neon:surfacewaterElevMean', 'description': 'Arithmetic mean of elevation of surfacewater', 'range': 'double', 'aliases': ['surfacewater elev mean'], 'mappings': []}, 'surfacewaterElevMinimum': {'slot_uri': 'neon:surfacewaterElevMinimum', 'description': 'Minimum elevation of surfacewater', 'range': 'double', 'aliases': ['surfacewater elev minimum'], 'mappings': []}, 'surfacewaterElevMaximum': {'slot_uri': 'neon:surfacewaterElevMaximum', 'description': 'Maximum elevation of surfacewater', 'range': 'double', 'aliases': ['surfacewater elev maximum'], 'mappings': []}, 'surfacewaterElevVariance': {'slot_uri': 'neon:surfacewaterElevVariance', 'description': 'Variance in elevation of surfacewater', 'range': 'double', 'aliases': ['surfacewater elev variance'], 'mappings': []}, 'surfacewaterElevNumPts': {'slot_uri': 'neon:surfacewaterElevNumPts', 'description': 'Number of points used to calculate the arithmetic mean of elevation of surfacewater', 'range': 'double', 'aliases': ['surfacewater elev num pts'], 'mappings': []}, 'surfacewaterElevExpUncert': {'slot_uri': 'neon:surfacewaterElevExpUncert', 'description': 'Expanded uncertainty for elevation of surfacewater', 'range': 'double', 'aliases': ['surfacewater elev exp uncert'], 'mappings': []}, 'surfacewaterElevStdErMean': {'slot_uri': 'neon:surfacewaterElevStdErMean', 'description': 'Standard error of the mean for elevation of surfacewater', 'range': 'double', 'aliases': ['surfacewater elev std er mean'], 'mappings': []}, 'sWatElevRangeFailQM': {'slot_uri': 'neon:sWatElevRangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the range test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev range fail q m'], 'mappings': []}, 'sWatElevRangePassQM': {'slot_uri': 'neon:sWatElevRangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the range test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev range pass q m'], 'mappings': []}, 'sWatElevRangeNAQM': {'slot_uri': 'neon:sWatElevRangeNAQM', 'description': 'Quality metric that summarizes when the range test for elevation of surfacewater could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev range n a q m'], 'mappings': []}, 'sWatElevPersistenceFailQM': {'slot_uri': 'neon:sWatElevPersistenceFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the persistence test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev persistence fail q m'], 'mappings': []}, 'sWatElevPersistencePassQM': {'slot_uri': 'neon:sWatElevPersistencePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the persistence test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev persistence pass q m'], 'mappings': []}, 'sWatElevPersistenceNAQM': {'slot_uri': 'neon:sWatElevPersistenceNAQM', 'description': 'Quality metric that summarizes when the persistence test for elevation of surfacewater could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev persistence n a q m'], 'mappings': []}, 'sWatElevStepFailQM': {'slot_uri': 'neon:sWatElevStepFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the step test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev step fail q m'], 'mappings': []}, 'sWatElevStepPassQM': {'slot_uri': 'neon:sWatElevStepPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the step test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev step pass q m'], 'mappings': []}, 'sWatElevStepNAQM': {'slot_uri': 'neon:sWatElevStepNAQM', 'description': 'Quality metric that summarizes when the step test for elevation of surfacewater could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev step n a q m'], 'mappings': []}, 'sWatElevNullFailQM': {'slot_uri': 'neon:sWatElevNullFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the null test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev null fail q m'], 'mappings': []}, 'sWatElevNullPassQM': {'slot_uri': 'neon:sWatElevNullPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the null test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev null pass q m'], 'mappings': []}, 'sWatElevNullNAQM': {'slot_uri': 'neon:sWatElevNullNAQM', 'description': 'Quality metric that summarizes when the null test for elevation of surfacewater could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev null n a q m'], 'mappings': []}, 'sWatElevGapFailQM': {'slot_uri': 'neon:sWatElevGapFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the gap test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev gap fail q m'], 'mappings': []}, 'sWatElevGapPassQM': {'slot_uri': 'neon:sWatElevGapPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the gap test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev gap pass q m'], 'mappings': []}, 'sWatElevGapNAQM': {'slot_uri': 'neon:sWatElevGapNAQM', 'description': 'Quality metric that summarizes when the gap test for elevation of surfacewater could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev gap n a q m'], 'mappings': []}, 'sWatElevSpikeFailQM': {'slot_uri': 'neon:sWatElevSpikeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the spike test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev spike fail q m'], 'mappings': []}, 'sWatElevSpikePassQM': {'slot_uri': 'neon:sWatElevSpikePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the spike test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev spike pass q m'], 'mappings': []}, 'sWatElevSpikeNAQM': {'slot_uri': 'neon:sWatElevSpikeNAQM', 'description': 'Quality metric that summarizes when the spike test for elevation of surfacewater could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev spike n a q m'], 'mappings': []}, 'sWatElevConsistencyFailQM': {'slot_uri': 'neon:sWatElevConsistencyFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the consistency test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev consistency fail q m'], 'mappings': []}, 'sWatElevConsistencyPassQM': {'slot_uri': 'neon:sWatElevConsistencyPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the consistency test for elevation of surfacewater over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev consistency pass q m'], 'mappings': []}, 'sWatElevConsistencyNAQM': {'slot_uri': 'neon:sWatElevConsistencyNAQM', 'description': 'Quality metric that summarizes when the consistency test for elevation of surfacewater could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['s wat elev consistency n a q m'], 'mappings': []}, 'sWatElevAlphaQM': {'slot_uri': 'neon:sWatElevAlphaQM', 'description': 'Quality metric detailing the outcomes of the alpha quality flag for elevation of surfacewater over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['s wat elev alpha q m'], 'mappings': []}, 'sWatElevBetaQM': {'slot_uri': 'neon:sWatElevBetaQM', 'description': 'Quality metric detailing the outcomes of the beta quality flag for elevation of surfacewater over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['s wat elev beta q m'], 'mappings': []}, 'sWatElevFinalQF': {'slot_uri': 'neon:sWatElevFinalQF', 'description': 'Quality flag indicating whether elevation of surfacewater has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['s wat elev final q f'], 'mappings': []}, 'depth0WaterTemp': {'slot_uri': 'neon:depth0WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from shallowest depth', 'range': 'double', 'aliases': ['depth0 water temp'], 'mappings': []}, 'depth1WaterTemp': {'slot_uri': 'neon:depth1WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 2nd shallowest depth', 'range': 'double', 'aliases': ['depth1 water temp'], 'mappings': []}, 'depth2WaterTemp': {'slot_uri': 'neon:depth2WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 3rd shallowest depth', 'range': 'double', 'aliases': ['depth2 water temp'], 'mappings': []}, 'depth3WaterTemp': {'slot_uri': 'neon:depth3WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 4th shallowest depth', 'range': 'double', 'aliases': ['depth3 water temp'], 'mappings': []}, 'depth4WaterTemp': {'slot_uri': 'neon:depth4WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 5th shallowest depth', 'range': 'double', 'aliases': ['depth4 water temp'], 'mappings': []}, 'depth5WaterTemp': {'slot_uri': 'neon:depth5WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 6th shallowest depth', 'range': 'double', 'aliases': ['depth5 water temp'], 'mappings': []}, 'depth6WaterTemp': {'slot_uri': 'neon:depth6WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 7th shallowest depth', 'range': 'double', 'aliases': ['depth6 water temp'], 'mappings': []}, 'depth7WaterTemp': {'slot_uri': 'neon:depth7WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 8th shallowest depth', 'range': 'double', 'aliases': ['depth7 water temp'], 'mappings': []}, 'depth8WaterTemp': {'slot_uri': 'neon:depth8WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 9th shallowest depth', 'range': 'double', 'aliases': ['depth8 water temp'], 'mappings': []}, 'depth9WaterTemp': {'slot_uri': 'neon:depth9WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 10th shallowest depth', 'range': 'double', 'aliases': ['depth9 water temp'], 'mappings': []}, 'thetYaxsMean': {'slot_uri': 'neon:thetYaxsMean', 'description': 'Arithmetic mean of angle (thet) around the attitude and motion reference system cross-axis (Yaxs), positive in clockwise direction, synonymous with pitch angle', 'range': 'double', 'aliases': ['thet yaxs mean'], 'mappings': []}, 'thetXaxsMean': {'slot_uri': 'neon:thetXaxsMean', 'description': 'Arithmetic mean of angle (thet) around the attitude and motion reference system along-axis (Xaxs), positive in clockwise direction, synonymous with roll angle', 'range': 'double', 'aliases': ['thet xaxs mean'], 'mappings': []}, 'thetZaxsMean': {'slot_uri': 'neon:thetZaxsMean', 'description': 'Arithmetic mean of angle (thet) around the attitude and motion reference system vertical-axis (Zaxs), positive in clockwise direction, synonymous with yaw angle', 'range': 'double', 'aliases': ['thet zaxs mean'], 'mappings': []}, 'pHBuoyParked': {'slot_uri': 'neon:pHBuoyParked', 'description': 'Measurement of pH in water from multisonde while parked', 'range': 'double', 'aliases': ['p h buoy parked'], 'mappings': []}, 'pHBuoyProfile': {'slot_uri': 'neon:pHBuoyProfile', 'description': 'Measurement of pH in water from multisonde while profiling', 'range': 'double', 'aliases': ['p h buoy profile'], 'mappings': []}, 'pHVoltageBuoyParked': {'slot_uri': 'neon:pHVoltageBuoyParked', 'description': 'pH meter voltage from multisonde while parked', 'range': 'double', 'aliases': ['p h voltage buoy parked'], 'mappings': []}, 'pHVoltageBuoyProfile': {'slot_uri': 'neon:pHVoltageBuoyProfile', 'description': 'pH voltage from multisonde while profiling', 'range': 'double', 'aliases': ['p h voltage buoy profile'], 'mappings': []}, 'blueGreenBuoyParked': {'slot_uri': 'neon:blueGreenBuoyParked', 'description': 'Blue-green algae phycocyanin concentration in water from multisonde while parked', 'range': 'double', 'aliases': ['blue green buoy parked'], 'mappings': []}, 'blueGreenBuoyProfile': {'slot_uri': 'neon:blueGreenBuoyProfile', 'description': 'Blue-green algae phycocyanin concentration in water from multisonde while profiling', 'range': 'double', 'aliases': ['blue green buoy profile'], 'mappings': []}, 'chlaBuoyParked': {'slot_uri': 'neon:chlaBuoyParked', 'description': 'Chlorophyll a concentration in water from multisonde while parked', 'range': 'double', 'aliases': ['chla buoy parked'], 'mappings': []}, 'chlaBuoyProfile': {'slot_uri': 'neon:chlaBuoyProfile', 'description': 'Chlorophyll a concentration in water from multisonde while profiling', 'range': 'double', 'aliases': ['chla buoy profile'], 'mappings': []}, 'conductanceBuoyParked': {'slot_uri': 'neon:conductanceBuoyParked', 'description': 'Conductivity at ambient temperture from multisonde while parked', 'range': 'double', 'aliases': ['conductance buoy parked'], 'mappings': []}, 'conductanceBuoyProfile': {'slot_uri': 'neon:conductanceBuoyProfile', 'description': 'Conductivity at ambient temperture from multisonde while profiling', 'range': 'double', 'aliases': ['conductance buoy profile'], 'mappings': []}, 'specCondBuoyParked': {'slot_uri': 'neon:specCondBuoyParked', 'description': 'Conductivity auto-corrected to 25 degrees C from multisonde while parked', 'range': 'double', 'aliases': ['spec cond buoy parked'], 'mappings': []}, 'specCondBuoyProfile': {'slot_uri': 'neon:specCondBuoyProfile', 'description': 'Conductivity auto-corrected to 25 degrees C from multisonde while profiling', 'range': 'double', 'aliases': ['spec cond buoy profile'], 'mappings': []}, 'fDOMBuoyParked': {'slot_uri': 'neon:fDOMBuoyParked', 'description': 'Fluorescent dissolved organic matter concentration as quinine sulfate equilivents from multisonde while parked', 'range': 'double', 'aliases': ['f d o m buoy parked'], 'mappings': []}, 'fDOMBuoyProfile': {'slot_uri': 'neon:fDOMBuoyProfile', 'description': 'Fluorescent dissolved organic matter concentration as quinine sulfate equilivents from multisonde while profiling', 'range': 'double', 'aliases': ['f d o m buoy profile'], 'mappings': []}, 'turbidityBuoyParked': {'slot_uri': 'neon:turbidityBuoyParked', 'description': 'Turbidity of water as FNU from multisonde while parked', 'range': 'double', 'aliases': ['turbidity buoy parked'], 'mappings': []}, 'turbidityBuoyProfile': {'slot_uri': 'neon:turbidityBuoyProfile', 'description': 'Turbidity of water as FNU from multisonde while profiling', 'range': 'double', 'aliases': ['turbidity buoy profile'], 'mappings': []}, 'DOSaturationBuoyParked': {'slot_uri': 'neon:DOSaturationBuoyParked', 'description': 'Dissolved Oxygen Percent Saturation from multisonde while parked', 'range': 'double', 'aliases': ['d o saturation buoy parked'], 'mappings': []}, 'DOSaturationBuoyProfile': {'slot_uri': 'neon:DOSaturationBuoyProfile', 'description': 'Dissolved Oxygen Percent Saturation from multisonde while profiling', 'range': 'double', 'aliases': ['d o saturation buoy profile'], 'mappings': []}, 'DOBuoyParked': {'slot_uri': 'neon:DOBuoyParked', 'description': 'Dissolved Oxygen Concentration from multisonde while parked', 'range': 'double', 'aliases': ['d o buoy parked'], 'mappings': []}, 'DOBuoyProfile': {'slot_uri': 'neon:DOBuoyProfile', 'description': 'Dissolved Oxygen Concentration from multisonde while profiling', 'range': 'double', 'aliases': ['d o buoy profile'], 'mappings': []}, 'waterTempBuoyParked': {'slot_uri': 'neon:waterTempBuoyParked', 'description': 'Water temperature from multisonde while parked', 'range': 'double', 'aliases': ['water temp buoy parked'], 'mappings': []}, 'waterTempBuoyProfile': {'slot_uri': 'neon:waterTempBuoyProfile', 'description': 'Water temperature from multisonde while profiling', 'range': 'double', 'aliases': ['water temp buoy profile'], 'mappings': []}, 'waterPressureBuoyParked': {'slot_uri': 'neon:waterPressureBuoyParked', 'description': 'Pressure of surface water measured by the multisonde while parked', 'range': 'double', 'aliases': ['water pressure buoy parked'], 'mappings': []}, 'waterPressureBuoyProfile': {'slot_uri': 'neon:waterPressureBuoyProfile', 'description': 'Pressure of water measured by the multisonde while profiling', 'range': 'double', 'aliases': ['water pressure buoy profile'], 'mappings': []}, 'sensorDepthBuoyParked': {'slot_uri': 'neon:sensorDepthBuoyParked', 'description': 'Water depth of measurement from multisonde while parked', 'range': 'double', 'aliases': ['sensor depth buoy parked'], 'mappings': []}, 'sensorDepthBuoyProfile': {'slot_uri': 'neon:sensorDepthBuoyProfile', 'description': 'Water depth of measurement from multisonde while profiling', 'range': 'double', 'aliases': ['sensor depth buoy profile'], 'mappings': []}, 'batteryVoltageBuoyParked': {'slot_uri': 'neon:batteryVoltageBuoyParked', 'description': 'Battery voltage for multisonde while parked', 'range': 'double', 'aliases': ['battery voltage buoy parked'], 'mappings': []}, 'batteryVoltageBuoyProfile': {'slot_uri': 'neon:batteryVoltageBuoyProfile', 'description': 'Battery voltage for multisonde while profiling', 'range': 'double', 'aliases': ['battery voltage buoy profile'], 'mappings': []}, 'sensorVoltageBuoyParked': {'slot_uri': 'neon:sensorVoltageBuoyParked', 'description': 'Main voltage from multisonde while parked', 'range': 'double', 'aliases': ['sensor voltage buoy parked'], 'mappings': []}, 'sensorVoltageBuoyProfile': {'slot_uri': 'neon:sensorVoltageBuoyProfile', 'description': 'Main voltage from multisonde while profiling', 'range': 'double', 'aliases': ['sensor voltage buoy profile'], 'mappings': []}, 'chlaRawBuoyParked': {'slot_uri': 'neon:chlaRawBuoyParked', 'description': 'Raw signal of chlorophyll a sensor from multisonde while parked', 'range': 'double', 'aliases': ['chla raw buoy parked'], 'mappings': []}, 'chlaRawBuoyProfile': {'slot_uri': 'neon:chlaRawBuoyProfile', 'description': 'Raw signal of chlorophyll a sensor from multisonde while profiling', 'range': 'double', 'aliases': ['chla raw buoy profile'], 'mappings': []}, 'blueGreenRawBuoyParked': {'slot_uri': 'neon:blueGreenRawBuoyParked', 'description': 'Raw signal of blue-green algae sensor from multisonde while parked', 'range': 'double', 'aliases': ['blue green raw buoy parked'], 'mappings': []}, 'blueGreenRawBuoyProfile': {'slot_uri': 'neon:blueGreenRawBuoyProfile', 'description': 'Raw signal of blue-green algae sensor from multisonde while profiling', 'range': 'double', 'aliases': ['blue green raw buoy profile'], 'mappings': []}, 'fDOMRawBuoyParked': {'slot_uri': 'neon:fDOMRawBuoyParked', 'description': 'Raw signal of fluorescent dissolved organic matter sensor as a percent of full scale detected in the sample from multisonde while parked', 'range': 'double', 'aliases': ['f d o m raw buoy parked'], 'mappings': []}, 'fDOMRawBuoyProfile': {'slot_uri': 'neon:fDOMRawBuoyProfile', 'description': 'Raw signal of fluorescent dissolved organic matter sensor as a percent of full scale detected in the sample from multisonde while profiling', 'range': 'double', 'aliases': ['f d o m raw buoy profile'], 'mappings': []}, 'turbidityRawBuoyParked': {'slot_uri': 'neon:turbidityRawBuoyParked', 'description': 'Raw signal of turbidity sensor from multisonde while parked', 'range': 'double', 'aliases': ['turbidity raw buoy parked'], 'mappings': []}, 'turbidityRawBuoyProfile': {'slot_uri': 'neon:turbidityRawBuoyProfile', 'description': 'Raw signal of turbidity sensor from multisonde while profiling', 'range': 'double', 'aliases': ['turbidity raw buoy profile'], 'mappings': []}, 'wiperPositionBuoyParked': {'slot_uri': 'neon:wiperPositionBuoyParked', 'description': 'Position of wiper from multisonde while parked', 'range': 'double', 'aliases': ['wiper position buoy parked'], 'mappings': []}, 'wiperPositionBuoyProfile': {'slot_uri': 'neon:wiperPositionBuoyProfile', 'description': 'Position of wiper from multisonde while profiling', 'range': 'double', 'aliases': ['wiper position buoy profile'], 'mappings': []}, 'soilCO2concentrationMean': {'slot_uri': 'neon:soilCO2concentrationMean', 'description': 'Arithmetic mean of Soil CO2 concentration adjusted for temperature, pressure, oxygen, and humidity conditions', 'range': 'double', 'aliases': ['soil c o2concentration mean'], 'mappings': []}, 'soilCO2concentrationMinimum': {'slot_uri': 'neon:soilCO2concentrationMinimum', 'description': 'Minimum Soil CO2 concentration adjusted for temperature, pressure, oxygen, and humidity conditions', 'range': 'double', 'aliases': ['soil c o2concentration minimum'], 'mappings': []}, 'soilCO2concentrationMaximum': {'slot_uri': 'neon:soilCO2concentrationMaximum', 'description': 'Maximum Soil CO2 concentration adjusted for temperature, pressure, oxygen, and humidity conditions', 'range': 'double', 'aliases': ['soil c o2concentration maximum'], 'mappings': []}, 'soilCO2concentrationVariance': {'slot_uri': 'neon:soilCO2concentrationVariance', 'description': 'Variance in Soil CO2 concentration adjusted for temperature, pressure, oxygen, and humidity conditions', 'range': 'double', 'aliases': ['soil c o2concentration variance'], 'mappings': []}, 'soilCO2concentrationNumPts': {'slot_uri': 'neon:soilCO2concentrationNumPts', 'description': 'Number of points used to calculate the arithmetic mean of Soil CO2 concentration adjusted for temperature, pressure, oxygen, and humidity conditions', 'range': 'double', 'aliases': ['soil c o2concentration num pts'], 'mappings': []}, 'soilCO2concentrationExpUncert': {'slot_uri': 'neon:soilCO2concentrationExpUncert', 'description': 'Expanded uncertainty for Soil CO2 concentration adjusted for temperature, pressure, oxygen, and humidity conditions', 'range': 'double', 'aliases': ['soil c o2concentration exp uncert'], 'mappings': []}, 'soilCO2concentrationStdErMean': {'slot_uri': 'neon:soilCO2concentrationStdErMean', 'description': 'Standard error of the mean for Soil CO2 concentration adjusted for temperature, pressure, oxygen, and humidity conditions', 'range': 'double', 'aliases': ['soil c o2concentration std er mean'], 'mappings': []}, 'warmUpInstallationQAQCRpt': {'slot_uri': 'neon:warmUpInstallationQAQCRpt', 'description': 'Quality assurance and quality control report for the warm-up and installation test, which indicates whether a datum may have been collected while the sensor was still warming up (when accuracy is lower) and/or shortly after installation when the assembly headspace is still equilibrating with soil air (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['warm up installation q a q c rpt'], 'mappings': []}, 'sensorErrorStatusQAQCRpt': {'slot_uri': 'neon:sensorErrorStatusQAQCRpt', 'description': 'Quality assurance and quality control report for the sensor error status test, which indicates whether a datum may have been collected while the sensor was experiencing a fault (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sensor error status q a q c rpt'], 'mappings': []}, 'temperatureSCO2QAQCRpt': {'slot_uri': 'neon:temperatureSCO2QAQCRpt', 'description': 'Quality assurance and quality control report for the temperature test, which indicates whether a datum was collected when the difference in temperature reported by the soil CO2 sensor and a nearby soil temperature was larger than expected (i.e., indicating a possible fault in one or both sensors) (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temperature s c o2 q a q c rpt'], 'mappings': []}, 'pressureRangeQAQCRpt': {'slot_uri': 'neon:pressureRangeQAQCRpt', 'description': 'Quality assurance and quality control report for the pressure range test, which indicates whether a datum was collected when air pressure was outside the manufacturers specifications for the soil CO2 sensor (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['pressure range q a q c rpt'], 'mappings': []}, 'warmUpInstallationFailQM': {'slot_uri': 'neon:warmUpInstallationFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the warm-up and installation test over the averaging period, as a percent', 'range': 'double', 'aliases': ['warm up installation fail q m'], 'mappings': []}, 'warmUpInstallationPassQM': {'slot_uri': 'neon:warmUpInstallationPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the warm-up and installation test over the averaging period, as a percent', 'range': 'double', 'aliases': ['warm up installation pass q m'], 'mappings': []}, 'warmUpInstallationNAQM': {'slot_uri': 'neon:warmUpInstallationNAQM', 'description': 'Quality metric that summarizes when the warm-up and installation test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['warm up installation n a q m'], 'mappings': []}, 'sensorErrorStatusFailQM': {'slot_uri': 'neon:sensorErrorStatusFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the sensor error status test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sensor error status fail q m'], 'mappings': []}, 'sensorErrorStatusPassQM': {'slot_uri': 'neon:sensorErrorStatusPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the sensor error status test over the averaging period, as a percent', 'range': 'double', 'aliases': ['sensor error status pass q m'], 'mappings': []}, 'sensorErrorStatusNAQM': {'slot_uri': 'neon:sensorErrorStatusNAQM', 'description': 'Quality metric that summarizes when the sensor error status test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sensor error status n a q m'], 'mappings': []}, 'temperatureSCO2FailQM': {'slot_uri': 'neon:temperatureSCO2FailQM', 'description': 'Quality metric that summarizes the failed outcomes of the SCO2 temperature test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temperature s c o2 fail q m'], 'mappings': []}, 'temperatureSCO2PassQM': {'slot_uri': 'neon:temperatureSCO2PassQM', 'description': 'Quality metric that summarizes the passed outcomes of the SCO2 temperature test over the averaging period, as a percent', 'range': 'double', 'aliases': ['temperature s c o2 pass q m'], 'mappings': []}, 'temperatureSCO2NAQM': {'slot_uri': 'neon:temperatureSCO2NAQM', 'description': 'Quality metric that summarizes when the SCO2 temperature test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temperature s c o2 n a q m'], 'mappings': []}, 'pressureRangeFailQM': {'slot_uri': 'neon:pressureRangeFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the pressure range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['pressure range fail q m'], 'mappings': []}, 'pressureRangePassQM': {'slot_uri': 'neon:pressureRangePassQM', 'description': 'Quality metric that summarizes the passed outcomes of the pressure range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['pressure range pass q m'], 'mappings': []}, 'pressureRangeNAQM': {'slot_uri': 'neon:pressureRangeNAQM', 'description': 'Quality metric that summarizes when the pressure range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['pressure range n a q m'], 'mappings': []}, 'fulcrumID': {'slot_uri': 'neon:fulcrumID', 'description': 'Identifier for the record in Fulcrum', 'range': 'string', 'aliases': ['fulcrum i d'], 'mappings': []}, 'createdDate': {'slot_uri': 'neon:createdDate', 'description': 'Date and time of record creation', 'range': 'time', 'aliases': ['created date'], 'mappings': []}, 'updatedDate': {'slot_uri': 'neon:updatedDate', 'description': 'Date and time of record update', 'range': 'time', 'aliases': ['updated date'], 'mappings': []}, 'createdBy': {'slot_uri': 'neon:createdBy', 'description': 'An identifier for the technician who created the record', 'range': 'string', 'aliases': ['created by'], 'mappings': []}, 'updatedBy': {'slot_uri': 'neon:updatedBy', 'description': 'An identifier for the technician who updated the record', 'range': 'string', 'aliases': ['updated by'], 'mappings': []}, 'assignedTo': {'slot_uri': 'neon:assignedTo', 'description': 'An identifier for the technician who was assigned to the record', 'range': 'string', 'aliases': ['assigned to'], 'mappings': []}, 'clientCreatedDate': {'slot_uri': 'neon:clientCreatedDate', 'description': 'Date and time of record creation on the data collection device', 'range': 'time', 'aliases': ['client created date'], 'mappings': []}, 'recordVersion': {'slot_uri': 'neon:recordVersion', 'description': 'The version of a data record', 'range': 'string', 'aliases': ['record version'], 'mappings': []}, 'status': {'slot_uri': 'neon:status', 'description': 'The user-selected status of the record for visual quality checks', 'range': 'string', 'aliases': ['status'], 'mappings': []}, 'project': {'slot_uri': 'neon:project', 'description': 'Domain where data were collected', 'range': 'string', 'aliases': ['project'], 'mappings': []}, 'dataEntryAltitude': {'slot_uri': 'neon:dataEntryAltitude', 'description': 'The altitude where data were entered', 'range': 'double', 'aliases': ['data entry altitude'], 'mappings': []}, 'dataEntryLatitude': {'slot_uri': 'neon:dataEntryLatitude', 'description': 'The geographic latitude where data were entered', 'range': 'double', 'aliases': ['data entry latitude'], 'mappings': []}, 'dataEntryLongitude': {'slot_uri': 'neon:dataEntryLongitude', 'description': 'The geographic longitude where data were entered', 'range': 'double', 'aliases': ['data entry longitude'], 'mappings': []}, 'horizontalAccuracy': {'slot_uri': 'neon:horizontalAccuracy', 'description': 'The accuracy of the geographic geometry', 'range': 'double', 'aliases': ['horizontal accuracy'], 'mappings': []}, 'equipmentProblems': {'slot_uri': 'neon:equipmentProblems', 'description': 'Indicator of visible equipment problems of the wet deposition assembly at the time of sample collection; yes requires further specification in remarks', 'range': 'string', 'aliases': ['equipment problems'], 'mappings': []}, 'equipmentProblemsCategory': {'slot_uri': 'neon:equipmentProblemsCategory', 'description': 'List of visible equipment problem categories', 'range': 'string', 'aliases': ['equipment problems category'], 'mappings': []}, 'equipmentProblemsRemarks': {'slot_uri': 'neon:equipmentProblemsRemarks', 'description': 'Additional remarks about additional visible equipment problems', 'range': 'string', 'aliases': ['equipment problems remarks'], 'mappings': []}, 'aSetBy': {'slot_uri': 'neon:aSetBy', 'description': 'Primary NEON technician username who set the collector', 'range': 'string', 'aliases': ['a set by'], 'mappings': []}, 'bSetBy': {'slot_uri': 'neon:bSetBy', 'description': 'Secondary NEON technician username who set the collector', 'range': 'string', 'aliases': ['b set by'], 'mappings': []}, 'chemSubsampleBottleNumber': {'slot_uri': 'neon:chemSubsampleBottleNumber', 'description': 'Number of bottles chemistry subsample was transferred to prior to shipping', 'range': 'string', 'aliases': ['chem subsample bottle number'], 'mappings': []}, 'chemSubsampleBottleStartMass': {'slot_uri': 'neon:chemSubsampleBottleStartMass', 'description': 'Mass of the chemistry subsample collection bottle prior to deployment as measured by NEON field technicians', 'range': 'double', 'aliases': ['chem subsample bottle start mass'], 'mappings': []}, 'chemSubsampleBottleEndMass': {'slot_uri': 'neon:chemSubsampleBottleEndMass', 'description': 'Mass of the chemistry subsample collection bottle and sample after being collected from wet deposition assembly; as measured by NEON field technicians', 'range': 'double', 'aliases': ['chem subsample bottle end mass'], 'mappings': []}, 'chemSubsampleMass': {'slot_uri': 'neon:chemSubsampleMass', 'description': 'Mass of the chemistry subsample, i.e.,  (chemSubsampleBottleEndMass minus chemSubsampleBottleStartMass)', 'range': 'double', 'aliases': ['chem subsample mass'], 'mappings': []}, 'chemSubsampleCompromised': {'slot_uri': 'neon:chemSubsampleCompromised', 'description': 'Indicator of compromised chemistry subsample integrity; yes requires further specification in category and remarks', 'range': 'string', 'aliases': ['chem subsample compromised'], 'mappings': []}, 'chemSubsampleCompromisedCat': {'slot_uri': 'neon:chemSubsampleCompromisedCat', 'description': 'List of compromised chemistry subsample categories', 'range': 'string', 'aliases': ['chem subsample compromised cat'], 'mappings': []}, 'chemSubsampleCompromisedRmrks': {'slot_uri': 'neon:chemSubsampleCompromisedRmrks', 'description': 'Additional remarks about compromised chemistry subsample', 'range': 'string', 'aliases': ['chem subsample compromised rmrks'], 'mappings': []}, 'isoSubsampleBottleNumber': {'slot_uri': 'neon:isoSubsampleBottleNumber', 'description': 'Number of bottles isotope subsample was transferred to prior to shipping', 'range': 'string', 'aliases': ['iso subsample bottle number'], 'mappings': []}, 'isoSubsampleBottleStartMass': {'slot_uri': 'neon:isoSubsampleBottleStartMass', 'description': 'Mass of the isotope subsample collection bottle prior to deployment as measured by NEON field technicians', 'range': 'double', 'aliases': ['iso subsample bottle start mass'], 'mappings': []}, 'isoSubsampleBottleEndMass': {'slot_uri': 'neon:isoSubsampleBottleEndMass', 'description': 'Mass of the isotope subsample collection bottle and sample after being collected from wet deposition assembly; as measured by NEON field technicians', 'range': 'double', 'aliases': ['iso subsample bottle end mass'], 'mappings': []}, 'isoSubsampleMass': {'slot_uri': 'neon:isoSubsampleMass', 'description': 'Mass of the isotope subsample, i.e.,  (isoSubsampleBottleEndMass minus isoSubsampleBottleStartMass)', 'range': 'double', 'aliases': ['iso subsample mass'], 'mappings': []}, 'isoSubsampleCompromised': {'slot_uri': 'neon:isoSubsampleCompromised', 'description': 'Indicator of compromised isotope subsample integrity; yes requires further specification in category and remarks', 'range': 'string', 'aliases': ['iso subsample compromised'], 'mappings': []}, 'isoSubsampleCompromisedCat': {'slot_uri': 'neon:isoSubsampleCompromisedCat', 'description': 'List of compromised isotope subsample categories', 'range': 'string', 'aliases': ['iso subsample compromised cat'], 'mappings': []}, 'isoSubsampleCompromisedRmrks': {'slot_uri': 'neon:isoSubsampleCompromisedRmrks', 'description': 'Additional remarks about compromised isotope subsample', 'range': 'string', 'aliases': ['iso subsample compromised rmrks'], 'mappings': []}, 'iso20SubsampleVolume': {'slot_uri': 'neon:iso20SubsampleVolume', 'description': 'Volume of liquid poured from the isotope subsample into the isotope 20 ml subsample bottle', 'range': 'double', 'aliases': ['iso20 subsample volume'], 'mappings': []}, 'labCompromised': {'slot_uri': 'neon:labCompromised', 'description': 'Indicator of compromised chemistry sample integrity during lab handling; yes requires further specification in remarks', 'range': 'string', 'aliases': ['lab compromised'], 'mappings': []}, 'labCompromisedType': {'slot_uri': 'neon:labCompromisedType', 'description': 'Notes informing compromised chemistry sample', 'range': 'string', 'aliases': ['lab compromised type'], 'mappings': []}, 'labCompromisedRemarks': {'slot_uri': 'neon:labCompromisedRemarks', 'description': 'Additional remarks informing compromised chemistry sample', 'range': 'string', 'aliases': ['lab compromised remarks'], 'mappings': []}, 'sampleFate': {'slot_uri': 'neon:sampleFate', 'description': 'Fate of a sample', 'range': 'string', 'aliases': ['sample fate'], 'mappings': []}, 'sampleCode': {'slot_uri': 'neon:sampleCode', 'description': 'Barcode of a sample', 'range': 'string', 'aliases': ['sample code'], 'mappings': []}, 'chemSubsampleID': {'slot_uri': 'neon:chemSubsampleID', 'description': 'Unique identifier associated with chemistry subsample per sampleID', 'range': 'string', 'aliases': ['chem subsample i d'], 'mappings': []}, 'chemSubsampleFate': {'slot_uri': 'neon:chemSubsampleFate', 'description': 'Fate of chemistry subsample', 'range': 'string', 'aliases': ['chem subsample fate'], 'mappings': []}, 'chemSubsampleBarcode': {'slot_uri': 'neon:chemSubsampleBarcode', 'description': 'Barcode of chemistry subsample', 'range': 'string', 'aliases': ['chem subsample barcode'], 'mappings': []}, 'isoSubsampleID': {'slot_uri': 'neon:isoSubsampleID', 'description': 'Unique identifier associated with isotope subsample per sampleID', 'range': 'string', 'aliases': ['iso subsample i d'], 'mappings': []}, 'isoSubsampleFate': {'slot_uri': 'neon:isoSubsampleFate', 'description': 'Fate of isotope subsample', 'range': 'string', 'aliases': ['iso subsample fate'], 'mappings': []}, 'isoSubsampleBarcode': {'slot_uri': 'neon:isoSubsampleBarcode', 'description': 'Barcode of isotope subsample', 'range': 'string', 'aliases': ['iso subsample barcode'], 'mappings': []}, 'iso20SubsampleID': {'slot_uri': 'neon:iso20SubsampleID', 'description': 'Unique identifier associated with isotope 20 milliliter subsample per sampleID', 'range': 'string', 'aliases': ['iso20 subsample i d'], 'mappings': []}, 'iso20SubsampleFate': {'slot_uri': 'neon:iso20SubsampleFate', 'description': 'Fate of isotope 20 milliliter subsample', 'range': 'string', 'aliases': ['iso20 subsample fate'], 'mappings': []}, 'iso20SubsampleBarcode': {'slot_uri': 'neon:iso20SubsampleBarcode', 'description': 'Barcode of isotope 20 milliliter subsample', 'range': 'string', 'aliases': ['iso20 subsample barcode'], 'mappings': []}, 'isotopeH2OSampleFate': {'slot_uri': 'neon:isotopeH2OSampleFate', 'description': 'Fate of the water stable isotope sample', 'range': 'string', 'aliases': ['isotope h2 o sample fate'], 'mappings': []}, 'isotopeH2OSampleCode': {'slot_uri': 'neon:isotopeH2OSampleCode', 'description': 'Barcode of the water stable isotope sample', 'range': 'string', 'aliases': ['isotope h2 o sample code'], 'mappings': []}, 'isotopePOMSampleFate': {'slot_uri': 'neon:isotopePOMSampleFate', 'description': 'Fate of the particulate organic matter (POM) stable isotope sample', 'range': 'string', 'aliases': ['isotope p o m sample fate'], 'mappings': []}, 'isotopePOMRep2SampleFate': {'slot_uri': 'neon:isotopePOMRep2SampleFate', 'description': 'Fate of the particulate organic matter (POM) stable isotope sample, replicate 2', 'range': 'string', 'aliases': ['isotope p o m rep2 sample fate'], 'mappings': []}, 'isotopePOMRep2SampleCode': {'slot_uri': 'neon:isotopePOMRep2SampleCode', 'description': 'Barcode of the particulate organic matter (POM) stable isotope sample, replicate 2', 'range': 'string', 'aliases': ['isotope p o m rep2 sample code'], 'mappings': []}, 'isotopePOMSampleCode': {'slot_uri': 'neon:isotopePOMSampleCode', 'description': 'Barcode of the particulate organic matter (POM) stable isotope sample', 'range': 'string', 'aliases': ['isotope p o m sample code'], 'mappings': []}, 'dataQF': {'slot_uri': 'neon:dataQF', 'description': 'Data quality flag', 'range': 'string', 'aliases': ['data q f'], 'mappings': []}, 'surfWaterNitrateMean': {'slot_uri': 'neon:surfWaterNitrateMean', 'description': 'Arithmetic mean nitrate concentration in surface water in micromoles per liter', 'range': 'double', 'aliases': ['surf water nitrate mean'], 'mappings': []}, 'surfWaterNitrateMinimum': {'slot_uri': 'neon:surfWaterNitrateMinimum', 'description': 'Minimum nitrate concentration in surface water in micromoles per liter', 'range': 'double', 'aliases': ['surf water nitrate minimum'], 'mappings': []}, 'surfWaterNitrateMaximum': {'slot_uri': 'neon:surfWaterNitrateMaximum', 'description': 'Maximum nitrate concentration in surface water in micromoles per liter', 'range': 'double', 'aliases': ['surf water nitrate maximum'], 'mappings': []}, 'surfWaterNitrateVariance': {'slot_uri': 'neon:surfWaterNitrateVariance', 'description': 'Variance nitrate concentration in surface water in micromoles per liter', 'range': 'double', 'aliases': ['surf water nitrate variance'], 'mappings': []}, 'surfWaterNitrateNumPts': {'slot_uri': 'neon:surfWaterNitrateNumPts', 'description': 'Number of points used to calculate the arithmetic mean nitrate concentration in surface water', 'range': 'double', 'aliases': ['surf water nitrate num pts'], 'mappings': []}, 'surfWaterNitrateExpUncert': {'slot_uri': 'neon:surfWaterNitrateExpUncert', 'description': 'Expanded uncertainty for nitrate concentration in surface water in micromoles per liter', 'range': 'double', 'aliases': ['surf water nitrate exp uncert'], 'mappings': []}, 'surfWaterNitrateStdErMean': {'slot_uri': 'neon:surfWaterNitrateStdErMean', 'description': 'Standard error of the mean for nitrate concentration in surface water in micromoles per liter', 'range': 'double', 'aliases': ['surf water nitrate std er mean'], 'mappings': []}, 'isoTestSubsampleID': {'slot_uri': 'neon:isoTestSubsampleID', 'description': 'Unique identifier associated with isotope analysis subsample per sampleID', 'range': 'string', 'aliases': ['iso test subsample i d'], 'mappings': []}, 'isoTestSubsampleFate': {'slot_uri': 'neon:isoTestSubsampleFate', 'description': 'Fate of isotope analysis subsample', 'range': 'string', 'aliases': ['iso test subsample fate'], 'mappings': []}, 'isoTestSubsampleBarcode': {'slot_uri': 'neon:isoTestSubsampleBarcode', 'description': 'Barcode of isotope analysis subsample', 'range': 'string', 'aliases': ['iso test subsample barcode'], 'mappings': []}, 'isoTestSubsampleVolume': {'slot_uri': 'neon:isoTestSubsampleVolume', 'description': 'Volume of liquid poured from the main isotope subsample into the small isotope analysis subsample bottle', 'range': 'double', 'aliases': ['iso test subsample volume'], 'mappings': []}, 'd18OsdWater': {'slot_uri': 'neon:d18OsdWater', 'description': 'Standard deviation of d18O of replicate H2O samples', 'range': 'double', 'aliases': ['d18 osd water'], 'mappings': []}, 'd2HsdWater': {'slot_uri': 'neon:d2HsdWater', 'description': 'Standard deviation of d2H of replicate H2O samples', 'range': 'double', 'aliases': ['d2 hsd water'], 'mappings': []}, 'd13CPOM': {'slot_uri': 'neon:d13CPOM', 'description': 'Measure of the ratio of stable isotopes 13C:12C of particulate organic matter, relative to the Vienna Pee Dee Belemnite', 'range': 'double', 'aliases': ['d13 c p o m'], 'mappings': []}, 'd15NPOM': {'slot_uri': 'neon:d15NPOM', 'description': 'Measure of the ratio of stable isotopes 15N:14N of particulate organic matter, relative to atmospheric N2', 'range': 'double', 'aliases': ['d15 n p o m'], 'mappings': []}, 'filterSize': {'slot_uri': 'neon:filterSize', 'description': 'Filter diameter', 'range': 'double', 'aliases': ['filter size'], 'mappings': []}, 'filterAnalyzedFraction': {'slot_uri': 'neon:filterAnalyzedFraction', 'description': 'Fraction of the filter sampled', 'range': 'double', 'aliases': ['filter analyzed fraction'], 'mappings': []}, 'plantAlgaeLabUnits': {'slot_uri': 'neon:plantAlgaeLabUnits', 'description': 'Standard units of measure used by the plant and algae external laboratory', 'range': 'string', 'aliases': ['plant algae lab units'], 'mappings': []}, 'instrumentSN': {'slot_uri': 'neon:instrumentSN', 'description': 'Serial number of instrument used to analyze sample', 'range': 'string', 'aliases': ['instrument s n'], 'mappings': []}, 'isotopeH2OExternalLabQF': {'slot_uri': 'neon:isotopeH2OExternalLabQF', 'description': 'Quality flag for samples with high standard deviation (del2Hsd >=0.75 or del18Osd>=0.2) of H2O isotope samples. High standard deviations are flagged with a 1, else flag set to 0', 'range': 'string', 'aliases': ['isotope h2 o external lab q f'], 'mappings': []}, 'H2OIsotopeQAQCID': {'slot_uri': 'neon:H2OIsotopeQAQCID', 'description': 'ID indicating function of standard. PLRM-1 and PLRM-2 are used to calibrate values. SLRM is used to check calibration and to generate drift corrections', 'range': 'string', 'aliases': ['h2 o isotope q a q c i d'], 'mappings': []}, 'd18OMeasured': {'slot_uri': 'neon:d18OMeasured', 'description': 'Corrected measure of the ratio of stable isotopes 18O:16O, relative to the standard Vienna Standard Mean Ocean Water (VSMOW)', 'range': 'double', 'aliases': ['d18 o measured'], 'mappings': []}, 'd2HMeasured': {'slot_uri': 'neon:d2HMeasured', 'description': 'Corrected measure of the ratio of stable isotopes 2H:1H, relative to the standard Vienna Standard Mean Ocean Water (VSMOW)', 'range': 'double', 'aliases': ['d2 h measured'], 'mappings': []}, 'd18OKnown': {'slot_uri': 'neon:d18OKnown', 'description': 'Known value of the ratio of stable isotopes 18O:16O, relative to the standard Vienna Standard Mean Ocean Water (VSMOW)', 'range': 'double', 'aliases': ['d18 o known'], 'mappings': []}, 'd2HKnown': {'slot_uri': 'neon:d2HKnown', 'description': 'Known value of the ratio of stable isotopes 2H:1H, relative to the standard Vienna Standard Mean Ocean Water (VSMOW)', 'range': 'double', 'aliases': ['d2 h known'], 'mappings': []}, 'subsamplesProcessed': {'slot_uri': 'neon:subsamplesProcessed', 'description': 'Number of subsamples processed of each standard', 'range': 'string', 'aliases': ['subsamples processed'], 'mappings': []}, 'isotopeH2OexternalLabQAQCFlag': {'slot_uri': 'neon:isotopeH2OexternalLabQAQCFlag', 'description': 'Quality flag for secondary laboratory reference materials with high SD (d2Hsd >=0.5 or d18Osd >=0.1) or with d18O or d2H values outside the acceptable range for the known values (d18O +/- 0.13 per mill or d2H +/- 1.1). High SD are flagged with a 1', 'range': 'string', 'aliases': ['isotope h2 oexternal lab q a q c flag'], 'mappings': []}, 'cellCountSampleID': {'slot_uri': 'neon:cellCountSampleID', 'description': 'Identifier for the cell count sample', 'range': 'string', 'aliases': ['cell count sample i d'], 'mappings': []}, 'geneticSampleID': {'slot_uri': 'neon:geneticSampleID', 'description': 'Identifier for the genetic sample', 'range': 'string', 'aliases': ['genetic sample i d'], 'mappings': []}, 'labSampleID': {'slot_uri': 'neon:labSampleID', 'description': 'Identifier of laboratory-specific samples analyzed at external lab facility', 'range': 'string', 'aliases': ['lab sample i d'], 'mappings': []}, 'veloSoni': {'slot_uri': 'neon:veloSoni', 'description': 'Linear velocity (velo) of sound (Soni)', 'range': 'double', 'aliases': ['velo soni'], 'mappings': []}, 'towsTrapsNumber': {'slot_uri': 'neon:towsTrapsNumber', 'description': 'Number of zooplankton tows or traps composited into one sample', 'range': 'string', 'aliases': ['tows traps number'], 'mappings': []}, 'totalSampledArea': {'slot_uri': 'neon:totalSampledArea', 'description': 'Total area sampled', 'range': 'double', 'aliases': ['total sampled area'], 'mappings': []}, 'setNetCount': {'slot_uri': 'neon:setNetCount', 'description': 'A per clipID count of nets set for sample collection', 'range': 'string', 'aliases': ['set net count'], 'mappings': []}, 'sampledNetCount': {'slot_uri': 'neon:sampledNetCount', 'description': 'A per clipID count of nets sampled', 'range': 'string', 'aliases': ['sampled net count'], 'mappings': []}, 'missingNetCount': {'slot_uri': 'neon:missingNetCount', 'description': 'A per clipID count of nets missing since set event', 'range': 'string', 'aliases': ['missing net count'], 'mappings': []}, 'aquaticSiteType': {'slot_uri': 'neon:aquaticSiteType', 'description': 'Type of aquatic site, includes lake, river or stream', 'range': 'string', 'aliases': ['aquatic site type'], 'mappings': []}, 'zooDepth1': {'slot_uri': 'neon:zooDepth1', 'description': 'Depth of the first sample for a composite lake zooplankton sample', 'range': 'double', 'aliases': ['zoo depth1'], 'mappings': []}, 'zooDepth2': {'slot_uri': 'neon:zooDepth2', 'description': 'Depth of the second sample for a composite lake zooplankton sample', 'range': 'double', 'aliases': ['zoo depth2'], 'mappings': []}, 'zooDepth3': {'slot_uri': 'neon:zooDepth3', 'description': 'Depth of the third sample for a composite lake zooplankton sample', 'range': 'double', 'aliases': ['zoo depth3'], 'mappings': []}, 'referencePhotoID': {'slot_uri': 'neon:referencePhotoID', 'description': 'Unique identifier for the photo associated with the reference collection', 'range': 'string', 'aliases': ['reference photo i d'], 'mappings': []}, 'sampleBarcode': {'slot_uri': 'neon:sampleBarcode', 'description': 'Barcode for a sample', 'range': 'string', 'aliases': ['sample barcode'], 'mappings': []}, 'ovenStartDate': {'slot_uri': 'neon:ovenStartDate', 'description': 'The date and time a sample was placed in the drying oven', 'range': 'time', 'aliases': ['oven start date'], 'mappings': []}, 'ovenEndDate': {'slot_uri': 'neon:ovenEndDate', 'description': 'The date and time a sample was removed from the drying oven', 'range': 'time', 'aliases': ['oven end date'], 'mappings': []}, 'supplementalDryingTime': {'slot_uri': 'neon:supplementalDryingTime', 'description': 'Additional time in drying oven required to process biomass sample', 'range': 'string', 'aliases': ['supplemental drying time'], 'mappings': []}, 'setBy': {'slot_uri': 'neon:setBy', 'description': 'An identifier for the technician who set the trap', 'range': 'string', 'aliases': ['set by'], 'mappings': []}, 'setRemarks': {'slot_uri': 'neon:setRemarks', 'description': 'Technician notes; free text comments accompanying the set activity', 'range': 'string', 'aliases': ['set remarks'], 'mappings': []}, 'collectRemarks': {'slot_uri': 'neon:collectRemarks', 'description': 'Technician notes; free text comments accompanying the collect activity', 'range': 'string', 'aliases': ['collect remarks'], 'mappings': []}, 'weighRemarks': {'slot_uri': 'neon:weighRemarks', 'description': 'Technician notes; free text comments accompanying the weigh activity', 'range': 'string', 'aliases': ['weigh remarks'], 'mappings': []}, 'compressedBuoyWaterQuality': {'slot_uri': 'neon:compressedBuoyWaterQuality', 'description': 'Single compressed data stream from profiling water quality sonde to be parsed at NEON HQ', 'range': 'string', 'aliases': ['compressed buoy water quality'], 'mappings': []}, 'algaeSampleID': {'slot_uri': 'neon:algaeSampleID', 'description': 'sampleID of aquatic algae sample being processed', 'range': 'string', 'aliases': ['algae sample i d'], 'mappings': []}, 'algaeSampleFate': {'slot_uri': 'neon:algaeSampleFate', 'description': 'Fate of aquatic algae sample', 'range': 'string', 'aliases': ['algae sample fate'], 'mappings': []}, 'algaeSampleCode': {'slot_uri': 'neon:algaeSampleCode', 'description': 'Barcode of an aquatic algae sample', 'range': 'string', 'aliases': ['algae sample code'], 'mappings': []}, 'algalSampleType': {'slot_uri': 'neon:algalSampleType', 'description': 'Type of algal sample collected', 'range': 'string', 'aliases': ['algal sample type'], 'mappings': []}, 'phytoDepth1': {'slot_uri': 'neon:phytoDepth1', 'description': 'First phytoplankton sample depth at sampling location', 'range': 'double', 'aliases': ['phyto depth1'], 'mappings': []}, 'phytoDepth2': {'slot_uri': 'neon:phytoDepth2', 'description': 'Second phytoplankton sample depth at sampling location', 'range': 'double', 'aliases': ['phyto depth2'], 'mappings': []}, 'phytoDepth3': {'slot_uri': 'neon:phytoDepth3', 'description': 'Third phytoplankton sample depth at sampling location', 'range': 'double', 'aliases': ['phyto depth3'], 'mappings': []}, 'fieldSampleVolume': {'slot_uri': 'neon:fieldSampleVolume', 'description': 'Sample volume collected in the field', 'range': 'double', 'aliases': ['field sample volume'], 'mappings': []}, 'alternateFieldSampleVolume': {'slot_uri': 'neon:alternateFieldSampleVolume', 'description': 'Sample volume collected in the field, remeasured in the domain lab to account for any discrepancy or addition of sample due to porewater or other sampling factors', 'range': 'double', 'aliases': ['alternate field sample volume'], 'mappings': []}, 'parentSampleFate': {'slot_uri': 'neon:parentSampleFate', 'description': 'Fate of a parent sample', 'range': 'string', 'aliases': ['parent sample fate'], 'mappings': []}, 'parentSampleCode': {'slot_uri': 'neon:parentSampleCode', 'description': 'Barcode of a parent sample', 'range': 'string', 'aliases': ['parent sample code'], 'mappings': []}, 'sampleClass': {'slot_uri': 'neon:sampleClass', 'description': 'Class of a sample', 'range': 'string', 'aliases': ['sample class'], 'mappings': []}, 'labSampleVolume': {'slot_uri': 'neon:labSampleVolume', 'description': 'Sample volume subsampled in the lab', 'range': 'double', 'aliases': ['lab sample volume'], 'mappings': []}, 'domainFilterVolume': {'slot_uri': 'neon:domainFilterVolume', 'description': 'Volume of material passed through filter at domain lab', 'range': 'double', 'aliases': ['domain filter volume'], 'mappings': []}, 'domainFilterVolumeQF': {'slot_uri': 'neon:domainFilterVolumeQF', 'description': 'Volume of material passed through filter at domain lab, if different from the filterVolume reported by the external lab', 'range': 'double', 'aliases': ['domain filter volume q f'], 'mappings': []}, 'filterNumber': {'slot_uri': 'neon:filterNumber', 'description': 'Number of filter', 'range': 'string', 'aliases': ['filter number'], 'mappings': []}, 'preservativeType': {'slot_uri': 'neon:preservativeType', 'description': 'Type of preservative used in the sample', 'range': 'string', 'aliases': ['preservative type'], 'mappings': []}, 'preservativeVolume': {'slot_uri': 'neon:preservativeVolume', 'description': 'Volume of preservative used in the sample', 'range': 'double', 'aliases': ['preservative volume'], 'mappings': []}, 'sampleCondition': {'slot_uri': 'neon:sampleCondition', 'description': 'Condition of a sample', 'range': 'string', 'aliases': ['sample condition'], 'mappings': []}, 'plantDryMass': {'slot_uri': 'neon:plantDryMass', 'description': 'Dry mass of plant(s) sampled', 'range': 'double', 'aliases': ['plant dry mass'], 'mappings': []}, 'plantSurfaceArea': {'slot_uri': 'neon:plantSurfaceArea', 'description': 'Estimated surface area of plant(s) sampled', 'range': 'double', 'aliases': ['plant surface area'], 'mappings': []}, 'biovolumeMean': {'slot_uri': 'neon:biovolumeMean', 'description': 'Arithmetic mean biovolume of cells of the same taxon', 'range': 'double', 'aliases': ['biovolume mean'], 'mappings': []}, 'biovolumeVariance': {'slot_uri': 'neon:biovolumeVariance', 'description': 'Variance in biovolume across cells of the same taxon', 'range': 'double', 'aliases': ['biovolume variance'], 'mappings': []}, 'biovolumeFormula': {'slot_uri': 'neon:biovolumeFormula', 'description': 'Formula used to calculate biovolume of cells of the same taxon', 'range': 'string', 'aliases': ['biovolume formula'], 'mappings': []}, 'slideCode': {'slot_uri': 'neon:slideCode', 'description': 'Barcode of a slide', 'range': 'string', 'aliases': ['slide code'], 'mappings': []}, 'volumeAdjValue': {'slot_uri': 'neon:volumeAdjValue', 'description': 'Value of the algalParameter corrected for subsampling volume', 'range': 'double', 'aliases': ['volume adj value'], 'mappings': []}, 'volumeAdjUnit': {'slot_uri': 'neon:volumeAdjUnit', 'description': 'Unit of measure associated with the volumeAdjValue', 'range': 'string', 'aliases': ['volume adj unit'], 'mappings': []}, 'arealAdjValue': {'slot_uri': 'neon:arealAdjValue', 'description': 'Value of the parameter, multiplied to account for the area sampled based on sampleType', 'range': 'double', 'aliases': ['areal adj value'], 'mappings': []}, 'arealAdjUnit': {'slot_uri': 'neon:arealAdjUnit', 'description': 'Unit of the parameter corresponding to arealAdjValue', 'range': 'string', 'aliases': ['areal adj unit'], 'mappings': []}, 'biovolumeSpecimenNumber': {'slot_uri': 'neon:biovolumeSpecimenNumber', 'description': 'Number of specimens measured for biovolume', 'range': 'string', 'aliases': ['biovolume specimen number'], 'mappings': []}, 'growthInterval': {'slot_uri': 'neon:growthInterval', 'description': 'The number of growing days between when sampling began and the collection event', 'range': 'string', 'aliases': ['growth interval'], 'mappings': []}, 'cellCountDataQF': {'slot_uri': 'neon:cellCountDataQF', 'description': 'Quality flag for cell count record', 'range': 'string', 'aliases': ['cell count data q f'], 'mappings': []}, 'cellCountSampleFate': {'slot_uri': 'neon:cellCountSampleFate', 'description': 'Fate of a cell count sample', 'range': 'string', 'aliases': ['cell count sample fate'], 'mappings': []}, 'cellCountSampleCode': {'slot_uri': 'neon:cellCountSampleCode', 'description': 'Barcode of a cell count sample', 'range': 'string', 'aliases': ['cell count sample code'], 'mappings': []}, 'nauplii': {'slot_uri': 'neon:nauplii', 'description': 'Indication of whether the zooplankton specimen is nauplii', 'range': 'string', 'aliases': ['nauplii'], 'mappings': []}, 'trapCondition': {'slot_uri': 'neon:trapCondition', 'description': 'Condition of litter trap and indication of whether litter was collected', 'range': 'string', 'aliases': ['trap condition'], 'mappings': []}, 'zooMinimumLength': {'slot_uri': 'neon:zooMinimumLength', 'description': 'Minimum length of individuals in zooplankton taxonomic group subsample', 'range': 'double', 'aliases': ['zoo minimum length'], 'mappings': []}, 'zooMaximumLength': {'slot_uri': 'neon:zooMaximumLength', 'description': 'Maximum length of individuals in zooplankton taxonomic group subsample', 'range': 'double', 'aliases': ['zoo maximum length'], 'mappings': []}, 'zooMeanLength': {'slot_uri': 'neon:zooMeanLength', 'description': 'Mean length of individuals in zooplankton taxonomic group subsample', 'range': 'double', 'aliases': ['zoo mean length'], 'mappings': []}, 'zooWidth': {'slot_uri': 'neon:zooWidth', 'description': 'Mean width of individuals in zooplankton taxonomic group subsample', 'range': 'double', 'aliases': ['zoo width'], 'mappings': []}, 'zooSubsampleVolume': {'slot_uri': 'neon:zooSubsampleVolume', 'description': 'Volume of zooplankton subsample analyzed', 'range': 'double', 'aliases': ['zoo subsample volume'], 'mappings': []}, 'superphylum': {'slot_uri': 'neon:superphylum', 'description': 'The scientific name of the superphylum in which the taxon is classified', 'range': 'string', 'aliases': ['superphylum'], 'mappings': ['http://rs.gbif.org/vocabulary/gbif/rank/superphylum']}, 'infraphylum': {'slot_uri': 'neon:infraphylum', 'description': 'The scientific name of the infraphylum in which the taxon is classified', 'range': 'string', 'aliases': ['infraphylum'], 'mappings': []}, 'referenceFate': {'slot_uri': 'neon:referenceFate', 'description': 'Fate of a reference sample', 'range': 'string', 'aliases': ['reference fate'], 'mappings': []}, 'referenceCode': {'slot_uri': 'neon:referenceCode', 'description': 'Barcode of a reference sample', 'range': 'string', 'aliases': ['reference code'], 'mappings': []}, 'dnaSampleID': {'slot_uri': 'neon:dnaSampleID', 'description': 'Identifier for DNA sample', 'range': 'string', 'aliases': ['dna sample i d'], 'mappings': []}, 'dnaSampleFate': {'slot_uri': 'neon:dnaSampleFate', 'description': 'Fate of a DNA sample', 'range': 'string', 'aliases': ['dna sample fate'], 'mappings': []}, 'dnaSampleCode': {'slot_uri': 'neon:dnaSampleCode', 'description': 'Barcode of a DNA sample', 'range': 'string', 'aliases': ['dna sample code'], 'mappings': []}, 'slideFate': {'slot_uri': 'neon:slideFate', 'description': 'Fate of a slide', 'range': 'string', 'aliases': ['slide fate'], 'mappings': []}, 'fieldDataQF': {'slot_uri': 'neon:fieldDataQF', 'description': 'Data quality flag for field data', 'range': 'string', 'aliases': ['field data q f'], 'mappings': []}, 'externalLabDataQF': {'slot_uri': 'neon:externalLabDataQF', 'description': 'Data quality flag for external lab data', 'range': 'string', 'aliases': ['external lab data q f'], 'mappings': []}, 'perSampleDataQF': {'slot_uri': 'neon:perSampleDataQF', 'description': 'Data quality flag per sample', 'range': 'string', 'aliases': ['per sample data q f'], 'mappings': []}, 'PAR': {'slot_uri': 'neon:PAR', 'description': 'Photosynthetically active radiation (PAR) (irradiance 400-700 nm)', 'range': 'double', 'aliases': ['p a r'], 'mappings': []}, 'airDryEndDate': {'slot_uri': 'neon:airDryEndDate', 'description': 'The date and time a sample completed air drying', 'range': 'time', 'aliases': ['air dry end date'], 'mappings': []}, 'airDryStartDate': {'slot_uri': 'neon:airDryStartDate', 'description': 'The date and time a sample began air drying', 'range': 'time', 'aliases': ['air dry start date'], 'mappings': []}, 'bgcArchiveCode': {'slot_uri': 'neon:bgcArchiveCode', 'description': 'Barcode of a biogeochemistry archive sample', 'range': 'string', 'aliases': ['bgc archive code'], 'mappings': []}, 'bgcArchiveFate': {'slot_uri': 'neon:bgcArchiveFate', 'description': 'Fate of a biogeochemistry archive sample', 'range': 'string', 'aliases': ['bgc archive fate'], 'mappings': []}, 'bgcArchiveID': {'slot_uri': 'neon:bgcArchiveID', 'description': 'Identifier for a biogeochemistry archive sample', 'range': 'string', 'aliases': ['bgc archive i d'], 'mappings': []}, 'biomassCode': {'slot_uri': 'neon:biomassCode', 'description': 'Barcode of biomass sample', 'range': 'string', 'aliases': ['biomass code'], 'mappings': []}, 'biomassFate': {'slot_uri': 'neon:biomassFate', 'description': 'Fate of biomass sample', 'range': 'string', 'aliases': ['biomass fate'], 'mappings': []}, 'biomassID': {'slot_uri': 'neon:biomassID', 'description': 'Identifier for biomass sample', 'range': 'string', 'aliases': ['biomass i d'], 'mappings': []}, 'boutType': {'slot_uri': 'neon:boutType', 'description': 'Type of analyses that will be conducted on samples collected during the bout', 'range': 'string', 'aliases': ['bout type'], 'mappings': []}, 'cnSampleCode': {'slot_uri': 'neon:cnSampleCode', 'description': 'Barcode of a carbon-nitrogen sample', 'range': 'string', 'aliases': ['cn sample code'], 'mappings': []}, 'cnSampleFate': {'slot_uri': 'neon:cnSampleFate', 'description': 'Fate of a carbon-nitrogen sample', 'range': 'string', 'aliases': ['cn sample fate'], 'mappings': []}, 'cnSampleID': {'slot_uri': 'neon:cnSampleID', 'description': 'Identifier for a carbon-nitrogen sample', 'range': 'string', 'aliases': ['cn sample i d'], 'mappings': []}, 'compositeSampleCode': {'slot_uri': 'neon:compositeSampleCode', 'description': 'Barcode for a sample that is a composite of field collected material', 'range': 'string', 'aliases': ['composite sample code'], 'mappings': []}, 'compositeSampleFate': {'slot_uri': 'neon:compositeSampleFate', 'description': 'Fate of a sample that is a composite of field collected material', 'range': 'string', 'aliases': ['composite sample fate'], 'mappings': []}, 'compositeSampleID': {'slot_uri': 'neon:compositeSampleID', 'description': 'Unique identifier for a sample that is a composite of field collected material', 'range': 'string', 'aliases': ['composite sample i d'], 'mappings': []}, 'coreCoordinateX': {'slot_uri': 'neon:coreCoordinateX', 'description': 'x location of the soil core relative to the SW corner', 'range': 'double', 'aliases': ['core coordinate x'], 'mappings': []}, 'coreCoordinateY': {'slot_uri': 'neon:coreCoordinateY', 'description': 'y location of the soil core relative to the SW corner', 'range': 'double', 'aliases': ['core coordinate y'], 'mappings': []}, 'freshMassBoatMass': {'slot_uri': 'neon:freshMassBoatMass', 'description': 'Combined mass of a fresh sample and weigh boat', 'range': 'double', 'aliases': ['fresh mass boat mass'], 'mappings': []}, 'geneticArchiveSample1Code': {'slot_uri': 'neon:geneticArchiveSample1Code', 'description': 'Barcode of genetic archive subsample 1', 'range': 'string', 'aliases': ['genetic archive sample1 code'], 'mappings': []}, 'geneticArchiveSample1Fate': {'slot_uri': 'neon:geneticArchiveSample1Fate', 'description': 'Fate of genetic archive subsample 1', 'range': 'string', 'aliases': ['genetic archive sample1 fate'], 'mappings': []}, 'geneticArchiveSample1ID': {'slot_uri': 'neon:geneticArchiveSample1ID', 'description': 'Identifier for genetic archive subsample 1', 'range': 'string', 'aliases': ['genetic archive sample1 i d'], 'mappings': []}, 'geneticArchiveSample2Code': {'slot_uri': 'neon:geneticArchiveSample2Code', 'description': 'Barcode of genetic archive subsample 2', 'range': 'string', 'aliases': ['genetic archive sample2 code'], 'mappings': []}, 'geneticArchiveSample2Fate': {'slot_uri': 'neon:geneticArchiveSample2Fate', 'description': 'Fate of genetic archive subsample 2', 'range': 'string', 'aliases': ['genetic archive sample2 fate'], 'mappings': []}, 'geneticArchiveSample2ID': {'slot_uri': 'neon:geneticArchiveSample2ID', 'description': 'Identifier for genetic archive subsample 2', 'range': 'string', 'aliases': ['genetic archive sample2 i d'], 'mappings': []}, 'geneticArchiveSample3Code': {'slot_uri': 'neon:geneticArchiveSample3Code', 'description': 'Barcode of genetic archive subsample 3', 'range': 'string', 'aliases': ['genetic archive sample3 code'], 'mappings': []}, 'geneticArchiveSample3Fate': {'slot_uri': 'neon:geneticArchiveSample3Fate', 'description': 'Fate of genetic archive subsample 3', 'range': 'string', 'aliases': ['genetic archive sample3 fate'], 'mappings': []}, 'geneticArchiveSample3ID': {'slot_uri': 'neon:geneticArchiveSample3ID', 'description': 'Identifier for genetic archive subsample 3', 'range': 'string', 'aliases': ['genetic archive sample3 i d'], 'mappings': []}, 'geneticArchiveSample4Code': {'slot_uri': 'neon:geneticArchiveSample4Code', 'description': 'Barcode of genetic archive subsample 4', 'range': 'string', 'aliases': ['genetic archive sample4 code'], 'mappings': []}, 'geneticArchiveSample4Fate': {'slot_uri': 'neon:geneticArchiveSample4Fate', 'description': 'Fate of genetic archive subsample 4', 'range': 'string', 'aliases': ['genetic archive sample4 fate'], 'mappings': []}, 'geneticArchiveSample4ID': {'slot_uri': 'neon:geneticArchiveSample4ID', 'description': 'Identifier for genetic archive subsample 4', 'range': 'string', 'aliases': ['genetic archive sample4 i d'], 'mappings': []}, 'geneticArchiveSample5Code': {'slot_uri': 'neon:geneticArchiveSample5Code', 'description': 'Barcode of genetic archive subsample 5', 'range': 'string', 'aliases': ['genetic archive sample5 code'], 'mappings': []}, 'geneticArchiveSample5Fate': {'slot_uri': 'neon:geneticArchiveSample5Fate', 'description': 'Fate of genetic archive subsample 5', 'range': 'string', 'aliases': ['genetic archive sample5 fate'], 'mappings': []}, 'geneticArchiveSample5ID': {'slot_uri': 'neon:geneticArchiveSample5ID', 'description': 'Identifier for genetic archive subsample 5', 'range': 'string', 'aliases': ['genetic archive sample5 i d'], 'mappings': []}, 'geneticArchiveSampleCount': {'slot_uri': 'neon:geneticArchiveSampleCount', 'description': 'Number of subsamples collected for genetic archive', 'range': 'integer', 'aliases': ['genetic archive sample count'], 'mappings': []}, 'geneticSampleCode': {'slot_uri': 'neon:geneticSampleCode', 'description': 'Barcode of a genetic sample', 'range': 'string', 'aliases': ['genetic sample code'], 'mappings': []}, 'geneticSampleCondition': {'slot_uri': 'neon:geneticSampleCondition', 'description': 'Condition of genetic sample storage or processing', 'range': 'string', 'aliases': ['genetic sample condition'], 'mappings': []}, 'geneticSampleFate': {'slot_uri': 'neon:geneticSampleFate', 'description': 'Fate of a genetic sample', 'range': 'string', 'aliases': ['genetic sample fate'], 'mappings': []}, 'horizon': {'slot_uri': 'neon:horizon', 'description': 'Organic or mineral soil', 'range': 'string', 'aliases': ['horizon'], 'mappings': []}, 'horizonExceedsSampleDepth': {'slot_uri': 'neon:horizonExceedsSampleDepth', 'description': 'Whether the sampled soil horizon extends beyond the sample depth', 'range': 'string', 'aliases': ['horizon exceeds sample depth'], 'mappings': []}, 'litterDepth': {'slot_uri': 'neon:litterDepth', 'description': 'Depth of litter layer', 'range': 'double', 'aliases': ['litter depth'], 'mappings': []}, 'locationFlooded': {'slot_uri': 'neon:locationFlooded', 'description': 'Indicates whether standing water was present at the time of sampling', 'range': 'string', 'aliases': ['location flooded'], 'mappings': []}, 'moistureSampleCode': {'slot_uri': 'neon:moistureSampleCode', 'description': 'Barcode of moisture subsample', 'range': 'string', 'aliases': ['moisture sample code'], 'mappings': []}, 'moistureSampleFate': {'slot_uri': 'neon:moistureSampleFate', 'description': 'Fate of moisture sample', 'range': 'string', 'aliases': ['moisture sample fate'], 'mappings': []}, 'moistureSampleID': {'slot_uri': 'neon:moistureSampleID', 'description': 'Identifier of moisture sample', 'range': 'string', 'aliases': ['moisture sample i d'], 'mappings': []}, 'nTransBoutType': {'slot_uri': 'neon:nTransBoutType', 'description': 'Category of bout in relation to nitrogen transformation sample collection', 'range': 'string', 'aliases': ['n trans bout type'], 'mappings': []}, 'pHCaClVol': {'slot_uri': 'neon:pHCaClVol', 'description': 'Volume of water used for CaCl measurement', 'range': 'double', 'aliases': ['p h ca cl vol'], 'mappings': []}, 'pHSampleCode': {'slot_uri': 'neon:pHSampleCode', 'description': 'Barcode of pH sample', 'range': 'string', 'aliases': ['p h sample code'], 'mappings': []}, 'pHSampleFate': {'slot_uri': 'neon:pHSampleFate', 'description': 'Fate of pH sample', 'range': 'string', 'aliases': ['p h sample fate'], 'mappings': []}, 'pHSampleID': {'slot_uri': 'neon:pHSampleID', 'description': 'Identifier for pH sample', 'range': 'string', 'aliases': ['p h sample i d'], 'mappings': []}, 'pHSoilInCaClMass': {'slot_uri': 'neon:pHSoilInCaClMass', 'description': 'Mass of soil used to analyze pH in calcium chloride solution', 'range': 'double', 'aliases': ['p h soil in ca cl mass'], 'mappings': []}, 'pHSoilInWaterMass': {'slot_uri': 'neon:pHSoilInWaterMass', 'description': 'Mass of soil used to analyze pH in water solution', 'range': 'double', 'aliases': ['p h soil in water mass'], 'mappings': []}, 'pHWaterVol': {'slot_uri': 'neon:pHWaterVol', 'description': 'Volume of water used for pH measurement', 'range': 'double', 'aliases': ['p h water vol'], 'mappings': []}, 'processedBy': {'slot_uri': 'neon:processedBy', 'description': 'An identifier for the technician who processed the sample(s)', 'range': 'string', 'aliases': ['processed by'], 'mappings': []}, 'sampleBottomDepth': {'slot_uri': 'neon:sampleBottomDepth', 'description': 'Depth below the soil surface of the bottom of a soil sample', 'range': 'double', 'aliases': ['sample bottom depth'], 'mappings': []}, 'sampleTopDepth': {'slot_uri': 'neon:sampleTopDepth', 'description': 'Depth below the soil surface of the top of a soil sample', 'range': 'double', 'aliases': ['sample top depth'], 'mappings': []}, 'soilCoreCount': {'slot_uri': 'neon:soilCoreCount', 'description': 'Number of soil cores combined per sample', 'range': 'string', 'aliases': ['soil core count'], 'mappings': []}, 'soilInCaClpH': {'slot_uri': 'neon:soilInCaClpH', 'description': 'pH value of soil measured in calcium chloride solution', 'range': 'double', 'aliases': ['soil in ca clp h'], 'mappings': []}, 'soilInWaterpH': {'slot_uri': 'neon:soilInWaterpH', 'description': 'pH value of soil measured in water solution', 'range': 'double', 'aliases': ['soil in waterp h'], 'mappings': []}, 'soilSamplingDevice': {'slot_uri': 'neon:soilSamplingDevice', 'description': 'Type of soil collection device used for sampling', 'range': 'string', 'aliases': ['soil sampling device'], 'mappings': []}, 'soilTemp': {'slot_uri': 'neon:soilTemp', 'description': 'In-situ temperature of soil at approximately 10 cm depth', 'range': 'double', 'aliases': ['soil temp'], 'mappings': []}, 'toCompositeBarcodeList': {'slot_uri': 'neon:toCompositeBarcodeList', 'description': 'List of barcodes of composite samples in a pooled sample', 'range': 'string', 'aliases': ['to composite barcode list'], 'mappings': []}, 'toCompositeFateList': {'slot_uri': 'neon:toCompositeFateList', 'description': 'List of fates of composite samples in a pooled sample', 'range': 'string', 'aliases': ['to composite fate list'], 'mappings': []}, 'toCompositeSampleIDList': {'slot_uri': 'neon:toCompositeSampleIDList', 'description': 'List of composite identifiers in a pooled sample', 'range': 'string', 'aliases': ['to composite sample i d list'], 'mappings': []}, 'testingIDCode': {'slot_uri': 'neon:testingIDCode', 'description': 'Barcode of a test sample', 'range': 'string', 'aliases': ['testing i d code'], 'mappings': []}, 'testingIDFate': {'slot_uri': 'neon:testingIDFate', 'description': 'Fate of a test sample', 'range': 'string', 'aliases': ['testing i d fate'], 'mappings': []}, 'chemSubsampleCondition': {'slot_uri': 'neon:chemSubsampleCondition', 'description': 'List of chemistry subsample condition categories', 'range': 'string', 'aliases': ['chem subsample condition'], 'mappings': []}, 'chemSubsampleConditionRemarks': {'slot_uri': 'neon:chemSubsampleConditionRemarks', 'description': 'Additional remarks about the condition of the chemistry subsample', 'range': 'string', 'aliases': ['chem subsample condition remarks'], 'mappings': []}, 'isoSubsampleCondition': {'slot_uri': 'neon:isoSubsampleCondition', 'description': 'List of isotope subsample condition categories', 'range': 'string', 'aliases': ['iso subsample condition'], 'mappings': []}, 'isoSubsampleConditionRemarks': {'slot_uri': 'neon:isoSubsampleConditionRemarks', 'description': 'Additional remarks about the condition of the isotope subsample', 'range': 'string', 'aliases': ['iso subsample condition remarks'], 'mappings': []}, 'tempOutOfBounds': {'slot_uri': 'neon:tempOutOfBounds', 'description': 'Percent of data points where temperature of the wet deposition trap falling outside the ideal range', 'range': 'double', 'aliases': ['temp out of bounds'], 'mappings': []}, 'chemSubsampleDataQF': {'slot_uri': 'neon:chemSubsampleDataQF', 'description': 'Data quality flag from wdp_collectionChem_in', 'range': 'integer', 'aliases': ['chem subsample data q f'], 'mappings': []}, 'labDataQF': {'slot_uri': 'neon:labDataQF', 'description': 'Data quality flag from wdp_chemLab_in', 'range': 'integer', 'aliases': ['lab data q f'], 'mappings': []}, 'labCondition': {'slot_uri': 'neon:labCondition', 'description': 'Condition of the sample sample', 'range': 'string', 'aliases': ['lab condition'], 'mappings': []}, 'labConditionRemarks': {'slot_uri': 'neon:labConditionRemarks', 'description': 'Additional remarks informing the condition of chemistry sample', 'range': 'string', 'aliases': ['lab condition remarks'], 'mappings': []}, 'pHUncertainty': {'slot_uri': 'neon:pHUncertainty', 'description': 'The uncertainty reported for measured pH', 'range': 'double', 'aliases': ['p h uncertainty'], 'mappings': []}, 'precipAmmonium': {'slot_uri': 'neon:precipAmmonium', 'description': 'The concentration of ammonium in precipitation', 'range': 'double', 'aliases': ['precip ammonium'], 'mappings': []}, 'precipAmmoniumFlag': {'slot_uri': 'neon:precipAmmoniumFlag', 'description': 'A text flag for ammonium measurements', 'range': 'string', 'aliases': ['precip ammonium flag'], 'mappings': []}, 'precipAmmoniumUncertainty': {'slot_uri': 'neon:precipAmmoniumUncertainty', 'description': 'The uncertainty reported for measured concentrations of ammonium', 'range': 'double', 'aliases': ['precip ammonium uncertainty'], 'mappings': []}, 'precipBromide': {'slot_uri': 'neon:precipBromide', 'description': 'The concentration of bromide in precipitation', 'range': 'double', 'aliases': ['precip bromide'], 'mappings': []}, 'precipBromideFlag': {'slot_uri': 'neon:precipBromideFlag', 'description': 'A text flag for bromide measurements', 'range': 'string', 'aliases': ['precip bromide flag'], 'mappings': []}, 'precipBromideUncertainty': {'slot_uri': 'neon:precipBromideUncertainty', 'description': 'The uncertainty reported for measured concentrations of bromide', 'range': 'double', 'aliases': ['precip bromide uncertainty'], 'mappings': []}, 'precipCalcium': {'slot_uri': 'neon:precipCalcium', 'description': 'The concentration of calcium in precipitation', 'range': 'double', 'aliases': ['precip calcium'], 'mappings': []}, 'precipCalciumFlag': {'slot_uri': 'neon:precipCalciumFlag', 'description': 'A text flag for calcium measurements', 'range': 'string', 'aliases': ['precip calcium flag'], 'mappings': []}, 'precipCalciumUncertainty': {'slot_uri': 'neon:precipCalciumUncertainty', 'description': 'The uncertainty reported for measured concentrations of calcium', 'range': 'double', 'aliases': ['precip calcium uncertainty'], 'mappings': []}, 'precipChloride': {'slot_uri': 'neon:precipChloride', 'description': 'The concentration of chloride in precipitation', 'range': 'double', 'aliases': ['precip chloride'], 'mappings': []}, 'precipChlorideFlag': {'slot_uri': 'neon:precipChlorideFlag', 'description': 'A text flag for chloride measurements', 'range': 'string', 'aliases': ['precip chloride flag'], 'mappings': []}, 'precipChlorideUncertainty': {'slot_uri': 'neon:precipChlorideUncertainty', 'description': 'The uncertainty reported for measured concentrations of chloride', 'range': 'double', 'aliases': ['precip chloride uncertainty'], 'mappings': []}, 'precipConductivity': {'slot_uri': 'neon:precipConductivity', 'description': 'The conductivity of precipitation', 'range': 'double', 'aliases': ['precip conductivity'], 'mappings': []}, 'precipConductivityUncertainty': {'slot_uri': 'neon:precipConductivityUncertainty', 'description': 'The uncertainty reported for measured conductivity', 'range': 'double', 'aliases': ['precip conductivity uncertainty'], 'mappings': []}, 'precipMagnesium': {'slot_uri': 'neon:precipMagnesium', 'description': 'The concentration of magnesium in precipitation', 'range': 'double', 'aliases': ['precip magnesium'], 'mappings': []}, 'precipMagnesiumFlag': {'slot_uri': 'neon:precipMagnesiumFlag', 'description': 'A text flag for magnesium measurements', 'range': 'string', 'aliases': ['precip magnesium flag'], 'mappings': []}, 'precipMagnesiumUncertainty': {'slot_uri': 'neon:precipMagnesiumUncertainty', 'description': 'The uncertainty reported for measured concentrations of magnesium', 'range': 'double', 'aliases': ['precip magnesium uncertainty'], 'mappings': []}, 'precipNitrate': {'slot_uri': 'neon:precipNitrate', 'description': 'The concentration of nitrate in precipitation', 'range': 'double', 'aliases': ['precip nitrate'], 'mappings': []}, 'precipNitrateFlag': {'slot_uri': 'neon:precipNitrateFlag', 'description': 'A text flag for nitrate measurements', 'range': 'string', 'aliases': ['precip nitrate flag'], 'mappings': []}, 'precipNitrateUncertainty': {'slot_uri': 'neon:precipNitrateUncertainty', 'description': 'The uncertainty reported for measured concentrations of nitrate', 'range': 'double', 'aliases': ['precip nitrate uncertainty'], 'mappings': []}, 'precipPhosphate': {'slot_uri': 'neon:precipPhosphate', 'description': 'The concentration of phosphate in precipitation', 'range': 'double', 'aliases': ['precip phosphate'], 'mappings': []}, 'precipPhosphateFlag': {'slot_uri': 'neon:precipPhosphateFlag', 'description': 'A text flag for phosphate measurements', 'range': 'string', 'aliases': ['precip phosphate flag'], 'mappings': []}, 'precipPhosphateUncertainty': {'slot_uri': 'neon:precipPhosphateUncertainty', 'description': 'The uncertainty reported for measured concentrations of phosphate', 'range': 'double', 'aliases': ['precip phosphate uncertainty'], 'mappings': []}, 'precipPotassium': {'slot_uri': 'neon:precipPotassium', 'description': 'The concentration of potassium in precipitation', 'range': 'double', 'aliases': ['precip potassium'], 'mappings': []}, 'precipPotassiumFlag': {'slot_uri': 'neon:precipPotassiumFlag', 'description': 'A text flag for potassium measurements', 'range': 'string', 'aliases': ['precip potassium flag'], 'mappings': []}, 'precipPotassiumUncertainty': {'slot_uri': 'neon:precipPotassiumUncertainty', 'description': 'The uncertainty reported for measured concentrations of potassium', 'range': 'double', 'aliases': ['precip potassium uncertainty'], 'mappings': []}, 'precipSodium': {'slot_uri': 'neon:precipSodium', 'description': 'The concentration of sodium in precipitation', 'range': 'double', 'aliases': ['precip sodium'], 'mappings': []}, 'precipSodiumFlag': {'slot_uri': 'neon:precipSodiumFlag', 'description': 'A text flag for sodium measurements', 'range': 'string', 'aliases': ['precip sodium flag'], 'mappings': []}, 'precipSodiumUncertainty': {'slot_uri': 'neon:precipSodiumUncertainty', 'description': 'The uncertainty reported for measured concentrations of sodium', 'range': 'double', 'aliases': ['precip sodium uncertainty'], 'mappings': []}, 'precipSulfate': {'slot_uri': 'neon:precipSulfate', 'description': 'The concentration of sulfate in precipitation', 'range': 'double', 'aliases': ['precip sulfate'], 'mappings': []}, 'precipSulfateFlag': {'slot_uri': 'neon:precipSulfateFlag', 'description': 'A text flag for sulfate measurements', 'range': 'string', 'aliases': ['precip sulfate flag'], 'mappings': []}, 'precipSulfateUncertainty': {'slot_uri': 'neon:precipSulfateUncertainty', 'description': 'The uncertainty reported for measured concentrations of sulfate', 'range': 'double', 'aliases': ['precip sulfate uncertainty'], 'mappings': []}, 'collectionDataQF': {'slot_uri': 'neon:collectionDataQF', 'description': 'Data quality flag from wdp_collection_in', 'range': 'integer', 'aliases': ['collection data q f'], 'mappings': []}, 'processTimeQF': {'slot_uri': 'neon:processTimeQF', 'description': 'Quality Flag for exceeding processing time requirements', 'range': 'integer', 'aliases': ['process time q f'], 'mappings': []}, 'analyteAccuracy': {'slot_uri': 'neon:analyteAccuracy', 'description': 'Long-term average accuracy, e.g. the absolute difference between observed and known values of the analyte, based on analysis of quality assurance reference materials or standards treated as unknowns', 'range': 'double', 'aliases': ['analyte accuracy'], 'mappings': []}, 'analyteStandardDeviation': {'slot_uri': 'neon:analyteStandardDeviation', 'description': 'Long-term average standard deviation values of the analyte, based on analysis of quality assurance reference materials or standards treated as unknowns', 'range': 'double', 'aliases': ['analyte standard deviation'], 'mappings': []}, 'isoCollectionDataQF': {'slot_uri': 'neon:isoCollectionDataQF', 'description': 'Data quality flag from wdp_isoCollection_in', 'range': 'integer', 'aliases': ['iso collection data q f'], 'mappings': []}, 'qaReferenceID': {'slot_uri': 'neon:qaReferenceID', 'description': 'Identifier for quality assurance reference material or standard', 'range': 'string', 'aliases': ['qa reference i d'], 'mappings': []}, 'standardReferenceKnownValue': {'slot_uri': 'neon:standardReferenceKnownValue', 'description': 'The known value for QA reference material, with units tied to the analyte', 'range': 'double', 'aliases': ['standard reference known value'], 'mappings': []}, 'standardReferenceMeasuredMean': {'slot_uri': 'neon:standardReferenceMeasuredMean', 'description': 'Long-term average of the measured value for QA reference material, with units tied to the analyte', 'range': 'double', 'aliases': ['standard reference measured mean'], 'mappings': []}, 'adjacentAreaLeftRemarks': {'slot_uri': 'neon:adjacentAreaLeftRemarks', 'description': 'Free form comments describing adjacent area on river left', 'range': 'string', 'aliases': ['adjacent area left remarks'], 'mappings': []}, 'adjacentAreaRightRemarks': {'slot_uri': 'neon:adjacentAreaRightRemarks', 'description': 'Free form comments describing adjacent area on river right', 'range': 'string', 'aliases': ['adjacent area right remarks'], 'mappings': []}, 'agriculturePresence': {'slot_uri': 'neon:agriculturePresence', 'description': 'Presence or absence of agricultural activities in a riparian transect', 'range': 'string', 'aliases': ['agriculture presence'], 'mappings': []}, 'bankLR': {'slot_uri': 'neon:bankLR', 'description': 'Left or right bank of a stream or river', 'range': 'string', 'aliases': ['bank l r'], 'mappings': []}, 'bareDirtCoverClass': {'slot_uri': 'neon:bareDirtCoverClass', 'description': 'Cover class of bare dirt', 'range': 'string', 'aliases': ['bare dirt cover class'], 'mappings': []}, 'bigTreeCoverClass': {'slot_uri': 'neon:bigTreeCoverClass', 'description': 'Vegetation cover class for trees greater than 0.3 m diameter at breast height (DBH)', 'range': 'string', 'aliases': ['big tree cover class'], 'mappings': []}, 'bigTreeType': {'slot_uri': 'neon:bigTreeType', 'description': 'Vegetation type for trees greater than 0.3 m diameter at breast height (DBH)', 'range': 'string', 'aliases': ['big tree type'], 'mappings': []}, 'boatRampPresence': {'slot_uri': 'neon:boatRampPresence', 'description': 'Presence or absence of boat ramps in a riparian transect', 'range': 'string', 'aliases': ['boat ramp presence'], 'mappings': []}, 'buildingPresence': {'slot_uri': 'neon:buildingPresence', 'description': 'Presence or absence of buildings in a riparian transect', 'range': 'string', 'aliases': ['building presence'], 'mappings': []}, 'dominantBankAngle': {'slot_uri': 'neon:dominantBankAngle', 'description': 'Dominant bank angle', 'range': 'string', 'aliases': ['dominant bank angle'], 'mappings': []}, 'dominantBankRevetment': {'slot_uri': 'neon:dominantBankRevetment', 'description': 'Dominant bank revetment', 'range': 'string', 'aliases': ['dominant bank revetment'], 'mappings': []}, 'dominantBankTexture': {'slot_uri': 'neon:dominantBankTexture', 'description': 'Dominant bank texture', 'range': 'string', 'aliases': ['dominant bank texture'], 'mappings': []}, 'industryPresence': {'slot_uri': 'neon:industryPresence', 'description': 'Presence or absence of industrial activities in a riparian transect', 'range': 'string', 'aliases': ['industry presence'], 'mappings': []}, 'lawnsParksPresence': {'slot_uri': 'neon:lawnsParksPresence', 'description': 'Presence or absence of lawns or parks in a riparian transect', 'range': 'string', 'aliases': ['lawns parks presence'], 'mappings': []}, 'pavementPresence': {'slot_uri': 'neon:pavementPresence', 'description': 'Presence or absence of paved areas in a riparian transect', 'range': 'string', 'aliases': ['pavement presence'], 'mappings': []}, 'riparianClass': {'slot_uri': 'neon:riparianClass', 'description': 'Abbreviation for vegetation class', 'range': 'string', 'aliases': ['riparian class'], 'mappings': []}, 'riparianDominantVegetation': {'slot_uri': 'neon:riparianDominantVegetation', 'description': 'Plant code for dominant vegetation', 'range': 'string', 'aliases': ['riparian dominant vegetation'], 'mappings': ['dwc:taxonID']}, 'riparianSubclass': {'slot_uri': 'neon:riparianSubclass', 'description': 'Abbreviation for vegetation subclass', 'range': 'string', 'aliases': ['riparian subclass'], 'mappings': []}, 'riparianSubdominantVegetation': {'slot_uri': 'neon:riparianSubdominantVegetation', 'description': 'Plant code for subdominant vegetation', 'range': 'string', 'aliases': ['riparian subdominant vegetation'], 'mappings': []}, 'riparianSubsystem': {'slot_uri': 'neon:riparianSubsystem', 'description': 'Abbreviation for riparian subsystem', 'range': 'string', 'aliases': ['riparian subsystem'], 'mappings': []}, 'riparianWaterDepth': {'slot_uri': 'neon:riparianWaterDepth', 'description': 'Water depth at riparian assessment location', 'range': 'double', 'aliases': ['riparian water depth'], 'mappings': []}, 'roadPresence': {'slot_uri': 'neon:roadPresence', 'description': 'Presence or absence of roads in a riparian transect', 'range': 'string', 'aliases': ['road presence'], 'mappings': []}, 'shortHerbCoverClass': {'slot_uri': 'neon:shortHerbCoverClass', 'description': 'Vegetation cover class for short herbs, grasses and forbs', 'range': 'string', 'aliases': ['short herb cover class'], 'mappings': []}, 'smallTreeCoverClass': {'slot_uri': 'neon:smallTreeCoverClass', 'description': 'Vegetation cover class for trees less than 0.3 m diameter at breast height (DBH)', 'range': 'string', 'aliases': ['small tree cover class'], 'mappings': []}, 'smallTreeType': {'slot_uri': 'neon:smallTreeType', 'description': 'Vegetation type for trees less than 0.3 m diameter at breast height (DBH)', 'range': 'string', 'aliases': ['small tree type'], 'mappings': []}, 'standingWaterCoverClass': {'slot_uri': 'neon:standingWaterCoverClass', 'description': 'Cover class of standing water', 'range': 'string', 'aliases': ['standing water cover class'], 'mappings': []}, 'subdominantBankAngle': {'slot_uri': 'neon:subdominantBankAngle', 'description': 'Subdominant bank angle', 'range': 'string', 'aliases': ['subdominant bank angle'], 'mappings': []}, 'subdominantBankRevetment': {'slot_uri': 'neon:subdominantBankRevetment', 'description': 'Subdominant bank revetment', 'range': 'string', 'aliases': ['subdominant bank revetment'], 'mappings': []}, 'subdominantBankTexture': {'slot_uri': 'neon:subdominantBankTexture', 'description': 'Subdominant bank texture', 'range': 'string', 'aliases': ['subdominant bank texture'], 'mappings': []}, 'tallHerbCoverClass': {'slot_uri': 'neon:tallHerbCoverClass', 'description': 'Vegetation cover class for tall herbs, grasses and forbs', 'range': 'string', 'aliases': ['tall herb cover class'], 'mappings': []}, 'tallHerbType': {'slot_uri': 'neon:tallHerbType', 'description': 'Vegetation type for tall herbs, grasses and forbs', 'range': 'string', 'aliases': ['tall herb type'], 'mappings': []}, 'transectID': {'slot_uri': 'neon:transectID', 'description': 'An identifier for the transect', 'range': 'string', 'aliases': ['transect i d'], 'mappings': []}, 'trashPresence': {'slot_uri': 'neon:trashPresence', 'description': 'Presence or absence of trash in a riparian transect', 'range': 'string', 'aliases': ['trash presence'], 'mappings': []}, 'wettedWidth': {'slot_uri': 'neon:wettedWidth', 'description': 'Width of the wetted stream at time of measurement', 'range': 'double', 'aliases': ['wetted width'], 'mappings': []}, 'woodyShrubGroundCoverClass': {'slot_uri': 'neon:woodyShrubGroundCoverClass', 'description': 'Vegetation cover class for woody shrubs and saplings in ground cover', 'range': 'string', 'aliases': ['woody shrub ground cover class'], 'mappings': []}, 'woodyShrubSaplingCoverClass': {'slot_uri': 'neon:woodyShrubSaplingCoverClass', 'description': 'Vegetation cover class for woody shrubs and saplings', 'range': 'string', 'aliases': ['woody shrub sapling cover class'], 'mappings': []}, 'woodyShrubSaplingType': {'slot_uri': 'neon:woodyShrubSaplingType', 'description': 'Vegetation type for woody shrubs and saplings', 'range': 'string', 'aliases': ['woody shrub sapling type'], 'mappings': []}, 'coveredDensiometerPoints': {'slot_uri': 'neon:coveredDensiometerPoints', 'description': 'Number of points on the densiometer covered by canopy', 'range': 'string', 'aliases': ['covered densiometer points'], 'mappings': []}, 'measurementDirection': {'slot_uri': 'neon:measurementDirection', 'description': 'Direction of the technician for making a measurement', 'range': 'string', 'aliases': ['measurement direction'], 'mappings': []}, 'measurementLocation': {'slot_uri': 'neon:measurementLocation', 'description': 'Location of the technician for making a measurement', 'range': 'string', 'aliases': ['measurement location'], 'mappings': []}, 'totalDensiometerPoints': {'slot_uri': 'neon:totalDensiometerPoints', 'description': 'Total number of points on the densiometer', 'range': 'string', 'aliases': ['total densiometer points'], 'mappings': []}, 'samplingImpractical': {'slot_uri': 'neon:samplingImpractical', 'description': 'Samples and/or measurements were not collected due to the indicated circumstance', 'range': 'string', 'aliases': ['sampling impractical'], 'mappings': ['dwc:samplingProtocol']}, 'incubationMethod': {'slot_uri': 'neon:incubationMethod', 'description': 'Method used for soil incubation', 'range': 'string', 'aliases': ['incubation method'], 'mappings': []}, 'taxonAbbreviation': {'slot_uri': 'neon:taxonAbbreviation', 'description': 'The abbreviation for the taxon', 'range': 'string', 'aliases': ['taxon abbreviation'], 'mappings': []}, 'biovolumeSD': {'slot_uri': 'neon:biovolumeSD', 'description': 'Standard deviation in biovolume across cells of the same taxon', 'range': 'double', 'aliases': ['biovolume s d'], 'mappings': []}, 'inconsistentDataQF': {'slot_uri': 'neon:inconsistentDataQF', 'description': 'Quality flag for data that is not consistent between tables', 'range': 'string', 'aliases': ['inconsistent data q f'], 'mappings': []}, 'bryType': {'slot_uri': 'neon:bryType', 'description': 'Describes the dominant type of bryophyte present in a clipped sample', 'range': 'string', 'aliases': ['bry type'], 'mappings': []}, 'ampliconLength': {'slot_uri': 'neon:ampliconLength', 'description': 'Length of amplicon', 'range': 'string', 'aliases': ['amplicon length'], 'mappings': []}, 'analysisEndDate': {'slot_uri': 'neon:analysisEndDate', 'description': 'The end date or dateTime of analysis', 'range': 'time', 'aliases': ['analysis end date'], 'mappings': []}, 'analysisStartDate': {'slot_uri': 'neon:analysisStartDate', 'description': 'The start date or dateTime of analysis', 'range': 'time', 'aliases': ['analysis start date'], 'mappings': []}, 'batchID': {'slot_uri': 'neon:batchID', 'description': 'Identifier for batch or analytical run', 'range': 'string', 'aliases': ['batch i d'], 'mappings': []}, 'bufferComposition': {'slot_uri': 'neon:bufferComposition', 'description': 'Contents of buffer solution', 'range': 'string', 'aliases': ['buffer composition'], 'mappings': []}, 'bufferID': {'slot_uri': 'neon:bufferID', 'description': 'Identity and manufacturer of buffer or kit', 'range': 'string', 'aliases': ['buffer i d'], 'mappings': []}, 'calCurveIntercept': {'slot_uri': 'neon:calCurveIntercept', 'description': 'y-intercept of assay calibration curve for the quantification cycle versus log10 of the template concentration', 'range': 'double', 'aliases': ['cal curve intercept'], 'mappings': []}, 'calCurveRsquared': {'slot_uri': 'neon:calCurveRsquared', 'description': 'R-squared value for calibration curve', 'range': 'double', 'aliases': ['cal curve rsquared'], 'mappings': []}, 'calCurveSlope': {'slot_uri': 'neon:calCurveSlope', 'description': 'Slope of assay calibration curve for the quantification cycle versus log10 of the template concentration', 'range': 'double', 'aliases': ['cal curve slope'], 'mappings': []}, 'copyNumber': {'slot_uri': 'neon:copyNumber', 'description': 'Gene copy number in a sample in copies per nanogram of DNA', 'range': 'double', 'aliases': ['copy number'], 'mappings': []}, 'cqMethod': {'slot_uri': 'neon:cqMethod', 'description': 'Method used to determine the quantification cycle', 'range': 'string', 'aliases': ['cq method'], 'mappings': []}, 'cqValue': {'slot_uri': 'neon:cqValue', 'description': 'Quantification cycle or threshold number', 'range': 'integer', 'aliases': ['cq value'], 'mappings': []}, 'dNTPConcentration': {'slot_uri': 'neon:dNTPConcentration', 'description': 'Concentration of deoxynucleoside triphosphates used in sample assay', 'range': 'double', 'aliases': ['d n t p concentration'], 'mappings': []}, 'forwardPrimer': {'slot_uri': 'neon:forwardPrimer', 'description': 'DNA sequence of forward primer', 'range': 'string', 'aliases': ['forward primer'], 'mappings': []}, 'inhibitorRemovalRequired': {'slot_uri': 'neon:inhibitorRemovalRequired', 'description': 'Indicates whether nucleic acid inhibitor removal was required prior to analysis', 'range': 'string', 'aliases': ['inhibitor removal required'], 'mappings': []}, 'detectionLimit': {'slot_uri': 'neon:detectionLimit', 'description': 'Lowest concentration of target gene copies measured consistently in replicate assays', 'range': 'double', 'aliases': ['detection limit'], 'mappings': []}, 'linearDynamicRangeLower': {'slot_uri': 'neon:linearDynamicRangeLower', 'description': 'The lower range of gene copy number in which the threshold cycle versus the dilution factor fits a straight line on a base-10 semi-logarithmic graph', 'range': 'double', 'aliases': ['linear dynamic range lower'], 'mappings': []}, 'linearDynamicRangeUpper': {'slot_uri': 'neon:linearDynamicRangeUpper', 'description': 'The upper range of gene copy number in which the threshold cycle versus the dilution factor fits a straight line on a base-10 semi-logarithmic graph', 'range': 'double', 'aliases': ['linear dynamic range upper'], 'mappings': []}, 'lodCqVar': {'slot_uri': 'neon:lodCqVar', 'description': 'Variability in quantification cycle threshold at the limit of detection', 'range': 'double', 'aliases': ['lod cq var'], 'mappings': []}, 'mgConcentration': {'slot_uri': 'neon:mgConcentration', 'description': 'Concentration of magnesium used in sample assay', 'range': 'double', 'aliases': ['mg concentration'], 'mappings': []}, 'multiplexStatus': {'slot_uri': 'neon:multiplexStatus', 'description': 'Whether multiple genes are targeted in a single PCR reaction', 'range': 'string', 'aliases': ['multiplex status'], 'mappings': []}, 'negControl1Result': {'slot_uri': 'neon:negControl1Result', 'description': 'Result for negative control sample 1', 'range': 'string', 'aliases': ['neg control1 result'], 'mappings': []}, 'negControl2Result': {'slot_uri': 'neon:negControl2Result', 'description': 'Result for negative control sample 2', 'range': 'string', 'aliases': ['neg control2 result'], 'mappings': []}, 'negControl3Result': {'slot_uri': 'neon:negControl3Result', 'description': 'Result for negative control sample 3', 'range': 'string', 'aliases': ['neg control3 result'], 'mappings': []}, 'negControl4Result': {'slot_uri': 'neon:negControl4Result', 'description': 'Result for negative control sample 4', 'range': 'string', 'aliases': ['neg control4 result'], 'mappings': []}, 'negControl5Result': {'slot_uri': 'neon:negControl5Result', 'description': 'Result for negative control sample 5', 'range': 'string', 'aliases': ['neg control5 result'], 'mappings': []}, 'noTemplateControlCq': {'slot_uri': 'neon:noTemplateControlCq', 'description': 'Quantification or threshold cycle number for no template control', 'range': 'integer', 'aliases': ['no template control cq'], 'mappings': []}, 'nucleicAcidConcentration': {'slot_uri': 'neon:nucleicAcidConcentration', 'description': 'Concentration of extracted nucleic acids', 'range': 'double', 'aliases': ['nucleic acid concentration'], 'mappings': []}, 'pcrEfficiency': {'slot_uri': 'neon:pcrEfficiency', 'description': 'Efficiency of PCR reaction', 'range': 'double', 'aliases': ['pcr efficiency'], 'mappings': []}, 'pcrEfficiencyConfInt': {'slot_uri': 'neon:pcrEfficiencyConfInt', 'description': 'Confidence interval for PCR efficiency', 'range': 'double', 'aliases': ['pcr efficiency conf int'], 'mappings': []}, 'polymeraseType': {'slot_uri': 'neon:polymeraseType', 'description': 'Type of DNA polymerase used in sample assay', 'range': 'string', 'aliases': ['polymerase type'], 'mappings': []}, 'polymeraseUnitNumber': {'slot_uri': 'neon:polymeraseUnitNumber', 'description': 'Number of units of DNA polymerase used in sample assay', 'range': 'double', 'aliases': ['polymerase unit number'], 'mappings': []}, 'primerConcentration': {'slot_uri': 'neon:primerConcentration', 'description': 'Concentration of primers used in sample assay', 'range': 'double', 'aliases': ['primer concentration'], 'mappings': []}, 'primerSpecificity': {'slot_uri': 'neon:primerSpecificity', 'description': 'Specificity of primer for target taxa based on BLAST or similar analysis', 'range': 'double', 'aliases': ['primer specificity'], 'mappings': []}, 'probeConcentration': {'slot_uri': 'neon:probeConcentration', 'description': 'Concentration of probe used in sample assays', 'range': 'double', 'aliases': ['probe concentration'], 'mappings': []}, 'qPCRAnalysisProgram': {'slot_uri': 'neon:qPCRAnalysisProgram', 'description': 'Name, version and manufacturer of qPCR analysis software', 'range': 'string', 'aliases': ['q p c r analysis program'], 'mappings': []}, 'qpcrDetectionMethod': {'slot_uri': 'neon:qpcrDetectionMethod', 'description': 'Method used for amplicon detection in qPCR assay', 'range': 'string', 'aliases': ['qpcr detection method'], 'mappings': []}, 'qpcrMethod': {'slot_uri': 'neon:qpcrMethod', 'description': 'Protocol used for qPCR reaction setup and themocycling conditions', 'range': 'string', 'aliases': ['qpcr method'], 'mappings': []}, 'reactionVolume': {'slot_uri': 'neon:reactionVolume', 'description': 'Volume of reaction', 'range': 'double', 'aliases': ['reaction volume'], 'mappings': []}, 'replicateNumber': {'slot_uri': 'neon:replicateNumber', 'description': 'The number for the sample replicate', 'range': 'integer', 'aliases': ['replicate number'], 'mappings': []}, 'reversePrimer': {'slot_uri': 'neon:reversePrimer', 'description': 'DNA sequence of reverse primer', 'range': 'string', 'aliases': ['reverse primer'], 'mappings': []}, 'reviewedBy': {'slot_uri': 'neon:reviewedBy', 'description': 'Name of lab personnel who reviewed the data prior to submission', 'range': 'string', 'aliases': ['reviewed by'], 'mappings': []}, 'sampleMaterial': {'slot_uri': 'neon:sampleMaterial', 'description': 'The material in which a sample was embedded prior to the sampling event', 'range': 'string', 'aliases': ['sample material'], 'mappings': []}, 'standardDescription': {'slot_uri': 'neon:standardDescription', 'description': 'Description of assay standard used', 'range': 'string', 'aliases': ['standard description'], 'mappings': []}, 'targetGene': {'slot_uri': 'neon:targetGene', 'description': 'Targeted gene or locus name', 'range': 'string', 'aliases': ['target gene'], 'mappings': []}, 'targetTaxonGroup': {'slot_uri': 'neon:targetTaxonGroup', 'description': 'Taxonomic group targeted', 'range': 'string', 'aliases': ['target taxon group'], 'mappings': []}, 'archiveSampleBarcode': {'slot_uri': 'neon:archiveSampleBarcode', 'description': 'Barcode for an archive sample', 'range': 'string', 'aliases': ['archive sample barcode'], 'mappings': []}, 'archiveSampleFate': {'slot_uri': 'neon:archiveSampleFate', 'description': 'Fate of archived sample', 'range': 'string', 'aliases': ['archive sample fate'], 'mappings': []}, 'archiveSampleID': {'slot_uri': 'neon:archiveSampleID', 'description': 'Identifier for an archive sample', 'range': 'string', 'aliases': ['archive sample i d'], 'mappings': []}, 'biogeoSample': {'slot_uri': 'neon:biogeoSample', 'description': 'Sample selected for biogeochemical analyses', 'range': 'string', 'aliases': ['biogeo sample'], 'mappings': []}, 'fieldSampleBarcode': {'slot_uri': 'neon:fieldSampleBarcode', 'description': 'Barcode of a field sample', 'range': 'string', 'aliases': ['field sample barcode'], 'mappings': []}, 'fieldSampleFate': {'slot_uri': 'neon:fieldSampleFate', 'description': 'Fate of a field sample', 'range': 'string', 'aliases': ['field sample fate'], 'mappings': []}, 'fieldSampleID': {'slot_uri': 'neon:fieldSampleID', 'description': 'Unique identifier for a field sample', 'range': 'string', 'aliases': ['field sample i d'], 'mappings': []}, 'functionalGroup': {'slot_uri': 'neon:functionalGroup', 'description': 'Functional group to which a sample belongs', 'range': 'string', 'aliases': ['functional group'], 'mappings': []}, 'ligninSampleBarcode': {'slot_uri': 'neon:ligninSampleBarcode', 'description': 'Barcode for a lignin sample', 'range': 'string', 'aliases': ['lignin sample barcode'], 'mappings': []}, 'ligninSampleFate': {'slot_uri': 'neon:ligninSampleFate', 'description': 'Fate of a lignin sample', 'range': 'string', 'aliases': ['lignin sample fate'], 'mappings': []}, 'ligninSampleID': {'slot_uri': 'neon:ligninSampleID', 'description': 'Identifier for a lignin sample', 'range': 'string', 'aliases': ['lignin sample i d'], 'mappings': []}, 'massSampleBarcode': {'slot_uri': 'neon:massSampleBarcode', 'description': 'Barcode for a mass sample', 'range': 'string', 'aliases': ['mass sample barcode'], 'mappings': []}, 'massSampleBarcodeList': {'slot_uri': 'neon:massSampleBarcodeList', 'description': 'List of barcodes of mass samples', 'range': 'string', 'aliases': ['mass sample barcode list'], 'mappings': []}, 'massSampleFate': {'slot_uri': 'neon:massSampleFate', 'description': 'Fate of a mass sample', 'range': 'string', 'aliases': ['mass sample fate'], 'mappings': []}, 'massSampleFateList': {'slot_uri': 'neon:massSampleFateList', 'description': 'List of fates of mass samples', 'range': 'string', 'aliases': ['mass sample fate list'], 'mappings': []}, 'massSampleID': {'slot_uri': 'neon:massSampleID', 'description': 'Identifier for a mass sample', 'range': 'string', 'aliases': ['mass sample i d'], 'mappings': []}, 'massSampleIDList': {'slot_uri': 'neon:massSampleIDList', 'description': 'List of unique identifiers for mass samples', 'range': 'string', 'aliases': ['mass sample i d list'], 'mappings': []}, 'massSampleMixtureBarcode': {'slot_uri': 'neon:massSampleMixtureBarcode', 'description': 'Barcode of a mixture of mass samples', 'range': 'string', 'aliases': ['mass sample mixture barcode'], 'mappings': []}, 'massSampleMixtureFate': {'slot_uri': 'neon:massSampleMixtureFate', 'description': 'Fate of mixture of mass samples', 'range': 'string', 'aliases': ['mass sample mixture fate'], 'mappings': []}, 'massSampleMixtureID': {'slot_uri': 'neon:massSampleMixtureID', 'description': 'Identifier for a mixture of mass samples', 'range': 'string', 'aliases': ['mass sample mixture i d'], 'mappings': []}, 'trapPlacement': {'slot_uri': 'neon:trapPlacement', 'description': 'Strategy for selecting plot location', 'range': 'string', 'aliases': ['trap placement'], 'mappings': []}, 'trapSize': {'slot_uri': 'neon:trapSize', 'description': 'Size of trap', 'range': 'double', 'aliases': ['trap size'], 'mappings': []}, 'namedLocation': {'slot_uri': 'neon:namedLocation', 'description': 'Name of the measurement location in the NEON database', 'range': 'string', 'aliases': ['named location'], 'mappings': ['dwc:locationID']}, 'soilCO2FinalQF': {'slot_uri': 'neon:soilCO2FinalQF', 'description': 'Quality flag indicating whether a soil CO2 data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['soil c o2 final q f'], 'mappings': []}, 'validCalFailQM': {'slot_uri': 'neon:validCalFailQM', 'description': 'Quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['valid cal fail q m'], 'mappings': []}, 'validCalNAQM': {'slot_uri': 'neon:validCalNAQM', 'description': 'Quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['valid cal n a q m'], 'mappings': []}, 'validCalPassQM': {'slot_uri': 'neon:validCalPassQM', 'description': 'Quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['valid cal pass q m'], 'mappings': []}, 'nitrateInternalHumidity': {'slot_uri': 'neon:nitrateInternalHumidity', 'description': 'The internal humidity of the nitrate sensor', 'range': 'double', 'aliases': ['nitrate internal humidity'], 'mappings': []}, 'nitrateInternalHumidityPassQM': {'slot_uri': 'neon:nitrateInternalHumidityPassQM', 'description': 'Nitrate quality metric that summarizes the passed outcomes of the internal humidity test over the averaging period, as a percent', 'range': 'double', 'aliases': ['nitrate internal humidity pass q m'], 'mappings': []}, 'nitrateInternalHumidityFailQM': {'slot_uri': 'neon:nitrateInternalHumidityFailQM', 'description': 'Nitrate quality metric that summarizes the failed outcomes of the internal humidity test over the averaging period, as a percent', 'range': 'double', 'aliases': ['nitrate internal humidity fail q m'], 'mappings': []}, 'nitrateInternalHumidityNAQM': {'slot_uri': 'neon:nitrateInternalHumidityNAQM', 'description': 'Nitrate quality metric that summarizes when the internal humidity test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['nitrate internal humidity n a q m'], 'mappings': []}, 'nitrateInternalHumidityQAQCRpt': {'slot_uri': 'neon:nitrateInternalHumidityQAQCRpt', 'description': 'Nitrate quality assurance and quality control report for the internal humidity test, which indicates the humidity in the sensor housing is within accepatable limits (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['nitrate internal humidity q a q c rpt'], 'mappings': []}, 'nitrateLightDarkSpectralRatio': {'slot_uri': 'neon:nitrateLightDarkSpectralRatio', 'description': 'The ratio of the spectral average values measured during light and dark measurements taken with the nitrate sensor', 'range': 'double', 'aliases': ['nitrate light dark spectral ratio'], 'mappings': []}, 'nitrateLightDarkSpectralRatioPassQM': {'slot_uri': 'neon:nitrateLightDarkSpectralRatioPassQM', 'description': 'Nitrate quality metric that summarizes the passed outcomes of the light/dark spectral test over the averaging period, as a percent', 'range': 'double', 'aliases': ['nitrate light dark spectral ratio pass q m'], 'mappings': []}, 'nitrateLightDarkSpectralRatioFailQM': {'slot_uri': 'neon:nitrateLightDarkSpectralRatioFailQM', 'description': 'Nitrate quality metric that summarizes the failed outcomes of the light/dark spectral test over the averaging period, as a percent', 'range': 'double', 'aliases': ['nitrate light dark spectral ratio fail q m'], 'mappings': []}, 'nitrateLightDarkSpectralRatioNAQM': {'slot_uri': 'neon:nitrateLightDarkSpectralRatioNAQM', 'description': 'Nitrate quality metric that summarizes when the light/dark spectral test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['nitrate light dark spectral ratio n a q m'], 'mappings': []}, 'nitrateLightDarkSpectralRatioQAQCRpt': {'slot_uri': 'neon:nitrateLightDarkSpectralRatioQAQCRpt', 'description': 'Nitrate quality assurance and quality control report for the light/dark spectral test, which indicates proper spectrophotometer calibration and operation (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['nitrate light dark spectral ratio q a q c rpt'], 'mappings': []}, 'validCalQAQCRpt': {'slot_uri': 'neon:validCalQAQCRpt', 'description': 'QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['valid cal q a q c rpt'], 'mappings': []}, 'fieldIDCode': {'slot_uri': 'neon:fieldIDCode', 'description': 'Barcode of a fieldID', 'range': 'string', 'aliases': ['field i d code'], 'mappings': []}, 'fieldIDFate': {'slot_uri': 'neon:fieldIDFate', 'description': 'Fate of a fieldID', 'range': 'string', 'aliases': ['field i d fate'], 'mappings': []}, 'streamAddCoordinateUncertainty': {'slot_uri': 'neon:streamAddCoordinateUncertainty', 'description': 'Additional uncertainty to be added at stream sites because samples are clipped slightly off the transect.  See AOS Protocol and Procedure NEON.DOC.003039', 'range': 'double', 'aliases': ['stream add coordinate uncertainty'], 'mappings': []}, 'thermistorDepth': {'slot_uri': 'neon:thermistorDepth', 'description': 'Depth of the temperature sensor (thermistor) from water surface in lakes and rivers', 'range': 'double', 'aliases': ['thermistor depth'], 'mappings': []}, 'tsdWaterTemp': {'slot_uri': 'neon:tsdWaterTemp', 'description': 'Temperature of surface water at specific depths in lakes and rivers', 'range': 'double', 'aliases': ['tsd water temp'], 'mappings': []}, 'tsdWaterTempAlphaQM': {'slot_uri': 'neon:tsdWaterTempAlphaQM', 'description': 'Quality metric for tsdWaterTemp detailing the outcomes of the alpha quality flag over the averaging period as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['tsd water temp alpha q m'], 'mappings': []}, 'tsdWaterTempBetaQM': {'slot_uri': 'neon:tsdWaterTempBetaQM', 'description': 'Quality metric for tsdWaterTemp detailing the outcomes of the beta quality flag over the averaging period as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['tsd water temp beta q m'], 'mappings': []}, 'tsdWaterTempConsistencyFailQM': {'slot_uri': 'neon:tsdWaterTempConsistencyFailQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the failed outcomes of the consistency test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp consistency fail q m'], 'mappings': []}, 'tsdWaterTempConsistencyNAQM': {'slot_uri': 'neon:tsdWaterTempConsistencyNAQM', 'description': 'Quality metric for tsdWaterTemp that summarizes when the consistency test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp consistency n a q m'], 'mappings': []}, 'tsdWaterTempConsistencyPassQM': {'slot_uri': 'neon:tsdWaterTempConsistencyPassQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the passed outcomes of the consistency test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp consistency pass q m'], 'mappings': []}, 'tsdWaterTempConsistQF': {'slot_uri': 'neon:tsdWaterTempConsistQF', 'description': 'Quality flag for the consistency test of tsdWaterTemp. Detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['tsd water temp consist q f'], 'mappings': []}, 'tsdWaterTempExpUncert': {'slot_uri': 'neon:tsdWaterTempExpUncert', 'description': 'Expanded uncertainty for tsdWaterTemp', 'range': 'double', 'aliases': ['tsd water temp exp uncert'], 'mappings': []}, 'tsdWaterTempFinalQF': {'slot_uri': 'neon:tsdWaterTempFinalQF', 'description': 'Quality flag indicating whether for tsdWaterTemp has passed or failed an overall assessment of its quality detailed in NEON.DOC.001113 (1=fail 0=pass)', 'range': 'string', 'aliases': ['tsd water temp final q f'], 'mappings': []}, 'tsdWaterTempGapFailQM': {'slot_uri': 'neon:tsdWaterTempGapFailQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the failed outcomes of the gap test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp gap fail q m'], 'mappings': []}, 'tsdWaterTempGapNAQM': {'slot_uri': 'neon:tsdWaterTempGapNAQM', 'description': 'Quality metric for tsdWaterTemp that summarizes when the gap test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp gap n a q m'], 'mappings': []}, 'tsdWaterTempGapPassQM': {'slot_uri': 'neon:tsdWaterTempGapPassQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the passed outcomes of the gap test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp gap pass q m'], 'mappings': []}, 'tsdWaterTempGapQF': {'slot_uri': 'neon:tsdWaterTempGapQF', 'description': 'Quality flag for the gap test of tsdWaterTemp. Detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['tsd water temp gap q f'], 'mappings': []}, 'tsdWaterTempMaximum': {'slot_uri': 'neon:tsdWaterTempMaximum', 'description': 'Maximum temperature of tsdWaterTemp', 'range': 'double', 'aliases': ['tsd water temp maximum'], 'mappings': []}, 'tsdWaterTempMean': {'slot_uri': 'neon:tsdWaterTempMean', 'description': 'Arithmetic mean of tsdWaterTemp', 'range': 'double', 'aliases': ['tsd water temp mean'], 'mappings': []}, 'tsdWaterTempMinimum': {'slot_uri': 'neon:tsdWaterTempMinimum', 'description': 'Minimum temperature of tsdWaterTemp', 'range': 'double', 'aliases': ['tsd water temp minimum'], 'mappings': []}, 'tsdWaterTempNullFailQM': {'slot_uri': 'neon:tsdWaterTempNullFailQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the failed outcomes of the null test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp null fail q m'], 'mappings': []}, 'tsdWaterTempNullNAQM': {'slot_uri': 'neon:tsdWaterTempNullNAQM', 'description': 'Quality metric for tsdWaterTemp that summarizes when the null test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp null n a q m'], 'mappings': []}, 'tsdWaterTempNullPassQM': {'slot_uri': 'neon:tsdWaterTempNullPassQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the passed outcomes of the null test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp null pass q m'], 'mappings': []}, 'tsdWaterTempNullQF': {'slot_uri': 'neon:tsdWaterTempNullQF', 'description': 'Quality flag for the null test of tsdWaterTemp. Detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['tsd water temp null q f'], 'mappings': []}, 'tsdWaterTempNumPts': {'slot_uri': 'neon:tsdWaterTempNumPts', 'description': 'Number of points used to calculate the arithmetic mean of tsdWaterTemp', 'range': 'string', 'aliases': ['tsd water temp num pts'], 'mappings': []}, 'tsdWaterTempRangeFailQM': {'slot_uri': 'neon:tsdWaterTempRangeFailQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the failed outcomes of the range test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp range fail q m'], 'mappings': []}, 'tsdWaterTempRangeNAQM': {'slot_uri': 'neon:tsdWaterTempRangeNAQM', 'description': 'Quality metric for tsdWaterTemp that summarizes when the range test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp range n a q m'], 'mappings': []}, 'tsdWaterTempRangePassQM': {'slot_uri': 'neon:tsdWaterTempRangePassQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the passed outcomes of the range test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp range pass q m'], 'mappings': []}, 'tsdWaterTempRangeQF': {'slot_uri': 'neon:tsdWaterTempRangeQF', 'description': 'Quality flag for the range test of tsdWaterTemp. Detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['tsd water temp range q f'], 'mappings': []}, 'tsdWaterTempSpikeFailQM': {'slot_uri': 'neon:tsdWaterTempSpikeFailQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the failed outcomes of the spike test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp spike fail q m'], 'mappings': []}, 'tsdWaterTempSpikeNAQM': {'slot_uri': 'neon:tsdWaterTempSpikeNAQM', 'description': 'Quality metric for tsdWaterTemp that summarizes when the spike test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp spike n a q m'], 'mappings': []}, 'tsdWaterTempSpikePassQM': {'slot_uri': 'neon:tsdWaterTempSpikePassQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the passed outcomes of the spike test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp spike pass q m'], 'mappings': []}, 'tsdWaterTempSpikeQF': {'slot_uri': 'neon:tsdWaterTempSpikeQF', 'description': 'Quality flag for the spike test of tsdWaterTemp. Detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['tsd water temp spike q f'], 'mappings': []}, 'tsdWaterTempStdErMean': {'slot_uri': 'neon:tsdWaterTempStdErMean', 'description': 'Standard error of the mean for tsdWaterTemp', 'range': 'double', 'aliases': ['tsd water temp std er mean'], 'mappings': []}, 'tsdWaterTempStepFailQM': {'slot_uri': 'neon:tsdWaterTempStepFailQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the failed outcomes of the step test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp step fail q m'], 'mappings': []}, 'tsdWaterTempStepNAQM': {'slot_uri': 'neon:tsdWaterTempStepNAQM', 'description': 'Quality metric for tsdWaterTemp that summarizes when the step test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp step n a q m'], 'mappings': []}, 'tsdWaterTempStepPassQM': {'slot_uri': 'neon:tsdWaterTempStepPassQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the passed outcomes of the step test over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp step pass q m'], 'mappings': []}, 'tsdWaterTempStepQF': {'slot_uri': 'neon:tsdWaterTempStepQF', 'description': 'Quality flag for the step test of tsdWaterTemp. Detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['tsd water temp step q f'], 'mappings': []}, 'tsdWaterTempValidCalFailQM': {'slot_uri': 'neon:tsdWaterTempValidCalFailQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the failed outcomes of the valid calibration check over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp valid cal fail q m'], 'mappings': []}, 'tsdWaterTempValidCalNAQM': {'slot_uri': 'neon:tsdWaterTempValidCalNAQM', 'description': 'Quality metric for tsdWaterTemp that summarizes when the valid calibration check could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp valid cal n a q m'], 'mappings': []}, 'tsdWaterTempValidCalPassQM': {'slot_uri': 'neon:tsdWaterTempValidCalPassQM', 'description': 'Quality metric for tsdWaterTemp that summarizes the passed outcomes of the valid calibration check over the averaging period as a percent', 'range': 'double', 'aliases': ['tsd water temp valid cal pass q m'], 'mappings': []}, 'tsdWaterTempValidCalQF': {'slot_uri': 'neon:tsdWaterTempValidCalQF', 'description': 'Quality flag for the valid calibration check of tsdWaterTemp. Detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['tsd water temp valid cal q f'], 'mappings': []}, 'tsdWaterTempVariance': {'slot_uri': 'neon:tsdWaterTempVariance', 'description': 'Variance in temperature of tsdWaterTemp', 'range': 'double', 'aliases': ['tsd water temp variance'], 'mappings': []}, 'buoyCorMeanPres': {'slot_uri': 'neon:buoyCorMeanPres', 'description': 'Mean buoy station pressure corrected to sea level', 'range': 'double', 'aliases': ['buoy cor mean pres'], 'mappings': []}, 'buoyCorPres': {'slot_uri': 'neon:buoyCorPres', 'description': 'Buoy station pressure corrected to sea level', 'range': 'double', 'aliases': ['buoy cor pres'], 'mappings': []}, 'buoyCorPresDewPtQF': {'slot_uri': 'neon:buoyCorPresDewPtQF', 'description': 'Corrected buoy pressure quality flag that assesses whether dew point measurements for correcting pressure were available (0=yes 1=no)', 'range': 'string', 'aliases': ['buoy cor pres dew pt q f'], 'mappings': []}, 'buoyCorPresExpUncert': {'slot_uri': 'neon:buoyCorPresExpUncert', 'description': 'Expanded uncertainty for buoy pressure corrected to sea level', 'range': 'double', 'aliases': ['buoy cor pres exp uncert'], 'mappings': []}, 'buoyCorPresFinalQF': {'slot_uri': 'neon:buoyCorPresFinalQF', 'description': 'Buoy pressure corrected to sea level quality flag indicating whether a data product has passed or failed an overall assessment of its quality detailed in NEON.DOC.000653 and NEON.DOC.001113 (1=fail 0=pass)', 'range': 'string', 'aliases': ['buoy cor pres final q f'], 'mappings': []}, 'buoyCorPresTempQF': {'slot_uri': 'neon:buoyCorPresTempQF', 'description': 'Corrected buoy pressure quality flag that assesses whether temperature measurements for correcting pressure were available (0=yes 1=no)', 'range': 'string', 'aliases': ['buoy cor pres temp q f'], 'mappings': []}, 'buoyStaPres': {'slot_uri': 'neon:buoyStaPres', 'description': 'Station pressure on-buoy', 'range': 'double', 'aliases': ['buoy sta pres'], 'mappings': []}, 'buoyStaPresAlphaQM': {'slot_uri': 'neon:buoyStaPresAlphaQM', 'description': 'Buoy station pressure quality metric detailing the outcomes of the alpha quality flag over the averaging period as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['buoy sta pres alpha q m'], 'mappings': []}, 'buoyStaPresBetaQM': {'slot_uri': 'neon:buoyStaPresBetaQM', 'description': 'Buoy station pressure quality metric detailing the outcomes of the beta quality flag over the averaging period as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['buoy sta pres beta q m'], 'mappings': []}, 'buoyStaPresConsistencyFailQM': {'slot_uri': 'neon:buoyStaPresConsistencyFailQM', 'description': 'Buoy station pressure quality metric that summarizes the failed outcomes of the consistency test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres consistency fail q m'], 'mappings': []}, 'buoyStaPresConsistencyNAQM': {'slot_uri': 'neon:buoyStaPresConsistencyNAQM', 'description': 'Buoy station pressure quality metric that summarizes when the consistency test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres consistency n a q m'], 'mappings': []}, 'buoyStaPresConsistencyPassQM': {'slot_uri': 'neon:buoyStaPresConsistencyPassQM', 'description': 'Buoy station pressure quality metric that summarizes the passed outcomes of the consistency test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres consistency pass q m'], 'mappings': []}, 'buoyStaPresConsistQF': {'slot_uri': 'neon:buoyStaPresConsistQF', 'description': 'Station barometric pressure on-buoy quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['buoy sta pres consist q f'], 'mappings': []}, 'buoyStaPresExpUncert': {'slot_uri': 'neon:buoyStaPresExpUncert', 'description': 'Expanded uncertainty for station pressure on-buoy', 'range': 'double', 'aliases': ['buoy sta pres exp uncert'], 'mappings': []}, 'buoyStaPresFinalQF': {'slot_uri': 'neon:buoyStaPresFinalQF', 'description': 'Buoy station pressure quality flag indicating whether a data product has passed or failed an overall assessment of its quality detailed in NEON.DOC.001113 (1=fail 0=pass)', 'range': 'string', 'aliases': ['buoy sta pres final q f'], 'mappings': []}, 'buoyStaPresGapFailQM': {'slot_uri': 'neon:buoyStaPresGapFailQM', 'description': 'Buoy station pressure quality metric that summarizes the failed outcomes of the gap test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres gap fail q m'], 'mappings': []}, 'buoyStaPresGapNAQM': {'slot_uri': 'neon:buoyStaPresGapNAQM', 'description': 'Buoy station pressure quality metric that summarizes when the gap test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres gap n a q m'], 'mappings': []}, 'buoyStaPresGapPassQM': {'slot_uri': 'neon:buoyStaPresGapPassQM', 'description': 'Buoy station pressure quality metric that summarizes the passed outcomes of the gap test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres gap pass q m'], 'mappings': []}, 'buoyStaPresGapQF': {'slot_uri': 'neon:buoyStaPresGapQF', 'description': 'Station barometric pressure on-buoy quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['buoy sta pres gap q f'], 'mappings': []}, 'buoyStaPresMaximum': {'slot_uri': 'neon:buoyStaPresMaximum', 'description': 'Maximum station barometric pressure on-buoy', 'range': 'double', 'aliases': ['buoy sta pres maximum'], 'mappings': []}, 'buoyStaPresMean': {'slot_uri': 'neon:buoyStaPresMean', 'description': 'Arithmetic mean of station barometric pressure on-buoy', 'range': 'double', 'aliases': ['buoy sta pres mean'], 'mappings': []}, 'buoyStaPresMinimum': {'slot_uri': 'neon:buoyStaPresMinimum', 'description': 'Minimum station barometric pressure on-buoy', 'range': 'double', 'aliases': ['buoy sta pres minimum'], 'mappings': []}, 'buoyStaPresNullFailQM': {'slot_uri': 'neon:buoyStaPresNullFailQM', 'description': 'Buoy station pressure quality metric that summarizes the failed outcomes of the null test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres null fail q m'], 'mappings': []}, 'buoyStaPresNullNAQM': {'slot_uri': 'neon:buoyStaPresNullNAQM', 'description': 'Buoy station pressure quality metric that summarizes when the null test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres null n a q m'], 'mappings': []}, 'buoyStaPresNullPassQM': {'slot_uri': 'neon:buoyStaPresNullPassQM', 'description': 'Buoy station pressure quality metric that summarizes the passed outcomes of the null test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres null pass q m'], 'mappings': []}, 'buoyStaPresNullQF': {'slot_uri': 'neon:buoyStaPresNullQF', 'description': 'Station barometric pressure on-buoy quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['buoy sta pres null q f'], 'mappings': []}, 'buoyStaPresNumPts': {'slot_uri': 'neon:buoyStaPresNumPts', 'description': 'Number of points used to calculate the arithmetic mean of station barometric pressure on-buoy', 'range': 'string', 'aliases': ['buoy sta pres num pts'], 'mappings': []}, 'buoyStaPresPersistenceFailQM': {'slot_uri': 'neon:buoyStaPresPersistenceFailQM', 'description': 'Buoy station pressure quality metric that summarizes the failed outcomes of the persistence test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres persistence fail q m'], 'mappings': []}, 'buoyStaPresPersistenceNAQM': {'slot_uri': 'neon:buoyStaPresPersistenceNAQM', 'description': 'Buoy station pressure quality metric that summarizes when the persistence test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres persistence n a q m'], 'mappings': []}, 'buoyStaPresPersistencePassQM': {'slot_uri': 'neon:buoyStaPresPersistencePassQM', 'description': 'Buoy station pressure quality metric that summarizes the passed outcomes of the persistence test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres persistence pass q m'], 'mappings': []}, 'buoyStaPresPersistQF': {'slot_uri': 'neon:buoyStaPresPersistQF', 'description': 'Station barometric pressure on-buoy quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['buoy sta pres persist q f'], 'mappings': []}, 'buoyStaPresRangeFailQM': {'slot_uri': 'neon:buoyStaPresRangeFailQM', 'description': 'Buoy station pressure quality metric that summarizes the failed outcomes of the range test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres range fail q m'], 'mappings': []}, 'buoyStaPresRangeNAQM': {'slot_uri': 'neon:buoyStaPresRangeNAQM', 'description': 'Buoy station pressure quality metric that summarizes when the range test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres range n a q m'], 'mappings': []}, 'buoyStaPresRangePassQM': {'slot_uri': 'neon:buoyStaPresRangePassQM', 'description': 'Buoy station pressure quality metric that summarizes the passed outcomes of the range test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres range pass q m'], 'mappings': []}, 'buoyStaPresRangeQF': {'slot_uri': 'neon:buoyStaPresRangeQF', 'description': 'Station barometric pressure on-buoy quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['buoy sta pres range q f'], 'mappings': []}, 'buoyStaPresSpikeFailQM': {'slot_uri': 'neon:buoyStaPresSpikeFailQM', 'description': 'Buoy station pressure quality metric that summarizes the failed outcomes of the spike test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres spike fail q m'], 'mappings': []}, 'buoyStaPresSpikeNAQM': {'slot_uri': 'neon:buoyStaPresSpikeNAQM', 'description': 'Buoy station pressure quality metric that summarizes when the spike test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres spike n a q m'], 'mappings': []}, 'buoyStaPresSpikePassQM': {'slot_uri': 'neon:buoyStaPresSpikePassQM', 'description': 'Buoy station pressure quality metric that summarizes the passed outcomes of the spike test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres spike pass q m'], 'mappings': []}, 'buoyStaPresSpikeQF': {'slot_uri': 'neon:buoyStaPresSpikeQF', 'description': 'Station barometric pressure on-buoy quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['buoy sta pres spike q f'], 'mappings': []}, 'buoyStaPresStdErMean': {'slot_uri': 'neon:buoyStaPresStdErMean', 'description': 'Standard error of the mean for station barometric pressure on-buoy', 'range': 'double', 'aliases': ['buoy sta pres std er mean'], 'mappings': []}, 'buoyStaPresStepFailQM': {'slot_uri': 'neon:buoyStaPresStepFailQM', 'description': 'Buoy station pressure quality metric that summarizes the failed outcomes of the step test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres step fail q m'], 'mappings': []}, 'buoyStaPresStepNAQM': {'slot_uri': 'neon:buoyStaPresStepNAQM', 'description': 'Buoy station pressure quality metric that summarizes when the step test could not be run over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres step n a q m'], 'mappings': []}, 'buoyStaPresStepPassQM': {'slot_uri': 'neon:buoyStaPresStepPassQM', 'description': 'Buoy station pressure quality metric that summarizes the passed outcomes of the step test over the averaging period as a percent', 'range': 'double', 'aliases': ['buoy sta pres step pass q m'], 'mappings': []}, 'buoyStaPresStepQF': {'slot_uri': 'neon:buoyStaPresStepQF', 'description': 'Station barometric pressure on-buoy quality flag for the step test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['buoy sta pres step q f'], 'mappings': []}, 'buoyStaPresVariance': {'slot_uri': 'neon:buoyStaPresVariance', 'description': 'Variance in station barometric pressure on-buoy', 'range': 'double', 'aliases': ['buoy sta pres variance'], 'mappings': []}, 'outuPARAlphaQAQCRpt': {'slot_uri': 'neon:outuPARAlphaQAQCRpt', 'description': 'Outgoing PAR below water surface quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r alpha q a q c rpt'], 'mappings': []}, 'outuPARAlphaQM': {'slot_uri': 'neon:outuPARAlphaQM', 'description': 'Outgoing PAR below water surface quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['outu p a r alpha q m'], 'mappings': []}, 'outuPARBetaQAQCRpt': {'slot_uri': 'neon:outuPARBetaQAQCRpt', 'description': 'Outgoing PAR below water surface QAQC report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r beta q a q c rpt'], 'mappings': []}, 'outuPARBetaQM': {'slot_uri': 'neon:outuPARBetaQM', 'description': 'Outgoing PAR below water surface quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['outu p a r beta q m'], 'mappings': []}, 'outuPARConsistencyFailQM': {'slot_uri': 'neon:outuPARConsistencyFailQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r consistency fail q m'], 'mappings': []}, 'outuPARConsistencyNAQM': {'slot_uri': 'neon:outuPARConsistencyNAQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r consistency n a q m'], 'mappings': []}, 'outuPARConsistencyPassQM': {'slot_uri': 'neon:outuPARConsistencyPassQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r consistency pass q m'], 'mappings': []}, 'outuPARConsistencyQAQCRpt': {'slot_uri': 'neon:outuPARConsistencyQAQCRpt', 'description': 'Outgoing PAR below water surface quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r consistency q a q c rpt'], 'mappings': []}, 'outuPARExpUncert': {'slot_uri': 'neon:outuPARExpUncert', 'description': 'Expanded uncertainty for outgoing PAR below water surface', 'range': 'double', 'aliases': ['outu p a r exp uncert'], 'mappings': []}, 'outuPARFinalQF': {'slot_uri': 'neon:outuPARFinalQF', 'description': 'Outgoing PAR below water surface quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['outu p a r final q f'], 'mappings': []}, 'outuPARGapFailQM': {'slot_uri': 'neon:outuPARGapFailQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r gap fail q m'], 'mappings': []}, 'outuPARGapNAQM': {'slot_uri': 'neon:outuPARGapNAQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r gap n a q m'], 'mappings': []}, 'outuPARGapPassQM': {'slot_uri': 'neon:outuPARGapPassQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r gap pass q m'], 'mappings': []}, 'outuPARGapQAQCRpt': {'slot_uri': 'neon:outuPARGapQAQCRpt', 'description': 'Outgoing PAR below water surface quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['outu p a r gap q a q c rpt'], 'mappings': []}, 'outuPARMaximum': {'slot_uri': 'neon:outuPARMaximum', 'description': 'Maximum outgoing PAR below water surface', 'range': 'double', 'aliases': ['outu p a r maximum'], 'mappings': []}, 'outuPARMean': {'slot_uri': 'neon:outuPARMean', 'description': 'Arithmetic mean of outgoing PAR below water surface', 'range': 'double', 'aliases': ['outu p a r mean'], 'mappings': []}, 'outuPARMinimum': {'slot_uri': 'neon:outuPARMinimum', 'description': 'Minimum outgoing PAR below water surface', 'range': 'double', 'aliases': ['outu p a r minimum'], 'mappings': []}, 'outuPARNullFailQM': {'slot_uri': 'neon:outuPARNullFailQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r null fail q m'], 'mappings': []}, 'outuPARNullNAQM': {'slot_uri': 'neon:outuPARNullNAQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r null n a q m'], 'mappings': []}, 'outuPARNullPassQM': {'slot_uri': 'neon:outuPARNullPassQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r null pass q m'], 'mappings': []}, 'outuPARNullQAQCRpt': {'slot_uri': 'neon:outuPARNullQAQCRpt', 'description': 'Outgoing PAR below water surface quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r null q a q c rpt'], 'mappings': []}, 'outuPARNumPts': {'slot_uri': 'neon:outuPARNumPts', 'description': 'Number of points used to calculate the arithmetic mean of outgoing PAR below water surface', 'range': 'integer', 'aliases': ['outu p a r num pts'], 'mappings': []}, 'outuPARPersistenceFailQM': {'slot_uri': 'neon:outuPARPersistenceFailQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r persistence fail q m'], 'mappings': []}, 'outuPARPersistenceNAQM': {'slot_uri': 'neon:outuPARPersistenceNAQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r persistence n a q m'], 'mappings': []}, 'outuPARPersistencePassQM': {'slot_uri': 'neon:outuPARPersistencePassQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r persistence pass q m'], 'mappings': []}, 'outuPARPersistenceQAQCRpt': {'slot_uri': 'neon:outuPARPersistenceQAQCRpt', 'description': 'Outgoing PAR below water surface QAQC report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r persistence q a q c rpt'], 'mappings': []}, 'outuPARRangeFailQM': {'slot_uri': 'neon:outuPARRangeFailQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r range fail q m'], 'mappings': []}, 'outuPARRangeNAQM': {'slot_uri': 'neon:outuPARRangeNAQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r range n a q m'], 'mappings': []}, 'outuPARRangePassQM': {'slot_uri': 'neon:outuPARRangePassQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r range pass q m'], 'mappings': []}, 'outuPARRangeQAQCRpt': {'slot_uri': 'neon:outuPARRangeQAQCRpt', 'description': 'Outgoing PAR below water surface quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realisitc value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r range q a q c rpt'], 'mappings': []}, 'outuPARSpikeFailQM': {'slot_uri': 'neon:outuPARSpikeFailQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r spike fail q m'], 'mappings': []}, 'outuPARSpikeNAQM': {'slot_uri': 'neon:outuPARSpikeNAQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r spike n a q m'], 'mappings': []}, 'outuPARSpikePassQM': {'slot_uri': 'neon:outuPARSpikePassQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r spike pass q m'], 'mappings': []}, 'outuPARSpikeQAQCRpt': {'slot_uri': 'neon:outuPARSpikeQAQCRpt', 'description': 'Outgoing PAR below water surface quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r spike q a q c rpt'], 'mappings': []}, 'outuPARStdErMean': {'slot_uri': 'neon:outuPARStdErMean', 'description': 'Standard error of the mean for outgoing PAR below water surface', 'range': 'double', 'aliases': ['outu p a r std er mean'], 'mappings': []}, 'outuPARStepFailQM': {'slot_uri': 'neon:outuPARStepFailQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r step fail q m'], 'mappings': []}, 'outuPARStepNAQM': {'slot_uri': 'neon:outuPARStepNAQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r step n a q m'], 'mappings': []}, 'outuPARStepPassQM': {'slot_uri': 'neon:outuPARStepPassQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r step pass q m'], 'mappings': []}, 'outuPARStepQAQCRpt': {'slot_uri': 'neon:outuPARStepQAQCRpt', 'description': 'Outgoing PAR below water surface quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r step q a q c rpt'], 'mappings': []}, 'outuPARValidCalFailQM': {'slot_uri': 'neon:outuPARValidCalFailQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r valid cal fail q m'], 'mappings': []}, 'outuPARValidCalNAQM': {'slot_uri': 'neon:outuPARValidCalNAQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r valid cal n a q m'], 'mappings': []}, 'outuPARValidCalPassQM': {'slot_uri': 'neon:outuPARValidCalPassQM', 'description': 'Outgoing PAR below water surface quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['outu p a r valid cal pass q m'], 'mappings': []}, 'outuPARValidCalQAQCRpt': {'slot_uri': 'neon:outuPARValidCalQAQCRpt', 'description': 'Outgoing PAR below water surface QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['outu p a r valid cal q a q c rpt'], 'mappings': []}, 'outuPARVariance': {'slot_uri': 'neon:outuPARVariance', 'description': 'Variance in outgoing PAR below water surface', 'range': 'double', 'aliases': ['outu p a r variance'], 'mappings': []}, 'uPARAlphaQAQCRpt': {'slot_uri': 'neon:uPARAlphaQAQCRpt', 'description': 'Quality assurance and quality control report for the null test for PM15 at RH <50%, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['u p a r alpha q a q c rpt'], 'mappings': []}, 'uPARAlphaQM': {'slot_uri': 'neon:uPARAlphaQM', 'description': 'PAR below water surface quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['u p a r alpha q m'], 'mappings': []}, 'uPARBetaQAQCRpt': {'slot_uri': 'neon:uPARBetaQAQCRpt', 'description': 'PAR below water surface quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['u p a r beta q a q c rpt'], 'mappings': []}, 'uPARBetaQM': {'slot_uri': 'neon:uPARBetaQM', 'description': 'PAR below water surface quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['u p a r beta q m'], 'mappings': []}, 'uPARConsistencyFailQM': {'slot_uri': 'neon:uPARConsistencyFailQM', 'description': 'PAR below water surface quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r consistency fail q m'], 'mappings': []}, 'uPARConsistencyNAQM': {'slot_uri': 'neon:uPARConsistencyNAQM', 'description': 'PAR below water surface quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r consistency n a q m'], 'mappings': []}, 'uPARConsistencyPassQM': {'slot_uri': 'neon:uPARConsistencyPassQM', 'description': 'PAR below water surface quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r consistency pass q m'], 'mappings': []}, 'uPARConsistencyQAQCRpt': {'slot_uri': 'neon:uPARConsistencyQAQCRpt', 'description': 'PAR below water surface quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['u p a r consistency q a q c rpt'], 'mappings': []}, 'uPARExpUncert': {'slot_uri': 'neon:uPARExpUncert', 'description': 'Expanded uncertainty for PAR below water surface', 'range': 'double', 'aliases': ['u p a r exp uncert'], 'mappings': []}, 'uPARFinalQF': {'slot_uri': 'neon:uPARFinalQF', 'description': 'PAR below water surface quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['u p a r final q f'], 'mappings': []}, 'uPARGapFailQM': {'slot_uri': 'neon:uPARGapFailQM', 'description': 'PAR below water surface quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r gap fail q m'], 'mappings': []}, 'uPARGapNAQM': {'slot_uri': 'neon:uPARGapNAQM', 'description': 'PAR below water surface quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r gap n a q m'], 'mappings': []}, 'uPARGapPassQM': {'slot_uri': 'neon:uPARGapPassQM', 'description': 'PAR below water surface quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r gap pass q m'], 'mappings': []}, 'uPARGapQAQCRpt': {'slot_uri': 'neon:uPARGapQAQCRpt', 'description': 'PAR below water surface quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['u p a r gap q a q c rpt'], 'mappings': []}, 'uPARMaximum': {'slot_uri': 'neon:uPARMaximum', 'description': 'Maximum PAR below water surface', 'range': 'double', 'aliases': ['u p a r maximum'], 'mappings': []}, 'uPARMean': {'slot_uri': 'neon:uPARMean', 'description': 'Arithmetic mean of PAR below water surface', 'range': 'double', 'aliases': ['u p a r mean'], 'mappings': []}, 'uPARMinimum': {'slot_uri': 'neon:uPARMinimum', 'description': 'Minimum PAR below water surface', 'range': 'double', 'aliases': ['u p a r minimum'], 'mappings': []}, 'uPARNullFailQM': {'slot_uri': 'neon:uPARNullFailQM', 'description': 'PAR below water surface quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r null fail q m'], 'mappings': []}, 'uPARNullNAQM': {'slot_uri': 'neon:uPARNullNAQM', 'description': 'PAR below water surface quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r null n a q m'], 'mappings': []}, 'uPARNullPassQM': {'slot_uri': 'neon:uPARNullPassQM', 'description': 'PAR below water surface quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r null pass q m'], 'mappings': []}, 'uPARNullQAQCRpt': {'slot_uri': 'neon:uPARNullQAQCRpt', 'description': 'PAR below water surface quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run)', 'range': 'string', 'aliases': ['u p a r null q a q c rpt'], 'mappings': []}, 'uPARNumPts': {'slot_uri': 'neon:uPARNumPts', 'description': 'Number of points used to calculate the arithmetic mean of PAR below water surface', 'range': 'integer', 'aliases': ['u p a r num pts'], 'mappings': []}, 'uPARPersistenceFailQM': {'slot_uri': 'neon:uPARPersistenceFailQM', 'description': 'PAR below water surface quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r persistence fail q m'], 'mappings': []}, 'uPARPersistenceNAQM': {'slot_uri': 'neon:uPARPersistenceNAQM', 'description': 'PAR below water surface quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r persistence n a q m'], 'mappings': []}, 'uPARPersistencePassQM': {'slot_uri': 'neon:uPARPersistencePassQM', 'description': 'PAR below water surface quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r persistence pass q m'], 'mappings': []}, 'uPARPersistenceQAQCRpt': {'slot_uri': 'neon:uPARPersistenceQAQCRpt', 'description': 'PAR below water surface QAQC report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['u p a r persistence q a q c rpt'], 'mappings': []}, 'uPARRangeFailQM': {'slot_uri': 'neon:uPARRangeFailQM', 'description': 'PAR below water surface quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r range fail q m'], 'mappings': []}, 'uPARRangeNAQM': {'slot_uri': 'neon:uPARRangeNAQM', 'description': 'PAR below water surface quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r range n a q m'], 'mappings': []}, 'uPARRangePassQM': {'slot_uri': 'neon:uPARRangePassQM', 'description': 'PAR below water surface quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r range pass q m'], 'mappings': []}, 'uPARRangeQAQCRpt': {'slot_uri': 'neon:uPARRangeQAQCRpt', 'description': 'PAR below water surface quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run)', 'range': 'string', 'aliases': ['u p a r range q a q c rpt'], 'mappings': []}, 'uPARSpikeFailQM': {'slot_uri': 'neon:uPARSpikeFailQM', 'description': 'PAR below water surface quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r spike fail q m'], 'mappings': []}, 'uPARSpikeNAQM': {'slot_uri': 'neon:uPARSpikeNAQM', 'description': 'PAR below water surface quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r spike n a q m'], 'mappings': []}, 'uPARSpikePassQM': {'slot_uri': 'neon:uPARSpikePassQM', 'description': 'PAR below water surface quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r spike pass q m'], 'mappings': []}, 'uPARSpikeQAQCRpt': {'slot_uri': 'neon:uPARSpikeQAQCRpt', 'description': 'PAR below water surface quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['u p a r spike q a q c rpt'], 'mappings': []}, 'uPARStdErMean': {'slot_uri': 'neon:uPARStdErMean', 'description': 'Standard error of the mean for PAR below water surface', 'range': 'double', 'aliases': ['u p a r std er mean'], 'mappings': []}, 'uPARStepFailQM': {'slot_uri': 'neon:uPARStepFailQM', 'description': 'PAR below water surface quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r step fail q m'], 'mappings': []}, 'uPARStepNAQM': {'slot_uri': 'neon:uPARStepNAQM', 'description': 'PAR below water surface quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r step n a q m'], 'mappings': []}, 'uPARStepPassQM': {'slot_uri': 'neon:uPARStepPassQM', 'description': 'PAR below water surface quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r step pass q m'], 'mappings': []}, 'uPARStepQAQCRpt': {'slot_uri': 'neon:uPARStepQAQCRpt', 'description': 'PAR below water surface quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['u p a r step q a q c rpt'], 'mappings': []}, 'uPARValidCalFailQM': {'slot_uri': 'neon:uPARValidCalFailQM', 'description': 'PAR below water surface quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r valid cal fail q m'], 'mappings': []}, 'uPARValidCalNAQM': {'slot_uri': 'neon:uPARValidCalNAQM', 'description': 'PAR below water surface quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r valid cal n a q m'], 'mappings': []}, 'uPARValidCalPassQM': {'slot_uri': 'neon:uPARValidCalPassQM', 'description': 'PAR below water surface quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['u p a r valid cal pass q m'], 'mappings': []}, 'uPARValidCalQAQCRpt': {'slot_uri': 'neon:uPARValidCalQAQCRpt', 'description': 'PAR below water surface QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['u p a r valid cal q a q c rpt'], 'mappings': []}, 'uPARVariance': {'slot_uri': 'neon:uPARVariance', 'description': 'Variance in PAR below water surface', 'range': 'double', 'aliases': ['u p a r variance'], 'mappings': []}, 'hbpType': {'slot_uri': 'neon:hbpType', 'description': 'Indicator of whether sample is collected from a cropped agricultural or non-agricultural site', 'range': 'string', 'aliases': ['hbp type'], 'mappings': []}, 'subsamplesCreated': {'slot_uri': 'neon:subsamplesCreated', 'description': 'Indicator of whether sampleID was divided into subsamples', 'range': 'string', 'aliases': ['subsamples created'], 'mappings': []}, 'subsampleFreshMassRatio': {'slot_uri': 'neon:subsampleFreshMassRatio', 'description': 'The ratio of subsampleFreshMass to sampleFreshMass', 'range': 'double', 'aliases': ['subsample fresh mass ratio'], 'mappings': []}, 'vectorAverageHeading': {'slot_uri': 'neon:vectorAverageHeading', 'description': 'Vector average of buoy heading', 'range': 'double', 'aliases': ['vector average heading'], 'mappings': []}, 'toCompositeSampleCode': {'slot_uri': 'neon:toCompositeSampleCode', 'description': 'Barcode of sample that will be part of a composite sample', 'range': 'string', 'aliases': ['to composite sample code'], 'mappings': []}, 'toCompositeSampleFate': {'slot_uri': 'neon:toCompositeSampleFate', 'description': 'Fate of sample that will be part of a composite sample', 'range': 'string', 'aliases': ['to composite sample fate'], 'mappings': []}, 'toCompositeSampleID': {'slot_uri': 'neon:toCompositeSampleID', 'description': 'Identifier for sample that will be part of a composite sample', 'range': 'string', 'aliases': ['to composite sample i d'], 'mappings': []}, 'sampleMass': {'slot_uri': 'neon:sampleMass', 'description': 'Mass of sample', 'range': 'double', 'aliases': ['sample mass'], 'mappings': []}, 'samplePercent': {'slot_uri': 'neon:samplePercent', 'description': 'Percent of sample processed', 'range': 'double', 'aliases': ['sample percent'], 'mappings': []}, 'dnaPooledStatus': {'slot_uri': 'neon:dnaPooledStatus', 'description': 'Indicates whether multiple DNA extracts were pooled', 'range': 'string', 'aliases': ['dna pooled status'], 'mappings': []}, 'linkerPrimerSequence': {'slot_uri': 'neon:linkerPrimerSequence', 'description': 'DNA sequence of linker primer used in a multiplexed DNA sequencing run', 'range': 'string', 'aliases': ['linker primer sequence'], 'mappings': []}, 'reverseLinkerPrimerSequence': {'slot_uri': 'neon:reverseLinkerPrimerSequence', 'description': 'DNA sequence of linker primer used on reverse stand in a multiplexed DNA sequencing run', 'range': 'string', 'aliases': ['reverse linker primer sequence'], 'mappings': []}, 'sequencingPlatform': {'slot_uri': 'neon:sequencingPlatform', 'description': 'The brand identifier of the sequencing instrument', 'range': 'string', 'aliases': ['sequencing platform'], 'mappings': []}, 'sequencingPlatformModel': {'slot_uri': 'neon:sequencingPlatformModel', 'description': 'The brand and model identifier of the sequencing instrument', 'range': 'string', 'aliases': ['sequencing platform model'], 'mappings': []}, 'seq_model': {'slot_uri': 'neon:seq_model', 'description': 'The manufacturer model name of the sequencing instrument', 'range': 'string', 'aliases': ['seq_model'], 'mappings': ['mixs:seq_model']}, 'sequencingMethod': {'slot_uri': 'neon:sequencingMethod', 'description': 'Method used for DNA sequencing', 'range': 'string', 'aliases': ['sequencing method'], 'mappings': []}, 'investigation_type': {'slot_uri': 'neon:investigation_type', 'description': 'Manner in which DNA libraries were constructed for analysis', 'range': 'string', 'aliases': ['investigation_type'], 'mappings': ['mixs:investigation_type']}, 'sequencingConcentration': {'slot_uri': 'neon:sequencingConcentration', 'description': 'Concentration of nucleic acid used for sequencing', 'range': 'double', 'aliases': ['sequencing concentration'], 'mappings': []}, 'sequencerRunID': {'slot_uri': 'neon:sequencerRunID', 'description': 'Identifier for the sequencing run', 'range': 'string', 'aliases': ['sequencer run i d'], 'mappings': []}, 'sampleTotalReadNumber': {'slot_uri': 'neon:sampleTotalReadNumber', 'description': 'Total number of sequence reads in a sample', 'range': 'string', 'aliases': ['sample total read number'], 'mappings': []}, 'sampleFilteredReadNumber': {'slot_uri': 'neon:sampleFilteredReadNumber', 'description': 'Number of sequence reads that pass quality filtering', 'range': 'string', 'aliases': ['sample filtered read number'], 'mappings': []}, 'maxFilteredReadLength': {'slot_uri': 'neon:maxFilteredReadLength', 'description': 'Maximum sequence read length for a sample', 'range': 'string', 'aliases': ['max filtered read length'], 'mappings': []}, 'minFilteredReadLength': {'slot_uri': 'neon:minFilteredReadLength', 'description': 'Minimum sequence read length for a sample', 'range': 'string', 'aliases': ['min filtered read length'], 'mappings': []}, 'averageFilteredReadQuality': {'slot_uri': 'neon:averageFilteredReadQuality', 'description': 'Average quality of sequence reads in a sample after quality filtering', 'range': 'double', 'aliases': ['average filtered read quality'], 'mappings': []}, 'ambiguousBasesNumber': {'slot_uri': 'neon:ambiguousBasesNumber', 'description': 'Number of sequence reads in a quality filtered sample with more than 1 ambiguous base', 'range': 'string', 'aliases': ['ambiguous bases number'], 'mappings': []}, 'barcodeSequence': {'slot_uri': 'neon:barcodeSequence', 'description': 'DNA sequence of barcode primer used in a multiplexed DNA sequencing run', 'range': 'string', 'aliases': ['barcode sequence'], 'mappings': []}, 'dnaProcessedBy': {'slot_uri': 'neon:dnaProcessedBy', 'description': 'An identifier for the individual who processed the sample(s)', 'range': 'string', 'aliases': ['dna processed by'], 'mappings': []}, 'nucleicAcidQuantMethod': {'slot_uri': 'neon:nucleicAcidQuantMethod', 'description': 'Nucleic acid quantitative method', 'range': 'string', 'aliases': ['nucleic acid quant method'], 'mappings': []}, 'qaqcStatus': {'slot_uri': 'neon:qaqcStatus', 'description': 'Status of internal QAQC', 'range': 'string', 'aliases': ['qaqc status'], 'mappings': []}, 'fullRangeSpCondLinear': {'slot_uri': 'neon:fullRangeSpCondLinear', 'description': 'Specific conductance calculated using linear method and fullRangeHobo', 'range': 'double', 'aliases': ['full range sp cond linear'], 'mappings': []}, 'fullRangeSpCondNonlinear': {'slot_uri': 'neon:fullRangeSpCondNonlinear', 'description': 'Specific conductance calculated using non-linear method and fullRangeHobo', 'range': 'double', 'aliases': ['full range sp cond nonlinear'], 'mappings': []}, 'lowRangeSpCondLinear': {'slot_uri': 'neon:lowRangeSpCondLinear', 'description': 'Specific conductance calculated using linear method and lowRangeHobo', 'range': 'double', 'aliases': ['low range sp cond linear'], 'mappings': []}, 'lowRangeSpCondNonlinear': {'slot_uri': 'neon:lowRangeSpCondNonlinear', 'description': 'Specific conductance calculated using non-linear method and lowRangeHobo', 'range': 'double', 'aliases': ['low range sp cond nonlinear'], 'mappings': []}, 'averageVelocity': {'slot_uri': 'neon:averageVelocity', 'description': 'Mean velocity from all measured points', 'range': 'double', 'aliases': ['average velocity'], 'mappings': []}, 'averageVelocityUnits': {'slot_uri': 'neon:averageVelocityUnits', 'description': 'Average velocity units', 'range': 'string', 'aliases': ['average velocity units'], 'mappings': []}, 'averageVelocityUnitsQF': {'slot_uri': 'neon:averageVelocityUnitsQF', 'description': 'Data quality flag indicating that average velocity was reported with units other than meterPerSecond. 1 indicates data is not reported with the proper units and 0 indicates data is reported with the proper units', 'range': 'integer', 'aliases': ['average velocity units q f'], 'mappings': []}, 'bedVelocity': {'slot_uri': 'neon:bedVelocity', 'description': 'Velocity of water at the bed', 'range': 'double', 'aliases': ['bed velocity'], 'mappings': []}, 'dischargeUnitsQF': {'slot_uri': 'neon:dischargeUnitsQF', 'description': 'Data quality flag indicating that discharge was reported with units other than litersPerSecond (lps). 1 indicates data is not reported with the proper units and 0 indicates data is reported with the proper units', 'range': 'integer', 'aliases': ['discharge units q f'], 'mappings': []}, 'edgeFactor': {'slot_uri': 'neon:edgeFactor', 'description': 'Roughness factor used only for right angled cross sections', 'range': 'string', 'aliases': ['edge factor'], 'mappings': []}, 'flowCalcQF': {'slot_uri': 'neon:flowCalcQF', 'description': 'Data quality flag indicating that mid-point calculation was not used. 1 indicates data is not comparable and 0 indicates Mid-point method was used and data is comparable', 'range': 'string', 'aliases': ['flow calc q f'], 'mappings': []}, 'flowCalculation': {'slot_uri': 'neon:flowCalculation', 'description': 'Flow calculation method used by the meter', 'range': 'string', 'aliases': ['flow calculation'], 'mappings': []}, 'fourFifthDepthVelocity': {'slot_uri': 'neon:fourFifthDepthVelocity', 'description': 'Velocity of water at 80 percent of the water depth from the bed', 'range': 'double', 'aliases': ['four fifth depth velocity'], 'mappings': []}, 'lowVelocityFinalQF': {'slot_uri': 'neon:lowVelocityFinalQF', 'description': 'Percent of point measurements for a discharge transect with velocity below the instrument detection limit', 'range': 'double', 'aliases': ['low velocity final q f'], 'mappings': []}, 'lowVelocityQF': {'slot_uri': 'neon:lowVelocityQF', 'description': 'Data quality flag for reported velocity below the instrument detection limit', 'range': 'integer', 'aliases': ['low velocity q f'], 'mappings': []}, 'oneFifthDepthVelocity': {'slot_uri': 'neon:oneFifthDepthVelocity', 'description': 'Velocity of water at 20 percent water depth from the bed', 'range': 'double', 'aliases': ['one fifth depth velocity'], 'mappings': []}, 'recorduid': {'slot_uri': 'neon:recorduid', 'description': 'Unique ID within NEON database; an identifier for the parent and associated child records', 'range': 'string', 'aliases': ['recorduid'], 'mappings': []}, 'sectionArea': {'slot_uri': 'neon:sectionArea', 'description': 'Depth times width of the transect section', 'range': 'double', 'aliases': ['section area'], 'mappings': []}, 'sectionFlow': {'slot_uri': 'neon:sectionFlow', 'description': 'Calculated flow of water for a section', 'range': 'double', 'aliases': ['section flow'], 'mappings': []}, 'stationNumber': {'slot_uri': 'neon:stationNumber', 'description': 'Numeric identified for station number', 'range': 'integer', 'aliases': ['station number'], 'mappings': []}, 'streamProfilingMethod': {'slot_uri': 'neon:streamProfilingMethod', 'description': 'Zero; one; two; three; five; or six point (velocity method - USGS and ISO)', 'range': 'string', 'aliases': ['stream profiling method'], 'mappings': []}, 'streamStageUnits': {'slot_uri': 'neon:streamStageUnits', 'description': 'Stage measurement units', 'range': 'string', 'aliases': ['stream stage units'], 'mappings': []}, 'streamStageUnitsQF': {'slot_uri': 'neon:streamStageUnitsQF', 'description': 'Data quality flag indicating that stream stage was reported with units other than meter (m). 1 indicates data is not reported with the proper units and 0 indicates data is reported with the proper units', 'range': 'integer', 'aliases': ['stream stage units q f'], 'mappings': []}, 'surfaceVelocity': {'slot_uri': 'neon:surfaceVelocity', 'description': 'Velocity of water at the surface', 'range': 'double', 'aliases': ['surface velocity'], 'mappings': []}, 'tapeDistance': {'slot_uri': 'neon:tapeDistance', 'description': 'Distance along a tape where the point measurement of velocity and depth were taken for a transect', 'range': 'double', 'aliases': ['tape distance'], 'mappings': []}, 'tapeDistanceUnits': {'slot_uri': 'neon:tapeDistanceUnits', 'description': 'Tape distance units', 'range': 'string', 'aliases': ['tape distance units'], 'mappings': []}, 'tapeDistanceUnitsQF': {'slot_uri': 'neon:tapeDistanceUnitsQF', 'description': 'Data quality flag indicating that tape distance was reported with units other than meter (m). 1 indicates data is not reported with the proper units and 0 indicates data is reported with the proper units', 'range': 'integer', 'aliases': ['tape distance units q f'], 'mappings': []}, 'threeFifthDepthVelocity': {'slot_uri': 'neon:threeFifthDepthVelocity', 'description': 'Velocity of water at 60 percent of the water depth from the bed', 'range': 'double', 'aliases': ['three fifth depth velocity'], 'mappings': []}, 'twoFifthDepthVelocity': {'slot_uri': 'neon:twoFifthDepthVelocity', 'description': 'Velocity of water at 40 percent of the water depth from the bed', 'range': 'double', 'aliases': ['two fifth depth velocity'], 'mappings': []}, 'waterDepth': {'slot_uri': 'neon:waterDepth', 'description': 'Depth of water', 'range': 'double', 'aliases': ['water depth'], 'mappings': []}, 'waterDepthUnits': {'slot_uri': 'neon:waterDepthUnits', 'description': 'Water depth units', 'range': 'string', 'aliases': ['water depth units'], 'mappings': []}, 'waterDepthUnitsQF': {'slot_uri': 'neon:waterDepthUnitsQF', 'description': 'Data quality flag indicating that water depth was reported with units other than meter (m). 1 indicates data is not reported with the proper units and 0 indicates data is reported with the proper units', 'range': 'integer', 'aliases': ['water depth units q f'], 'mappings': []}, 'bgcDataQF': {'slot_uri': 'neon:bgcDataQF', 'description': 'Quality flag for biogeochemistry sample', 'range': 'string', 'aliases': ['bgc data q f'], 'mappings': []}, 'bgcRemarks': {'slot_uri': 'neon:bgcRemarks', 'description': 'Remarks from biogeochemistry subsample processing', 'range': 'string', 'aliases': ['bgc remarks'], 'mappings': []}, 'caclpHRatio': {'slot_uri': 'neon:caclpHRatio', 'description': 'Ratio of calcium chloride to soil for pH measurement', 'range': 'double', 'aliases': ['caclp h ratio'], 'mappings': []}, 'dryMassFraction': {'slot_uri': 'neon:dryMassFraction', 'description': 'Dry mass divided by fresh mass of a sample', 'range': 'double', 'aliases': ['dry mass fraction'], 'mappings': []}, 'genomicsDataQF': {'slot_uri': 'neon:genomicsDataQF', 'description': 'Quality flag for genomics sample', 'range': 'string', 'aliases': ['genomics data q f'], 'mappings': []}, 'pHDataQF': {'slot_uri': 'neon:pHDataQF', 'description': 'Quality flag for pH measurement', 'range': 'string', 'aliases': ['p h data q f'], 'mappings': []}, 'pHMeasuredBy': {'slot_uri': 'neon:pHMeasuredBy', 'description': 'An identifier for the technician who measured or collected the pH data', 'range': 'string', 'aliases': ['p h measured by'], 'mappings': []}, 'pHRemarks': {'slot_uri': 'neon:pHRemarks', 'description': 'Remarks from measurement of sample pH', 'range': 'string', 'aliases': ['p h remarks'], 'mappings': []}, 'sampleExtent': {'slot_uri': 'neon:sampleExtent', 'description': 'Extent of the soil sample relative to the local soil horizon conditions', 'range': 'string', 'aliases': ['sample extent'], 'mappings': []}, 'smDataQF': {'slot_uri': 'neon:smDataQF', 'description': 'Quality flag for soil moisture measurement', 'range': 'string', 'aliases': ['sm data q f'], 'mappings': []}, 'smMeasuredBy': {'slot_uri': 'neon:smMeasuredBy', 'description': 'An identifier for the technician who measured or collected the soil moisture data', 'range': 'string', 'aliases': ['sm measured by'], 'mappings': []}, 'smRemarks': {'slot_uri': 'neon:smRemarks', 'description': 'Remarks from measurement of sample gravimetric soil moisture', 'range': 'string', 'aliases': ['sm remarks'], 'mappings': []}, 'soilMoisture': {'slot_uri': 'neon:soilMoisture', 'description': 'Gravimetric water content of soil in grams of water per gram dry soil', 'range': 'double', 'aliases': ['soil moisture'], 'mappings': []}, 'standingWaterDepth': {'slot_uri': 'neon:standingWaterDepth', 'description': 'Depth of standing water present at a sampling location', 'range': 'double', 'aliases': ['standing water depth'], 'mappings': []}, 'waterpHRatio': {'slot_uri': 'neon:waterpHRatio', 'description': 'Ratio of water to soil for pH measurement', 'range': 'double', 'aliases': ['waterp h ratio'], 'mappings': []}, 'genomicsPooledCodeList': {'slot_uri': 'neon:genomicsPooledCodeList', 'description': 'List of barcodes for pooled samples in a genomics sample', 'range': 'string', 'aliases': ['genomics pooled code list'], 'mappings': []}, 'genomicsPooledIDList': {'slot_uri': 'neon:genomicsPooledIDList', 'description': 'List of sample identifiers pooled for a genomics sample', 'range': 'string', 'aliases': ['genomics pooled i d list'], 'mappings': []}, 'genomicsSampleCode': {'slot_uri': 'neon:genomicsSampleCode', 'description': 'Barcode of a genomics sample', 'range': 'string', 'aliases': ['genomics sample code'], 'mappings': []}, 'genomicsSampleID': {'slot_uri': 'neon:genomicsSampleID', 'description': 'Identifier for a genomics sample', 'range': 'string', 'aliases': ['genomics sample i d'], 'mappings': []}, 'additionalCoordUncertainty': {'slot_uri': 'neon:additionalCoordUncertainty', 'description': 'Additional uncertainty to be added to the coordinate uncertainty at all sites', 'range': 'double', 'aliases': ['additional coord uncertainty'], 'mappings': []}, 'fulcrumVersion': {'slot_uri': 'neon:fulcrumVersion', 'description': 'Version of the Fulcrum application used during data entry', 'range': 'string', 'aliases': ['fulcrum version'], 'mappings': []}, 'icePresent': {'slot_uri': 'neon:icePresent', 'description': 'Indication of the presence of ice', 'range': 'string', 'aliases': ['ice present'], 'mappings': []}, 'platformInfo': {'slot_uri': 'neon:platformInfo', 'description': 'Operating System and browser information (where applicable) of computer used during data entry', 'range': 'string', 'aliases': ['platform info'], 'mappings': []}, 'estimatedMetalimnionDepths': {'slot_uri': 'neon:estimatedMetalimnionDepths', 'description': 'An indication that the depths used in the calculation of the metalimnion are spaced wider than 1 m apart, resulting in estimates for the upper and lower depths of the metalimnion', 'range': 'string', 'aliases': ['estimated metalimnion depths'], 'mappings': []}, 'lowerMetalimnionDepth': {'slot_uri': 'neon:lowerMetalimnionDepth', 'description': 'Depth of lower bound of the metalimnion', 'range': 'string', 'aliases': ['lower metalimnion depth'], 'mappings': []}, 'lowerMetalimnion2Depth': {'slot_uri': 'neon:lowerMetalimnion2Depth', 'description': 'Depth of lower bound of the second, deeper metalimnion', 'range': 'string', 'aliases': ['lower metalimnion2 depth'], 'mappings': []}, 'upperMetalimnionDepth': {'slot_uri': 'neon:upperMetalimnionDepth', 'description': 'Depth of upper bound of the metalimnion', 'range': 'string', 'aliases': ['upper metalimnion depth'], 'mappings': []}, 'upperMetalimnion2Depth': {'slot_uri': 'neon:upperMetalimnion2Depth', 'description': 'Depth of upper bound of the second, deeper metalimnion', 'range': 'string', 'aliases': ['upper metalimnion2 depth'], 'mappings': []}, 'snowThickness': {'slot_uri': 'neon:snowThickness', 'description': 'Thickness of the snow covering the lake or river', 'range': 'double', 'aliases': ['snow thickness'], 'mappings': []}, 'beaufortScaleWind': {'slot_uri': 'neon:beaufortScaleWind', 'description': 'Qualitative description of wind conditions based on the beaufort scale', 'range': 'string', 'aliases': ['beaufort scale wind'], 'mappings': []}, 'algaePresence': {'slot_uri': 'neon:algaePresence', 'description': 'Presence of algae', 'range': 'string', 'aliases': ['algae presence'], 'mappings': []}, 'leafLitterPresence': {'slot_uri': 'neon:leafLitterPresence', 'description': 'Presence of leaf litter', 'range': 'string', 'aliases': ['leaf litter presence'], 'mappings': []}, 'macrophytePresence': {'slot_uri': 'neon:macrophytePresence', 'description': 'Presence of macrophytes', 'range': 'string', 'aliases': ['macrophyte presence'], 'mappings': []}, 'nominalCloudCover': {'slot_uri': 'neon:nominalCloudCover', 'description': 'Sky Condition, estimate of cloud cover percent', 'range': 'string', 'aliases': ['nominal cloud cover'], 'mappings': []}, 'oilsPresence': {'slot_uri': 'neon:oilsPresence', 'description': 'Presence of oils', 'range': 'string', 'aliases': ['oils presence'], 'mappings': []}, 'pollenPresence': {'slot_uri': 'neon:pollenPresence', 'description': 'Presence of pollen as film, foam, or deposit', 'range': 'string', 'aliases': ['pollen presence'], 'mappings': []}, 'trashPresent': {'slot_uri': 'neon:trashPresent', 'description': 'Presence of trash', 'range': 'string', 'aliases': ['trash present'], 'mappings': []}, 'waterClarityDescrip': {'slot_uri': 'neon:waterClarityDescrip', 'description': 'Qualitative description of water clarity', 'range': 'string', 'aliases': ['water clarity descrip'], 'mappings': []}, 'woodyDebrisPresence': {'slot_uri': 'neon:woodyDebrisPresence', 'description': 'Presence of woody debris', 'range': 'string', 'aliases': ['woody debris presence'], 'mappings': []}, 'clipArea': {'slot_uri': 'neon:clipArea', 'description': 'Total area sampled within the selected clipID', 'range': 'double', 'aliases': ['clip area'], 'mappings': []}, 'clipLength': {'slot_uri': 'neon:clipLength', 'description': 'The length of the clip-harvest area in meters', 'range': 'double', 'aliases': ['clip length'], 'mappings': []}, 'clipWidth': {'slot_uri': 'neon:clipWidth', 'description': 'The width of the clip-harvest area in meters', 'range': 'double', 'aliases': ['clip width'], 'mappings': []}, 'freshMass': {'slot_uri': 'neon:freshMass', 'description': 'Total fresh mass of a sample', 'range': 'double', 'aliases': ['fresh mass'], 'mappings': []}, 'subsampleCode': {'slot_uri': 'neon:subsampleCode', 'description': 'Barcode of a subsample', 'range': 'string', 'aliases': ['subsample code'], 'mappings': []}, 'subsampleDryMass': {'slot_uri': 'neon:subsampleDryMass', 'description': 'Total dry mass of a subsample', 'range': 'double', 'aliases': ['subsample dry mass'], 'mappings': []}, 'subsampleFate': {'slot_uri': 'neon:subsampleFate', 'description': 'Fate of a subsample', 'range': 'string', 'aliases': ['subsample fate'], 'mappings': []}, 'subsampleFreshMass': {'slot_uri': 'neon:subsampleFreshMass', 'description': 'Total fresh mass of a subsample', 'range': 'double', 'aliases': ['subsample fresh mass'], 'mappings': []}, 'plotManagement': {'slot_uri': 'neon:plotManagement', 'description': 'Indicator of management activities occurring in the plot', 'range': 'string', 'aliases': ['plot management'], 'mappings': []}, 'boatToShoreDist': {'slot_uri': 'neon:boatToShoreDist', 'description': 'Distance between the observer in the boat and shore', 'range': 'double', 'aliases': ['boat to shore dist'], 'mappings': []}, 'canopyCoverPercent': {'slot_uri': 'neon:canopyCoverPercent', 'description': 'Percent canopy cover', 'range': 'double', 'aliases': ['canopy cover percent'], 'mappings': []}, 'estVisibilityDist': {'slot_uri': 'neon:estVisibilityDist', 'description': 'Visible distance in meters from bank or shore to end of riparian transect', 'range': 'string', 'aliases': ['est visibility dist'], 'mappings': []}, 'fulcrumChildID': {'slot_uri': 'neon:fulcrumChildID', 'description': 'Identifier for the child record in Fulcrum', 'range': 'string', 'aliases': ['fulcrum child i d'], 'mappings': []}, 'fulcrumGrandchildID': {'slot_uri': 'neon:fulcrumGrandchildID', 'description': 'Identifier for the grandchild record in Fulcrum', 'range': 'string', 'aliases': ['fulcrum grandchild i d'], 'mappings': []}, 'acidTreatment': {'slot_uri': 'neon:acidTreatment', 'description': 'Indicator for whether a sample has been acidified to remove carbonate prior to analysis', 'range': 'string', 'aliases': ['acid treatment'], 'mappings': []}, 'analyteKnownValue': {'slot_uri': 'neon:analyteKnownValue', 'description': 'The known value of a given analyte for a quality assurance reference material or standard, with units tied to the analyte', 'range': 'double', 'aliases': ['analyte known value'], 'mappings': []}, 'analyticalRepNumber': {'slot_uri': 'neon:analyticalRepNumber', 'description': 'Number of the analytical replicate', 'range': 'string', 'aliases': ['analytical rep number'], 'mappings': []}, 'carbonPercent': {'slot_uri': 'neon:carbonPercent', 'description': 'Percent carbon in a sample on a dry weight basis', 'range': 'double', 'aliases': ['carbon percent'], 'mappings': []}, 'cnIsotopeQF': {'slot_uri': 'neon:cnIsotopeQF', 'description': 'Quality flag for stable isotope values outside the calibration range', 'range': 'string', 'aliases': ['cn isotope q f'], 'mappings': []}, 'cnPercentQF': {'slot_uri': 'neon:cnPercentQF', 'description': 'Quality flag for concentration values outside the calibration range', 'range': 'string', 'aliases': ['cn percent q f'], 'mappings': []}, 'CNratio': {'slot_uri': 'neon:CNratio', 'description': 'Ratio of carbon to nitrogen concentration in a sample on a dry weight basis', 'range': 'double', 'aliases': ['c nratio'], 'mappings': []}, 'd13C': {'slot_uri': 'neon:d13C', 'description': 'Measure of the ratio of 13C:12C in a sample, relative to Vienna Pee Dee Belemnite', 'range': 'double', 'aliases': ['d13 c'], 'mappings': []}, 'd15N': {'slot_uri': 'neon:d15N', 'description': 'Measure of the ratio of 15N:14N in a sample, relative to atmospheric N2', 'range': 'double', 'aliases': ['d15 n'], 'mappings': []}, 'nitrogenPercent': {'slot_uri': 'neon:nitrogenPercent', 'description': 'Percent nitrogen in a sample on a dry weight basis', 'range': 'double', 'aliases': ['nitrogen percent'], 'mappings': []}, 'runID': {'slot_uri': 'neon:runID', 'description': 'A linking value provided by the external lab that associates the sample data to the run metadata, including QA values', 'range': 'string', 'aliases': ['run i d'], 'mappings': []}, 'altCoordinateUncertainty': {'slot_uri': 'neon:altCoordinateUncertainty', 'description': 'The horizontal distance (in meters) from the given altLatitude and altLongitude describing the smallest circle containing the whole of the Location. Zero is not a valid value for this term', 'range': 'double', 'aliases': ['alt coordinate uncertainty'], 'mappings': []}, 'altGeodeticDatum': {'slot_uri': 'neon:altGeodeticDatum', 'description': 'Model used to measure horizontal position on the earth for alternate location coordinate', 'range': 'string', 'aliases': ['alt geodetic datum'], 'mappings': []}, 'amcSamplingProtocolVersion': {'slot_uri': 'neon:amcSamplingProtocolVersion', 'description': 'The NEON document number and version of the aquatic microbes protocol where detailed information regarding the sampling method used is available; format NEON.DOC.######vX', 'range': 'string', 'aliases': ['amc sampling protocol version'], 'mappings': []}, 'domainSampleCode': {'slot_uri': 'neon:domainSampleCode', 'description': 'Barcode of the domain lab sample', 'range': 'string', 'aliases': ['domain sample code'], 'mappings': []}, 'swcSamplingProtocolVersion': {'slot_uri': 'neon:swcSamplingProtocolVersion', 'description': 'The NEON document number and version of the water chemistry protocol where detailed information regarding the sampling method used is available; format NEON.DOC.######vX', 'range': 'string', 'aliases': ['swc sampling protocol version'], 'mappings': []}, 'titrationDataString': {'slot_uri': 'neon:titrationDataString', 'description': 'x,y pairs of pH and Counter Reading on digital titrator concatenated into a string', 'range': 'string', 'aliases': ['titration data string'], 'mappings': []}, 'domainSampleFate': {'slot_uri': 'neon:domainSampleFate', 'description': 'Fate of the domain lab sample', 'range': 'string', 'aliases': ['domain sample fate'], 'mappings': []}, 'filtSampleCode': {'slot_uri': 'neon:filtSampleCode', 'description': 'Barcode of a filtered sample', 'range': 'string', 'aliases': ['filt sample code'], 'mappings': []}, 'filtSampleCond': {'slot_uri': 'neon:filtSampleCond', 'description': 'Condition of filtered sample', 'range': 'string', 'aliases': ['filt sample cond'], 'mappings': []}, 'filtSampleFate': {'slot_uri': 'neon:filtSampleFate', 'description': 'Fate of a filtered sample', 'range': 'string', 'aliases': ['filt sample fate'], 'mappings': []}, 'filtSampleID': {'slot_uri': 'neon:filtSampleID', 'description': 'Identifier for filtered sample', 'range': 'string', 'aliases': ['filt sample i d'], 'mappings': []}, 'pcnSampleCode': {'slot_uri': 'neon:pcnSampleCode', 'description': 'Barcode of a particulate carbon and nitrogen sample', 'range': 'string', 'aliases': ['pcn sample code'], 'mappings': []}, 'pcnSampleCond': {'slot_uri': 'neon:pcnSampleCond', 'description': 'Condition of a particulate carbon and nitrogen sample', 'range': 'string', 'aliases': ['pcn sample cond'], 'mappings': []}, 'pcnSampleFate': {'slot_uri': 'neon:pcnSampleFate', 'description': 'Fate of a particulate carbon and nitrogen sample', 'range': 'string', 'aliases': ['pcn sample fate'], 'mappings': []}, 'pcnSampleID': {'slot_uri': 'neon:pcnSampleID', 'description': 'Identifier for particulate carbon and nitrogen sample', 'range': 'string', 'aliases': ['pcn sample i d'], 'mappings': []}, 'rawSampleCode': {'slot_uri': 'neon:rawSampleCode', 'description': 'Barcode of a raw whole water sample', 'range': 'string', 'aliases': ['raw sample code'], 'mappings': []}, 'rawSampleCond': {'slot_uri': 'neon:rawSampleCond', 'description': 'Condition of a raw whole water sample', 'range': 'string', 'aliases': ['raw sample cond'], 'mappings': []}, 'rawSampleFate': {'slot_uri': 'neon:rawSampleFate', 'description': 'Fate of a raw whole water sample', 'range': 'string', 'aliases': ['raw sample fate'], 'mappings': []}, 'rawSampleID': {'slot_uri': 'neon:rawSampleID', 'description': 'Identifier for raw whole water sample', 'range': 'string', 'aliases': ['raw sample i d'], 'mappings': []}, 'shipmentLateTest': {'slot_uri': 'neon:shipmentLateTest', 'description': 'Test for quality flag for shipment arriving more than one day after shipment sent', 'range': 'double', 'aliases': ['shipment late test'], 'mappings': []}, 'absorbancePrecision': {'slot_uri': 'neon:absorbancePrecision', 'description': 'Closeness of agreement between indications or measured quantity values obtained by replicate measurements on the same or similar objects under specified conditions for absorbance', 'range': 'string', 'aliases': ['absorbance precision'], 'mappings': []}, 'groundwaterFieldDataQF': {'slot_uri': 'neon:groundwaterFieldDataQF', 'description': 'Data quality flag for groundwater field data', 'range': 'string', 'aliases': ['groundwater field data q f'], 'mappings': []}, 'measurementDate': {'slot_uri': 'neon:measurementDate', 'description': 'Date of the measurement event', 'range': 'time', 'aliases': ['measurement date'], 'mappings': []}, 'measurementDepth': {'slot_uri': 'neon:measurementDepth', 'description': 'Depth at which a measurement was taken', 'range': 'double', 'aliases': ['measurement depth'], 'mappings': []}, 'pumpStartTime': {'slot_uri': 'neon:pumpStartTime', 'description': 'Time the pump was first started at the well', 'range': 'time', 'aliases': ['pump start time'], 'mappings': []}, 'totalWellDepth': {'slot_uri': 'neon:totalWellDepth', 'description': 'Total well depth; used to calculate water column height', 'range': 'double', 'aliases': ['total well depth'], 'mappings': []}, 'volume3Wells': {'slot_uri': 'neon:volume3Wells', 'description': 'Three times the volume of the well', 'range': 'double', 'aliases': ['volume3 wells'], 'mappings': []}, 'waterColumnHeight': {'slot_uri': 'neon:waterColumnHeight', 'description': 'Height of the water column in the well; calculated as: total well depth - depth to water table', 'range': 'double', 'aliases': ['water column height'], 'mappings': []}, 'wellRedeveloped': {'slot_uri': 'neon:wellRedeveloped', 'description': 'Indication of whether the well was redeveloped just prior to sampling', 'range': 'string', 'aliases': ['well redeveloped'], 'mappings': []}, 'wellRedevelopedDate': {'slot_uri': 'neon:wellRedevelopedDate', 'description': 'Date of well redevelopment', 'range': 'time', 'aliases': ['well redeveloped date'], 'mappings': []}, 'adultCount': {'slot_uri': 'neon:adultCount', 'description': 'Number of adults', 'range': 'string', 'aliases': ['adult count'], 'mappings': []}, 'controlType': {'slot_uri': 'neon:controlType', 'description': 'Control type for test or experiment', 'range': 'string', 'aliases': ['control type'], 'mappings': []}, 'criteriaMet': {'slot_uri': 'neon:criteriaMet', 'description': 'Whether or not criteria are met', 'range': 'string', 'aliases': ['criteria met'], 'mappings': []}, 'identificationProtocolVersion': {'slot_uri': 'neon:identificationProtocolVersion', 'description': 'The protocol version used for specimen identification', 'range': 'string', 'aliases': ['identification protocol version'], 'mappings': []}, 'larvaCount': {'slot_uri': 'neon:larvaCount', 'description': 'Number of larvae', 'range': 'string', 'aliases': ['larva count'], 'mappings': []}, 'nymphCount': {'slot_uri': 'neon:nymphCount', 'description': 'Number of nymphs', 'range': 'string', 'aliases': ['nymph count'], 'mappings': []}, 'samplingMethod': {'slot_uri': 'neon:samplingMethod', 'description': 'Name or code for the method used to collect or test a sample', 'range': 'string', 'aliases': ['sampling method'], 'mappings': []}, 'analysisMagnification': {'slot_uri': 'neon:analysisMagnification', 'description': 'Magnification used during analysis', 'range': 'string', 'aliases': ['analysis magnification'], 'mappings': []}, 'analysisVolume': {'slot_uri': 'neon:analysisVolume', 'description': 'Volume in milliliters of sample analyzed', 'range': 'double', 'aliases': ['analysis volume'], 'mappings': []}, 'archiveFilteredSampleVolume': {'slot_uri': 'neon:archiveFilteredSampleVolume', 'description': 'Volume of water filtered for microbial archive', 'range': 'string', 'aliases': ['archive filtered sample volume'], 'mappings': []}, 'archiveSampleCode': {'slot_uri': 'neon:archiveSampleCode', 'description': 'Barcode of archive sample', 'range': 'string', 'aliases': ['archive sample code'], 'mappings': []}, 'archiveSampleCond': {'slot_uri': 'neon:archiveSampleCond', 'description': 'Condition of the archive sample', 'range': 'string', 'aliases': ['archive sample cond'], 'mappings': []}, 'batchReferenceCount': {'slot_uri': 'neon:batchReferenceCount', 'description': 'Automated count of reference image for the batch', 'range': 'string', 'aliases': ['batch reference count'], 'mappings': []}, 'cellCountLabSampleMedium': {'slot_uri': 'neon:cellCountLabSampleMedium', 'description': 'Physical form of the cell count specimen', 'range': 'string', 'aliases': ['cell count lab sample medium'], 'mappings': []}, 'cellCountMethod': {'slot_uri': 'neon:cellCountMethod', 'description': 'Enumeration method used for microbial cell count', 'range': 'string', 'aliases': ['cell count method'], 'mappings': []}, 'cellCountPreservantVolume': {'slot_uri': 'neon:cellCountPreservantVolume', 'description': 'Volume of preservative added to cell count sample', 'range': 'double', 'aliases': ['cell count preservant volume'], 'mappings': []}, 'cellCountSampleCond': {'slot_uri': 'neon:cellCountSampleCond', 'description': 'Condition of the cell count sample', 'range': 'string', 'aliases': ['cell count sample cond'], 'mappings': []}, 'cellCountSampleVolume': {'slot_uri': 'neon:cellCountSampleVolume', 'description': 'Volume of water collected for cell count analysis', 'range': 'double', 'aliases': ['cell count sample volume'], 'mappings': []}, 'countStandardDeviation': {'slot_uri': 'neon:countStandardDeviation', 'description': 'Long-term average standard deviation values of microbial cell count of the reference image based on repeat visual analysis', 'range': 'double', 'aliases': ['count standard deviation'], 'mappings': []}, 'enumerationDifference': {'slot_uri': 'neon:enumerationDifference', 'description': 'Percent difference in enumeration between the original sample and the quality checked sample', 'range': 'double', 'aliases': ['enumeration difference'], 'mappings': []}, 'longTermEnumerationDifference': {'slot_uri': 'neon:longTermEnumerationDifference', 'description': 'Percent difference in enumeration between the reference image count and the quality checked reference image count', 'range': 'double', 'aliases': ['long term enumeration difference'], 'mappings': []}, 'geneticFilteredSampleVolume': {'slot_uri': 'neon:geneticFilteredSampleVolume', 'description': 'Volume of filtered water for genetic analysis of microbes', 'range': 'string', 'aliases': ['genetic filtered sample volume'], 'mappings': []}, 'geneticLabSampleMedium': {'slot_uri': 'neon:geneticLabSampleMedium', 'description': 'Physical form of the genetic specimen', 'range': 'string', 'aliases': ['genetic lab sample medium'], 'mappings': []}, 'geneticSampleCond': {'slot_uri': 'neon:geneticSampleCond', 'description': 'Condition of the genetic sample', 'range': 'string', 'aliases': ['genetic sample cond'], 'mappings': []}, 'numberOfFieldsAnalyzed': {'slot_uri': 'neon:numberOfFieldsAnalyzed', 'description': 'Number of fields analyzed for microbial cell count', 'range': 'string', 'aliases': ['number of fields analyzed'], 'mappings': []}, 'rawMicrobialAbundance': {'slot_uri': 'neon:rawMicrobialAbundance', 'description': 'Raw microbial abundance, not corrected for preservative volume', 'range': 'string', 'aliases': ['raw microbial abundance'], 'mappings': []}, 'referenceImageCount': {'slot_uri': 'neon:referenceImageCount', 'description': 'Automated count of the reference image', 'range': 'string', 'aliases': ['reference image count'], 'mappings': []}, 'referenceImageID': {'slot_uri': 'neon:referenceImageID', 'description': 'Identifier for the reference image', 'range': 'string', 'aliases': ['reference image i d'], 'mappings': []}, 'totalCellCount': {'slot_uri': 'neon:totalCellCount', 'description': 'Total number of cells counted in the analysis', 'range': 'string', 'aliases': ['total cell count'], 'mappings': []}, 'boatWetMassSum': {'slot_uri': 'neon:boatWetMassSum', 'description': 'Sum of boatMass and wetMassSubsample', 'range': 'double', 'aliases': ['boat wet mass sum'], 'mappings': []}, 'morphospeciesCreatedDate': {'slot_uri': 'neon:morphospeciesCreatedDate', 'description': 'Date and time of morphospecies record creation', 'range': 'time', 'aliases': ['morphospecies created date'], 'mappings': ['dwc:eventDate']}, 'morphospeciesResolved': {'slot_uri': 'neon:morphospeciesResolved', 'description': 'Indicator of whether the morphospecies has been identified', 'range': 'string', 'aliases': ['morphospecies resolved'], 'mappings': []}, 'morphospeciesResolvedDate': {'slot_uri': 'neon:morphospeciesResolvedDate', 'description': 'Date and time of resolving the morphospecies identification', 'range': 'time', 'aliases': ['morphospecies resolved date'], 'mappings': []}, 'perBottleSampleVolume': {'slot_uri': 'neon:perBottleSampleVolume', 'description': 'Sample volume per bottle in milliliters', 'range': 'double', 'aliases': ['per bottle sample volume'], 'mappings': []}, 'pointNumber': {'slot_uri': 'neon:pointNumber', 'description': 'Number of the point sampled for a given location', 'range': 'string', 'aliases': ['point number'], 'mappings': []}, 'substrate': {'slot_uri': 'neon:substrate', 'description': 'Organic or inorganic surface material at the location', 'range': 'string', 'aliases': ['substrate'], 'mappings': []}, 'transectDistance': {'slot_uri': 'neon:transectDistance', 'description': 'Distance along the transect', 'range': 'double', 'aliases': ['transect distance'], 'mappings': []}, 'archiveFate': {'slot_uri': 'neon:archiveFate', 'description': 'Fate of the Archive sample', 'range': 'string', 'aliases': ['archive fate'], 'mappings': []}, 'archiveIDCode': {'slot_uri': 'neon:archiveIDCode', 'description': 'Barcode of the Archive sample', 'range': 'string', 'aliases': ['archive i d code'], 'mappings': []}, 'depthIncrementCode': {'slot_uri': 'neon:depthIncrementCode', 'description': 'Barcode of the depth increment', 'range': 'string', 'aliases': ['depth increment code'], 'mappings': []}, 'depthIncrementFate': {'slot_uri': 'neon:depthIncrementFate', 'description': 'Fate of depth increment', 'range': 'string', 'aliases': ['depth increment fate'], 'mappings': []}, 'pitCode': {'slot_uri': 'neon:pitCode', 'description': 'Barcode of the pit', 'range': 'string', 'aliases': ['pit code'], 'mappings': []}, 'pitFate': {'slot_uri': 'neon:pitFate', 'description': 'Fate of the soil pit', 'range': 'string', 'aliases': ['pit fate'], 'mappings': []}, 'pitProfileClassCode': {'slot_uri': 'neon:pitProfileClassCode', 'description': 'Barcode of the pit profile class', 'range': 'string', 'aliases': ['pit profile class code'], 'mappings': []}, 'pitProfileClassFate': {'slot_uri': 'neon:pitProfileClassFate', 'description': 'Fate of pit profile class', 'range': 'string', 'aliases': ['pit profile class fate'], 'mappings': []}, 'pitProfileClassID': {'slot_uri': 'neon:pitProfileClassID', 'description': 'An identifier for the vertical sampling profile and class', 'range': 'string', 'aliases': ['pit profile class i d'], 'mappings': []}, 'pitProfileCode': {'slot_uri': 'neon:pitProfileCode', 'description': 'Barcode of the pit profile', 'range': 'string', 'aliases': ['pit profile code'], 'mappings': []}, 'pitProfileFate': {'slot_uri': 'neon:pitProfileFate', 'description': 'Fate of pit profile', 'range': 'string', 'aliases': ['pit profile fate'], 'mappings': []}, 'equilibratedAirSampleCode': {'slot_uri': 'neon:equilibratedAirSampleCode', 'description': 'Barcode for a sample of air that has been equilibrated with water (i.e., a mixture)', 'range': 'string', 'aliases': ['equilibrated air sample code'], 'mappings': []}, 'equilibratedAirSampleCond': {'slot_uri': 'neon:equilibratedAirSampleCond', 'description': 'Condition of the sample of air that has been equilibrated with water (i.e. a mixture)', 'range': 'string', 'aliases': ['equilibrated air sample cond'], 'mappings': []}, 'equilibratedAirSampleFate': {'slot_uri': 'neon:equilibratedAirSampleFate', 'description': 'Fate of a sample of air that has been equilibrated with water (i.e., a mixture)', 'range': 'string', 'aliases': ['equilibrated air sample fate'], 'mappings': []}, 'referenceAirSampleCode': {'slot_uri': 'neon:referenceAirSampleCode', 'description': 'Barcode for sample of reference air', 'range': 'string', 'aliases': ['reference air sample code'], 'mappings': []}, 'referenceAirSampleCond': {'slot_uri': 'neon:referenceAirSampleCond', 'description': 'Condition of the reference air sample', 'range': 'string', 'aliases': ['reference air sample cond'], 'mappings': []}, 'referenceAirSampleFate': {'slot_uri': 'neon:referenceAirSampleFate', 'description': 'Fate of a sample of reference air', 'range': 'string', 'aliases': ['reference air sample fate'], 'mappings': []}, 'sdgAirDataQF': {'slot_uri': 'neon:sdgAirDataQF', 'description': 'Data quality flag for dissolved gas reference air collection', 'range': 'string', 'aliases': ['sdg air data q f'], 'mappings': []}, 'sdgExternalLabDataQF': {'slot_uri': 'neon:sdgExternalLabDataQF', 'description': 'Data quality flag for dissolved gas external laboratory data', 'range': 'string', 'aliases': ['sdg external lab data q f'], 'mappings': []}, 'sdgFieldDataQF': {'slot_uri': 'neon:sdgFieldDataQF', 'description': 'Data quality flag for dissolved gas field data', 'range': 'string', 'aliases': ['sdg field data q f'], 'mappings': []}, 'sdgProcessDataQF': {'slot_uri': 'neon:sdgProcessDataQF', 'description': 'Data quality flag for dissolved gas field processing', 'range': 'string', 'aliases': ['sdg process data q f'], 'mappings': []}, 'waterSampleCode': {'slot_uri': 'neon:waterSampleCode', 'description': 'Barcode for the water sample to be equilibrated with air', 'range': 'string', 'aliases': ['water sample code'], 'mappings': []}, 'waterSampleFate': {'slot_uri': 'neon:waterSampleFate', 'description': 'Fate of the water sample to be equilibrated with air', 'range': 'string', 'aliases': ['water sample fate'], 'mappings': []}, 'analyteConcentration': {'slot_uri': 'neon:analyteConcentration', 'description': 'Concentration of analyte', 'range': 'double', 'aliases': ['analyte concentration'], 'mappings': []}, 'percentFilterAnalyzed': {'slot_uri': 'neon:percentFilterAnalyzed', 'description': 'Fraction of the filter sampled (%)', 'range': 'double', 'aliases': ['percent filter analyzed'], 'mappings': []}, 'qaType': {'slot_uri': 'neon:qaType', 'description': 'Type of quality assurance used in analysis', 'range': 'string', 'aliases': ['qa type'], 'mappings': []}, 'replicate': {'slot_uri': 'neon:replicate', 'description': 'Sample replicate', 'range': 'string', 'aliases': ['replicate'], 'mappings': []}, 'isotopeH2OSampleCond': {'slot_uri': 'neon:isotopeH2OSampleCond', 'description': 'Condition of a sample for 2H:1H and 18O:16O water stable isotope sample', 'range': 'string', 'aliases': ['isotope h2 o sample cond'], 'mappings': []}, 'isotopePOMSampleCond': {'slot_uri': 'neon:isotopePOMSampleCond', 'description': 'Condition of a sample for 13C:12C and 15N:14N particulate organic matter (POM) stable isotope sample', 'range': 'string', 'aliases': ['isotope p o m sample cond'], 'mappings': []}, 'isotopePOMRep2SampleCond': {'slot_uri': 'neon:isotopePOMRep2SampleCond', 'description': 'Condition of a sample for 13C:12C and 15N:14N particulate organic matter (POM) stable isotope sample for replicate 2', 'range': 'string', 'aliases': ['isotope p o m rep2 sample cond'], 'mappings': []}, 'isotopeH2OExternalLabTest': {'slot_uri': 'neon:isotopeH2OExternalLabTest', 'description': 'Test to ensure that either 18O or 2H isotope data is returned', 'range': 'string', 'aliases': ['isotope h2 o external lab test'], 'mappings': []}, 'caco3Conc': {'slot_uri': 'neon:caco3Conc', 'description': 'Carbonate concentration of the <2 mm fraction expressed as calcium carbonate', 'range': 'double', 'aliases': ['caco3 conc'], 'mappings': []}, 'carbonTot': {'slot_uri': 'neon:carbonTot', 'description': 'Total carbon concentration of the <2 mm fraction', 'range': 'double', 'aliases': ['carbon tot'], 'mappings': []}, 'estimatedOC': {'slot_uri': 'neon:estimatedOC', 'description': 'Estimated organic carbon concentration of the <2 mm fraction', 'range': 'double', 'aliases': ['estimated o c'], 'mappings': []}, 'gypsumConc': {'slot_uri': 'neon:gypsumConc', 'description': 'Gypsum concentration of the <2 mm fraction', 'range': 'double', 'aliases': ['gypsum conc'], 'mappings': []}, 'nitrogenTot': {'slot_uri': 'neon:nitrogenTot', 'description': 'Total nitrogen concentration of the <2 mm fraction', 'range': 'double', 'aliases': ['nitrogen tot'], 'mappings': []}, 'sulfurTot': {'slot_uri': 'neon:sulfurTot', 'description': 'Total sulfur concentration of the <2 mm fraction', 'range': 'double', 'aliases': ['sulfur tot'], 'mappings': []}, 'waterSatx': {'slot_uri': 'neon:waterSatx', 'description': 'Water content on a mass basis of the saturation extract from the <2 mm fraction', 'range': 'double', 'aliases': ['water satx'], 'mappings': []}, 'biogeoCode': {'slot_uri': 'neon:biogeoCode', 'description': 'Barcode the biogeochemistry sample', 'range': 'string', 'aliases': ['biogeo code'], 'mappings': []}, 'biogeoNrcsFate': {'slot_uri': 'neon:biogeoNrcsFate', 'description': 'Fate of the sample used by NRCS for biogeochemistry measurements', 'range': 'string', 'aliases': ['biogeo nrcs fate'], 'mappings': []}, 'bulkDensCode': {'slot_uri': 'neon:bulkDensCode', 'description': 'Barcode of the bulk density sample', 'range': 'string', 'aliases': ['bulk dens code'], 'mappings': []}, 'bulkDensNrcsFate': {'slot_uri': 'neon:bulkDensNrcsFate', 'description': 'Fate of the sample used by National Resource Conservation Service (NRCS) for bulk density', 'range': 'string', 'aliases': ['bulk dens nrcs fate'], 'mappings': []}, 'carbonateClay': {'slot_uri': 'neon:carbonateClay', 'description': 'Carbonate clay (<0.002 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['carbonate clay'], 'mappings': []}, 'clayFineContent': {'slot_uri': 'neon:clayFineContent', 'description': 'Fine clay (<0.0002 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['clay fine content'], 'mappings': []}, 'clayTotal': {'slot_uri': 'neon:clayTotal', 'description': 'Total clay (<0.002 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['clay total'], 'mappings': []}, 'horizonCode': {'slot_uri': 'neon:horizonCode', 'description': 'Barcode of the horizon', 'range': 'string', 'aliases': ['horizon code'], 'mappings': []}, 'horizonFate': {'slot_uri': 'neon:horizonFate', 'description': 'Fate of the soil horizon', 'range': 'string', 'aliases': ['horizon fate'], 'mappings': []}, 'sandCoarseContent': {'slot_uri': 'neon:sandCoarseContent', 'description': 'Coarse sand (0.5-1 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['sand coarse content'], 'mappings': []}, 'sandFineContent': {'slot_uri': 'neon:sandFineContent', 'description': 'Fine sand (0.105-0.25 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['sand fine content'], 'mappings': []}, 'sandMediumContent': {'slot_uri': 'neon:sandMediumContent', 'description': 'Medium sand (0.25-0.5 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['sand medium content'], 'mappings': []}, 'sandTotal': {'slot_uri': 'neon:sandTotal', 'description': 'Total sand (0.047-2 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['sand total'], 'mappings': []}, 'sandVeryCoarseContent': {'slot_uri': 'neon:sandVeryCoarseContent', 'description': 'Very coarse sand (1-2 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['sand very coarse content'], 'mappings': []}, 'sandVeryFineContent': {'slot_uri': 'neon:sandVeryFineContent', 'description': 'Very fine sand (0.047-0.105 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['sand very fine content'], 'mappings': []}, 'siltCoarseContent': {'slot_uri': 'neon:siltCoarseContent', 'description': 'Coarse silt (0.02-0.047 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['silt coarse content'], 'mappings': []}, 'siltFineContent': {'slot_uri': 'neon:siltFineContent', 'description': 'Fine silt (0.002-0.02 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['silt fine content'], 'mappings': []}, 'siltTotal': {'slot_uri': 'neon:siltTotal', 'description': 'Total silt (0.002-0.047 mm) content on a weight basis of the <2 mm fraction', 'range': 'double', 'aliases': ['silt total'], 'mappings': []}, 'associatedSpecimens': {'slot_uri': 'neon:associatedSpecimens', 'description': 'A list of specimens associated with the subject specimen at the time of its collection. References to other specimen identifiers should be preceded by the relationship', 'range': 'string', 'aliases': ['associated specimens'], 'mappings': []}, 'associatedTaxa': {'slot_uri': 'neon:associatedTaxa', 'description': 'A list of taxa associated with the taxon at the time of its collection. References to taxa are preceded by the relationship', 'range': 'string', 'aliases': ['associated taxa'], 'mappings': []}, 'dnaBarcoded': {'slot_uri': 'neon:dnaBarcoded', 'description': 'An indicator of whether the sample was selected as a candidate for genetic barcoding', 'range': 'string', 'aliases': ['dna barcoded'], 'mappings': []}, 'externalURLs': {'slot_uri': 'neon:externalURLs', 'description': 'Pipe-delimited list of web accessible links that provide additional information about the specimen', 'range': 'string', 'aliases': ['external u r ls'], 'mappings': []}, 'individualCode': {'slot_uri': 'neon:individualCode', 'description': 'Barcode of an individual', 'range': 'string', 'aliases': ['individual code'], 'mappings': []}, 'individualFate': {'slot_uri': 'neon:individualFate', 'description': 'Fate of a tagged individual', 'range': 'string', 'aliases': ['individual fate'], 'mappings': []}, 'sampleStatus': {'slot_uri': 'neon:sampleStatus', 'description': 'Status of sample for downstream processing and/or analysis', 'range': 'string', 'aliases': ['sample status'], 'mappings': []}, 'testingVialIDCode': {'slot_uri': 'neon:testingVialIDCode', 'description': 'Barcode of the vial containing specimens for testing (e.g., pathogen testing, chemical analysis, etc.)', 'range': 'string', 'aliases': ['testing vial i d code'], 'mappings': []}, 'testingVialIDFate': {'slot_uri': 'neon:testingVialIDFate', 'description': 'Fate of the vial containing specimens for testing (e.g., pathogen testing, chemical analysis, etc.)', 'range': 'string', 'aliases': ['testing vial i d fate'], 'mappings': []}, 'wellCoordinates': {'slot_uri': 'neon:wellCoordinates', 'description': 'Location of sample in multi-well storage box or plate', 'range': 'string', 'aliases': ['well coordinates'], 'mappings': []}, 'nativeStatusCode': {'slot_uri': 'neon:nativeStatusCode', 'description': 'The process by which the taxon became established in the location', 'range': 'string', 'aliases': ['native status code'], 'mappings': []}, 'taxonRaw': {'slot_uri': 'neon:taxonRaw', 'description': 'Raw species code', 'range': 'string', 'aliases': ['taxon raw'], 'mappings': []}, 'bloodSampleBarcode': {'slot_uri': 'neon:bloodSampleBarcode', 'description': 'Barcode of the blood sample', 'range': 'string', 'aliases': ['blood sample barcode'], 'mappings': []}, 'earSampleBarcode': {'slot_uri': 'neon:earSampleBarcode', 'description': 'Barcode of the ear sample', 'range': 'string', 'aliases': ['ear sample barcode'], 'mappings': []}, 'fecalSampleBarcode': {'slot_uri': 'neon:fecalSampleBarcode', 'description': 'Barcode of the fecal sample', 'range': 'string', 'aliases': ['fecal sample barcode'], 'mappings': []}, 'hairSampleBarcode': {'slot_uri': 'neon:hairSampleBarcode', 'description': 'Barcode of the hair sample', 'range': 'string', 'aliases': ['hair sample barcode'], 'mappings': []}, 'voucherSampleBarcode': {'slot_uri': 'neon:voucherSampleBarcode', 'description': 'Barcode of the voucher sample', 'range': 'string', 'aliases': ['voucher sample barcode'], 'mappings': []}, 'bloodSampleFate': {'slot_uri': 'neon:bloodSampleFate', 'description': 'Fate of the blood sample', 'range': 'string', 'aliases': ['blood sample fate'], 'mappings': []}, 'earSampleFate': {'slot_uri': 'neon:earSampleFate', 'description': 'Fate of the ear sample', 'range': 'string', 'aliases': ['ear sample fate'], 'mappings': []}, 'fecalSampleFate': {'slot_uri': 'neon:fecalSampleFate', 'description': 'Fate of the fecal sample', 'range': 'string', 'aliases': ['fecal sample fate'], 'mappings': []}, 'hairSampleFate': {'slot_uri': 'neon:hairSampleFate', 'description': 'Fate of the hair sample', 'range': 'string', 'aliases': ['hair sample fate'], 'mappings': []}, 'voucherSampleFate': {'slot_uri': 'neon:voucherSampleFate', 'description': 'Fate of a voucher sample', 'range': 'string', 'aliases': ['voucher sample fate'], 'mappings': []}, 'identifier': {'slot_uri': 'neon:identifier', 'description': 'Full name of primary individual who assigned the specimen to a taxonomic group', 'range': 'string', 'aliases': ['identifier'], 'mappings': ['dwc:identifiedBy']}, 'identifierEmail': {'slot_uri': 'neon:identifierEmail', 'description': 'E-mail address of the primary identifier', 'range': 'string', 'aliases': ['identifier email'], 'mappings': ['dwc:identifiedBy']}, 'identifierInstitution': {'slot_uri': 'neon:identifierInstitution', 'description': 'The full name of the institutional or organizational affiliation of the identifier', 'range': 'string', 'aliases': ['identifier institution'], 'mappings': []}, 'reproduction': {'slot_uri': 'neon:reproduction', 'description': 'The presumed method of reproduction', 'range': 'string', 'aliases': ['reproduction'], 'mappings': []}, 'hairSampleContents': {'slot_uri': 'neon:hairSampleContents', 'description': 'The type(s) of hair collected', 'range': 'string', 'aliases': ['hair sample contents'], 'mappings': []}, 'altCoordinateSource': {'slot_uri': 'neon:altCoordinateSource', 'description': 'Alternate method used to collect or create spatial information', 'range': 'string', 'aliases': ['alt coordinate source'], 'mappings': []}, 'altElevation': {'slot_uri': 'neon:altElevation', 'description': 'Alternate elevation (in meters) above sea level', 'range': 'double', 'aliases': ['alt elevation'], 'mappings': []}, 'altElevationUncertainty': {'slot_uri': 'neon:altElevationUncertainty', 'description': 'Alternate uncertainty in elevation values (in meters)', 'range': 'double', 'aliases': ['alt elevation uncertainty'], 'mappings': []}, 'habitatDescription': {'slot_uri': 'neon:habitatDescription', 'description': 'Description of the habitat in which the event occurred', 'range': 'string', 'aliases': ['habitat description'], 'mappings': []}, 'tagCode': {'slot_uri': 'neon:tagCode', 'description': 'Code of domain-level unique identifier used to mark the individual', 'range': 'string', 'aliases': ['tag code'], 'mappings': []}, 'voucherSampleCode': {'slot_uri': 'neon:voucherSampleCode', 'description': 'Barcode of a voucher sample', 'range': 'string', 'aliases': ['voucher sample code'], 'mappings': []}, 'additionalSpecies': {'slot_uri': 'neon:additionalSpecies', 'description': 'Indicator of whether additional species are detected on the larger subplot relative to the smaller subplot', 'range': 'string', 'aliases': ['additional species'], 'mappings': []}, 'plantCondition': {'slot_uri': 'neon:plantCondition', 'description': 'Condition of the plant from which material is collected', 'range': 'string', 'aliases': ['plant condition'], 'mappings': []}, 'tagFate': {'slot_uri': 'neon:tagFate', 'description': 'Fate of domain-level unique identifier used to mark the individual', 'range': 'string', 'aliases': ['tag fate'], 'mappings': []}, 'untaggedPlantID': {'slot_uri': 'neon:untaggedPlantID', 'description': 'Identifier for untagged plant', 'range': 'string', 'aliases': ['untagged plant i d'], 'mappings': []}, 'editedDate': {'slot_uri': 'neon:editedDate', 'description': 'The date-time that record was edited', 'range': 'time', 'aliases': ['edited date'], 'mappings': []}, 'gpsDatafile': {'slot_uri': 'neon:gpsDatafile', 'description': 'Name assigned to GPS file', 'range': 'string', 'aliases': ['gps datafile'], 'mappings': []}, 'individualBarcode': {'slot_uri': 'neon:individualBarcode', 'description': 'Barcode for a tagged individual', 'range': 'string', 'aliases': ['individual barcode'], 'mappings': []}, 'logCount': {'slot_uri': 'neon:logCount', 'description': 'Number of GPS points collected', 'range': 'double', 'aliases': ['log count'], 'mappings': []}, 'patchSize': {'slot_uri': 'neon:patchSize', 'description': 'Size (in square meters) of the patch', 'range': 'double', 'aliases': ['patch size'], 'mappings': []}, 'sampleCoordinateUncertainty': {'slot_uri': 'neon:sampleCoordinateUncertainty', 'description': 'Coordinate uncertainty of a sampled location', 'range': 'double', 'aliases': ['sample coordinate uncertainty'], 'mappings': []}, 'sampleElevation': {'slot_uri': 'neon:sampleElevation', 'description': 'Elevation (in meters) above sea level of a sampled location', 'range': 'double', 'aliases': ['sample elevation'], 'mappings': []}, 'sampleElevationUncertainty': {'slot_uri': 'neon:sampleElevationUncertainty', 'description': 'Uncertainty in elevation values (in meters) of a sampled location', 'range': 'double', 'aliases': ['sample elevation uncertainty'], 'mappings': []}, 'sampleLatitude': {'slot_uri': 'neon:sampleLatitude', 'description': 'Latitude of the sampled location', 'range': 'double', 'aliases': ['sample latitude'], 'mappings': []}, 'sampleLongitude': {'slot_uri': 'neon:sampleLongitude', 'description': 'Longitude of the sampled location', 'range': 'double', 'aliases': ['sample longitude'], 'mappings': []}, 'subtypeSpecification': {'slot_uri': 'neon:subtypeSpecification', 'description': 'Type of plot or grid; mammal: diversity, pathogen, training; bird: ninePoints, onePoint; phenology: primary, phenocam', 'range': 'string', 'aliases': ['subtype specification'], 'mappings': []}, 'vstTagID': {'slot_uri': 'neon:vstTagID', 'description': 'The vegetation structure tagID value', 'range': 'string', 'aliases': ['vst tag i d'], 'mappings': []}, 'sampleGeodeticDatum': {'slot_uri': 'neon:sampleGeodeticDatum', 'description': 'Model used to measure horizontal position, of the sample, on the earth', 'range': 'string', 'aliases': ['sample geodetic datum'], 'mappings': ['dwc:geodeticDatum']}, 'archiveVialID': {'slot_uri': 'neon:archiveVialID', 'description': 'Identifier for the vial containing specimens for archive', 'range': 'string', 'aliases': ['archive vial i d'], 'mappings': []}, 'collectionCode': {'slot_uri': 'neon:collectionCode', 'description': 'Code associated with a given collection within an institution. The Collection Code is used in conjunction with Museum ID in order to disambiguate a ID that might be used in different collections within the same institution', 'range': 'string', 'aliases': ['collection code'], 'mappings': []}, 'photographedBy': {'slot_uri': 'neon:photographedBy', 'description': 'An identifier for the technician who took the photograph', 'range': 'string', 'aliases': ['photographed by'], 'mappings': []}, 'photoView': {'slot_uri': 'neon:photoView', 'description': 'Standardized term to group images depicting a specific set of features of the organisms or related environment', 'range': 'string', 'aliases': ['photo view'], 'mappings': []}, 'subsampleIDList': {'slot_uri': 'neon:subsampleIDList', 'description': 'List of subsampleIDs', 'range': 'string', 'aliases': ['subsample i d list'], 'mappings': []}, 'backgroundFieldCondDataQF': {'slot_uri': 'neon:backgroundFieldCondDataQF', 'description': 'Data quality flag for background conductivity field data', 'range': 'string', 'aliases': ['background field cond data q f'], 'mappings': []}, 'backgroundFieldSaltDataQF': {'slot_uri': 'neon:backgroundFieldSaltDataQF', 'description': 'Data quality flag for background salt field data', 'range': 'string', 'aliases': ['background field salt data q f'], 'mappings': []}, 'betweenLoggersDist': {'slot_uri': 'neon:betweenLoggersDist', 'description': 'Distance between conductivity loggers that are not positioned at the sensor sets', 'range': 'double', 'aliases': ['between loggers dist'], 'mappings': []}, 'carboyVolume': {'slot_uri': 'neon:carboyVolume', 'description': 'Volume of salt tracer storage tank in liters', 'range': 'double', 'aliases': ['carboy volume'], 'mappings': []}, 'certifiedStandardAccuracy': {'slot_uri': 'neon:certifiedStandardAccuracy', 'description': 'Analytical accuracy of certified standard', 'range': 'double', 'aliases': ['certified standard accuracy'], 'mappings': []}, 'constantRateTracerMass': {'slot_uri': 'neon:constantRateTracerMass', 'description': 'Mass of constant rate tracer added to carboy', 'range': 'double', 'aliases': ['constant rate tracer mass'], 'mappings': []}, 'dateTimeLogger': {'slot_uri': 'neon:dateTimeLogger', 'description': 'Local date and time returned by a field data logger', 'range': 'time', 'aliases': ['date time logger'], 'mappings': []}, 'dripEndTime': {'slot_uri': 'neon:dripEndTime', 'description': 'End date and time of the salt tracer injection', 'range': 'time', 'aliases': ['drip end time'], 'mappings': []}, 'dripRateStart': {'slot_uri': 'neon:dripRateStart', 'description': 'Rate of salt pumped into stream at start of salt tracer injection', 'range': 'double', 'aliases': ['drip rate start'], 'mappings': []}, 'dripRateEnd': {'slot_uri': 'neon:dripRateEnd', 'description': 'Rate of salt pumped into stream at end of salt tracer injection', 'range': 'double', 'aliases': ['drip rate end'], 'mappings': []}, 'dripStartTime': {'slot_uri': 'neon:dripStartTime', 'description': 'Start date and time of the salt tracer injection', 'range': 'time', 'aliases': ['drip start time'], 'mappings': []}, 'externalLabGasDataQF': {'slot_uri': 'neon:externalLabGasDataQF', 'description': 'Data quality flag for external lab gas data', 'range': 'string', 'aliases': ['external lab gas data q f'], 'mappings': []}, 'externalLabSaltDataQF': {'slot_uri': 'neon:externalLabSaltDataQF', 'description': 'Data quality flag for external lab salt data', 'range': 'string', 'aliases': ['external lab salt data q f'], 'mappings': []}, 'finalConcentration': {'slot_uri': 'neon:finalConcentration', 'description': 'Concentration that has ben adjusted for any dilution during analysis', 'range': 'double', 'aliases': ['final concentration'], 'mappings': []}, 'fullRangeHobo': {'slot_uri': 'neon:fullRangeHobo', 'description': 'Conductivity from a hobo logger for the full range', 'range': 'double', 'aliases': ['full range hobo'], 'mappings': []}, 'gasSampleCode': {'slot_uri': 'neon:gasSampleCode', 'description': 'Barcode for the gas sample', 'range': 'string', 'aliases': ['gas sample code'], 'mappings': []}, 'gasSampleID': {'slot_uri': 'neon:gasSampleID', 'description': 'Unique identifier for the gas sample', 'range': 'string', 'aliases': ['gas sample i d'], 'mappings': []}, 'gasTracerConcentration': {'slot_uri': 'neon:gasTracerConcentration', 'description': 'Tracer concentration in sample', 'range': 'double', 'aliases': ['gas tracer concentration'], 'mappings': []}, 'gasTracerType': {'slot_uri': 'neon:gasTracerType', 'description': 'Type of gas used as a tracer', 'range': 'string', 'aliases': ['gas tracer type'], 'mappings': []}, 'gasVolumeAnalyzed': {'slot_uri': 'neon:gasVolumeAnalyzed', 'description': 'Volume of sample analyzed, in milliliters', 'range': 'double', 'aliases': ['gas volume analyzed'], 'mappings': []}, 'hoboSampleCode': {'slot_uri': 'neon:hoboSampleCode', 'description': 'Barcode of the HOBO conductivity logger file', 'range': 'string', 'aliases': ['hobo sample code'], 'mappings': []}, 'hoboSampleID': {'slot_uri': 'neon:hoboSampleID', 'description': 'Unique identifier for the HOBO conductivity logger file', 'range': 'string', 'aliases': ['hobo sample i d'], 'mappings': []}, 'injectateSampleCode': {'slot_uri': 'neon:injectateSampleCode', 'description': 'Barcode for the reaeration salt tracer sample', 'range': 'string', 'aliases': ['injectate sample code'], 'mappings': []}, 'injectateSampleCollected': {'slot_uri': 'neon:injectateSampleCollected', 'description': 'Indicator of whether an injectate sample was collected', 'range': 'string', 'aliases': ['injectate sample collected'], 'mappings': []}, 'injectateSampleID': {'slot_uri': 'neon:injectateSampleID', 'description': 'Unique identifier for the reaeration salt tracer sample', 'range': 'string', 'aliases': ['injectate sample i d'], 'mappings': []}, 'injectionType': {'slot_uri': 'neon:injectionType', 'description': 'Type of tracer injection, e.g. slug or constant rate', 'range': 'string', 'aliases': ['injection type'], 'mappings': []}, 'labStandardPrecision': {'slot_uri': 'neon:labStandardPrecision', 'description': 'Precision of the laboratory standard used in the development of the standard curve, measured as coefficient of variance', 'range': 'double', 'aliases': ['lab standard precision'], 'mappings': []}, 'loggerDataQF': {'slot_uri': 'neon:loggerDataQF', 'description': 'Data quality flag for conductiivty logger data', 'range': 'string', 'aliases': ['logger data q f'], 'mappings': []}, 'loggersAtSensorSets': {'slot_uri': 'neon:loggersAtSensorSets', 'description': 'Indication of whether or not the conductivity loggers are positioned at sensor sets 1 and 2', 'range': 'string', 'aliases': ['loggers at sensor sets'], 'mappings': []}, 'lowRangeHobo': {'slot_uri': 'neon:lowRangeHobo', 'description': 'Conductivity returned from a hobo logger for the low range', 'range': 'double', 'aliases': ['low range hobo'], 'mappings': []}, 'measurementNumber': {'slot_uri': 'neon:measurementNumber', 'description': 'The number of the measurement in a time series', 'range': 'string', 'aliases': ['measurement number'], 'mappings': []}, 'plateauFieldDataQF': {'slot_uri': 'neon:plateauFieldDataQF', 'description': 'Data quality flag for plateau field data', 'range': 'string', 'aliases': ['plateau field data q f'], 'mappings': []}, 'plateauSampleFieldDataQF': {'slot_uri': 'neon:plateauSampleFieldDataQF', 'description': 'Data quality flag for plateau sample field data', 'range': 'string', 'aliases': ['plateau sample field data q f'], 'mappings': []}, 'plateauCollectTime': {'slot_uri': 'neon:plateauCollectTime', 'description': 'The date-time of sample collection at tracer plateau', 'range': 'time', 'aliases': ['plateau collect time'], 'mappings': []}, 'runDetectionLimit': {'slot_uri': 'neon:runDetectionLimit', 'description': 'Detection limit of the sample run', 'range': 'double', 'aliases': ['run detection limit'], 'mappings': []}, 'saltBackgroundSampleCode': {'slot_uri': 'neon:saltBackgroundSampleCode', 'description': 'Barcode of the reaeration background salt sample', 'range': 'string', 'aliases': ['salt background sample code'], 'mappings': []}, 'saltBackgroundSampleID': {'slot_uri': 'neon:saltBackgroundSampleID', 'description': 'Unique identifier for the reaeration background salt sample', 'range': 'string', 'aliases': ['salt background sample i d'], 'mappings': []}, 'saltBelowDetectionQF': {'slot_uri': 'neon:saltBelowDetectionQF', 'description': 'finalConcentration below the detection limit. 1=less than detection limit; 0=greater than or equal to detection limit; -1=NA (i.e. could not be run)', 'range': 'integer', 'aliases': ['salt below detection q f'], 'mappings': []}, 'saltSampleID': {'slot_uri': 'neon:saltSampleID', 'description': 'Unique identifier for reaeration salt sample', 'range': 'string', 'aliases': ['salt sample i d'], 'mappings': []}, 'saltTracerSampleCode': {'slot_uri': 'neon:saltTracerSampleCode', 'description': 'Barcode for the salt sample', 'range': 'string', 'aliases': ['salt tracer sample code'], 'mappings': []}, 'saltTracerSampleID': {'slot_uri': 'neon:saltTracerSampleID', 'description': 'Unique identifier for the salt sample', 'range': 'string', 'aliases': ['salt tracer sample i d'], 'mappings': []}, 'slugPourTime': {'slot_uri': 'neon:slugPourTime', 'description': 'Start date and time of the salt slug', 'range': 'time', 'aliases': ['slug pour time'], 'mappings': []}, 'slugTracerMass': {'slot_uri': 'neon:slugTracerMass', 'description': 'Mass of slug tracer used', 'range': 'double', 'aliases': ['slug tracer mass'], 'mappings': []}, 'specificConductanceRep1': {'slot_uri': 'neon:specificConductanceRep1', 'description': 'Conductivity auto-corrected to 25 degrees C measurement replicate 1', 'range': 'double', 'aliases': ['specific conductance rep1'], 'mappings': []}, 'specificConductanceRep2': {'slot_uri': 'neon:specificConductanceRep2', 'description': 'Conductivity auto-corrected to 25 degrees C measurement replicate 2', 'range': 'double', 'aliases': ['specific conductance rep2'], 'mappings': []}, 'specificConductanceRep3': {'slot_uri': 'neon:specificConductanceRep3', 'description': 'Conductivity auto-corrected to 25 degrees C measurement replicate 3', 'range': 'double', 'aliases': ['specific conductance rep3'], 'mappings': []}, 'specificConductanceRep4': {'slot_uri': 'neon:specificConductanceRep4', 'description': 'Conductivity auto-corrected to 25 degrees C measurement replicate 4', 'range': 'double', 'aliases': ['specific conductance rep4'], 'mappings': []}, 'specificConductanceRep5': {'slot_uri': 'neon:specificConductanceRep5', 'description': 'Conductivity auto-corrected to 25 degrees C measurement replicate 5', 'range': 'double', 'aliases': ['specific conductance rep5'], 'mappings': []}, 'stationToInjectionDistance': {'slot_uri': 'neon:stationToInjectionDistance', 'description': 'Stream distance between the station and the injection location', 'range': 'double', 'aliases': ['station to injection distance'], 'mappings': []}, 'syringeID': {'slot_uri': 'neon:syringeID', 'description': 'Identifier for the sample syringe', 'range': 'string', 'aliases': ['syringe i d'], 'mappings': []}, 'syringeCode': {'slot_uri': 'neon:syringeCode', 'description': 'Barcode for the sample syringe', 'range': 'string', 'aliases': ['syringe code'], 'mappings': []}, 'tracerAnalysisType': {'slot_uri': 'neon:tracerAnalysisType', 'description': 'Type of analysis used to determine tracer concentration', 'range': 'string', 'aliases': ['tracer analysis type'], 'mappings': []}, 'widthMeasurementNumber': {'slot_uri': 'neon:widthMeasurementNumber', 'description': 'The number for wetted width measurement between the sensors sets', 'range': 'string', 'aliases': ['width measurement number'], 'mappings': []}, 'wettedWidthDataQF': {'slot_uri': 'neon:wettedWidthDataQF', 'description': 'Data quality flag for wetted width field data', 'range': 'string', 'aliases': ['wetted width data q f'], 'mappings': []}, 'externaLabFileName': {'slot_uri': 'neon:externaLabFileName', 'description': 'External lab specific file name for run data', 'range': 'string', 'aliases': ['externa lab file name'], 'mappings': []}, 'gasBelowDetectionQF': {'slot_uri': 'neon:gasBelowDetectionQF', 'description': 'gasTracerConcentration below the run detection limit. 1=less than detection limit; 0=greater than or equal to detection limit; -1=NA (i.e. could not be run)', 'range': 'integer', 'aliases': ['gas below detection q f'], 'mappings': []}, 'gasSampleFate': {'slot_uri': 'neon:gasSampleFate', 'description': 'Fate of the gas sample', 'range': 'string', 'aliases': ['gas sample fate'], 'mappings': []}, 'hoboSampleFate': {'slot_uri': 'neon:hoboSampleFate', 'description': 'Fate of the HOBO conductivity logger file', 'range': 'string', 'aliases': ['hobo sample fate'], 'mappings': []}, 'injectateSampleFate': {'slot_uri': 'neon:injectateSampleFate', 'description': 'Fate of the reaeration salt tracer sample', 'range': 'string', 'aliases': ['injectate sample fate'], 'mappings': []}, 'saltBackgroundSampleClass': {'slot_uri': 'neon:saltBackgroundSampleClass', 'description': 'Sample class of the reaeration background salt sample', 'range': 'string', 'aliases': ['salt background sample class'], 'mappings': []}, 'saltBackgroundSampleFate': {'slot_uri': 'neon:saltBackgroundSampleFate', 'description': 'Fate of the reaeration background salt sample', 'range': 'string', 'aliases': ['salt background sample fate'], 'mappings': []}, 'saltSampleCode': {'slot_uri': 'neon:saltSampleCode', 'description': 'Barcode of a reaeration salt sample', 'range': 'string', 'aliases': ['salt sample code'], 'mappings': []}, 'saltSampleFate': {'slot_uri': 'neon:saltSampleFate', 'description': 'Fate of a reaeration salt sample', 'range': 'string', 'aliases': ['salt sample fate'], 'mappings': []}, 'saltTracerSampleFate': {'slot_uri': 'neon:saltTracerSampleFate', 'description': 'Fate for the salt sample', 'range': 'string', 'aliases': ['salt tracer sample fate'], 'mappings': []}, 'syringeFate': {'slot_uri': 'neon:syringeFate', 'description': 'Fate for the sample syringe', 'range': 'string', 'aliases': ['syringe fate'], 'mappings': []}, 'analysisType': {'slot_uri': 'neon:analysisType', 'description': 'Type of analysis at external lab', 'range': 'string', 'aliases': ['analysis type'], 'mappings': []}, 'originalFieldSampleVolume': {'slot_uri': 'neon:originalFieldSampleVolume', 'description': 'Original sample volume collected in the field before adjustments', 'range': 'double', 'aliases': ['original field sample volume'], 'mappings': []}, 'plantAdjAshFreeDryMass': {'slot_uri': 'neon:plantAdjAshFreeDryMass', 'description': 'Combusted mass of the sample, multiplied to account for lab subsampling for the whole plant from which the epiphyton samples are scraped', 'range': 'double', 'aliases': ['plant adj ash free dry mass'], 'mappings': []}, 'plantAshMassBoatMass': {'slot_uri': 'neon:plantAshMassBoatMass', 'description': 'Combusted mass of the sample and weigh boat for the whole plant from which the epiphyton samples are scraped', 'range': 'double', 'aliases': ['plant ash mass boat mass'], 'mappings': []}, 'plantBoatID': {'slot_uri': 'neon:plantBoatID', 'description': 'Identifier for the weigh boat for the whole plant from which the epiphyton samples are scraped', 'range': 'string', 'aliases': ['plant boat i d'], 'mappings': []}, 'plantBoatMass': {'slot_uri': 'neon:plantBoatMass', 'description': 'Mass of the weigh boat for the whole plant from which the epiphyton samples are scraped', 'range': 'double', 'aliases': ['plant boat mass'], 'mappings': []}, 'plantDryMassBoatMass': {'slot_uri': 'neon:plantDryMassBoatMass', 'description': 'Oven-dried mass of the sample and weigh boat for the whole plant from which the epiphyton samples are scraped', 'range': 'double', 'aliases': ['plant dry mass boat mass'], 'mappings': []}, 'pHFlag': {'slot_uri': 'neon:pHFlag', 'description': 'A text flag for pH measurements', 'range': 'string', 'aliases': ['p h flag'], 'mappings': []}, 'precipConductivityFlag': {'slot_uri': 'neon:precipConductivityFlag', 'description': 'A text flag for conductivity measurements', 'range': 'string', 'aliases': ['precip conductivity flag'], 'mappings': []}, 'chemFunnelCode': {'slot_uri': 'neon:chemFunnelCode', 'description': 'The CAL/NADP barcode on the chemistry sample funnel', 'range': 'string', 'aliases': ['chem funnel code'], 'mappings': []}, 'chemTubeCode': {'slot_uri': 'neon:chemTubeCode', 'description': 'The CAL/NADP barcode on the chemistry sample thistle tube', 'range': 'string', 'aliases': ['chem tube code'], 'mappings': []}, 'extChemBottleCode': {'slot_uri': 'neon:extChemBottleCode', 'description': 'The CAL/NADP barcode on the chemistry sample bottle; not the NEON sample barcode', 'range': 'string', 'aliases': ['ext chem bottle code'], 'mappings': []}, 'extIsoBottleCode': {'slot_uri': 'neon:extIsoBottleCode', 'description': 'The CAL/NADP barcode on the isotope sample bottle; not the NEON sample barcode', 'range': 'string', 'aliases': ['ext iso bottle code'], 'mappings': []}, 'isoFunnelCode': {'slot_uri': 'neon:isoFunnelCode', 'description': 'The CAL/NADP barcode on the isotope sample funnel', 'range': 'string', 'aliases': ['iso funnel code'], 'mappings': []}, 'isoTubeCode': {'slot_uri': 'neon:isoTubeCode', 'description': 'The CAL/NADP barcode on the isotope sample thistle tube', 'range': 'string', 'aliases': ['iso tube code'], 'mappings': []}, 'shippingCaseCode': {'slot_uri': 'neon:shippingCaseCode', 'description': 'The CAL/NADP barcode on the glassware shipping case being returned to the lab with sample', 'range': 'string', 'aliases': ['shipping case code'], 'mappings': []}, 'inLWFinalQFSciRvw': {'slot_uri': 'neon:inLWFinalQFSciRvw', 'description': 'Incoming longwave radiation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['in l w final q f sci rvw'], 'mappings': []}, 'inSWFinalQFSciRvw': {'slot_uri': 'neon:inSWFinalQFSciRvw', 'description': 'Incoming shortwave radiation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['in s w final q f sci rvw'], 'mappings': []}, 'outLWFinalQFSciRvw': {'slot_uri': 'neon:outLWFinalQFSciRvw', 'description': 'Outgoing longwave radiation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['out l w final q f sci rvw'], 'mappings': []}, 'outSWFinalQFSciRvw': {'slot_uri': 'neon:outSWFinalQFSciRvw', 'description': 'Outgoing shortwave radiation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['out s w final q f sci rvw'], 'mappings': []}, 'aForkMaxDiameter': {'slot_uri': 'neon:aForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the first coarse downed wood fork; a', 'range': 'double', 'aliases': ['a fork max diameter'], 'mappings': []}, 'aForkMinorDiameter': {'slot_uri': 'neon:aForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the first eliptical fork; a', 'range': 'double', 'aliases': ['a fork minor diameter'], 'mappings': []}, 'bForkMaxDiameter': {'slot_uri': 'neon:bForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the second coarse downed wood fork; b', 'range': 'double', 'aliases': ['b fork max diameter'], 'mappings': []}, 'bForkMinorDiameter': {'slot_uri': 'neon:bForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the second eliptical fork; b', 'range': 'double', 'aliases': ['b fork minor diameter'], 'mappings': []}, 'cForkMaxDiameter': {'slot_uri': 'neon:cForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the third coarse downed wood fork; c', 'range': 'double', 'aliases': ['c fork max diameter'], 'mappings': []}, 'cForkMinorDiameter': {'slot_uri': 'neon:cForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the third eliptical fork; c', 'range': 'double', 'aliases': ['c fork minor diameter'], 'mappings': []}, 'dForkMaxDiameter': {'slot_uri': 'neon:dForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the fourth coarse downed wood fork; d', 'range': 'double', 'aliases': ['d fork max diameter'], 'mappings': []}, 'dForkMinorDiameter': {'slot_uri': 'neon:dForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the fourth eliptical fork; d', 'range': 'double', 'aliases': ['d fork minor diameter'], 'mappings': []}, 'eForkMaxDiameter': {'slot_uri': 'neon:eForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the fifth coarse downed wood fork; e', 'range': 'double', 'aliases': ['e fork max diameter'], 'mappings': []}, 'eForkMinorDiameter': {'slot_uri': 'neon:eForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the fifth eliptical fork; e', 'range': 'double', 'aliases': ['e fork minor diameter'], 'mappings': []}, 'fForkMaxDiameter': {'slot_uri': 'neon:fForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the sixth coarse downed wood fork; f', 'range': 'double', 'aliases': ['f fork max diameter'], 'mappings': []}, 'fForkMinorDiameter': {'slot_uri': 'neon:fForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the sixth eliptical fork; f', 'range': 'double', 'aliases': ['f fork minor diameter'], 'mappings': []}, 'gForkMaxDiameter': {'slot_uri': 'neon:gForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the seventh coarse downed wood fork; g', 'range': 'double', 'aliases': ['g fork max diameter'], 'mappings': []}, 'gForkMinorDiameter': {'slot_uri': 'neon:gForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the seventh eliptical fork; g', 'range': 'double', 'aliases': ['g fork minor diameter'], 'mappings': []}, 'hForkMaxDiameter': {'slot_uri': 'neon:hForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the eighth coarse downed wood fork; h', 'range': 'double', 'aliases': ['h fork max diameter'], 'mappings': []}, 'hForkMinorDiameter': {'slot_uri': 'neon:hForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the eighth eliptical fork; h', 'range': 'double', 'aliases': ['h fork minor diameter'], 'mappings': []}, 'iForkMaxDiameter': {'slot_uri': 'neon:iForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the ninth coarse downed wood fork; i', 'range': 'double', 'aliases': ['i fork max diameter'], 'mappings': []}, 'iForkMinorDiameter': {'slot_uri': 'neon:iForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the ninth eliptical fork; i', 'range': 'double', 'aliases': ['i fork minor diameter'], 'mappings': []}, 'jForkMaxDiameter': {'slot_uri': 'neon:jForkMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of the tenth coarse downed wood fork; j', 'range': 'double', 'aliases': ['j fork max diameter'], 'mappings': []}, 'jForkMinorDiameter': {'slot_uri': 'neon:jForkMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of the tenth eliptical fork; j', 'range': 'double', 'aliases': ['j fork minor diameter'], 'mappings': []}, 'branchBarkCover': {'slot_uri': 'neon:branchBarkCover', 'description': 'Visually estimated cover class of bark remaining on branches attached to a coarse downed wood particle', 'range': 'string', 'aliases': ['branch bark cover'], 'mappings': []}, 'branchesPresent': {'slot_uri': 'neon:branchesPresent', 'description': 'Categorical indicator of branches > 1 cm diameter present on a coarse downed wood particle', 'range': 'string', 'aliases': ['branches present'], 'mappings': []}, 'decayClass': {'slot_uri': 'neon:decayClass', 'description': 'The categorical decay class assigned to a sampled log', 'range': 'string', 'aliases': ['decay class'], 'mappings': []}, 'equivalentLogDiameter': {'slot_uri': 'neon:equivalentLogDiameter', 'description': 'The calculated equivalent diameter for a coarse downed wood particle', 'range': 'double', 'aliases': ['equivalent log diameter'], 'mappings': []}, 'leavesPresent': {'slot_uri': 'neon:leavesPresent', 'description': 'Categorical indicator of leaf/needle presence on a coarse downed wood particle', 'range': 'string', 'aliases': ['leaves present'], 'mappings': []}, 'lidsAzimuth': {'slot_uri': 'neon:lidsAzimuth', 'description': 'Azimuth, relative to true north, of the LIDS transect, measured from the plot centroid', 'range': 'string', 'aliases': ['lids azimuth'], 'mappings': []}, 'logBarkCover': {'slot_uri': 'neon:logBarkCover', 'description': 'Visually estimated cover class of bark remaining on the bole of a coarse downed wood particle', 'range': 'string', 'aliases': ['log bark cover'], 'mappings': []}, 'logDistance': {'slot_uri': 'neon:logDistance', 'description': 'The distance, to the nearest 0.1 meters, from the log to a reference point with known position (typically the transect origin)', 'range': 'double', 'aliases': ['log distance'], 'mappings': []}, 'logHandBreakable': {'slot_uri': 'neon:logHandBreakable', 'description': 'Categorical indicator that the outer-most wood from a coarse downed wood particle can be broken apart by hand', 'range': 'string', 'aliases': ['log hand breakable'], 'mappings': []}, 'logHoldShape': {'slot_uri': 'neon:logHoldShape', 'description': 'Categorical indicator that a piece of coarse downed wood particle holds its original shape', 'range': 'string', 'aliases': ['log hold shape'], 'mappings': []}, 'logID': {'slot_uri': 'neon:logID', 'description': 'Identifier for each log sampled', 'range': 'string', 'aliases': ['log i d'], 'mappings': []}, 'logLength': {'slot_uri': 'neon:logLength', 'description': 'Length of the log central axis; to the nearest 0.1 m', 'range': 'double', 'aliases': ['log length'], 'mappings': []}, 'logMaxDiameter': {'slot_uri': 'neon:logMaxDiameter', 'description': 'Maximum diameter, to the nearest 0.5 cm, of a coarse downed wood particle; corresponding to the major axis of an eliptical log', 'range': 'double', 'aliases': ['log max diameter'], 'mappings': []}, 'logMinorDiameter': {'slot_uri': 'neon:logMinorDiameter', 'description': 'Diameter, to the nearest 0.5 cm, of the minor axis of an eliptical log', 'range': 'double', 'aliases': ['log minor diameter'], 'mappings': []}, 'tagStatus': {'slot_uri': 'neon:tagStatus', 'description': 'Description of state or condition of the physical tag', 'range': 'string', 'aliases': ['tag status'], 'mappings': []}, 'twigsPresent': {'slot_uri': 'neon:twigsPresent', 'description': 'Categorical indicator of twigs < 1 cm diameter present on a coarse downed wood particle', 'range': 'string', 'aliases': ['twigs present'], 'mappings': []}, 'volumeFactor': {'slot_uri': 'neon:volumeFactor', 'description': 'A factor analogous to plot size that influences the length of the transects along which coarse downed wood particles are tallied; for a given coarse downed wood particle diameter, smaller F-values mean longer distances are searched for that diameter, and larger F-values mean shorter distances are searched for that diameter', 'range': 'string', 'aliases': ['volume factor'], 'mappings': []}, 'PARValidCalQAQCRpt': {'slot_uri': 'neon:PARValidCalQAQCRpt', 'description': 'Photosynthetically active radiation QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['p a r valid cal q a q c rpt'], 'mappings': []}, 'PARValidCalPassQM': {'slot_uri': 'neon:PARValidCalPassQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r valid cal pass q m'], 'mappings': []}, 'PARValidCalNAQM': {'slot_uri': 'neon:PARValidCalNAQM', 'description': 'Photosynthetically active radiation quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r valid cal n a q m'], 'mappings': []}, 'PARValidCalFailQM': {'slot_uri': 'neon:PARValidCalFailQM', 'description': 'Photosynthetically active radiation quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['p a r valid cal fail q m'], 'mappings': []}, 'outPARValidCalQAQCRpt': {'slot_uri': 'neon:outPARValidCalQAQCRpt', 'description': 'Outgoing PAR QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out p a r valid cal q a q c rpt'], 'mappings': []}, 'outPARValidCalPassQM': {'slot_uri': 'neon:outPARValidCalPassQM', 'description': 'Outgoing PAR quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r valid cal pass q m'], 'mappings': []}, 'outPARValidCalNAQM': {'slot_uri': 'neon:outPARValidCalNAQM', 'description': 'Outgoing PAR quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r valid cal n a q m'], 'mappings': []}, 'outPARValidCalFailQM': {'slot_uri': 'neon:outPARValidCalFailQM', 'description': 'Outgoing PAR quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['out p a r valid cal fail q m'], 'mappings': []}, 'finalQFSciRvw': {'slot_uri': 'neon:finalQFSciRvw', 'description': 'Quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['final q f sci rvw'], 'mappings': []}, 'outPARFinalQFSciRvw': {'slot_uri': 'neon:outPARFinalQFSciRvw', 'description': 'Outgoing PAR quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['out p a r final q f sci rvw'], 'mappings': []}, 'PARFinalQFSciRvw': {'slot_uri': 'neon:PARFinalQFSciRvw', 'description': 'Photosynthetically active radiation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p a r final q f sci rvw'], 'mappings': []}, 'outuPARFinalQFSciRvw': {'slot_uri': 'neon:outuPARFinalQFSciRvw', 'description': 'Outgoing PAR below water surface quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['outu p a r final q f sci rvw'], 'mappings': []}, 'uPARFinalQFSciRvw': {'slot_uri': 'neon:uPARFinalQFSciRvw', 'description': 'PAR below water surface quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['u p a r final q f sci rvw'], 'mappings': []}, 'inLWValidCalQAQCRpt': {'slot_uri': 'neon:inLWValidCalQAQCRpt', 'description': 'Incoming longwave radiation QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in l w valid cal q a q c rpt'], 'mappings': []}, 'inSWValidCalQAQCRpt': {'slot_uri': 'neon:inSWValidCalQAQCRpt', 'description': 'Incoming shortwave radiation QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['in s w valid cal q a q c rpt'], 'mappings': []}, 'outLWValidCalQAQCRpt': {'slot_uri': 'neon:outLWValidCalQAQCRpt', 'description': 'Outgoing longwave radiation QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out l w valid cal q a q c rpt'], 'mappings': []}, 'outSWValidCalQAQCRpt': {'slot_uri': 'neon:outSWValidCalQAQCRpt', 'description': 'Outgoing shortwave radiation QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['out s w valid cal q a q c rpt'], 'mappings': []}, 'inLWValidCalFailQM': {'slot_uri': 'neon:inLWValidCalFailQM', 'description': 'Incoming longwave radiation quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w valid cal fail q m'], 'mappings': []}, 'inLWValidCalNAQM': {'slot_uri': 'neon:inLWValidCalNAQM', 'description': 'Incoming longwave radiation quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w valid cal n a q m'], 'mappings': []}, 'inLWValidCalPassQM': {'slot_uri': 'neon:inLWValidCalPassQM', 'description': 'Incoming longwave radiation quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['in l w valid cal pass q m'], 'mappings': []}, 'inSWValidCalFailQM': {'slot_uri': 'neon:inSWValidCalFailQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w valid cal fail q m'], 'mappings': []}, 'inSWValidCalNAQM': {'slot_uri': 'neon:inSWValidCalNAQM', 'description': 'Incoming shortwave radiation quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w valid cal n a q m'], 'mappings': []}, 'inSWValidCalPassQM': {'slot_uri': 'neon:inSWValidCalPassQM', 'description': 'Incoming shortwave radiation quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['in s w valid cal pass q m'], 'mappings': []}, 'outLWValidCalFailQM': {'slot_uri': 'neon:outLWValidCalFailQM', 'description': 'Outgoing longwave radiation quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w valid cal fail q m'], 'mappings': []}, 'outLWValidCalNAQM': {'slot_uri': 'neon:outLWValidCalNAQM', 'description': 'Outgoing longwave radiation quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w valid cal n a q m'], 'mappings': []}, 'outLWValidCalPassQM': {'slot_uri': 'neon:outLWValidCalPassQM', 'description': 'Outgoing longwave radiation quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['out l w valid cal pass q m'], 'mappings': []}, 'outSWValidCalFailQM': {'slot_uri': 'neon:outSWValidCalFailQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w valid cal fail q m'], 'mappings': []}, 'outSWValidCalNAQM': {'slot_uri': 'neon:outSWValidCalNAQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w valid cal n a q m'], 'mappings': []}, 'outSWValidCalPassQM': {'slot_uri': 'neon:outSWValidCalPassQM', 'description': 'Outgoing shortwave radiation quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['out s w valid cal pass q m'], 'mappings': []}, 'difRadValidCalFailQM': {'slot_uri': 'neon:difRadValidCalFailQM', 'description': 'Diffuse radiation quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad valid cal fail q m'], 'mappings': []}, 'difRadValidCalNAQM': {'slot_uri': 'neon:difRadValidCalNAQM', 'description': 'Diffuse radiation quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad valid cal n a q m'], 'mappings': []}, 'difRadValidCalPassQM': {'slot_uri': 'neon:difRadValidCalPassQM', 'description': 'Diffuse radiation quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['dif rad valid cal pass q m'], 'mappings': []}, 'difRadValidCalQAQCRpt': {'slot_uri': 'neon:difRadValidCalQAQCRpt', 'description': 'Diffuse radiation QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dif rad valid cal q a q c rpt'], 'mappings': []}, 'dirRadValidCalFailQM': {'slot_uri': 'neon:dirRadValidCalFailQM', 'description': 'Direct radiation quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad valid cal fail q m'], 'mappings': []}, 'dirRadValidCalNAQM': {'slot_uri': 'neon:dirRadValidCalNAQM', 'description': 'Direct radiation quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad valid cal n a q m'], 'mappings': []}, 'dirRadValidCalPassQM': {'slot_uri': 'neon:dirRadValidCalPassQM', 'description': 'Direct radiation quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['dir rad valid cal pass q m'], 'mappings': []}, 'dirRadValidCalQAQCRpt': {'slot_uri': 'neon:dirRadValidCalQAQCRpt', 'description': 'Direct radiation QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dir rad valid cal q a q c rpt'], 'mappings': []}, 'gloRadValidCalFailQM': {'slot_uri': 'neon:gloRadValidCalFailQM', 'description': 'Global radiation quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad valid cal fail q m'], 'mappings': []}, 'gloRadValidCalNAQM': {'slot_uri': 'neon:gloRadValidCalNAQM', 'description': 'Global radiation quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad valid cal n a q m'], 'mappings': []}, 'gloRadValidCalPassQM': {'slot_uri': 'neon:gloRadValidCalPassQM', 'description': 'Global radiation quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['glo rad valid cal pass q m'], 'mappings': []}, 'gloRadValidCalQAQCRpt': {'slot_uri': 'neon:gloRadValidCalQAQCRpt', 'description': 'Global radiation QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['glo rad valid cal q a q c rpt'], 'mappings': []}, 'sensorDepthValidCalQF': {'slot_uri': 'neon:sensorDepthValidCalQF', 'description': 'Quality flag for the valid calibration check of sensor depth detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['sensor depth valid cal q f'], 'mappings': []}, 'specificConductanceValidCalQF': {'slot_uri': 'neon:specificConductanceValidCalQF', 'description': 'Quality flag for the valid calibration check of specific conductance detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['specific conductance valid cal q f'], 'mappings': []}, 'staPresValidCalFailQM': {'slot_uri': 'neon:staPresValidCalFailQM', 'description': 'Station pressure quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres valid cal fail q m'], 'mappings': []}, 'staPresValidCalNAQM': {'slot_uri': 'neon:staPresValidCalNAQM', 'description': 'Station pressure quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres valid cal n a q m'], 'mappings': []}, 'staPresValidCalPassQM': {'slot_uri': 'neon:staPresValidCalPassQM', 'description': 'Station pressure quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['sta pres valid cal pass q m'], 'mappings': []}, 'staPresValidCalQAQCRpt': {'slot_uri': 'neon:staPresValidCalQAQCRpt', 'description': 'Station pressure QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['sta pres valid cal q a q c rpt'], 'mappings': []}, 'validCalQF': {'slot_uri': 'neon:validCalQF', 'description': 'Quality flag for the valid calibration check detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['valid cal q f'], 'mappings': []}, 'windDirValidCalFailQM': {'slot_uri': 'neon:windDirValidCalFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir valid cal fail q m'], 'mappings': []}, 'windDirValidCalNAQM': {'slot_uri': 'neon:windDirValidCalNAQM', 'description': 'Wind direction quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir valid cal n a q m'], 'mappings': []}, 'windDirValidCalPassQM': {'slot_uri': 'neon:windDirValidCalPassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir valid cal pass q m'], 'mappings': []}, 'windDirValidCalQAQCRpt': {'slot_uri': 'neon:windDirValidCalQAQCRpt', 'description': 'Wind direction QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir valid cal q a q c rpt'], 'mappings': []}, 'windSpeedValidCalFailQM': {'slot_uri': 'neon:windSpeedValidCalFailQM', 'description': 'Wind speed quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed valid cal fail q m'], 'mappings': []}, 'windSpeedValidCalNAQM': {'slot_uri': 'neon:windSpeedValidCalNAQM', 'description': 'Wind speed quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed valid cal n a q m'], 'mappings': []}, 'windSpeedValidCalPassQM': {'slot_uri': 'neon:windSpeedValidCalPassQM', 'description': 'Wind speed quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind speed valid cal pass q m'], 'mappings': []}, 'windSpeedValidCalQAQCRpt': {'slot_uri': 'neon:windSpeedValidCalQAQCRpt', 'description': 'Wind speed QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind speed valid cal q a q c rpt'], 'mappings': []}, 'buoyCorPresFinalQFSciRvw': {'slot_uri': 'neon:buoyCorPresFinalQFSciRvw', 'description': 'Buoy pressure corrected to sea level quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['buoy cor pres final q f sci rvw'], 'mappings': []}, 'buoyStaPresFinalQFSciRvw': {'slot_uri': 'neon:buoyStaPresFinalQFSciRvw', 'description': 'Buoy station pressure quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['buoy sta pres final q f sci rvw'], 'mappings': []}, 'corPresFinalQFSciRvw': {'slot_uri': 'neon:corPresFinalQFSciRvw', 'description': 'Pressure corrected to sea level quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['cor pres final q f sci rvw'], 'mappings': []}, 'difRadFinalQFSciRvw': {'slot_uri': 'neon:difRadFinalQFSciRvw', 'description': 'Diffuse radiation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['dif rad final q f sci rvw'], 'mappings': []}, 'dirRadFinalQFSciRvw': {'slot_uri': 'neon:dirRadFinalQFSciRvw', 'description': 'Direct radiation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['dir rad final q f sci rvw'], 'mappings': []}, 'gloRadFinalQFSciRvw': {'slot_uri': 'neon:gloRadFinalQFSciRvw', 'description': 'Global radiation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['glo rad final q f sci rvw'], 'mappings': []}, 'staPresFinalQFSciRvw': {'slot_uri': 'neon:staPresFinalQFSciRvw', 'description': 'Station pressure quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['sta pres final q f sci rvw'], 'mappings': []}, 'windDirFinalQFSciRvw': {'slot_uri': 'neon:windDirFinalQFSciRvw', 'description': 'Wind direction quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['wind dir final q f sci rvw'], 'mappings': []}, 'windSpeedFinalQFSciRvw': {'slot_uri': 'neon:windSpeedFinalQFSciRvw', 'description': 'Wind speed quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['wind speed final q f sci rvw'], 'mappings': []}, 'cameraOrientation': {'slot_uri': 'neon:cameraOrientation', 'description': 'Direction camera was facing when image was acquired', 'range': 'string', 'aliases': ['camera orientation'], 'mappings': []}, 'cameraPosition': {'slot_uri': 'neon:cameraPosition', 'description': 'Height camera was held when image was acquired', 'range': 'string', 'aliases': ['camera position'], 'mappings': []}, 'imageFileName': {'slot_uri': 'neon:imageFileName', 'description': 'Identifier for the image file assigned automatically by the camera', 'range': 'string', 'aliases': ['image file name'], 'mappings': []}, 'imageFileNumber': {'slot_uri': 'neon:imageFileNumber', 'description': 'Numeric identifier for the image file assigned automatically by the camera', 'range': 'string', 'aliases': ['image file number'], 'mappings': []}, 'downloadFileName': {'slot_uri': 'neon:downloadFileName', 'description': 'The name of the user-downloaded file that is linked to the record', 'range': 'string', 'aliases': ['download file name'], 'mappings': []}, 'fulcrumFilePath': {'slot_uri': 'neon:fulcrumFilePath', 'description': 'The field-collected data required to create the external image file location', 'range': 'string', 'aliases': ['fulcrum file path'], 'mappings': []}, 'imageFilePath': {'slot_uri': 'neon:imageFilePath', 'description': 'The system path identifying the external image file location', 'range': 'string', 'aliases': ['image file path'], 'mappings': []}, 'imageFileUrl': {'slot_uri': 'neon:imageFileUrl', 'description': 'The URL identifying the external image file location', 'range': 'string', 'aliases': ['image file url'], 'mappings': []}, 'imageType': {'slot_uri': 'neon:imageType', 'description': 'Subject matter contained within image', 'range': 'string', 'aliases': ['image type'], 'mappings': []}, 'overstoryHeight': {'slot_uri': 'neon:overstoryHeight', 'description': 'Average height of the overstory vegetation in a plot, assessed by visual survey to guide LAI photo collection', 'range': 'double', 'aliases': ['overstory height'], 'mappings': []}, 'understoryHeight': {'slot_uri': 'neon:understoryHeight', 'description': 'Average height of the understory vegetation in a plot, assessed by visual survey to guide LAI photo collection', 'range': 'double', 'aliases': ['understory height'], 'mappings': []}, 'yearBoutBegan': {'slot_uri': 'neon:yearBoutBegan', 'description': 'The calendar year that the bout began', 'range': 'integer', 'aliases': ['year bout began'], 'mappings': []}, 'PM15finalQFSciRvw': {'slot_uri': 'neon:PM15finalQFSciRvw', 'description': 'Particulate matter 15 quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m15final q f sci rvw'], 'mappings': []}, 'PM10finalQFSciRvw': {'slot_uri': 'neon:PM10finalQFSciRvw', 'description': 'Particulate matter 10 quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m10final q f sci rvw'], 'mappings': []}, 'dewTempFinalQFSciRvw': {'slot_uri': 'neon:dewTempFinalQFSciRvw', 'description': 'Dew or frost point temperature quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['dew temp final q f sci rvw'], 'mappings': []}, 'PM10sub50RHfinalQFSciRvw': {'slot_uri': 'neon:PM10sub50RHfinalQFSciRvw', 'description': 'PM10 at RH <50% quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m10sub50 r hfinal q f sci rvw'], 'mappings': []}, 'PM15sub50RHfinalQFSciRvw': {'slot_uri': 'neon:PM15sub50RHfinalQFSciRvw', 'description': 'PM15 at RH <50% quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m15sub50 r hfinal q f sci rvw'], 'mappings': []}, 'PM1finalQFSciRvw': {'slot_uri': 'neon:PM1finalQFSciRvw', 'description': 'Particulate matter 1 quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m1final q f sci rvw'], 'mappings': []}, 'PM1sub50RHfinalQFSciRvw': {'slot_uri': 'neon:PM1sub50RHfinalQFSciRvw', 'description': 'PM1 at RH <50% quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m1sub50 r hfinal q f sci rvw'], 'mappings': []}, 'PM2.5finalQFSciRvw': {'slot_uri': 'neon:PM2.5finalQFSciRvw', 'description': 'Particulate matter 2.5 quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m2.5final q f sci rvw'], 'mappings': []}, 'PM2.5sub50RHfinalQFSciRvw': {'slot_uri': 'neon:PM2.5sub50RHfinalQFSciRvw', 'description': 'PM2.5 at RH <50% quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m2.5sub50 r hfinal q f sci rvw'], 'mappings': []}, 'PM4finalQFSciRvw': {'slot_uri': 'neon:PM4finalQFSciRvw', 'description': 'Particulate matter 4 quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m4final q f sci rvw'], 'mappings': []}, 'PM4sub50RHfinalQFSciRvw': {'slot_uri': 'neon:PM4sub50RHfinalQFSciRvw', 'description': 'PM4 at RH <50% quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p m4sub50 r hfinal q f sci rvw'], 'mappings': []}, 'RHFinalQFSciRvw': {'slot_uri': 'neon:RHFinalQFSciRvw', 'description': 'Relative humidity quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['r h final q f sci rvw'], 'mappings': []}, 'tempRHFinalQFSciRvw': {'slot_uri': 'neon:tempRHFinalQFSciRvw', 'description': 'Temperature measures by RH sensor quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['temp r h final q f sci rvw'], 'mappings': []}, 'dewTempValidCalFailQM': {'slot_uri': 'neon:dewTempValidCalFailQM', 'description': 'Dew or frost point temperature quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp valid cal fail q m'], 'mappings': []}, 'dewTempValidCalNAQM': {'slot_uri': 'neon:dewTempValidCalNAQM', 'description': 'Dew or frost point temperature quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp valid cal n a q m'], 'mappings': []}, 'dewTempValidCalPassQM': {'slot_uri': 'neon:dewTempValidCalPassQM', 'description': 'Dew or frost point temperature quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['dew temp valid cal pass q m'], 'mappings': []}, 'dewTempValidCalQAQCRpt': {'slot_uri': 'neon:dewTempValidCalQAQCRpt', 'description': 'Dew or frost point temperature QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['dew temp valid cal q a q c rpt'], 'mappings': []}, 'bareGround': {'slot_uri': 'neon:bareGround', 'description': 'Percent of the sampling area from which sample was collected that is bare ground', 'range': 'string', 'aliases': ['bare ground'], 'mappings': []}, 'coreDiameter': {'slot_uri': 'neon:coreDiameter', 'description': 'Diameter of the core sample', 'range': 'double', 'aliases': ['core diameter'], 'mappings': []}, 'coreID': {'slot_uri': 'neon:coreID', 'description': 'Identifier for the soil sample within the clipID', 'range': 'string', 'aliases': ['core i d'], 'mappings': []}, 'dilutionSampleCode': {'slot_uri': 'neon:dilutionSampleCode', 'description': 'Barcode of a dilution sample', 'range': 'string', 'aliases': ['dilution sample code'], 'mappings': []}, 'dilutionSampleFate': {'slot_uri': 'neon:dilutionSampleFate', 'description': 'Fate of a dilution sample', 'range': 'string', 'aliases': ['dilution sample fate'], 'mappings': []}, 'dilutionSampleID': {'slot_uri': 'neon:dilutionSampleID', 'description': 'Identifier for a dilution sample', 'range': 'string', 'aliases': ['dilution sample i d'], 'mappings': []}, 'dilutionSubsampleCode': {'slot_uri': 'neon:dilutionSubsampleCode', 'description': 'Barcode of a dilution subsample', 'range': 'string', 'aliases': ['dilution subsample code'], 'mappings': []}, 'dilutionSubsampleFate': {'slot_uri': 'neon:dilutionSubsampleFate', 'description': 'Fate of a dilution subsample', 'range': 'string', 'aliases': ['dilution subsample fate'], 'mappings': []}, 'dilutionSubsampleID': {'slot_uri': 'neon:dilutionSubsampleID', 'description': 'Identifier for a dilution subsample', 'range': 'string', 'aliases': ['dilution subsample i d'], 'mappings': []}, 'dilutionSubsampleVolume': {'slot_uri': 'neon:dilutionSubsampleVolume', 'description': 'Volume of subsample sorted for root fragments and organic material', 'range': 'double', 'aliases': ['dilution subsample volume'], 'mappings': []}, 'monolithLength': {'slot_uri': 'neon:monolithLength', 'description': 'Length of the monolith sample top surface', 'range': 'double', 'aliases': ['monolith length'], 'mappings': []}, 'monolithWidth': {'slot_uri': 'neon:monolithWidth', 'description': 'Width of the monolith sample top surface', 'range': 'double', 'aliases': ['monolith width'], 'mappings': []}, 'pooledSampleMass': {'slot_uri': 'neon:pooledSampleMass', 'description': 'Mass of pooled sample', 'range': 'double', 'aliases': ['pooled sample mass'], 'mappings': []}, 'poolSampleCode': {'slot_uri': 'neon:poolSampleCode', 'description': 'Barcode of a pooled sample', 'range': 'string', 'aliases': ['pool sample code'], 'mappings': []}, 'poolSampleFate': {'slot_uri': 'neon:poolSampleFate', 'description': 'Fate of a pooled sample', 'range': 'string', 'aliases': ['pool sample fate'], 'mappings': []}, 'poolSampleID': {'slot_uri': 'neon:poolSampleID', 'description': 'Identifier for a pooled sample', 'range': 'string', 'aliases': ['pool sample i d'], 'mappings': []}, 'rootSampleArea': {'slot_uri': 'neon:rootSampleArea', 'description': 'Area of soil sample, calculated from coreDiameter or monolith dimensions', 'range': 'double', 'aliases': ['root sample area'], 'mappings': []}, 'rootSampleDepth': {'slot_uri': 'neon:rootSampleDepth', 'description': 'Depth to which soil sample was collected', 'range': 'double', 'aliases': ['root sample depth'], 'mappings': []}, 'rootSamplingMethod': {'slot_uri': 'neon:rootSamplingMethod', 'description': 'Method by which soil sample was collected', 'range': 'string', 'aliases': ['root sampling method'], 'mappings': []}, 'rootSamplingPossible': {'slot_uri': 'neon:rootSamplingPossible', 'description': 'Indicator of whether collection of a soil sample was possible', 'range': 'string', 'aliases': ['root sampling possible'], 'mappings': []}, 'somDryMass': {'slot_uri': 'neon:somDryMass', 'description': 'Oven-dried mass of soil organic material sample or subsample', 'range': 'double', 'aliases': ['som dry mass'], 'mappings': []}, 'subsampleCodeList': {'slot_uri': 'neon:subsampleCodeList', 'description': 'List of subsample barcodes', 'range': 'string', 'aliases': ['subsample code list'], 'mappings': []}, 'subsampleFateList': {'slot_uri': 'neon:subsampleFateList', 'description': 'List of subsample fates', 'range': 'string', 'aliases': ['subsample fate list'], 'mappings': []}, 'wst10cmDist': {'slot_uri': 'neon:wst10cmDist', 'description': 'Distance to nearest woody stem >= 10 cm diameter at breast height', 'range': 'double', 'aliases': ['wst10cm dist'], 'mappings': []}, 'wst1cmDist': {'slot_uri': 'neon:wst1cmDist', 'description': 'Distance to nearest woody stem with diameter at breast height < 10 cm and >= 1 cm', 'range': 'double', 'aliases': ['wst1cm dist'], 'mappings': []}, 'VSICFinalQFSciRvw': {'slot_uri': 'neon:VSICFinalQFSciRvw', 'description': 'Volumetric soil ion content quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['v s i c final q f sci rvw'], 'mappings': []}, 'VSICValidCalFailQM': {'slot_uri': 'neon:VSICValidCalFailQM', 'description': 'Volumetric soil ion content quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c valid cal fail q m'], 'mappings': []}, 'VSICValidCalNAQM': {'slot_uri': 'neon:VSICValidCalNAQM', 'description': 'Volumetric soil ion content quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c valid cal n a q m'], 'mappings': []}, 'VSICValidCalPassQM': {'slot_uri': 'neon:VSICValidCalPassQM', 'description': 'Volumetric soil ion content quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s i c valid cal pass q m'], 'mappings': []}, 'VSICValidCalQAQCRpt': {'slot_uri': 'neon:VSICValidCalQAQCRpt', 'description': 'Volumetric soil ion content QAQC report for the valid calibration check, which indicates whether the normalization cal is within the valid date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run)) and NEON.DOC.000007', 'range': 'string', 'aliases': ['v s i c valid cal q a q c rpt'], 'mappings': []}, 'VSWCFinalQFSciRvw': {'slot_uri': 'neon:VSWCFinalQFSciRvw', 'description': 'Volumetric soil water content quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['v s w c final q f sci rvw'], 'mappings': []}, 'VSWCValidCalFailQM': {'slot_uri': 'neon:VSWCValidCalFailQM', 'description': 'Volumetric soil water content quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c valid cal fail q m'], 'mappings': []}, 'VSWCValidCalNAQM': {'slot_uri': 'neon:VSWCValidCalNAQM', 'description': 'Volumetric soil water content quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c valid cal n a q m'], 'mappings': []}, 'VSWCValidCalPassQM': {'slot_uri': 'neon:VSWCValidCalPassQM', 'description': 'Volumetric soil water content quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['v s w c valid cal pass q m'], 'mappings': []}, 'VSWCValidCalQAQCRpt': {'slot_uri': 'neon:VSWCValidCalQAQCRpt', 'description': 'Volumetric soil water content QAQC report for the valid calibration check, which indicates whether the normalization cal is within the valid date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run)) and NEON.DOC.000007', 'range': 'string', 'aliases': ['v s w c valid cal q a q c rpt'], 'mappings': []}, 'RHValidCalFailQM': {'slot_uri': 'neon:RHValidCalFailQM', 'description': 'Relative humidity quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h valid cal fail q m'], 'mappings': []}, 'RHValidCalNAQM': {'slot_uri': 'neon:RHValidCalNAQM', 'description': 'Relative humidity quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h valid cal n a q m'], 'mappings': []}, 'RHValidCalPassQM': {'slot_uri': 'neon:RHValidCalPassQM', 'description': 'Relative humidity quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['r h valid cal pass q m'], 'mappings': []}, 'RHValidCalQAQCRpt': {'slot_uri': 'neon:RHValidCalQAQCRpt', 'description': 'Relative humidity QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['r h valid cal q a q c rpt'], 'mappings': []}, 'tempRHValidCalFailQM': {'slot_uri': 'neon:tempRHValidCalFailQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h valid cal fail q m'], 'mappings': []}, 'tempRHValidCalNAQM': {'slot_uri': 'neon:tempRHValidCalNAQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h valid cal n a q m'], 'mappings': []}, 'tempRHValidCalPassQM': {'slot_uri': 'neon:tempRHValidCalPassQM', 'description': 'Temperature measures by RH sensor quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['temp r h valid cal pass q m'], 'mappings': []}, 'tempRHValidCalQAQCRpt': {'slot_uri': 'neon:tempRHValidCalQAQCRpt', 'description': 'Temperature measures by RH sensor QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['temp r h valid cal q a q c rpt'], 'mappings': []}, 'sWatElevFinalQFSciRvw': {'slot_uri': 'neon:sWatElevFinalQFSciRvw', 'description': 'Suface water elevation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['s wat elev final q f sci rvw'], 'mappings': []}, 'gWatElevFinalQFSciRvw': {'slot_uri': 'neon:gWatElevFinalQFSciRvw', 'description': 'Groundwater elevation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['g wat elev final q f sci rvw'], 'mappings': []}, 'gWatSCondFinalQFSciRvw': {'slot_uri': 'neon:gWatSCondFinalQFSciRvw', 'description': 'Groundwater specific conductivity quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['g wat s cond final q f sci rvw'], 'mappings': []}, 'gWatTempFinalQFSciRvw': {'slot_uri': 'neon:gWatTempFinalQFSciRvw', 'description': 'Groundwater temperature quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['g wat temp final q f sci rvw'], 'mappings': []}, 'sciRvwQF': {'slot_uri': 'neon:sciRvwQF', 'description': 'Stand-alone quality flag (does not interact with final quality flag) indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['sci rvw q f'], 'mappings': []}, 'tsdWaterTempFinalQFSciRvw': {'slot_uri': 'neon:tsdWaterTempFinalQFSciRvw', 'description': 'Quality flag indicating whether for tsdWaterTemp has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['tsd water temp final q f sci rvw'], 'mappings': []}, 'adjCountPerBottle': {'slot_uri': 'neon:adjCountPerBottle', 'description': 'Count of individuals of the given taxon, multiplied to the volume per bottle to account for lab subsampling', 'range': 'double', 'aliases': ['adj count per bottle'], 'mappings': []}, 'referencePhotoCode': {'slot_uri': 'neon:referencePhotoCode', 'description': 'Barcode of a reference photo', 'range': 'string', 'aliases': ['reference photo code'], 'mappings': []}, 'towsTrapsVolume': {'slot_uri': 'neon:towsTrapsVolume', 'description': 'Sample volume collected for zooplankton', 'range': 'double', 'aliases': ['tows traps volume'], 'mappings': []}, 'zooVolumePerBottle': {'slot_uri': 'neon:zooVolumePerBottle', 'description': 'Volume of zooplankton subsample per bottle', 'range': 'double', 'aliases': ['zoo volume per bottle'], 'mappings': []}, 'agWellOpticalDensity': {'slot_uri': 'neon:agWellOpticalDensity', 'description': 'Antigen well optical density value', 'range': 'double', 'aliases': ['ag well optical density'], 'mappings': []}, 'cAgWellOpticalDensity': {'slot_uri': 'neon:cAgWellOpticalDensity', 'description': 'Control antigen well optical density value', 'range': 'double', 'aliases': ['c ag well optical density'], 'mappings': []}, 'conjugateDilution': {'slot_uri': 'neon:conjugateDilution', 'description': 'Recommended use dilution based off of manufacturer product sheet (rat/peromyscus)', 'range': 'string', 'aliases': ['conjugate dilution'], 'mappings': []}, 'conjugateLot': {'slot_uri': 'neon:conjugateLot', 'description': 'ELISA conjugate lot number (rat/peromyscus)', 'range': 'string', 'aliases': ['conjugate lot'], 'mappings': []}, 'diluentDilution': {'slot_uri': 'neon:diluentDilution', 'description': 'Diluent (skim milk) stock concentration', 'range': 'string', 'aliases': ['diluent dilution'], 'mappings': []}, 'diluentLot': {'slot_uri': 'neon:diluentLot', 'description': 'Sample diluent lot number (skim milk)', 'range': 'string', 'aliases': ['diluent lot'], 'mappings': []}, 'internalLabBarcode': {'slot_uri': 'neon:internalLabBarcode', 'description': 'Barcode of a subsample with internalLabID', 'range': 'string', 'aliases': ['internal lab barcode'], 'mappings': []}, 'internalLabFate': {'slot_uri': 'neon:internalLabFate', 'description': 'Fate of a subsample with internalLabID', 'range': 'string', 'aliases': ['internal lab fate'], 'mappings': []}, 'negAbDilution': {'slot_uri': 'neon:negAbDilution', 'description': 'Negative control antibody dilution', 'range': 'string', 'aliases': ['neg ab dilution'], 'mappings': []}, 'negAbLot': {'slot_uri': 'neon:negAbLot', 'description': 'Negative control antibody lot number', 'range': 'string', 'aliases': ['neg ab lot'], 'mappings': []}, 'netOpticalDensity': {'slot_uri': 'neon:netOpticalDensity', 'description': 'Quantitative comparison of sample against standard curve', 'range': 'double', 'aliases': ['net optical density'], 'mappings': []}, 'plateLot': {'slot_uri': 'neon:plateLot', 'description': 'ELISA plate lot number', 'range': 'string', 'aliases': ['plate lot'], 'mappings': []}, 'posAbDilution': {'slot_uri': 'neon:posAbDilution', 'description': 'Positive control antibody dilution (based on plate production QC)', 'range': 'string', 'aliases': ['pos ab dilution'], 'mappings': []}, 'posAbLot': {'slot_uri': 'neon:posAbLot', 'description': 'Positive control antibody lot number', 'range': 'string', 'aliases': ['pos ab lot'], 'mappings': []}, 'rawTestResult': {'slot_uri': 'neon:rawTestResult', 'description': 'Test result code or value returned from lab', 'range': 'string', 'aliases': ['raw test result'], 'mappings': []}, 'substrateLot': {'slot_uri': 'neon:substrateLot', 'description': 'ELISA substrate lot number', 'range': 'string', 'aliases': ['substrate lot'], 'mappings': []}, 'substrateTime': {'slot_uri': 'neon:substrateTime', 'description': 'How long the substrate has been added to the plate before the plate is analyzed', 'range': 'double', 'aliases': ['substrate time'], 'mappings': []}, 'priPrecipFinalQFSciRvw': {'slot_uri': 'neon:priPrecipFinalQFSciRvw', 'description': 'Primary precipitation quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['pri precip final q f sci rvw'], 'mappings': []}, 'priPrecipValidCalQF': {'slot_uri': 'neon:priPrecipValidCalQF', 'description': 'Primary precipitation quality flag for the valid calibration check detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['pri precip valid cal q f'], 'mappings': []}, 'secPrecipSciRvwQF': {'slot_uri': 'neon:secPrecipSciRvwQF', 'description': 'Secondary precipitation stand-alone quality flag (does not interact with final quality flag) indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['sec precip sci rvw q f'], 'mappings': []}, 'secPrecipValidCalQF': {'slot_uri': 'neon:secPrecipValidCalQF', 'description': 'Secondary precipitation quality flag for the valid calibration check detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['sec precip valid cal q f'], 'mappings': []}, 'TFPrecipSciRvwQF': {'slot_uri': 'neon:TFPrecipSciRvwQF', 'description': 'Throughfall precipitation stand-alone quality flag (does not interact with final quality flag) indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['t f precip sci rvw q f'], 'mappings': []}, 'TFPrecipValidCalQF': {'slot_uri': 'neon:TFPrecipValidCalQF', 'description': 'Throughfall precipitation quality flag for the valid calibration check detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['t f precip valid cal q f'], 'mappings': []}, 'vstTag': {'slot_uri': 'neon:vstTag', 'description': 'Indicator for whether a tagID is associated with vegetation structure measurements', 'range': 'string', 'aliases': ['vst tag'], 'mappings': []}, 'nullFieldValidation': {'slot_uri': 'neon:nullFieldValidation', 'description': 'Synthetic field to verify data are present in minimum required fields', 'range': 'double', 'aliases': ['null field validation'], 'mappings': []}, 'aGroupHeight': {'slot_uri': 'neon:aGroupHeight', 'description': 'Height of tallest 5 stems in group, a', 'range': 'double', 'aliases': ['a group height'], 'mappings': []}, 'bGroupHeight': {'slot_uri': 'neon:bGroupHeight', 'description': 'Height of tallest 5 stems in group, b', 'range': 'double', 'aliases': ['b group height'], 'mappings': []}, 'cGroupHeight': {'slot_uri': 'neon:cGroupHeight', 'description': 'Height of tallest 5 stems in group, c', 'range': 'double', 'aliases': ['c group height'], 'mappings': []}, 'dGroupHeight': {'slot_uri': 'neon:dGroupHeight', 'description': 'Height of tallest 5 stems in group, d', 'range': 'double', 'aliases': ['d group height'], 'mappings': []}, 'eGroupHeight': {'slot_uri': 'neon:eGroupHeight', 'description': 'Height of tallest 5 stems in group, e', 'range': 'double', 'aliases': ['e group height'], 'mappings': []}, 'basalStemDiameter': {'slot_uri': 'neon:basalStemDiameter', 'description': 'Cross-sectional stem diameter at base of stem', 'range': 'double', 'aliases': ['basal stem diameter'], 'mappings': []}, 'basalStemDiameterMsrmntHeight': {'slot_uri': 'neon:basalStemDiameterMsrmntHeight', 'description': 'Height at which basalStemDiameter is measured', 'range': 'double', 'aliases': ['basal stem diameter msrmnt height'], 'mappings': []}, 'baseCrownHeight': {'slot_uri': 'neon:baseCrownHeight', 'description': 'Height above the ground for the lowest portion of the crown', 'range': 'double', 'aliases': ['base crown height'], 'mappings': []}, 'branchCount': {'slot_uri': 'neon:branchCount', 'description': 'Count of branches', 'range': 'string', 'aliases': ['branch count'], 'mappings': []}, 'breakDiameter': {'slot_uri': 'neon:breakDiameter', 'description': 'Cross-sectional diameter at the break point along a broken bole', 'range': 'double', 'aliases': ['break diameter'], 'mappings': []}, 'breakHeight': {'slot_uri': 'neon:breakHeight', 'description': 'Height from the ground to the highest point along a broken bole', 'range': 'double', 'aliases': ['break height'], 'mappings': []}, 'cactiAbsentList': {'slot_uri': 'neon:cactiAbsentList', 'description': 'List of subplots or nested subplots in which cacti are not present', 'range': 'string', 'aliases': ['cacti absent list'], 'mappings': []}, 'cactiPresent': {'slot_uri': 'neon:cactiPresent', 'description': 'Indicator of whether the plot contains cacti', 'range': 'string', 'aliases': ['cacti present'], 'mappings': []}, 'canopyArea': {'slot_uri': 'neon:canopyArea', 'description': 'Area of the group canopy', 'range': 'double', 'aliases': ['canopy area'], 'mappings': []}, 'cfcOnlyTag': {'slot_uri': 'neon:cfcOnlyTag', 'description': 'Indicator for whether a tagID is a associated with canopy foliage sampling only', 'range': 'string', 'aliases': ['cfc only tag'], 'mappings': []}, 'deadPercent': {'slot_uri': 'neon:deadPercent', 'description': 'Percent of a given species, within a group, that is dead', 'range': 'double', 'aliases': ['dead percent'], 'mappings': []}, 'fernsAbsentList': {'slot_uri': 'neon:fernsAbsentList', 'description': 'List of subplots or nested subplots in which ferns are not present', 'range': 'string', 'aliases': ['ferns absent list'], 'mappings': []}, 'fernsPresent': {'slot_uri': 'neon:fernsPresent', 'description': 'Indicator of whether the plot contains ferns', 'range': 'string', 'aliases': ['ferns present'], 'mappings': []}, 'groupID': {'slot_uri': 'neon:groupID', 'description': 'Identifier for a group of individuals being measured', 'range': 'string', 'aliases': ['group i d'], 'mappings': []}, 'leafNumber': {'slot_uri': 'neon:leafNumber', 'description': 'The total number of leaves on an individual plant', 'range': 'string', 'aliases': ['leaf number'], 'mappings': []}, 'lianasAbsentList': {'slot_uri': 'neon:lianasAbsentList', 'description': 'List of subplots or nested subplots in which lianas are not present', 'range': 'string', 'aliases': ['lianas absent list'], 'mappings': []}, 'lianasPresent': {'slot_uri': 'neon:lianasPresent', 'description': 'Indicator of whether the plot contains lianas', 'range': 'string', 'aliases': ['lianas present'], 'mappings': []}, 'livePercent': {'slot_uri': 'neon:livePercent', 'description': 'Percent of a given species, within a group, that is alive', 'range': 'double', 'aliases': ['live percent'], 'mappings': []}, 'maxBaseCrownDiameter': {'slot_uri': 'neon:maxBaseCrownDiameter', 'description': 'Maximum crown diameter, measured at ground level', 'range': 'double', 'aliases': ['max base crown diameter'], 'mappings': []}, 'maxCrownDiameter': {'slot_uri': 'neon:maxCrownDiameter', 'description': 'Maximum crown diameter of the individual or patch', 'range': 'double', 'aliases': ['max crown diameter'], 'mappings': []}, 'meanBasalDiameter': {'slot_uri': 'neon:meanBasalDiameter', 'description': 'Average basal diameter of a group of stems', 'range': 'double', 'aliases': ['mean basal diameter'], 'mappings': []}, 'meanBladeLength': {'slot_uri': 'neon:meanBladeLength', 'description': 'The average length of a typical leaf blade, measured from the top of the petiole to leaf tip', 'range': 'double', 'aliases': ['mean blade length'], 'mappings': []}, 'meanBranchLength': {'slot_uri': 'neon:meanBranchLength', 'description': 'Average length of branches on an individual', 'range': 'double', 'aliases': ['mean branch length'], 'mappings': []}, 'meanHeight': {'slot_uri': 'neon:meanHeight', 'description': 'The mean of multiple height measurements', 'range': 'double', 'aliases': ['mean height'], 'mappings': []}, 'meanLeafLength': {'slot_uri': 'neon:meanLeafLength', 'description': 'The average length of a typical leaf on the individual plant being measured', 'range': 'double', 'aliases': ['mean leaf length'], 'mappings': []}, 'meanPetioleLength': {'slot_uri': 'neon:meanPetioleLength', 'description': 'The average length of a typical leaf or frond petiole, measured from the interstection with the stem to the base of the blade, lamina or first leaftet', 'range': 'double', 'aliases': ['mean petiole length'], 'mappings': []}, 'nestedSubplotAreaLiana': {'slot_uri': 'neon:nestedSubplotAreaLiana', 'description': 'Size of nested plot in which lianas were measured', 'range': 'string', 'aliases': ['nested subplot area liana'], 'mappings': []}, 'nestedSubplotAreaOther': {'slot_uri': 'neon:nestedSubplotAreaOther', 'description': 'Size of nested plot in which other qualifying growthForms were measured', 'range': 'string', 'aliases': ['nested subplot area other'], 'mappings': []}, 'nestedSubplotAreaShrubSapling': {'slot_uri': 'neon:nestedSubplotAreaShrubSapling', 'description': 'Size of nested plot in which shrubs, saplings and small trees were measured', 'range': 'string', 'aliases': ['nested subplot area shrub sapling'], 'mappings': []}, 'nestedSubplotID': {'slot_uri': 'neon:nestedSubplotID', 'description': 'Numeric identifier for nested subplot ID within a subplotID', 'range': 'string', 'aliases': ['nested subplot i d'], 'mappings': []}, 'newPadCount': {'slot_uri': 'neon:newPadCount', 'description': 'The number of cladodes produced in the current growing season', 'range': 'string', 'aliases': ['new pad count'], 'mappings': []}, 'ninetyBaseCrownDiameter': {'slot_uri': 'neon:ninetyBaseCrownDiameter', 'description': 'Crown diameter perpendicular to maxBaseCrownDiameter, measured at ground level', 'range': 'double', 'aliases': ['ninety base crown diameter'], 'mappings': []}, 'ninetyCrownDiameter': {'slot_uri': 'neon:ninetyCrownDiameter', 'description': 'Crown diameter perpendicular to maxDiameter', 'range': 'double', 'aliases': ['ninety crown diameter'], 'mappings': []}, 'ocotillosAbsentList': {'slot_uri': 'neon:ocotillosAbsentList', 'description': 'List of subplots or nested subplots in which ocotillos are not present', 'range': 'string', 'aliases': ['ocotillos absent list'], 'mappings': []}, 'ocotillosPresent': {'slot_uri': 'neon:ocotillosPresent', 'description': 'Indicator of whether the plot contains ocotillo', 'range': 'string', 'aliases': ['ocotillos present'], 'mappings': []}, 'oldPadCount': {'slot_uri': 'neon:oldPadCount', 'description': 'The number of cladodes produced in previous growing seasons', 'range': 'string', 'aliases': ['old pad count'], 'mappings': []}, 'palmsAbsentList': {'slot_uri': 'neon:palmsAbsentList', 'description': 'List of subplots or nested subplots in which palm are not present', 'range': 'string', 'aliases': ['palms absent list'], 'mappings': []}, 'palmsPresent': {'slot_uri': 'neon:palmsPresent', 'description': 'Indicator of whether the plot contains palms of any size', 'range': 'string', 'aliases': ['palms present'], 'mappings': []}, 'previouslyTaggedAs': {'slot_uri': 'neon:previouslyTaggedAs', 'description': 'Indicates the tagID previously reported for a given individual', 'range': 'string', 'aliases': ['previously tagged as'], 'mappings': []}, 'shape': {'slot_uri': 'neon:shape', 'description': 'Description of three dimensional form', 'range': 'string', 'aliases': ['shape'], 'mappings': []}, 'shrubsAbsentList': {'slot_uri': 'neon:shrubsAbsentList', 'description': 'List of subplots or nested subplots in which shrubs, saplings and small trees are not present', 'range': 'string', 'aliases': ['shrubs absent list'], 'mappings': []}, 'shrubsPresent': {'slot_uri': 'neon:shrubsPresent', 'description': 'Indicator of whether the plot contains shrubs, saplings, or small trees', 'range': 'string', 'aliases': ['shrubs present'], 'mappings': []}, 'stemAzimuth': {'slot_uri': 'neon:stemAzimuth', 'description': 'Azimuth relative to True North between stem and pointID location', 'range': 'double', 'aliases': ['stem azimuth'], 'mappings': []}, 'stemCount': {'slot_uri': 'neon:stemCount', 'description': 'Count of stems', 'range': 'string', 'aliases': ['stem count'], 'mappings': []}, 'stemDistance': {'slot_uri': 'neon:stemDistance', 'description': 'Horizontal distance from stem to pointID location', 'range': 'double', 'aliases': ['stem distance'], 'mappings': []}, 'supportingStemIndividualID': {'slot_uri': 'neon:supportingStemIndividualID', 'description': 'Globally unique identifier for stem on which a liana is growing', 'range': 'string', 'aliases': ['supporting stem individual i d'], 'mappings': []}, 'supportingStemTagID': {'slot_uri': 'neon:supportingStemTagID', 'description': 'Unique tagID for stem on which a liana is growing', 'range': 'string', 'aliases': ['supporting stem tag i d'], 'mappings': []}, 'totalSampledAreaLiana': {'slot_uri': 'neon:totalSampledAreaLiana', 'description': 'Total plot area sampled for liana', 'range': 'double', 'aliases': ['total sampled area liana'], 'mappings': []}, 'totalSampledAreaOther': {'slot_uri': 'neon:totalSampledAreaOther', 'description': 'Total plot area sampled for qualifying non-woody growth forms', 'range': 'double', 'aliases': ['total sampled area other'], 'mappings': []}, 'totalSampledAreaShrubSapling': {'slot_uri': 'neon:totalSampledAreaShrubSapling', 'description': 'Total plot area sampled for saplings, shrubs, and small trees', 'range': 'double', 'aliases': ['total sampled area shrub sapling'], 'mappings': []}, 'totalSampledAreaTrees': {'slot_uri': 'neon:totalSampledAreaTrees', 'description': 'Total plot area sampled for single and multi-bole trees', 'range': 'double', 'aliases': ['total sampled area trees'], 'mappings': []}, 'treesAbsentList': {'slot_uri': 'neon:treesAbsentList', 'description': 'List of subplots in which trees are not present', 'range': 'string', 'aliases': ['trees absent list'], 'mappings': []}, 'treesPresent': {'slot_uri': 'neon:treesPresent', 'description': 'Indicator of whether the plot contains trees of any size', 'range': 'string', 'aliases': ['trees present'], 'mappings': []}, 'vdApexBreakHeight': {'slot_uri': 'neon:vdApexBreakHeight', 'description': 'Height from observer to the highest point along a broken bole', 'range': 'double', 'aliases': ['vd apex break height'], 'mappings': []}, 'vdApexHeight': {'slot_uri': 'neon:vdApexHeight', 'description': 'Height from observer to highest crown point', 'range': 'double', 'aliases': ['vd apex height'], 'mappings': []}, 'vdBaseBreakHeight': {'slot_uri': 'neon:vdBaseBreakHeight', 'description': 'Height from observer to the base of a broken bole', 'range': 'double', 'aliases': ['vd base break height'], 'mappings': []}, 'vdBaseHeight': {'slot_uri': 'neon:vdBaseHeight', 'description': 'Height from observer to base of stem', 'range': 'double', 'aliases': ['vd base height'], 'mappings': []}, 'volumePercent': {'slot_uri': 'neon:volumePercent', 'description': 'Percent of the total volume of a group attributed to a particular species', 'range': 'double', 'aliases': ['volume percent'], 'mappings': []}, 'vstBarcode': {'slot_uri': 'neon:vstBarcode', 'description': 'Barcode for vstID', 'range': 'string', 'aliases': ['vst barcode'], 'mappings': []}, 'vstFate': {'slot_uri': 'neon:vstFate', 'description': 'Fate for vstID', 'range': 'string', 'aliases': ['vst fate'], 'mappings': []}, 'vstID': {'slot_uri': 'neon:vstID', 'description': 'Year specific identifier for the individual', 'range': 'string', 'aliases': ['vst i d'], 'mappings': []}, 'xerophyllumAbsentList': {'slot_uri': 'neon:xerophyllumAbsentList', 'description': 'List of subplots or nested subplots in which xerophyllum are not present', 'range': 'string', 'aliases': ['xerophyllum absent list'], 'mappings': []}, 'xerophyllumPresent': {'slot_uri': 'neon:xerophyllumPresent', 'description': 'Indicator of whether the plot contains xerophyllum', 'range': 'string', 'aliases': ['xerophyllum present'], 'mappings': []}, 'yuccasAbsentList': {'slot_uri': 'neon:yuccasAbsentList', 'description': 'List of subplots or nested subplots in which yuccas are not present', 'range': 'string', 'aliases': ['yuccas absent list'], 'mappings': []}, 'yuccasPresent': {'slot_uri': 'neon:yuccasPresent', 'description': 'Indicator of whether the plot contains yucca or yucca-like growth forms', 'range': 'string', 'aliases': ['yuccas present'], 'mappings': []}, 'padCountValidation': {'slot_uri': 'neon:padCountValidation', 'description': 'Synthetic variable to check valid padCount values', 'range': 'string', 'aliases': ['pad count validation'], 'mappings': []}, 'acidity': {'slot_uri': 'neon:acidity', 'description': 'Extractable acidity measured as the amount of acid neutralized in BaCl2-TEA at pH 8.2', 'range': 'double', 'aliases': ['acidity'], 'mappings': []}, 'acidOxalateMethod': {'slot_uri': 'neon:acidOxalateMethod', 'description': 'Methods used for acid oxalate extraction', 'range': 'string', 'aliases': ['acid oxalate method'], 'mappings': []}, 'acidOxalateMethodPub': {'slot_uri': 'neon:acidOxalateMethodPub', 'description': 'Citation for publication describing the methods used for acid oxalate extraction', 'range': 'string', 'aliases': ['acid oxalate method pub'], 'mappings': []}, 'acidOxalateProcessedDate': {'slot_uri': 'neon:acidOxalateProcessedDate', 'description': 'Date of processing sample for acid oxalate extraction', 'range': 'time', 'aliases': ['acid oxalate processed date'], 'mappings': []}, 'airDryOvenDryMethod': {'slot_uri': 'neon:airDryOvenDryMethod', 'description': 'Methods used for air-dried to oven-dried ratio analysis', 'range': 'string', 'aliases': ['air dry oven dry method'], 'mappings': []}, 'airDryOvenDryMethodPub': {'slot_uri': 'neon:airDryOvenDryMethodPub', 'description': 'Citation for publication describing the methods used for air-dried to oven-dried ratio analysis', 'range': 'string', 'aliases': ['air dry oven dry method pub'], 'mappings': []}, 'airDryOvenDryProcessedDate': {'slot_uri': 'neon:airDryOvenDryProcessedDate', 'description': 'Date of processing sample for air-dried to oven-dried ratio analysis', 'range': 'time', 'aliases': ['air dry oven dry processed date'], 'mappings': []}, 'airDryOvenDryRatio': {'slot_uri': 'neon:airDryOvenDryRatio', 'description': 'Airdry to ovendry ratio of the <2 mm fraction', 'range': 'double', 'aliases': ['air dry oven dry ratio'], 'mappings': []}, 'alCitDithionate': {'slot_uri': 'neon:alCitDithionate', 'description': 'Dithionite citrate extractable aluminum content, indicates the amount of aluminum substituted for iron in iron oxides, reported as weight percent on the <2mm fraction', 'range': 'double', 'aliases': ['al cit dithionate'], 'mappings': []}, 'alOxalate': {'slot_uri': 'neon:alOxalate', 'description': 'Total soil Al as estimated by the ammonium oxalate extraction method, reported as weight percent on the <2 mm fraction', 'range': 'double', 'aliases': ['al oxalate'], 'mappings': []}, 'archiveCode': {'slot_uri': 'neon:archiveCode', 'description': 'Barcode of the archive sample', 'range': 'string', 'aliases': ['archive code'], 'mappings': []}, 'archiveRemarks': {'slot_uri': 'neon:archiveRemarks', 'description': 'Remarks from sample archiving', 'range': 'string', 'aliases': ['archive remarks'], 'mappings': []}, 'Bray1PExtractable': {'slot_uri': 'neon:Bray1PExtractable', 'description': 'Total phosphorus extracted by the Bray 1 solution', 'range': 'double', 'aliases': ['bray1 p extractable'], 'mappings': []}, 'Bray1PMethod': {'slot_uri': 'neon:Bray1PMethod', 'description': 'Method used for Bray extraction phosphorus analysis', 'range': 'string', 'aliases': ['bray1 p method'], 'mappings': []}, 'Bray1PMethodPub': {'slot_uri': 'neon:Bray1PMethodPub', 'description': 'Citation for publication describing the methods used for Bray extraction phosphorus analysis', 'range': 'string', 'aliases': ['bray1 p method pub'], 'mappings': []}, 'Bray1PProcessedDate': {'slot_uri': 'neon:Bray1PProcessedDate', 'description': 'Date of processing sample for Bray extraction phosphorus analysis', 'range': 'time', 'aliases': ['bray1 p processed date'], 'mappings': []}, 'bulkDensFieldMoist': {'slot_uri': 'neon:bulkDensFieldMoist', 'description': 'Weight per unit volume of the <2 mm fraction, measured at field moisture', 'range': 'double', 'aliases': ['bulk dens field moist'], 'mappings': []}, 'bulkDensMethod': {'slot_uri': 'neon:bulkDensMethod', 'description': 'Method used for bulk density analysis', 'range': 'string', 'aliases': ['bulk dens method'], 'mappings': []}, 'bulkDensMethodPub': {'slot_uri': 'neon:bulkDensMethodPub', 'description': 'Citation for publication describing the methods used for bulk density analysis', 'range': 'string', 'aliases': ['bulk dens method pub'], 'mappings': []}, 'bulkDensOvenDry': {'slot_uri': 'neon:bulkDensOvenDry', 'description': 'Weight per unit volume of the <2 mm fraction, measured on oven dried soil clods', 'range': 'double', 'aliases': ['bulk dens oven dry'], 'mappings': []}, 'bulkDensProcessedDate': {'slot_uri': 'neon:bulkDensProcessedDate', 'description': 'Date of processing sample for bulk density analysis', 'range': 'time', 'aliases': ['bulk dens processed date'], 'mappings': []}, 'bulkDensThirdBar': {'slot_uri': 'neon:bulkDensThirdBar', 'description': 'Weight per unit volume of the <2 mm fraction, measured after equilibration at one third bar water tension', 'range': 'double', 'aliases': ['bulk dens third bar'], 'mappings': []}, 'bulkDensWidth': {'slot_uri': 'neon:bulkDensWidth', 'description': 'Width of the bulk density sample', 'range': 'double', 'aliases': ['bulk dens width'], 'mappings': []}, 'caco3Method': {'slot_uri': 'neon:caco3Method', 'description': 'Method used for calcium carbonate analysis', 'range': 'string', 'aliases': ['caco3 method'], 'mappings': []}, 'caco3MethodPub': {'slot_uri': 'neon:caco3MethodPub', 'description': 'Citation for publication describing the methods used for calcium carbonate analysis', 'range': 'string', 'aliases': ['caco3 method pub'], 'mappings': []}, 'caco3ProcessedDate': {'slot_uri': 'neon:caco3ProcessedDate', 'description': 'Date of processing sample for calcium carbonate analysis', 'range': 'time', 'aliases': ['caco3 processed date'], 'mappings': []}, 'cecMethod': {'slot_uri': 'neon:cecMethod', 'description': 'Method used for cation exchange capacity analysis', 'range': 'string', 'aliases': ['cec method'], 'mappings': []}, 'cecMethodPub': {'slot_uri': 'neon:cecMethodPub', 'description': 'Citation for publication describing the methods used for cation exchange capacity analysis', 'range': 'string', 'aliases': ['cec method pub'], 'mappings': []}, 'cecProcessedDate': {'slot_uri': 'neon:cecProcessedDate', 'description': 'Date of processing sample for cation exchange capacity analysis', 'range': 'time', 'aliases': ['cec processed date'], 'mappings': []}, 'citrateDithioMethod': {'slot_uri': 'neon:citrateDithioMethod', 'description': 'Methods used for citrate dithionate extraction', 'range': 'string', 'aliases': ['citrate dithio method'], 'mappings': []}, 'citrateDithioMethodPub': {'slot_uri': 'neon:citrateDithioMethodPub', 'description': 'Citation for publication describing the methods used for citrate dithionate extraction', 'range': 'string', 'aliases': ['citrate dithio method pub'], 'mappings': []}, 'citrateDithioProcessedDate': {'slot_uri': 'neon:citrateDithioProcessedDate', 'description': 'Date of processing sample for citrate dithionate extraction', 'range': 'time', 'aliases': ['citrate dithio processed date'], 'mappings': []}, 'ctonRatio': {'slot_uri': 'neon:ctonRatio', 'description': 'Ratio of total Carbon to total Nitrogen of the <2 mm fraction', 'range': 'double', 'aliases': ['cton ratio'], 'mappings': []}, 'ecMethod': {'slot_uri': 'neon:ecMethod', 'description': 'Method used for electrical conductivity analysis', 'range': 'string', 'aliases': ['ec method'], 'mappings': []}, 'ecMethodPub': {'slot_uri': 'neon:ecMethodPub', 'description': 'Citation for publication describing the methods used for electrical conductivity analysis', 'range': 'string', 'aliases': ['ec method pub'], 'mappings': []}, 'ecProcessedDate': {'slot_uri': 'neon:ecProcessedDate', 'description': 'Date of processing sample for electrical conductivity analysis', 'range': 'time', 'aliases': ['ec processed date'], 'mappings': []}, 'extractAcidityMethod': {'slot_uri': 'neon:extractAcidityMethod', 'description': 'Method used for acidity analysis', 'range': 'string', 'aliases': ['extract acidity method'], 'mappings': []}, 'extractAcidityMethodPub': {'slot_uri': 'neon:extractAcidityMethodPub', 'description': 'Citation for publication describing the methods used for acidity analysis', 'range': 'string', 'aliases': ['extract acidity method pub'], 'mappings': []}, 'extractAcidityProcessedDate': {'slot_uri': 'neon:extractAcidityProcessedDate', 'description': 'Date of processing sample for acidity analysis', 'range': 'time', 'aliases': ['extract acidity processed date'], 'mappings': []}, 'feCitDithionate': {'slot_uri': 'neon:feCitDithionate', 'description': 'Dithionite citrate extractable iron, a general measure of total pedogenic iron, reported as weight percent on the <2mm fraction', 'range': 'double', 'aliases': ['fe cit dithionate'], 'mappings': []}, 'feOxalate': {'slot_uri': 'neon:feOxalate', 'description': 'Total soil noncrystalline iron as measured by the ammonium oxalate extraction method, reported as weight percent on the <2mm fraction', 'range': 'double', 'aliases': ['fe oxalate'], 'mappings': []}, 'fieldWaterContent': {'slot_uri': 'neon:fieldWaterContent', 'description': 'Water content under field conditions, reported as gravimetric percent on the <2 mm fraction', 'range': 'double', 'aliases': ['field water content'], 'mappings': []}, 'gypsumMethod': {'slot_uri': 'neon:gypsumMethod', 'description': 'Method used for gypsum analysis', 'range': 'string', 'aliases': ['gypsum method'], 'mappings': []}, 'gypsumMethodPub': {'slot_uri': 'neon:gypsumMethodPub', 'description': 'Citation for publication describing the methods used for gypsum analysis', 'range': 'string', 'aliases': ['gypsum method pub'], 'mappings': []}, 'gypsumProcessedDate': {'slot_uri': 'neon:gypsumProcessedDate', 'description': 'Date of processing sample for gypsum analysis', 'range': 'time', 'aliases': ['gypsum processed date'], 'mappings': []}, 'h2oReten15BarMethod': {'slot_uri': 'neon:h2oReten15BarMethod', 'description': 'Methods used for water retention analysis', 'range': 'string', 'aliases': ['h2o reten15 bar method'], 'mappings': []}, 'h2oReten15BarMethodPub': {'slot_uri': 'neon:h2oReten15BarMethodPub', 'description': 'Citation for publication describing the methods used for water retention analysis', 'range': 'string', 'aliases': ['h2o reten15 bar method pub'], 'mappings': []}, 'h2oReten15BarProcessedDate': {'slot_uri': 'neon:h2oReten15BarProcessedDate', 'description': 'Date of processing sample for water retention analysis', 'range': 'time', 'aliases': ['h2o reten15 bar processed date'], 'mappings': []}, 'KClExtractMethod': {'slot_uri': 'neon:KClExtractMethod', 'description': 'Method used for routine KCl extraction', 'range': 'string', 'aliases': ['k cl extract method'], 'mappings': []}, 'KClExtractMethodPub': {'slot_uri': 'neon:KClExtractMethodPub', 'description': 'Citation for publication describing the methods used for KCl extraction', 'range': 'string', 'aliases': ['k cl extract method pub'], 'mappings': []}, 'KClExtractProcessedDate': {'slot_uri': 'neon:KClExtractProcessedDate', 'description': 'Date of processing sample for KCl extraction', 'range': 'time', 'aliases': ['k cl extract processed date'], 'mappings': []}, 'MehlichIIIPMethod': {'slot_uri': 'neon:MehlichIIIPMethod', 'description': 'Method used for Mehlich phosphorus analysis', 'range': 'string', 'aliases': ['mehlich i i i p method'], 'mappings': []}, 'MehlichIIIPMethodPub': {'slot_uri': 'neon:MehlichIIIPMethodPub', 'description': 'Citation for publication describing the methods used for Mehlich phosphorus analysis', 'range': 'string', 'aliases': ['mehlich i i i p method pub'], 'mappings': []}, 'MehlichIIIPProcessedDate': {'slot_uri': 'neon:MehlichIIIPProcessedDate', 'description': 'Date of processing sample for Mehlich phosphorus analysis', 'range': 'time', 'aliases': ['mehlich i i i p processed date'], 'mappings': []}, 'MehlichIIITotP': {'slot_uri': 'neon:MehlichIIITotP', 'description': 'Total phosphorus extracted by the Mehlich III solution', 'range': 'double', 'aliases': ['mehlich i i i tot p'], 'mappings': []}, 'methodPub': {'slot_uri': 'neon:methodPub', 'description': 'Citation for publication describing the method used', 'range': 'string', 'aliases': ['method pub'], 'mappings': []}, 'mnCitDithionate': {'slot_uri': 'neon:mnCitDithionate', 'description': 'Dithionite citrate extractable manganese content, reported as weight percent on the <2 mm fraction', 'range': 'double', 'aliases': ['mn cit dithionate'], 'mappings': []}, 'mnOxalate': {'slot_uri': 'neon:mnOxalate', 'description': 'Total soil manganese content fraction held in noncrystalline compounds as measured by the ammonium oxalate extraction method and reported as milligrams per kilogram on a <2 mm base', 'range': 'double', 'aliases': ['mn oxalate'], 'mappings': []}, 'OlsenPExtractable': {'slot_uri': 'neon:OlsenPExtractable', 'description': 'Total phosphorus extracted by the Olsen solution', 'range': 'double', 'aliases': ['olsen p extractable'], 'mappings': []}, 'OlsenPMethod': {'slot_uri': 'neon:OlsenPMethod', 'description': 'Method used for Olsen phosphorus analysis', 'range': 'string', 'aliases': ['olsen p method'], 'mappings': []}, 'OlsenPMethodPub': {'slot_uri': 'neon:OlsenPMethodPub', 'description': 'Citation for publication describing the methods used for Olsen phosphorus analysis', 'range': 'string', 'aliases': ['olsen p method pub'], 'mappings': []}, 'OlsenPProcessedDate': {'slot_uri': 'neon:OlsenPProcessedDate', 'description': 'Date of processing sample for Olsen phosphorus analysis', 'range': 'time', 'aliases': ['olsen p processed date'], 'mappings': []}, 'optDensityOxalate': {'slot_uri': 'neon:optDensityOxalate', 'description': 'Optical density of the ammonium oxalate soil extract', 'range': 'double', 'aliases': ['opt density oxalate'], 'mappings': []}, 'particleSizeDistProcessedDate': {'slot_uri': 'neon:particleSizeDistProcessedDate', 'description': 'Date of processing sample for particle size distribution analysis', 'range': 'time', 'aliases': ['particle size dist processed date'], 'mappings': []}, 'particleSizeDistMethod': {'slot_uri': 'neon:particleSizeDistMethod', 'description': 'Methods used for particle size distribution analysis', 'range': 'string', 'aliases': ['particle size dist method'], 'mappings': []}, 'particleSizeDistMethodPub': {'slot_uri': 'neon:particleSizeDistMethodPub', 'description': 'Citation for publication describing the methods used for particle size distribution analysis', 'range': 'string', 'aliases': ['particle size dist method pub'], 'mappings': []}, 'pOxalate': {'slot_uri': 'neon:pOxalate', 'description': 'Soil phosphorus measured by the ammonium oxalate extraction method', 'range': 'double', 'aliases': ['p oxalate'], 'mappings': []}, 'processingRemarks': {'slot_uri': 'neon:processingRemarks', 'description': 'Remarks from sample processing', 'range': 'string', 'aliases': ['processing remarks'], 'mappings': []}, 'referenceCorner': {'slot_uri': 'neon:referenceCorner', 'description': 'Reference corner from which distance and compass bearing were measured', 'range': 'string', 'aliases': ['reference corner'], 'mappings': []}, 'routinepHProcessedDate': {'slot_uri': 'neon:routinepHProcessedDate', 'description': 'Date of processing sample for routine pH analysis', 'range': 'time', 'aliases': ['routinep h processed date'], 'mappings': []}, 'routinepHMethod': {'slot_uri': 'neon:routinepHMethod', 'description': 'Method used for routine pH analysis', 'range': 'string', 'aliases': ['routinep h method'], 'mappings': []}, 'routinepHMethodPub': {'slot_uri': 'neon:routinepHMethodPub', 'description': 'Citation for publication describing the methods used for routine pH analysis', 'range': 'string', 'aliases': ['routinep h method pub'], 'mappings': []}, 'sampleBearing': {'slot_uri': 'neon:sampleBearing', 'description': 'Compass bearing of the sample location from a plot reference corner', 'range': 'double', 'aliases': ['sample bearing'], 'mappings': []}, 'sampleDistance': {'slot_uri': 'neon:sampleDistance', 'description': 'Distance of the sample location from a plot reference corner', 'range': 'double', 'aliases': ['sample distance'], 'mappings': []}, 'sampleDistanceDeci': {'slot_uri': 'neon:sampleDistanceDeci', 'description': 'Distance of the sample location from a plot reference corner in decimeters', 'range': 'double', 'aliases': ['sample distance deci'], 'mappings': []}, 'sampleRelativeLocation': {'slot_uri': 'neon:sampleRelativeLocation', 'description': 'Relative position of a sample location', 'range': 'string', 'aliases': ['sample relative location'], 'mappings': []}, 'satPasteMethod': {'slot_uri': 'neon:satPasteMethod', 'description': 'Method used for saturated paste analysis', 'range': 'string', 'aliases': ['sat paste method'], 'mappings': []}, 'satPasteMethodPub': {'slot_uri': 'neon:satPasteMethodPub', 'description': 'Citation for publication describing the methods used for saturated paste analysis', 'range': 'string', 'aliases': ['sat paste method pub'], 'mappings': []}, 'satPasteProcessedDate': {'slot_uri': 'neon:satPasteProcessedDate', 'description': 'Date of processing sample for saturated paste analysis', 'range': 'time', 'aliases': ['sat paste processed date'], 'mappings': []}, 'siliconCitrateDithionate': {'slot_uri': 'neon:siliconCitrateDithionate', 'description': 'Dithionite citrate extractable silicon, reported as weight percent on the <2mm fraction', 'range': 'double', 'aliases': ['silicon citrate dithionate'], 'mappings': []}, 'siOxalate': {'slot_uri': 'neon:siOxalate', 'description': 'Total soil silica content as measured by the ammonium oxalate extraction method, reported as a weight percent on a <2 mm base', 'range': 'double', 'aliases': ['si oxalate'], 'mappings': []}, 'soilSamplingMethod': {'slot_uri': 'neon:soilSamplingMethod', 'description': 'The methodology used for collecting soil at a plot (pit or core)', 'range': 'string', 'aliases': ['soil sampling method'], 'mappings': []}, 'TotalNCSMethod': {'slot_uri': 'neon:TotalNCSMethod', 'description': 'Methods used for total carbon, nitrogen and sulfur analysis', 'range': 'string', 'aliases': ['total n c s method'], 'mappings': []}, 'TotalNCSMethodPub': {'slot_uri': 'neon:TotalNCSMethodPub', 'description': 'Citation for publication describing the methods used for total carbon, nitrogen and sulfur analysis', 'range': 'string', 'aliases': ['total n c s method pub'], 'mappings': []}, 'TotalNCSProcessedDate': {'slot_uri': 'neon:TotalNCSProcessedDate', 'description': 'Date of processing sample for total carbon, nitrogen and sulfur analysis', 'range': 'time', 'aliases': ['total n c s processed date'], 'mappings': []}, 'waterRetention15Bar': {'slot_uri': 'neon:waterRetention15Bar', 'description': 'Water content after equilibration at 15 bars water tension, reported as gravimetric percent on the <2 mm fraction', 'range': 'double', 'aliases': ['water retention15 bar'], 'mappings': []}, 'waterRetentionThirdBar': {'slot_uri': 'neon:waterRetentionThirdBar', 'description': 'Water content after equilibration at one-third bar water tension, reported as gravimetric percent on the <2 mm fraction', 'range': 'double', 'aliases': ['water retention third bar'], 'mappings': []}, 'instrument_model': {'slot_uri': 'neon:instrument_model', 'description': 'The model identifier of the sequencing instrument', 'range': 'string', 'aliases': ['instrument_model'], 'mappings': []}, 'ncbiProjectID': {'slot_uri': 'neon:ncbiProjectID', 'description': 'Identifier for the NCBI project associated with the sample', 'range': 'string', 'aliases': ['ncbi project i d'], 'mappings': []}, 'rawDataFileName': {'slot_uri': 'neon:rawDataFileName', 'description': 'Name of file or folder containing raw data, including file extension', 'range': 'string', 'aliases': ['raw data file name'], 'mappings': []}, 'rawDataFilePath': {'slot_uri': 'neon:rawDataFilePath', 'description': 'The system path identifying the raw data file location', 'range': 'string', 'aliases': ['raw data file path'], 'mappings': []}, 'sequencingFacilityID': {'slot_uri': 'neon:sequencingFacilityID', 'description': 'Name of the laboratory or facility that is sequencing samples', 'range': 'string', 'aliases': ['sequencing facility i d'], 'mappings': []}, 'sequencingProtocol': {'slot_uri': 'neon:sequencingProtocol', 'description': 'The protocol used to sequence DNA from a sample', 'range': 'string', 'aliases': ['sequencing protocol'], 'mappings': []}, 'windSpeedDeadZoneQF': {'slot_uri': 'neon:windSpeedDeadZoneQF', 'description': 'Wind speed quality flag for the dead zone (1=fail, 0=pass, -1=NA(i.e., could not be run))', 'range': 'integer', 'aliases': ['wind speed dead zone q f'], 'mappings': []}, 'windSpeedSciRvwQF': {'slot_uri': 'neon:windSpeedSciRvwQF', 'description': 'Wind speed stand-alone quality flag (does not interact with final quality flag) indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['wind speed sci rvw q f'], 'mappings': []}, 'windDirSciRvwQF': {'slot_uri': 'neon:windDirSciRvwQF', 'description': 'Wind direction stand-alone quality flag (does not interact with final quality flag) indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['wind dir sci rvw q f'], 'mappings': []}, 'windDirDeadZoneQF': {'slot_uri': 'neon:windDirDeadZoneQF', 'description': 'Wind direction quality flag for the dead zone (1=fail, 0=pass, -1=NA(i.e., could not be run))', 'range': 'integer', 'aliases': ['wind dir dead zone q f'], 'mappings': []}, 'accuracyQF': {'slot_uri': 'neon:accuracyQF', 'description': 'Quality flag for quality assurance materials associated with the run', 'range': 'string', 'aliases': ['accuracy q f'], 'mappings': []}, 'analytePercentRecovery': {'slot_uri': 'neon:analytePercentRecovery', 'description': 'Percent recovery of the analyte, based on analysis of quality assurance reference materials or standards treated as unknowns', 'range': 'double', 'aliases': ['analyte percent recovery'], 'mappings': []}, 'celluloseKnown': {'slot_uri': 'neon:celluloseKnown', 'description': 'Known percent cellulose in quality assurance material or standard on a dry mass basis', 'range': 'double', 'aliases': ['cellulose known'], 'mappings': []}, 'cellulosePercent': {'slot_uri': 'neon:cellulosePercent', 'description': 'Percent cellulose on a dry mass basis', 'range': 'double', 'aliases': ['cellulose percent'], 'mappings': []}, 'ligninKnown': {'slot_uri': 'neon:ligninKnown', 'description': 'Known percent lignin in quality assurance material or standard on a dry mass basis', 'range': 'double', 'aliases': ['lignin known'], 'mappings': []}, 'ligninPercent': {'slot_uri': 'neon:ligninPercent', 'description': 'Percent lignin on a dry mass basis', 'range': 'double', 'aliases': ['lignin percent'], 'mappings': []}, 'measurementQF': {'slot_uri': 'neon:measurementQF', 'description': 'Quality flag for sample measurement', 'range': 'string', 'aliases': ['measurement q f'], 'mappings': []}, 'qaMaterialQF': {'slot_uri': 'neon:qaMaterialQF', 'description': 'Quality flag for the quality assurance material', 'range': 'string', 'aliases': ['qa material q f'], 'mappings': []}, 'trappingDays': {'slot_uri': 'neon:trappingDays', 'description': 'Decimal days between trap setting and collecting events', 'range': 'double', 'aliases': ['trapping days'], 'mappings': []}, 'qcEnumerationDifference': {'slot_uri': 'neon:qcEnumerationDifference', 'description': 'Percent difference in enumeration (PDE) between the first taxonomist and the second taxonomist for the same sample', 'range': 'double', 'aliases': ['qc enumeration difference'], 'mappings': []}, 'qcTaxonomicDifference': {'slot_uri': 'neon:qcTaxonomicDifference', 'description': 'Percent taxonomic difference (PTD) between the first taxonomist and the second taxonomist for the same sample', 'range': 'double', 'aliases': ['qc taxonomic difference'], 'mappings': []}, 'windDirCalmWindQAQCRpt': {'slot_uri': 'neon:windDirCalmWindQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the calm wind test, which indicates whether or not wind direction measurements were made during calm winds, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir calm wind q a q c rpt'], 'mappings': []}, 'windSpeedBuoy': {'slot_uri': 'neon:windSpeedBuoy', 'description': 'Arithmetic mean of raw buoy wind speed', 'range': 'double', 'aliases': ['wind speed buoy'], 'mappings': []}, 'windDirBuoy': {'slot_uri': 'neon:windDirBuoy', 'description': 'Arithmetic mean of raw buoy wind direction', 'range': 'double', 'aliases': ['wind dir buoy'], 'mappings': []}, 'buoyCompGapFailQM': {'slot_uri': 'neon:buoyCompGapFailQM', 'description': 'Buoy compass quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp gap fail q m'], 'mappings': []}, 'buoyCompGapNAQM': {'slot_uri': 'neon:buoyCompGapNAQM', 'description': 'Buoy compass quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp gap n a q m'], 'mappings': []}, 'buoyCompGapPassQM': {'slot_uri': 'neon:buoyCompGapPassQM', 'description': 'Buoy compass quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp gap pass q m'], 'mappings': []}, 'buoyCompGapQAQCRpt': {'slot_uri': 'neon:buoyCompGapQAQCRpt', 'description': 'Buoy compass quality assurance and quality control report for the gap test, which indicates that the datum is missing and is a part of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['buoy comp gap q a q c rpt'], 'mappings': []}, 'buoyCompNullFailQM': {'slot_uri': 'neon:buoyCompNullFailQM', 'description': 'Buoy compass quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp null fail q m'], 'mappings': []}, 'buoyCompNullNAQM': {'slot_uri': 'neon:buoyCompNullNAQM', 'description': 'Buoy compass quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp null n a q m'], 'mappings': []}, 'buoyCompNullPassQM': {'slot_uri': 'neon:buoyCompNullPassQM', 'description': 'Buoy compass quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp null pass q m'], 'mappings': []}, 'buoyCompNullQAQCRpt': {'slot_uri': 'neon:buoyCompNullQAQCRpt', 'description': 'Buoy compass quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy comp null q a q c rpt'], 'mappings': []}, 'buoyCompPersistenceFailQM': {'slot_uri': 'neon:buoyCompPersistenceFailQM', 'description': 'Buoy compass quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp persistence fail q m'], 'mappings': []}, 'buoyCompPersistenceNAQM': {'slot_uri': 'neon:buoyCompPersistenceNAQM', 'description': 'Buoy compass quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp persistence n a q m'], 'mappings': []}, 'buoyCompPersistencePassQM': {'slot_uri': 'neon:buoyCompPersistencePassQM', 'description': 'Buoy compass quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp persistence pass q m'], 'mappings': []}, 'buoyCompPersistenceQAQCRpt': {'slot_uri': 'neon:buoyCompPersistenceQAQCRpt', 'description': 'Buoy compass QAQC report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a designated period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy comp persistence q a q c rpt'], 'mappings': []}, 'buoyCompRangeFailQM': {'slot_uri': 'neon:buoyCompRangeFailQM', 'description': 'Buoy compass quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp range fail q m'], 'mappings': []}, 'buoyCompRangeNAQM': {'slot_uri': 'neon:buoyCompRangeNAQM', 'description': 'Buoy compass quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp range n a q m'], 'mappings': []}, 'buoyCompRangePassQM': {'slot_uri': 'neon:buoyCompRangePassQM', 'description': 'Buoy compass quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp range pass q m'], 'mappings': []}, 'buoyCompRangeQAQCRpt': {'slot_uri': 'neon:buoyCompRangeQAQCRpt', 'description': 'Buoy compass quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy comp range q a q c rpt'], 'mappings': []}, 'buoyCompSpikeFailQM': {'slot_uri': 'neon:buoyCompSpikeFailQM', 'description': 'Buoy compass quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp spike fail q m'], 'mappings': []}, 'buoyCompSpikeNAQM': {'slot_uri': 'neon:buoyCompSpikeNAQM', 'description': 'Buoy compass quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp spike n a q m'], 'mappings': []}, 'buoyCompSpikePassQM': {'slot_uri': 'neon:buoyCompSpikePassQM', 'description': 'Buoy compass quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp spike pass q m'], 'mappings': []}, 'buoyCompSpikeQAQCRpt': {'slot_uri': 'neon:buoyCompSpikeQAQCRpt', 'description': 'Buoy compass quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy comp spike q a q c rpt'], 'mappings': []}, 'buoyCompStepFailQM': {'slot_uri': 'neon:buoyCompStepFailQM', 'description': 'Buoy compass quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp step fail q m'], 'mappings': []}, 'buoyCompStepNAQM': {'slot_uri': 'neon:buoyCompStepNAQM', 'description': 'Buoy compass quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp step n a q m'], 'mappings': []}, 'buoyCompStepPassQM': {'slot_uri': 'neon:buoyCompStepPassQM', 'description': 'Buoy compass quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy comp step pass q m'], 'mappings': []}, 'buoyCompStepQAQCRpt': {'slot_uri': 'neon:buoyCompStepQAQCRpt', 'description': 'Buoy compass quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy comp step q a q c rpt'], 'mappings': []}, 'windDirCalmWindFailQM': {'slot_uri': 'neon:windDirCalmWindFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the calm wind test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir calm wind fail q m'], 'mappings': []}, 'windDirCalmWindNAQM': {'slot_uri': 'neon:windDirCalmWindNAQM', 'description': 'Wind direction quality metric that summarizes when the calm wind test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir calm wind n a q m'], 'mappings': []}, 'windDirCalmWindPassQM': {'slot_uri': 'neon:windDirCalmWindPassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the calm wind test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir calm wind pass q m'], 'mappings': []}, 'windDirDeadZoneFailQM': {'slot_uri': 'neon:windDirDeadZoneFailQM', 'description': 'Wind direction quality metric that summarizes the failed outcomes of the dead band test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir dead zone fail q m'], 'mappings': []}, 'windDirDeadZoneNAQM': {'slot_uri': 'neon:windDirDeadZoneNAQM', 'description': 'Wind direction quality metric that summarizes when the dead band test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir dead zone n a q m'], 'mappings': []}, 'windDirDeadZonePassQM': {'slot_uri': 'neon:windDirDeadZonePassQM', 'description': 'Wind direction quality metric that summarizes the passed outcomes of the dead band test over the averaging period, as a percent', 'range': 'double', 'aliases': ['wind dir dead zone pass q m'], 'mappings': []}, 'windDirDeadZoneQAQCRpt': {'slot_uri': 'neon:windDirDeadZoneQAQCRpt', 'description': 'Wind direction quality assurance and quality control report for the dead band test, which indicates whether or not wind direction measurements were made in the dead band zone of the sensor, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['wind dir dead zone q a q c rpt'], 'mappings': []}, 'buoyWindDirAlphaQAQCRpt': {'slot_uri': 'neon:buoyWindDirAlphaQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir alpha q a q c rpt'], 'mappings': []}, 'buoyWindDirAlphaQM': {'slot_uri': 'neon:buoyWindDirAlphaQM', 'description': 'Buoy wind direction quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['buoy wind dir alpha q m'], 'mappings': []}, 'buoyWindDirBetaQAQCRpt': {'slot_uri': 'neon:buoyWindDirBetaQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir beta q a q c rpt'], 'mappings': []}, 'buoyWindDirBetaQM': {'slot_uri': 'neon:buoyWindDirBetaQM', 'description': 'Buoy wind direction quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['buoy wind dir beta q m'], 'mappings': []}, 'buoyWindDirCalmWindFailQM': {'slot_uri': 'neon:buoyWindDirCalmWindFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the calm wind test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir calm wind fail q m'], 'mappings': []}, 'buoyWindDirCalmWindNAQM': {'slot_uri': 'neon:buoyWindDirCalmWindNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the calm wind test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir calm wind n a q m'], 'mappings': []}, 'buoyWindDirCalmWindPassQM': {'slot_uri': 'neon:buoyWindDirCalmWindPassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the calm wind test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir calm wind pass q m'], 'mappings': []}, 'buoyWindDirCalmWindQAQCRpt': {'slot_uri': 'neon:buoyWindDirCalmWindQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the calm wind test, which indicates whether or not Buoy wind direction measurements were made during calm winds, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir calm wind q a q c rpt'], 'mappings': []}, 'buoyWindDirConsistencyFailQM': {'slot_uri': 'neon:buoyWindDirConsistencyFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir consistency fail q m'], 'mappings': []}, 'buoyWindDirConsistencyNAQM': {'slot_uri': 'neon:buoyWindDirConsistencyNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir consistency n a q m'], 'mappings': []}, 'buoyWindDirConsistencyPassQM': {'slot_uri': 'neon:buoyWindDirConsistencyPassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir consistency pass q m'], 'mappings': []}, 'buoyWindDirConsistencyQAQCRpt': {'slot_uri': 'neon:buoyWindDirConsistencyQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir consistency q a q c rpt'], 'mappings': []}, 'buoyWindDirDeadZoneFailQM': {'slot_uri': 'neon:buoyWindDirDeadZoneFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the dead band test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir dead zone fail q m'], 'mappings': []}, 'buoyWindDirDeadZoneNAQM': {'slot_uri': 'neon:buoyWindDirDeadZoneNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the dead band test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir dead zone n a q m'], 'mappings': []}, 'buoyWindDirDeadZonePassQM': {'slot_uri': 'neon:buoyWindDirDeadZonePassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the dead band test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir dead zone pass q m'], 'mappings': []}, 'buoyWindDirDeadZoneQAQCRpt': {'slot_uri': 'neon:buoyWindDirDeadZoneQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the dead band test, which indicates whether or not Buoy wind direction measurements were made in the dead band zone of the sensor, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir dead zone q a q c rpt'], 'mappings': []}, 'buoyWindDirExpUncert': {'slot_uri': 'neon:buoyWindDirExpUncert', 'description': 'Expanded uncertainty for wind direction on buoy', 'range': 'double', 'aliases': ['buoy wind dir exp uncert'], 'mappings': []}, 'buoyWindDirFinalQF': {'slot_uri': 'neon:buoyWindDirFinalQF', 'description': 'Buoy wind direction quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['buoy wind dir final q f'], 'mappings': []}, 'buoyWindDirFinalQFSciRvw': {'slot_uri': 'neon:buoyWindDirFinalQFSciRvw', 'description': 'Buoy wind direction quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['buoy wind dir final q f sci rvw'], 'mappings': []}, 'buoyWindDirGapFailQM': {'slot_uri': 'neon:buoyWindDirGapFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir gap fail q m'], 'mappings': []}, 'buoyWindDirGapNAQM': {'slot_uri': 'neon:buoyWindDirGapNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir gap n a q m'], 'mappings': []}, 'buoyWindDirGapPassQM': {'slot_uri': 'neon:buoyWindDirGapPassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir gap pass q m'], 'mappings': []}, 'buoyWindDirGapQAQCRpt': {'slot_uri': 'neon:buoyWindDirGapQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['buoy wind dir gap q a q c rpt'], 'mappings': []}, 'buoyWindDirMean': {'slot_uri': 'neon:buoyWindDirMean', 'description': 'Arithmetic mean of wind direction on buoy', 'range': 'double', 'aliases': ['buoy wind dir mean'], 'mappings': []}, 'buoyWindDirNullFailQM': {'slot_uri': 'neon:buoyWindDirNullFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir null fail q m'], 'mappings': []}, 'buoyWindDirNullNAQM': {'slot_uri': 'neon:buoyWindDirNullNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir null n a q m'], 'mappings': []}, 'buoyWindDirNullPassQM': {'slot_uri': 'neon:buoyWindDirNullPassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir null pass q m'], 'mappings': []}, 'buoyWindDirNullQAQCRpt': {'slot_uri': 'neon:buoyWindDirNullQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir null q a q c rpt'], 'mappings': []}, 'buoyWindDirNumPts': {'slot_uri': 'neon:buoyWindDirNumPts', 'description': 'Number of points used to calculate the arithmetic mean of wind direction on buoy', 'range': 'double', 'aliases': ['buoy wind dir num pts'], 'mappings': []}, 'buoyWindDirPersistenceFailQM': {'slot_uri': 'neon:buoyWindDirPersistenceFailQM', 'description': 'Buoy wind direction quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir persistence fail q m'], 'mappings': []}, 'buoyWindDirPersistenceNAQM': {'slot_uri': 'neon:buoyWindDirPersistenceNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir persistence n a q m'], 'mappings': []}, 'buoyWindDirPersistencePassQM': {'slot_uri': 'neon:buoyWindDirPersistencePassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir persistence pass q m'], 'mappings': []}, 'buoyWindDirPersistenceQAQCRpt': {'slot_uri': 'neon:buoyWindDirPersistenceQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a time period, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir persistence q a q c rpt'], 'mappings': []}, 'buoyWindDirRangeFailQM': {'slot_uri': 'neon:buoyWindDirRangeFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir range fail q m'], 'mappings': []}, 'buoyWindDirRangeNAQM': {'slot_uri': 'neon:buoyWindDirRangeNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir range n a q m'], 'mappings': []}, 'buoyWindDirRangePassQM': {'slot_uri': 'neon:buoyWindDirRangePassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir range pass q m'], 'mappings': []}, 'buoyWindDirRangeQAQCRpt': {'slot_uri': 'neon:buoyWindDirRangeQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir range q a q c rpt'], 'mappings': []}, 'buoyWindDirSensorErrorFailQM': {'slot_uri': 'neon:buoyWindDirSensorErrorFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the sensor error test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir sensor error fail q m'], 'mappings': []}, 'buoyWindDirSensorErrorNAQM': {'slot_uri': 'neon:buoyWindDirSensorErrorNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the sensor error test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir sensor error n a q m'], 'mappings': []}, 'buoyWindDirSensorErrorPassQM': {'slot_uri': 'neon:buoyWindDirSensorErrorPassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the sensor error test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir sensor error pass q m'], 'mappings': []}, 'buoyWindDirSpikeFailQM': {'slot_uri': 'neon:buoyWindDirSpikeFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir spike fail q m'], 'mappings': []}, 'buoyWindDirSpikeNAQM': {'slot_uri': 'neon:buoyWindDirSpikeNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir spike n a q m'], 'mappings': []}, 'buoyWindDirSpikePassQM': {'slot_uri': 'neon:buoyWindDirSpikePassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir spike pass q m'], 'mappings': []}, 'buoyWindDirSpikeQAQCRpt': {'slot_uri': 'neon:buoyWindDirSpikeQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir spike q a q c rpt'], 'mappings': []}, 'buoyWindDirStdErMean': {'slot_uri': 'neon:buoyWindDirStdErMean', 'description': 'Standard error of the mean for wind direction on buoy', 'range': 'double', 'aliases': ['buoy wind dir std er mean'], 'mappings': []}, 'buoyWindDirStepFailQM': {'slot_uri': 'neon:buoyWindDirStepFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir step fail q m'], 'mappings': []}, 'buoyWindDirStepNAQM': {'slot_uri': 'neon:buoyWindDirStepNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir step n a q m'], 'mappings': []}, 'buoyWindDirStepPassQM': {'slot_uri': 'neon:buoyWindDirStepPassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir step pass q m'], 'mappings': []}, 'buoyWindDirStepQAQCRpt': {'slot_uri': 'neon:buoyWindDirStepQAQCRpt', 'description': 'Buoy wind direction quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir step q a q c rpt'], 'mappings': []}, 'buoyWindDirValidCalFailQM': {'slot_uri': 'neon:buoyWindDirValidCalFailQM', 'description': 'Buoy wind direction quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir valid cal fail q m'], 'mappings': []}, 'buoyWindDirValidCalNAQM': {'slot_uri': 'neon:buoyWindDirValidCalNAQM', 'description': 'Buoy wind direction quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir valid cal n a q m'], 'mappings': []}, 'buoyWindDirValidCalPassQM': {'slot_uri': 'neon:buoyWindDirValidCalPassQM', 'description': 'Buoy wind direction quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind dir valid cal pass q m'], 'mappings': []}, 'buoyWindDirValidCalQAQCRpt': {'slot_uri': 'neon:buoyWindDirValidCalQAQCRpt', 'description': 'Buoy wind direction QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind dir valid cal q a q c rpt'], 'mappings': []}, 'buoyWindDirVariance': {'slot_uri': 'neon:buoyWindDirVariance', 'description': 'Variance in wind direction on buoy', 'range': 'double', 'aliases': ['buoy wind dir variance'], 'mappings': []}, 'buoyWindSpeedAlphaQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedAlphaQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the alpha quality flag, which indicates if one or more quality analysis failed for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed alpha q a q c rpt'], 'mappings': []}, 'buoyWindSpeedAlphaQM': {'slot_uri': 'neon:buoyWindSpeedAlphaQM', 'description': 'Buoy wind speed quality metric detailing the outcomes of the alpha quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['buoy wind speed alpha q m'], 'mappings': []}, 'buoyWindSpeedBetaQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedBetaQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the beta quality flag, which indicates if one or more quality analysis could not be run for a datum, detailed in NEON.DOC.001113 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed beta q a q c rpt'], 'mappings': []}, 'buoyWindSpeedBetaQM': {'slot_uri': 'neon:buoyWindSpeedBetaQM', 'description': 'Buoy wind speed quality metric detailing the outcomes of the beta quality flag over the averaging period, as a percent and detailed in NEON.DOC.001113', 'range': 'double', 'aliases': ['buoy wind speed beta q m'], 'mappings': []}, 'buoyWindSpeedConsistencyFailQM': {'slot_uri': 'neon:buoyWindSpeedConsistencyFailQM', 'description': 'Buoy wind speed quality metric that summarizes the failed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed consistency fail q m'], 'mappings': []}, 'buoyWindSpeedConsistencyNAQM': {'slot_uri': 'neon:buoyWindSpeedConsistencyNAQM', 'description': 'Buoy wind speed quality metric that summarizes when the consistency test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed consistency n a q m'], 'mappings': []}, 'buoyWindSpeedConsistencyPassQM': {'slot_uri': 'neon:buoyWindSpeedConsistencyPassQM', 'description': 'Buoy wind speed quality metric that summarizes the passed outcomes of the consistency test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed consistency pass q m'], 'mappings': []}, 'buoyWindSpeedConsistencyQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedConsistencyQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the consistency test, which indicates whether or not measurements are consistent with co-located measurements, (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed consistency q a q c rpt'], 'mappings': []}, 'buoyWindSpeedExpUncert': {'slot_uri': 'neon:buoyWindSpeedExpUncert', 'description': 'Expanded uncertainty for wind speed on buoy', 'range': 'double', 'aliases': ['buoy wind speed exp uncert'], 'mappings': []}, 'buoyWindSpeedFinalQF': {'slot_uri': 'neon:buoyWindSpeedFinalQF', 'description': 'Buoy wind speed quality flag indicating whether a data product has passed or failed an overall assessment of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['buoy wind speed final q f'], 'mappings': []}, 'buoyWindSpeedFinalQFSciRvw': {'slot_uri': 'neon:buoyWindSpeedFinalQFSciRvw', 'description': 'Buoy wind speed quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['buoy wind speed final q f sci rvw'], 'mappings': []}, 'buoyWindSpeedGapFailQM': {'slot_uri': 'neon:buoyWindSpeedGapFailQM', 'description': 'Buoy wind speed quality metric that summarizes the failed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed gap fail q m'], 'mappings': []}, 'buoyWindSpeedGapNAQM': {'slot_uri': 'neon:buoyWindSpeedGapNAQM', 'description': 'Buoy wind speed quality metric that summarizes when the gap test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed gap n a q m'], 'mappings': []}, 'buoyWindSpeedGapPassQM': {'slot_uri': 'neon:buoyWindSpeedGapPassQM', 'description': 'Buoy wind speed quality metric that summarizes the passed outcomes of the gap test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed gap pass q m'], 'mappings': []}, 'buoyWindSpeedGapQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedGapQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the gap test, which indicates that the datum is missing and is apart of a prolonged period of missing data, detailed in NEON.DOC.011081 (1=fail, 0=pass)', 'range': 'string', 'aliases': ['buoy wind speed gap q a q c rpt'], 'mappings': []}, 'buoyWindSpeedMaximum': {'slot_uri': 'neon:buoyWindSpeedMaximum', 'description': 'Maximum wind speed on buoy', 'range': 'double', 'aliases': ['buoy wind speed maximum'], 'mappings': []}, 'buoyWindSpeedMean': {'slot_uri': 'neon:buoyWindSpeedMean', 'description': 'Arithmetic mean of wind speed on buoy', 'range': 'double', 'aliases': ['buoy wind speed mean'], 'mappings': []}, 'buoyWindSpeedMinimum': {'slot_uri': 'neon:buoyWindSpeedMinimum', 'description': 'Minimum wind speed on buoy', 'range': 'double', 'aliases': ['buoy wind speed minimum'], 'mappings': []}, 'buoyWindSpeedNullFailQM': {'slot_uri': 'neon:buoyWindSpeedNullFailQM', 'description': 'Buoy wind speed quality metric that summarizes the failed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed null fail q m'], 'mappings': []}, 'buoyWindSpeedNullNAQM': {'slot_uri': 'neon:buoyWindSpeedNullNAQM', 'description': 'Buoy wind speed quality metric that summarizes when the null test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed null n a q m'], 'mappings': []}, 'buoyWindSpeedNullPassQM': {'slot_uri': 'neon:buoyWindSpeedNullPassQM', 'description': 'Buoy wind speed quality metric that summarizes the passed outcomes of the null test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed null pass q m'], 'mappings': []}, 'buoyWindSpeedNullQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedNullQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the null test, which indicates a missing datum, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed null q a q c rpt'], 'mappings': []}, 'buoyWindSpeedNumPts': {'slot_uri': 'neon:buoyWindSpeedNumPts', 'description': 'Number of points used to calculate the arithmetic mean of wind speed on buoy', 'range': 'double', 'aliases': ['buoy wind speed num pts'], 'mappings': []}, 'buoyWindSpeedPersistenceFailQM': {'slot_uri': 'neon:buoyWindSpeedPersistenceFailQM', 'description': 'Buoy wind speed quality metric that summarizes  the failed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed persistence fail q m'], 'mappings': []}, 'buoyWindSpeedPersistenceNAQM': {'slot_uri': 'neon:buoyWindSpeedPersistenceNAQM', 'description': 'Buoy wind speed quality metric that summarizes when the persistence test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed persistence n a q m'], 'mappings': []}, 'buoyWindSpeedPersistencePassQM': {'slot_uri': 'neon:buoyWindSpeedPersistencePassQM', 'description': 'Buoy wind speed quality metric that summarizes the passed outcomes of the persistence test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed persistence pass q m'], 'mappings': []}, 'buoyWindSpeedPersistenceQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedPersistenceQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the persistence test, which indicates  whether there is a realistic fluctuation of values over a  period of time, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed persistence q a q c rpt'], 'mappings': []}, 'buoyWindSpeedRangeFailQM': {'slot_uri': 'neon:buoyWindSpeedRangeFailQM', 'description': 'Buoy wind speed quality metric that summarizes the failed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed range fail q m'], 'mappings': []}, 'buoyWindSpeedRangeNAQM': {'slot_uri': 'neon:buoyWindSpeedRangeNAQM', 'description': 'Buoy wind speed quality metric that summarizes when the range test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed range n a q m'], 'mappings': []}, 'buoyWindSpeedRangePassQM': {'slot_uri': 'neon:buoyWindSpeedRangePassQM', 'description': 'Buoy wind speed quality metric that summarizes the passed outcomes of the range test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed range pass q m'], 'mappings': []}, 'buoyWindSpeedRangeQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedRangeQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the range test, which indicates whether a datum exceeds a realistic value, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed range q a q c rpt'], 'mappings': []}, 'buoyWindSpeedSpikeFailQM': {'slot_uri': 'neon:buoyWindSpeedSpikeFailQM', 'description': 'Buoy wind speed quality metric that summarizes the failed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed spike fail q m'], 'mappings': []}, 'buoyWindSpeedSpikeNAQM': {'slot_uri': 'neon:buoyWindSpeedSpikeNAQM', 'description': 'Buoy wind speed quality metric that summarizes when the spike test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed spike n a q m'], 'mappings': []}, 'buoyWindSpeedSpikePassQM': {'slot_uri': 'neon:buoyWindSpeedSpikePassQM', 'description': 'Buoy wind speed quality metric that summarizes the passed outcomes of the spike test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed spike pass q m'], 'mappings': []}, 'buoyWindSpeedSpikeQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedSpikeQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the spike test, which indicates whether or not a datum has been identified as a spike, detailed in NEON.DOC.000783 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed spike q a q c rpt'], 'mappings': []}, 'buoyWindSpeedStdErMean': {'slot_uri': 'neon:buoyWindSpeedStdErMean', 'description': 'Standard error of the mean for wind speed on buoy', 'range': 'double', 'aliases': ['buoy wind speed std er mean'], 'mappings': []}, 'buoyWindSpeedStepFailQM': {'slot_uri': 'neon:buoyWindSpeedStepFailQM', 'description': 'Buoy wind speed quality metric that summarizes the failed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed step fail q m'], 'mappings': []}, 'buoyWindSpeedStepNAQM': {'slot_uri': 'neon:buoyWindSpeedStepNAQM', 'description': 'Buoy wind speed quality metric that summarizes when the step test could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed step n a q m'], 'mappings': []}, 'buoyWindSpeedStepPassQM': {'slot_uri': 'neon:buoyWindSpeedStepPassQM', 'description': 'Buoy wind speed quality metric that summarizes the passed outcomes of the step test over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed step pass q m'], 'mappings': []}, 'buoyWindSpeedStepQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedStepQAQCRpt', 'description': 'Buoy wind speed quality assurance and quality control report for the step test, which indicates whether unusual jumps in the data exist, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed step q a q c rpt'], 'mappings': []}, 'buoyWindSpeedValidCalFailQM': {'slot_uri': 'neon:buoyWindSpeedValidCalFailQM', 'description': 'Buoy wind speed quality metric that summarizes the failed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed valid cal fail q m'], 'mappings': []}, 'buoyWindSpeedValidCalNAQM': {'slot_uri': 'neon:buoyWindSpeedValidCalNAQM', 'description': 'Buoy wind speed quality metric that summarizes when the valid calibration check could not be run over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed valid cal n a q m'], 'mappings': []}, 'buoyWindSpeedValidCalPassQM': {'slot_uri': 'neon:buoyWindSpeedValidCalPassQM', 'description': 'Buoy wind speed quality metric that summarizes the passed outcomes of the valid calibration check over the averaging period, as a percent', 'range': 'double', 'aliases': ['buoy wind speed valid cal pass q m'], 'mappings': []}, 'buoyWindSpeedValidCalQAQCRpt': {'slot_uri': 'neon:buoyWindSpeedValidCalQAQCRpt', 'description': 'Buoy wind speed QAQC report for the valid calibration check, which indicates whether the measurements are within the valid calibration date range, detailed in NEON.DOC.011081 (1=fail, 0=pass, -1=NA (i.e., could not be run))', 'range': 'string', 'aliases': ['buoy wind speed valid cal q a q c rpt'], 'mappings': []}, 'buoyWindSpeedVariance': {'slot_uri': 'neon:buoyWindSpeedVariance', 'description': 'Variance in wind speed on buoy', 'range': 'double', 'aliases': ['buoy wind speed variance'], 'mappings': []}, 'labPrepMethod': {'slot_uri': 'neon:labPrepMethod', 'description': 'The method, protocol or standard operating procedure used by an analytical laboratory for preparing samples for analysis', 'range': 'string', 'aliases': ['lab prep method'], 'mappings': []}, 'nucleicAcidPurity': {'slot_uri': 'neon:nucleicAcidPurity', 'description': 'Purity of nucleic acid sample', 'range': 'double', 'aliases': ['nucleic acid purity'], 'mappings': []}, 'sequenceAnalysisType': {'slot_uri': 'neon:sequenceAnalysisType', 'description': 'The general type of sequencing to be conducted on a sample', 'range': 'string', 'aliases': ['sequence analysis type'], 'mappings': []}, 'buoyNAFlag': {'slot_uri': 'neon:buoyNAFlag', 'description': 'Flag indicating that data could not be published due to an error on the buoy (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['buoy n a flag'], 'mappings': []}, 'chlorophyllAbsQF': {'slot_uri': 'neon:chlorophyllAbsQF', 'description': 'Quality flag indicating that chla absorbance corrections were applied = 0; unable to be applied = 1; absorbance values were high = 2; calculated correction factor was 1 (i.e. no absorbance correction was made) = 3', 'range': 'integer', 'aliases': ['chlorophyll abs q f'], 'mappings': []}, 'chlorophyllAlphaQF': {'slot_uri': 'neon:chlorophyllAlphaQF', 'description': 'Chlorophyll a quality assurance and quality control report for the alchlorophyll aa quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll alpha q f'], 'mappings': []}, 'chlorophyllBetaQF': {'slot_uri': 'neon:chlorophyllBetaQF', 'description': 'Chlorophyll a quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['chlorophyll beta q f'], 'mappings': []}, 'chlorophyllConsistQF': {'slot_uri': 'neon:chlorophyllConsistQF', 'description': 'Chlorophyll a quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll consist q f'], 'mappings': []}, 'chlorophyllExpUncert': {'slot_uri': 'neon:chlorophyllExpUncert', 'description': 'Expanded uncertainty for chlorophyll a', 'range': 'double', 'aliases': ['chlorophyll exp uncert'], 'mappings': []}, 'chlorophyllFinalQF': {'slot_uri': 'neon:chlorophyllFinalQF', 'description': 'Chlorophyll a final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'string', 'aliases': ['chlorophyll final q f'], 'mappings': []}, 'chlorophyllFinalQFSciRvw': {'slot_uri': 'neon:chlorophyllFinalQFSciRvw', 'description': 'Chlorophyll a final quality flag indicating whether a data product has failed a science review of its quality detailed in NEON.DOC.001113 (1=fail; 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['chlorophyll final q f sci rvw'], 'mappings': []}, 'chlorophyllGapQF': {'slot_uri': 'neon:chlorophyllGapQF', 'description': 'Chlorophyll a quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll gap q f'], 'mappings': []}, 'chlorophyllNullQF': {'slot_uri': 'neon:chlorophyllNullQF', 'description': 'Chlorophyll a quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll null q f'], 'mappings': []}, 'chlorophyllPersistenceQF': {'slot_uri': 'neon:chlorophyllPersistenceQF', 'description': 'Chlorophyll a quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll persistence q f'], 'mappings': []}, 'chlorophyllRangeQF': {'slot_uri': 'neon:chlorophyllRangeQF', 'description': 'Chlorophyll a quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll range q f'], 'mappings': []}, 'chlorophyllSpikeQF': {'slot_uri': 'neon:chlorophyllSpikeQF', 'description': 'Chlorophyll a quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll spike q f'], 'mappings': []}, 'chlorophyllStepQF': {'slot_uri': 'neon:chlorophyllStepQF', 'description': 'Chlorophyll a quality flag for the step test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll step q f'], 'mappings': []}, 'chlorophyllTempQF': {'slot_uri': 'neon:chlorophyllTempQF', 'description': 'Quality flag indicating that chl a temperature corrections were applied = 0 or unable to be applied = 1', 'range': 'integer', 'aliases': ['chlorophyll temp q f'], 'mappings': []}, 'chlorophyllValidCalQF': {'slot_uri': 'neon:chlorophyllValidCalQF', 'description': 'Quality flag for the valid calibration check of chlorophyll a detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll valid cal q f'], 'mappings': []}, 'dissolvedOxygenAlphaQF': {'slot_uri': 'neon:dissolvedOxygenAlphaQF', 'description': 'Dissolved oxygen quality assurance and quality control report for the alpha quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen alpha q f'], 'mappings': []}, 'dissolvedOxygenBetaQF': {'slot_uri': 'neon:dissolvedOxygenBetaQF', 'description': 'Dissolved oxygen quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen beta q f'], 'mappings': []}, 'dissolvedOxygenConsistQF': {'slot_uri': 'neon:dissolvedOxygenConsistQF', 'description': 'Dissolved oxygen quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen consist q f'], 'mappings': []}, 'dissolvedOxygenExpUncert': {'slot_uri': 'neon:dissolvedOxygenExpUncert', 'description': 'Expanded uncertainty for dissolved oxygen', 'range': 'double', 'aliases': ['dissolved oxygen exp uncert'], 'mappings': []}, 'dissolvedOxygenFinalQF': {'slot_uri': 'neon:dissolvedOxygenFinalQF', 'description': 'Dissolved oxygen final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'integer', 'aliases': ['dissolved oxygen final q f'], 'mappings': []}, 'dissolvedOxygenFinalQFSciRvw': {'slot_uri': 'neon:dissolvedOxygenFinalQFSciRvw', 'description': 'Dissolved oxygen final quality flag indicating whether a data product has failed a science review of its quality detailed in NEON.DOC.001113 (1=fail; 0=pass/not-reviewed)', 'range': 'integer', 'aliases': ['dissolved oxygen final q f sci rvw'], 'mappings': []}, 'dissolvedOxygenGapQF': {'slot_uri': 'neon:dissolvedOxygenGapQF', 'description': 'Dissolved oxygen quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen gap q f'], 'mappings': []}, 'dissolvedOxygenNullQF': {'slot_uri': 'neon:dissolvedOxygenNullQF', 'description': 'Dissolved oxygen quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen null q f'], 'mappings': []}, 'dissolvedOxygenPersistenceQF': {'slot_uri': 'neon:dissolvedOxygenPersistenceQF', 'description': 'Dissolved oxygen quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen persistence q f'], 'mappings': []}, 'dissolvedOxygenRangeQF': {'slot_uri': 'neon:dissolvedOxygenRangeQF', 'description': 'Dissolved oxygen quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen range q f'], 'mappings': []}, 'dissolvedOxygenSatAlphaQF': {'slot_uri': 'neon:dissolvedOxygenSatAlphaQF', 'description': 'Dissolved oxygen saturation quality assurance and quality control report for the alpha quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat alpha q f'], 'mappings': []}, 'dissolvedOxygenSatBetaQF': {'slot_uri': 'neon:dissolvedOxygenSatBetaQF', 'description': 'Dissolved oxygen saturation quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat beta q f'], 'mappings': []}, 'dissolvedOxygenSatConsistQF': {'slot_uri': 'neon:dissolvedOxygenSatConsistQF', 'description': 'Dissolved oxygen saturation quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat consist q f'], 'mappings': []}, 'dissolvedOxygenSatExpUncert': {'slot_uri': 'neon:dissolvedOxygenSatExpUncert', 'description': 'Expanded uncertainty for dissolved oxygen saturation', 'range': 'double', 'aliases': ['dissolved oxygen sat exp uncert'], 'mappings': []}, 'dissolvedOxygenSatFinalQF': {'slot_uri': 'neon:dissolvedOxygenSatFinalQF', 'description': 'Dissolved oxygen saturation final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'string', 'aliases': ['dissolved oxygen sat final q f'], 'mappings': []}, 'dissolvedOxygenSatFinalQFSciRvw': {'slot_uri': 'neon:dissolvedOxygenSatFinalQFSciRvw', 'description': 'Dissolved oxygen saturation final quality flag indicating whether a data product has failed a science review of its quality detailed in NEON.DOC.001113 (1=fail; 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['dissolved oxygen sat final q f sci rvw'], 'mappings': []}, 'dissolvedOxygenSatGapQF': {'slot_uri': 'neon:dissolvedOxygenSatGapQF', 'description': 'Dissolved oxygen saturation quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat gap q f'], 'mappings': []}, 'dissolvedOxygenSatNullQF': {'slot_uri': 'neon:dissolvedOxygenSatNullQF', 'description': 'Dissolved oxygen saturation quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat null q f'], 'mappings': []}, 'dissolvedOxygenSatPersistQF': {'slot_uri': 'neon:dissolvedOxygenSatPersistQF', 'description': 'Dissolved oxygen saturation quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat persist q f'], 'mappings': []}, 'dissolvedOxygenSatRangeQF': {'slot_uri': 'neon:dissolvedOxygenSatRangeQF', 'description': 'Dissolved oxygen saturation quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat range q f'], 'mappings': []}, 'dissolvedOxygenSatSpikeQF': {'slot_uri': 'neon:dissolvedOxygenSatSpikeQF', 'description': 'Dissolved oxygen saturation quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat spike q f'], 'mappings': []}, 'dissolvedOxygenSatStepQF': {'slot_uri': 'neon:dissolvedOxygenSatStepQF', 'description': 'Dissolved oxygen saturation quality flag for the step test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat step q f'], 'mappings': []}, 'dissolvedOxygenSatValidCalQF': {'slot_uri': 'neon:dissolvedOxygenSatValidCalQF', 'description': 'Quality flag for the valid calibration check of dissolved oxygen saturation detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen sat valid cal q f'], 'mappings': []}, 'dissolvedOxygenSpikeQF': {'slot_uri': 'neon:dissolvedOxygenSpikeQF', 'description': 'Dissolved oxygen quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen spike q f'], 'mappings': []}, 'dissolvedOxygenStepQF': {'slot_uri': 'neon:dissolvedOxygenStepQF', 'description': 'Dissolved oxygen quality flag for the step test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen step q f'], 'mappings': []}, 'dissolvedOxygenValidCalQF': {'slot_uri': 'neon:dissolvedOxygenValidCalQF', 'description': 'Quality flag for the valid calibration check of dissolved oxygen detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen valid cal q f'], 'mappings': []}, 'fDOMAbsQF': {'slot_uri': 'neon:fDOMAbsQF', 'description': 'Quality flag indicating that fDOM absorbance corrections were applied = 0; unable to be applied = 1; absorbance values were high = 2; calculated correction factor was 1 (i.e. no absorbance correction was made) = 3', 'range': 'integer', 'aliases': ['f d o m abs q f'], 'mappings': []}, 'fDOMAlphaQF': {'slot_uri': 'neon:fDOMAlphaQF', 'description': 'fDOM quality assurance and quality control report for the alfDOMa quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m alpha q f'], 'mappings': []}, 'fDOMBetaQF': {'slot_uri': 'neon:fDOMBetaQF', 'description': 'fDOM quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['f d o m beta q f'], 'mappings': []}, 'fDOMConsistQF': {'slot_uri': 'neon:fDOMConsistQF', 'description': 'fDOM quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m consist q f'], 'mappings': []}, 'fDOMExpUncert': {'slot_uri': 'neon:fDOMExpUncert', 'description': 'Expanded uncertainty for fDOM', 'range': 'double', 'aliases': ['f d o m exp uncert'], 'mappings': []}, 'fDOMFinalQF': {'slot_uri': 'neon:fDOMFinalQF', 'description': 'fDOM final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'string', 'aliases': ['f d o m final q f'], 'mappings': []}, 'fDOMFinalQFSciRvw': {'slot_uri': 'neon:fDOMFinalQFSciRvw', 'description': 'fDOM final quality flag indicating whether a data product has failed a science review of its quality detailed in NEON.DOC.001113 (1=fail; 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['f d o m final q f sci rvw'], 'mappings': []}, 'fDOMGapQF': {'slot_uri': 'neon:fDOMGapQF', 'description': 'fDOM quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m gap q f'], 'mappings': []}, 'fDOMNullQF': {'slot_uri': 'neon:fDOMNullQF', 'description': 'fDOM quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m null q f'], 'mappings': []}, 'fDOMPersistenceQF': {'slot_uri': 'neon:fDOMPersistenceQF', 'description': 'fDOM quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m persistence q f'], 'mappings': []}, 'fDOMRangeQF': {'slot_uri': 'neon:fDOMRangeQF', 'description': 'fDOM quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m range q f'], 'mappings': []}, 'fDOMSpikeQF': {'slot_uri': 'neon:fDOMSpikeQF', 'description': 'fDOM quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m spike q f'], 'mappings': []}, 'fDOMStepQF': {'slot_uri': 'neon:fDOMStepQF', 'description': 'fDOM quality flag for the step test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m step q f'], 'mappings': []}, 'fDOMTempQF': {'slot_uri': 'neon:fDOMTempQF', 'description': 'Quality flag indicating that fDOM temperature corrections were applied = 0 or unable to be applied = 1', 'range': 'integer', 'aliases': ['f d o m temp q f'], 'mappings': []}, 'fDOMValidCalQF': {'slot_uri': 'neon:fDOMValidCalQF', 'description': 'Quality flag for the valid calibration check of fDOM detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m valid cal q f'], 'mappings': []}, 'pHAlphaQF': {'slot_uri': 'neon:pHAlphaQF', 'description': 'pH quality assurance and quality control report for the alpha quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h alpha q f'], 'mappings': []}, 'pHBetaQF': {'slot_uri': 'neon:pHBetaQF', 'description': 'pH quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['p h beta q f'], 'mappings': []}, 'pHConsistQF': {'slot_uri': 'neon:pHConsistQF', 'description': 'pH quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h consist q f'], 'mappings': []}, 'pHExpUncert': {'slot_uri': 'neon:pHExpUncert', 'description': 'Expanded uncertainty for pH', 'range': 'double', 'aliases': ['p h exp uncert'], 'mappings': []}, 'pHFinalQF': {'slot_uri': 'neon:pHFinalQF', 'description': 'pH final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'string', 'aliases': ['p h final q f'], 'mappings': []}, 'pHFinalQFSciRvw': {'slot_uri': 'neon:pHFinalQFSciRvw', 'description': 'pH final quality flag indicating whether a data product has failed a science review of its quality detailed in NEON.DOC.001113 (1=fail; 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['p h final q f sci rvw'], 'mappings': []}, 'pHGapQF': {'slot_uri': 'neon:pHGapQF', 'description': 'pH quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h gap q f'], 'mappings': []}, 'pHNullQF': {'slot_uri': 'neon:pHNullQF', 'description': 'pH quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h null q f'], 'mappings': []}, 'pHPersistenceQF': {'slot_uri': 'neon:pHPersistenceQF', 'description': 'pH quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h persistence q f'], 'mappings': []}, 'pHRangeQF': {'slot_uri': 'neon:pHRangeQF', 'description': 'pH quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h range q f'], 'mappings': []}, 'pHSpikeQF': {'slot_uri': 'neon:pHSpikeQF', 'description': 'pH quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h spike q f'], 'mappings': []}, 'pHStepQF': {'slot_uri': 'neon:pHStepQF', 'description': 'pH quality flag for the step test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h step q f'], 'mappings': []}, 'pHValidCalQF': {'slot_uri': 'neon:pHValidCalQF', 'description': 'Quality flag for the valid calibration check of pH detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h valid cal q f'], 'mappings': []}, 'sensorDepthExpUncert': {'slot_uri': 'neon:sensorDepthExpUncert', 'description': 'Expanded uncertainty for sensor depth', 'range': 'double', 'aliases': ['sensor depth exp uncert'], 'mappings': []}, 'sensorDepthFinalQFSciRvw': {'slot_uri': 'neon:sensorDepthFinalQFSciRvw', 'description': 'Sensor depth quality flag indicating whether a data product has failed a science review of its quality, detailed in NEON.DOC.001113 (1=fail, 0=pass/not-reviewed)', 'range': 'integer', 'aliases': ['sensor depth final q f sci rvw'], 'mappings': []}, 'specificCondFinalQFSciRvw': {'slot_uri': 'neon:specificCondFinalQFSciRvw', 'description': 'Specific conductance final quality flag indicating whether a data product has failed a science review of its quality detailed in NEON.DOC.001113 (1=fail; 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['specific cond final q f sci rvw'], 'mappings': []}, 'specificConductanceAlphaQF': {'slot_uri': 'neon:specificConductanceAlphaQF', 'description': 'Specific conductance quality assurance and quality control report for the alpha quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['specific conductance alpha q f'], 'mappings': []}, 'specificConductanceBetaQF': {'slot_uri': 'neon:specificConductanceBetaQF', 'description': 'Specific conductance quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['specific conductance beta q f'], 'mappings': []}, 'specificConductanceConsistQF': {'slot_uri': 'neon:specificConductanceConsistQF', 'description': 'Specific conductance quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['specific conductance consist q f'], 'mappings': []}, 'specificConductanceExpUncert': {'slot_uri': 'neon:specificConductanceExpUncert', 'description': 'Expanded uncertainty for specific conductance', 'range': 'double', 'aliases': ['specific conductance exp uncert'], 'mappings': []}, 'specificCondFinalQF': {'slot_uri': 'neon:specificCondFinalQF', 'description': 'Specific conductance final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'integer', 'aliases': ['specific cond final q f'], 'mappings': []}, 'specificConductanceGapQF': {'slot_uri': 'neon:specificConductanceGapQF', 'description': 'Specific conductance quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['specific conductance gap q f'], 'mappings': []}, 'specificConductanceNullQF': {'slot_uri': 'neon:specificConductanceNullQF', 'description': 'Specific conductance quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['specific conductance null q f'], 'mappings': []}, 'specificConductancePersistQF': {'slot_uri': 'neon:specificConductancePersistQF', 'description': 'Specific conductance quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['specific conductance persist q f'], 'mappings': []}, 'specificConductanceRangeQF': {'slot_uri': 'neon:specificConductanceRangeQF', 'description': 'Specific conductance quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['specific conductance range q f'], 'mappings': []}, 'specificConductanceSpikeQF': {'slot_uri': 'neon:specificConductanceSpikeQF', 'description': 'Specific conductance quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['specific conductance spike q f'], 'mappings': []}, 'specificConductanceStepQF': {'slot_uri': 'neon:specificConductanceStepQF', 'description': 'Specific conductance quality flag for the step test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['specific conductance step q f'], 'mappings': []}, 'turbidityAlphaQF': {'slot_uri': 'neon:turbidityAlphaQF', 'description': 'Turbidity quality assurance and quality control report for the alturbiditya quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity alpha q f'], 'mappings': []}, 'turbidityBetaQF': {'slot_uri': 'neon:turbidityBetaQF', 'description': 'Turbidity quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['turbidity beta q f'], 'mappings': []}, 'turbidityConsistQF': {'slot_uri': 'neon:turbidityConsistQF', 'description': 'Turbidity quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity consist q f'], 'mappings': []}, 'turbidityExpUncert': {'slot_uri': 'neon:turbidityExpUncert', 'description': 'Expanded uncertainty for turbidity', 'range': 'double', 'aliases': ['turbidity exp uncert'], 'mappings': []}, 'turbidityFinalQF': {'slot_uri': 'neon:turbidityFinalQF', 'description': 'Turbidity final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'string', 'aliases': ['turbidity final q f'], 'mappings': []}, 'turbidityFinalQFSciRvw': {'slot_uri': 'neon:turbidityFinalQFSciRvw', 'description': 'Turbidity final quality flag indicating whether a data product has failed a science review of its quality detailed in NEON.DOC.001113 (1=fail; 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['turbidity final q f sci rvw'], 'mappings': []}, 'turbidityGapQF': {'slot_uri': 'neon:turbidityGapQF', 'description': 'Turbidity quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity gap q f'], 'mappings': []}, 'turbidityNullQF': {'slot_uri': 'neon:turbidityNullQF', 'description': 'Turbidity quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity null q f'], 'mappings': []}, 'turbidityPersistenceQF': {'slot_uri': 'neon:turbidityPersistenceQF', 'description': 'Turbidity quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity persistence q f'], 'mappings': []}, 'turbidityRangeQF': {'slot_uri': 'neon:turbidityRangeQF', 'description': 'Turbidity quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity range q f'], 'mappings': []}, 'turbiditySpikeQF': {'slot_uri': 'neon:turbiditySpikeQF', 'description': 'Turbidity quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity spike q f'], 'mappings': []}, 'turbidityStepQF': {'slot_uri': 'neon:turbidityStepQF', 'description': 'Turbidity quality flag for the step test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity step q f'], 'mappings': []}, 'turbidityValidCalQF': {'slot_uri': 'neon:turbidityValidCalQF', 'description': 'Quality flag for the valid calibration check of turbidity detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity valid cal q f'], 'mappings': []}, 'ammoniumNAnalysisDate': {'slot_uri': 'neon:ammoniumNAnalysisDate', 'description': 'Date an ammonium sample was analyzed', 'range': 'time', 'aliases': ['ammonium n analysis date'], 'mappings': []}, 'ammoniumNAnalyzedBy': {'slot_uri': 'neon:ammoniumNAnalyzedBy', 'description': 'Name of lab personnel analyzing sample for ammonium N', 'range': 'string', 'aliases': ['ammonium n analyzed by'], 'mappings': []}, 'ammoniumNInstrument': {'slot_uri': 'neon:ammoniumNInstrument', 'description': 'Type of instrument used for ammonium analysis', 'range': 'string', 'aliases': ['ammonium n instrument'], 'mappings': []}, 'ammoniumNMethod': {'slot_uri': 'neon:ammoniumNMethod', 'description': 'Method used to test sample for ammonium N concentration', 'range': 'string', 'aliases': ['ammonium n method'], 'mappings': []}, 'ammoniumNQF': {'slot_uri': 'neon:ammoniumNQF', 'description': 'Quality flag for ammonium N values', 'range': 'string', 'aliases': ['ammonium n q f'], 'mappings': []}, 'ammoniumNRemarks': {'slot_uri': 'neon:ammoniumNRemarks', 'description': 'Free text comments accompanying the ammonium record', 'range': 'string', 'aliases': ['ammonium n remarks'], 'mappings': []}, 'ammoniumNRepNum': {'slot_uri': 'neon:ammoniumNRepNum', 'description': 'Analytical replicate number for ammonium sample', 'range': 'string', 'aliases': ['ammonium n rep num'], 'mappings': []}, 'ammoniumNReviewedBy': {'slot_uri': 'neon:ammoniumNReviewedBy', 'description': 'Name of lab personnel who reviewed ammonium N data prior to submission', 'range': 'string', 'aliases': ['ammonium n reviewed by'], 'mappings': []}, 'ammoniumNRunID': {'slot_uri': 'neon:ammoniumNRunID', 'description': 'A linking value that associates the ammonium sample data to the run metadata, including QA values', 'range': 'string', 'aliases': ['ammonium n run i d'], 'mappings': []}, 'analyteQF': {'slot_uri': 'neon:analyteQF', 'description': 'Quality flag for the analyte', 'range': 'string', 'aliases': ['analyte q f'], 'mappings': []}, 'extractionEndDate': {'slot_uri': 'neon:extractionEndDate', 'description': 'The end date-time for an extraction event', 'range': 'time', 'aliases': ['extraction end date'], 'mappings': []}, 'extractionStartDate': {'slot_uri': 'neon:extractionStartDate', 'description': 'The start date-time for an extraction event', 'range': 'time', 'aliases': ['extraction start date'], 'mappings': []}, 'incubationLength': {'slot_uri': 'neon:incubationLength', 'description': 'Length of soil incubation', 'range': 'double', 'aliases': ['incubation length'], 'mappings': []}, 'incubationPairID': {'slot_uri': 'neon:incubationPairID', 'description': 'Identifier for a linked pair of soil samples used to measure net nitrogen transformation rates', 'range': 'string', 'aliases': ['incubation pair i d'], 'mappings': []}, 'kclAmmoniumNConc': {'slot_uri': 'neon:kclAmmoniumNConc', 'description': 'Concentration of ammonium N in a potassium chloride extract', 'range': 'double', 'aliases': ['kcl ammonium n conc'], 'mappings': []}, 'kclBatchNumber': {'slot_uri': 'neon:kclBatchNumber', 'description': 'Potassium chloride (KCl) batch number used to extract a set of samples', 'range': 'string', 'aliases': ['kcl batch number'], 'mappings': []}, 'kclBlank1Code': {'slot_uri': 'neon:kclBlank1Code', 'description': 'Barcode of the first potassium chloride (KCl) blank reference sample', 'range': 'string', 'aliases': ['kcl blank1 code'], 'mappings': []}, 'kclBlank1Fate': {'slot_uri': 'neon:kclBlank1Fate', 'description': 'Fate of the first potassium chloride (KCl) blank blank reference sample', 'range': 'string', 'aliases': ['kcl blank1 fate'], 'mappings': []}, 'kclBlank1ID': {'slot_uri': 'neon:kclBlank1ID', 'description': 'Identifier for the first potassium chloride (KCl) blank reference sample', 'range': 'string', 'aliases': ['kcl blank1 i d'], 'mappings': []}, 'kclBlank2Code': {'slot_uri': 'neon:kclBlank2Code', 'description': 'Barcode of the second potassium chloride (KCl) blank reference sample', 'range': 'string', 'aliases': ['kcl blank2 code'], 'mappings': []}, 'kclBlank2Fate': {'slot_uri': 'neon:kclBlank2Fate', 'description': 'Fate of the second potassium chloride (KCl) blank reference sample', 'range': 'string', 'aliases': ['kcl blank2 fate'], 'mappings': []}, 'kclBlank2ID': {'slot_uri': 'neon:kclBlank2ID', 'description': 'Identifier for the second potassium chloride (KCl) blank reference sample', 'range': 'string', 'aliases': ['kcl blank2 i d'], 'mappings': []}, 'kclBlank3Code': {'slot_uri': 'neon:kclBlank3Code', 'description': 'Barcode of the third potassium chloride (KCl) blank reference sample', 'range': 'string', 'aliases': ['kcl blank3 code'], 'mappings': []}, 'kclBlank3Fate': {'slot_uri': 'neon:kclBlank3Fate', 'description': 'Fate of the third potassium chloride (KCl) blank reference sample', 'range': 'string', 'aliases': ['kcl blank3 fate'], 'mappings': []}, 'kclBlank3ID': {'slot_uri': 'neon:kclBlank3ID', 'description': 'Identifier for the third potassium chloride (KCl) blank reference sample', 'range': 'string', 'aliases': ['kcl blank3 i d'], 'mappings': []}, 'kclNitrateNitriteNConc': {'slot_uri': 'neon:kclNitrateNitriteNConc', 'description': 'Concentration of nitrate + nitrite N in a potassium chloride extract', 'range': 'double', 'aliases': ['kcl nitrate nitrite n conc'], 'mappings': []}, 'kclReferenceCode': {'slot_uri': 'neon:kclReferenceCode', 'description': 'Barcode of a potassium chloride (KCl) blank reference', 'range': 'string', 'aliases': ['kcl reference code'], 'mappings': []}, 'kclReferenceFate': {'slot_uri': 'neon:kclReferenceFate', 'description': 'Fate of a potassium chloride (KCl) blank reference', 'range': 'string', 'aliases': ['kcl reference fate'], 'mappings': []}, 'kclReferenceID': {'slot_uri': 'neon:kclReferenceID', 'description': 'Identifier for a potassium chloride (KCl) blank reference', 'range': 'string', 'aliases': ['kcl reference i d'], 'mappings': []}, 'kclSampleCode': {'slot_uri': 'neon:kclSampleCode', 'description': 'Barcode of a potassium chloride (KCl) extract sample', 'range': 'string', 'aliases': ['kcl sample code'], 'mappings': []}, 'kclSampleFate': {'slot_uri': 'neon:kclSampleFate', 'description': 'Fate of a potassium chloride (KCl) extract sample', 'range': 'string', 'aliases': ['kcl sample fate'], 'mappings': []}, 'kclSampleID': {'slot_uri': 'neon:kclSampleID', 'description': 'Identifier for a potassium chloride (KCl) extract sample', 'range': 'string', 'aliases': ['kcl sample i d'], 'mappings': []}, 'kclVolume': {'slot_uri': 'neon:kclVolume', 'description': 'Volume potassium chloride (KCl) used to extract soil sample', 'range': 'double', 'aliases': ['kcl volume'], 'mappings': []}, 'lotID': {'slot_uri': 'neon:lotID', 'description': 'Lot or batch number for quality assurance material', 'range': 'string', 'aliases': ['lot i d'], 'mappings': []}, 'nitrateNitriteNAnalysisDate': {'slot_uri': 'neon:nitrateNitriteNAnalysisDate', 'description': 'Date a nitrate + nitrite N sample was analyzed', 'range': 'time', 'aliases': ['nitrate nitrite n analysis date'], 'mappings': []}, 'nitrateNitriteNAnalyzedBy': {'slot_uri': 'neon:nitrateNitriteNAnalyzedBy', 'description': 'Name of lab personnel analyzing sample for nitrate + nitrite N', 'range': 'string', 'aliases': ['nitrate nitrite n analyzed by'], 'mappings': []}, 'nitrateNitriteNInstrument': {'slot_uri': 'neon:nitrateNitriteNInstrument', 'description': 'Type of instrument used for nitrate + nitrite N analysis', 'range': 'string', 'aliases': ['nitrate nitrite n instrument'], 'mappings': []}, 'nitrateNitriteNMethod': {'slot_uri': 'neon:nitrateNitriteNMethod', 'description': 'Method used to test sample for nitrate + nitrite N concentration', 'range': 'string', 'aliases': ['nitrate nitrite n method'], 'mappings': []}, 'nitrateNitriteNQF': {'slot_uri': 'neon:nitrateNitriteNQF', 'description': 'Quality flag for nitrate + nitrite N values', 'range': 'string', 'aliases': ['nitrate nitrite n q f'], 'mappings': []}, 'nitrateNitriteNRemarks': {'slot_uri': 'neon:nitrateNitriteNRemarks', 'description': 'Free text comments accompanying the nitrate + nitrite N record', 'range': 'string', 'aliases': ['nitrate nitrite n remarks'], 'mappings': []}, 'nitrateNitriteNRepNum': {'slot_uri': 'neon:nitrateNitriteNRepNum', 'description': 'Analytical replicate number for nitrate + nitrite N sample', 'range': 'string', 'aliases': ['nitrate nitrite n rep num'], 'mappings': []}, 'nitrateNitriteNReviewedBy': {'slot_uri': 'neon:nitrateNitriteNReviewedBy', 'description': 'Name of lab personnel who reviewed nitrite + nitrate N data prior to submission', 'range': 'string', 'aliases': ['nitrate nitrite n reviewed by'], 'mappings': []}, 'receivedCondition': {'slot_uri': 'neon:receivedCondition', 'description': 'Condition of the sample on the date it was received', 'range': 'string', 'aliases': ['received condition'], 'mappings': []}, 'soilFreshMass': {'slot_uri': 'neon:soilFreshMass', 'description': 'Total fresh mass of soil', 'range': 'double', 'aliases': ['soil fresh mass'], 'mappings': []}, 'aquMicrobeType': {'slot_uri': 'neon:aquMicrobeType', 'description': 'Group of organisms in an aquatic microbes sample defined by habitat or location', 'range': 'string', 'aliases': ['aqu microbe type'], 'mappings': []}, 'aquMicrobeScrubArea': {'slot_uri': 'neon:aquMicrobeScrubArea', 'description': 'Sampler area of epilithon or epixylon sample', 'range': 'double', 'aliases': ['aqu microbe scrub area'], 'mappings': []}, 'fieldFilterCondition': {'slot_uri': 'neon:fieldFilterCondition', 'description': 'Condition of the filter reported in the field', 'range': 'string', 'aliases': ['field filter condition'], 'mappings': []}, 'fieldFilterConditionRemarks': {'slot_uri': 'neon:fieldFilterConditionRemarks', 'description': 'Additional description of the field filter condition', 'range': 'string', 'aliases': ['field filter condition remarks'], 'mappings': []}, 'fieldFilterDamage': {'slot_uri': 'neon:fieldFilterDamage', 'description': 'Field description of how the filter is damaged, if at all', 'range': 'string', 'aliases': ['field filter damage'], 'mappings': []}, 'fieldFilterDamageRemarks': {'slot_uri': 'neon:fieldFilterDamageRemarks', 'description': 'Additional description of possible field damages, e.g., tear, hole, piece missing', 'range': 'string', 'aliases': ['field filter damage remarks'], 'mappings': []}, 'filterID': {'slot_uri': 'neon:filterID', 'description': 'The non-repeating manufacturer-generated ID of each filter', 'range': 'string', 'aliases': ['filter i d'], 'mappings': []}, 'filterLotID': {'slot_uri': 'neon:filterLotID', 'description': 'Unique ID of the filter manufacturing lot', 'range': 'string', 'aliases': ['filter lot i d'], 'mappings': []}, 'filterWeighDate': {'slot_uri': 'neon:filterWeighDate', 'description': 'Date the post-deployment filter was weighed', 'range': 'time', 'aliases': ['filter weigh date'], 'mappings': []}, 'filterWeightDelta': {'slot_uri': 'neon:filterWeightDelta', 'description': 'Change in weight of the filter from pre- to post-deployment', 'range': 'double', 'aliases': ['filter weight delta'], 'mappings': []}, 'filterWeightPostDeploy': {'slot_uri': 'neon:filterWeightPostDeploy', 'description': 'Post-deployment weight of filter', 'range': 'double', 'aliases': ['filter weight post deploy'], 'mappings': []}, 'filterWeightPreDeploy': {'slot_uri': 'neon:filterWeightPreDeploy', 'description': 'Pre-deployment weight of the clean filter', 'range': 'double', 'aliases': ['filter weight pre deploy'], 'mappings': []}, 'filterWet': {'slot_uri': 'neon:filterWet', 'description': 'Percentage of the filter area that is wet', 'range': 'double', 'aliases': ['filter wet'], 'mappings': []}, 'labAverageHumidity': {'slot_uri': 'neon:labAverageHumidity', 'description': 'The historical average humidity of the laboratory at the time of weighing', 'range': 'double', 'aliases': ['lab average humidity'], 'mappings': []}, 'labFilterCondition': {'slot_uri': 'neon:labFilterCondition', 'description': 'Condition of the filter reported in the laboratory', 'range': 'string', 'aliases': ['lab filter condition'], 'mappings': []}, 'labFilterConditionRemarks': {'slot_uri': 'neon:labFilterConditionRemarks', 'description': 'Additional description of the laboratory filter condition', 'range': 'string', 'aliases': ['lab filter condition remarks'], 'mappings': []}, 'labFilterDamage': {'slot_uri': 'neon:labFilterDamage', 'description': 'Laboratory description of how the filter is damaged, if at all', 'range': 'string', 'aliases': ['lab filter damage'], 'mappings': []}, 'labFilterDamageRemarks': {'slot_uri': 'neon:labFilterDamageRemarks', 'description': 'Additional description of possible laboratory damages, e.g., tear, hole, piece missing', 'range': 'string', 'aliases': ['lab filter damage remarks'], 'mappings': []}, 'labQARemarks': {'slot_uri': 'neon:labQARemarks', 'description': 'Remarks on filter health and data quality from the lab', 'range': 'string', 'aliases': ['lab q a remarks'], 'mappings': []}, 'labRelativeHumidity': {'slot_uri': 'neon:labRelativeHumidity', 'description': 'The relative humidity of the laboratory at the time of weighing', 'range': 'double', 'aliases': ['lab relative humidity'], 'mappings': []}, 'labTemp': {'slot_uri': 'neon:labTemp', 'description': 'The temperature of the laboratory at the time of weighing', 'range': 'double', 'aliases': ['lab temp'], 'mappings': []}, 'equipCondition': {'slot_uri': 'neon:equipCondition', 'description': 'Condition of the equipment', 'range': 'string', 'aliases': ['equip condition'], 'mappings': []}, 'equipConditionDesc': {'slot_uri': 'neon:equipConditionDesc', 'description': 'Description of problems with the equipment', 'range': 'string', 'aliases': ['equip condition desc'], 'mappings': []}, 'tempSoni': {'slot_uri': 'neon:tempSoni', 'description': 'Sonic temperature (TSONIC)', 'range': 'string', 'aliases': ['temp soni'], 'mappings': []}, 'qfSoniCode': {'slot_uri': 'neon:qfSoniCode', 'description': 'Sensor error flag (QFSONIC,o5: Wrong embedded sensor code)', 'range': 'string', 'aliases': ['qf soni code'], 'mappings': []}, 'tempMean': {'slot_uri': 'neon:tempMean', 'description': 'Cell temperature (weighted average of head inlet and outlet temperature)', 'range': 'string', 'aliases': ['temp mean'], 'mappings': []}, 'presSum': {'slot_uri': 'neon:presSum', 'description': 'Total pressure (LI-7550 box pressure + head pressure)', 'range': 'string', 'aliases': ['pres sum'], 'mappings': []}, 'qfSensStatus': {'slot_uri': 'neon:qfSensStatus', 'description': 'Instrument status flag  (1=fail, 0=pass, -1=NA (i.e, could not be run))', 'range': 'integer', 'aliases': ['qf sens status'], 'mappings': []}, 'idGas': {'slot_uri': 'neon:idGas', 'description': 'Gas spectrum ID', 'range': 'integer', 'aliases': ['id gas'], 'mappings': []}, 'qfStusN2': {'slot_uri': 'neon:qfStusN2', 'description': 'Flag to indicate if the N2Flag is correctly set to air mode (0 = pass, 1 = fail)', 'range': 'integer', 'aliases': ['qf stus n2'], 'mappings': []}, 'qfLowRtioMoleWetH2O': {'slot_uri': 'neon:qfLowRtioMoleWetH2O', 'description': 'Flag to indicate the humidity in the air measured by PICARRO L2130-I is below 5000 ppm', 'range': 'integer', 'aliases': ['qf low rtio mole wet h2 o'], 'mappings': []}, 'qfTemp': {'slot_uri': 'neon:qfTemp', 'description': 'qfTemp', 'range': 'string', 'aliases': ['qf temp'], 'mappings': []}, 'qfRh': {'slot_uri': 'neon:qfRh', 'description': 'Flag indicates whether the temperature is outside the acceptable rangle (1=fail, 0=pass, -1=NA (i.e, could not be run))', 'range': 'integer', 'aliases': ['qf rh'], 'mappings': []}, 'qfFrt0': {'slot_uri': 'neon:qfFrt0', 'description': 'Flag indicates whether the gas flow rate is within the acceptable tolerance (1=fail, 0=pass, -1=NA (i.e, could not be run))', 'range': 'integer', 'aliases': ['qf frt0'], 'mappings': []}, 'typeGas': {'slot_uri': 'neon:typeGas', 'description': 'The type of reference standard gas that is used for validation.', 'range': 'string', 'aliases': ['type gas'], 'mappings': []}, 'typeGasCrdH2O': {'slot_uri': 'neon:typeGasCrdH2O', 'description': 'The zero air gas status for crdH2O during L2130-I validation', 'range': 'integer', 'aliases': ['type gas crd h2 o'], 'mappings': []}, 'lvlIrga': {'slot_uri': 'neon:lvlIrga', 'description': 'Measurement location (measurement level 1, measurement level 2, etc) that air is pulled from for the measurements by LI-COR LI840A IRGA', 'range': 'integer', 'aliases': ['lvl irga'], 'mappings': []}, 'lvlCrdCO2': {'slot_uri': 'neon:lvlCrdCO2', 'description': 'Measurement location (measurement level 1, measurement level 2, etc) that air is pulled from for the measurements by PICARRO G2131-I analyzer', 'range': 'integer', 'aliases': ['lvl crd c o2'], 'mappings': []}, 'lvlCrdH2O': {'slot_uri': 'neon:lvlCrdH2O', 'description': 'Measurement location (measurement level 1, measurement level 2, etc) that air is pulled from for the measurements by PICARRO L2130-I analyzer', 'range': 'integer', 'aliases': ['lvl crd h2 o'], 'mappings': []}, 'measTypeCrdH2O': {'slot_uri': 'neon:measTypeCrdH2O', 'description': 'Measurement type for PICARRO L2130-I cavity ring down isotopic analyzer (i.e., sampling or validation)', 'range': 'integer', 'aliases': ['meas type crd h2 o'], 'mappings': []}, 'measTypeCrdCO2': {'slot_uri': 'neon:measTypeCrdCO2', 'description': 'Measurement type for PICARRO G2131-I cavity ring down isotopic analyzer (i.e., sampling or validation)', 'range': 'integer', 'aliases': ['meas type crd c o2'], 'mappings': []}, 'qfValvIrga': {'slot_uri': 'neon:qfValvIrga', 'description': 'Flag indicates whether the system fails because IRGA vent valve is open (1=fail, 0=pass, -1=NA (i.e, could not be run)', 'range': 'integer', 'aliases': ['qf valv irga'], 'mappings': []}, 'measTypeIrga': {'slot_uri': 'neon:measTypeIrga', 'description': 'Measurement type for LI-COR LI840A IRGA (i.e., sampling or validation or calibration)', 'range': 'integer', 'aliases': ['meas type irga'], 'mappings': []}, 'collectionDateAccuracy': {'slot_uri': 'neon:collectionDateAccuracy', 'description': 'A numerical representation of the precision of the Collection Date given in days', 'range': 'string', 'aliases': ['collection date accuracy'], 'mappings': []}, 'collectionEventID': {'slot_uri': 'neon:collectionEventID', 'description': 'A optional event ID for submission purposes that allows for relational data support when multiple specimens are collected from a single site', 'range': 'string', 'aliases': ['collection event i d'], 'mappings': ['dwc:eventID']}, 'collectionNotes': {'slot_uri': 'neon:collectionNotes', 'description': 'Comments or notes about the collection event', 'range': 'string', 'aliases': ['collection notes'], 'mappings': ['dwc:identificationRemarks']}, 'collectors': {'slot_uri': 'neon:collectors', 'description': 'The full or abbreviated names of the individuals or team responsible for collecting the sample in the field', 'range': 'string', 'aliases': ['collectors'], 'mappings': ['dwc:recordedBy']}, 'coordinateAccuracy': {'slot_uri': 'neon:coordinateAccuracy', 'description': 'A decimal representation of the precision of the coordinates given in the decimalLatitude and decimalLongitude', 'range': 'double', 'aliases': ['coordinate accuracy'], 'mappings': ['dwc:coordinateUncertaintyInMeters']}, 'countryOcean': {'slot_uri': 'neon:countryOcean', 'description': 'The full, unabbreviated name of the country, major political unit, or ocean in which the organism was collected', 'range': 'string', 'aliases': ['country ocean'], 'mappings': []}, 'depth': {'slot_uri': 'neon:depth', 'description': 'For organisms collected beneath the surface of a water body', 'range': 'double', 'aliases': ['depth'], 'mappings': []}, 'depthPrecision': {'slot_uri': 'neon:depthPrecision', 'description': 'A numerical representation of the precision of the depth given in meters and is represented as greater or less than the depth value', 'range': 'double', 'aliases': ['depth precision'], 'mappings': []}, 'elevationPrecision': {'slot_uri': 'neon:elevationPrecision', 'description': 'A numerical representation of the precision of the elevation given in meters and is represented as greater or less than the elevation value', 'range': 'double', 'aliases': ['elevation precision'], 'mappings': []}, 'eventTime': {'slot_uri': 'neon:eventTime', 'description': 'The time or time of day during which the sample was collected', 'range': 'string', 'aliases': ['event time'], 'mappings': []}, 'exactSite': {'slot_uri': 'neon:exactSite', 'description': 'Additional text descriptions regarding the exact location of the collection site relative to a geographic or biologically relevant landmark', 'range': 'string', 'aliases': ['exact site'], 'mappings': []}, 'extraInfo': {'slot_uri': 'neon:extraInfo', 'description': 'A brief note or project term associated with the specimen for rapid analysis', 'range': 'string', 'aliases': ['extra info'], 'mappings': []}, 'gpsSource': {'slot_uri': 'neon:gpsSource', 'description': 'The source of the latitude and longitude measurements', 'range': 'string', 'aliases': ['gps source'], 'mappings': ['dwc:geodeticDatum']}, 'habitat': {'slot_uri': 'neon:habitat', 'description': 'A category or description of the habitat in which the event occurred', 'range': 'string', 'aliases': ['habitat'], 'mappings': []}, 'identificationMethod': {'slot_uri': 'neon:identificationMethod', 'description': 'The method used to identify the specimen', 'range': 'string', 'aliases': ['identification method'], 'mappings': []}, 'institutionStoring': {'slot_uri': 'neon:institutionStoring', 'description': 'The full name of the institution that has physical possession of the voucher specimen', 'range': 'string', 'aliases': ['institution storing'], 'mappings': []}, 'latitude': {'slot_uri': 'neon:latitude', 'description': 'The geographic latitude (in decimal degrees) of the geographic center of a location', 'range': 'double', 'aliases': ['latitude'], 'mappings': ['dwc:decimalLatitude']}, 'longitude': {'slot_uri': 'neon:longitude', 'description': 'The geographic longitude (in decimal degrees) of the geographic center of a location', 'range': 'double', 'aliases': ['longitude'], 'mappings': ['dwc:decimalLongitude']}, 'museumID': {'slot_uri': 'neon:museumID', 'description': 'Identifier for specimen assigned by formal collection upon accessioning, also referred to as the catalog number (format Institution acronym:collection code:catalog number)', 'range': 'string', 'aliases': ['museum i d'], 'mappings': ['dwc:materialSampleID']}, 'notes': {'slot_uri': 'neon:notes', 'description': 'General notes regarding the specimen', 'range': 'string', 'aliases': ['notes'], 'mappings': ['dwc:identificationRemarks']}, 'region': {'slot_uri': 'neon:region', 'description': 'The full, unabbreviated name of the county, shire, municipality, or park in which the organism was collected', 'range': 'string', 'aliases': ['region'], 'mappings': []}, 'sector': {'slot_uri': 'neon:sector', 'description': 'The full, unabbreviated name of the lake, conservation area or sector of park in which the organism was collected', 'range': 'string', 'aliases': ['sector'], 'mappings': []}, 'siteCode': {'slot_uri': 'neon:siteCode', 'description': 'The name of the sampling location', 'range': 'string', 'aliases': ['site code'], 'mappings': ['dwc:locationID']}, 'species': {'slot_uri': 'neon:species', 'description': 'The specific epithet (second part of the species name) of the scientific name', 'range': 'string', 'aliases': ['species'], 'mappings': ['dwc:specificEpithet']}, 'stateProvince': {'slot_uri': 'neon:stateProvince', 'description': 'State or province where data was collected', 'range': 'string', 'aliases': ['state province'], 'mappings': []}, 'taxonomyNotes': {'slot_uri': 'neon:taxonomyNotes', 'description': 'Additional notes relating to the identification of the organism', 'range': 'string', 'aliases': ['taxonomy notes'], 'mappings': ['dwc:identificationRemarks']}, 'tissueDescriptor': {'slot_uri': 'neon:tissueDescriptor', 'description': 'A brief description of the type of tissue or material analyzed', 'range': 'string', 'aliases': ['tissue descriptor'], 'mappings': []}, 'voucherStatus': {'slot_uri': 'neon:voucherStatus', 'description': 'Status of the specimen in an accessioning process', 'range': 'string', 'aliases': ['voucher status'], 'mappings': []}, 'qfSoniSignalLow': {'slot_uri': 'neon:qfSoniSignalLow', 'description': 'Sensor signal flag (QFSONIC s4 Low signal amplitude)', 'range': 'integer', 'aliases': ['qf soni signal low'], 'mappings': []}, 'maxAllowableDrawdown': {'slot_uri': 'neon:maxAllowableDrawdown', 'description': 'Maximum allowable drawdown for low-yield method sampling', 'range': 'double', 'aliases': ['max allowable drawdown'], 'mappings': []}, 'measTotalWellDepth': {'slot_uri': 'neon:measTotalWellDepth', 'description': 'Total well depth measured by field technicians when well depth has changed by > 10 cm', 'range': 'double', 'aliases': ['meas total well depth'], 'mappings': []}, 'pumpPlacementDepth': {'slot_uri': 'neon:pumpPlacementDepth', 'description': 'Depth of pump placement for low-yield method', 'range': 'double', 'aliases': ['pump placement depth'], 'mappings': []}, 'screenedIntervalDepth': {'slot_uri': 'neon:screenedIntervalDepth', 'description': 'Depth to the screened interval for low-yield method calculations', 'range': 'double', 'aliases': ['screened interval depth'], 'mappings': []}, 'wellDepthChanged': {'slot_uri': 'neon:wellDepthChanged', 'description': 'Indicates whether or not the total well depth has changed by > 10 cm', 'range': 'string', 'aliases': ['well depth changed'], 'mappings': []}, 'bankUndercut': {'slot_uri': 'neon:bankUndercut', 'description': 'A yes or no indication of whether or not a bank edge is undercut', 'range': 'string', 'aliases': ['bank undercut'], 'mappings': []}, 'actualOrEstimated': {'slot_uri': 'neon:actualOrEstimated', 'description': 'Indication of whether the count is actual or estimated', 'range': 'string', 'aliases': ['actual or estimated'], 'mappings': []}, 'bulkFishCount': {'slot_uri': 'neon:bulkFishCount', 'description': 'The number of fish counted during bulk processing', 'range': 'string', 'aliases': ['bulk fish count'], 'mappings': []}, 'bulkMortality': {'slot_uri': 'neon:bulkMortality', 'description': 'The number of specimens found dead in bulk processing', 'range': 'string', 'aliases': ['bulk mortality'], 'mappings': []}, 'cCollectedBy': {'slot_uri': 'neon:cCollectedBy', 'description': 'Additional NEON technician username who collected the data', 'range': 'string', 'aliases': ['c collected by'], 'mappings': []}, 'delt': {'slot_uri': 'neon:delt', 'description': 'Indication of any deformities, eroded fins, lesions/parasites, tumors', 'range': 'string', 'aliases': ['delt'], 'mappings': []}, 'efTime': {'slot_uri': 'neon:efTime', 'description': 'Operational time of the electrofisher', 'range': 'double', 'aliases': ['ef time'], 'mappings': []}, 'efTime2': {'slot_uri': 'neon:efTime2', 'description': 'Operational time of the electrofisher for the second electrofisher', 'range': 'double', 'aliases': ['ef time2'], 'mappings': []}, 'finalDutyCycle': {'slot_uri': 'neon:finalDutyCycle', 'description': 'Duty cycle at the end of data collection', 'range': 'double', 'aliases': ['final duty cycle'], 'mappings': []}, 'finalDutyCycle2': {'slot_uri': 'neon:finalDutyCycle2', 'description': 'Duty cycle at the end of data collection for the second electrofisher', 'range': 'double', 'aliases': ['final duty cycle2'], 'mappings': []}, 'finalFrequency': {'slot_uri': 'neon:finalFrequency', 'description': 'Frequency at the end of data collection', 'range': 'double', 'aliases': ['final frequency'], 'mappings': []}, 'finalFrequency2': {'slot_uri': 'neon:finalFrequency2', 'description': 'Frequency at the end of data collection for the second electrofisher', 'range': 'double', 'aliases': ['final frequency2'], 'mappings': []}, 'finalVoltage': {'slot_uri': 'neon:finalVoltage', 'description': 'Voltage at the end of data collection', 'range': 'double', 'aliases': ['final voltage'], 'mappings': []}, 'finalVoltage2': {'slot_uri': 'neon:finalVoltage2', 'description': 'Voltage at the end of data collection for the second electrofisher', 'range': 'double', 'aliases': ['final voltage2'], 'mappings': []}, 'fishLifeStage': {'slot_uri': 'neon:fishLifeStage', 'description': 'Indication of the life stage of the fish', 'range': 'string', 'aliases': ['fish life stage'], 'mappings': []}, 'fishTotalLength': {'slot_uri': 'neon:fishTotalLength', 'description': 'Length of the specimen', 'range': 'double', 'aliases': ['fish total length'], 'mappings': []}, 'fishWeight': {'slot_uri': 'neon:fishWeight', 'description': 'Live weight as measured in the field', 'range': 'double', 'aliases': ['fish weight'], 'mappings': []}, 'fixedRandomReach': {'slot_uri': 'neon:fixedRandomReach', 'description': 'An indication of whether the reach is fixed or random', 'range': 'string', 'aliases': ['fixed random reach'], 'mappings': []}, 'initialDutyCycle': {'slot_uri': 'neon:initialDutyCycle', 'description': 'Duty cycle at the start of data collection', 'range': 'double', 'aliases': ['initial duty cycle'], 'mappings': []}, 'initialDutyCycle2': {'slot_uri': 'neon:initialDutyCycle2', 'description': 'Duty cycle at the start of data collection for the second electrofisher', 'range': 'double', 'aliases': ['initial duty cycle2'], 'mappings': []}, 'initialFrequency': {'slot_uri': 'neon:initialFrequency', 'description': 'Frequency at the start of data collection', 'range': 'double', 'aliases': ['initial frequency'], 'mappings': []}, 'initialFrequency2': {'slot_uri': 'neon:initialFrequency2', 'description': 'Frequency at the start of data collection for the second electrofisher', 'range': 'double', 'aliases': ['initial frequency2'], 'mappings': []}, 'initialVoltage': {'slot_uri': 'neon:initialVoltage', 'description': 'Voltage at the start of data collection', 'range': 'double', 'aliases': ['initial voltage'], 'mappings': []}, 'initialVoltage2': {'slot_uri': 'neon:initialVoltage2', 'description': 'Voltage at the start of data collection for the second electrofisher', 'range': 'double', 'aliases': ['initial voltage2'], 'mappings': []}, 'efInjury': {'slot_uri': 'neon:efInjury', 'description': 'Indication of injury from the electrofishing equipment (burn marks, bent spine, hemorrhage)', 'range': 'string', 'aliases': ['ef injury'], 'mappings': []}, 'measuredReachLength': {'slot_uri': 'neon:measuredReachLength', 'description': 'The length of the reach as measured by the technicians when the reach was established', 'range': 'double', 'aliases': ['measured reach length'], 'mappings': []}, 'efMortality': {'slot_uri': 'neon:efMortality', 'description': 'Indication of mortality from the electrofishing equipment', 'range': 'string', 'aliases': ['ef mortality'], 'mappings': []}, 'netDeploymentTime': {'slot_uri': 'neon:netDeploymentTime', 'description': 'Total time of deployment of the net', 'range': 'double', 'aliases': ['net deployment time'], 'mappings': []}, 'netDepth': {'slot_uri': 'neon:netDepth', 'description': 'Deployment depth of the net', 'range': 'double', 'aliases': ['net depth'], 'mappings': []}, 'netEndTime': {'slot_uri': 'neon:netEndTime', 'description': 'Time the net was pulled', 'range': 'time', 'aliases': ['net end time'], 'mappings': []}, 'netIntegrity': {'slot_uri': 'neon:netIntegrity', 'description': 'Indication of the integrity of the net', 'range': 'string', 'aliases': ['net integrity'], 'mappings': []}, 'netLength': {'slot_uri': 'neon:netLength', 'description': 'Length of the net', 'range': 'double', 'aliases': ['net length'], 'mappings': []}, 'netSetTime': {'slot_uri': 'neon:netSetTime', 'description': 'Time the net was set', 'range': 'time', 'aliases': ['net set time'], 'mappings': []}, 'nonTargetSpecies': {'slot_uri': 'neon:nonTargetSpecies', 'description': 'Identifier for non-target species captured', 'range': 'string', 'aliases': ['non target species'], 'mappings': []}, 'passEndTime': {'slot_uri': 'neon:passEndTime', 'description': 'The end time of the pass', 'range': 'time', 'aliases': ['pass end time'], 'mappings': []}, 'passNumber': {'slot_uri': 'neon:passNumber', 'description': 'Number of the sampling pass within a reach', 'range': 'string', 'aliases': ['pass number'], 'mappings': []}, 'passStartTime': {'slot_uri': 'neon:passStartTime', 'description': 'The start time of the pass', 'range': 'time', 'aliases': ['pass start time'], 'mappings': []}, 'plateID': {'slot_uri': 'neon:plateID', 'description': 'Identifier of the multi-well storage plate', 'range': 'string', 'aliases': ['plate i d'], 'mappings': []}, 'reachCondition': {'slot_uri': 'neon:reachCondition', 'description': 'An indication of the condition of the sampling reach', 'range': 'string', 'aliases': ['reach condition'], 'mappings': []}, 'reachID': {'slot_uri': 'neon:reachID', 'description': 'An identifier for the set of information associated with the reach', 'range': 'string', 'aliases': ['reach i d'], 'mappings': []}, 'sampleTypeCollected': {'slot_uri': 'neon:sampleTypeCollected', 'description': 'Type of sample collected', 'range': 'string', 'aliases': ['sample type collected'], 'mappings': []}, 'settingsChanged': {'slot_uri': 'neon:settingsChanged', 'description': 'Number of times the settings changed', 'range': 'string', 'aliases': ['settings changed'], 'mappings': []}, 'settingsChanged2': {'slot_uri': 'neon:settingsChanged2', 'description': 'Number of times the settings changed for the second electrofisher', 'range': 'string', 'aliases': ['settings changed2'], 'mappings': []}, 'specimenNumber': {'slot_uri': 'neon:specimenNumber', 'description': 'Number of the specimen', 'range': 'string', 'aliases': ['specimen number'], 'mappings': []}, 'subdominantHabitatType': {'slot_uri': 'neon:subdominantHabitatType', 'description': 'Subdominant habitat type sampled', 'range': 'string', 'aliases': ['subdominant habitat type'], 'mappings': []}, 'totalFishCount': {'slot_uri': 'neon:totalFishCount', 'description': 'The total number of fish, including captured specimens whose weight and length are recorded plus additional bulk-counted individuals', 'range': 'string', 'aliases': ['total fish count'], 'mappings': []}, 'voucherSampleCollected': {'slot_uri': 'neon:voucherSampleCollected', 'description': 'Indication of whether the sample was collected as a voucher', 'range': 'string', 'aliases': ['voucher sample collected'], 'mappings': []}, 'analyteConcText': {'slot_uri': 'neon:analyteConcText', 'description': 'Analyte that has a value returned as a string', 'range': 'string', 'aliases': ['analyte conc text'], 'mappings': []}, 'analyteObservedValue': {'slot_uri': 'neon:analyteObservedValue', 'description': 'The measured value of a given analyte for a standard reference material, with units tied to the analyte', 'range': 'double', 'aliases': ['analyte observed value'], 'mappings': []}, 'analytePercentSD': {'slot_uri': 'neon:analytePercentSD', 'description': 'Standard deviation of the analyte expressed as a percent, based on long-term analyses of quality assurance materials or standards treated as unknowns', 'range': 'double', 'aliases': ['analyte percent s d'], 'mappings': []}, 'analyteSampleValue': {'slot_uri': 'neon:analyteSampleValue', 'description': 'The known value of a given analyte for a sample, with units tied to the analyte', 'range': 'double', 'aliases': ['analyte sample value'], 'mappings': []}, 'analyteSurrogate': {'slot_uri': 'neon:analyteSurrogate', 'description': 'Indicator for whether an analyte is a surrogate', 'range': 'string', 'aliases': ['analyte surrogate'], 'mappings': []}, 'carbonSedimentSampleFate': {'slot_uri': 'neon:carbonSedimentSampleFate', 'description': 'Fate of a sediment sample collected for analysis of carbon content', 'range': 'string', 'aliases': ['carbon sediment sample fate'], 'mappings': []}, 'carbonSedimentSampleID': {'slot_uri': 'neon:carbonSedimentSampleID', 'description': 'Unique identifier for a sediment sample collected for analysis of carbon content', 'range': 'string', 'aliases': ['carbon sediment sample i d'], 'mappings': []}, 'carbonSedSampleCode': {'slot_uri': 'neon:carbonSedSampleCode', 'description': 'Barcode for a sediment sample collected for analysis of carbon content', 'range': 'string', 'aliases': ['carbon sed sample code'], 'mappings': []}, 'cas': {'slot_uri': 'neon:cas', 'description': 'Chemical Abstracts Service registry number', 'range': 'string', 'aliases': ['cas'], 'mappings': []}, 'coreLength': {'slot_uri': 'neon:coreLength', 'description': 'Length of core', 'range': 'double', 'aliases': ['core length'], 'mappings': []}, 'deptName': {'slot_uri': 'neon:deptName', 'description': 'External lab department', 'range': 'string', 'aliases': ['dept name'], 'mappings': []}, 'downstreamCoordUncert': {'slot_uri': 'neon:downstreamCoordUncert', 'description': 'The horizontal distance (in meters) from the given decimalLatitude and decimalLongitude describing the smallest circle containing the whole of the downstream location. Zero is not a valid value for this term', 'range': 'double', 'aliases': ['downstream coord uncert'], 'mappings': []}, 'downstreamDecimalLatitude': {'slot_uri': 'neon:downstreamDecimalLatitude', 'description': 'The geographic latitude (in decimal degrees, WGS84) of the geographic center of the reference area of a downstream location', 'range': 'double', 'aliases': ['downstream decimal latitude'], 'mappings': []}, 'downstreamDecimalLongitude': {'slot_uri': 'neon:downstreamDecimalLongitude', 'description': 'The geographic longitude (in decimal degrees, WGS84) of the geographic center of the reference area at a downstream location', 'range': 'double', 'aliases': ['downstream decimal longitude'], 'mappings': []}, 'downstreamGeodeticDatum': {'slot_uri': 'neon:downstreamGeodeticDatum', 'description': 'Model used to measure downstream horizontal position on the earth', 'range': 'string', 'aliases': ['downstream geodetic datum'], 'mappings': []}, 'extendedQualifier1': {'slot_uri': 'neon:extendedQualifier1', 'description': 'First extended data qualifier returned for the sample and analyte', 'range': 'string', 'aliases': ['extended qualifier1'], 'mappings': []}, 'extendedQualifier2': {'slot_uri': 'neon:extendedQualifier2', 'description': 'Second extended data qualifier returned for the sample and analyte', 'range': 'string', 'aliases': ['extended qualifier2'], 'mappings': []}, 'extendedQualifier3': {'slot_uri': 'neon:extendedQualifier3', 'description': 'Third extended data qualifier returned for the sample and analyte', 'range': 'string', 'aliases': ['extended qualifier3'], 'mappings': []}, 'extendedQualifier4': {'slot_uri': 'neon:extendedQualifier4', 'description': 'Fourth extended data qualifier returned for the sample and analyte', 'range': 'string', 'aliases': ['extended qualifier4'], 'mappings': []}, 'extendedQualifier5': {'slot_uri': 'neon:extendedQualifier5', 'description': 'Fifth extended data qualifier returned for the sample and analyte', 'range': 'string', 'aliases': ['extended qualifier5'], 'mappings': []}, 'externalQualifier': {'slot_uri': 'neon:externalQualifier', 'description': 'A data qualifier returned by an external laboratory', 'range': 'string', 'aliases': ['external qualifier'], 'mappings': []}, 'inorganicSedimentSampleFate': {'slot_uri': 'neon:inorganicSedimentSampleFate', 'description': 'Fate of a sediment sample collected for analysis of inorganic analytes', 'range': 'string', 'aliases': ['inorganic sediment sample fate'], 'mappings': []}, 'inorganicSedimentSampleID': {'slot_uri': 'neon:inorganicSedimentSampleID', 'description': 'Unique identifier for a sediment sample collected for analysis of inorganic analytes', 'range': 'string', 'aliases': ['inorganic sediment sample i d'], 'mappings': []}, 'inorgSedimentSampleBarcode': {'slot_uri': 'neon:inorgSedimentSampleBarcode', 'description': 'Barcode for a sediment sample collected for analysis of inorganic analytes', 'range': 'string', 'aliases': ['inorg sediment sample barcode'], 'mappings': []}, 'observations': {'slot_uri': 'neon:observations', 'description': 'Notes about quality of a sample; measurement; or area', 'range': 'string', 'aliases': ['observations'], 'mappings': []}, 'organicSedimentSampleFate': {'slot_uri': 'neon:organicSedimentSampleFate', 'description': 'Fate of a sediment sample collected for analysis of organic analytes', 'range': 'string', 'aliases': ['organic sediment sample fate'], 'mappings': []}, 'organicSedimentSampleID': {'slot_uri': 'neon:organicSedimentSampleID', 'description': 'Unique identifier for a sediment sample collected for analysis of organic analytes', 'range': 'string', 'aliases': ['organic sediment sample i d'], 'mappings': []}, 'orgSedimentSampleBarcode': {'slot_uri': 'neon:orgSedimentSampleBarcode', 'description': 'Barcode for a sediment sample collected for analysis of organic analytes', 'range': 'string', 'aliases': ['org sediment sample barcode'], 'mappings': []}, 'physicalSedimentSampleFate': {'slot_uri': 'neon:physicalSedimentSampleFate', 'description': 'Fate of a sediment sample collected for analysis of physical properties', 'range': 'string', 'aliases': ['physical sediment sample fate'], 'mappings': []}, 'physicalSedimentSampleID': {'slot_uri': 'neon:physicalSedimentSampleID', 'description': 'Unique identifier for a sediment sample collected for analysis of physical properties', 'range': 'string', 'aliases': ['physical sediment sample i d'], 'mappings': []}, 'physSedimentSampleBarcode': {'slot_uri': 'neon:physSedimentSampleBarcode', 'description': 'Barcode for a sediment sample collected for analysis of physical properties', 'range': 'string', 'aliases': ['phys sediment sample barcode'], 'mappings': []}, 'pointSampleCount': {'slot_uri': 'neon:pointSampleCount', 'description': 'Number of point samples collected for a given location', 'range': 'string', 'aliases': ['point sample count'], 'mappings': []}, 'practicalQuantitationLimit': {'slot_uri': 'neon:practicalQuantitationLimit', 'description': 'Practical Quantitation Limit.  Synonymous with the EPA term: minimum level', 'range': 'double', 'aliases': ['practical quantitation limit'], 'mappings': []}, 'projectID': {'slot_uri': 'neon:projectID', 'description': 'Unique identifier for the project associated with data returned from an external laboratory', 'range': 'string', 'aliases': ['project i d'], 'mappings': []}, 'qaQF': {'slot_uri': 'neon:qaQF', 'description': 'Quality flag for quality control sample', 'range': 'string', 'aliases': ['qa q f'], 'mappings': []}, 'quantitationLimit': {'slot_uri': 'neon:quantitationLimit', 'description': 'Quantitation limit for the specified method-analyte, with units tied to the analyte', 'range': 'double', 'aliases': ['quantitation limit'], 'mappings': []}, 'reagentSN': {'slot_uri': 'neon:reagentSN', 'description': 'Serial number assigned to reagents or standards to trace to the manufacturer certificate of analysis', 'range': 'string', 'aliases': ['reagent s n'], 'mappings': []}, 'recovery': {'slot_uri': 'neon:recovery', 'description': 'Recovered amount of the known value or spike', 'range': 'double', 'aliases': ['recovery'], 'mappings': []}, 'recoveryLimitLower': {'slot_uri': 'neon:recoveryLimitLower', 'description': 'Lower limit for percent recovery', 'range': 'double', 'aliases': ['recovery limit lower'], 'mappings': []}, 'recoveryLimitUpper': {'slot_uri': 'neon:recoveryLimitUpper', 'description': 'Upper limit for percent recovery', 'range': 'double', 'aliases': ['recovery limit upper'], 'mappings': []}, 'relativePercentDifference': {'slot_uri': 'neon:relativePercentDifference', 'description': 'Percent difference between observed values of a sample or standard run in duplicate', 'range': 'double', 'aliases': ['relative percent difference'], 'mappings': []}, 'relativePercentLimit': {'slot_uri': 'neon:relativePercentLimit', 'description': 'Upper limit for relative percent difference', 'range': 'double', 'aliases': ['relative percent limit'], 'mappings': []}, 'sedimentSampleBarcode': {'slot_uri': 'neon:sedimentSampleBarcode', 'description': 'Barcode for a sediment sample', 'range': 'string', 'aliases': ['sediment sample barcode'], 'mappings': []}, 'sedimentSampleFate': {'slot_uri': 'neon:sedimentSampleFate', 'description': 'Fate of a sediment sample', 'range': 'string', 'aliases': ['sediment sample fate'], 'mappings': []}, 'sedimentSampleID': {'slot_uri': 'neon:sedimentSampleID', 'description': 'Unique identifier for a sediment sample', 'range': 'string', 'aliases': ['sediment sample i d'], 'mappings': []}, 'upstreamCoordUncert': {'slot_uri': 'neon:upstreamCoordUncert', 'description': 'The horizontal distance (in meters) from the given upstreamDecimalLatitude and upstreamDecimalLongitude describing the smallest circle containing the whole of the downstream location. Zero is not a valid value for this term', 'range': 'double', 'aliases': ['upstream coord uncert'], 'mappings': []}, 'upstreamDecimalLatitude': {'slot_uri': 'neon:upstreamDecimalLatitude', 'description': 'The geographic latitude (in decimal degrees; WGS84) of the upstream geographic extent of the reference area of a downstream location', 'range': 'double', 'aliases': ['upstream decimal latitude'], 'mappings': []}, 'upstreamDecimalLongitude': {'slot_uri': 'neon:upstreamDecimalLongitude', 'description': 'The geographic longitude (in decimal degrees; WGS84) of the upstream geographic extent of the reference area at a downstream location', 'range': 'double', 'aliases': ['upstream decimal longitude'], 'mappings': []}, 'upstreamGeodeticDatum': {'slot_uri': 'neon:upstreamGeodeticDatum', 'description': 'Model used to measure upstream horizontal position on the earth', 'range': 'string', 'aliases': ['upstream geodetic datum'], 'mappings': []}, 'zoneNumber': {'slot_uri': 'neon:zoneNumber', 'description': 'Number of the zone sampled for a given location', 'range': 'string', 'aliases': ['zone number'], 'mappings': []}, 'zoneSampleCount': {'slot_uri': 'neon:zoneSampleCount', 'description': 'Number of zone samples collected for a given location', 'range': 'string', 'aliases': ['zone sample count'], 'mappings': []}, 'copyNumberStandardDeviation': {'slot_uri': 'neon:copyNumberStandardDeviation', 'description': 'Standard deviation in gene copy number in a sample', 'range': 'double', 'aliases': ['copy number standard deviation'], 'mappings': []}, 'meanCopyNumber': {'slot_uri': 'neon:meanCopyNumber', 'description': 'Average gene copy number in a sample in copies per nanogram of DNA', 'range': 'double', 'aliases': ['mean copy number'], 'mappings': []}, 'meanCqValue': {'slot_uri': 'neon:meanCqValue', 'description': 'Average quantification cycle or threshold number in a sample', 'range': 'double', 'aliases': ['mean cq value'], 'mappings': []}, 'rep1CopyNumber': {'slot_uri': 'neon:rep1CopyNumber', 'description': 'Gene copy number in a sample replicate 1 in copies per nanogram of DNA', 'range': 'double', 'aliases': ['rep1 copy number'], 'mappings': []}, 'rep1CqValue': {'slot_uri': 'neon:rep1CqValue', 'description': 'Quantification cycle or threshold number in sample replicate 1', 'range': 'double', 'aliases': ['rep1 cq value'], 'mappings': []}, 'rep1MeltingTemperature': {'slot_uri': 'neon:rep1MeltingTemperature', 'description': 'Melting temperature measurement for replicate 1', 'range': 'double', 'aliases': ['rep1 melting temperature'], 'mappings': []}, 'rep2CopyNumber': {'slot_uri': 'neon:rep2CopyNumber', 'description': 'Gene copy number in a sample replicate 2 in copies per nanogram of DNA', 'range': 'double', 'aliases': ['rep2 copy number'], 'mappings': []}, 'rep2CqValue': {'slot_uri': 'neon:rep2CqValue', 'description': 'Quantification cycle or threshold number in sample replicate 2', 'range': 'double', 'aliases': ['rep2 cq value'], 'mappings': []}, 'rep2MeltingTemperature': {'slot_uri': 'neon:rep2MeltingTemperature', 'description': 'Melting temperature measurement for replicate 2', 'range': 'double', 'aliases': ['rep2 melting temperature'], 'mappings': []}, 'rep3CopyNumber': {'slot_uri': 'neon:rep3CopyNumber', 'description': 'Gene copy number in a sample replicate 3 in copies per nanogram of DNA', 'range': 'double', 'aliases': ['rep3 copy number'], 'mappings': []}, 'rep3CqValue': {'slot_uri': 'neon:rep3CqValue', 'description': 'Quantification cycle or threshold number in sample replicate 3', 'range': 'double', 'aliases': ['rep3 cq value'], 'mappings': []}, 'rep3MeltingTemperature': {'slot_uri': 'neon:rep3MeltingTemperature', 'description': 'Melting temperature measurement for replicate 3', 'range': 'double', 'aliases': ['rep3 melting temperature'], 'mappings': []}, 'rep4CopyNumber': {'slot_uri': 'neon:rep4CopyNumber', 'description': 'Gene copy number in a sample replicate 4 in copies per nanogram of DNA', 'range': 'double', 'aliases': ['rep4 copy number'], 'mappings': []}, 'rep4CqValue': {'slot_uri': 'neon:rep4CqValue', 'description': 'Quantification cycle or threshold number in sample replicate 4', 'range': 'double', 'aliases': ['rep4 cq value'], 'mappings': []}, 'rep5CopyNumber': {'slot_uri': 'neon:rep5CopyNumber', 'description': 'Gene copy number in a sample replicate 5 in copies per nanogram of DNA', 'range': 'double', 'aliases': ['rep5 copy number'], 'mappings': []}, 'rep5CqValue': {'slot_uri': 'neon:rep5CqValue', 'description': 'Quantification cycle or threshold number in sample replicate 5', 'range': 'double', 'aliases': ['rep5 cq value'], 'mappings': []}, 'targetTaxonCode': {'slot_uri': 'neon:targetTaxonCode', 'description': 'Barcode of taxon group-specific sample', 'range': 'string', 'aliases': ['target taxon code'], 'mappings': []}, 'targetTaxonFate': {'slot_uri': 'neon:targetTaxonFate', 'description': 'Fate of taxon group-specific sample', 'range': 'string', 'aliases': ['target taxon fate'], 'mappings': []}, 'targetTaxonID': {'slot_uri': 'neon:targetTaxonID', 'description': 'Taxon group-specific identifier for sample', 'range': 'string', 'aliases': ['target taxon i d'], 'mappings': []}, 'qfSoniUnrs': {'slot_uri': 'neon:qfSoniUnrs', 'description': 'Sensor error flag (QFSONIC,o1: Sensor unresponsive)', 'range': 'integer', 'aliases': ['qf soni unrs'], 'mappings': []}, 'qfSoniData': {'slot_uri': 'neon:qfSoniData', 'description': 'Sensor error flag (QFSONIC,o2: No data available)', 'range': 'integer', 'aliases': ['qf soni data'], 'mappings': []}, 'qfSoniTrig': {'slot_uri': 'neon:qfSoniTrig', 'description': 'Sensor error flag (QFSONIC,o3: Sensor trigger source lost)', 'range': 'integer', 'aliases': ['qf soni trig'], 'mappings': []}, 'qfSoniComm': {'slot_uri': 'neon:qfSoniComm', 'description': 'Sensor error flag (QFSONIC,o4: SDM communications error)', 'range': 'integer', 'aliases': ['qf soni comm'], 'mappings': []}, 'qfSoniTemp': {'slot_uri': 'neon:qfSoniTemp', 'description': 'Sensor signal flag (QFSONIC,s1: Axes TSONIC difference > 4K)', 'range': 'integer', 'aliases': ['qf soni temp'], 'mappings': []}, 'qfSoniSignalPoor': {'slot_uri': 'neon:qfSoniSignalPoor', 'description': 'Sensor signal flag (QFSONIC,s2: Poor signal lock)', 'range': 'integer', 'aliases': ['qf soni signal poor'], 'mappings': []}, 'qfSoniSignalHigh': {'slot_uri': 'neon:qfSoniSignalHigh', 'description': 'Sensor signal flag (QFSONIC,s3: High signal amplitude)', 'range': 'integer', 'aliases': ['qf soni signal high'], 'mappings': []}, 'qfAmrsVal': {'slot_uri': 'neon:qfAmrsVal', 'description': 'Sensor signal flag: Selftest (gives the result of the last manually ran self-test)', 'range': 'integer', 'aliases': ['qf amrs val'], 'mappings': []}, 'qfAmrsFilt': {'slot_uri': 'neon:qfAmrsFilt', 'description': 'Sensor signal flag: Filter Valid (indicates if input into filter orientation filter is reliable and or complete)(1=pass, 0=fail, -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['qf amrs filt'], 'mappings': []}, 'qfAmrsVelo': {'slot_uri': 'neon:qfAmrsVelo', 'description': 'Sensor signal flag: NoVelocityUpdate status', 'range': 'integer', 'aliases': ['qf amrs velo'], 'mappings': []}, 'qfAmrsRng': {'slot_uri': 'neon:qfAmrsRng', 'description': 'Sensor signal flag: Clipping indication', 'range': 'integer', 'aliases': ['qf amrs rng'], 'mappings': []}, 'qfIrgaHead': {'slot_uri': 'neon:qfIrgaHead', 'description': 'Sensor flag (fL01: Head detect)', 'range': 'integer', 'aliases': ['qf irga head'], 'mappings': []}, 'qfIrgaTempOut': {'slot_uri': 'neon:qfIrgaTempOut', 'description': 'Sensor flag (fL02: Outlet temperature)', 'range': 'integer', 'aliases': ['qf irga temp out'], 'mappings': []}, 'qfIrgaTempIn': {'slot_uri': 'neon:qfIrgaTempIn', 'description': 'Sensor flag (fL03: Inlet temperature)', 'range': 'integer', 'aliases': ['qf irga temp in'], 'mappings': []}, 'qfIrgaAux': {'slot_uri': 'neon:qfIrgaAux', 'description': 'Sensor flag (fL04: Aux input)', 'range': 'integer', 'aliases': ['qf irga aux'], 'mappings': []}, 'qfIrgaPres': {'slot_uri': 'neon:qfIrgaPres', 'description': 'Sensor flag (fL05: Differential pressure)', 'range': 'integer', 'aliases': ['qf irga pres'], 'mappings': []}, 'qfIrgaChop': {'slot_uri': 'neon:qfIrgaChop', 'description': 'Sensor flag (fL06: Chopper)', 'range': 'integer', 'aliases': ['qf irga chop'], 'mappings': []}, 'qfIrgaDetc': {'slot_uri': 'neon:qfIrgaDetc', 'description': 'Sensor flag (fL07: Detector)', 'range': 'integer', 'aliases': ['qf irga detc'], 'mappings': []}, 'qfIrgaPll': {'slot_uri': 'neon:qfIrgaPll', 'description': 'Sensor flag (fL08: PLL)', 'range': 'integer', 'aliases': ['qf irga pll'], 'mappings': []}, 'qfIrgaSync': {'slot_uri': 'neon:qfIrgaSync', 'description': 'Sensor flag (fL09: Sync)', 'range': 'integer', 'aliases': ['qf irga sync'], 'mappings': []}, 'qfIrgaAgc': {'slot_uri': 'neon:qfIrgaAgc', 'description': 'Sensor flag (fL10: AGC)', 'range': 'integer', 'aliases': ['qf irga agc'], 'mappings': []}, 'sensorDepthAlphaQF': {'slot_uri': 'neon:sensorDepthAlphaQF', 'description': 'Water depth of measurement quality assurance and quality control report for the alpha quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['sensor depth alpha q f'], 'mappings': []}, 'sensorDepthBetaQF': {'slot_uri': 'neon:sensorDepthBetaQF', 'description': 'Water depth of measurement quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail 0=pass -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['sensor depth beta q f'], 'mappings': []}, 'sensorDepthConsistQF': {'slot_uri': 'neon:sensorDepthConsistQF', 'description': 'Water depth of measurement quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['sensor depth consist q f'], 'mappings': []}, 'sensorDepthGapQF': {'slot_uri': 'neon:sensorDepthGapQF', 'description': 'Water depth of measurement quality flag for the gap test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['sensor depth gap q f'], 'mappings': []}, 'sensorDepthNullQF': {'slot_uri': 'neon:sensorDepthNullQF', 'description': 'Water depth of measurement quality flag for the null test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['sensor depth null q f'], 'mappings': []}, 'sensorDepthPersistQF': {'slot_uri': 'neon:sensorDepthPersistQF', 'description': 'Water depth of measurement quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['sensor depth persist q f'], 'mappings': []}, 'sensorDepthRangeQF': {'slot_uri': 'neon:sensorDepthRangeQF', 'description': 'Water depth of measurement quality flag for the range test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['sensor depth range q f'], 'mappings': []}, 'sensorDepthSpikeQF': {'slot_uri': 'neon:sensorDepthSpikeQF', 'description': 'Water depth of measurement quality flag for the spike test detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['sensor depth spike q f'], 'mappings': []}, 'ampliconConcentration': {'slot_uri': 'neon:ampliconConcentration', 'description': 'Concentration of amplicon DNA used for sequencing reaction', 'range': 'double', 'aliases': ['amplicon concentration'], 'mappings': []}, 'ampliconPooledStatus': {'slot_uri': 'neon:ampliconPooledStatus', 'description': 'Indicates whether multiple PCR reactions were pooled', 'range': 'string', 'aliases': ['amplicon pooled status'], 'mappings': []}, 'illuminaAdapterKit': {'slot_uri': 'neon:illuminaAdapterKit', 'description': 'Identifier for the adapter sequences kit manufactured for use with Illumina sequencing technology', 'range': 'string', 'aliases': ['illumina adapter kit'], 'mappings': []}, 'illuminaIndex1': {'slot_uri': 'neon:illuminaIndex1', 'description': 'Oligonucleotide sequence of the 5-prime index used to identify a unique sample in an Illumina-based sequencing run', 'range': 'string', 'aliases': ['illumina index1'], 'mappings': []}, 'illuminaIndex2': {'slot_uri': 'neon:illuminaIndex2', 'description': 'Oligonucleotide sequence of the 3-prime index used to identify a unique sample in an Illumina-based sequencing run', 'range': 'string', 'aliases': ['illumina index2'], 'mappings': []}, 'library_layout': {'slot_uri': 'neon:library_layout', 'description': 'Layout for a library', 'range': 'string', 'aliases': ['library_layout'], 'mappings': []}, 'library_selection': {'slot_uri': 'neon:library_selection', 'description': 'Type of nucleic acid selection method used for a library', 'range': 'string', 'aliases': ['library_selection'], 'mappings': []}, 'library_source': {'slot_uri': 'neon:library_source', 'description': 'Source of genetic material for sequencing library', 'range': 'string', 'aliases': ['library_source'], 'mappings': []}, 'library_strategy': {'slot_uri': 'neon:library_strategy', 'description': 'Strategy used for nucleic acid sequencing for a sample library', 'range': 'string', 'aliases': ['library_strategy'], 'mappings': []}, 'targetSubfragment': {'slot_uri': 'neon:targetSubfragment', 'description': 'Name of subfragment of a gene or locus', 'range': 'string', 'aliases': ['target subfragment'], 'mappings': []}, 'bgcArchive': {'slot_uri': 'neon:bgcArchive', 'description': 'Indicator for whether a biogeochemistry archive sample was created', 'range': 'string', 'aliases': ['bgc archive'], 'mappings': []}, 'chlCarotEquationInput': {'slot_uri': 'neon:chlCarotEquationInput', 'description': 'Equation input for calculating chlorophyll or carotenoid content', 'range': 'string', 'aliases': ['chl carot equation input'], 'mappings': []}, 'chlCarotExtinctionCoefficient': {'slot_uri': 'neon:chlCarotExtinctionCoefficient', 'description': 'Parameter used for calculating chlorophyll or carotenoid content', 'range': 'double', 'aliases': ['chl carot extinction coefficient'], 'mappings': []}, 'chlCarotWavelength1': {'slot_uri': 'neon:chlCarotWavelength1', 'description': 'The first wavelength used to measure chlorophyll and carotenoid content', 'range': 'double', 'aliases': ['chl carot wavelength1'], 'mappings': []}, 'chlCarotWavelength1Abs': {'slot_uri': 'neon:chlCarotWavelength1Abs', 'description': 'Absorbance values for the first wavelength used to measure chlorophyll and carotenoid content', 'range': 'double', 'aliases': ['chl carot wavelength1 abs'], 'mappings': []}, 'chlCarotWavelength2': {'slot_uri': 'neon:chlCarotWavelength2', 'description': 'The second wavelength used to measure chlorophyll and carotenoid content', 'range': 'double', 'aliases': ['chl carot wavelength2'], 'mappings': []}, 'chlCarotWavelength2Abs': {'slot_uri': 'neon:chlCarotWavelength2Abs', 'description': 'Absorbance values for the second wavelength used to measure chlorophyll and carotenoid content', 'range': 'double', 'aliases': ['chl carot wavelength2 abs'], 'mappings': []}, 'chlCarotWavelength3': {'slot_uri': 'neon:chlCarotWavelength3', 'description': 'The third wavelength used to measure chlorophyll and carotenoid content', 'range': 'double', 'aliases': ['chl carot wavelength3'], 'mappings': []}, 'chlCarotWavelength3Abs': {'slot_uri': 'neon:chlCarotWavelength3Abs', 'description': 'Absorbance values for the third wavelength used to measure chlorophyll and carotenoid content', 'range': 'double', 'aliases': ['chl carot wavelength3 abs'], 'mappings': []}, 'chlCarotWavelength4': {'slot_uri': 'neon:chlCarotWavelength4', 'description': 'The fourth wavelength used to measure chlorophyll and carotenoid content', 'range': 'double', 'aliases': ['chl carot wavelength4'], 'mappings': []}, 'chlCarotWavelength4Abs': {'slot_uri': 'neon:chlCarotWavelength4Abs', 'description': 'Absorbance values for the fourth wavelength used to measure chlorophyll and carotenoid content', 'range': 'double', 'aliases': ['chl carot wavelength4 abs'], 'mappings': []}, 'chlorophyllSampleCode': {'slot_uri': 'neon:chlorophyllSampleCode', 'description': 'Barcode of a chlorophyll sample', 'range': 'string', 'aliases': ['chlorophyll sample code'], 'mappings': []}, 'chlorophyllSampleFate': {'slot_uri': 'neon:chlorophyllSampleFate', 'description': 'Fate of a chlorophyll sample', 'range': 'string', 'aliases': ['chlorophyll sample fate'], 'mappings': []}, 'chlorophyllSampleID': {'slot_uri': 'neon:chlorophyllSampleID', 'description': 'Identifier for a chlorophyll sample', 'range': 'string', 'aliases': ['chlorophyll sample i d'], 'mappings': []}, 'digestBoronConc': {'slot_uri': 'neon:digestBoronConc', 'description': 'Concentration of boron in sample digest', 'range': 'double', 'aliases': ['digest boron conc'], 'mappings': []}, 'digestCalciumConc': {'slot_uri': 'neon:digestCalciumConc', 'description': 'Concentration of calcium in sample digest', 'range': 'double', 'aliases': ['digest calcium conc'], 'mappings': []}, 'digestCopperConc': {'slot_uri': 'neon:digestCopperConc', 'description': 'Concentration of copper in sample digest', 'range': 'double', 'aliases': ['digest copper conc'], 'mappings': []}, 'digestIronConc': {'slot_uri': 'neon:digestIronConc', 'description': 'Concentration of iron in sample digest', 'range': 'double', 'aliases': ['digest iron conc'], 'mappings': []}, 'digestMagnesiumConc': {'slot_uri': 'neon:digestMagnesiumConc', 'description': 'Concentration of magnesium in sample digest', 'range': 'double', 'aliases': ['digest magnesium conc'], 'mappings': []}, 'digestManganeseConc': {'slot_uri': 'neon:digestManganeseConc', 'description': 'Concentration of manganese in sample digest', 'range': 'double', 'aliases': ['digest manganese conc'], 'mappings': []}, 'digestPhosphorusConc': {'slot_uri': 'neon:digestPhosphorusConc', 'description': 'Concentration of phophorus in sample digest', 'range': 'double', 'aliases': ['digest phosphorus conc'], 'mappings': []}, 'digestPotassiumConc': {'slot_uri': 'neon:digestPotassiumConc', 'description': 'Concentration of potassium in sample digest', 'range': 'double', 'aliases': ['digest potassium conc'], 'mappings': []}, 'digestSulfurConc': {'slot_uri': 'neon:digestSulfurConc', 'description': 'Concentration of sulfur in sample digest', 'range': 'double', 'aliases': ['digest sulfur conc'], 'mappings': []}, 'digestVolume': {'slot_uri': 'neon:digestVolume', 'description': 'Volume of digest solution used', 'range': 'double', 'aliases': ['digest volume'], 'mappings': []}, 'digestZincConc': {'slot_uri': 'neon:digestZincConc', 'description': 'Concentration of zinc in sample digest', 'range': 'double', 'aliases': ['digest zinc conc'], 'mappings': []}, 'dilutionFactor': {'slot_uri': 'neon:dilutionFactor', 'description': 'The factor by which the sample was diluted prior to analysis', 'range': 'double', 'aliases': ['dilution factor'], 'mappings': []}, 'ecReference': {'slot_uri': 'neon:ecReference', 'description': 'A list of sources (concatenated and semicolon separated) for the extinction coefficients', 'range': 'string', 'aliases': ['ec reference'], 'mappings': []}, 'extractCarotConc': {'slot_uri': 'neon:extractCarotConc', 'description': 'Calculated total carotenoid concentration of the extract solution, dilution-corrected as needed', 'range': 'double', 'aliases': ['extract carot conc'], 'mappings': []}, 'extractChlAConc': {'slot_uri': 'neon:extractChlAConc', 'description': 'Calculated chlorophyll A concentration of the extract solution, dilution-corrected as needed', 'range': 'double', 'aliases': ['extract chl a conc'], 'mappings': []}, 'extractChlBConc': {'slot_uri': 'neon:extractChlBConc', 'description': 'Calculated chlorophyll B concentration of the extract solution, dilution-corrected as needed', 'range': 'double', 'aliases': ['extract chl b conc'], 'mappings': []}, 'extractionLength': {'slot_uri': 'neon:extractionLength', 'description': 'The duration of an extraction event', 'range': 'double', 'aliases': ['extraction length'], 'mappings': []}, 'foliarBoronConc': {'slot_uri': 'neon:foliarBoronConc', 'description': 'Concentration of boron in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar boron conc'], 'mappings': []}, 'foliarCalciumConc': {'slot_uri': 'neon:foliarCalciumConc', 'description': 'Concentration of calcium in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar calcium conc'], 'mappings': []}, 'foliarCopperConc': {'slot_uri': 'neon:foliarCopperConc', 'description': 'Concentration of copper in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar copper conc'], 'mappings': []}, 'foliarIronConc': {'slot_uri': 'neon:foliarIronConc', 'description': 'Concentration of iron in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar iron conc'], 'mappings': []}, 'foliarMagnesiumConc': {'slot_uri': 'neon:foliarMagnesiumConc', 'description': 'Concentration of magnesium in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar magnesium conc'], 'mappings': []}, 'foliarManganeseConc': {'slot_uri': 'neon:foliarManganeseConc', 'description': 'Concentration of manganese in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar manganese conc'], 'mappings': []}, 'foliarPhosphorusConc': {'slot_uri': 'neon:foliarPhosphorusConc', 'description': 'Concentration of phophorus in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar phosphorus conc'], 'mappings': []}, 'foliarPotassiumConc': {'slot_uri': 'neon:foliarPotassiumConc', 'description': 'Concentration of potassium in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar potassium conc'], 'mappings': []}, 'foliarSulfurConc': {'slot_uri': 'neon:foliarSulfurConc', 'description': 'Concentration of sulfur in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar sulfur conc'], 'mappings': []}, 'foliarZincConc': {'slot_uri': 'neon:foliarZincConc', 'description': 'Concentration of zinc in plant foliage sample on a dry mass basis', 'range': 'double', 'aliases': ['foliar zinc conc'], 'mappings': []}, 'handlingQF': {'slot_uri': 'neon:handlingQF', 'description': 'Quality flag for sample handling', 'range': 'string', 'aliases': ['handling q f'], 'mappings': []}, 'knownBoronConc': {'slot_uri': 'neon:knownBoronConc', 'description': 'Known concentration of boron in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known boron conc'], 'mappings': []}, 'knownCalciumConc': {'slot_uri': 'neon:knownCalciumConc', 'description': 'Known concentration of calcium in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known calcium conc'], 'mappings': []}, 'knownCopperConc': {'slot_uri': 'neon:knownCopperConc', 'description': 'Known concentration of copper in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known copper conc'], 'mappings': []}, 'knownIronConc': {'slot_uri': 'neon:knownIronConc', 'description': 'Known concentration of iron in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known iron conc'], 'mappings': []}, 'knownMagnesiumConc': {'slot_uri': 'neon:knownMagnesiumConc', 'description': 'Known concentration of magnesium in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known magnesium conc'], 'mappings': []}, 'knownManganeseConc': {'slot_uri': 'neon:knownManganeseConc', 'description': 'Known concentration of manganese in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known manganese conc'], 'mappings': []}, 'knownPhosphorusConc': {'slot_uri': 'neon:knownPhosphorusConc', 'description': 'Known concentration of phophorus in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known phosphorus conc'], 'mappings': []}, 'knownPotassiumConc': {'slot_uri': 'neon:knownPotassiumConc', 'description': 'Known concentration of potassium in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known potassium conc'], 'mappings': []}, 'knownSulfurConc': {'slot_uri': 'neon:knownSulfurConc', 'description': 'Known concentration of sulfur in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known sulfur conc'], 'mappings': []}, 'knownZincConc': {'slot_uri': 'neon:knownZincConc', 'description': 'Known concentration of zinc in standard reference material on a dry mass basis', 'range': 'double', 'aliases': ['known zinc conc'], 'mappings': []}, 'leafArea': {'slot_uri': 'neon:leafArea', 'description': 'Area of all leaves or needles scanned', 'range': 'double', 'aliases': ['leaf area'], 'mappings': []}, 'leafMassPerArea': {'slot_uri': 'neon:leafMassPerArea', 'description': 'Dry mass per unit area of leaf or needle foliage', 'range': 'double', 'aliases': ['leaf mass per area'], 'mappings': []}, 'lmaSampleCode': {'slot_uri': 'neon:lmaSampleCode', 'description': 'Barcode of a leaf mass per area sample', 'range': 'string', 'aliases': ['lma sample code'], 'mappings': []}, 'lmaSampleCondition': {'slot_uri': 'neon:lmaSampleCondition', 'description': 'Condition of a leaf mass per area sample', 'range': 'string', 'aliases': ['lma sample condition'], 'mappings': []}, 'lmaSampleFate': {'slot_uri': 'neon:lmaSampleFate', 'description': 'Fate of a leaf mass per area sample', 'range': 'string', 'aliases': ['lma sample fate'], 'mappings': []}, 'lmaSampleID': {'slot_uri': 'neon:lmaSampleID', 'description': 'Identifier for a leaf mass per area sample', 'range': 'string', 'aliases': ['lma sample i d'], 'mappings': []}, 'percentCoverClip': {'slot_uri': 'neon:percentCoverClip', 'description': 'Ocular estimate of percent cover of all vegetation in the clip strip', 'range': 'double', 'aliases': ['percent cover clip'], 'mappings': []}, 'percentGreen': {'slot_uri': 'neon:percentGreen', 'description': 'Visual estimate of percent scanned foliar material that was live and green', 'range': 'string', 'aliases': ['percent green'], 'mappings': []}, 'relativeAccuracyScale': {'slot_uri': 'neon:relativeAccuracyScale', 'description': 'Indicator for the mean relative accuracy of standards analyzed as unknowns with a run of samples', 'range': 'string', 'aliases': ['relative accuracy scale'], 'mappings': []}, 'scanDate': {'slot_uri': 'neon:scanDate', 'description': 'The date and time a sample is scanned', 'range': 'time', 'aliases': ['scan date'], 'mappings': []}, 'scannedBy': {'slot_uri': 'neon:scannedBy', 'description': 'An identifier for the technician who scanned the sample(s)', 'range': 'string', 'aliases': ['scanned by'], 'mappings': []}, 'scannedLeafNumber': {'slot_uri': 'neon:scannedLeafNumber', 'description': 'Number of leaves or needles scanned', 'range': 'string', 'aliases': ['scanned leaf number'], 'mappings': []}, 'solventVolume': {'slot_uri': 'neon:solventVolume', 'description': 'Volume of solvent used in the extraction', 'range': 'double', 'aliases': ['solvent volume'], 'mappings': []}, 'standardChlAConc': {'slot_uri': 'neon:standardChlAConc', 'description': 'Known chlorophyll A concentration in a standard', 'range': 'double', 'aliases': ['standard chl a conc'], 'mappings': []}, 'subsample1Height': {'slot_uri': 'neon:subsample1Height', 'description': 'Vertical distance from ground to height of first canopy subsample', 'range': 'double', 'aliases': ['subsample1 height'], 'mappings': []}, 'subsample2Height': {'slot_uri': 'neon:subsample2Height', 'description': 'Vertical distance from ground to height of second canopy subsample', 'range': 'double', 'aliases': ['subsample2 height'], 'mappings': []}, 'subsample3Height': {'slot_uri': 'neon:subsample3Height', 'description': 'Vertical distance from ground to height of third canopy subsample', 'range': 'double', 'aliases': ['subsample3 height'], 'mappings': []}, 'vd1BaseHeight': {'slot_uri': 'neon:vd1BaseHeight', 'description': 'Vertical distance from observer to base of stem for first canopy subsample', 'range': 'double', 'aliases': ['vd1 base height'], 'mappings': []}, 'vd1Sample': {'slot_uri': 'neon:vd1Sample', 'description': 'Vertical distance from observer to height of first canopy subsample', 'range': 'double', 'aliases': ['vd1 sample'], 'mappings': []}, 'vd2BaseHeight': {'slot_uri': 'neon:vd2BaseHeight', 'description': 'Vertical distance from observer to base of stem for second canopy subsample', 'range': 'double', 'aliases': ['vd2 base height'], 'mappings': []}, 'vd2Sample': {'slot_uri': 'neon:vd2Sample', 'description': 'Vertical distance from observer to height of second canopy subsample', 'range': 'double', 'aliases': ['vd2 sample'], 'mappings': []}, 'vd3BaseHeight': {'slot_uri': 'neon:vd3BaseHeight', 'description': 'Vertical distance from observer to base of stem for third canopy leaf subsample', 'range': 'double', 'aliases': ['vd3 base height'], 'mappings': []}, 'vd3Sample': {'slot_uri': 'neon:vd3Sample', 'description': 'Vertical distance from observer to height of third canopy leaf subsample', 'range': 'double', 'aliases': ['vd3 sample'], 'mappings': []}, 'weighedBy': {'slot_uri': 'neon:weighedBy', 'description': 'An identifier for the technician who weighed the sample', 'range': 'string', 'aliases': ['weighed by'], 'mappings': []}, 'yearMonth': {'slot_uri': 'neon:yearMonth', 'description': 'The calendar year and month in which an observation or measurement was made', 'range': 'time', 'aliases': ['year month'], 'mappings': []}, 'year': {'slot_uri': 'neon:year', 'description': 'The calendar year in which an observation or measurement was made', 'range': 'time', 'aliases': ['year'], 'mappings': []}, 'corPresQF': {'slot_uri': 'neon:corPresQF', 'description': 'Quality flag for summary statistics of pressure corrected to sea level (1=fail, 0=pass)', 'range': 'string', 'aliases': ['cor pres q f'], 'mappings': []}, 'dewTempQF': {'slot_uri': 'neon:dewTempQF', 'description': 'Quality flag for dew or frost point temperature summary statistics (1=fail, 0=pass)', 'range': 'string', 'aliases': ['dew temp q f'], 'mappings': []}, 'precipQF': {'slot_uri': 'neon:precipQF', 'description': 'Quality flag for precipitation summary statistics (1=fail, 0=pass)', 'range': 'string', 'aliases': ['precip q f'], 'mappings': []}, 'precipTotal': {'slot_uri': 'neon:precipTotal', 'description': 'Total precipitation observed', 'range': 'double', 'aliases': ['precip total'], 'mappings': []}, 'RHQF': {'slot_uri': 'neon:RHQF', 'description': 'Quality flag for relative humidity summary statistics (1=fail, 0=pass)', 'range': 'string', 'aliases': ['r h q f'], 'mappings': []}, 'shortRadQF': {'slot_uri': 'neon:shortRadQF', 'description': 'Quality flag for incoming shortwave radiation summary statistics (1=fail, 0=pass)', 'range': 'string', 'aliases': ['short rad q f'], 'mappings': []}, 'staPresQF': {'slot_uri': 'neon:staPresQF', 'description': 'Quality flag for station pressure summary statistics (1=fail, 0=pass)', 'range': 'string', 'aliases': ['sta pres q f'], 'mappings': []}, 'tempTripleQF': {'slot_uri': 'neon:tempTripleQF', 'description': 'Quality flag for temperature summary statistics (1=fail, 0=pass)', 'range': 'string', 'aliases': ['temp triple q f'], 'mappings': []}, 'windSpeedQF': {'slot_uri': 'neon:windSpeedQF', 'description': 'Quality flag for wind speed summary statistics (1=fail, 0=pass)', 'range': 'string', 'aliases': ['wind speed q f'], 'mappings': []}, 'spectrumCount': {'slot_uri': 'neon:spectrumCount', 'description': 'The number of absorbance spectra (AKA SUNA light frames) that were averaged to correct the fDOM and or chla data. Up to 50 light frames will be averaged', 'range': 'integer', 'aliases': ['spectrum count'], 'mappings': []}, 'wssCorPres': {'slot_uri': 'neon:wssCorPres', 'description': 'Mean station pressure corrected to sea level for weather summary statistics', 'range': 'double', 'aliases': ['wss cor pres'], 'mappings': []}, 'wssDewTempMaximum': {'slot_uri': 'neon:wssDewTempMaximum', 'description': 'Maximum dew or frost point temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss dew temp maximum'], 'mappings': []}, 'wssDewTempMean': {'slot_uri': 'neon:wssDewTempMean', 'description': 'Arithmetic mean of dew or frost point temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss dew temp mean'], 'mappings': []}, 'wssDewTempMinimum': {'slot_uri': 'neon:wssDewTempMinimum', 'description': 'Minimum dew or frost point temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss dew temp minimum'], 'mappings': []}, 'wssDewTempStdErMean': {'slot_uri': 'neon:wssDewTempStdErMean', 'description': 'Standard error of the mean for dew or frost point temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss dew temp std er mean'], 'mappings': []}, 'wssDewTempVariance': {'slot_uri': 'neon:wssDewTempVariance', 'description': 'Variance in dew or frost point temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss dew temp variance'], 'mappings': []}, 'wssPrecipTotal': {'slot_uri': 'neon:wssPrecipTotal', 'description': 'Total precipitation observed for weather summary statistics', 'range': 'double', 'aliases': ['wss precip total'], 'mappings': []}, 'wssRHMaximum': {'slot_uri': 'neon:wssRHMaximum', 'description': 'Maximum relative humidity for weather summary statistics', 'range': 'double', 'aliases': ['wss r h maximum'], 'mappings': []}, 'wssRHMean': {'slot_uri': 'neon:wssRHMean', 'description': 'Arithmetic mean of relative humidity for weather summary statistics', 'range': 'double', 'aliases': ['wss r h mean'], 'mappings': []}, 'wssRHMinimum': {'slot_uri': 'neon:wssRHMinimum', 'description': 'Minimum relative humidity for weather summary statistics', 'range': 'double', 'aliases': ['wss r h minimum'], 'mappings': []}, 'wssRHStdErMean': {'slot_uri': 'neon:wssRHStdErMean', 'description': 'Standard error of the mean for relative humidity for weather summary statistics', 'range': 'double', 'aliases': ['wss r h std er mean'], 'mappings': []}, 'wssRHVariance': {'slot_uri': 'neon:wssRHVariance', 'description': 'Variance in relative humidity for weather summary statistics', 'range': 'double', 'aliases': ['wss r h variance'], 'mappings': []}, 'wssShortRadMaximum': {'slot_uri': 'neon:wssShortRadMaximum', 'description': 'Maximum Incoming Shortwave Radiation for weather summary statistics', 'range': 'double', 'aliases': ['wss short rad maximum'], 'mappings': []}, 'wssShortRadMean': {'slot_uri': 'neon:wssShortRadMean', 'description': 'Arithmetic mean of Incoming Shortwave Radiation for weather summary statistics', 'range': 'double', 'aliases': ['wss short rad mean'], 'mappings': []}, 'wssShortRadMinimum': {'slot_uri': 'neon:wssShortRadMinimum', 'description': 'Minimum Incoming Shortwave Radiation for weather summary statistics', 'range': 'double', 'aliases': ['wss short rad minimum'], 'mappings': []}, 'wssShortRadStdErMean': {'slot_uri': 'neon:wssShortRadStdErMean', 'description': 'Standard error of the mean for Incoming Shortwave Radiation for weather summary statistics', 'range': 'double', 'aliases': ['wss short rad std er mean'], 'mappings': []}, 'wssShortRadVariance': {'slot_uri': 'neon:wssShortRadVariance', 'description': 'Variance in Incoming Shortwave Radiation for weather summary statistics', 'range': 'double', 'aliases': ['wss short rad variance'], 'mappings': []}, 'wssStaPresMaximum': {'slot_uri': 'neon:wssStaPresMaximum', 'description': 'Maximum station pressure for weather summary statistics', 'range': 'double', 'aliases': ['wss sta pres maximum'], 'mappings': []}, 'wssStaPresMean': {'slot_uri': 'neon:wssStaPresMean', 'description': 'Arithmetic mean of station pressure for weather summary statistics', 'range': 'double', 'aliases': ['wss sta pres mean'], 'mappings': []}, 'wssStaPresMinimum': {'slot_uri': 'neon:wssStaPresMinimum', 'description': 'Minimum station pressure for weather summary statistics', 'range': 'double', 'aliases': ['wss sta pres minimum'], 'mappings': []}, 'wssStaPresStdErMean': {'slot_uri': 'neon:wssStaPresStdErMean', 'description': 'Standard error of the mean for station pressure for weather summary statistics', 'range': 'double', 'aliases': ['wss sta pres std er mean'], 'mappings': []}, 'wssStaPresVariance': {'slot_uri': 'neon:wssStaPresVariance', 'description': 'Variance in station pressure for weather summary statistics', 'range': 'double', 'aliases': ['wss sta pres variance'], 'mappings': []}, 'wssTempTripleMaximum': {'slot_uri': 'neon:wssTempTripleMaximum', 'description': 'Maximum triple aspirated air temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss temp triple maximum'], 'mappings': []}, 'wssTempTripleMean': {'slot_uri': 'neon:wssTempTripleMean', 'description': 'Arithmetic mean of triple aspirated air temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss temp triple mean'], 'mappings': []}, 'wssTempTripleMinimum': {'slot_uri': 'neon:wssTempTripleMinimum', 'description': 'Minimum triple aspirated air temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss temp triple minimum'], 'mappings': []}, 'wssTempTripleStdErMean': {'slot_uri': 'neon:wssTempTripleStdErMean', 'description': 'Standard error of the mean for triple aspirated air temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss temp triple std er mean'], 'mappings': []}, 'wssTempTripleVariance': {'slot_uri': 'neon:wssTempTripleVariance', 'description': 'Variance in triple aspirated air temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss temp triple variance'], 'mappings': []}, 'wssWindSpeedMaximum': {'slot_uri': 'neon:wssWindSpeedMaximum', 'description': 'Maximum wind speed for weather summary statistics', 'range': 'double', 'aliases': ['wss wind speed maximum'], 'mappings': []}, 'wssWindSpeedMean': {'slot_uri': 'neon:wssWindSpeedMean', 'description': 'Arithmetic mean of wind speed for weather summary statistics', 'range': 'double', 'aliases': ['wss wind speed mean'], 'mappings': []}, 'wssWindSpeedMinimum': {'slot_uri': 'neon:wssWindSpeedMinimum', 'description': 'Minimum wind speed for weather summary statistics', 'range': 'double', 'aliases': ['wss wind speed minimum'], 'mappings': []}, 'wssWindSpeedStdErMean': {'slot_uri': 'neon:wssWindSpeedStdErMean', 'description': 'Standard error of the mean for wind speed for weather summary statistics', 'range': 'double', 'aliases': ['wss wind speed std er mean'], 'mappings': []}, 'wssWindSpeedVariance': {'slot_uri': 'neon:wssWindSpeedVariance', 'description': 'Variance in wind speed for weather summary statistics', 'range': 'double', 'aliases': ['wss wind speed variance'], 'mappings': []}, 'rawCalibratedChla': {'slot_uri': 'neon:rawCalibratedChla', 'description': 'Calibrated chlorophyll a concentration in water without temperature or absorbance corrections', 'range': 'double', 'aliases': ['raw calibrated chla'], 'mappings': []}, 'rawCalibratedfDOM': {'slot_uri': 'neon:rawCalibratedfDOM', 'description': 'Calibrated fluorescent dissolved organic matter concentration as quinine sulfate equivalents without temperature or absorbance corrections', 'range': 'double', 'aliases': ['raw calibratedf d o m'], 'mappings': []}, 'd18OWaterHighArchive': {'slot_uri': 'neon:d18OWaterHighArchive', 'description': 'Measure in the archive high standard of the ratio of stable isotopes 18O:16O in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d18 o water high archive'], 'mappings': []}, 'd18OWaterLowArchive': {'slot_uri': 'neon:d18OWaterLowArchive', 'description': 'Measure in the archive low standard of the ratio of stable isotopes 18O:16O in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d18 o water low archive'], 'mappings': []}, 'd18OWaterMedArchive': {'slot_uri': 'neon:d18OWaterMedArchive', 'description': 'Measure in the archive medium standard of the ratio of stable isotopes 18O:16O in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d18 o water med archive'], 'mappings': []}, 'd2HWaterHighArchive': {'slot_uri': 'neon:d2HWaterHighArchive', 'description': 'Measure in the archive high standard of the ratio of stable isotopes 2H:1H in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d2 h water high archive'], 'mappings': []}, 'd2HWaterLowArchive': {'slot_uri': 'neon:d2HWaterLowArchive', 'description': 'Measure in the archive low standard of the ratio of stable isotopes 2H:1H in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d2 h water low archive'], 'mappings': []}, 'd2HWaterMedArchive': {'slot_uri': 'neon:d2HWaterMedArchive', 'description': 'Measure in the archive medium standard of the ratio of stable isotopes 2H:1H in H2O, relative to the Vienna Standard Mean Ocean Water', 'range': 'double', 'aliases': ['d2 h water med archive'], 'mappings': []}, 'attemptNumber': {'slot_uri': 'neon:attemptNumber', 'description': 'The attempt number associated with the missing line workflow', 'range': 'integer', 'aliases': ['attempt number'], 'mappings': []}, 'bankfullDepth': {'slot_uri': 'neon:bankfullDepth', 'description': 'The measured bankfull depth of the transect', 'range': 'double', 'aliases': ['bankfull depth'], 'mappings': []}, 'bankfullWidth': {'slot_uri': 'neon:bankfullWidth', 'description': 'The measured bankfull width of the transect', 'range': 'double', 'aliases': ['bankfull width'], 'mappings': []}, 'dataFileName': {'slot_uri': 'neon:dataFileName', 'description': 'Name of file or folder containing data, including file extension', 'range': 'string', 'aliases': ['data file name'], 'mappings': []}, 'dataFilePath': {'slot_uri': 'neon:dataFilePath', 'description': 'The system path identifying the data file location', 'range': 'string', 'aliases': ['data file path'], 'mappings': []}, 'deletePoint': {'slot_uri': 'neon:deletePoint', 'description': 'Indicator of whether a point is to be deleted during post-processing', 'range': 'string', 'aliases': ['delete point'], 'mappings': []}, 'errorDescription': {'slot_uri': 'neon:errorDescription', 'description': 'Description of the type of error associated with the mapped point', 'range': 'string', 'aliases': ['error description'], 'mappings': []}, 'errorDescriptionRemarks': {'slot_uri': 'neon:errorDescriptionRemarks', 'description': 'Technician notes; free text comments that describe the error record', 'range': 'string', 'aliases': ['error description remarks'], 'mappings': []}, 'featureID': {'slot_uri': 'neon:featureID', 'description': 'Identifier for the transect named location', 'range': 'string', 'aliases': ['feature i d'], 'mappings': []}, 'featuresSurveyed': {'slot_uri': 'neon:featuresSurveyed', 'description': 'List of features that were surveyed from a given total station location', 'range': 'string', 'aliases': ['features surveyed'], 'mappings': []}, 'featuresSurveyedOther': {'slot_uri': 'neon:featuresSurveyedOther', 'description': 'List of additional features that were surveyed from a given total station location', 'range': 'string', 'aliases': ['features surveyed other'], 'mappings': []}, 'featureType': {'slot_uri': 'neon:featureType', 'description': 'The type of feature surveyed at a given total station location', 'range': 'string', 'aliases': ['feature type'], 'mappings': []}, 'firstControlPointID': {'slot_uri': 'neon:firstControlPointID', 'description': 'Identifier for the first control point used to orient the total station at a given location', 'range': 'string', 'aliases': ['first control point i d'], 'mappings': []}, 'firstControlPointType': {'slot_uri': 'neon:firstControlPointType', 'description': 'The first type of control point used to orient the total station at a given location', 'range': 'string', 'aliases': ['first control point type'], 'mappings': []}, 'firstThalwegPoint': {'slot_uri': 'neon:firstThalwegPoint', 'description': 'Identifier for the first thalweg point mapped from a given total station location', 'range': 'integer', 'aliases': ['first thalweg point'], 'mappings': []}, 'firstThalwegPointName': {'slot_uri': 'neon:firstThalwegPointName', 'description': 'Name of the first thalweg point mapped from a given total station location', 'range': 'string', 'aliases': ['first thalweg point name'], 'mappings': []}, 'floodproneHeight': {'slot_uri': 'neon:floodproneHeight', 'description': 'The measured floodprone height of the transect; two times the bankfull depth', 'range': 'double', 'aliases': ['floodprone height'], 'mappings': []}, 'lastThalwegPoint': {'slot_uri': 'neon:lastThalwegPoint', 'description': 'Identifier for the last thalweg point mapped from a given total station location', 'range': 'integer', 'aliases': ['last thalweg point'], 'mappings': []}, 'lastThalwegPointName': {'slot_uri': 'neon:lastThalwegPointName', 'description': 'Name of the last thalweg point mapped from a given total station location', 'range': 'string', 'aliases': ['last thalweg point name'], 'mappings': []}, 'missingLinePoint1': {'slot_uri': 'neon:missingLinePoint1', 'description': 'Identifier for the first point used in the missing line workflow', 'range': 'string', 'aliases': ['missing line point1'], 'mappings': []}, 'missingLinePoint2': {'slot_uri': 'neon:missingLinePoint2', 'description': 'Identifier for the second point used in the missing line workflow', 'range': 'string', 'aliases': ['missing line point2'], 'mappings': []}, 'missingLineResultsdH': {'slot_uri': 'neon:missingLineResultsdH', 'description': 'The difference in elevation calculated between the first and second shots during the missing line workflow', 'range': 'double', 'aliases': ['missing line resultsd h'], 'mappings': []}, 'missingLineResultsHD': {'slot_uri': 'neon:missingLineResultsHD', 'description': 'The difference in horizontal distance calculated between the first and second shots during the missing line workflow', 'range': 'double', 'aliases': ['missing line results h d'], 'mappings': []}, 'missingLineReultsStDev': {'slot_uri': 'neon:missingLineReultsStDev', 'description': 'The standard deviation calculated between the first and second shots during the missing line workflow', 'range': 'double', 'aliases': ['missing line reults st dev'], 'mappings': []}, 'missingLineWorkflow': {'slot_uri': 'neon:missingLineWorkflow', 'description': 'Indicator of whether the missing line workflow was conducted', 'range': 'string', 'aliases': ['missing line workflow'], 'mappings': []}, 'pebbleCountD16': {'slot_uri': 'neon:pebbleCountD16', 'description': 'The particle size that 16 percent of the particles are equal to or smaller than in the pebble count distribution', 'range': 'string', 'aliases': ['pebble count d16'], 'mappings': []}, 'pebbleCountD5': {'slot_uri': 'neon:pebbleCountD5', 'description': 'The particle size that 5 percent of the particles are equal to or smaller than in the pebble count distribution', 'range': 'string', 'aliases': ['pebble count d5'], 'mappings': []}, 'pebbleCountD50': {'slot_uri': 'neon:pebbleCountD50', 'description': 'The particle size that 50 percent of the particles are equal to or smaller than in the pebble count distribution', 'range': 'string', 'aliases': ['pebble count d50'], 'mappings': []}, 'pebbleCountD84': {'slot_uri': 'neon:pebbleCountD84', 'description': 'The particle size that 84 percent of the particles are equal to or smaller than in the pebble count distribution', 'range': 'string', 'aliases': ['pebble count d84'], 'mappings': []}, 'pebbleCountNumber': {'slot_uri': 'neon:pebbleCountNumber', 'description': 'A tallied record of samples measured during the pebble count survey', 'range': 'integer', 'aliases': ['pebble count number'], 'mappings': []}, 'pebbleCountsCollected': {'slot_uri': 'neon:pebbleCountsCollected', 'description': 'Indicator of whether a pebble count survey was conducted at the transect', 'range': 'string', 'aliases': ['pebble counts collected'], 'mappings': []}, 'pebbleSize': {'slot_uri': 'neon:pebbleSize', 'description': 'The bin class associated with the substrate measured during the pebble count survey', 'range': 'string', 'aliases': ['pebble size'], 'mappings': []}, 'secondControlPointID': {'slot_uri': 'neon:secondControlPointID', 'description': 'Identifier for the second control point used to orient the total station at a given location', 'range': 'string', 'aliases': ['second control point i d'], 'mappings': []}, 'secondControlPointType': {'slot_uri': 'neon:secondControlPointType', 'description': 'The second type of control point used to orient the total station at a given location', 'range': 'string', 'aliases': ['second control point type'], 'mappings': []}, 'sopVersion': {'slot_uri': 'neon:sopVersion', 'description': 'Version of the SOP used to create the final data', 'range': 'string', 'aliases': ['sop version'], 'mappings': []}, 'staffGaugeInstalled': {'slot_uri': 'neon:staffGaugeInstalled', 'description': 'Indicator of whether a staff gauge is installed at the site', 'range': 'string', 'aliases': ['staff gauge installed'], 'mappings': []}, 'staffGaugeMark': {'slot_uri': 'neon:staffGaugeMark', 'description': 'The graduated mark on the staff gauge used for mapping', 'range': 'double', 'aliases': ['staff gauge mark'], 'mappings': []}, 'stDevH': {'slot_uri': 'neon:stDevH', 'description': 'The standard deviation of the height calculated when two or three control points are used for orientation', 'range': 'double', 'aliases': ['st dev h'], 'mappings': []}, 'stDevHADegrees': {'slot_uri': 'neon:stDevHADegrees', 'description': 'The standard deviation of the horizontal angle in degrees calculated when three control points are used for orientation', 'range': 'double', 'aliases': ['st dev h a degrees'], 'mappings': []}, 'stDevHAMinutes': {'slot_uri': 'neon:stDevHAMinutes', 'description': 'The standard deviation of the horizontal angle in minutes calculated when three control points are used for orientation', 'range': 'double', 'aliases': ['st dev h a minutes'], 'mappings': []}, 'stDevHASeconds': {'slot_uri': 'neon:stDevHASeconds', 'description': 'The standard deviation of the horizontal angle in seconds calculated when three control points are used for orientation', 'range': 'double', 'aliases': ['st dev h a seconds'], 'mappings': []}, 'stDevPos': {'slot_uri': 'neon:stDevPos', 'description': 'The standard deviation of the position of the total station robotic head calculated when three control points are used for orientation', 'range': 'double', 'aliases': ['st dev pos'], 'mappings': []}, 'thirdControlPointID': {'slot_uri': 'neon:thirdControlPointID', 'description': 'Identifier for the third control point used to orient the total station at a given location', 'range': 'string', 'aliases': ['third control point i d'], 'mappings': []}, 'thirdControlPointType': {'slot_uri': 'neon:thirdControlPointType', 'description': 'The third type of control point used to orient the total station at a given location', 'range': 'string', 'aliases': ['third control point type'], 'mappings': []}, 'totalLWDCount': {'slot_uri': 'neon:totalLWDCount', 'description': 'A running tally of large woody debris that meets a set criteria within the aquatic reach', 'range': 'integer', 'aliases': ['total l w d count'], 'mappings': []}, 'totalStationLocation': {'slot_uri': 'neon:totalStationLocation', 'description': 'Identifier for sequential total station locations throughout the survey ', 'range': 'string', 'aliases': ['total station location'], 'mappings': []}, 'upsDwnsHabitatType': {'slot_uri': 'neon:upsDwnsHabitatType', 'description': 'The habitat type associated with the upstream or downstream transect ', 'range': 'string', 'aliases': ['ups dwns habitat type'], 'mappings': []}, 'bathymetryDataType': {'slot_uri': 'neon:bathymetryDataType', 'description': 'Type of bathymetry metadata collected', 'range': 'string', 'aliases': ['bathymetry data type'], 'mappings': []}, 'gpsAntennaHeight': {'slot_uri': 'neon:gpsAntennaHeight', 'description': 'Height of the GPS antenna above the GPS unit', 'range': 'double', 'aliases': ['gps antenna height'], 'mappings': []}, 'gpsUsed': {'slot_uri': 'neon:gpsUsed', 'description': 'GPS unit used to collect the associated latitude and longitude', 'range': 'string', 'aliases': ['gps used'], 'mappings': []}, 'photoID': {'slot_uri': 'neon:photoID', 'description': 'Identifier for photo', 'range': 'string', 'aliases': ['photo i d'], 'mappings': []}, 'plantsPresent': {'slot_uri': 'neon:plantsPresent', 'description': 'Indicator of plant presence or absence at the groundtruthing point', 'range': 'string', 'aliases': ['plants present'], 'mappings': []}, 'pointCollectionDate': {'slot_uri': 'neon:pointCollectionDate', 'description': 'Date and time associated with a point collection', 'range': 'time', 'aliases': ['point collection date'], 'mappings': []}, 'sonarRecordingNumber': {'slot_uri': 'neon:sonarRecordingNumber', 'description': 'Sonar track file name', 'range': 'string', 'aliases': ['sonar recording number'], 'mappings': []}, 'sonarRecordingStartTime': {'slot_uri': 'neon:sonarRecordingStartTime', 'description': 'Sonar track start time', 'range': 'time', 'aliases': ['sonar recording start time'], 'mappings': []}, 'sonarRecordingStopTime': {'slot_uri': 'neon:sonarRecordingStopTime', 'description': 'Sonar track stop time', 'range': 'time', 'aliases': ['sonar recording stop time'], 'mappings': []}, 'uniqueID': {'slot_uri': 'neon:uniqueID', 'description': 'Unique ID associated with the record', 'range': 'string', 'aliases': ['unique i d'], 'mappings': []}, 'waypoint': {'slot_uri': 'neon:waypoint', 'description': 'Location information for a point of interest', 'range': 'string', 'aliases': ['waypoint'], 'mappings': []}, 'waypointDescription': {'slot_uri': 'neon:waypointDescription', 'description': 'Descriptor for the waypoint', 'range': 'string', 'aliases': ['waypoint description'], 'mappings': []}, 'lipid2OH10To0Concentration': {'slot_uri': 'neon:lipid2OH10To0Concentration', 'description': 'Concentration of methyl 2-hydroxydecanoate, 2OH10:0', 'range': 'double', 'aliases': ['lipid2 o h10 to0 concentration'], 'mappings': []}, 'lipid2OH12To0Concentration': {'slot_uri': 'neon:lipid2OH12To0Concentration', 'description': 'Concentration of methyl 2-hydroxydodecanoate, 2OH12:0', 'range': 'double', 'aliases': ['lipid2 o h12 to0 concentration'], 'mappings': []}, 'lipid2OH14To0Concentration': {'slot_uri': 'neon:lipid2OH14To0Concentration', 'description': 'Concentration of methyl 2-hydroxytetradecanoate, 2OH14:0', 'range': 'double', 'aliases': ['lipid2 o h14 to0 concentration'], 'mappings': []}, 'lipid2OH16To0Concentration': {'slot_uri': 'neon:lipid2OH16To0Concentration', 'description': 'Concentration of methyl 2-hydroxyhexadecanoate, 2OH16:0', 'range': 'double', 'aliases': ['lipid2 o h16 to0 concentration'], 'mappings': []}, 'lipid3OH12To0Concentration': {'slot_uri': 'neon:lipid3OH12To0Concentration', 'description': 'Concentration of methyl 3-hydroxydodecanoate, 3OH12:0', 'range': 'double', 'aliases': ['lipid3 o h12 to0 concentration'], 'mappings': []}, 'lipid3OH14To0Concentration': {'slot_uri': 'neon:lipid3OH14To0Concentration', 'description': 'Concentration of methyl 3-hydroxytetradecanoate, 3OH14:0', 'range': 'double', 'aliases': ['lipid3 o h14 to0 concentration'], 'mappings': []}, 'aC15To0Concentration': {'slot_uri': 'neon:aC15To0Concentration', 'description': 'Concentration of 12-methyltetradecanoic acid methyl ester, a-c15:0', 'range': 'double', 'aliases': ['a c15 to0 concentration'], 'mappings': []}, 'analysisStandardID': {'slot_uri': 'neon:analysisStandardID', 'description': 'Manufacturer and catalog number of analytical standard', 'range': 'string', 'aliases': ['analysis standard i d'], 'mappings': []}, 'c10To0Concentration': {'slot_uri': 'neon:c10To0Concentration', 'description': 'Concentration of decanoate methyl ester, c10:0', 'range': 'double', 'aliases': ['c10 to0 concentration'], 'mappings': []}, 'c11To0Concentration': {'slot_uri': 'neon:c11To0Concentration', 'description': 'Concentration of undecanoate methyl ester, c11:0', 'range': 'double', 'aliases': ['c11 to0 concentration'], 'mappings': []}, 'c12To0Concentration': {'slot_uri': 'neon:c12To0Concentration', 'description': 'Concentration of dodecanoic acid, or lauric acid, methyl ester, c12:0', 'range': 'double', 'aliases': ['c12 to0 concentration'], 'mappings': []}, 'c13To0Concentration': {'slot_uri': 'neon:c13To0Concentration', 'description': 'Concentration of tridecanoic acid methyl ester, c13:0', 'range': 'double', 'aliases': ['c13 to0 concentration'], 'mappings': []}, 'c14To0Concentration': {'slot_uri': 'neon:c14To0Concentration', 'description': 'Concentration of tetradecanoic acid, or myristic acid, methyl ester, c14:0', 'range': 'double', 'aliases': ['c14 to0 concentration'], 'mappings': []}, 'c14To1Concentration': {'slot_uri': 'neon:c14To1Concentration', 'description': 'Concentration of cis-9-tetradecenoic acid, or myristoleic acid, methyl ester, c14:1', 'range': 'double', 'aliases': ['c14 to1 concentration'], 'mappings': []}, 'c15To0Concentration': {'slot_uri': 'neon:c15To0Concentration', 'description': 'Concentration of pentadecanoic acid methyl ester, c15:0', 'range': 'double', 'aliases': ['c15 to0 concentration'], 'mappings': []}, 'c15To1Concentration': {'slot_uri': 'neon:c15To1Concentration', 'description': 'Concentration of cis-10-pentadecenoic acid methyl ester, c15:1', 'range': 'double', 'aliases': ['c15 to1 concentration'], 'mappings': []}, 'c16To0Concentration': {'slot_uri': 'neon:c16To0Concentration', 'description': 'Concentration of hexadecanoic acid, or palmitic acid, methyl ester, c16:0', 'range': 'double', 'aliases': ['c16 to0 concentration'], 'mappings': []}, 'c17To0Concentration': {'slot_uri': 'neon:c17To0Concentration', 'description': 'Concentration of heptadecanoic acid methyl ester, c17:0', 'range': 'double', 'aliases': ['c17 to0 concentration'], 'mappings': []}, 'c17To1Concentration': {'slot_uri': 'neon:c17To1Concentration', 'description': 'Concentration of cis-10-Heptadecenoic acid methyl ester, c17:1', 'range': 'double', 'aliases': ['c17 to1 concentration'], 'mappings': []}, 'c18To0Concentration': {'slot_uri': 'neon:c18To0Concentration', 'description': 'Concentration of octadecanoic acid, or stearic acid, methyl ester, c18:0', 'range': 'double', 'aliases': ['c18 to0 concentration'], 'mappings': []}, 'c18To1n11Concentration': {'slot_uri': 'neon:c18To1n11Concentration', 'description': 'Concentration of vaccenic acid or e-octadec-11-enoic acid, c18:1n11', 'range': 'double', 'aliases': ['c18 to1n11 concentration'], 'mappings': []}, 'c18To3n3Concentration': {'slot_uri': 'neon:c18To3n3Concentration', 'description': 'Concentration of cis,cis,cis-9,12,15-octadecatrienoic acid, or alpha-linolenic acid, methyl ester, c18:3n3', 'range': 'double', 'aliases': ['c18 to3n3 concentration'], 'mappings': []}, 'c18To3n6Concentration': {'slot_uri': 'neon:c18To3n6Concentration', 'description': 'Concentration of 6,9,12-octadecatrienoic acid, or gamma-linolenic acid, methyl ester, c18:3n6', 'range': 'double', 'aliases': ['c18 to3n6 concentration'], 'mappings': []}, 'c19To0Concentration': {'slot_uri': 'neon:c19To0Concentration', 'description': 'Concentration of nonadecanoic acid methyl ester, c19:0', 'range': 'double', 'aliases': ['c19 to0 concentration'], 'mappings': []}, 'c20To0Concentration': {'slot_uri': 'neon:c20To0Concentration', 'description': 'Concentration of arachidic acid methyl ester, c20:0', 'range': 'double', 'aliases': ['c20 to0 concentration'], 'mappings': []}, 'c20To1Concentration': {'slot_uri': 'neon:c20To1Concentration', 'description': 'Concentration of cis-11-eicosenoic acid methyl ester, c20:1', 'range': 'double', 'aliases': ['c20 to1 concentration'], 'mappings': []}, 'c20To2Concentration': {'slot_uri': 'neon:c20To2Concentration', 'description': 'Concentration of cis-11,14-eicosadienoic acid methyl ester, c20:2', 'range': 'double', 'aliases': ['c20 to2 concentration'], 'mappings': []}, 'c20To3n3Concentration': {'slot_uri': 'neon:c20To3n3Concentration', 'description': 'Concentration of cis-11,14,17-eicosatrienoic acid methyl ester, c20:3n3', 'range': 'double', 'aliases': ['c20 to3n3 concentration'], 'mappings': []}, 'c20To3n6Concentration': {'slot_uri': 'neon:c20To3n6Concentration', 'description': 'Concentration of cis-8,11,14-eicosatrienoic acid, or dihomo-gamma-linoleic acid, methyl ester, c20:3n6', 'range': 'double', 'aliases': ['c20 to3n6 concentration'], 'mappings': []}, 'c20To4n6Concentration': {'slot_uri': 'neon:c20To4n6Concentration', 'description': 'Concentration of cis-5,8,11,14-eicosatetraenoic acid, or arachidonic acid, methyl ester, c20:4n6', 'range': 'double', 'aliases': ['c20 to4n6 concentration'], 'mappings': []}, 'c20To5n3Concentration': {'slot_uri': 'neon:c20To5n3Concentration', 'description': 'Concentration of cis-5,8,11,14,17-eicosapentaenoic acid, or eicosapentaenoic acid, methyl ester, c20:5n3', 'range': 'double', 'aliases': ['c20 to5n3 concentration'], 'mappings': []}, 'c21To0Concentration': {'slot_uri': 'neon:c21To0Concentration', 'description': 'Concentration of heneicosanoic acid methyl ester, c21:0', 'range': 'double', 'aliases': ['c21 to0 concentration'], 'mappings': []}, 'c22To0Concentration': {'slot_uri': 'neon:c22To0Concentration', 'description': 'Concentration of docosanoic acid methyl ester, c22:0', 'range': 'double', 'aliases': ['c22 to0 concentration'], 'mappings': []}, 'c22To1n9Concentration': {'slot_uri': 'neon:c22To1n9Concentration', 'description': 'Concentration of cis-13-docosenoic acid, or erucic acid, methyl ester, c22:1n9', 'range': 'double', 'aliases': ['c22 to1n9 concentration'], 'mappings': []}, 'c22To2Concentration': {'slot_uri': 'neon:c22To2Concentration', 'description': 'Concentration of cis-13,16-docosadienoic acid methyl ester, c22:2', 'range': 'double', 'aliases': ['c22 to2 concentration'], 'mappings': []}, 'c23To0Concentration': {'slot_uri': 'neon:c23To0Concentration', 'description': 'Concentration of tricosanoic acid methyl ester, c23:0', 'range': 'double', 'aliases': ['c23 to0 concentration'], 'mappings': []}, 'c24To0Concentration': {'slot_uri': 'neon:c24To0Concentration', 'description': 'Concentration of tetracosanoic acid, or lignoceric acid, methyl ester, c24:0', 'range': 'double', 'aliases': ['c24 to0 concentration'], 'mappings': []}, 'c24To1Concentration': {'slot_uri': 'neon:c24To1Concentration', 'description': 'Concentration of cis-15-tetracosenoic acid, c24:1', 'range': 'double', 'aliases': ['c24 to1 concentration'], 'mappings': []}, 'c8To0Concentration': {'slot_uri': 'neon:c8To0Concentration', 'description': 'Concentration of octanoate methyl ester, c8:0', 'range': 'double', 'aliases': ['c8 to0 concentration'], 'mappings': []}, 'cis16To1n9Concentration': {'slot_uri': 'neon:cis16To1n9Concentration', 'description': 'Concentration of methyl hexadecenoic acid, or palmitoleic acid, methyl ester, c16:1n9', 'range': 'double', 'aliases': ['cis16 to1n9 concentration'], 'mappings': []}, 'cis18To1n9Concentration': {'slot_uri': 'neon:cis18To1n9Concentration', 'description': 'Concentration of cis-9-octadecenoic acid, or oleic acid, methyl ester, cis18:1n9', 'range': 'double', 'aliases': ['cis18 to1n9 concentration'], 'mappings': []}, 'cis18To2n912Concentration': {'slot_uri': 'neon:cis18To2n912Concentration', 'description': 'Concentration of cis,cis-9,12-octadecadienoic acid, or linoleic acid, or 18To2-omega-6, methyl ester, cis18:2n9-12', 'range': 'double', 'aliases': ['cis18 to2n912 concentration'], 'mappings': []}, 'cyclo17To0Concentration': {'slot_uri': 'neon:cyclo17To0Concentration', 'description': 'Concentration of the cyclopropyl C17To0 fatty acid methyl cis-9,10-methylenehexadecanoate, cyclo17:0', 'range': 'double', 'aliases': ['cyclo17 to0 concentration'], 'mappings': []}, 'cyclo19To0Concentration': {'slot_uri': 'neon:cyclo19To0Concentration', 'description': 'Concentration of the cyclopropyl C19To0 fatty acid methyl cis-9,10-methyleneoctadecanoate, cyclo19:0', 'range': 'double', 'aliases': ['cyclo19 to0 concentration'], 'mappings': []}, 'extractionEfficiency': {'slot_uri': 'neon:extractionEfficiency', 'description': 'Efficiency of sample extraction', 'range': 'double', 'aliases': ['extraction efficiency'], 'mappings': []}, 'freezeDryMass': {'slot_uri': 'neon:freezeDryMass', 'description': 'Mass of sample after freeze drying', 'range': 'double', 'aliases': ['freeze dry mass'], 'mappings': []}, 'i15To0Concentration': {'slot_uri': 'neon:i15To0Concentration', 'description': 'Concentration of 13-methyltetradecanoic acid methyl ester, i15:0', 'range': 'double', 'aliases': ['i15 to0 concentration'], 'mappings': []}, 'i16To0Concentration': {'slot_uri': 'neon:i16To0Concentration', 'description': 'Concentration of methyl 14-methylpentadecanoate, i16:0', 'range': 'double', 'aliases': ['i16 to0 concentration'], 'mappings': []}, 'i17To0Concentration': {'slot_uri': 'neon:i17To0Concentration', 'description': 'Concentration of methyl 15-methylhexadecanoate, i17:0', 'range': 'double', 'aliases': ['i17 to0 concentration'], 'mappings': []}, 'lipidID': {'slot_uri': 'neon:lipidID', 'description': 'Identifier of lipid standard used for quality assurance testing', 'range': 'string', 'aliases': ['lipid i d'], 'mappings': []}, 'lotNumber': {'slot_uri': 'neon:lotNumber', 'description': 'Lot number for standard', 'range': 'string', 'aliases': ['lot number'], 'mappings': []}, 'trans18To1n9Concentration': {'slot_uri': 'neon:trans18To1n9Concentration', 'description': 'Concentration of trans-9-octadecenoic acid, or elaidic acid, methyl ester, trans18:1n9', 'range': 'double', 'aliases': ['trans18 to1n9 concentration'], 'mappings': []}, 'trans18To2n912Concentration': {'slot_uri': 'neon:trans18To2n912Concentration', 'description': 'Concentration of trans-trans-9,12-octadecadienoic acid, or linoelaidic acid, methyl ester, trans18:2n9-12', 'range': 'double', 'aliases': ['trans18 to2n912 concentration'], 'mappings': []}, 'injNum': {'slot_uri': 'neon:injNum', 'description': 'injNum', 'range': 'string', 'aliases': ['inj num'], 'mappings': []}, 'typeH2o': {'slot_uri': 'neon:typeH2o', 'description': 'typeH2o', 'range': 'string', 'aliases': ['type h2o'], 'mappings': []}, 'snowPresent': {'slot_uri': 'neon:snowPresent', 'description': 'Categorical indicator of whether snow is present within the plot or sampling area', 'range': 'string', 'aliases': ['snow present'], 'mappings': []}, 'pumpPlacementDate': {'slot_uri': 'neon:pumpPlacementDate', 'description': 'The pump placement date-time for low-yield sampling method', 'range': 'time', 'aliases': ['pump placement date'], 'mappings': []}, 'aDiskHeight': {'slot_uri': 'neon:aDiskHeight', 'description': 'The height, to the nearest 0.1 cm, of the log cross-sectional disk used for bulk density sampling; measurement location 1', 'range': 'double', 'aliases': ['a disk height'], 'mappings': []}, 'bagNumber': {'slot_uri': 'neon:bagNumber', 'description': 'Unique value for tracking a field collected sample', 'range': 'string', 'aliases': ['bag number'], 'mappings': []}, 'bDiskHeight': {'slot_uri': 'neon:bDiskHeight', 'description': 'The height, to the nearest 0.1 cm, of the log cross-sectional disk used for bulk density sampling; measurement location 2', 'range': 'double', 'aliases': ['b disk height'], 'mappings': []}, 'bulkDensDisk': {'slot_uri': 'neon:bulkDensDisk', 'description': 'Bulk density of a cdw disk', 'range': 'double', 'aliases': ['bulk dens disk'], 'mappings': []}, 'diameter': {'slot_uri': 'neon:diameter', 'description': 'The maximum cross-sectional diameter', 'range': 'double', 'aliases': ['diameter'], 'mappings': []}, 'diskDryMass': {'slot_uri': 'neon:diskDryMass', 'description': 'Calculated oven-dried mass of a cdw disk', 'range': 'double', 'aliases': ['disk dry mass'], 'mappings': []}, 'diskFreshMass': {'slot_uri': 'neon:diskFreshMass', 'description': 'Mass of fresh, undried material', 'range': 'double', 'aliases': ['disk fresh mass'], 'mappings': []}, 'diskID': {'slot_uri': 'neon:diskID', 'description': 'Numeric identifier for each log cross-sectional disk sampled for bulk density', 'range': 'string', 'aliases': ['disk i d'], 'mappings': []}, 'logAzimuth': {'slot_uri': 'neon:logAzimuth', 'description': 'The azimuth relative to true north, to the nearest degree, measured from the plot centroid facing toward the sampled log', 'range': 'string', 'aliases': ['log azimuth'], 'mappings': []}, 'mappingMethod': {'slot_uri': 'neon:mappingMethod', 'description': 'Indicator for whether or not the specified location is mapped and the method used', 'range': 'string', 'aliases': ['mapping method'], 'mappings': []}, 'maxDiskHeight': {'slot_uri': 'neon:maxDiskHeight', 'description': 'The maximum disk height', 'range': 'double', 'aliases': ['max disk height'], 'mappings': []}, 'minDiskHeight': {'slot_uri': 'neon:minDiskHeight', 'description': 'The minimum disk height', 'range': 'double', 'aliases': ['min disk height'], 'mappings': []}, 'ninetyDiameter': {'slot_uri': 'neon:ninetyDiameter', 'description': 'The cross-sectional diameter perpendicular to the maximum diameter', 'range': 'double', 'aliases': ['ninety diameter'], 'mappings': []}, 'qaFreshMass': {'slot_uri': 'neon:qaFreshMass', 'description': 'Indicates whether freshMass values are associated with qa measurement type', 'range': 'string', 'aliases': ['qa fresh mass'], 'mappings': []}, 'sampleEasting': {'slot_uri': 'neon:sampleEasting', 'description': 'Easting value of sampled location', 'range': 'double', 'aliases': ['sample easting'], 'mappings': []}, 'sampleFreshMass': {'slot_uri': 'neon:sampleFreshMass', 'description': 'Mass of fresh, undried subsample', 'range': 'double', 'aliases': ['sample fresh mass'], 'mappings': []}, 'sampleNorthing': {'slot_uri': 'neon:sampleNorthing', 'description': 'Northing value of sampled location', 'range': 'double', 'aliases': ['sample northing'], 'mappings': []}, 'isotopeAccuracyQF': {'slot_uri': 'neon:isotopeAccuracyQF', 'description': 'Quality flag for accuracy of stable isotope values of QA materials associated with the run', 'range': 'string', 'aliases': ['isotope accuracy q f'], 'mappings': []}, 'percentAccuracyQF': {'slot_uri': 'neon:percentAccuracyQF', 'description': 'Quality flag for accuracy of percent concentration values of QA materials associated with the run', 'range': 'string', 'aliases': ['percent accuracy q f'], 'mappings': []}, 'chlorophyllSuspectCalQF': {'slot_uri': 'neon:chlorophyllSuspectCalQF', 'description': 'Quality flag for the suspect calibration check of chlorophyll a detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['chlorophyll suspect cal q f'], 'mappings': []}, 'dissolvedOxygenSuspectCalQF': {'slot_uri': 'neon:dissolvedOxygenSuspectCalQF', 'description': 'Quality flag for the suspect calibration check of dissolved oxygen detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['dissolved oxygen suspect cal q f'], 'mappings': []}, 'dissOxygenSatSuspectCalQF': {'slot_uri': 'neon:dissOxygenSatSuspectCalQF', 'description': 'Quality flag for the suspect calibration check of dissolved oxygen saturation detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['diss oxygen sat suspect cal q f'], 'mappings': []}, 'fDOMSuspectCalQF': {'slot_uri': 'neon:fDOMSuspectCalQF', 'description': 'Quality flag for the suspect calibration check of fDOM detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['f d o m suspect cal q f'], 'mappings': []}, 'pHSuspectCalQF': {'slot_uri': 'neon:pHSuspectCalQF', 'description': 'Quality flag for the suspect calibration check of pH detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['p h suspect cal q f'], 'mappings': []}, 'sensorDepthSuspectCalQF': {'slot_uri': 'neon:sensorDepthSuspectCalQF', 'description': 'Quality flag for the suspect calibration check of sensor depth detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['sensor depth suspect cal q f'], 'mappings': []}, 'specificCondSuspectCalQF': {'slot_uri': 'neon:specificCondSuspectCalQF', 'description': 'Quality flag for the suspect calibration check of specific conductance detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['specific cond suspect cal q f'], 'mappings': []}, 'turbiditySuspectCalQF': {'slot_uri': 'neon:turbiditySuspectCalQF', 'description': 'Quality flag for the suspect calibration check of turbidity detailed in NEON.DOC.011081 (1=fail 0=pass -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['turbidity suspect cal q f'], 'mappings': []}, 'wssDewTempNumPts': {'slot_uri': 'neon:wssDewTempNumPts', 'description': 'Number of points used to calculate the arithmetic mean of dew or frost point temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss dew temp num pts'], 'mappings': []}, 'wssRHNumPts': {'slot_uri': 'neon:wssRHNumPts', 'description': 'Number of points used to calculate the arithmetic mean of relative humidity for weather summary statistics', 'range': 'double', 'aliases': ['wss r h num pts'], 'mappings': []}, 'wssShortRadNumPts': {'slot_uri': 'neon:wssShortRadNumPts', 'description': 'Number of points used to calculate the arithmetic mean of Incoming Shortwave Radiation for weather summary statistics', 'range': 'double', 'aliases': ['wss short rad num pts'], 'mappings': []}, 'wssStaPresNumPts': {'slot_uri': 'neon:wssStaPresNumPts', 'description': 'Number of points used to calculate the arithmetic mean of station pressure for weather summary statistics', 'range': 'double', 'aliases': ['wss sta pres num pts'], 'mappings': []}, 'wssTempTripleNumPts': {'slot_uri': 'neon:wssTempTripleNumPts', 'description': 'Number of points used to calculate the arithmetic mean of triple aspirated air temperature for weather summary statistics', 'range': 'double', 'aliases': ['wss temp triple num pts'], 'mappings': []}, 'wssWindSpeedNumPts': {'slot_uri': 'neon:wssWindSpeedNumPts', 'description': 'Number of points used to calculate the arithmetic mean of wind speed for weather summary statistics', 'range': 'double', 'aliases': ['wss wind speed num pts'], 'mappings': []}, 'sondeValve': {'slot_uri': 'neon:sondeValve', 'description': 'The valve that was open during water quality measurement', 'range': 'integer', 'aliases': ['sonde valve'], 'mappings': []}, 'assetID': {'slot_uri': 'neon:assetID', 'description': 'MxAssetID from the calibration file', 'range': 'string', 'aliases': ['asset i d'], 'mappings': []}, 'calCertificateFile': {'slot_uri': 'neon:calCertificateFile', 'description': 'Calibration certificate file', 'range': 'string', 'aliases': ['cal certificate file'], 'mappings': []}, 'calCertificateNum': {'slot_uri': 'neon:calCertificateNum', 'description': 'Calibration certificate number', 'range': 'string', 'aliases': ['cal certificate num'], 'mappings': []}, 'calculatedStage': {'slot_uri': 'neon:calculatedStage', 'description': 'Stage calculated from the sum of the water column height and sensorStaffGaugeOffset', 'range': 'double', 'aliases': ['calculated stage'], 'mappings': []}, 'calcWaterColumnHeight': {'slot_uri': 'neon:calcWaterColumnHeight', 'description': 'Calculated water column height based off of the calibratedPressMean', 'range': 'double', 'aliases': ['calc water column height'], 'mappings': []}, 'calibratedPressMean': {'slot_uri': 'neon:calibratedPressMean', 'description': 'Mean calibrated surface water pressure', 'range': 'double', 'aliases': ['calibrated press mean'], 'mappings': []}, 'calibratedPressObsCount': {'slot_uri': 'neon:calibratedPressObsCount', 'description': 'Number of observations included in the calibratedPressMean', 'range': 'double', 'aliases': ['calibrated press obs count'], 'mappings': []}, 'calibratedPressStdDev': {'slot_uri': 'neon:calibratedPressStdDev', 'description': 'Stanrdard deviation of calibrated surface water pressure', 'range': 'double', 'aliases': ['calibrated press std dev'], 'mappings': []}, 'calibratedPressure': {'slot_uri': 'neon:calibratedPressure', 'description': 'Calibrated surface water pressure', 'range': 'double', 'aliases': ['calibrated pressure'], 'mappings': []}, 'curveID': {'slot_uri': 'neon:curveID', 'description': 'Unique identifier for the curve fit to gauge and discharge measurements', 'range': 'string', 'aliases': ['curve i d'], 'mappings': []}, 'dischargeAlphaQF': {'slot_uri': 'neon:dischargeAlphaQF', 'description': 'Discharge quality assurance and quality control report for the alpha quality flag that indicates if one or more quality analysis failed for a datum detailed in NEON.DOC.001113 (1=fail; 0=pass; -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['discharge alpha q f'], 'mappings': []}, 'dischargeBetaQF': {'slot_uri': 'neon:dischargeBetaQF', 'description': 'Discharge quality assurance and quality control report for the beta quality flag which indicates if one or more quality analysis could not be run for a datum detailed in NEON.DOC.001113 (1=fail; 0=pass; -1=NA (i.e could not be run))', 'range': 'integer', 'aliases': ['discharge beta q f'], 'mappings': []}, 'dischargeConsistQF': {'slot_uri': 'neon:dischargeConsistQF', 'description': 'Discharge quality flag for the consistency test detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['discharge consist q f'], 'mappings': []}, 'dischargeFinalQF': {'slot_uri': 'neon:dischargeFinalQF', 'description': 'Discharge final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'integer', 'aliases': ['discharge final q f'], 'mappings': []}, 'dischargeFinalQFSciRvw': {'slot_uri': 'neon:dischargeFinalQFSciRvw', 'description': 'Discharge final quality flag indicating whether a data product has failed a science review of its quality detailed in NEON.DOC.001113 (1=fail; 0=pass/not-reviewed)', 'range': 'string', 'aliases': ['discharge final q f sci rvw'], 'mappings': []}, 'dischargeGapQF': {'slot_uri': 'neon:dischargeGapQF', 'description': 'Discharge quality flag for the gap test detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['discharge gap q f'], 'mappings': []}, 'dischargeNullQF': {'slot_uri': 'neon:dischargeNullQF', 'description': 'Discharge quality flag for the null test detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['discharge null q f'], 'mappings': []}, 'dischargePersistQF': {'slot_uri': 'neon:dischargePersistQF', 'description': 'Discharge quality flag for the persistence test detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['discharge persist q f'], 'mappings': []}, 'dischargeRangeQF': {'slot_uri': 'neon:dischargeRangeQF', 'description': 'Discharge quality flag for the range test detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['discharge range q f'], 'mappings': []}, 'dischargeSpikeQF': {'slot_uri': 'neon:dischargeSpikeQF', 'description': 'Discharge quality flag for the spike test detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['discharge spike q f'], 'mappings': []}, 'dischargeStepQF': {'slot_uri': 'neon:dischargeStepQF', 'description': 'Discharge quality flag for the step test detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['discharge step q f'], 'mappings': []}, 'dischargeSuspectCalQF': {'slot_uri': 'neon:dischargeSuspectCalQF', 'description': 'Quality flag for the suspect calibration check of discharge detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e. could not be run))', 'range': 'integer', 'aliases': ['discharge suspect cal q f'], 'mappings': []}, 'dischargeValidCalQF': {'slot_uri': 'neon:dischargeValidCalQF', 'description': 'Quality flag for the valid calibration check of discharge detailed in NEON.DOC.011081 (1=fail; 0=pass; -1=NA (i.e., could not be run))', 'range': 'integer', 'aliases': ['discharge valid cal q f'], 'mappings': []}, 'equivalentStage': {'slot_uri': 'neon:equivalentStage', 'description': 'Stage equivalent to the observed surface water pressure', 'range': 'double', 'aliases': ['equivalent stage'], 'mappings': []}, 'gaugeHeight': {'slot_uri': 'neon:gaugeHeight', 'description': 'Height of water at staff gauge', 'range': 'double', 'aliases': ['gauge height'], 'mappings': []}, 'maxpostDischarge': {'slot_uri': 'neon:maxpostDischarge', 'description': 'Total stream or river discharge', 'range': 'double', 'aliases': ['maxpost discharge'], 'mappings': []}, 'nonSystematicUnc': {'slot_uri': 'neon:nonSystematicUnc', 'description': 'Uncertainty associated with instrumental noise and free surface fluctuations; sensor repeatability', 'range': 'double', 'aliases': ['non systematic unc'], 'mappings': []}, 'sensorStaffGaugeOffset': {'slot_uri': 'neon:sensorStaffGaugeOffset', 'description': 'Offset between the pressure sensor and the staff gauge; i.e. the staff gauge reading when the water level is just at a reading of 0 pressure', 'range': 'double', 'aliases': ['sensor staff gauge offset'], 'mappings': []}, 'stageUnc': {'slot_uri': 'neon:stageUnc', 'description': 'Uncertainty associated with the stage timeseries data; the sum of nonSystematicUnc and systematicUnc', 'range': 'double', 'aliases': ['stage unc'], 'mappings': []}, 'systematicUnc': {'slot_uri': 'neon:systematicUnc', 'description': 'Uncertainty associated with the relationship between water column height and staff gauge readings; quantified by the difference between calculatedStage and recorded gaugeHeight', 'range': 'double', 'aliases': ['systematic unc'], 'mappings': []}, 'withParaUncQlower1Std': {'slot_uri': 'neon:withParaUncQlower1Std', 'description': 'Lower bound of one standard deviation for discharge including parametric error associated with the rating curve fit', 'range': 'double', 'aliases': ['with para unc qlower1 std'], 'mappings': []}, 'withParaUncQlower2Std': {'slot_uri': 'neon:withParaUncQlower2Std', 'description': 'Lower bound of the 95 % confidence interval for discharge including parametric error associated with the rating curve fit', 'range': 'double', 'aliases': ['with para unc qlower2 std'], 'mappings': []}, 'withParaUncQMean': {'slot_uri': 'neon:withParaUncQMean', 'description': 'Mean discharge including parametric error associated with the rating curve fit', 'range': 'double', 'aliases': ['with para unc q mean'], 'mappings': []}, 'withParaUncQMedian': {'slot_uri': 'neon:withParaUncQMedian', 'description': 'Median discharge including parametric error associated with the rating curve fit', 'range': 'double', 'aliases': ['with para unc q median'], 'mappings': []}, 'withParaUncQStdDev': {'slot_uri': 'neon:withParaUncQStdDev', 'description': 'Standard deviation of discharge including parametric error associated with the rating curve fit', 'range': 'double', 'aliases': ['with para unc q std dev'], 'mappings': []}, 'withParaUncQupper1Std': {'slot_uri': 'neon:withParaUncQupper1Std', 'description': 'Upper bound of one standard deviation for discharge including parametric error associated with the rating curve fit', 'range': 'double', 'aliases': ['with para unc qupper1 std'], 'mappings': []}, 'withParaUncQupper2Std': {'slot_uri': 'neon:withParaUncQupper2Std', 'description': 'Upper bound of the 95 % confidence interval for discharge including parametric error associated with the rating curve fit', 'range': 'double', 'aliases': ['with para unc qupper2 std'], 'mappings': []}, 'withRemnUncQlower1Std': {'slot_uri': 'neon:withRemnUncQlower1Std', 'description': 'Lower bound of one standard deviation for discharge including parametric and remnant error associated with the rating curve fit', 'range': 'double', 'aliases': ['with remn unc qlower1 std'], 'mappings': []}, 'withRemnUncQlower2Std': {'slot_uri': 'neon:withRemnUncQlower2Std', 'description': 'Lower bound of the 95 % confidence interval for discharge including parametric and remnant error associated with the rating curve fit', 'range': 'double', 'aliases': ['with remn unc qlower2 std'], 'mappings': []}, 'withRemnUncQMean': {'slot_uri': 'neon:withRemnUncQMean', 'description': 'Mean discharge including parametric and remnant error associated with the rating curve fit', 'range': 'double', 'aliases': ['with remn unc q mean'], 'mappings': []}, 'withRemnUncQMedian': {'slot_uri': 'neon:withRemnUncQMedian', 'description': 'Median discharge including parametric and remnant error associated with the rating curve fit', 'range': 'double', 'aliases': ['with remn unc q median'], 'mappings': []}, 'withRemnUncQStdDev': {'slot_uri': 'neon:withRemnUncQStdDev', 'description': 'Standard deviation of discharge including parametric and remnant error associated with the rating curve fit', 'range': 'double', 'aliases': ['with remn unc q std dev'], 'mappings': []}, 'withRemnUncQupper1Std': {'slot_uri': 'neon:withRemnUncQupper1Std', 'description': 'Upper bound of one standard deviation for discharge including parametric and remnant error associated with the rating curve fit', 'range': 'double', 'aliases': ['with remn unc qupper1 std'], 'mappings': []}, 'withRemnUncQUpper2Std': {'slot_uri': 'neon:withRemnUncQUpper2Std', 'description': 'Upper bound of the 95 % confidence interval for discharge including parametric and remnant error associated with the rating curve fit', 'range': 'double', 'aliases': ['with remn unc q upper2 std'], 'mappings': []}, 'gasSampleCond': {'slot_uri': 'neon:gasSampleCond', 'description': 'Condition of the gas sample', 'range': 'string', 'aliases': ['gas sample cond'], 'mappings': []}, 'hoboSampleCond': {'slot_uri': 'neon:hoboSampleCond', 'description': 'Condition of the HOBO conductivity logger file', 'range': 'string', 'aliases': ['hobo sample cond'], 'mappings': []}, 'injectateSampleCond': {'slot_uri': 'neon:injectateSampleCond', 'description': 'Condition of the reaeration salt tracer sample', 'range': 'string', 'aliases': ['injectate sample cond'], 'mappings': []}, 'saltBackgroundSampleCond': {'slot_uri': 'neon:saltBackgroundSampleCond', 'description': 'Condition of the reaeration background salt sample', 'range': 'string', 'aliases': ['salt background sample cond'], 'mappings': []}, 'saltTracerSampleCond': {'slot_uri': 'neon:saltTracerSampleCond', 'description': 'Condition of the salt sample', 'range': 'string', 'aliases': ['salt tracer sample cond'], 'mappings': []}, 'syringeCond': {'slot_uri': 'neon:syringeCond', 'description': 'Condition of the sample syringe', 'range': 'string', 'aliases': ['syringe cond'], 'mappings': []}, 'alignmentMethod': {'slot_uri': 'neon:alignmentMethod', 'description': 'Method used to align sequences', 'range': 'string', 'aliases': ['alignment method'], 'mappings': []}, 'analysisCodeFileName': {'slot_uri': 'neon:analysisCodeFileName', 'description': 'File name of code used for data analysis', 'range': 'string', 'aliases': ['analysis code file name'], 'mappings': []}, 'analysisProgram': {'slot_uri': 'neon:analysisProgram', 'description': 'Program or software used to analyze sequences for taxonomic identification', 'range': 'string', 'aliases': ['analysis program'], 'mappings': []}, 'analysisProgramVersion': {'slot_uri': 'neon:analysisProgramVersion', 'description': 'The unique name and numbering combination assigned to the analysis program', 'range': 'string', 'aliases': ['analysis program version'], 'mappings': []}, 'chimeraMethod': {'slot_uri': 'neon:chimeraMethod', 'description': 'Method used to remove chimeras from sequences', 'range': 'string', 'aliases': ['chimera method'], 'mappings': []}, 'clusterMethod': {'slot_uri': 'neon:clusterMethod', 'description': 'Method used to cluster sequences', 'range': 'string', 'aliases': ['cluster method'], 'mappings': []}, 'clusterSimilarity': {'slot_uri': 'neon:clusterSimilarity', 'description': 'Similarity threshold for sequence clusters', 'range': 'double', 'aliases': ['cluster similarity'], 'mappings': []}, 'completeTaxonomy': {'slot_uri': 'neon:completeTaxonomy', 'description': 'Full taxonomic hierarchy for identified organism', 'range': 'string', 'aliases': ['complete taxonomy'], 'mappings': []}, 'dnaSampleCodeDataFrame': {'slot_uri': 'neon:dnaSampleCodeDataFrame', 'description': 'Barcode copy of sample to a data frame column', 'range': 'string', 'aliases': ['dna sample code data frame'], 'mappings': []}, 'dnaSampleIDDataFrame': {'slot_uri': 'neon:dnaSampleIDDataFrame', 'description': 'Identifier copy of sample to a data frame column', 'range': 'string', 'aliases': ['dna sample i d data frame'], 'mappings': []}, 'domain': {'slot_uri': 'neon:domain', 'description': 'The scientific name of the domain in which the taxon is classified', 'range': 'string', 'aliases': ['domain'], 'mappings': []}, 'referenceDatabase': {'slot_uri': 'neon:referenceDatabase', 'description': 'Reference database used for taxonomic identification', 'range': 'string', 'aliases': ['reference database'], 'mappings': []}, 'referenceDatabaseVersion': {'slot_uri': 'neon:referenceDatabaseVersion', 'description': 'The unique name and numbering combination assigned to the reference database', 'range': 'string', 'aliases': ['reference database version'], 'mappings': []}, 'sequenceMatchMethod': {'slot_uri': 'neon:sequenceMatchMethod', 'description': 'Method and/or algorithm used to evaluate the similarity between a query and reference sequence', 'range': 'string', 'aliases': ['sequence match method'], 'mappings': []}, 'sequenceMatchThresholdValue': {'slot_uri': 'neon:sequenceMatchThresholdValue', 'description': 'Threshold value for considering a query and a reference sequence a match', 'range': 'double', 'aliases': ['sequence match threshold value'], 'mappings': []}, 'sequenceMatchValueDescription': {'slot_uri': 'neon:sequenceMatchValueDescription', 'description': 'Description of the metric used to evaluate if a query and a reference sequence are a match', 'range': 'string', 'aliases': ['sequence match value description'], 'mappings': []}, 'downloadFileUrl': {'slot_uri': 'neon:downloadFileUrl', 'description': 'The URL of the file linked to the record', 'range': 'string', 'aliases': ['download file url'], 'mappings': []}, 'channelSlope': {'slot_uri': 'neon:channelSlope', 'description': 'Channel slope', 'range': 'double', 'aliases': ['channel slope'], 'mappings': []}, 'channelSlopeUnc': {'slot_uri': 'neon:channelSlopeUnc', 'description': 'Uncertainty associated with channel slope', 'range': 'double', 'aliases': ['channel slope unc'], 'mappings': []}, 'controlActivationState': {'slot_uri': 'neon:controlActivationState', 'description': 'Designation of whether or not a control is active for a given segment. 1 = active; 0 = inactive', 'range': 'integer', 'aliases': ['control activation state'], 'mappings': []}, 'controlNumber': {'slot_uri': 'neon:controlNumber', 'description': 'Numeric designation for the control number', 'range': 'integer', 'aliases': ['control number'], 'mappings': []}, 'hydraulicControlType': {'slot_uri': 'neon:hydraulicControlType', 'description': 'Type of hydraulic control', 'range': 'string', 'aliases': ['hydraulic control type'], 'mappings': []}, 'manningCoefficient': {'slot_uri': 'neon:manningCoefficient', 'description': 'Manning n roughness coefficient', 'range': 'double', 'aliases': ['manning coefficient'], 'mappings': []}, 'manningCoefficientUnc': {'slot_uri': 'neon:manningCoefficientUnc', 'description': 'Uncertainty associated with manning coefficient', 'range': 'double', 'aliases': ['manning coefficient unc'], 'mappings': []}, 'orificeArea': {'slot_uri': 'neon:orificeArea', 'description': 'Orifice area', 'range': 'double', 'aliases': ['orifice area'], 'mappings': []}, 'orificeAreaUnc': {'slot_uri': 'neon:orificeAreaUnc', 'description': 'Uncertainty associated with orifice area', 'range': 'double', 'aliases': ['orifice area unc'], 'mappings': []}, 'parabolaHeight': {'slot_uri': 'neon:parabolaHeight', 'description': 'Parabola weir of channel height at bankfull', 'range': 'double', 'aliases': ['parabola height'], 'mappings': []}, 'parabolaHeightUnc': {'slot_uri': 'neon:parabolaHeightUnc', 'description': 'Uncertainty associated with parabola weir of channel height at bankfull', 'range': 'double', 'aliases': ['parabola height unc'], 'mappings': []}, 'parabolaWidth': {'slot_uri': 'neon:parabolaWidth', 'description': 'Parabola weir or channel width at bankfull', 'range': 'double', 'aliases': ['parabola width'], 'mappings': []}, 'parabolaWidthUnc': {'slot_uri': 'neon:parabolaWidthUnc', 'description': 'Uncertainty associated with parabola weir or channel width at bankfull', 'range': 'double', 'aliases': ['parabola width unc'], 'mappings': []}, 'priorActivationStage': {'slot_uri': 'neon:priorActivationStage', 'description': 'Prior estimate of activation stage for a control (k in equations)', 'range': 'double', 'aliases': ['prior activation stage'], 'mappings': []}, 'priorActivationStageUnc': {'slot_uri': 'neon:priorActivationStageUnc', 'description': 'Uncertainty associated with prior estimate of activation stage for a control', 'range': 'double', 'aliases': ['prior activation stage unc'], 'mappings': []}, 'priorCoefficient': {'slot_uri': 'neon:priorCoefficient', 'description': 'Prior estimate of coefficient for a control (a in equations)', 'range': 'double', 'aliases': ['prior coefficient'], 'mappings': []}, 'priorCoefficientUnc': {'slot_uri': 'neon:priorCoefficientUnc', 'description': 'Uncertainty associated with prior estimate of coefficient for a control', 'range': 'double', 'aliases': ['prior coefficient unc'], 'mappings': []}, 'priorExponent': {'slot_uri': 'neon:priorExponent', 'description': 'Prior estimate of exponent for a control (c in equations)', 'range': 'double', 'aliases': ['prior exponent'], 'mappings': []}, 'priorExponentUnc': {'slot_uri': 'neon:priorExponentUnc', 'description': 'Uncertainty associated with prior estimate of exponent for a control', 'range': 'double', 'aliases': ['prior exponent unc'], 'mappings': []}, 'rectangularWidth': {'slot_uri': 'neon:rectangularWidth', 'description': 'Rectangular weir or channel width', 'range': 'double', 'aliases': ['rectangular width'], 'mappings': []}, 'rectangularWidthUnc': {'slot_uri': 'neon:rectangularWidthUnc', 'description': 'Uncertainty associated with rectangular weir or channel width', 'range': 'double', 'aliases': ['rectangular width unc'], 'mappings': []}, 'segmentNumber': {'slot_uri': 'neon:segmentNumber', 'description': 'Numeric designation for the segment number', 'range': 'integer', 'aliases': ['segment number'], 'mappings': []}, 'stricklerCoefficient': {'slot_uri': 'neon:stricklerCoefficient', 'description': 'Strickler coefficient; Inverse of manning n', 'range': 'double', 'aliases': ['strickler coefficient'], 'mappings': []}, 'stricklerCoefficientUnc': {'slot_uri': 'neon:stricklerCoefficientUnc', 'description': 'Uncertainty associated with strickler coefficient', 'range': 'double', 'aliases': ['strickler coefficient unc'], 'mappings': []}, 'triangularAngle': {'slot_uri': 'neon:triangularAngle', 'description': 'Triangular weir or channel angle in degrees', 'range': 'double', 'aliases': ['triangular angle'], 'mappings': []}, 'triangularAngleUnc': {'slot_uri': 'neon:triangularAngleUnc', 'description': 'Uncertainty associated with triangular weir or channel angle in degrees', 'range': 'double', 'aliases': ['triangular angle unc'], 'mappings': []}, 'allEventID': {'slot_uri': 'neon:allEventID', 'description': 'All of the eventIDs associated with guage and discharge readings that are used to determine the rating curve fit', 'range': 'string', 'aliases': ['all event i d'], 'mappings': []}, 'gaugeEventID': {'slot_uri': 'neon:gaugeEventID', 'description': 'Event ID for the gauge reading', 'range': 'string', 'aliases': ['gauge event i d'], 'mappings': []}, 'gaugeHeightOffset': {'slot_uri': 'neon:gaugeHeightOffset', 'description': 'Offset applied to the staff gauge reading to account for changes over time in position', 'range': 'double', 'aliases': ['gauge height offset'], 'mappings': []}, 'gaugeHeightUnc': {'slot_uri': 'neon:gaugeHeightUnc', 'description': 'Uncertainty associated with the gaugeHeight measurements', 'range': 'double', 'aliases': ['gauge height unc'], 'mappings': []}, 'includedInRatingCurve': {'slot_uri': 'neon:includedInRatingCurve', 'description': 'Indicator of whether or not a gauging was included in the rating curve; true or false', 'range': 'string', 'aliases': ['included in rating curve'], 'mappings': []}, 'L1DataQF': {'slot_uri': 'neon:L1DataQF', 'description': 'Data quality flag associated with the L1 data', 'range': 'string', 'aliases': ['l1 data q f'], 'mappings': []}, 'maxPostActivationStage': {'slot_uri': 'neon:maxPostActivationStage', 'description': 'Maximum posterior probability estimate of activation stage for a control (k in equations)', 'range': 'double', 'aliases': ['max post activation stage'], 'mappings': []}, 'maxPostCoefficient': {'slot_uri': 'neon:maxPostCoefficient', 'description': 'Maximum posterior probability estimate of coefficient for a control (a in equations)', 'range': 'double', 'aliases': ['max post coefficient'], 'mappings': []}, 'maxPostExponent': {'slot_uri': 'neon:maxPostExponent', 'description': 'Maximum posterior probability estimate of exponent for a control (c in equations)', 'range': 'double', 'aliases': ['max post exponent'], 'mappings': []}, 'maxPostGamma1': {'slot_uri': 'neon:maxPostGamma1', 'description': 'Maximum posterior probability estimate of gamma1 for remnant error of a rating curve (intercept in equations)', 'range': 'double', 'aliases': ['max post gamma1'], 'mappings': []}, 'maxPostGamma2': {'slot_uri': 'neon:maxPostGamma2', 'description': 'Maximum posterior probability estimate of gamma2 for remnant error of a rating curve (slope in equations)', 'range': 'double', 'aliases': ['max post gamma2'], 'mappings': []}, 'maxPostZeroFlowOffset': {'slot_uri': 'neon:maxPostZeroFlowOffset', 'description': 'Maximum posterior probability estimate of zero flow offset for a rating curve (b in equations)', 'range': 'double', 'aliases': ['max post zero flow offset'], 'mappings': []}, 'maxQ': {'slot_uri': 'neon:maxQ', 'description': 'The maximum empirical discharge measurement included in the stage discharge rating curve', 'range': 'double', 'aliases': ['max q'], 'mappings': []}, 'maxStage': {'slot_uri': 'neon:maxStage', 'description': 'The maximum empirical stage measurement included in the stage discharge rating curve', 'range': 'double', 'aliases': ['max stage'], 'mappings': []}, 'minQ': {'slot_uri': 'neon:minQ', 'description': 'The minimum empirical discharge measurement included in the stage discharge rating curve', 'range': 'double', 'aliases': ['min q'], 'mappings': []}, 'minStage': {'slot_uri': 'neon:minStage', 'description': 'The minimum empirical stage measurement included in the stage discharge rating curve', 'range': 'double', 'aliases': ['min stage'], 'mappings': []}, 'recalculatedL1QF': {'slot_uri': 'neon:recalculatedL1QF', 'description': 'Data quality flag generated when L1 discharge directly from the meter and streamDischarge from point data do not match', 'range': 'string', 'aliases': ['recalculated l1 q f'], 'mappings': []}, 'spagActivationStage': {'slot_uri': 'neon:spagActivationStage', 'description': 'Activation stage for a control for a spaghetti (k in equations)', 'range': 'double', 'aliases': ['spag activation stage'], 'mappings': []}, 'spagCoefficient': {'slot_uri': 'neon:spagCoefficient', 'description': 'Coefficient for a control for a spaghetti (a in equations)', 'range': 'double', 'aliases': ['spag coefficient'], 'mappings': []}, 'spagExponent': {'slot_uri': 'neon:spagExponent', 'description': 'Exponent for a control for a spaghetti (c in equations)', 'range': 'double', 'aliases': ['spag exponent'], 'mappings': []}, 'spagGamma1': {'slot_uri': 'neon:spagGamma1', 'description': 'Gamma1 for remnant error of a rating curve for a spaghetti (intercept in equations)', 'range': 'double', 'aliases': ['spag gamma1'], 'mappings': []}, 'spagGamma2': {'slot_uri': 'neon:spagGamma2', 'description': 'Gamma2 for remnant error of a rating curve for a spaghetti (slope in equations)', 'range': 'double', 'aliases': ['spag gamma2'], 'mappings': []}, 'spagLogPost': {'slot_uri': 'neon:spagLogPost', 'description': 'Posterior probability estimate of spaghetti', 'range': 'double', 'aliases': ['spag log post'], 'mappings': []}, 'spagZeroFlowOffset': {'slot_uri': 'neon:spagZeroFlowOffset', 'description': 'Zero flow offset for a rating curve for a spaghetti (b in equations)', 'range': 'double', 'aliases': ['spag zero flow offset'], 'mappings': []}, 'stdDevActivationStage': {'slot_uri': 'neon:stdDevActivationStage', 'description': 'Standard deviation of maximum posterior probability estimate of activation stage for a control (k in equations)', 'range': 'double', 'aliases': ['std dev activation stage'], 'mappings': []}, 'stdDevCoefficient': {'slot_uri': 'neon:stdDevCoefficient', 'description': 'Standard deviation of maximum posterior probability estimate of coefficient for a control (a in equations)', 'range': 'double', 'aliases': ['std dev coefficient'], 'mappings': []}, 'stdDevExponent': {'slot_uri': 'neon:stdDevExponent', 'description': 'Standard deviation of maximum posterior probability estimate of exponent for a control (c in equations)', 'range': 'double', 'aliases': ['std dev exponent'], 'mappings': []}, 'stdDevGamma1': {'slot_uri': 'neon:stdDevGamma1', 'description': 'Standard deviation of maximum posterior probability estimate of gamma1 for remnant error of a rating curve (intercept in equations)', 'range': 'double', 'aliases': ['std dev gamma1'], 'mappings': []}, 'stdDevGamma2': {'slot_uri': 'neon:stdDevGamma2', 'description': 'Standard deviation of maximum posterior probability estimate of gamma2 for remnant error of a rating curve (slope in equations)', 'range': 'double', 'aliases': ['std dev gamma2'], 'mappings': []}, 'stdDevZeroFlowOffset': {'slot_uri': 'neon:stdDevZeroFlowOffset', 'description': 'Standard deviation of maximum posterior probability estimate of zero flow offset for a rating curve (b in equations)', 'range': 'double', 'aliases': ['std dev zero flow offset'], 'mappings': []}, 'streamDischarge': {'slot_uri': 'neon:streamDischarge', 'description': 'Calculated discharge from the velocity meter device point measurements', 'range': 'double', 'aliases': ['stream discharge'], 'mappings': []}, 'streamDischargeUnc': {'slot_uri': 'neon:streamDischargeUnc', 'description': 'Uncertainty associated with the streamDischarge measurements', 'range': 'double', 'aliases': ['stream discharge unc'], 'mappings': []}, 'waterYear': {'slot_uri': 'neon:waterYear', 'description': 'The USGS standard definition: the 12-month period October 1, for any given year through September 30, of the following year. The water year is designated by the calendar year in which it ends and which includes 9 of the 12 months', 'range': 'string', 'aliases': ['water year'], 'mappings': []}, 'X1observed': {'slot_uri': 'neon:X1observed', 'description': 'Observed gauge reading', 'range': 'double', 'aliases': ['x1observed'], 'mappings': []}, 'X1true': {'slot_uri': 'neon:X1true', 'description': 'True gauge reading', 'range': 'double', 'aliases': ['x1true'], 'mappings': []}, 'Y1observed': {'slot_uri': 'neon:Y1observed', 'description': 'Observed discharge reading', 'range': 'double', 'aliases': ['y1observed'], 'mappings': []}, 'Y1residual': {'slot_uri': 'neon:Y1residual', 'description': 'Residual discharge reading', 'range': 'double', 'aliases': ['y1residual'], 'mappings': []}, 'Y1simulated': {'slot_uri': 'neon:Y1simulated', 'description': 'Simulated discharge reading', 'range': 'double', 'aliases': ['y1simulated'], 'mappings': []}, 'Y1stdresidual': {'slot_uri': 'neon:Y1stdresidual', 'description': 'Standardized residual discharge reading', 'range': 'double', 'aliases': ['y1stdresidual'], 'mappings': []}, 'Y1unbiased': {'slot_uri': 'neon:Y1unbiased', 'description': 'Unbiased discharge reading', 'range': 'double', 'aliases': ['y1unbiased'], 'mappings': []}, 'organicCPercent': {'slot_uri': 'neon:organicCPercent', 'description': 'Percent organic carbon in a sample on a dry weight basis', 'range': 'double', 'aliases': ['organic c percent'], 'mappings': []}, 'organicd13C': {'slot_uri': 'neon:organicd13C', 'description': 'Measure of the ratio of 13C:12C in soil organic carbon, relative to Vienna Pee Dee Belemnite', 'range': 'double', 'aliases': ['organicd13 c'], 'mappings': []}, 'rawSoilTemp': {'slot_uri': 'neon:rawSoilTemp', 'description': 'Raw soil temperature in celsius', 'range': 'double', 'aliases': ['raw soil temp'], 'mappings': []}, 'rawSoilMoisture': {'slot_uri': 'neon:rawSoilMoisture', 'description': 'Raw soil moisture as volumetric water content', 'range': 'double', 'aliases': ['raw soil moisture'], 'mappings': []}, 'rawSoilBulkRelPerm': {'slot_uri': 'neon:rawSoilBulkRelPerm', 'description': 'Raw soil bulk relative permittivity', 'range': 'double', 'aliases': ['raw soil bulk rel perm'], 'mappings': []}, 'rawSoilElectricCond': {'slot_uri': 'neon:rawSoilElectricCond', 'description': 'Raw soil electrical conductivity', 'range': 'double', 'aliases': ['raw soil electric cond'], 'mappings': []}, 'rawSoilPoreWaterEC': {'slot_uri': 'neon:rawSoilPoreWaterEC', 'description': 'Raw soil pore water electrical conductivity', 'range': 'double', 'aliases': ['raw soil pore water e c'], 'mappings': []}, 'primerSetID': {'slot_uri': 'neon:primerSetID', 'description': 'Identifier for the primer set used', 'range': 'string', 'aliases': ['primer set i d'], 'mappings': []}, 'processedSeqFileName': {'slot_uri': 'neon:processedSeqFileName', 'description': 'File name of quality filtered sequence data', 'range': 'string', 'aliases': ['processed seq file name'], 'mappings': []}, 'rawDataFileDescription': {'slot_uri': 'neon:rawDataFileDescription', 'description': 'Description of the contents and type of file', 'range': 'string', 'aliases': ['raw data file description'], 'mappings': []}, 'calibrationID': {'slot_uri': 'neon:calibrationID', 'description': 'Calibration ID that corresponds to the ID assigned by CI to a set of calibration factors for a measurement stream', 'range': 'string', 'aliases': ['calibration i d'], 'mappings': []}, 'gaugeCollectDate': {'slot_uri': 'neon:gaugeCollectDate', 'description': 'Date of the gauge height reading collection event', 'range': 'string', 'aliases': ['gauge collect date'], 'mappings': []}, 'stationHorizontalID': {'slot_uri': 'neon:stationHorizontalID', 'description': 'Horizontal code for station', 'range': 'string', 'aliases': ['station horizontal i d'], 'mappings': []}, 'labSampleMedium': {'slot_uri': 'neon:labSampleMedium', 'description': 'Physical form of the specimen', 'range': 'string', 'aliases': ['lab sample medium'], 'mappings': []}, 'totalLipidConcentration': {'slot_uri': 'neon:totalLipidConcentration', 'description': 'Total lipid concentration calculated as the sum of all measured individual lipid components', 'range': 'double', 'aliases': ['total lipid concentration'], 'mappings': []}, 'taxonomyFile': {'slot_uri': 'neon:taxonomyFile', 'description': 'Taxonomy file name', 'range': 'string', 'aliases': ['taxonomy file'], 'mappings': []}, 'adcpCompassCalibrated': {'slot_uri': 'neon:adcpCompassCalibrated', 'description': 'Whether or not the Acoustic Doppler Current Profiler compass was calibrated prior to the discharge measurement', 'range': 'string', 'aliases': ['adcp compass calibrated'], 'mappings': []}, 'adcpCompassError': {'slot_uri': 'neon:adcpCompassError', 'description': 'The Acoustic Doppler Current Profiler compass error calculated prior to discharge measurement', 'range': 'double', 'aliases': ['adcp compass error'], 'mappings': []}, 'loopMBT': {'slot_uri': 'neon:loopMBT', 'description': 'Whether or not a loop moving bed test was performed prior to the discharge measurement', 'range': 'string', 'aliases': ['loop m b t'], 'mappings': []}, 'magneticVariation': {'slot_uri': 'neon:magneticVariation', 'description': 'The angle between magnetic north and true north depending on geographic location', 'range': 'double', 'aliases': ['magnetic variation'], 'mappings': []}, 'riverDepthMean': {'slot_uri': 'neon:riverDepthMean', 'description': 'The mean river depth measured in all transects included in the discharge measurement', 'range': 'double', 'aliases': ['river depth mean'], 'mappings': []}, 'riverDischargeMeasDuration': {'slot_uri': 'neon:riverDischargeMeasDuration', 'description': 'The total duration of all transects included in the discharge measurement', 'range': 'double', 'aliases': ['river discharge meas duration'], 'mappings': []}, 'riverVelocityMaximum': {'slot_uri': 'neon:riverVelocityMaximum', 'description': 'The maximum velocity measured in all transects included in the discharge measurement', 'range': 'double', 'aliases': ['river velocity maximum'], 'mappings': []}, 'riverWidthMean': {'slot_uri': 'neon:riverWidthMean', 'description': 'The mean river width measured in all transects included in the discharge measurement', 'range': 'double', 'aliases': ['river width mean'], 'mappings': []}, 'stationaryMBT': {'slot_uri': 'neon:stationaryMBT', 'description': 'Whether or not a stationary moving bed test was performed prior to the discharge measurement', 'range': 'string', 'aliases': ['stationary m b t'], 'mappings': []}, 'totalDischargeRU': {'slot_uri': 'neon:totalDischargeRU', 'description': 'The relative uncertainty of the total measured discharge as expressed by the standard deviation of the mean discharge within all transects used for the discharge measurement', 'range': 'double', 'aliases': ['total discharge r u'], 'mappings': []}, 'velocityUnits': {'slot_uri': 'neon:velocityUnits', 'description': 'Velocity units', 'range': 'string', 'aliases': ['velocity units'], 'mappings': []}, 'waterTemperature': {'slot_uri': 'neon:waterTemperature', 'description': 'The measured water temperature', 'range': 'double', 'aliases': ['water temperature'], 'mappings': []}, 'widthUnits': {'slot_uri': 'neon:widthUnits', 'description': 'Width units', 'range': 'string', 'aliases': ['width units'], 'mappings': []}, 'windDirRelativeToFlow': {'slot_uri': 'neon:windDirRelativeToFlow', 'description': 'The observed wind direction prior to the discharge measurement, relative to the direction of streamflow', 'range': 'string', 'aliases': ['wind dir relative to flow'], 'mappings': []}, 'windSpeedPrior': {'slot_uri': 'neon:windSpeedPrior', 'description': 'The measured wind speed prior to the discharge measurement', 'range': 'double', 'aliases': ['wind speed prior'], 'mappings': []}, 'nitrateNitriteRunID': {'slot_uri': 'neon:nitrateNitriteRunID', 'description': 'A linking value provided by the external lab that associates the nitrate plus nitrite to the run metadata', 'range': 'string', 'aliases': ['nitrate nitrite run i d'], 'mappings': []}, 'qcIdentifiedBy': {'slot_uri': 'neon:qcIdentifiedBy', 'description': 'An identifier for the technician who quality checked the specimen', 'range': 'string', 'aliases': ['qc identified by'], 'mappings': []}, 'qcIndividualCount': {'slot_uri': 'neon:qcIndividualCount', 'description': 'Number of individuals of the same type in the quality checked sample', 'range': 'string', 'aliases': ['qc individual count'], 'mappings': []}, 'gpsAccuracy': {'slot_uri': 'neon:gpsAccuracy', 'description': 'Position accuracy displayed on the gps unit in meters', 'range': 'double', 'aliases': ['gps accuracy'], 'mappings': []}, 'gpsAccuracyUnits': {'slot_uri': 'neon:gpsAccuracyUnits', 'description': 'Unit of measure used to record gps accuracy', 'range': 'string', 'aliases': ['gps accuracy units'], 'mappings': []}, 'gpsAccuracyValue': {'slot_uri': 'neon:gpsAccuracyValue', 'description': 'Position accuracy displayed on the gps unit', 'range': 'double', 'aliases': ['gps accuracy value'], 'mappings': []}, 'sonarSystemModel': {'slot_uri': 'neon:sonarSystemModel', 'description': 'Make and model of the sonar unit used for survey', 'range': 'string', 'aliases': ['sonar system model'], 'mappings': []}, 'plantDescription': {'slot_uri': 'neon:plantDescription', 'description': 'Description of the plant being collected for archive', 'range': 'string', 'aliases': ['plant description'], 'mappings': []}, 'voucherLifeStage': {'slot_uri': 'neon:voucherLifeStage', 'description': 'Life stage of the plant collected for voucher', 'range': 'string', 'aliases': ['voucher life stage'], 'mappings': []}, 'voucherLocality': {'slot_uri': 'neon:voucherLocality', 'description': 'Description of the location at which the event occurred', 'range': 'string', 'aliases': ['voucher locality'], 'mappings': []}, 'diBlankCode': {'slot_uri': 'neon:diBlankCode', 'description': 'Barcode of blank filter reference', 'range': 'string', 'aliases': ['di blank code'], 'mappings': []}, 'diBlankFate': {'slot_uri': 'neon:diBlankFate', 'description': 'Fate of blank filter reference', 'range': 'string', 'aliases': ['di blank fate'], 'mappings': []}, 'diBlankID': {'slot_uri': 'neon:diBlankID', 'description': 'Identifier for blank filter reference', 'range': 'string', 'aliases': ['di blank i d'], 'mappings': []}, 'filterBlankRep1': {'slot_uri': 'neon:filterBlankRep1', 'description': 'Identifier for blank filter replicate 1', 'range': 'string', 'aliases': ['filter blank rep1'], 'mappings': []}, 'filterBlankRep1Code': {'slot_uri': 'neon:filterBlankRep1Code', 'description': 'Barcode of blank filter replicate 1', 'range': 'string', 'aliases': ['filter blank rep1 code'], 'mappings': []}, 'filterBlankRep1Fate': {'slot_uri': 'neon:filterBlankRep1Fate', 'description': 'Fate of filter blank replicate 1', 'range': 'string', 'aliases': ['filter blank rep1 fate'], 'mappings': []}, 'filterBlankRep1Volume': {'slot_uri': 'neon:filterBlankRep1Volume', 'description': 'Volume of DI water passed through filter blank replicate 1 at domain lab', 'range': 'double', 'aliases': ['filter blank rep1 volume'], 'mappings': []}, 'filterBlankRep2': {'slot_uri': 'neon:filterBlankRep2', 'description': 'Identifier for blank filter replicate 2', 'range': 'string', 'aliases': ['filter blank rep2'], 'mappings': []}, 'filterBlankRep2Code': {'slot_uri': 'neon:filterBlankRep2Code', 'description': 'Barcode of blank filter replicate 2', 'range': 'string', 'aliases': ['filter blank rep2 code'], 'mappings': []}, 'filterBlankRep2Fate': {'slot_uri': 'neon:filterBlankRep2Fate', 'description': 'Fate of blank filter replicate 2', 'range': 'string', 'aliases': ['filter blank rep2 fate'], 'mappings': []}, 'filterBlankRep2Volume': {'slot_uri': 'neon:filterBlankRep2Volume', 'description': 'Volume of DI water passed through filter blank replicate 2 at domain lab', 'range': 'double', 'aliases': ['filter blank rep2 volume'], 'mappings': []}, 'plantMassOnly': {'slot_uri': 'neon:plantMassOnly', 'description': 'Indicator of whether mass data were only collected for plant material', 'range': 'string', 'aliases': ['plant mass only'], 'mappings': []}, 'c16To1Cis11Concentration': {'slot_uri': 'neon:c16To1Cis11Concentration', 'description': 'Concentration of methyl cis-11-hexadecenoate, 16:1 cis 11', 'range': 'double', 'aliases': ['c16 to1 cis11 concentration'], 'mappings': []}, 'c17To0AnteisoConcentration': {'slot_uri': 'neon:c17To0AnteisoConcentration', 'description': 'Concentration of methyl 14-methyl-pentadecanoate, 17:0 anteiso', 'range': 'double', 'aliases': ['c17 to0 anteiso concentration'], 'mappings': []}, 'c19To1Cis10Concentration': {'slot_uri': 'neon:c19To1Cis10Concentration', 'description': 'Concentration of cis-10-nonadecenoic acid, methyl ester, c18:1', 'range': 'double', 'aliases': ['c19 to1 cis10 concentration'], 'mappings': []}, 'c22To6CisConcentration': {'slot_uri': 'neon:c22To6CisConcentration', 'description': 'Concentration of cis-4,7,10,13,16,19-docosahexaenoic acid, methyl ester', 'range': 'double', 'aliases': ['c22 to6 cis concentration'], 'mappings': []}, 'i14To0Concentration': {'slot_uri': 'neon:i14To0Concentration', 'description': 'Concentration of tridecanoic acid, 12-methyl-, methyl ester, iso-14:0', 'range': 'double', 'aliases': ['i14 to0 concentration'], 'mappings': []}, 'lipid10Methyl16To0Concentration': {'slot_uri': 'neon:lipid10Methyl16To0Concentration', 'description': 'Concentration of methyl 10-methyl-hexadecanoate, 10 Me-16:0', 'range': 'double', 'aliases': ['lipid10 methyl16 to0 concentration'], 'mappings': []}, 'lipid10Methyl17To0Concentration': {'slot_uri': 'neon:lipid10Methyl17To0Concentration', 'description': 'Concentration of heptadecanoic acid methyl ester, 10 Me-17:0', 'range': 'double', 'aliases': ['lipid10 methyl17 to0 concentration'], 'mappings': []}, 'lipid10Methyl18To0Concentration': {'slot_uri': 'neon:lipid10Methyl18To0Concentration', 'description': 'Concentration of tuberculostearic acid methyl ester, 10 Me-18:0', 'range': 'double', 'aliases': ['lipid10 methyl18 to0 concentration'], 'mappings': []}, 'groundSurfToThawDist': {'slot_uri': 'neon:groundSurfToThawDist', 'description': 'Distance between ground surface and refusal; i.e. bottom of thawed layer', 'range': 'double', 'aliases': ['ground surf to thaw dist'], 'mappings': []}, 'groundSurfToWaterDist': {'slot_uri': 'neon:groundSurfToWaterDist', 'description': 'Distance between ground surface and surface of liquid water', 'range': 'double', 'aliases': ['ground surf to water dist'], 'mappings': []}, 'liquidWaterPresence': {'slot_uri': 'neon:liquidWaterPresence', 'description': 'Presence of liquid water', 'range': 'string', 'aliases': ['liquid water presence'], 'mappings': []}, 'thawProbeDepth1': {'slot_uri': 'neon:thawProbeDepth1', 'description': 'Depth of thawed layer above permafrost from ground surface; first measurement', 'range': 'double', 'aliases': ['thaw probe depth1'], 'mappings': []}, 'thawProbeDepth10': {'slot_uri': 'neon:thawProbeDepth10', 'description': 'Depth of thawed layer above permafrost from ground surface; tenth measurement', 'range': 'double', 'aliases': ['thaw probe depth10'], 'mappings': []}, 'thawProbeDepth2': {'slot_uri': 'neon:thawProbeDepth2', 'description': 'Depth of thawed layer above permafrost from ground surface; second measurement', 'range': 'double', 'aliases': ['thaw probe depth2'], 'mappings': []}, 'thawProbeDepth3': {'slot_uri': 'neon:thawProbeDepth3', 'description': 'Depth of thawed layer above permafrost from ground surface; third measurement', 'range': 'double', 'aliases': ['thaw probe depth3'], 'mappings': []}, 'thawProbeDepth4': {'slot_uri': 'neon:thawProbeDepth4', 'description': 'Depth of thawed layer above permafrost from ground surface; fourth measurement', 'range': 'double', 'aliases': ['thaw probe depth4'], 'mappings': []}, 'thawProbeDepth5': {'slot_uri': 'neon:thawProbeDepth5', 'description': 'Depth of thawed layer above permafrost from ground surface; fifth measurement', 'range': 'double', 'aliases': ['thaw probe depth5'], 'mappings': []}, 'thawProbeDepth6': {'slot_uri': 'neon:thawProbeDepth6', 'description': 'Depth of thawed layer above permafrost from ground surface; sixth measurement', 'range': 'double', 'aliases': ['thaw probe depth6'], 'mappings': []}, 'thawProbeDepth7': {'slot_uri': 'neon:thawProbeDepth7', 'description': 'Depth of thawed layer above permafrost from ground surface; seventh measurement', 'range': 'double', 'aliases': ['thaw probe depth7'], 'mappings': []}, 'thawProbeDepth8': {'slot_uri': 'neon:thawProbeDepth8', 'description': 'Depth of thawed layer above permafrost from ground surface; eighth measurement', 'range': 'double', 'aliases': ['thaw probe depth8'], 'mappings': []}, 'thawProbeDepth9': {'slot_uri': 'neon:thawProbeDepth9', 'description': 'Depth of thawed layer above permafrost from ground surface; ninth measurement', 'range': 'double', 'aliases': ['thaw probe depth9'], 'mappings': []}, 'thawProbeDepthAverage': {'slot_uri': 'neon:thawProbeDepthAverage', 'description': 'Mean depth of thawed layer above permafrost from ground surface within 2 meter radius of well', 'range': 'double', 'aliases': ['thaw probe depth average'], 'mappings': []}, 'thawProbeDepthStdDev': {'slot_uri': 'neon:thawProbeDepthStdDev', 'description': 'Standard deviation of 10 thaw depth measurements collected within 2 meter radius of well', 'range': 'double', 'aliases': ['thaw probe depth std dev'], 'mappings': []}, 'topOfWellToGroundDist': {'slot_uri': 'neon:topOfWellToGroundDist', 'description': 'Distance between top of well casing and ground surface', 'range': 'double', 'aliases': ['top of well to ground dist'], 'mappings': []}, 'topOfWellToRefusalDist': {'slot_uri': 'neon:topOfWellToRefusalDist', 'description': 'Distance between top of well casing and refusal', 'range': 'double', 'aliases': ['top of well to refusal dist'], 'mappings': []}, 'topOfWellToWaterDist': {'slot_uri': 'neon:topOfWellToWaterDist', 'description': 'Distance between top of well casing and surface of liquid water', 'range': 'double', 'aliases': ['top of well to water dist'], 'mappings': []}, 'transducerLowered': {'slot_uri': 'neon:transducerLowered', 'description': 'Indication of whether or not the pressure transducer was lowered to the well bottom', 'range': 'string', 'aliases': ['transducer lowered'], 'mappings': []}, 'wellPushedDownToThawLayer': {'slot_uri': 'neon:wellPushedDownToThawLayer', 'description': 'Indication of whether or not the well was pushed down to thaw layer', 'range': 'string', 'aliases': ['well pushed down to thaw layer'], 'mappings': []}, 'gasCheckStandardPercentDev': {'slot_uri': 'neon:gasCheckStandardPercentDev', 'description': 'Calculated percent deviation of the run for the gas check standards', 'range': 'double', 'aliases': ['gas check standard percent dev'], 'mappings': []}, 'gasCheckStandardQF': {'slot_uri': 'neon:gasCheckStandardQF', 'description': 'Quality flag indicating when the gas check standard percent deviation is above 2 %; 0 indicates percent deviation less than 2 %; 1 indicates percent deviation 2 % or above; and -1 indicates that the test could not be performed', 'range': 'integer', 'aliases': ['gas check standard q f'], 'mappings': []}, 'saltCheckStandardPercentDev': {'slot_uri': 'neon:saltCheckStandardPercentDev', 'description': 'Calculated percent deviation of the run for the salt check standards', 'range': 'double', 'aliases': ['salt check standard percent dev'], 'mappings': []}, 'saltCheckStandardQF': {'slot_uri': 'neon:saltCheckStandardQF', 'description': 'Quality flag indicating when the salt check standard percent deviation is above 2 %; 0 indicates percent deviation less than 2 %; 1 indicates percent deviation 2 % or above; and -1 indicates that the test could not be performed', 'range': 'integer', 'aliases': ['salt check standard q f'], 'mappings': []}, 'measurementUncertaintyUnits': {'slot_uri': 'neon:measurementUncertaintyUnits', 'description': 'Units of measurement uncertainty', 'range': 'string', 'aliases': ['measurement uncertainty units'], 'mappings': []}, 'methodDetectionLimitUnits': {'slot_uri': 'neon:methodDetectionLimitUnits', 'description': 'Units of detection limit for method used', 'range': 'string', 'aliases': ['method detection limit units'], 'mappings': []}, 'precisionUnits': {'slot_uri': 'neon:precisionUnits', 'description': 'Units of reported precision', 'range': 'string', 'aliases': ['precision units'], 'mappings': []}, 'hoboSampleClass': {'slot_uri': 'neon:hoboSampleClass', 'description': 'Sample class of the HOBO conductivity logger file', 'range': 'string', 'aliases': ['hobo sample class'], 'mappings': []}, 'incompleteExperimentQF': {'slot_uri': 'neon:incompleteExperimentQF', 'description': 'Data quality flag indicating a reaeration experiment that is incomplete This flag is populated on a semi-annual basis following science review', 'range': 'string', 'aliases': ['incomplete experiment q f'], 'mappings': []}, 'injectateSampleClass': {'slot_uri': 'neon:injectateSampleClass', 'description': 'Sample class of the reaeration salt tracer sample', 'range': 'string', 'aliases': ['injectate sample class'], 'mappings': []}, 'vialID': {'slot_uri': 'neon:vialID', 'description': 'Vial identifier', 'range': 'string', 'aliases': ['vial i d'], 'mappings': []}, 'sensorDepthFinalQF': {'slot_uri': 'neon:sensorDepthFinalQF', 'description': 'Water depth final quality flag indicating whether a data product has passed or failed an overall assessment of its quality; detailed in ATBD (1=fail; 0=pass)', 'range': 'integer', 'aliases': ['sensor depth final q f'], 'mappings': []}, 'iceCover': {'slot_uri': 'neon:iceCover', 'description': 'The percent of ice cover in the stream', 'range': 'string', 'aliases': ['ice cover'], 'mappings': []}, 'measuringMethod': {'slot_uri': 'neon:measuringMethod', 'description': 'The method used to collect a measurement', 'range': 'string', 'aliases': ['measuring method'], 'mappings': []}, 'streambedLeafCover': {'slot_uri': 'neon:streambedLeafCover', 'description': 'The amount of fallen leaves covering the streambed', 'range': 'string', 'aliases': ['streambed leaf cover'], 'mappings': []}, 'dicSampleCode': {'slot_uri': 'neon:dicSampleCode', 'description': 'Barcode of a dissolved inorganic carbon sample', 'range': 'string', 'aliases': ['dic sample code'], 'mappings': []}, 'dicSampleCond': {'slot_uri': 'neon:dicSampleCond', 'description': 'Condition of a dissolved inorganic carbon sample', 'range': 'string', 'aliases': ['dic sample cond'], 'mappings': []}, 'dicSampleFate': {'slot_uri': 'neon:dicSampleFate', 'description': 'Fate of a dissolved inorganic carbon sample', 'range': 'string', 'aliases': ['dic sample fate'], 'mappings': []}, 'dicSampleID': {'slot_uri': 'neon:dicSampleID', 'description': 'Identifier for dissolved inorganic carbon sample', 'range': 'string', 'aliases': ['dic sample i d'], 'mappings': []}, 'filtSampleBottleSize': {'slot_uri': 'neon:filtSampleBottleSize', 'description': 'The bottle size used to collect the filtered sample', 'range': 'string', 'aliases': ['filt sample bottle size'], 'mappings': []}, 'gwwAlkSampleBubbleFree': {'slot_uri': 'neon:gwwAlkSampleBubbleFree', 'description': 'An indication of whether or not the alkalinity groundwater sample was collected with a bubble free method', 'range': 'string', 'aliases': ['gww alk sample bubble free'], 'mappings': []}, 'gwwAlkSampleHeadspace': {'slot_uri': 'neon:gwwAlkSampleHeadspace', 'description': 'An indication of whether or not the alkalinity groundwater sample has headspace; for surface water samples no headspace is present in alkalinity samples', 'range': 'string', 'aliases': ['gww alk sample headspace'], 'mappings': []}, 'gwwFiltBubbleFree': {'slot_uri': 'neon:gwwFiltBubbleFree', 'description': 'An indication of whether or not the filtered groundwater sample was collected with a bubble free method', 'range': 'string', 'aliases': ['gww filt bubble free'], 'mappings': []}, 'gwwFiltSampleHeadspace': {'slot_uri': 'neon:gwwFiltSampleHeadspace', 'description': 'An indication of whether or not the filtered groundwater sample has headspace; for surface water samples no headspace is present in filtered samples', 'range': 'string', 'aliases': ['gww filt sample headspace'], 'mappings': []}, 'dscTempHydroCond': {'slot_uri': 'neon:dscTempHydroCond', 'description': 'Type of temporary hydrologic condition present at the discharge transect', 'range': 'string', 'aliases': ['dsc temp hydro cond'], 'mappings': []}, 'dscTempHydroCondLoc': {'slot_uri': 'neon:dscTempHydroCondLoc', 'description': 'Location of the temporary hydrologic condition present at the discharge transect', 'range': 'string', 'aliases': ['dsc temp hydro cond loc'], 'mappings': []}, 'gaugeTempHydroCond': {'slot_uri': 'neon:gaugeTempHydroCond', 'description': 'Type of temporary hydrologic condition present at the staff gauge', 'range': 'string', 'aliases': ['gauge temp hydro cond'], 'mappings': []}, 'gaugeTempHydroCondLoc': {'slot_uri': 'neon:gaugeTempHydroCondLoc', 'description': 'Location of the temporary hydrologic condition present at the staff gauge', 'range': 'string', 'aliases': ['gauge temp hydro cond loc'], 'mappings': []}, 'acceptedForAnalysis': {'slot_uri': 'neon:acceptedForAnalysis', 'description': 'An indication of whether the shipped sample is accepted for planned analysis', 'range': 'string', 'aliases': ['accepted for analysis'], 'mappings': []}, 'archiveGuid': {'slot_uri': 'neon:archiveGuid', 'description': 'Globally unique identifier for the archive sample', 'range': 'string', 'aliases': ['archive guid'], 'mappings': []}, 'archiveSampleClass': {'slot_uri': 'neon:archiveSampleClass', 'description': 'Class of an archive sample', 'range': 'string', 'aliases': ['archive sample class'], 'mappings': []}, 'archiveStartDate': {'slot_uri': 'neon:archiveStartDate', 'description': 'Date that the sample was archived', 'range': 'time', 'aliases': ['archive start date'], 'mappings': []}, 'containerID': {'slot_uri': 'neon:containerID', 'description': 'The identifier for the container in which the sample is located', 'range': 'string', 'aliases': ['container i d'], 'mappings': []}, 'containerMass': {'slot_uri': 'neon:containerMass', 'description': 'Mass of the container in grams', 'range': 'double', 'aliases': ['container mass'], 'mappings': []}, 'destinationFacility': {'slot_uri': 'neon:destinationFacility', 'description': 'Name of institution to which shipment was sent', 'range': 'string', 'aliases': ['destination facility'], 'mappings': []}, 'filterVolume': {'slot_uri': 'neon:filterVolume', 'description': 'Volume of material passed through filter', 'range': 'double', 'aliases': ['filter volume'], 'mappings': []}, 'holdingTime': {'slot_uri': 'neon:holdingTime', 'description': 'The holding time associated with the samples', 'range': 'time', 'aliases': ['holding time'], 'mappings': []}, 'quarantineStatus': {'slot_uri': 'neon:quarantineStatus', 'description': 'An indicator of whether the samples being shipped have associated quarantine restrictions', 'range': 'string', 'aliases': ['quarantine status'], 'mappings': []}, 'sampleReceived': {'slot_uri': 'neon:sampleReceived', 'description': 'An indication of whether the shipped sample was received', 'range': 'string', 'aliases': ['sample received'], 'mappings': []}, 'sentTo': {'slot_uri': 'neon:sentTo', 'description': 'Name of person or institution to which shipment was sent following identifications or analyses', 'range': 'string', 'aliases': ['sent to'], 'mappings': []}, 'shipmentMethod': {'slot_uri': 'neon:shipmentMethod', 'description': 'The method of shipment', 'range': 'string', 'aliases': ['shipment method'], 'mappings': []}, 'shipmentService': {'slot_uri': 'neon:shipmentService', 'description': 'The name of the company performing shipment fulfillment', 'range': 'string', 'aliases': ['shipment service'], 'mappings': []}, 'shippedFrom': {'slot_uri': 'neon:shippedFrom', 'description': 'Named location from which the sample was shipped', 'range': 'string', 'aliases': ['shipped from'], 'mappings': []}, 'storageTemperature': {'slot_uri': 'neon:storageTemperature', 'description': 'The temperature in Centigrade at which the sample is to be stored at the archive facility', 'range': 'string', 'aliases': ['storage temperature'], 'mappings': []}, 'trackingNumber': {'slot_uri': 'neon:trackingNumber', 'description': 'The tracking number assigned by the shipment fulfillment organization', 'range': 'string', 'aliases': ['tracking number'], 'mappings': []}, 'archiveLabSampleMedium': {'slot_uri': 'neon:archiveLabSampleMedium', 'description': 'Physical form of the archive specimen', 'range': 'string', 'aliases': ['archive lab sample medium'], 'mappings': []}, 'qfHeat': {'slot_uri': 'neon:qfHeat', 'description': 'Heater quality flag (L0 prime processing ATBD)', 'range': 'integer', 'aliases': ['qf heat'], 'mappings': []}, 'toxicodendronPossible': {'slot_uri': 'neon:toxicodendronPossible', 'description': 'Indicator for whether a sample may contain Toxicodendron spp', 'range': 'string', 'aliases': ['toxicodendron possible'], 'mappings': []}, 'qfPresDiff': {'slot_uri': 'neon:qfPresDiff', 'description': 'Flag indicates whether the measured pressure is out of acceptable range (1 = yes, 0 = no)', 'range': 'string', 'aliases': ['qf pres diff'], 'mappings': []}, 'extractEffStdConc': {'slot_uri': 'neon:extractEffStdConc', 'description': 'Concentration of lipid standard used for measuring extraction efficiency with units defined by the analytical laboratory', 'range': 'double', 'aliases': ['extract eff std conc'], 'mappings': []}, 'extractEffStdID': {'slot_uri': 'neon:extractEffStdID', 'description': 'Identifier of lipid standard used for measuring extraction efficiency', 'range': 'string', 'aliases': ['extract eff std i d'], 'mappings': []}, 'extractEffStdUnits': {'slot_uri': 'neon:extractEffStdUnits', 'description': 'Associated units of measure for extraction efficiency standard', 'range': 'string', 'aliases': ['extract eff std units'], 'mappings': []}, 'co2Trapped': {'slot_uri': 'neon:co2Trapped', 'description': 'Indicator for whether carbon dioxide was trapped prior to analysis; used for measuring nitrogen in high C:N samples', 'range': 'string', 'aliases': ['co2 trapped'], 'mappings': []}, 'communitySubsampleCode': {'slot_uri': 'neon:communitySubsampleCode', 'description': 'Barcode of a microbial community composition subsample', 'range': 'string', 'aliases': ['community subsample code'], 'mappings': []}, 'communitySubsampleFate': {'slot_uri': 'neon:communitySubsampleFate', 'description': 'Fate of a microbial community composition subsample', 'range': 'string', 'aliases': ['community subsample fate'], 'mappings': []}, 'communitySubsampleID': {'slot_uri': 'neon:communitySubsampleID', 'description': 'Unique identifier associated with the microbial community composition subsample', 'range': 'string', 'aliases': ['community subsample i d'], 'mappings': []}, 'dnaStandardSampleCode': {'slot_uri': 'neon:dnaStandardSampleCode', 'description': 'Barcode of DNA standard sample', 'range': 'string', 'aliases': ['dna standard sample code'], 'mappings': []}, 'dnaStandardSampleFate': {'slot_uri': 'neon:dnaStandardSampleFate', 'description': 'Fate of DNA standard sample', 'range': 'string', 'aliases': ['dna standard sample fate'], 'mappings': []}, 'dnaStandardSampleID': {'slot_uri': 'neon:dnaStandardSampleID', 'description': 'Identifier for the DNA standard sample', 'range': 'string', 'aliases': ['dna standard sample i d'], 'mappings': []}, 'standardCreationLocation': {'slot_uri': 'neon:standardCreationLocation', 'description': 'Name of the location where the standard sample was created', 'range': 'string', 'aliases': ['standard creation location'], 'mappings': []}, 'chironomidVialCode': {'slot_uri': 'neon:chironomidVialCode', 'description': 'Barcode of a chironomid subsample', 'range': 'string', 'aliases': ['chironomid vial code'], 'mappings': []}, 'chironomidVialFate': {'slot_uri': 'neon:chironomidVialFate', 'description': 'Fate of a chironomid subsample', 'range': 'string', 'aliases': ['chironomid vial fate'], 'mappings': []}, 'chironomidVialID': {'slot_uri': 'neon:chironomidVialID', 'description': 'Identifier for chironomid subsample', 'range': 'string', 'aliases': ['chironomid vial i d'], 'mappings': []}, 'dnaSnagDiameter': {'slot_uri': 'neon:dnaSnagDiameter', 'description': 'Diameter of snag sampled for DNA', 'range': 'double', 'aliases': ['dna snag diameter'], 'mappings': []}, 'dnaSnagLength': {'slot_uri': 'neon:dnaSnagLength', 'description': 'Length of snag sampled for DNA', 'range': 'double', 'aliases': ['dna snag length'], 'mappings': []}, 'freezeDriedCode': {'slot_uri': 'neon:freezeDriedCode', 'description': 'Barcode of freeze dried sample', 'range': 'string', 'aliases': ['freeze dried code'], 'mappings': []}, 'freezeDriedID': {'slot_uri': 'neon:freezeDriedID', 'description': 'Identifier for freeze dried sample', 'range': 'string', 'aliases': ['freeze dried i d'], 'mappings': []}, 'preservedCode': {'slot_uri': 'neon:preservedCode', 'description': 'Barcode of preserved sample', 'range': 'string', 'aliases': ['preserved code'], 'mappings': []}, 'preservedID': {'slot_uri': 'neon:preservedID', 'description': 'Identifier for preserved sample', 'range': 'string', 'aliases': ['preserved i d'], 'mappings': []}, 'analysisResultsQF': {'slot_uri': 'neon:analysisResultsQF', 'description': 'Quality flag for sample analysis results', 'range': 'string', 'aliases': ['analysis results q f'], 'mappings': []}, 'analyteStandardQF': {'slot_uri': 'neon:analyteStandardQF', 'description': 'Quality flag for the analyte standard/s', 'range': 'string', 'aliases': ['analyte standard q f'], 'mappings': []}, 'analyteAbsoluteError': {'slot_uri': 'neon:analyteAbsoluteError', 'description': 'Long-term average absolute error, e.g. the difference between observed and known values of the analyte, based on analysis of quality assurance reference materials or standards treated as unknowns', 'range': 'double', 'aliases': ['analyte absolute error'], 'mappings': []}, 'analyteMetricsCount': {'slot_uri': 'neon:analyteMetricsCount', 'description': 'Count of how many measurements were used to determine analyte metrics', 'range': 'string', 'aliases': ['analyte metrics count'], 'mappings': []}, 'qaReportingEndDate': {'slot_uri': 'neon:qaReportingEndDate', 'description': 'End date for the quality assurance (QA) reporting period', 'range': 'time', 'aliases': ['qa reporting end date'], 'mappings': []}, 'qaReportingStartDate': {'slot_uri': 'neon:qaReportingStartDate', 'description': 'Start date for the quality assurance (QA) reporting period', 'range': 'time', 'aliases': ['qa reporting start date'], 'mappings': []}, 'bulkDensSampleID': {'slot_uri': 'neon:bulkDensSampleID', 'description': 'Non-unique identifier for bulk density sample', 'range': 'string', 'aliases': ['bulk dens sample i d'], 'mappings': []}, 'wavelength': {'slot_uri': 'neon:wavelength', 'description': 'Wavelength of measurement', 'range': 'double', 'aliases': ['wavelength'], 'mappings': []}, 'reflectance': {'slot_uri': 'neon:reflectance', 'description': 'Reflectance of sample', 'range': 'double', 'aliases': ['reflectance'], 'mappings': []}, 'wavelengthIncrement': {'slot_uri': 'neon:wavelengthIncrement', 'description': 'Increment size of wavelength', 'range': 'double', 'aliases': ['wavelength increment'], 'mappings': []}, 'protocolActivity': {'slot_uri': 'neon:protocolActivity', 'description': 'Protocol activity under which the event occurred', 'range': 'string', 'aliases': ['protocol activity'], 'mappings': []}, 'oligochaeteVialCode': {'slot_uri': 'neon:oligochaeteVialCode', 'description': 'Barcode of an oligochaete subsample', 'range': 'string', 'aliases': ['oligochaete vial code'], 'mappings': []}, 'oligochaeteVialFate': {'slot_uri': 'neon:oligochaeteVialFate', 'description': 'Fate of an oligochaete subsample', 'range': 'string', 'aliases': ['oligochaete vial fate'], 'mappings': []}, 'oligochaeteVialID': {'slot_uri': 'neon:oligochaeteVialID', 'description': 'Identifier for oligochaete subsample', 'range': 'string', 'aliases': ['oligochaete vial i d'], 'mappings': []}, 'biomassRemoval': {'slot_uri': 'neon:biomassRemoval', 'description': 'Indicates whether or not biomass was removed for plant reduction', 'range': 'string', 'aliases': ['biomass removal'], 'mappings': []}, 'eventType': {'slot_uri': 'neon:eventType', 'description': 'Classification of information associated with the event type', 'range': 'string', 'aliases': ['event type'], 'mappings': []}, 'fireSeverity': {'slot_uri': 'neon:fireSeverity', 'description': 'Fire severity classification', 'range': 'string', 'aliases': ['fire severity'], 'mappings': []}, 'maxQuantity': {'slot_uri': 'neon:maxQuantity', 'description': 'The maximum quantity of the event measured', 'range': 'double', 'aliases': ['max quantity'], 'mappings': []}, 'maxStartDate': {'slot_uri': 'neon:maxStartDate', 'description': 'The maximum start date range entered by the technician when the exact start date is unknown', 'range': 'time', 'aliases': ['max start date'], 'mappings': []}, 'methodTypeChoice': {'slot_uri': 'neon:methodTypeChoice', 'description': 'Category information for the method or type choice associated with the event type', 'range': 'string', 'aliases': ['method type choice'], 'mappings': []}, 'minEndDate': {'slot_uri': 'neon:minEndDate', 'description': 'The earliest end date range entered by the technician when the exact end date is unknown', 'range': 'time', 'aliases': ['min end date'], 'mappings': []}, 'minQuantity': {'slot_uri': 'neon:minQuantity', 'description': 'The minimum quantity of the event measured ', 'range': 'double', 'aliases': ['min quantity'], 'mappings': []}, 'name': {'slot_uri': 'neon:name', 'description': 'Person name or common name associated with an ownership change or chemical application event type', 'range': 'string', 'aliases': ['name'], 'mappings': []}, 'otherScientificName': {'slot_uri': 'neon:otherScientificName', 'description': 'Other scientific name, not included in the NEON constrained taxon tables. This is the name of the lowest level taxonomic rank that can be determined', 'range': 'string', 'aliases': ['other scientific name'], 'mappings': []}, 'quantityUnit': {'slot_uri': 'neon:quantityUnit', 'description': 'The unit that corresponds to the quantity measurement', 'range': 'string', 'aliases': ['quantity unit'], 'mappings': []}, 'reporterType': {'slot_uri': 'neon:reporterType', 'description': "Indicates source of observation reporting; 'primary' for NEON team member observed and 'secondary' for non-NEON individuals observed", 'range': 'string', 'aliases': ['reporter type'], 'mappings': []}, 'bgcArchiveMass': {'slot_uri': 'neon:bgcArchiveMass', 'description': 'Mass of a biogeochemistry archive sample', 'range': 'double', 'aliases': ['bgc archive mass'], 'mappings': []}, 'horizonDetails': {'slot_uri': 'neon:horizonDetails', 'description': 'Qualifier for soil horizon designation', 'range': 'string', 'aliases': ['horizon details'], 'mappings': []}, 'biophysicalCriteria': {'slot_uri': 'neon:biophysicalCriteria', 'description': 'An indicator of whether sampling coincided with the intended biophysical conditions', 'range': 'string', 'aliases': ['biophysical criteria'], 'mappings': []}, 'precisionRepeatabilityUnits': {'slot_uri': 'neon:precisionRepeatabilityUnits', 'description': 'Units for closeness of agreement between indications or measured quantity values obtained by replicate measurements on the same or similar objects under specified conditions', 'range': 'string', 'aliases': ['precision repeatability units'], 'mappings': []}, 'adequateSampleVol': {'slot_uri': 'neon:adequateSampleVol', 'description': 'An indication of whether or not there was adequate sample volume available for collecting all samples. When no: samples are prioritized in this order: isotopes; filtered analytes; alkalinity titrations; unfiltered analytes; particulate analysis', 'range': 'string', 'aliases': ['adequate sample vol'], 'mappings': []}, 'ashMassDataQF': {'slot_uri': 'neon:ashMassDataQF', 'description': 'Data quality flag for ash mass measurements', 'range': 'string', 'aliases': ['ash mass data q f'], 'mappings': []}, 'enumerationDifferenceMax': {'slot_uri': 'neon:enumerationDifferenceMax', 'description': 'Maximum percent difference in enumeration calculated over the previous analysis year', 'range': 'double', 'aliases': ['enumeration difference max'], 'mappings': []}, 'enumerationDifferenceMean': {'slot_uri': 'neon:enumerationDifferenceMean', 'description': 'Mean percent difference in enumeration calculated over the previous analysis year', 'range': 'double', 'aliases': ['enumeration difference mean'], 'mappings': []}, 'enumerationDifferenceMin': {'slot_uri': 'neon:enumerationDifferenceMin', 'description': 'Minimum percent difference in enumeration calculated over the previous analysis year', 'range': 'double', 'aliases': ['enumeration difference min'], 'mappings': []}, 'qcAnalyzedBy': {'slot_uri': 'neon:qcAnalyzedBy', 'description': 'Name of lab personnel analyzing sample for quality control', 'range': 'string', 'aliases': ['qc analyzed by'], 'mappings': []}, 'BOLDsequenceURL': {'slot_uri': 'neon:BOLDsequenceURL', 'description': 'Sequence from BOLD', 'range': 'string', 'aliases': ['b o l dsequence u r l'], 'mappings': []}, 'BOLDtraceURL': {'slot_uri': 'neon:BOLDtraceURL', 'description': 'Trace from BOLD', 'range': 'string', 'aliases': ['b o l dtrace u r l'], 'mappings': []}, 'genusPTD': {'slot_uri': 'neon:genusPTD', 'description': 'Genus-level percent taxonomic difference (PTD) between the first taxonomist and the second taxonomist for the same sample', 'range': 'double', 'aliases': ['genus p t d'], 'mappings': []}, 'NEONsequenceURL': {'slot_uri': 'neon:NEONsequenceURL', 'description': 'Sequence from BOLD hosted in NEON ECS', 'range': 'string', 'aliases': ['n e o nsequence u r l'], 'mappings': []}, 'NEONtraceURL': {'slot_uri': 'neon:NEONtraceURL', 'description': 'Trace from BOLD hosted in NEON ECS', 'range': 'string', 'aliases': ['n e o ntrace u r l'], 'mappings': []}, 'speciesPTD': {'slot_uri': 'neon:speciesPTD', 'description': 'Species-level percent taxonomic difference (PTD) between the first taxonomist and the second taxonomist for the same sample', 'range': 'double', 'aliases': ['species p t d'], 'mappings': []}, 'qaSample': {'slot_uri': 'neon:qaSample', 'description': 'Indicates whether sample measurements are replicates for quality assurance purposes', 'range': 'string', 'aliases': ['qa sample'], 'mappings': []}, 'chlorophyllSampleCondition': {'slot_uri': 'neon:chlorophyllSampleCondition', 'description': 'Condition of a chlorophyll sample', 'range': 'string', 'aliases': ['chlorophyll sample condition'], 'mappings': []}, 'archiveLocatorID': {'slot_uri': 'neon:archiveLocatorID', 'description': 'Identifier for the location where filter is archived, as a string containing warehouse, shelf, and box number', 'range': 'string', 'aliases': ['archive locator i d'], 'mappings': []}, 'filterCode': {'slot_uri': 'neon:filterCode', 'description': 'Barcode of the filter', 'range': 'string', 'aliases': ['filter code'], 'mappings': []}, 'filterManufactureName': {'slot_uri': 'neon:filterManufactureName', 'description': 'The manufacturer of the filter', 'range': 'string', 'aliases': ['filter manufacture name'], 'mappings': []}, 'filterProductModel': {'slot_uri': 'neon:filterProductModel', 'description': 'Model number of the filter', 'range': 'string', 'aliases': ['filter product model'], 'mappings': []}, 'estimated95percentUC': {'slot_uri': 'neon:estimated95percentUC', 'description': 'The estimated ninety-five percent uncertainty of the total discharge measurement as calculated by the post-processing software', 'range': 'double', 'aliases': ['estimated95percent u c'], 'mappings': []}, 'timeZone': {'slot_uri': 'neon:timeZone', 'description': 'Time zone of the timestamp when the measurement was collected', 'range': 'string', 'aliases': ['time zone'], 'mappings': []}, 'bulkInvertCount': {'slot_uri': 'neon:bulkInvertCount', 'description': 'The number of macroinvertebrates per scientificName counted during fish processing ', 'range': 'string', 'aliases': ['bulk invert count'], 'mappings': []}, 'cfcIndividual': {'slot_uri': 'neon:cfcIndividual', 'description': 'Indicator for whether the sample comes from a canopy foliage individual', 'range': 'string', 'aliases': ['cfc individual'], 'mappings': []}, 'fieldSpectrometerSettings': {'slot_uri': 'neon:fieldSpectrometerSettings', 'description': 'Settings used in the field spectrometer software', 'range': 'string', 'aliases': ['field spectrometer settings'], 'mappings': []}, 'foreopticConnection': {'slot_uri': 'neon:foreopticConnection', 'description': 'Foreoptic connection used to make measurements', 'range': 'string', 'aliases': ['foreoptic connection'], 'mappings': []}, 'foreopticType': {'slot_uri': 'neon:foreopticType', 'description': 'Type of foreoptic used to make measurements', 'range': 'string', 'aliases': ['foreoptic type'], 'mappings': []}, 'leafAge': {'slot_uri': 'neon:leafAge', 'description': 'Relative age of the leaf or needles', 'range': 'string', 'aliases': ['leaf age'], 'mappings': []}, 'leafArrangement': {'slot_uri': 'neon:leafArrangement', 'description': 'Physical arrangement of leaves or needles during spectral measurement', 'range': 'string', 'aliases': ['leaf arrangement'], 'mappings': []}, 'leafExposure': {'slot_uri': 'neon:leafExposure', 'description': 'Sun exposure of the leaf or needles', 'range': 'string', 'aliases': ['leaf exposure'], 'mappings': []}, 'leafSamplePosition': {'slot_uri': 'neon:leafSamplePosition', 'description': 'Vertical position of a leaf or needle sample in the canopy', 'range': 'string', 'aliases': ['leaf sample position'], 'mappings': []}, 'leafStatus': {'slot_uri': 'neon:leafStatus', 'description': 'Status of the leaf or needles', 'range': 'string', 'aliases': ['leaf status'], 'mappings': []}, 'lightSource': {'slot_uri': 'neon:lightSource', 'description': 'Description of the light source used for measurements', 'range': 'string', 'aliases': ['light source'], 'mappings': []}, 'measurementQuantity': {'slot_uri': 'neon:measurementQuantity', 'description': 'Type of measurement', 'range': 'string', 'aliases': ['measurement quantity'], 'mappings': []}, 'measurementUnits': {'slot_uri': 'neon:measurementUnits', 'description': 'Units of measurement', 'range': 'string', 'aliases': ['measurement units'], 'mappings': []}, 'measurementVenue': {'slot_uri': 'neon:measurementVenue', 'description': 'Physical setting for measurements', 'range': 'string', 'aliases': ['measurement venue'], 'mappings': []}, 'reflectanceCondition': {'slot_uri': 'neon:reflectanceCondition', 'description': 'Conditions under which reflectance measurement was made', 'range': 'string', 'aliases': ['reflectance condition'], 'mappings': []}, 'software': {'slot_uri': 'neon:software', 'description': 'Name and version of the software used to process the data', 'range': 'string', 'aliases': ['software'], 'mappings': []}, 'spectralSampleCode': {'slot_uri': 'neon:spectralSampleCode', 'description': 'Barcode of a spectral sample', 'range': 'string', 'aliases': ['spectral sample code'], 'mappings': []}, 'spectralSampleCodeDataFrame': {'slot_uri': 'neon:spectralSampleCodeDataFrame', 'description': 'Barcode copy of spectral sample to a data frame column', 'range': 'string', 'aliases': ['spectral sample code data frame'], 'mappings': []}, 'spectralSampleFate': {'slot_uri': 'neon:spectralSampleFate', 'description': 'Fate of a spectral sample', 'range': 'string', 'aliases': ['spectral sample fate'], 'mappings': []}, 'spectralSampleID': {'slot_uri': 'neon:spectralSampleID', 'description': 'Identifier for a spectral sample', 'range': 'string', 'aliases': ['spectral sample i d'], 'mappings': []}, 'spectralSampleIDDataFrame': {'slot_uri': 'neon:spectralSampleIDDataFrame', 'description': 'Identifier copy of spectral sample to a data frame column', 'range': 'string', 'aliases': ['spectral sample i d data frame'], 'mappings': []}, 'targetStatus': {'slot_uri': 'neon:targetStatus', 'description': 'Status of foliage targeted for measurements', 'range': 'string', 'aliases': ['target status'], 'mappings': []}, 'targetType': {'slot_uri': 'neon:targetType', 'description': 'Type of foliage targeted for measurments', 'range': 'string', 'aliases': ['target type'], 'mappings': []}, 'parentFolderName': {'slot_uri': 'neon:parentFolderName', 'description': 'Name of parent folder in which the file was uploaded', 'range': 'string', 'aliases': ['parent folder name'], 'mappings': []}, 'archiveDataFileDescription': {'slot_uri': 'neon:archiveDataFileDescription', 'description': 'Description of the contents and type of archive file', 'range': 'string', 'aliases': ['archive data file description'], 'mappings': []}, 'archiveDataFileName': {'slot_uri': 'neon:archiveDataFileName', 'description': 'Name of file or folder containing archival data, including file extension', 'range': 'string', 'aliases': ['archive data file name'], 'mappings': []}, 'archiveDataFilePath': {'slot_uri': 'neon:archiveDataFilePath', 'description': 'The system path identifying the archive data file location', 'range': 'string', 'aliases': ['archive data file path'], 'mappings': []}, 'archiveParentFolderName': {'slot_uri': 'neon:archiveParentFolderName', 'description': 'Name of parent archive folder in which the file was uploaded', 'range': 'string', 'aliases': ['archive parent folder name'], 'mappings': []}, 'processedSeqFileNameCode': {'slot_uri': 'neon:processedSeqFileNameCode', 'description': 'Barcode of the identifier for processed sequence file name', 'range': 'string', 'aliases': ['processed seq file name code'], 'mappings': []}, 'processedSeqFileNameFate': {'slot_uri': 'neon:processedSeqFileNameFate', 'description': 'Fate of the identifier for processed sequence file name', 'range': 'string', 'aliases': ['processed seq file name fate'], 'mappings': []}, 'processedSeqFileNameID': {'slot_uri': 'neon:processedSeqFileNameID', 'description': 'Identifier for processed sequence file name', 'range': 'string', 'aliases': ['processed seq file name i d'], 'mappings': []}, 'PDE': {'slot_uri': 'neon:PDE', 'description': 'Percent difference in enumeration (PDE) between the first count and the second count for the same sample', 'range': 'double', 'aliases': ['p d e'], 'mappings': []}, 'freezeDriedFate': {'slot_uri': 'neon:freezeDriedFate', 'description': 'Fate of freeze dried sample', 'range': 'string', 'aliases': ['freeze dried fate'], 'mappings': []}, 'preservedFate': {'slot_uri': 'neon:preservedFate', 'description': 'Fate of preserved sample', 'range': 'string', 'aliases': ['preserved fate'], 'mappings': []}, 'incubationCondition': {'slot_uri': 'neon:incubationCondition', 'description': 'Condition of incubated nitrogen transformation sample upon retrieval', 'range': 'string', 'aliases': ['incubation condition'], 'mappings': []}, 'analyteAccuracyUnits': {'slot_uri': 'neon:analyteAccuracyUnits', 'description': 'Associated units of measure for analyte accuracy', 'range': 'string', 'aliases': ['analyte accuracy units'], 'mappings': []}, 'analyteKnownValueUnits': {'slot_uri': 'neon:analyteKnownValueUnits', 'description': 'Associated units of measure for analyte known value', 'range': 'string', 'aliases': ['analyte known value units'], 'mappings': []}, 'analyteStandardDeviationUnits': {'slot_uri': 'neon:analyteStandardDeviationUnits', 'description': 'Associated units of measure for analyte standard deviation', 'range': 'string', 'aliases': ['analyte standard deviation units'], 'mappings': []}, 'filtNutSampleBarcode': {'slot_uri': 'neon:filtNutSampleBarcode', 'description': 'Barcode of a filtered nutrient sample', 'range': 'string', 'aliases': ['filt nut sample barcode'], 'mappings': []}, 'filtNutSampleClass': {'slot_uri': 'neon:filtNutSampleClass', 'description': 'Sample class of a filtered nutrient sample', 'range': 'string', 'aliases': ['filt nut sample class'], 'mappings': []}, 'filtNutSampleCond': {'slot_uri': 'neon:filtNutSampleCond', 'description': 'Condition of a filtered nutrient sample', 'range': 'string', 'aliases': ['filt nut sample cond'], 'mappings': []}, 'filtNutSampleFate': {'slot_uri': 'neon:filtNutSampleFate', 'description': 'Fate of a filtered nutrient sample', 'range': 'string', 'aliases': ['filt nut sample fate'], 'mappings': []}, 'filtNutSampleID': {'slot_uri': 'neon:filtNutSampleID', 'description': 'Identifier for filtered nutrient sample', 'range': 'string', 'aliases': ['filt nut sample i d'], 'mappings': []}, 'gwwDICBubbleFree': {'slot_uri': 'neon:gwwDICBubbleFree', 'description': 'An indication of whether or not the DIC groundwater subsample was collected with a bubble free method', 'range': 'string', 'aliases': ['gww d i c bubble free'], 'mappings': []}, 'rawNutSampleBarcode': {'slot_uri': 'neon:rawNutSampleBarcode', 'description': 'Barcode of a raw nutrient sample', 'range': 'string', 'aliases': ['raw nut sample barcode'], 'mappings': []}, 'rawNutSampleClass': {'slot_uri': 'neon:rawNutSampleClass', 'description': 'Sample class of a raw nutrient sample', 'range': 'string', 'aliases': ['raw nut sample class'], 'mappings': []}, 'rawNutSampleCond': {'slot_uri': 'neon:rawNutSampleCond', 'description': 'Condition of a raw nutrient sample', 'range': 'string', 'aliases': ['raw nut sample cond'], 'mappings': []}, 'rawNutSampleFate': {'slot_uri': 'neon:rawNutSampleFate', 'description': 'Fate of a raw nutrient sample', 'range': 'string', 'aliases': ['raw nut sample fate'], 'mappings': []}, 'rawNutSampleID': {'slot_uri': 'neon:rawNutSampleID', 'description': 'Identifier for raw nutrient sample', 'range': 'string', 'aliases': ['raw nut sample i d'], 'mappings': []}, 'dataCollected': {'slot_uri': 'neon:dataCollected', 'description': 'Specific measurements made in a given event', 'range': 'string', 'aliases': ['data collected'], 'mappings': []}, 'initialBandStemDiameter': {'slot_uri': 'neon:initialBandStemDiameter', 'description': 'Cross sectional diameter at the time dendrometer band is installed', 'range': 'double', 'aliases': ['initial band stem diameter'], 'mappings': []}, 'initialDendrometerGap': {'slot_uri': 'neon:initialDendrometerGap', 'description': 'Initial width of the measurement window', 'range': 'double', 'aliases': ['initial dendrometer gap'], 'mappings': []}, 'dendrometerHeight': {'slot_uri': 'neon:dendrometerHeight', 'description': 'Distance along stem at which dendrometer band is installed', 'range': 'double', 'aliases': ['dendrometer height'], 'mappings': []}, 'tempStemID': {'slot_uri': 'neon:tempStemID', 'description': 'Stem-level identifier for a multi-stemmed individual with growth form of shrub, small shrub, sapling or small tree', 'range': 'string', 'aliases': ['temp stem i d'], 'mappings': []}, 'measurementStrategy': {'slot_uri': 'neon:measurementStrategy', 'description': 'Identifier for the selected method of measuring an indivual', 'range': 'string', 'aliases': ['measurement strategy'], 'mappings': []}, 'changedMeasurementLocation': {'slot_uri': 'neon:changedMeasurementLocation', 'description': 'Indicator for whether the measurement location on the individual changed from previous measurements', 'range': 'string', 'aliases': ['changed measurement location'], 'mappings': []}, 'dendrometerInstallationDate': {'slot_uri': 'neon:dendrometerInstallationDate', 'description': 'The date the dendrometer band was installed on the individual', 'range': 'string', 'aliases': ['dendrometer installation date'], 'mappings': []}, 'initalGapMeasurementDate': {'slot_uri': 'neon:initalGapMeasurementDate', 'description': 'The date initial dendrometer band gap measurement was made', 'range': 'time', 'aliases': ['inital gap measurement date'], 'mappings': []}, 'dendrometerGap': {'slot_uri': 'neon:dendrometerGap', 'description': 'Width of dendrometer measurement window', 'range': 'double', 'aliases': ['dendrometer gap'], 'mappings': []}, 'dendrometerCondition': {'slot_uri': 'neon:dendrometerCondition', 'description': 'Condition of the dendrometer band', 'range': 'string', 'aliases': ['dendrometer condition'], 'mappings': []}, 'bandStemDiameter': {'slot_uri': 'neon:bandStemDiameter', 'description': 'Calculated current year diameter at band location', 'range': 'double', 'aliases': ['band stem diameter'], 'mappings': []}, 'stemLength': {'slot_uri': 'neon:stemLength', 'description': 'The length of the stem to the base of the leaves', 'range': 'double', 'aliases': ['stem length'], 'mappings': []}, 'recordType': {'slot_uri': 'neon:recordType', 'description': 'Categorical indicator for type of data record', 'range': 'string', 'aliases': ['record type'], 'mappings': []}, 'curveEndDate': {'slot_uri': 'neon:curveEndDate', 'description': 'End date for the curve', 'range': 'time', 'aliases': ['curve end date'], 'mappings': []}, 'curveStartDate': {'slot_uri': 'neon:curveStartDate', 'description': 'Start date for the curve', 'range': 'time', 'aliases': ['curve start date'], 'mappings': []}, 'parameterNumber': {'slot_uri': 'neon:parameterNumber', 'description': 'Numeric designation for the set of sampled parameters', 'range': 'integer', 'aliases': ['parameter number'], 'mappings': []}, 'tempShrubStemID': {'slot_uri': 'neon:tempShrubStemID', 'description': 'Stem-level identifier for a multi-stemmed shrub', 'range': 'string', 'aliases': ['temp shrub stem i d'], 'mappings': []}, 'depth10WaterTemp': {'slot_uri': 'neon:depth10WaterTemp', 'description': 'Measurement of water temperature along a fixed chain from 11th shallowest depth', 'range': 'double', 'aliases': ['depth10 water temp'], 'mappings': []}, 'waterYearToInclude': {'slot_uri': 'neon:waterYearToInclude', 'description': 'Concatenated list of water years for which this gauging record will be used to develop the rating curve. Science review populates this value', 'range': 'string', 'aliases': ['water year to include'], 'mappings': []}, 'waterYearToIncludeNotes': {'slot_uri': 'neon:waterYearToIncludeNotes', 'description': 'Notes following science review to populate waterYearToInclude', 'range': 'string', 'aliases': ['water year to include notes'], 'mappings': []}, 'fluorometerSensitivitySetting': {'slot_uri': 'neon:fluorometerSensitivitySetting', 'description': 'Sensitivity setting on the fluorometer', 'range': 'double', 'aliases': ['fluorometer sensitivity setting'], 'mappings': []}, 'postAcidificationFluorescence': {'slot_uri': 'neon:postAcidificationFluorescence', 'description': 'Fluorescence read after acidification', 'range': 'double', 'aliases': ['post acidification fluorescence'], 'mappings': []}, 'preAcidificationFluorescence': {'slot_uri': 'neon:preAcidificationFluorescence', 'description': 'Fluorescence read before acidification', 'range': 'double', 'aliases': ['pre acidification fluorescence'], 'mappings': []}, 'responseFactor': {'slot_uri': 'neon:responseFactor', 'description': 'Response factor for sensitivity setting', 'range': 'double', 'aliases': ['response factor'], 'mappings': []}, 'trapsNotSet': {'slot_uri': 'neon:trapsNotSet', 'description': 'Traps were not set due to the indicated circumstance', 'range': 'string', 'aliases': ['traps not set'], 'mappings': []}, 'tickNumber': {'slot_uri': 'neon:tickNumber', 'description': 'Binned range of values representing total number of ticks of any life stage or species present on the head and neck of the individual', 'range': 'string', 'aliases': ['tick number'], 'mappings': []}, 'mortalityCause': {'slot_uri': 'neon:mortalityCause', 'description': 'Suspected cause of mortality', 'range': 'string', 'aliases': ['mortality cause'], 'mappings': []}}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {'alg_fieldData_pub': {'class_uri': 'neon:alg_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'habitatType', 'sampleCollected', 'benthicArea', 'samplerType', 'parentSampleID', 'substratumSizeClass', 'dataQF', 'aquaticSiteType', 'algalSampleType', 'phytoDepth1', 'phytoDepth2', 'phytoDepth3', 'fieldSampleVolume', 'parentSampleCode', 'samplingImpractical', 'namedLocation'], 'in_subset': ['DP1.20163.001', 'DP1.20166.001']}, 'alg_domainLabChemistry_pub': {'class_uri': 'neon:alg_domainLabChemistry_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'measuredBy', 'recordedBy', 'sampleID', 'collectDate', 'startDate', 'boatMass', 'dryMassBoatMass', 'ashMassBoatMass', 'storageDays', 'adjAshFreeDryMass', 'parentSampleID', 'sampleCode', 'dataQF', 'fieldSampleVolume', 'alternateFieldSampleVolume', 'parentSampleCode', 'labSampleVolume', 'domainFilterVolume', 'filterNumber', 'preservativeType', 'preservativeVolume', 'sampleCondition', 'plantDryMass', 'plantSurfaceArea', 'namedLocation', 'analysisType', 'originalFieldSampleVolume', 'plantAdjAshFreeDryMass', 'plantAshMassBoatMass', 'plantBoatMass', 'plantDryMassBoatMass', 'filterBlankRep1', 'filterBlankRep2'], 'in_subset': []}, 'alg_algaeExternalLabDataPerSample_pub': {'class_uri': 'neon:alg_algaeExternalLabDataPerSample_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'collectDate', 'sampleType', 'sampleVolumeFiltered', 'startDate', 'laboratoryName', 'externalRemarks', 'analyte', 'method', 'testMethod', 'analysisDate', 'analyzedBy', 'sampleCode', 'filterSize', 'plantAlgaeLabUnits', 'sampleCondition', 'externalLabDataQF', 'batchID', 'namedLocation', 'analyteConcentration', 'percentFilterAnalyzed', 'replicate'], 'in_subset': []}, 'asi_externalLabPOMSummaryData_pub': {'class_uri': 'neon:asi_externalLabPOMSummaryData_pub', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'standardReferenceKnownValue', 'standardReferenceMeasuredMean'], 'in_subset': []}, 'aquchem_plantAlgaeExternalLabData_in': {'class_uri': 'neon:aquchem_plantAlgaeExternalLabData_in', 'slots': ['uid', 'sampleID', 'collectDate', 'sampleType', 'sampleVolumeFiltered', 'startDate', 'laboratoryName', 'internalLabID', 'externalRemarks', 'analyte', 'method', 'testMethod', 'locationID', 'analysisDate', 'analyzedBy', 'sampleFate', 'sampleCode', 'filterSize', 'plantAlgaeLabUnits', 'sampleCondition', 'externalLabDataQF', 'batchID', 'analyteConcentration', 'percentFilterAnalyzed', 'replicate'], 'in_subset': ['DP0.20065.001']}, 'aquchem_plantAlgaeExternalLabQA_in': {'class_uri': 'neon:aquchem_plantAlgaeExternalLabQA_in', 'slots': ['uid', 'sampleID', 'startDate', 'laboratoryName', 'internalLabID', 'externalRemarks', 'analyte', 'analysisDate', 'analyzedBy', 'sampleFate', 'sampleCode', 'plantAlgaeLabUnits', 'externalLabDataQF', 'batchID', 'analyteConcentration', 'qaType'], 'in_subset': []}, 'aquchem_externalLabSummaryData_in': {'class_uri': 'neon:aquchem_externalLabSummaryData_in', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'standardReferenceKnownValue', 'standardReferenceMeasuredMean'], 'in_subset': []}, 'asi_fieldData_in': {'class_uri': 'neon:asi_fieldData_in', 'slots': ['uid', 'remarks', 'collectDate', 'stationID', 'startDate', 'parentSampleID', 'processedDateH2OIsotopes', 'processedDateFilters', 'sampleVolumeFilteredPOMRep1', 'sampleVolumeFilteredPOMRep2', 'isotopeH2OSampleID', 'isotopePOMSampleID', 'isotopePOMRep2SampleID', 'isotopeH2OSampleFate', 'isotopeH2OSampleCode', 'isotopePOMSampleFate', 'isotopePOMRep2SampleFate', 'isotopePOMRep2SampleCode', 'isotopePOMSampleCode', 'parentSampleFate', 'parentSampleCode', 'sampleClass', 'fieldDataQF', 'fulcrumVersion', 'platformInfo', 'isotopeH2OSampleCond', 'isotopePOMSampleCond', 'isotopePOMRep2SampleCond'], 'in_subset': ['DP0.20206.001']}, 'gsi_fieldSuperParent_pub': {'class_uri': 'neon:gsi_fieldSuperParent_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'waterTemp', 'specificConductance', 'aCollectedBy', 'bCollectedBy', 'altLocation', 'altLongitude', 'altLatitude', 'maxDepth', 'upperSegmentDepth', 'lowerSegmentDepth', 'startDate', 'waterColorDescrip', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'wellWaterDepth', 'sampleDepth', 'sampleExtractionMethod', 'wellVolumePurged', 'samplerType', 'parentSampleID', 'lakeSampleDepth1', 'lakeSampleDepth2', 'sdgSamplingProtocolVersion', 'asiSamplingProtocolVersion', 'aquaticSiteType', 'parentSampleCode', 'fieldDataQF', 'samplingImpractical', 'namedLocation', 'waterClarityDescrip', 'altCoordinateUncertainty', 'altGeodeticDatum', 'amcSamplingProtocolVersion', 'swcSamplingProtocolVersion'], 'in_subset': ['DP1.20276.001']}, 'gsi_fieldData_pub': {'class_uri': 'neon:gsi_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'parentSampleID', 'processedDateH2OIsotopes', 'isotopeH2OSampleID', 'isotopeH2OSampleCode', 'parentSampleCode', 'fieldDataQF', 'namedLocation', 'isotopeH2OSampleCond'], 'in_subset': []}, 'gsi_externalLabH2OIsotopes_pub': {'class_uri': 'neon:gsi_externalLabH2OIsotopes_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'laboratoryName', 'receivedBy', 'externalRemarks', 'receivedDate', 'analysisDate', 'analyzedBy', 'd18OWater', 'd2HWater', 'isotopeH2OSampleID', 'isotopeH2OSampleCode', 'd18OsdWater', 'd2HsdWater', 'instrumentSN', 'isotopeH2OExternalLabQF', 'sampleCondition', 'externalLabDataQF', 'namedLocation'], 'in_subset': []}, 'asi_externalLabSummaryData_pub': {'class_uri': 'neon:asi_externalLabSummaryData_pub', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'standardReferenceKnownValue', 'standardReferenceMeasuredMean', 'namedLocation'], 'in_subset': []}, 'asih2o_externalLabH2OIsotopes_in': {'class_uri': 'neon:asih2o_externalLabH2OIsotopes_in', 'slots': ['uid', 'collectDate', 'startDate', 'laboratoryName', 'receivedBy', 'shipmentID', 'externalRemarks', 'receivedDate', 'locationID', 'analysisDate', 'analyzedBy', 'd18OWater', 'd2HWater', 'isotopeH2OSampleID', 'isotopeH2OSampleFate', 'isotopeH2OSampleCode', 'd18OsdWater', 'd2HsdWater', 'instrumentSN', 'isotopeH2OExternalLabQF', 'sampleCondition', 'externalLabDataQF', 'isotopeH2OExternalLabTest'], 'in_subset': ['DP0.20205.001']}, 'asih2o_externalLabQAQCDataH2O_in': {'class_uri': 'neon:asih2o_externalLabQAQCDataH2O_in', 'slots': ['uid', 'startDate', 'laboratoryName', 'analysisDate', 'd18OsdWater', 'd2HsdWater', 'instrumentSN', 'H2OIsotopeQAQCID', 'd18OMeasured', 'd2HMeasured', 'd18OKnown', 'd2HKnown', 'subsamplesProcessed', 'isotopeH2OexternalLabQAQCFlag', 'labSampleID', 'externalLabDataQF'], 'in_subset': []}, 'asih2o_externalLabSummaryData_in': {'class_uri': 'neon:asih2o_externalLabSummaryData_in', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'standardReferenceKnownValue', 'standardReferenceMeasuredMean'], 'in_subset': []}, 'apl_clipHarvest_pub': {'class_uri': 'neon:apl_clipHarvest_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'targetTaxaPresent', 'growthForm', 'altLongitude', 'altLatitude', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'sampleDepth', 'habitatType', 'fieldID', 'sampleCollected', 'locationID', 'benthicArea', 'samplerType', 'dataQF', 'aquaticSiteType', 'samplingImpractical', 'namedLocation', 'fieldIDCode', 'streamAddCoordinateUncertainty', 'altCoordinateUncertainty', 'altGeodeticDatum'], 'in_subset': ['DP1.20063.001']}, 'apl_domainLabChemistry_pub': {'class_uri': 'neon:apl_domainLabChemistry_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'sampleID', 'collectDate', 'processingDate', 'startDate', 'fieldID', 'sampleCode', 'chemSubsampleID', 'chemSubsampleBarcode', 'dataQF', 'namedLocation', 'fieldIDCode'], 'in_subset': []}, 'apl_plantExternalLabDataPerSample_pub': {'class_uri': 'neon:apl_plantExternalLabDataPerSample_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'collectDate', 'sampleType', 'sampleVolumeFiltered', 'startDate', 'laboratoryName', 'externalRemarks', 'analyte', 'method', 'analysisDate', 'analyzedBy', 'sampleCode', 'filterSize', 'plantAlgaeLabUnits', 'sampleCondition', 'externalLabDataQF', 'batchID', 'namedLocation', 'analyteConcentration', 'percentFilterAnalyzed', 'replicate'], 'in_subset': []}, 'bbc_percore_in': {'class_uri': 'neon:bbc_percore_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'subplotID', 'clipID', 'clipCellNumber', 'samplingProtocolVersion', 'sampleFate', 'sampleCode', 'dataQF', 'litterDepth', 'fulcrumVersion', 'platformInfo', 'bareGround', 'coreDiameter', 'coreID', 'monolithLength', 'monolithWidth', 'rootSampleArea', 'rootSampleDepth', 'rootSamplingMethod', 'rootSamplingPossible', 'wst10cmDist', 'wst1cmDist', 'toxicodendronPossible'], 'in_subset': ['DP0.10067.001']}, 'bbc_rootmass_in': {'class_uri': 'neon:bbc_rootmass_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'enteredBy', 'sampleID', 'setDate', 'collectDate', 'weighDate', 'qaDryMass', 'dryMass', 'subsampleID', 'dryingHours', 'rootStatus', 'sizeCategory', 'sampleFate', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'fulcrumVersion', 'platformInfo', 'subsampleCode', 'subsampleFate'], 'in_subset': []}, 'bbc_chemistryPooling_in': {'class_uri': 'neon:bbc_chemistryPooling_in', 'slots': ['uid', 'plotID', 'measuredBy', 'recordedBy', 'enteredBy', 'setDate', 'collectDate', 'dataQF', 'bgcArchiveCode', 'bgcArchiveFate', 'bgcArchiveID', 'cnSampleCode', 'cnSampleFate', 'cnSampleID', 'fulcrumVersion', 'platformInfo', 'subsampleIDList', 'pooledSampleMass', 'poolSampleCode', 'poolSampleFate', 'poolSampleID', 'subsampleCodeList', 'subsampleFateList', 'toxicodendronPossible'], 'in_subset': []}, 'bbc_dilution_in': {'class_uri': 'neon:bbc_dilution_in', 'slots': ['uid', 'domainID', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'enteredBy', 'sampleID', 'setDate', 'collectDate', 'dryMass', 'processedDate', 'sampleVolume', 'sampleFate', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'fulcrumVersion', 'platformInfo', 'dilutionSampleCode', 'dilutionSampleFate', 'dilutionSampleID', 'dilutionSubsampleCode', 'dilutionSubsampleFate', 'dilutionSubsampleID', 'dilutionSubsampleVolume', 'somDryMass'], 'in_subset': []}, 'bbc_percore_pub': {'class_uri': 'neon:bbc_percore_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'sampleID', 'setDate', 'collectDate', 'subplotID', 'clipID', 'samplingProtocolVersion', 'sampleCode', 'dataQF', 'litterDepth', 'namedLocation', 'bareGround', 'coreDiameter', 'coreID', 'monolithLength', 'monolithWidth', 'rootSampleArea', 'rootSampleDepth', 'rootSamplingMethod', 'rootSamplingPossible', 'wst10cmDist', 'wst1cmDist', 'toxicodendronPossible'], 'in_subset': ['DP1.10067.001']}, 'bbc_rootmass_pub': {'class_uri': 'neon:bbc_rootmass_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'qaDryMass', 'dryMass', 'subsampleID', 'dryingHours', 'rootStatus', 'sizeCategory', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'namedLocation', 'subsampleCode'], 'in_subset': []}, 'bbc_dilution_pub': {'class_uri': 'neon:bbc_dilution_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'dryMass', 'sampleVolume', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'namedLocation', 'dilutionSampleCode', 'dilutionSampleID', 'dilutionSubsampleCode', 'dilutionSubsampleID', 'dilutionSubsampleVolume', 'somDryMass'], 'in_subset': []}, 'bbc_chemistryPooling_pub': {'class_uri': 'neon:bbc_chemistryPooling_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'measuredBy', 'recordedBy', 'setDate', 'collectDate', 'dataQF', 'bgcArchiveCode', 'bgcArchiveID', 'cnSampleCode', 'cnSampleID', 'namedLocation', 'subsampleIDList', 'poolSampleCode', 'poolSampleID', 'subsampleCodeList', 'toxicodendronPossible'], 'in_subset': []}, 'dhp_perplot_in': {'class_uri': 'neon:dhp_perplot_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'boutNumber', 'sampleID', 'startDate', 'endDate', 'samplingProtocolVersion', 'sampleFate', 'sampleCode', 'dataQF', 'fulcrumVersion', 'platformInfo', 'overstoryHeight', 'understoryHeight', 'yearBoutBegan', 'snowPresent'], 'in_subset': ['DP0.10017.001']}, 'dhp_perimagefile_in': {'class_uri': 'neon:dhp_perimagefile_in', 'slots': ['uid', 'plotID', 'remarks', 'sampleID', 'subsampleID', 'startDate', 'endDate', 'locationID', 'pointID', 'sampleFate', 'sampleCode', 'dataQF', 'fulcrumVersion', 'platformInfo', 'subsampleCode', 'subsampleFate', 'cameraOrientation', 'cameraPosition', 'imageFileName', 'imageFileNumber', 'downloadFileName', 'fulcrumFilePath', 'imageFilePath', 'imageType'], 'in_subset': []}, 'dhp_perplot_pub': {'class_uri': 'neon:dhp_perplot_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'plotType', 'plotSize', 'utmZone', 'slopeAspect', 'slopeGradient', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'sampleBarcode', 'namedLocation', 'overstoryHeight', 'understoryHeight', 'snowPresent'], 'in_subset': ['DP1.10017.001']}, 'dhp_perimagefile_pub': {'class_uri': 'neon:dhp_perimagefile_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'subsampleID', 'startDate', 'endDate', 'pointID', 'dataQF', 'sampleBarcode', 'namedLocation', 'subsampleCode', 'cameraOrientation', 'cameraPosition', 'imageFileName', 'downloadFileName', 'imageFileUrl', 'imageType'], 'in_subset': []}, 'mgc_permegapit_pub': {'class_uri': 'neon:mgc_permegapit_pub', 'slots': ['uid', 'domainID', 'siteID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'setDate', 'collectDate', 'samplingProtocolVersion', 'pitID', 'pitDepth', 'recordedByA', 'recordedByB', 'recordedByC', 'recordedByD', 'recordedByE', 'soilProfileDescriberA', 'soilProfileDescriberB', 'soilProfileDescriberC', 'soilProfileDescriberD', 'soilProfileDescriberE', 'soilProfileDescriberF', 'soilProfileDescriberInst', 'nrcsDescriptionID', 'soilSeries', 'soilFamily', 'soilSubgroup', 'soilGreatGroup', 'soilSuborder', 'soilOrder', 'pitNamedLocation', 'dataQF'], 'in_subset': ['DP1.00097.001']}, 'mgc_perhorizon_pub': {'class_uri': 'neon:mgc_perhorizon_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'pitID', 'nrcsDescriptionID', 'horizonID', 'horizonName', 'horizonTopDepth', 'horizonBottomDepth', 'pitNamedLocation', 'dataQF'], 'in_subset': []}, 'mgc_perbiogeosample_pub': {'class_uri': 'neon:mgc_perbiogeosample_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'pitID', 'horizonID', 'horizonName', 'laboratoryName', 'labProjID', 'biogeoID', 'biogeoHorizonProportion', 'biogeoSampleType', 'biogeoTopDepth', 'biogeoBottomDepth', 'biogeoCenterDepth', 'airDryOvenDry', 'caNh4d', 'kNh4d', 'mgNh4d', 'naNh4d', 'cecdNh4', 'alSatCecd33', 'baseSumCecd10', 'bsesatCecd10', 'ececCecd33', 'alKcl', 'feKcl', 'mnKcl', 'alMjelm', 'caMjelm', 'feMjelm', 'kMjelm', 'mgMjelm', 'mnMjelm', 'naMjelm', 'pMjelm', 'siMjelm', 'srMjelm', 'tiMjelm', 'zrMjelm', 'phCacl2', 'phH2o', 'ec12pre', 'bSatx', 'brSatx', 'caSatx', 'clSatx', 'co3Satx', 'ecSatp', 'flSatx', 'hco3Sx', 'kSatx', 'mgSatx', 'naSatx', 'no2Satx', 'no3Satx', 'pSatx', 'phSp', 'resist', 'so4Satx', 'pitNamedLocation', 'dataQF', 'caco3Conc', 'carbonTot', 'estimatedOC', 'gypsumConc', 'nitrogenTot', 'sulfurTot', 'waterSatx'], 'in_subset': []}, 'mgc_perarchivesample_pub': {'class_uri': 'neon:mgc_perarchivesample_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'pitID', 'horizonID', 'horizonName', 'archiveID', 'archiveTopDepth', 'archiveBottomDepth', 'pitNamedLocation', 'archiveLaboratoryName', 'dataQF'], 'in_subset': []}, 'mgp_permegapit_pub': {'class_uri': 'neon:mgp_permegapit_pub', 'slots': ['uid', 'domainID', 'siteID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'setDate', 'collectDate', 'samplingProtocolVersion', 'pitID', 'pitDepth', 'recordedByA', 'recordedByB', 'recordedByC', 'recordedByD', 'recordedByE', 'soilProfileDescriberA', 'soilProfileDescriberB', 'soilProfileDescriberC', 'soilProfileDescriberD', 'soilProfileDescriberE', 'soilProfileDescriberF', 'soilProfileDescriberInst', 'nrcsDescriptionID', 'soilSeries', 'soilFamily', 'soilSubgroup', 'soilGreatGroup', 'soilSuborder', 'soilOrder', 'pitNamedLocation', 'dataQF'], 'in_subset': ['DP1.00096.001']}, 'mgp_perhorizon_pub': {'class_uri': 'neon:mgp_perhorizon_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'pitID', 'nrcsDescriptionID', 'horizonID', 'horizonName', 'horizonTopDepth', 'horizonBottomDepth', 'pitNamedLocation', 'dataQF'], 'in_subset': []}, 'mgp_perbulksample_pub': {'class_uri': 'neon:mgp_perbulksample_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'pitID', 'horizonID', 'horizonName', 'laboratoryName', 'labProjID', 'bulkDensID', 'bulkDensHorizonProportion', 'bulkDensSampleType', 'bulkDensCenterDepth', 'bulkDensTopDepth', 'bulkDensBottomDepth', 'bulkDensExclCoarseFrag', 'pitNamedLocation', 'dataQF'], 'in_subset': []}, 'mgp_perbiogeosample_pub': {'class_uri': 'neon:mgp_perbiogeosample_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'pitID', 'horizonID', 'horizonName', 'laboratoryName', 'labProjID', 'biogeoID', 'biogeoHorizonProportion', 'biogeoSampleType', 'biogeoTopDepth', 'biogeoBottomDepth', 'biogeoCenterDepth', 'coarseFrag2To5', 'coarseFrag5To20', 'pitNamedLocation', 'dataQF', 'carbonateClay', 'clayFineContent', 'clayTotal', 'sandCoarseContent', 'sandFineContent', 'sandMediumContent', 'sandTotal', 'sandVeryCoarseContent', 'sandVeryFineContent', 'siltCoarseContent', 'siltFineContent', 'siltTotal'], 'in_subset': []}, 'mgp_perarchivesample_pub': {'class_uri': 'neon:mgp_perarchivesample_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'pitID', 'horizonID', 'horizonName', 'archiveID', 'archiveTopDepth', 'archiveBottomDepth', 'pitNamedLocation', 'archiveLaboratoryName', 'dataQF'], 'in_subset': []}, 'mgp_permegapit_in': {'class_uri': 'neon:mgp_permegapit_in', 'slots': ['uid', 'setDate', 'collectDate', 'samplingProtocolVersion', 'pitID', 'pitDepth', 'recordedByA', 'recordedByB', 'recordedByC', 'recordedByD', 'recordedByE', 'rootsCollectedByA', 'rootsCollectedByB', 'rootsCollectedByC', 'rootsCollectedByD', 'safetyPersonnelA', 'safetyPersonnelB', 'safetyPersonnelC', 'fccConstructionSupervisorA', 'fccConstructionSupervisorB', 'fccConstructionSupervisorC', 'fccConstructionContractor', 'soilProfileDescriberA', 'soilProfileDescriberB', 'soilProfileDescriberC', 'soilProfileDescriberD', 'soilProfileDescriberE', 'soilProfileDescriberF', 'soilProfileDescriberInst', 'nrcsDescriptionID', 'soilSeries', 'soilFamily', 'soilSubgroup', 'soilGreatGroup', 'soilSuborder', 'soilOrder', 'pitNamedLocation', 'dataQF', 'pitCode', 'pitFate'], 'in_subset': ['DP0.00096.001']}, 'mgp_perhorizon_in': {'class_uri': 'neon:mgp_perhorizon_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'pitID', 'nrcsDescriptionID', 'horizonID', 'horizonTempName', 'horizonName', 'horizonTopDepth', 'horizonBottomDepth', 'pitNamedLocation', 'dataQF', 'pitCode', 'pitFate', 'horizonCode', 'horizonFate'], 'in_subset': []}, 'mgp_perbulksample_in': {'class_uri': 'neon:mgp_perbulksample_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'horizonID', 'horizonName', 'laboratoryName', 'labProjID', 'bulkDensID', 'bulkDensIDnrcs', 'bulkDensHorizonProportion', 'bulkDensSampleType', 'bulkDensCenterDepth', 'bulkDensDiameter', 'bulkDensLength', 'bulkDensVolume', 'bulkDensTopDepth', 'bulkDensBottomDepth', 'bulkDensOrientation', 'bulkDensWetWeight', 'bulkDensDryWeight', 'bulkDensCoarseFragWeight', 'bulkDensCoarseFragDens', 'bulkDensCoarseFragDensMeas', 'bulkDensExclCoarseFrag', 'bulkDensInclCoarseFrag', 'coarseFragWeight', 'coarseFragVolume', 'pitNamedLocation', 'dataQF', 'bulkDensCode', 'bulkDensNrcsFate', 'horizonCode', 'horizonFate'], 'in_subset': []}, 'mgp_perbiogeosample_in': {'class_uri': 'neon:mgp_perbiogeosample_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'horizonID', 'horizonName', 'laboratoryName', 'labProjID', 'biogeoID', 'biogeoIDnrcs', 'biogeoHorizonProportion', 'biogeoSampleType', 'biogeoTopDepth', 'biogeoBottomDepth', 'biogeoCenterDepth', 'biogeoTotWeight', 'biogeoTotWeight2To5', 'biogeoTotWeight5To20', 'biogeoTotWeight20To75', 'airDryOvenDry', 'gypsum', 'caco3', 'caNh4d', 'kNh4d', 'mgNh4d', 'naNh4d', 'cecdNh4', 'alSatCecd33', 'baseSumCecd10', 'bsesatCecd10', 'ececCecd33', 'alKcl', 'feKcl', 'mnKcl', 'alMjelm', 'caMjelm', 'feMjelm', 'kMjelm', 'mgMjelm', 'mnMjelm', 'naMjelm', 'pMjelm', 'siMjelm', 'srMjelm', 'tiMjelm', 'zrMjelm', 'phCacl2', 'phH2o', 'ec12pre', 'bSatx', 'brSatx', 'caSatx', 'clSatx', 'co3Satx', 'ecSatp', 'flSatx', 'hco3Sx', 'kSatx', 'mgSatx', 'naSatx', 'no2Satx', 'no3Satx', 'pSatx', 'phSp', 'resist', 'so4Satx', 'cTot', 'nTot', 'sTot', 'eoc', 'coarseFrag2To5', 'coarseFrag5To20', 'pitNamedLocation', 'dataQF', 'caco3Conc', 'carbonTot', 'estimatedOC', 'gypsumConc', 'nitrogenTot', 'sulfurTot', 'waterSatx', 'biogeoCode', 'biogeoNrcsFate', 'carbonateClay', 'clayFineContent', 'clayTotal', 'horizonCode', 'horizonFate', 'sandCoarseContent', 'sandFineContent', 'sandMediumContent', 'sandTotal', 'sandVeryCoarseContent', 'sandVeryFineContent', 'siltCoarseContent', 'siltFineContent', 'siltTotal'], 'in_subset': []}, 'mgp_perarchivesample_in': {'class_uri': 'neon:mgp_perarchivesample_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'horizonID', 'horizonName', 'laboratoryName', 'archiveID', 'archiveTopDepth', 'archiveBottomDepth', 'pitNamedLocation', 'dataQF', 'archiveFate', 'archiveIDCode', 'horizonCode', 'horizonFate'], 'in_subset': []}, 'mpr_perpitprofile_in': {'class_uri': 'neon:mpr_perpitprofile_in', 'slots': ['uid', 'startDate', 'endDate', 'samplingProtocolVersion', 'pitID', 'rootsCollectedByA', 'rootsCollectedByB', 'pitNamedLocation', 'pitProfileID', 'rootStatus', 'sizeCategory', 'maxProfileDepth', 'totalRootBiomass', 'depth100RootBiomass', 'dataQF', 'pitCode', 'pitFate', 'pitProfileClassCode', 'pitProfileClassFate', 'pitProfileClassID', 'pitProfileCode', 'pitProfileFate'], 'in_subset': ['DP0.10066.001']}, 'mpr_perdepthincrement_in': {'class_uri': 'neon:mpr_perdepthincrement_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'pitNamedLocation', 'pitProfileID', 'topDepth', 'bottomDepth', 'depthIncrementID', 'depthIncrementVolume', 'sampleMethod', 'dataQF', 'depthIncrementCode', 'depthIncrementFate', 'pitProfileCode', 'pitProfileFate'], 'in_subset': []}, 'mpr_perrootsample_in': {'class_uri': 'neon:mpr_perrootsample_in', 'slots': ['uid', 'sampleID', 'duplicateSampleIDQF', 'startDate', 'endDate', 'archiveID', 'pitNamedLocation', 'rootStatus', 'sizeCategory', 'depthIncrementID', 'rootDryMass', 'incrementRootBiomass', 'incrementRootDensity', 'sampleFate', 'sampleCode', 'dataQF', 'archiveFate', 'archiveIDCode', 'depthIncrementCode', 'depthIncrementFate'], 'in_subset': []}, 'mpr_perpitprofile_pub': {'class_uri': 'neon:mpr_perpitprofile_pub', 'slots': ['uid', 'domainID', 'siteID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'startDate', 'endDate', 'samplingProtocolVersion', 'pitID', 'rootsCollectedByA', 'rootsCollectedByB', 'pitNamedLocation', 'pitProfileID', 'rootStatus', 'sizeCategory', 'maxProfileDepth', 'totalRootBiomass', 'depth100RootBiomass', 'dataQF'], 'in_subset': ['DP1.10066.001']}, 'mpr_perdepthincrement_pub': {'class_uri': 'neon:mpr_perdepthincrement_pub', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'pitNamedLocation', 'pitProfileID', 'topDepth', 'bottomDepth', 'depthIncrementID', 'depthIncrementVolume', 'sampleMethod', 'dataQF'], 'in_subset': []}, 'mpr_perrootsample_pub': {'class_uri': 'neon:mpr_perrootsample_pub', 'slots': ['uid', 'sampleID', 'startDate', 'endDate', 'archiveID', 'pitNamedLocation', 'rootStatus', 'sizeCategory', 'depthIncrementID', 'rootDryMass', 'incrementRootBiomass', 'incrementRootDensity', 'sampleCode', 'dataQF', 'archiveIDCode'], 'in_subset': []}, 'sls_soilCoreCollection_in': {'class_uri': 'neon:sls_soilCoreCollection_in', 'slots': ['uid', 'plotID', 'remarks', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'samplingProtocolVersion', 'collectedBy', 'sampleTiming', 'sampleFate', 'sampleCode', 'dataQF', 'geneticSampleID', 'biomassCode', 'biomassFate', 'biomassID', 'boutType', 'coreCoordinateX', 'coreCoordinateY', 'geneticArchiveSample1Code', 'geneticArchiveSample1Fate', 'geneticArchiveSample1ID', 'geneticArchiveSample2Code', 'geneticArchiveSample2Fate', 'geneticArchiveSample2ID', 'geneticArchiveSample3Code', 'geneticArchiveSample3Fate', 'geneticArchiveSample3ID', 'geneticArchiveSample4Code', 'geneticArchiveSample4Fate', 'geneticArchiveSample4ID', 'geneticArchiveSample5Code', 'geneticArchiveSample5Fate', 'geneticArchiveSample5ID', 'geneticArchiveSampleCount', 'geneticSampleCode', 'geneticSampleCondition', 'geneticSampleFate', 'horizon', 'litterDepth', 'nTransBoutType', 'sampleBottomDepth', 'sampleTopDepth', 'soilCoreCount', 'soilSamplingDevice', 'soilTemp', 'incubationMethod', 'sampleExtent', 'standingWaterDepth', 'incubationCondition'], 'in_subset': ['DP0.10086.001']}, 'sls_soilpH_in': {'class_uri': 'neon:sls_soilpH_in', 'slots': ['uid', 'plotID', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'processedDate', 'samplingProtocolVersion', 'sampleFate', 'sampleCode', 'horizon', 'pHCaClVol', 'pHSampleCode', 'pHSampleFate', 'pHSampleID', 'pHSoilInCaClMass', 'pHSoilInWaterMass', 'pHWaterVol', 'soilInCaClpH', 'soilInWaterpH', 'caclpHRatio', 'pHDataQF', 'pHMeasuredBy', 'pHRemarks', 'waterpHRatio'], 'in_subset': []}, 'sls_soilMoisture_in': {'class_uri': 'neon:sls_soilMoisture_in', 'slots': ['uid', 'plotID', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'samplingProtocolVersion', 'boatMass', 'dryMassBoatMass', 'sampleFate', 'sampleCode', 'ovenStartDate', 'ovenEndDate', 'freshMassBoatMass', 'horizon', 'moistureSampleCode', 'moistureSampleFate', 'moistureSampleID', 'dryMassFraction', 'smDataQF', 'smMeasuredBy', 'smRemarks', 'soilMoisture'], 'in_subset': []}, 'sls_bgcSubsampling_in': {'class_uri': 'neon:sls_bgcSubsampling_in', 'slots': ['uid', 'plotID', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'samplingProtocolVersion', 'sampleFate', 'sampleCode', 'ovenStartDate', 'ovenEndDate', 'sampleCondition', 'bgcArchiveCode', 'bgcArchiveFate', 'bgcArchiveID', 'cnSampleCode', 'cnSampleFate', 'cnSampleID', 'horizon', 'processedBy', 'bgcDataQF', 'bgcRemarks'], 'in_subset': []}, 'sls_metagenomicsPooling_in': {'class_uri': 'neon:sls_metagenomicsPooling_in', 'slots': ['uid', 'plotID', 'remarks', 'recordedBy', 'setDate', 'collectDate', 'samplingProtocolVersion', 'sampleCondition', 'compositeSampleCode', 'compositeSampleFate', 'compositeSampleID', 'horizon', 'processedBy', 'toCompositeBarcodeList', 'toCompositeFateList', 'toCompositeSampleIDList', 'genomicsDataQF'], 'in_subset': []}, 'sls_soilCoreCollection_pub': {'class_uri': 'neon:sls_soilCoreCollection_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'setDate', 'collectDate', 'plotType', 'easting', 'northing', 'utmZone', 'samplingProtocolVersion', 'collectedBy', 'sampleTiming', 'sampleCode', 'dataQF', 'geneticSampleID', 'biomassCode', 'biomassID', 'coreCoordinateX', 'coreCoordinateY', 'geneticArchiveSample1Code', 'geneticArchiveSample1ID', 'geneticArchiveSample2Code', 'geneticArchiveSample2ID', 'geneticArchiveSample3Code', 'geneticArchiveSample3ID', 'geneticArchiveSample4Code', 'geneticArchiveSample4ID', 'geneticArchiveSample5Code', 'geneticArchiveSample5ID', 'geneticSampleCode', 'geneticSampleCondition', 'horizon', 'litterDepth', 'nTransBoutType', 'sampleBottomDepth', 'sampleTopDepth', 'soilCoreCount', 'soilSamplingDevice', 'soilTemp', 'incubationMethod', 'namedLocation', 'sampleExtent', 'standingWaterDepth', 'incubationCondition'], 'in_subset': ['DP1.10086.001']}, 'sls_soilpH_pub': {'class_uri': 'neon:sls_soilpH_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'sampleID', 'setDate', 'collectDate', 'processedDate', 'samplingProtocolVersion', 'sampleCode', 'horizon', 'pHCaClVol', 'pHSampleCode', 'pHSampleID', 'pHSoilInCaClMass', 'pHSoilInWaterMass', 'pHWaterVol', 'soilInCaClpH', 'soilInWaterpH', 'namedLocation', 'caclpHRatio', 'pHDataQF', 'pHMeasuredBy', 'pHRemarks', 'waterpHRatio'], 'in_subset': []}, 'sls_soilMoisture_pub': {'class_uri': 'neon:sls_soilMoisture_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'sampleID', 'setDate', 'collectDate', 'plotType', 'samplingProtocolVersion', 'boatMass', 'dryMassBoatMass', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'freshMassBoatMass', 'horizon', 'moistureSampleCode', 'moistureSampleID', 'namedLocation', 'dryMassFraction', 'smDataQF', 'smMeasuredBy', 'smRemarks', 'soilMoisture'], 'in_subset': []}, 'sls_bgcSubsampling_pub': {'class_uri': 'neon:sls_bgcSubsampling_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'sampleID', 'setDate', 'collectDate', 'samplingProtocolVersion', 'sampleCode', 'ovenStartDate', 'ovenEndDate', 'sampleCondition', 'bgcArchiveCode', 'bgcArchiveID', 'cnSampleCode', 'cnSampleID', 'horizon', 'processedBy', 'namedLocation', 'bgcDataQF', 'bgcRemarks'], 'in_subset': []}, 'sls_metagenomicsPooling_pub': {'class_uri': 'neon:sls_metagenomicsPooling_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'samplingProtocolVersion', 'sampleCondition', 'processedBy', 'namedLocation', 'genomicsDataQF', 'genomicsPooledCodeList', 'genomicsPooledIDList', 'genomicsSampleCode', 'genomicsSampleID'], 'in_subset': []}, 'swc_fieldData_in': {'class_uri': 'neon:swc_fieldData_in', 'slots': ['uid', 'remarks', 'sampleID', 'collectDate', 'stationID', 'processedDate', 'sampleVolumeFiltered', 'startDate', 'parentSampleID', 'processedDateFilters', 'sampleFate', 'sampleCode', 'parentSampleFate', 'parentSampleCode', 'sampleClass', 'sampleCondition', 'fieldDataQF', 'replicateNumber', 'fulcrumVersion', 'platformInfo', 'filtSampleCode', 'filtSampleCond', 'filtSampleFate', 'filtSampleID', 'pcnSampleCode', 'pcnSampleCond', 'pcnSampleFate', 'pcnSampleID', 'rawSampleCode', 'rawSampleCond', 'rawSampleFate', 'rawSampleID', 'dicSampleCode', 'dicSampleCond', 'dicSampleFate', 'dicSampleID', 'filtSampleBottleSize', 'gwwAlkSampleBubbleFree', 'gwwAlkSampleHeadspace', 'gwwFiltBubbleFree', 'gwwFiltSampleHeadspace', 'filtNutSampleBarcode', 'filtNutSampleClass', 'filtNutSampleCond', 'filtNutSampleFate', 'filtNutSampleID', 'gwwDICBubbleFree', 'rawNutSampleBarcode', 'rawNutSampleClass', 'rawNutSampleCond', 'rawNutSampleFate', 'rawNutSampleID'], 'in_subset': ['DP0.20093.001']}, 'swc_domainLabData_in': {'class_uri': 'neon:swc_domainLabData_in', 'slots': ['uid', 'remarks', 'measuredBy', 'collectDate', 'sampleType', 'stationID', 'titrationLocation', 'pH4CheckValue', 'pH7CheckValue', 'pHMeterCalibration', 'initialSamplepH', 'initialSampleTemp', 'normality', 'sampleVolume', 'methodType', 'titrationDate', 'startDate', 'alkMeqPerL', 'alkMgPerL', 'ancMeqPerL', 'ancMgPerL', 'domainSampleID', 'parentSampleID', 'dataQF', 'parentSampleFate', 'parentSampleCode', 'domainSampleCode', 'titrationDataString', 'domainSampleFate'], 'in_subset': []}, 'wc_externalLabData_in': {'class_uri': 'neon:wc_externalLabData_in', 'slots': ['uid', 'siteID', 'remarks', 'sampleID', 'collectDate', 'stationID', 'startDate', 'laboratoryName', 'pH', 'externalConductance', 'waterCarbonate', 'waterBicarbonate', 'externalANC', 'waterCalcium', 'waterMagnesium', 'waterSodium', 'waterPotassium', 'waterSulfate', 'waterChlorine', 'waterManganese', 'waterIron', 'waterBromine', 'waterFluorine', 'waterSilica', 'totalSuspendedSolids', 'totalSuspendedSolidsDryMass', 'totalDissolvedSolids', 'waterNitrateAndNitriteN', 'waterNitriteN', 'waterAmmoniumN', 'waterOrthophosphateP', 'waterTotalNitrogen', 'totalDissolvedNitrogen', 'dissolvedInorganicCarbon', 'dissolvedOrganicCarbon', 'waterTotalOrganicCarbon', 'waterTotalPhosphorus', 'totalDissolvedPhosphorus', 'totalParticulateCarbonMass', 'totalParticulateNitrogenMass', 'uvAbsorbance250', 'uvAbsorbance284', 'nitriteRunID', 'nh4RunID', 'OrthoPRunID', 'tnRunID', 'tdnRunID', 'dicRunID', 'docRunID', 'tocRunID', 'tpcnRunDate', 'uvBatchID', 'coolerTemp', 'externalLabMetadata', 'internalLabID', 'shipmentReceivedDate', 'receivedBy', 'shipDate', 'shipmentID', 'shipmentCondition', 'shipmentWarmQF', 'shipmentLateQF', 'uploadDate', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'shipmentLateTest', 'nitrateNitriteRunID'], 'in_subset': ['DP0.20286.001']}, 'wc_externalLabSummaryData_in': {'class_uri': 'neon:wc_externalLabSummaryData_in', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'methodModification', 'methodDetectionLimit', 'analyteUnits', 'precision', 'measurementUncertainty', 'internalLabName', 'labSpecificStartDate', 'labSpecificEndDate', 'absorbancePrecision', 'measurementUncertaintyUnits', 'precisionRepeatabilityUnits'], 'in_subset': ['DP0.20287.001']}, 'wdp_collection_pub': {'class_uri': 'neon:wdp_collection_pub', 'slots': ['uid', 'remarks', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'setDate', 'collectDate', 'aCollectedBy', 'bCollectedBy', 'samplingProtocolVersion', 'equipmentProblems', 'equipmentProblemsCategory', 'equipmentProblemsRemarks', 'sampleCode', 'chemSubsampleID', 'chemSubsampleBarcode', 'dataQF', 'namedLocation'], 'in_subset': ['DP1.00013.001']}, 'wdp_collectionChem_pub': {'class_uri': 'neon:wdp_collectionChem_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'chemSubsampleMass', 'sampleCode', 'chemSubsampleID', 'chemSubsampleBarcode', 'dataQF', 'chemSubsampleCondition', 'chemSubsampleConditionRemarks', 'namedLocation'], 'in_subset': []}, 'wdp_chemLab_pub': {'class_uri': 'neon:wdp_chemLab_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'laboratoryName', 'pH', 'shipmentCondition', 'externalRemarks', 'receivedDate', 'analysisDate', 'sampleCode', 'chemSubsampleID', 'chemSubsampleBarcode', 'dataQF', 'sampleCondition', 'labCondition', 'labConditionRemarks', 'pHUncertainty', 'precipAmmonium', 'precipAmmoniumFlag', 'precipAmmoniumUncertainty', 'precipBromide', 'precipBromideFlag', 'precipBromideUncertainty', 'precipCalcium', 'precipCalciumFlag', 'precipCalciumUncertainty', 'precipChloride', 'precipChlorideFlag', 'precipChlorideUncertainty', 'precipConductivity', 'precipConductivityUncertainty', 'precipMagnesium', 'precipMagnesiumFlag', 'precipMagnesiumUncertainty', 'precipNitrate', 'precipNitrateFlag', 'precipNitrateUncertainty', 'precipPhosphate', 'precipPhosphateFlag', 'precipPhosphateUncertainty', 'precipPotassium', 'precipPotassiumFlag', 'precipPotassiumUncertainty', 'precipSodium', 'precipSodiumFlag', 'precipSodiumUncertainty', 'precipSulfate', 'precipSulfateFlag', 'precipSulfateUncertainty', 'namedLocation', 'sampleMass'], 'in_subset': []}, 'wdp_chemLab_in': {'class_uri': 'neon:wdp_chemLab_in', 'slots': ['uid', 'setDate', 'collectDate', 'laboratoryName', 'pH', 'shipmentCondition', 'externalRemarks', 'receivedDate', 'locationID', 'analysisDate', 'chemSubsampleID', 'chemSubsampleFate', 'chemSubsampleBarcode', 'dataQF', 'sampleCondition', 'labCondition', 'labConditionRemarks', 'pHUncertainty', 'precipAmmonium', 'precipAmmoniumFlag', 'precipAmmoniumUncertainty', 'precipBromide', 'precipBromideFlag', 'precipBromideUncertainty', 'precipCalcium', 'precipCalciumFlag', 'precipCalciumUncertainty', 'precipChloride', 'precipChlorideFlag', 'precipChlorideUncertainty', 'precipConductivity', 'precipConductivityUncertainty', 'precipMagnesium', 'precipMagnesiumFlag', 'precipMagnesiumUncertainty', 'precipNitrate', 'precipNitrateFlag', 'precipNitrateUncertainty', 'precipPhosphate', 'precipPhosphateFlag', 'precipPhosphateUncertainty', 'precipPotassium', 'precipPotassiumFlag', 'precipPotassiumUncertainty', 'precipSodium', 'precipSodiumFlag', 'precipSodiumUncertainty', 'precipSulfate', 'precipSulfateFlag', 'precipSulfateUncertainty', 'sampleMass', 'pHFlag', 'precipConductivityFlag'], 'in_subset': ['DP0.00019.001']}, 'wdp_collection_in': {'class_uri': 'neon:wdp_collection_in', 'slots': ['uid', 'remarks', 'sampleID', 'setDate', 'collectDate', 'aCollectedBy', 'bCollectedBy', 'samplingProtocolVersion', 'locationID', 'equipmentProblems', 'equipmentProblemsCategory', 'equipmentProblemsRemarks', 'aSetBy', 'bSetBy', 'sampleFate', 'sampleCode', 'chemSubsampleID', 'chemSubsampleFate', 'chemSubsampleBarcode', 'isoSubsampleID', 'isoSubsampleFate', 'isoSubsampleBarcode', 'dataQF', 'isoTestSubsampleID', 'isoTestSubsampleFate', 'isoTestSubsampleBarcode', 'fulcrumVersion', 'platformInfo', 'shippingCaseCode'], 'in_subset': ['DP0.00018.001']}, 'wdp_collectionChem_in': {'class_uri': 'neon:wdp_collectionChem_in', 'slots': ['uid', 'setDate', 'collectDate', 'locationID', 'chemSubsampleBottleNumber', 'chemSubsampleBottleStartMass', 'chemSubsampleBottleEndMass', 'chemSubsampleMass', 'chemSubsampleID', 'chemSubsampleFate', 'chemSubsampleBarcode', 'dataQF', 'chemSubsampleCondition', 'chemSubsampleConditionRemarks', 'chemFunnelCode', 'chemTubeCode', 'extChemBottleCode'], 'in_subset': []}, 'wdp_collectionIso_in': {'class_uri': 'neon:wdp_collectionIso_in', 'slots': ['uid', 'setDate', 'collectDate', 'locationID', 'isoSubsampleBottleNumber', 'isoSubsampleBottleStartMass', 'isoSubsampleBottleEndMass', 'isoSubsampleMass', 'isoSubsampleID', 'isoSubsampleFate', 'isoSubsampleBarcode', 'dataQF', 'isoSubsampleCondition', 'isoSubsampleConditionRemarks', 'extIsoBottleCode', 'isoFunnelCode', 'isoTubeCode'], 'in_subset': []}, 'wdp_collectionIsoTest_in': {'class_uri': 'neon:wdp_collectionIsoTest_in', 'slots': ['uid', 'setDate', 'collectDate', 'locationID', 'dataQF', 'isoTestSubsampleID', 'isoTestSubsampleFate', 'isoTestSubsampleBarcode', 'isoTestSubsampleVolume'], 'in_subset': []}, 'wdi_collection_pub': {'class_uri': 'neon:wdi_collection_pub', 'slots': ['uid', 'remarks', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'setDate', 'collectDate', 'aCollectedBy', 'bCollectedBy', 'samplingProtocolVersion', 'equipmentProblems', 'equipmentProblemsCategory', 'equipmentProblemsRemarks', 'sampleCode', 'isoSubsampleID', 'isoSubsampleBarcode', 'dataQF', 'isoTestSubsampleID', 'isoTestSubsampleBarcode', 'namedLocation'], 'in_subset': ['DP1.00038.001']}, 'wdi_collectionIso_pub': {'class_uri': 'neon:wdi_collectionIso_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'isoSubsampleMass', 'sampleCode', 'isoSubsampleID', 'isoSubsampleBarcode', 'dataQF', 'isoSubsampleCondition', 'isoSubsampleConditionRemarks', 'namedLocation'], 'in_subset': []}, 'wdi_collectionIsoTest_pub': {'class_uri': 'neon:wdi_collectionIsoTest_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'sampleCode', 'dataQF', 'isoTestSubsampleID', 'isoTestSubsampleBarcode', 'isoTestSubsampleVolume', 'namedLocation'], 'in_subset': []}, 'wdi_isoPerSample_pub': {'class_uri': 'neon:wdi_isoPerSample_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'laboratoryName', 'externalRemarks', 'analysisDate', 'd18OWater', 'd2HWater', 'sampleCode', 'dataQF', 'isoTestSubsampleID', 'isoTestSubsampleBarcode', 'd18OsdWater', 'd2HsdWater', 'sampleCondition', 'namedLocation'], 'in_subset': []}, 'apl_clipHarvest_in': {'class_uri': 'neon:apl_clipHarvest_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'collectDate', 'targetTaxaPresent', 'growthForm', 'stationID', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'sampleDepth', 'habitatType', 'fieldID', 'sampleCollected', 'locationID', 'benthicArea', 'samplerType', 'dataQF', 'aquaticSiteType', 'samplingImpractical', 'fieldIDCode', 'fieldIDFate', 'streamAddCoordinateUncertainty', 'fulcrumVersion', 'platformInfo'], 'in_subset': ['DP0.20066.001']}, 'apl_domainLab_in': {'class_uri': 'neon:apl_domainLab_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'recordedBy', 'sampleID', 'collectDate', 'processingDate', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'dryMass', 'stationID', 'startDate', 'wetMass', 'wetMassSubsample', 'boatID', 'boatMass', 'dryMassBoatMass', 'ashMassBoatMass', 'fieldID', 'aquaticPlantType', 'benthicArea', 'adjDryMass', 'adjAshFreeDryMass', 'arealAdjDryMass', 'arealAdjAshFreeDryMass', 'sampleFate', 'sampleCode', 'chemSubsampleID', 'chemSubsampleFate', 'chemSubsampleBarcode', 'dataQF', 'sampleClass', 'fieldIDCode', 'fieldIDFate', 'fulcrumVersion', 'platformInfo', 'boatWetMassSum'], 'in_subset': []}, 'apc_pointTransect_in': {'class_uri': 'neon:apc_pointTransect_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'collectDate', 'targetTaxaPresent', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'habitatType', 'dataQF', 'aquaticSiteType', 'transectID', 'samplingImpractical', 'fulcrumVersion', 'platformInfo', 'pointNumber', 'substrate', 'transectDistance'], 'in_subset': ['DP0.20072.001']}, 'apc_perTaxon_in': {'class_uri': 'neon:apc_perTaxon_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'eventID', 'sampleID', 'collectDate', 'morphospeciesID', 'growthForm', 'morphospeciesIDRemarks', 'startDate', 'sampleCollected', 'aquaticPlantType', 'sampleFate', 'sampleCode', 'dataQF', 'sampleClass', 'transectID', 'fulcrumVersion', 'platformInfo', 'pointNumber'], 'in_subset': []}, 'apc_voucher_in': {'class_uri': 'neon:apc_voucher_in', 'slots': ['uid', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'recordedBy', 'sampleID', 'collectDate', 'morphospeciesID', 'morphospeciesIDRemarks', 'startDate', 'collectedBy', 'sampleFate', 'sampleCode', 'dataQF', 'aquaticSiteType', 'fulcrumVersion', 'platformInfo'], 'in_subset': []}, 'apc_morphospecies_in': {'class_uri': 'neon:apc_morphospecies_in', 'slots': ['uid', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'recordedBy', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'dataQF', 'aquaticSiteType', 'fulcrumVersion', 'platformInfo', 'morphospeciesCreatedDate', 'morphospeciesResolved', 'morphospeciesResolvedDate'], 'in_subset': []}, 'apc_pointTransect_pub': {'class_uri': 'neon:apc_pointTransect_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'targetTaxaPresent', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'habitatType', 'dataQF', 'samplingImpractical', 'namedLocation', 'pointNumber', 'substrate', 'transectDistance'], 'in_subset': ['DP1.20072.001']}, 'apc_perTaxon_pub': {'class_uri': 'neon:apc_perTaxon_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'eventID', 'scientificName', 'sampleID', 'collectDate', 'morphospeciesID', 'scientificNameAuthorship', 'growthForm', 'morphospeciesIDRemarks', 'startDate', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'sampleCode', 'dataQF', 'namedLocation', 'pointNumber'], 'in_subset': []}, 'apc_taxonomyRaw_pub': {'class_uri': 'neon:apc_taxonomyRaw_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'startDate', 'laboratoryName', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'algalParameter', 'algalParameterValue', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'tribe', 'variety', 'taxonDatabaseName', 'taxonDatabaseID', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'form', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation'], 'in_subset': []}, 'apc_taxonomyProcessed_pub': {'class_uri': 'neon:apc_taxonomyProcessed_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'acceptedTaxonID', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'startDate', 'laboratoryName', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'algalParameter', 'algalParameterValue', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation'], 'in_subset': []}, 'apc_voucher_pub': {'class_uri': 'neon:apc_voucher_pub', 'slots': ['uid', 'siteID', 'taxonID', 'recordedBy', 'sampleID', 'collectDate', 'morphospeciesID', 'startDate', 'collectedBy', 'sampleCode', 'dataQF', 'namedLocation'], 'in_subset': []}, 'apc_morphospecies_pub': {'class_uri': 'neon:apc_morphospecies_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'recordedBy', 'scientificName', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'dataQF', 'namedLocation', 'morphospeciesCreatedDate', 'morphospeciesResolvedDate'], 'in_subset': []}, 'apc_voucherTaxonomyRaw_pub': {'class_uri': 'neon:apc_voucherTaxonomyRaw_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'startDate', 'laboratoryName', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'algalParameter', 'algalParameterValue', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'tribe', 'variety', 'taxonDatabaseName', 'taxonDatabaseID', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'form', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation'], 'in_subset': []}, 'apc_voucherTaxonomyProcessed_pub': {'class_uri': 'neon:apc_voucherTaxonomyProcessed_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'acceptedTaxonID', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'startDate', 'laboratoryName', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'algalParameter', 'algalParameterValue', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation'], 'in_subset': []}, 'bet_fielddata_in': {'class_uri': 'neon:bet_fielddata_in', 'slots': ['uid', 'plotID', 'remarks', 'recordedBy', 'eventID', 'trapID', 'enteredBy', 'sampleID', 'setDate', 'collectDate', 'cupStatus', 'lidStatus', 'fluidLevel', 'daysOfTrapping', 'samplingProtocolVersion', 'sampleCollected', 'sampleFate', 'sampleCode', 'dataQF', 'fulcrumVersion', 'platformInfo', 'trappingDays'], 'in_subset': ['DP0.10003.001']}, 'bet_sorting_in': {'class_uri': 'neon:bet_sorting_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'recordedBy', 'trapID', 'enteredBy', 'sampleID', 'setDate', 'collectDate', 'processingDate', 'etOHChangeDate', 'targetTaxaPresent', 'sampleType', 'individualCount', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'subsampleID', 'sampleFate', 'sampleCode', 'dataQF', 'sampleClass', 'fulcrumVersion', 'platformInfo', 'subsampleCode', 'subsampleFate'], 'in_subset': []}, 'bet_IDandpinning_in': {'class_uri': 'neon:bet_IDandpinning_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'totalLength', 'recordedBy', 'individualID', 'trapID', 'enteredBy', 'setDate', 'collectDate', 'processingDate', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'subsampleID', 'dataQF', 'referencePhotoID', 'fulcrumVersion', 'platformInfo', 'subsampleCode', 'subsampleFate', 'dnaBarcoded', 'individualCode', 'individualFate', 'photographedBy', 'photoView'], 'in_subset': []}, 'bet_archivepooling_in': {'class_uri': 'neon:bet_archivepooling_in', 'slots': ['uid', 'plotID', 'remarks', 'taxonID', 'recordedBy', 'setDate', 'collectDate', 'processingDate', 'sampleType', 'dataQF', 'sampleClass', 'archiveSampleFate', 'fulcrumVersion', 'platformInfo', 'subsampleCode', 'subsampleFate', 'archiveSampleCode', 'archiveVialID', 'subsampleIDList'], 'in_subset': []}, 'bet_expertTaxonomistID_in': {'class_uri': 'neon:bet_expertTaxonomistID_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'identificationQualifier', 'sex', 'individualID', 'scientificName', 'setDate', 'collectDate', 'targetTaxaPresent', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'laboratoryName', 'identificationRemarks', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'dataQF', 'sampleCondition', 'batchID', 'individualCode', 'individualFate'], 'in_subset': []}, 'bet_fielddata_pub': {'class_uri': 'neon:bet_fielddata_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'recordedBy', 'eventID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'trapID', 'sampleID', 'setDate', 'collectDate', 'cupStatus', 'lidStatus', 'fluidLevel', 'daysOfTrapping', 'plotType', 'samplingProtocolVersion', 'sampleCollected', 'sampleCode', 'dataQF', 'namedLocation', 'trappingDays'], 'in_subset': ['DP1.10022.001']}, 'bet_sorting_pub': {'class_uri': 'neon:bet_sorting_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'recordedBy', 'scientificName', 'taxonRank', 'trapID', 'sampleID', 'setDate', 'collectDate', 'processingDate', 'etOHChangeDate', 'sampleType', 'individualCount', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'subsampleID', 'sampleCode', 'dataQF', 'namedLocation', 'subsampleCode', 'nativeStatusCode'], 'in_subset': []}, 'bet_parataxonomistID_pub': {'class_uri': 'neon:bet_parataxonomistID_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'totalLength', 'recordedBy', 'individualID', 'scientificName', 'taxonRank', 'trapID', 'setDate', 'collectDate', 'processingDate', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'subsampleID', 'dataQF', 'namedLocation', 'subsampleCode', 'individualCode', 'nativeStatusCode'], 'in_subset': []}, 'bet_archivepooling_pub': {'class_uri': 'neon:bet_archivepooling_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'recordedBy', 'scientificName', 'setDate', 'collectDate', 'processingDate', 'dataQF', 'namedLocation', 'subsampleCode', 'archiveSampleCode', 'archiveVialID', 'subsampleIDList'], 'in_subset': []}, 'bet_expertTaxonomistIDProcessed_pub': {'class_uri': 'neon:bet_expertTaxonomistIDProcessed_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'sex', 'individualID', 'scientificName', 'taxonRank', 'setDate', 'collectDate', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'laboratoryName', 'identificationRemarks', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'dataQF', 'sampleCondition', 'namedLocation', 'individualCode', 'nativeStatusCode'], 'in_subset': []}, 'bet_expertTaxonomistIDRaw_pub': {'class_uri': 'neon:bet_expertTaxonomistIDRaw_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'sex', 'individualID', 'scientificName', 'setDate', 'collectDate', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'laboratoryName', 'identificationRemarks', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'dataQF', 'sampleCondition', 'namedLocation', 'individualCode'], 'in_subset': []}, 'brd_personnel_in': {'class_uri': 'neon:brd_personnel_in', 'slots': ['uid', 'siteID', 'remarks', 'startDate', 'endDate', 'laboratoryName', 'observerInstitutionName', 'technicianID', 'fullName', 'evaluationMethod', 'evaluationScore', 'dataQF'], 'in_subset': ['DP0.10006.001']}, 'brd_references_in': {'class_uri': 'neon:brd_references_in', 'slots': ['uid', 'siteID', 'identificationReferences', 'remarks', 'startDate', 'endDate', 'dataQF'], 'in_subset': []}, 'brd_perpoint_in': {'class_uri': 'neon:brd_perpoint_in', 'slots': ['uid', 'siteID', 'plotID', 'remarks', 'measuredBy', 'eventID', 'startDate', 'endDate', 'samplingProtocolVersion', 'laboratoryName', 'internalLabID', 'locationID', 'startCloudCoverPercentage', 'endCloudCoverPercentage', 'startRH', 'endRH', 'observedHabitat', 'observedAirTemp', 'kmPerHourObservedWindSpeed', 'pointID', 'dataQF'], 'in_subset': []}, 'brd_countdata_in': {'class_uri': 'neon:brd_countdata_in', 'slots': ['uid', 'siteID', 'plotID', 'taxonID', 'eventID', 'targetTaxaPresent', 'identifiedBy', 'startDate', 'endDate', 'internalLabID', 'locationID', 'pointCountMinute', 'observerDistance', 'detectionMethod', 'sexOrAge', 'visualConfirmation', 'clusterCode', 'clusterSize', 'pointID', 'dataQF', 'taxonRaw'], 'in_subset': []}, 'brd_personnel_pub': {'class_uri': 'neon:brd_personnel_pub', 'slots': ['uid', 'siteID', 'date', 'endDate', 'laboratoryName', 'observerInstitutionName', 'technicianID', 'evaluationMethod', 'evaluationScore', 'dataQF'], 'in_subset': ['DP1.10003.001']}, 'brd_references_pub': {'class_uri': 'neon:brd_references_pub', 'slots': ['uid', 'siteID', 'date', 'identificationReferences', 'remarks', 'endDate', 'dataQF'], 'in_subset': []}, 'brd_perpoint_pub': {'class_uri': 'neon:brd_perpoint_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'eventID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'plotType', 'startDate', 'endDate', 'samplingProtocolVersion', 'laboratoryName', 'startCloudCoverPercentage', 'endCloudCoverPercentage', 'startRH', 'endRH', 'observedHabitat', 'observedAirTemp', 'kmPerHourObservedWindSpeed', 'pointID', 'dataQF', 'namedLocation'], 'in_subset': []}, 'brd_countdata_pub': {'class_uri': 'neon:brd_countdata_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'taxonID', 'eventID', 'scientificName', 'taxonRank', 'targetTaxaPresent', 'identifiedBy', 'plotType', 'startDate', 'endDate', 'family', 'pointCountMinute', 'observerDistance', 'detectionMethod', 'sexOrAge', 'visualConfirmation', 'clusterCode', 'clusterSize', 'pointID', 'vernacularName', 'dataQF', 'namedLocation', 'nativeStatusCode'], 'in_subset': []}, 'cdw_fieldtally_in': {'class_uri': 'neon:cdw_fieldtally_in', 'slots': ['uid', 'plotID', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'eventID', 'individualID', 'targetTaxaPresent', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'individualFate', 'individualBarcode', 'vstTagID', 'aForkMaxDiameter', 'aForkMinorDiameter', 'bForkMaxDiameter', 'bForkMinorDiameter', 'cForkMaxDiameter', 'cForkMinorDiameter', 'dForkMaxDiameter', 'dForkMinorDiameter', 'eForkMaxDiameter', 'eForkMinorDiameter', 'fForkMaxDiameter', 'fForkMinorDiameter', 'gForkMaxDiameter', 'gForkMinorDiameter', 'hForkMaxDiameter', 'hForkMinorDiameter', 'iForkMaxDiameter', 'iForkMinorDiameter', 'jForkMaxDiameter', 'jForkMinorDiameter', 'branchBarkCover', 'branchesPresent', 'decayClass', 'equivalentLogDiameter', 'leavesPresent', 'lidsAzimuth', 'logBarkCover', 'logDistance', 'logHandBreakable', 'logHoldShape', 'logID', 'logLength', 'logMaxDiameter', 'logMinorDiameter', 'tagStatus', 'twigsPresent', 'volumeFactor', 'yearBoutBegan'], 'in_subset': ['DP0.10010.001']}, 'cdw_fieldtally_pub': {'class_uri': 'neon:cdw_fieldtally_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'eventID', 'individualID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'targetTaxaPresent', 'plotType', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation', 'individualBarcode', 'vstTagID', 'aForkMaxDiameter', 'aForkMinorDiameter', 'bForkMaxDiameter', 'bForkMinorDiameter', 'cForkMaxDiameter', 'cForkMinorDiameter', 'dForkMaxDiameter', 'dForkMinorDiameter', 'eForkMaxDiameter', 'eForkMinorDiameter', 'fForkMaxDiameter', 'fForkMinorDiameter', 'gForkMaxDiameter', 'gForkMinorDiameter', 'hForkMaxDiameter', 'hForkMinorDiameter', 'iForkMaxDiameter', 'iForkMinorDiameter', 'jForkMaxDiameter', 'jForkMinorDiameter', 'branchBarkCover', 'branchesPresent', 'decayClass', 'equivalentLogDiameter', 'leavesPresent', 'lidsAzimuth', 'logBarkCover', 'logDistance', 'logHandBreakable', 'logHoldShape', 'logID', 'logLength', 'logMaxDiameter', 'logMinorDiameter', 'twigsPresent', 'volumeFactor', 'yearBoutBegan'], 'in_subset': ['DP1.10010.001']}, 'hbp_perbout_in': {'class_uri': 'neon:hbp_perbout_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'enteredBy', 'boutNumber', 'sampleID', 'setDate', 'collectDate', 'targetTaxaPresent', 'subplotID', 'clipID', 'exclosure', 'bagCount', 'clipCellNumber', 'samplingProtocolVersion', 'sampleFate', 'sampleCode', 'dataQF', 'hbpType', 'subsamplesCreated', 'clipArea', 'clipLength', 'clipWidth'], 'in_subset': ['DP0.10005.001']}, 'hbp_massdata_in': {'class_uri': 'neon:hbp_massdata_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'enteredBy', 'sampleID', 'setDate', 'collectDate', 'herbGroup', 'weighDate', 'qaDryMass', 'dryMass', 'subsampleID', 'dryingHours', 'sampleFate', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'subsampleFreshMassRatio', 'freshMass', 'subsampleCode', 'subsampleDryMass', 'subsampleFate', 'subsampleFreshMass'], 'in_subset': []}, 'hbp_perbout_pub': {'class_uri': 'neon:hbp_perbout_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'boutNumber', 'sampleID', 'setDate', 'collectDate', 'targetTaxaPresent', 'subplotID', 'clipID', 'exclosure', 'plotType', 'plotSize', 'utmZone', 'slopeAspect', 'slopeGradient', 'samplingProtocolVersion', 'sampleCode', 'dataQF', 'namedLocation', 'clipArea', 'clipLength', 'clipWidth', 'plotManagement'], 'in_subset': ['DP1.10023.001']}, 'hbp_massdata_pub': {'class_uri': 'neon:hbp_massdata_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'herbGroup', 'weighDate', 'qaDryMass', 'dryMass', 'subsampleID', 'plotType', 'dryingHours', 'sampleCode', 'dataQF', 'namedLocation', 'freshMass', 'subsampleCode', 'subsampleDryMass', 'subsampleFreshMass'], 'in_subset': []}, 'mos_trapping_in': {'class_uri': 'neon:mos_trapping_in', 'slots': ['uid', 'plotID', 'remarks', 'recordedBy', 'eventID', 'enteredBy', 'sampleID', 'setDate', 'collectDate', 'targetTaxaPresent', 'samplingProtocolVersion', 'sampleTiming', 'numVialsSampleID', 'fanStatus', 'catchCupStatus', 'dryIceStatus', 'pdaDecimalLatitude', 'pdaDecimalLongitude', 'pdaAccuracy', 'pdaElevation', 'nightOrDay', 'trapHours', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'samplingImpractical', 'fulcrumVersion', 'platformInfo'], 'in_subset': ['DP0.10043.001']}, 'mos_sorting_in': {'class_uri': 'neon:mos_sorting_in', 'slots': ['uid', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'subsampleID', 'laboratoryName', 'sampleCompromised', 'receivedDate', 'sortDate', 'totalWeight', 'subsampleWeight', 'bycatchWeight', 'sortedBy', 'sampleFate', 'sampleCode', 'dataQF', 'subsampleCode', 'subsampleFate', 'genusPTD', 'speciesPTD', 'PDE'], 'in_subset': []}, 'mos_identification_in': {'class_uri': 'neon:mos_identification_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'identificationQualifier', 'sex', 'scientificName', 'setDate', 'collectDate', 'targetTaxaPresent', 'individualCount', 'identifiedBy', 'identifiedDate', 'subsampleID', 'laboratoryName', 'archiveID', 'sampleCompromised', 'testingID', 'individualIDList', 'identificationRemarks', 'dataQF', 'testingIDCode', 'testingIDFate', 'subsampleCode', 'subsampleFate', 'archiveFate', 'archiveIDCode', 'individualCode', 'individualFate'], 'in_subset': []}, 'mos_barcoding_in': {'class_uri': 'neon:mos_barcoding_in', 'slots': ['uid', 'plotID', 'remarks', 'sex', 'lifeStage', 'eventID', 'individualID', 'scientificName', 'reproductiveCondition', 'setDate', 'collectDate', 'processingDate', 'identifiedBy', 'specimenSource', 'laboratoryName', 'archiveID', 'archiveLaboratoryName', 'collectedBy', 'method', 'identificationRemarks', 'archiveFacilityID', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'specificEpithet', 'dataQF', 'geneticSampleID', 'geneticSampleCode', 'geneticSampleFate', 'reviewedBy', 'samplingMethod', 'associatedSpecimens', 'associatedTaxa', 'externalURLs', 'individualCode', 'individualFate', 'sampleStatus', 'wellCoordinates', 'identifier', 'identifierEmail', 'identifierInstitution', 'reproduction', 'trappingDays', 'depth', 'depthPrecision', 'eventTime', 'plateID', 'BOLDsequenceURL', 'BOLDtraceURL', 'NEONsequenceURL', 'NEONtraceURL'], 'in_subset': []}, 'mos_pathogenpooling_in': {'class_uri': 'neon:mos_pathogenpooling_in', 'slots': ['uid', 'processingDate', 'laboratoryName', 'testingID', 'testingVialID', 'poolSize', 'startCollectDate', 'endCollectDate', 'locationID', 'dataQF', 'testingIDCode', 'testingIDFate', 'testingVialIDCode', 'testingVialIDFate'], 'in_subset': []}, 'mos_archivepooling_in': {'class_uri': 'neon:mos_archivepooling_in', 'slots': ['uid', 'processingDate', 'laboratoryName', 'archiveID', 'archiveVialIDList', 'archivedCount', 'archiveMedium', 'deprecatedVialID', 'startCollectDate', 'endCollectDate', 'archiveFacilityID', 'locationID', 'dataQF', 'archiveSampleFate', 'archiveSampleCode', 'archiveFate', 'archiveIDCode'], 'in_subset': []}, 'mos_pathogenresults_in': {'class_uri': 'neon:mos_pathogenresults_in', 'slots': ['uid', 'remarks', 'laboratoryName', 'sampleCompromised', 'receivedDate', 'testingVialID', 'deprecatedVialID', 'testedDate', 'senderID', 'testProtocolVersion', 'testMethod', 'testResult', 'testPathogenName', 'testNumber', 'finalResult', 'locus', 'percentIdentity', 'sequenceDatabase', 'sequenceDatabaseID', 'extractDepleted', 'testedBy', 'startCollectDate', 'endCollectDate', 'locationID', 'dataQF', 'batchID', 'testingVialIDCode', 'testingVialIDFate'], 'in_subset': []}, 'mos_trapping_pub': {'class_uri': 'neon:mos_trapping_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'recordedBy', 'eventID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'setDate', 'collectDate', 'targetTaxaPresent', 'plotType', 'samplingProtocolVersion', 'sampleTiming', 'fanStatus', 'catchCupStatus', 'dryIceStatus', 'nightOrDay', 'trapHours', 'sampleCode', 'dataQF', 'sampleCondition', 'samplingImpractical', 'namedLocation'], 'in_subset': ['DP1.10043.001']}, 'mos_sorting_pub': {'class_uri': 'neon:mos_sorting_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'subsampleID', 'laboratoryName', 'receivedDate', 'sortDate', 'totalWeight', 'subsampleWeight', 'bycatchWeight', 'sortedBy', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation', 'subsampleCode'], 'in_subset': []}, 'mos_expertTaxonomistIDProcessed_pub': {'class_uri': 'neon:mos_expertTaxonomistIDProcessed_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'sex', 'scientificName', 'taxonRank', 'setDate', 'collectDate', 'targetTaxaPresent', 'individualCount', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'subsampleID', 'laboratoryName', 'archiveID', 'testingID', 'individualIDList', 'identificationRemarks', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'dataQF', 'sampleCondition', 'testingIDCode', 'namedLocation', 'subsampleCode', 'archiveIDCode', 'individualCode', 'nativeStatusCode'], 'in_subset': []}, 'mos_expertTaxonomistIDRaw_pub': {'class_uri': 'neon:mos_expertTaxonomistIDRaw_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'sex', 'scientificName', 'setDate', 'collectDate', 'targetTaxaPresent', 'individualCount', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'subsampleID', 'laboratoryName', 'archiveID', 'testingID', 'individualIDList', 'identificationRemarks', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'dataQF', 'sampleCondition', 'testingIDCode', 'namedLocation', 'subsampleCode', 'archiveIDCode', 'individualCode'], 'in_subset': []}, 'mos_archivepooling_pub': {'class_uri': 'neon:mos_archivepooling_pub', 'slots': ['uid', 'domainID', 'siteID', 'archiveID', 'archiveVialIDList', 'archivedCount', 'archiveMedium', 'deprecatedVialID', 'startCollectDate', 'endCollectDate', 'archiveFacilityID', 'dataQF', 'namedLocation', 'archiveSampleCode', 'archiveIDCode'], 'in_subset': []}, 'mos_barcoding_pub': {'class_uri': 'neon:mos_barcoding_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'individualID', 'setDate', 'collectDate', 'processingDate', 'laboratoryName', 'dataQF', 'geneticSampleID', 'geneticSampleCode', 'namedLocation', 'individualCode', 'wellCoordinates'], 'in_subset': []}, 'mos_pathogenpooling_pub': {'class_uri': 'neon:mos_pathogenpooling_pub', 'slots': ['uid', 'domainID', 'siteID', 'testingID', 'testingVialID', 'poolSize', 'startCollectDate', 'endCollectDate', 'dataQF', 'testingIDCode', 'namedLocation', 'testingVialIDCode'], 'in_subset': ['DP1.10041.001']}, 'mos_pathogenresults_pub': {'class_uri': 'neon:mos_pathogenresults_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'taxonID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'laboratoryName', 'receivedDate', 'testingVialID', 'deprecatedVialID', 'testedDate', 'testProtocolVersion', 'testMethod', 'testResult', 'testPathogenName', 'testNumber', 'finalResult', 'locus', 'percentIdentity', 'sequenceDatabase', 'sequenceDatabaseID', 'extractDepleted', 'testedBy', 'startCollectDate', 'endCollectDate', 'dataQF', 'sampleCondition', 'namedLocation', 'testingVialIDCode'], 'in_subset': []}, 'phe_perindividual_in': {'class_uri': 'neon:phe_perindividual_in', 'slots': ['uid', 'plotID', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'individualID', 'enteredBy', 'acceptedTaxonID', 'identifiedBy', 'identifiedDate', 'addDate', 'transectMeter', 'directionFromTransect', 'ninetyDegreeDistance', 'growthForm', 'dropPlant', 'endDate', 'samplingProtocolVersion', 'dataQF', 'fulcrumVersion', 'platformInfo', 'individualFate', 'editedDate', 'gpsDatafile', 'individualBarcode', 'logCount', 'sampleCoordinateUncertainty', 'sampleElevation', 'sampleElevationUncertainty', 'sampleLatitude', 'sampleLongitude', 'subtypeSpecification', 'vstTag'], 'in_subset': ['DP0.10002.001']}, 'phe_statusintensity_in': {'class_uri': 'neon:phe_statusintensity_in', 'slots': ['uid', 'plotID', 'date', 'remarks', 'taxonID', 'measuredBy', 'recordedBy', 'individualID', 'enteredBy', 'growthForm', 'phenophaseName', 'phenophaseStatus', 'phenophaseIntensityDefinition', 'phenophaseIntensity', 'dayOfYear', 'endDate', 'samplingProtocolVersion', 'dataQF', 'fulcrumVersion', 'platformInfo', 'individualFate', 'editedDate', 'individualBarcode'], 'in_subset': []}, 'phe_perindividualperyear_in': {'class_uri': 'neon:phe_perindividualperyear_in', 'slots': ['uid', 'plotID', 'date', 'remarks', 'measuredBy', 'recordedBy', 'individualID', 'enteredBy', 'patchOrIndividual', 'canopyPosition', 'plantStatus', 'stemDiameter', 'measurementHeight', 'maxCanopyDiameter', 'ninetyCanopyDiameter', 'percentCover', 'height', 'adultLeafLength', 'diseaseStatus', 'diseaseType', 'endDate', 'samplingProtocolVersion', 'dataQF', 'fulcrumVersion', 'platformInfo', 'individualFate', 'editedDate', 'individualBarcode', 'patchSize'], 'in_subset': []}, 'phe_perindividual_pub': {'class_uri': 'neon:phe_perindividual_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'individualID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'identifiedBy', 'transectMeter', 'directionFromTransect', 'ninetyDegreeDistance', 'growthForm', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation', 'editedDate', 'individualBarcode', 'sampleCoordinateUncertainty', 'sampleElevation', 'sampleElevationUncertainty', 'sampleLatitude', 'sampleLongitude', 'subtypeSpecification', 'sampleGeodeticDatum', 'vstTag'], 'in_subset': ['DP1.10055.001']}, 'phe_perindividualperyear_pub': {'class_uri': 'neon:phe_perindividualperyear_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'remarks', 'measuredBy', 'recordedBy', 'individualID', 'patchOrIndividual', 'canopyPosition', 'plantStatus', 'stemDiameter', 'measurementHeight', 'maxCanopyDiameter', 'ninetyCanopyDiameter', 'percentCover', 'height', 'adultLeafLength', 'diseaseType', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation', 'editedDate', 'individualBarcode', 'patchSize'], 'in_subset': []}, 'phe_statusintensity_pub': {'class_uri': 'neon:phe_statusintensity_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'remarks', 'measuredBy', 'recordedBy', 'individualID', 'growthForm', 'phenophaseName', 'phenophaseStatus', 'phenophaseIntensityDefinition', 'phenophaseIntensity', 'dayOfYear', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation', 'editedDate', 'individualBarcode'], 'in_subset': []}, 'rip_assessment_pub': {'class_uri': 'neon:rip_assessment_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'startDate', 'endDate', 'samplingProtocolVersion', 'collectedBy', 'dataQF', 'adjacentAreaLeftRemarks', 'adjacentAreaRightRemarks', 'agriculturePresence', 'bankLR', 'bareDirtCoverClass', 'bigTreeCoverClass', 'bigTreeType', 'boatRampPresence', 'buildingPresence', 'dominantBankAngle', 'dominantBankRevetment', 'dominantBankTexture', 'industryPresence', 'lawnsParksPresence', 'pavementPresence', 'riparianClass', 'riparianDominantVegetation', 'riparianSubclass', 'riparianSubsystem', 'riparianWaterDepth', 'roadPresence', 'shortHerbCoverClass', 'smallTreeCoverClass', 'smallTreeType', 'standingWaterCoverClass', 'subdominantBankAngle', 'subdominantBankRevetment', 'subdominantBankTexture', 'tallHerbCoverClass', 'tallHerbType', 'trashPresence', 'wettedWidth', 'woodyShrubGroundCoverClass', 'woodyShrubSaplingCoverClass', 'woodyShrubSaplingType', 'replicateNumber', 'namedLocation', 'boatToShoreDist', 'estVisibilityDist', 'bankUndercut'], 'in_subset': ['DP1.20275.001']}, 'rip_fieldDataBank_in': {'class_uri': 'neon:rip_fieldDataBank_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'startDate', 'endDate', 'samplingProtocolVersion', 'collectedBy', 'dataQF', 'adjacentAreaLeftRemarks', 'adjacentAreaRightRemarks', 'agriculturePresence', 'bankLR', 'bareDirtCoverClass', 'bigTreeCoverClass', 'bigTreeType', 'boatRampPresence', 'buildingPresence', 'dominantBankAngle', 'dominantBankRevetment', 'dominantBankTexture', 'industryPresence', 'lawnsParksPresence', 'pavementPresence', 'riparianClass', 'riparianDominantVegetation', 'riparianSubclass', 'riparianSubsystem', 'riparianWaterDepth', 'roadPresence', 'shortHerbCoverClass', 'smallTreeCoverClass', 'smallTreeType', 'standingWaterCoverClass', 'subdominantBankAngle', 'subdominantBankRevetment', 'subdominantBankTexture', 'tallHerbCoverClass', 'tallHerbType', 'transectID', 'trashPresence', 'wettedWidth', 'woodyShrubGroundCoverClass', 'woodyShrubSaplingCoverClass', 'woodyShrubSaplingType', 'replicateNumber', 'fulcrumVersion', 'platformInfo', 'boatToShoreDist', 'estVisibilityDist', 'fulcrumChildID', 'fulcrumGrandchildID', 'bankUndercut'], 'in_subset': ['DP0.20275.001']}, 'rip_percentCanopyCover_in': {'class_uri': 'neon:rip_percentCanopyCover_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'startDate', 'endDate', 'samplingProtocolVersion', 'collectedBy', 'dataQF', 'transectID', 'coveredDensiometerPoints', 'measurementDirection', 'measurementLocation', 'totalDensiometerPoints', 'replicateNumber', 'fulcrumVersion', 'platformInfo', 'canopyCoverPercent', 'fulcrumChildID', 'fulcrumGrandchildID'], 'in_subset': []}, 'rip_percentComposition_pub': {'class_uri': 'neon:rip_percentComposition_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'startDate', 'endDate', 'samplingProtocolVersion', 'collectedBy', 'dataQF', 'coveredDensiometerPoints', 'measurementDirection', 'measurementLocation', 'totalDensiometerPoints', 'replicateNumber', 'namedLocation', 'canopyCoverPercent'], 'in_subset': ['DP1.20191.001']}, 'rpt_bloodtesting_in': {'class_uri': 'neon:rpt_bloodtesting_in', 'slots': ['uid', 'plotID', 'remarks', 'bloodSampleID', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'testedDate', 'testProtocolVersion', 'testResult', 'testPathogenName', 'dataQF', 'sampleCondition', 'batchID', 'bloodSampleBarcode', 'bloodSampleFate', 'agWellOpticalDensity', 'cAgWellOpticalDensity', 'conjugateDilution', 'conjugateLot', 'diluentDilution', 'diluentLot', 'internalLabBarcode', 'internalLabFate', 'negAbDilution', 'negAbLot', 'netOpticalDensity', 'plateLot', 'posAbDilution', 'posAbLot', 'rawTestResult', 'substrateLot', 'substrateTime'], 'in_subset': ['DP0.10064.001']}, 'rpt_bloodtesting_pub': {'class_uri': 'neon:rpt_bloodtesting_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'bloodSampleID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'testedDate', 'testProtocolVersion', 'testResult', 'testPathogenName', 'dataQF', 'sampleCondition', 'batchID', 'namedLocation', 'bloodSampleBarcode', 'agWellOpticalDensity', 'cAgWellOpticalDensity', 'conjugateDilution', 'conjugateLot', 'diluentDilution', 'diluentLot', 'internalLabBarcode', 'negAbDilution', 'negAbLot', 'netOpticalDensity', 'plateLot', 'posAbDilution', 'posAbLot', 'rawTestResult', 'substrateLot', 'substrateTime'], 'in_subset': ['DP1.10064.001']}, 'dep_profileHeader_pub': {'class_uri': 'neon:dep_profileHeader_pub', 'slots': ['uid', 'domainID', 'siteID', 'date', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'maxDepth', 'startDate', 'samplingProtocolVersion', 'iceThickness', 'thermalStratification', 'dataQF', 'samplingImpractical', 'namedLocation', 'additionalCoordUncertainty', 'estimatedMetalimnionDepths', 'lowerMetalimnionDepth', 'lowerMetalimnion2Depth', 'upperMetalimnionDepth', 'upperMetalimnion2Depth', 'snowThickness'], 'in_subset': ['DP1.20254.001']}, 'dep_profileData_pub': {'class_uri': 'neon:dep_profileData_pub', 'slots': ['uid', 'domainID', 'siteID', 'date', 'eventID', 'waterTemp', 'specificConductance', 'startDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'sampleDepth', 'dataQF', 'namedLocation'], 'in_subset': []}, 'dep_profileHeader_in': {'class_uri': 'neon:dep_profileHeader_in', 'slots': ['uid', 'date', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'stationID', 'maxDepth', 'startDate', 'samplingProtocolVersion', 'iceThickness', 'thermalStratification', 'dataQF', 'samplingImpractical', 'additionalCoordUncertainty', 'fulcrumVersion', 'platformInfo', 'estimatedMetalimnionDepths', 'lowerMetalimnionDepth', 'lowerMetalimnion2Depth', 'upperMetalimnionDepth', 'upperMetalimnion2Depth', 'snowThickness'], 'in_subset': ['DP0.20254.001']}, 'dep_profileData_in': {'class_uri': 'neon:dep_profileData_in', 'slots': ['uid', 'date', 'eventID', 'stationID', 'waterTemp', 'specificConductance', 'startDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'sampleDepth', 'dataQF'], 'in_subset': []}, 'dep_secchi_in': {'class_uri': 'neon:dep_secchi_in', 'slots': ['uid', 'date', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'stationID', 'maxDepth', 'startDate', 'samplingProtocolVersion', 'secchi1Depth', 'secchi2Depth', 'clearToBottom', 'secchiMeanDepth', 'euphoticDepth', 'dataQF', 'samplingImpractical', 'additionalCoordUncertainty', 'fulcrumVersion', 'icePresent', 'platformInfo'], 'in_subset': ['DP0.20252.001']}, 'dep_secchi_pub': {'class_uri': 'neon:dep_secchi_pub', 'slots': ['uid', 'domainID', 'siteID', 'date', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'maxDepth', 'startDate', 'samplingProtocolVersion', 'secchi1Depth', 'secchi2Depth', 'clearToBottom', 'secchiMeanDepth', 'euphoticDepth', 'dataQF', 'samplingImpractical', 'namedLocation', 'additionalCoordUncertainty', 'icePresent'], 'in_subset': ['DP1.20252.001']}, 'mam_pertrapnight_in': {'class_uri': 'neon:mam_pertrapnight_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'nightuid', 'trapCoordinate', 'trapStatus', 'taxonID', 'identificationQualifier', 'sex', 'lifeStage', 'testes', 'nipples', 'pregnancyStatus', 'vagina', 'hindfootLength', 'earLength', 'tailLength', 'totalLength', 'weight', 'tagID', 'replacedTag', 'recapture', 'fate', 'bloodSampleID', 'bloodSampleMethod', 'fecalSampleID', 'fecalSampleCondition', 'earSampleID', 'hairSampleID', 'voucherSampleID', 'measuredBy', 'recordedBy', 'enteredBy', 'specimenSource', 'daysOfTrapping', 'startDate', 'endDate', 'trapType', 'method', 'larvalTicksAttached', 'nymphalTicksAttached', 'adultTicksAttached', 'dataQF', 'fulcrumVersion', 'platformInfo', 'dnaBarcoded', 'externalURLs', 'individualCode', 'individualFate', 'sampleStatus', 'bloodSampleBarcode', 'earSampleBarcode', 'fecalSampleBarcode', 'hairSampleBarcode', 'voucherSampleBarcode', 'bloodSampleFate', 'earSampleFate', 'fecalSampleFate', 'hairSampleFate', 'voucherSampleFate', 'identifierEmail', 'identifierInstitution', 'reproduction', 'hairSampleContents'], 'in_subset': ['DP0.10001.001']}, 'mam_perplotnight_in': {'class_uri': 'neon:mam_perplotnight_in', 'slots': ['uid', 'plotID', 'remarks', 'nightuid', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'fulcrumVersion', 'platformInfo'], 'in_subset': []}, 'tck_collection_in': {'class_uri': 'neon:tck_collection_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'sampleID', 'targetTaxaPresent', 'startDate', 'endDate', 'samplingProtocolVersion', 'numVialsSampleID', 'archiveMedium', 'sampleFate', 'sampleCode', 'dataQF', 'totalSampledArea', 'sampleCondition', 'fulcrumVersion', 'platformInfo', 'adultCount', 'larvaCount', 'nymphCount', 'samplingMethod'], 'in_subset': ['DP0.10093.001']}, 'tck_identification_in': {'class_uri': 'neon:tck_identification_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'identificationQualifier', 'scientificName', 'sampleID', 'targetTaxaPresent', 'individualCount', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'subsampleID', 'startDate', 'endDate', 'laboratoryName', 'archiveMedium', 'deprecatedVialID', 'archiveFacilityID', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'sexOrAge', 'subkingdom', 'infrakingdom', 'superclass', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'superphylum', 'infraphylum', 'batchID', 'subsampleCode', 'subsampleFate', 'identificationProtocolVersion'], 'in_subset': []}, 'tck_pathogenresults_in': {'class_uri': 'neon:tck_pathogenresults_in', 'slots': ['uid', 'plotID', 'remarks', 'individualCount', 'subsampleID', 'startDate', 'endDate', 'laboratoryName', 'testingID', 'testedDate', 'testProtocolVersion', 'testResult', 'testPathogenName', 'testedBy', 'dataQF', 'sampleCondition', 'testingIDCode', 'testingIDFate', 'batchID', 'subsampleCode', 'subsampleFate'], 'in_subset': []}, 'tck_pathogenqa_in': {'class_uri': 'neon:tck_pathogenqa_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'laboratoryName', 'testedDate', 'dataQF', 'batchID', 'controlType', 'criteriaMet'], 'in_subset': []}, 'tck_fielddata_pub': {'class_uri': 'neon:tck_fielddata_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'eventID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'collectDate', 'targetTaxaPresent', 'plotType', 'endDate', 'samplingProtocolVersion', 'sampleCode', 'dataQF', 'totalSampledArea', 'sampleCondition', 'namedLocation', 'adultCount', 'larvaCount', 'nymphCount', 'samplingMethod'], 'in_subset': ['DP1.10093.001']}, 'tck_taxonomyRaw_pub': {'class_uri': 'neon:tck_taxonomyRaw_pub', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'scientificName', 'sampleID', 'collectDate', 'individualCount', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'subsampleID', 'endDate', 'laboratoryName', 'archiveMedium', 'deprecatedVialID', 'archiveFacilityID', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'sexOrAge', 'subkingdom', 'infrakingdom', 'superclass', 'sampleCode', 'dataQF', 'sampleCondition', 'superphylum', 'infraphylum', 'namedLocation', 'subsampleCode', 'identificationProtocolVersion'], 'in_subset': []}, 'tck_taxonomyProcessed_pub': {'class_uri': 'neon:tck_taxonomyProcessed_pub', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'individualCount', 'acceptedTaxonID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'subsampleID', 'endDate', 'laboratoryName', 'archiveMedium', 'deprecatedVialID', 'archiveFacilityID', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'sexOrAge', 'subkingdom', 'infrakingdom', 'superclass', 'dataQF', 'sampleCondition', 'superphylum', 'infraphylum', 'namedLocation', 'subsampleCode', 'identificationProtocolVersion'], 'in_subset': []}, 'tck_pathogen_pub': {'class_uri': 'neon:tck_pathogen_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'individualCount', 'subsampleID', 'plotType', 'endDate', 'laboratoryName', 'testingID', 'testedDate', 'testProtocolVersion', 'testResult', 'testPathogenName', 'testedBy', 'dataQF', 'sampleCondition', 'testingIDCode', 'batchID', 'namedLocation', 'subsampleCode'], 'in_subset': ['DP1.10092.001']}, 'tck_pathogenqa_pub': {'class_uri': 'neon:tck_pathogenqa_pub', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'testedDate', 'dataQF', 'batchID', 'namedLocation', 'controlType', 'criteriaMet'], 'in_subset': []}, 'vst_perplotperyear_pub': {'class_uri': 'neon:vst_perplotperyear_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'plotType', 'plotSize', 'easting', 'northing', 'utmZone', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation', 'cactiAbsentList', 'cactiPresent', 'fernsAbsentList', 'fernsPresent', 'lianasAbsentList', 'lianasPresent', 'nestedSubplotAreaLiana', 'nestedSubplotAreaOther', 'nestedSubplotAreaShrubSapling', 'ocotillosAbsentList', 'ocotillosPresent', 'palmsAbsentList', 'palmsPresent', 'shrubsAbsentList', 'shrubsPresent', 'totalSampledAreaLiana', 'totalSampledAreaOther', 'totalSampledAreaShrubSapling', 'totalSampledAreaTrees', 'treesAbsentList', 'treesPresent', 'xerophyllumAbsentList', 'xerophyllumPresent', 'yuccasAbsentList', 'yuccasPresent'], 'in_subset': ['DP1.10045.001']}, 'nst_perindividual_pub': {'class_uri': 'neon:nst_perindividual_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'measuredBy', 'recordedBy', 'eventID', 'individualID', 'scientificName', 'taxonRank', 'morphospeciesID', 'growthForm', 'canopyPosition', 'plantStatus', 'stemDiameter', 'measurementHeight', 'height', 'subplotID', 'morphospeciesIDRemarks', 'endDate', 'dataQF', 'namedLocation', 'individualBarcode', 'tagStatus', 'basalStemDiameter', 'baseCrownHeight', 'branchCount', 'leafNumber', 'maxBaseCrownDiameter', 'maxCrownDiameter', 'meanBasalDiameter', 'meanBladeLength', 'meanBranchLength', 'meanLeafLength', 'meanPetioleLength', 'nestedSubplotID', 'newPadCount', 'ninetyBaseCrownDiameter', 'ninetyCrownDiameter', 'oldPadCount', 'shape', 'stemCount', 'stemLength'], 'in_subset': []}, 'vst_perplotperyear_in': {'class_uri': 'neon:vst_perplotperyear_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'targetTaxaPresent', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'samplingImpractical', 'yearBoutBegan', 'cactiAbsentList', 'cactiPresent', 'fernsAbsentList', 'fernsPresent', 'lianasAbsentList', 'lianasPresent', 'nestedSubplotAreaLiana', 'nestedSubplotAreaOther', 'nestedSubplotAreaShrubSapling', 'ocotillosAbsentList', 'ocotillosPresent', 'palmsAbsentList', 'palmsPresent', 'shrubsAbsentList', 'shrubsPresent', 'totalSampledAreaLiana', 'totalSampledAreaOther', 'totalSampledAreaShrubSapling', 'totalSampledAreaTrees', 'treesAbsentList', 'treesPresent', 'xerophyllumAbsentList', 'xerophyllumPresent', 'yuccasAbsentList', 'yuccasPresent', 'eventType', 'dataCollected'], 'in_subset': ['DP0.10098.001']}, 'vst_mappingandtagging_in': {'class_uri': 'neon:vst_mappingandtagging_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'measuredBy', 'recordedBy', 'eventID', 'individualID', 'morphospeciesID', 'subplotID', 'morphospeciesIDRemarks', 'startDate', 'endDate', 'samplingProtocolVersion', 'pointID', 'dataQF', 'individualFate', 'individualBarcode', 'yearBoutBegan', 'cfcOnlyTag', 'nestedSubplotID', 'previouslyTaggedAs', 'stemAzimuth', 'stemDistance', 'supportingStemIndividualID', 'supportingStemTagID', 'vstBarcode', 'vstFate', 'vstID', 'initialBandStemDiameter', 'initialDendrometerGap', 'dendrometerHeight', 'recordType'], 'in_subset': []}, 'vst_apparentindividual_in': {'class_uri': 'neon:vst_apparentindividual_in', 'slots': ['uid', 'plotID', 'remarks', 'tagID', 'measuredBy', 'recordedBy', 'eventID', 'individualID', 'growthForm', 'canopyPosition', 'plantStatus', 'stemDiameter', 'measurementHeight', 'height', 'subplotID', 'startDate', 'endDate', 'dataQF', 'individualFate', 'individualBarcode', 'tagStatus', 'nullFieldValidation', 'basalStemDiameter', 'basalStemDiameterMsrmntHeight', 'baseCrownHeight', 'breakDiameter', 'breakHeight', 'maxBaseCrownDiameter', 'maxCrownDiameter', 'ninetyBaseCrownDiameter', 'ninetyCrownDiameter', 'shape', 'vdApexBreakHeight', 'vdApexHeight', 'vdBaseBreakHeight', 'vdBaseHeight', 'initialBandStemDiameter', 'initialDendrometerGap', 'dendrometerHeight', 'tempStemID', 'measurementStrategy', 'changedMeasurementLocation', 'dendrometerInstallationDate', 'initalGapMeasurementDate', 'dendrometerGap', 'dendrometerCondition', 'bandStemDiameter'], 'in_subset': []}, 'vst_non-woody_in': {'class_uri': 'neon:vst_non-woody_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'measuredBy', 'recordedBy', 'eventID', 'individualID', 'morphospeciesID', 'growthForm', 'canopyPosition', 'plantStatus', 'stemDiameter', 'measurementHeight', 'height', 'subplotID', 'morphospeciesIDRemarks', 'startDate', 'endDate', 'dataQF', 'individualFate', 'individualBarcode', 'tagStatus', 'basalStemDiameter', 'baseCrownHeight', 'branchCount', 'leafNumber', 'maxBaseCrownDiameter', 'maxCrownDiameter', 'meanBasalDiameter', 'meanBladeLength', 'meanBranchLength', 'meanLeafLength', 'meanPetioleLength', 'nestedSubplotID', 'newPadCount', 'ninetyBaseCrownDiameter', 'ninetyCrownDiameter', 'oldPadCount', 'shape', 'stemCount', 'padCountValidation', 'stemLength'], 'in_subset': []}, 'vst_shrubgroup_in': {'class_uri': 'neon:vst_shrubgroup_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'eventID', 'morphospeciesID', 'subplotID', 'morphospeciesIDRemarks', 'startDate', 'endDate', 'dataQF', 'aGroupHeight', 'bGroupHeight', 'cGroupHeight', 'dGroupHeight', 'eGroupHeight', 'canopyArea', 'deadPercent', 'groupID', 'livePercent', 'meanHeight', 'nestedSubplotID', 'volumePercent'], 'in_subset': []}, 'zoo_fieldData_in': {'class_uri': 'neon:zoo_fieldData_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'sampleID', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'locationID', 'samplerType', 'sampleNumber', 'sampleFate', 'sampleCode', 'dataQF', 'towsTrapsNumber', 'aquaticSiteType', 'zooDepth1', 'zooDepth2', 'zooDepth3', 'sampleClass', 'samplingImpractical', 'additionalCoordUncertainty', 'fulcrumVersion', 'platformInfo', 'towsTrapsVolume'], 'in_subset': ['DP0.20219.001']}, 'zoo_perTaxon_in': {'class_uri': 'neon:zoo_perTaxon_in', 'slots': ['uid', 'identificationReferences', 'identificationQualifier', 'scientificName', 'sampleID', 'collectDate', 'targetTaxaPresent', 'individualCount', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'subsampleType', 'startDate', 'laboratoryName', 'internalLabID', 'internalLabName', 'identificationRemarks', 'testProtocolVersion', 'locationID', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'taxonDatabaseName', 'taxonDatabaseID', 'distinctTaxon', 'qcChecked', 'indeterminateSpecies', 'notSubsampled', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'subkingdom', 'infrakingdom', 'superclass', 'subspecies', 'sampleFate', 'sampleCode', 'dataQF', 'referencePhotoID', 'sampleCondition', 'nauplii', 'zooMinimumLength', 'zooMaximumLength', 'zooMeanLength', 'zooWidth', 'zooSubsampleVolume', 'superphylum', 'infraphylum', 'adjCountPerBottle', 'referencePhotoCode', 'zooVolumePerBottle', 'qcEnumerationDifference', 'qcTaxonomicDifference'], 'in_subset': []}, 'zoo_perVial_in': {'class_uri': 'neon:zoo_perVial_in', 'slots': ['uid', 'scientificName', 'sampleID', 'collectDate', 'morphospeciesID', 'startDate', 'laboratoryName', 'locationID', 'referenceCount', 'referenceID', 'sampleFate', 'sampleCode', 'dataQF', 'referenceFate', 'referenceCode'], 'in_subset': []}, 'mms_metagenomeSequencing_in': {'class_uri': 'neon:mms_metagenomeSequencing_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'subsampleID', 'processedDate', 'laboratoryName', 'internalLabID', 'locationID', 'analyzedBy', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'sequencingMethod', 'investigation_type', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'subsampleCode', 'subsampleFate', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'sequencingProtocol', 'labPrepMethod', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'processedSeqFileName', 'processedSeqFileNameCode', 'processedSeqFileNameFate', 'processedSeqFileNameID'], 'in_subset': ['DP0.10107.001']}, 'mms_metagenomeDnaExtraction_pub': {'class_uri': 'neon:mms_metagenomeDnaExtraction_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testMethod', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'genomicsSampleCode', 'genomicsSampleID', 'nucleicAcidPurity', 'sequenceAnalysisType'], 'in_subset': ['DP1.10107.001']}, 'mms_metagenomeSequencing_pub': {'class_uri': 'neon:mms_metagenomeSequencing_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'analyzedBy', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencingMethod', 'investigation_type', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'sequencingProtocol', 'labPrepMethod', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'processedSeqFileName'], 'in_subset': []}, 'ntr_internalLab_pub': {'class_uri': 'neon:ntr_internalLab_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'plotType', 'samplingProtocolVersion', 'sampleCode', 'dataQF', 'sampleCondition', 'nTransBoutType', 'processedBy', 'namedLocation', 'extractionEndDate', 'extractionStartDate', 'incubationLength', 'incubationPairID', 'kclReferenceID', 'kclSampleCode', 'kclSampleID', 'kclVolume', 'soilFreshMass'], 'in_subset': ['DP1.10080.001']}, 'ntr_internalLabBlanks_pub': {'class_uri': 'neon:ntr_internalLabBlanks_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'dataQF', 'extractionEndDate', 'extractionStartDate', 'kclBlank1Code', 'kclBlank1ID', 'kclBlank2Code', 'kclBlank2ID', 'kclBlank3Code', 'kclBlank3ID', 'kclReferenceID'], 'in_subset': []}, 'ntr_externalLab_pub': {'class_uri': 'neon:ntr_externalLab_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'sampleID', 'setDate', 'collectDate', 'laboratoryName', 'receivedDate', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation', 'ammoniumNAnalysisDate', 'ammoniumNAnalyzedBy', 'ammoniumNInstrument', 'ammoniumNMethod', 'ammoniumNQF', 'ammoniumNRemarks', 'ammoniumNRepNum', 'ammoniumNReviewedBy', 'kclAmmoniumNConc', 'kclNitrateNitriteNConc', 'kclSampleCode', 'kclSampleID', 'nitrateNitriteNAnalysisDate', 'nitrateNitriteNAnalyzedBy', 'nitrateNitriteNInstrument', 'nitrateNitriteNMethod', 'nitrateNitriteNQF', 'nitrateNitriteNRemarks', 'nitrateNitriteNRepNum', 'nitrateNitriteNReviewedBy', 'receivedCondition'], 'in_subset': []}, 'ntr_externalSummary_pub': {'class_uri': 'neon:ntr_externalSummary_pub', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'methodDetectionLimit', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analytePercentRecovery', 'lotID', 'analyteObservedValue', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'ntr_internalLab_in': {'class_uri': 'neon:ntr_internalLab_in', 'slots': ['uid', 'plotID', 'remarks', 'recordedBy', 'sampleID', 'setDate', 'collectDate', 'samplingProtocolVersion', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'nTransBoutType', 'processedBy', 'fulcrumVersion', 'platformInfo', 'extractionEndDate', 'extractionStartDate', 'incubationLength', 'incubationPairID', 'kclBatchNumber', 'kclReferenceID', 'kclSampleCode', 'kclSampleFate', 'kclSampleID', 'kclVolume', 'soilFreshMass'], 'in_subset': ['DP0.10080.001']}, 'ntr_internalLabBlanks_in': {'class_uri': 'neon:ntr_internalLabBlanks_in', 'slots': ['uid', 'siteID', 'remarks', 'recordedBy', 'dataQF', 'processedBy', 'fulcrumVersion', 'platformInfo', 'extractionEndDate', 'extractionStartDate', 'kclBlank1Code', 'kclBlank1Fate', 'kclBlank1ID', 'kclBlank2Code', 'kclBlank2Fate', 'kclBlank2ID', 'kclBlank3Code', 'kclBlank3Fate', 'kclBlank3ID', 'kclReferenceCode', 'kclReferenceFate', 'kclReferenceID'], 'in_subset': []}, 'ntr_externalLab_in': {'class_uri': 'neon:ntr_externalLab_in', 'slots': ['uid', 'plotID', 'setDate', 'collectDate', 'laboratoryName', 'nitrateNitriteNRunID', 'internalLabID', 'receivedDate', 'dataQF', 'sampleCondition', 'ammoniumNAnalysisDate', 'ammoniumNAnalyzedBy', 'ammoniumNInstrument', 'ammoniumNMethod', 'ammoniumNQF', 'ammoniumNRemarks', 'ammoniumNRepNum', 'ammoniumNReviewedBy', 'ammoniumNRunID', 'kclAmmoniumNConc', 'kclNitrateNitriteNConc', 'kclSampleCode', 'kclSampleFate', 'kclSampleID', 'nitrateNitriteNAnalysisDate', 'nitrateNitriteNAnalyzedBy', 'nitrateNitriteNInstrument', 'nitrateNitriteNMethod', 'nitrateNitriteNQF', 'nitrateNitriteNRemarks', 'nitrateNitriteNRepNum', 'nitrateNitriteNReviewedBy', 'receivedCondition'], 'in_subset': []}, 'ntr_externalBatchQA_in': {'class_uri': 'neon:ntr_externalBatchQA_in', 'slots': ['uid', 'remarks', 'laboratoryName', 'analyte', 'instrument', 'analyteUnits', 'analysisDate', 'analyzedBy', 'dataQF', 'qaReferenceID', 'analysisEndDate', 'reviewedBy', 'analyteKnownValue', 'analyticalRepNumber', 'runID', 'analyteConcentration', 'analyteQF'], 'in_subset': []}, 'ntr_externalSummary_in': {'class_uri': 'neon:ntr_externalSummary_in', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'methodDetectionLimit', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analytePercentRecovery', 'lotID', 'analyteObservedValue', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'dpm_field_pub': {'class_uri': 'neon:dpm_field_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'setDate', 'collectDate', 'aCollectedBy', 'bCollectedBy', 'aSetBy', 'bSetBy', 'sampleCode', 'dataQF', 'namedLocation', 'fieldFilterCondition', 'fieldFilterConditionRemarks', 'fieldFilterDamage', 'fieldFilterDamageRemarks', 'filterID', 'filterWet', 'equipCondition', 'equipConditionDesc'], 'in_subset': ['DP1.00101.001']}, 'dpm_lab_pub': {'class_uri': 'neon:dpm_lab_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'setDate', 'collectDate', 'laboratoryName', 'archiveID', 'externalRemarks', 'sampleCode', 'dataQF', 'namedLocation', 'filterID', 'filterLotID', 'filterWeighDate', 'filterWeightDelta', 'filterWeightPostDeploy', 'filterWeightPreDeploy', 'labAverageHumidity', 'labFilterCondition', 'labFilterConditionRemarks', 'labFilterDamage', 'labFilterDamageRemarks', 'labQARemarks', 'labRelativeHumidity', 'labTemp'], 'in_subset': []}, 'bet_BOLDvoucherInfo_pub': {'class_uri': 'neon:bet_BOLDvoucherInfo_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'fieldID', 'namedLocation', 'collectionCode', 'institutionStoring', 'museumID'], 'in_subset': ['DP1.10020.001']}, 'bet_BOLDtaxonomy_pub': {'class_uri': 'neon:bet_BOLDtaxonomy_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'tribe', 'subspecies', 'namedLocation', 'identifier', 'identifierEmail', 'identifierInstitution', 'identificationMethod', 'species', 'taxonomyNotes'], 'in_subset': []}, 'bet_BOLDspecimenDetails_pub': {'class_uri': 'neon:bet_BOLDspecimenDetails_pub', 'slots': ['uid', 'sex', 'lifeStage', 'sampleID', 'setDate', 'collectDate', 'namedLocation', 'associatedSpecimens', 'associatedTaxa', 'externalURLs', 'reproduction', 'extraInfo', 'notes', 'tissueDescriptor', 'voucherStatus'], 'in_subset': []}, 'bet_BOLDcollectionData_pub': {'class_uri': 'neon:bet_BOLDcollectionData_pub', 'slots': ['uid', 'samplingProtocol', 'elevation', 'sampleID', 'setDate', 'collectDate', 'namedLocation', 'collectionDateAccuracy', 'collectionEventID', 'collectionNotes', 'collectors', 'coordinateAccuracy', 'countryOcean', 'depth', 'depthPrecision', 'elevationPrecision', 'eventTime', 'exactSite', 'gpsSource', 'habitat', 'latitude', 'longitude', 'region', 'sector', 'siteCode', 'stateProvince'], 'in_subset': []}, 'wpa_fieldSuperParent_in': {'class_uri': 'neon:wpa_fieldSuperParent_in', 'slots': ['uid', 'remarks', 'eventID', 'collectDate', 'stationID', 'waterTemp', 'specificConductance', 'aCollectedBy', 'bCollectedBy', 'altLocation', 'altLongitude', 'altLatitude', 'maxDepth', 'upperSegmentDepth', 'lowerSegmentDepth', 'startDate', 'waterColorDescrip', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'pH', 'wellWaterDepth', 'sampleDepth', 'sampleExtractionMethod', 'wellVolumePurged', 'samplerType', 'parentSampleID', 'lakeSampleDepth1', 'lakeSampleDepth2', 'sdgSamplingProtocolVersion', 'asiSamplingProtocolVersion', 'aquaticSiteType', 'parentSampleFate', 'parentSampleCode', 'sampleClass', 'fieldDataQF', 'samplingImpractical', 'additionalCoordUncertainty', 'fulcrumVersion', 'platformInfo', 'waterClarityDescrip', 'altCoordinateUncertainty', 'altGeodeticDatum', 'amcSamplingProtocolVersion', 'swcSamplingProtocolVersion', 'measurementDepth', 'pumpStartTime', 'totalWellDepth', 'volume3Wells', 'waterColumnHeight', 'wellRedeveloped', 'wellRedevelopedDate', 'maxAllowableDrawdown', 'measTotalWellDepth', 'pumpPlacementDepth', 'screenedIntervalDepth', 'wellDepthChanged', 'pumpPlacementDate', 'adequateSampleVol'], 'in_subset': ['DP0.20090.001']}, 'wpa_wellStabilizing_in': {'class_uri': 'neon:wpa_wellStabilizing_in', 'slots': ['uid', 'collectDate', 'stationID', 'waterTemp', 'specificConductance', 'startDate', 'waterColorDescrip', 'dissolvedOxygenSaturation', 'wellDischargeRate', 'parentSampleID', 'parentSampleFate', 'parentSampleCode', 'fulcrumVersion', 'platformInfo', 'waterClarityDescrip', 'groundwaterFieldDataQF', 'measurementDate'], 'in_subset': []}, 'fsh_fieldData_in': {'class_uri': 'neon:fsh_fieldData_in', 'slots': ['uid', 'remarks', 'identifiedBy', 'aCollectedBy', 'bCollectedBy', 'startDate', 'endDate', 'samplingProtocolVersion', 'locationID', 'dataQF', 'aquaticSiteType', 'samplingImpractical', 'fulcrumVersion', 'platformInfo', 'cCollectedBy', 'fixedRandomReach', 'measuredReachLength', 'reachCondition', 'reachID'], 'in_subset': ['DP0.20107.001']}, 'fsh_perPass_in': {'class_uri': 'neon:fsh_perPass_in', 'slots': ['uid', 'remarks', 'eventID', 'targetTaxaPresent', 'waterTemp', 'specificConductance', 'dissolvedOxygen', 'habitatType', 'locationID', 'samplerType', 'dataQF', 'fulcrumVersion', 'platformInfo', 'efTime', 'efTime2', 'finalDutyCycle', 'finalDutyCycle2', 'finalFrequency', 'finalFrequency2', 'finalVoltage', 'finalVoltage2', 'initialDutyCycle', 'initialDutyCycle2', 'initialFrequency', 'initialFrequency2', 'initialVoltage', 'initialVoltage2', 'netDeploymentTime', 'netDepth', 'netEndTime', 'netIntegrity', 'netLength', 'netSetTime', 'passEndTime', 'passNumber', 'passStartTime', 'reachID', 'settingsChanged', 'settingsChanged2', 'subdominantHabitatType'], 'in_subset': []}, 'fsh_perFish_in': {'class_uri': 'neon:fsh_perFish_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'voucherSampleID', 'eventID', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'locationID', 'samplerType', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'fulcrumVersion', 'platformInfo', 'voucherSampleFate', 'voucherSampleCode', 'delt', 'fishLifeStage', 'fishTotalLength', 'fishWeight', 'efInjury', 'efMortality', 'netDepth', 'passEndTime', 'passNumber', 'passStartTime', 'sampleTypeCollected', 'specimenNumber'], 'in_subset': []}, 'fsh_nonTarget_in': {'class_uri': 'neon:fsh_nonTarget_in', 'slots': ['uid', 'remarks', 'voucherSampleID', 'eventID', 'identifiedBy', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'voucherSampleFate', 'voucherSampleCode', 'delt', 'efInjury', 'efMortality', 'nonTargetSpecies', 'passEndTime', 'passNumber', 'passStartTime', 'specimenNumber', 'voucherSampleCollected'], 'in_subset': []}, 'fsh_bulkCount_in': {'class_uri': 'neon:fsh_bulkCount_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'eventID', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'actualOrEstimated', 'bulkFishCount', 'bulkMortality', 'passEndTime', 'passNumber', 'passStartTime'], 'in_subset': []}, 'fsh_morphospecies_in': {'class_uri': 'neon:fsh_morphospecies_in', 'slots': ['uid', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'recordedBy', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'dataQF', 'aquaticSiteType', 'fulcrumVersion', 'platformInfo', 'morphospeciesCreatedDate', 'morphospeciesResolved', 'morphospeciesResolvedDate'], 'in_subset': []}, 'fsh_fieldData_pub': {'class_uri': 'neon:fsh_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'identifiedBy', 'aCollectedBy', 'bCollectedBy', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'aquaticSiteType', 'samplingImpractical', 'namedLocation', 'cCollectedBy', 'fixedRandomReach', 'measuredReachLength', 'reachCondition', 'reachID'], 'in_subset': ['DP1.20107.001']}, 'fsh_perPass_pub': {'class_uri': 'neon:fsh_perPass_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'eventID', 'targetTaxaPresent', 'waterTemp', 'specificConductance', 'dissolvedOxygen', 'habitatType', 'samplerType', 'dataQF', 'namedLocation', 'efTime', 'efTime2', 'finalDutyCycle', 'finalDutyCycle2', 'finalFrequency', 'finalFrequency2', 'finalVoltage', 'finalVoltage2', 'initialDutyCycle', 'initialDutyCycle2', 'initialFrequency', 'initialFrequency2', 'initialVoltage', 'initialVoltage2', 'netDeploymentTime', 'netDepth', 'netEndTime', 'netIntegrity', 'netLength', 'netSetTime', 'passEndTime', 'passNumber', 'passStartTime', 'reachID', 'settingsChanged', 'settingsChanged2', 'subdominantHabitatType'], 'in_subset': []}, 'fsh_perFish_pub': {'class_uri': 'neon:fsh_perFish_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'voucherSampleID', 'eventID', 'scientificName', 'taxonRank', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'voucherSampleCode', 'delt', 'fishLifeStage', 'fishTotalLength', 'fishWeight', 'efInjury', 'efMortality', 'passEndTime', 'passNumber', 'passStartTime', 'sampleTypeCollected', 'specimenNumber'], 'in_subset': []}, 'fsh_bulkCount_pub': {'class_uri': 'neon:fsh_bulkCount_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'eventID', 'scientificName', 'morphospeciesID', 'identifiedBy', 'dataQF', 'namedLocation', 'actualOrEstimated', 'bulkFishCount', 'passEndTime', 'passNumber', 'passStartTime'], 'in_subset': []}, 'fsh_morphospecies_pub': {'class_uri': 'neon:fsh_morphospecies_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'recordedBy', 'scientificName', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'dataQF', 'namedLocation', 'morphospeciesCreatedDate', 'morphospeciesResolvedDate'], 'in_subset': []}, 'asc_fieldDataPoint_in': {'class_uri': 'neon:asc_fieldDataPoint_in', 'slots': ['uid', 'remarks', 'stationID', 'waterTemp', 'specificConductance', 'startDate', 'endDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'dataQF', 'waterDepth', 'fulcrumVersion', 'platformInfo', 'pointNumber', 'coreLength', 'sedimentSampleBarcode', 'sedimentSampleFate', 'sedimentSampleID', 'zoneNumber'], 'in_subset': ['DP0.20194.001']}, 'asc_fieldDataZone_in': {'class_uri': 'neon:asc_fieldDataZone_in', 'slots': ['uid', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'stationID', 'startDate', 'endDate', 'habitatType', 'samplerType', 'dataQF', 'fulcrumVersion', 'platformInfo', 'downstreamCoordUncert', 'downstreamDecimalLatitude', 'downstreamDecimalLongitude', 'downstreamGeodeticDatum', 'pointSampleCount', 'sedimentSampleBarcode', 'sedimentSampleFate', 'sedimentSampleID', 'upstreamCoordUncert', 'upstreamDecimalLatitude', 'upstreamDecimalLongitude', 'upstreamGeodeticDatum', 'zoneNumber'], 'in_subset': []}, 'asc_fieldDataStation_in': {'class_uri': 'neon:asc_fieldDataStation_in', 'slots': ['uid', 'remarks', 'recordedBy', 'stationID', 'startDate', 'endDate', 'samplingProtocolVersion', 'collectedBy', 'dataQF', 'samplingImpractical', 'fulcrumVersion', 'platformInfo', 'carbonSedimentSampleFate', 'carbonSedimentSampleID', 'carbonSedSampleCode', 'inorganicSedimentSampleFate', 'inorganicSedimentSampleID', 'inorgSedimentSampleBarcode', 'organicSedimentSampleFate', 'organicSedimentSampleID', 'orgSedimentSampleBarcode', 'physicalSedimentSampleFate', 'physicalSedimentSampleID', 'physSedimentSampleBarcode', 'sedimentSampleBarcode', 'sedimentSampleFate', 'sedimentSampleID', 'zoneSampleCount'], 'in_subset': []}, 'asc_externalLabData_in': {'class_uri': 'neon:asc_externalLabData_in', 'slots': ['uid', 'sampleID', 'stationID', 'startDate', 'endDate', 'laboratoryName', 'internalLabID', 'analyte', 'method', 'methodDetectionLimit', 'analyteUnits', 'receivedDate', 'analysisDate', 'analyzedBy', 'primaryMatrix', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'batchID', 'analyticalRepNumber', 'runID', 'analyteConcentration', 'receivedCondition', 'analyteConcText', 'analyteSurrogate', 'cas', 'deptName', 'extendedQualifier1', 'extendedQualifier2', 'extendedQualifier3', 'extendedQualifier4', 'extendedQualifier5', 'externalQualifier', 'practicalQuantitationLimit', 'projectID'], 'in_subset': []}, 'asc_externalLabBatchQA_in': {'class_uri': 'neon:asc_externalLabBatchQA_in', 'slots': ['uid', 'laboratoryName', 'internalLabID', 'analyte', 'analyteUnits', 'analysisDate', 'analysisEndDate', 'batchID', 'analyteKnownValue', 'runID', 'qaType', 'analyteObservedValue', 'analyteSampleValue', 'analyteSurrogate', 'qaQF', 'reagentSN', 'recovery', 'recoveryLimitLower', 'recoveryLimitUpper', 'relativePercentDifference', 'relativePercentLimit'], 'in_subset': []}, 'asc_externalLabSummary_in': {'class_uri': 'neon:asc_externalLabSummary_in', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'method', 'methodDetectionLimit', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'primaryMatrix', 'dataQF', 'analytePercentRecovery', 'analytePercentSD', 'quantitationLimit'], 'in_subset': []}, 'asc_fieldDataPoint_pub': {'class_uri': 'neon:asc_fieldDataPoint_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'waterTemp', 'specificConductance', 'startDate', 'endDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'dataQF', 'namedLocation', 'waterDepth', 'pointNumber', 'coreLength', 'observations', 'sedimentSampleBarcode', 'sedimentSampleID', 'zoneNumber'], 'in_subset': ['DP1.20197.001']}, 'asc_fieldDataZone_pub': {'class_uri': 'neon:asc_fieldDataZone_pub', 'slots': ['uid', 'domainID', 'siteID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'startDate', 'endDate', 'habitatType', 'samplerType', 'dataQF', 'namedLocation', 'downstreamCoordUncert', 'downstreamDecimalLatitude', 'downstreamDecimalLongitude', 'downstreamGeodeticDatum', 'pointSampleCount', 'sedimentSampleBarcode', 'sedimentSampleID', 'upstreamCoordUncert', 'upstreamDecimalLatitude', 'upstreamDecimalLongitude', 'upstreamGeodeticDatum', 'zoneNumber'], 'in_subset': []}, 'asc_fieldDataStation_pub': {'class_uri': 'neon:asc_fieldDataStation_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'startDate', 'endDate', 'samplingProtocolVersion', 'collectedBy', 'dataQF', 'samplingImpractical', 'namedLocation', 'carbonSedimentSampleID', 'carbonSedSampleCode', 'inorganicSedimentSampleID', 'inorgSedimentSampleBarcode', 'organicSedimentSampleID', 'orgSedimentSampleBarcode', 'physicalSedimentSampleID', 'physSedimentSampleBarcode', 'sedimentSampleBarcode', 'sedimentSampleID', 'zoneSampleCount'], 'in_subset': []}, 'asp_externalLabData_pub': {'class_uri': 'neon:asp_externalLabData_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'method', 'methodDetectionLimit', 'analyteUnits', 'receivedDate', 'analysisDate', 'analyzedBy', 'primaryMatrix', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation', 'analyticalRepNumber', 'analyteConcentration', 'analyteSurrogate', 'cas', 'deptName', 'extendedQualifier1', 'extendedQualifier2', 'extendedQualifier3', 'extendedQualifier4', 'extendedQualifier5', 'externalQualifier', 'practicalQuantitationLimit'], 'in_subset': []}, 'asc_externalLabSummary_pub': {'class_uri': 'neon:asc_externalLabSummary_pub', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'method', 'methodDetectionLimit', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'primaryMatrix', 'dataQF', 'analytePercentRecovery', 'analytePercentSD', 'quantitationLimit'], 'in_subset': []}, 'mga_groupAbundances_in': {'class_uri': 'neon:mga_groupAbundances_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'sampleCondition', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'batchID', 'inhibitorRemovalRequired', 'nucleicAcidConcentration', 'reviewedBy', 'sampleMaterial', 'targetGene', 'targetTaxonGroup', 'qaqcStatus', 'copyNumberStandardDeviation', 'meanCopyNumber', 'meanCqValue', 'rep1CopyNumber', 'rep1CqValue', 'rep1MeltingTemperature', 'rep2CopyNumber', 'rep2CqValue', 'rep2MeltingTemperature', 'rep3CopyNumber', 'rep3CqValue', 'rep3MeltingTemperature', 'rep4CopyNumber', 'rep4CqValue', 'rep5CopyNumber', 'rep5CqValue', 'targetTaxonCode', 'targetTaxonFate', 'targetTaxonID'], 'in_subset': ['DP0.10109.001']}, 'mga_batchResults_in': {'class_uri': 'neon:mga_batchResults_in', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'dataQF', 'batchID', 'calCurveIntercept', 'calCurveRsquared', 'calCurveSlope', 'linearDynamicRangeLower', 'linearDynamicRangeUpper', 'lodCqVar', 'negControl1Result', 'negControl2Result', 'negControl3Result', 'negControl4Result', 'negControl5Result', 'noTemplateControlCq', 'pcrEfficiency', 'pcrEfficiencyConfInt', 'standardDescription'], 'in_subset': []}, 'mga_labSummary_in': {'class_uri': 'neon:mga_labSummary_in', 'slots': ['uid', 'recordedBy', 'startDate', 'endDate', 'laboratoryName', 'instrument', 'labSpecificStartDate', 'labSpecificEndDate', 'dataQF', 'ampliconLength', 'bufferComposition', 'bufferID', 'cqMethod', 'dNTPConcentration', 'forwardPrimer', 'detectionLimit', 'mgConcentration', 'multiplexStatus', 'polymeraseType', 'polymeraseUnitNumber', 'primerConcentration', 'primerSpecificity', 'probeConcentration', 'qPCRAnalysisProgram', 'qpcrDetectionMethod', 'qpcrMethod', 'reactionVolume', 'reversePrimer', 'targetTaxonGroup'], 'in_subset': []}, 'mmg_markerGeneSequencing_16S_in': {'class_uri': 'neon:mmg_markerGeneSequencing_16S_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'subsampleID', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'targetGene', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'subsampleCode', 'subsampleFate', 'instrument_model', 'ncbiProjectID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'processedSeqFileName', 'processedSeqFileNameCode', 'processedSeqFileNameFate', 'processedSeqFileNameID'], 'in_subset': ['DP0.10108.001']}, 'mmg_markerGeneSequencing_ITS_in': {'class_uri': 'neon:mmg_markerGeneSequencing_ITS_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'subsampleID', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'targetGene', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'subsampleCode', 'subsampleFate', 'instrument_model', 'ncbiProjectID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'processedSeqFileName', 'processedSeqFileNameCode', 'processedSeqFileNameFate', 'processedSeqFileNameID'], 'in_subset': []}, 'mmg_pcrAmplification_16S_in': {'class_uri': 'neon:mmg_pcrAmplification_16S_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'subsampleID', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'qaqcStatus', 'subsampleCode', 'subsampleFate', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment'], 'in_subset': []}, 'mmg_pcrAmplification_ITS_in': {'class_uri': 'neon:mmg_pcrAmplification_ITS_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'subsampleID', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'qaqcStatus', 'subsampleCode', 'subsampleFate', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment'], 'in_subset': []}, 'mmg_soilDnaExtraction_pub': {'class_uri': 'neon:mmg_soilDnaExtraction_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'nucleicAcidPurity', 'sequenceAnalysisType'], 'in_subset': ['DP1.10108.001']}, 'mmg_soilPcrAmplification_16S_pub': {'class_uri': 'neon:mmg_soilPcrAmplification_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment'], 'in_subset': []}, 'mmg_soilPcrAmplification_ITS_pub': {'class_uri': 'neon:mmg_soilPcrAmplification_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment'], 'in_subset': []}, 'mmg_soilMarkerGeneSequencing_16S_pub': {'class_uri': 'neon:mmg_soilMarkerGeneSequencing_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'processedSeqFileName'], 'in_subset': []}, 'mmg_soilMarkerGeneSequencing_ITS_pub': {'class_uri': 'neon:mmg_soilMarkerGeneSequencing_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'processedSeqFileName'], 'in_subset': []}, 'cfc_fieldData_in': {'class_uri': 'neon:cfc_fieldData_in', 'slots': ['uid', 'plotID', 'remarks', 'taxonID', 'tagID', 'recordedBy', 'individualID', 'sampleID', 'setDate', 'collectDate', 'sampleType', 'plantStatus', 'subplotID', 'clipID', 'bagCount', 'clipCellNumber', 'samplingProtocolVersion', 'collectedBy', 'sampleNumber', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'fulcrumVersion', 'platformInfo', 'clipLength', 'clipWidth', 'samplingMethod', 'individualCode', 'individualFate', 'vstTag', 'chlorophyllSampleCode', 'chlorophyllSampleFate', 'chlorophyllSampleID', 'percentCoverClip', 'subsample1Height', 'subsample2Height', 'subsample3Height', 'vd1BaseHeight', 'vd1Sample', 'vd2BaseHeight', 'vd2Sample', 'vd3BaseHeight', 'vd3Sample', 'toxicodendronPossible', 'chlorophyllSampleCondition'], 'in_subset': ['DP0.10026.001']}, 'cfc_LMA_in': {'class_uri': 'neon:cfc_LMA_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'sampleID', 'setDate', 'collectDate', 'dryMass', 'sampleFate', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'dryMassFraction', 'fulcrumVersion', 'platformInfo', 'freshMass', 'leafArea', 'leafMassPerArea', 'lmaSampleCode', 'lmaSampleCondition', 'lmaSampleFate', 'lmaSampleID', 'percentGreen', 'scanDate', 'scannedBy', 'scannedLeafNumber', 'weighedBy'], 'in_subset': []}, 'cfc_chemistrySubsampling_in': {'class_uri': 'neon:cfc_chemistrySubsampling_in', 'slots': ['uid', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'sampleFate', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'sampleCondition', 'cnSampleCode', 'cnSampleFate', 'cnSampleID', 'processedBy', 'archiveSampleFate', 'archiveSampleID', 'ligninSampleBarcode', 'ligninSampleFate', 'ligninSampleID', 'fulcrumVersion', 'platformInfo', 'archiveSampleCode', 'bgcArchive', 'toxicodendronPossible'], 'in_subset': []}, 'cfc_chlorophyll_in': {'class_uri': 'neon:cfc_chlorophyll_in', 'slots': ['uid', 'plotID', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'receivedDate', 'testMethod', 'analyzedBy', 'dataQF', 'sampleCondition', 'reviewedBy', 'freshMass', 'analyticalRepNumber', 'runID', 'measurementQF', 'extractionStartDate', 'receivedCondition', 'chlCarotWavelength1', 'chlCarotWavelength1Abs', 'chlCarotWavelength2', 'chlCarotWavelength2Abs', 'chlCarotWavelength3', 'chlCarotWavelength3Abs', 'chlCarotWavelength4', 'chlCarotWavelength4Abs', 'chlorophyllSampleCode', 'chlorophyllSampleFate', 'chlorophyllSampleID', 'dilutionFactor', 'extractCarotConc', 'extractChlAConc', 'extractChlBConc', 'extractionLength', 'handlingQF', 'relativeAccuracyScale', 'solventVolume'], 'in_subset': []}, 'cfc_elements_in': {'class_uri': 'neon:cfc_elements_in', 'slots': ['uid', 'plotID', 'remarks', 'setDate', 'collectDate', 'dryMass', 'laboratoryName', 'internalLabID', 'receivedDate', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'reviewedBy', 'ligninSampleBarcode', 'ligninSampleFate', 'ligninSampleID', 'analyticalRepNumber', 'runID', 'accuracyQF', 'measurementQF', 'digestBoronConc', 'digestCalciumConc', 'digestCopperConc', 'digestIronConc', 'digestMagnesiumConc', 'digestManganeseConc', 'digestPhosphorusConc', 'digestPotassiumConc', 'digestSulfurConc', 'digestVolume', 'digestZincConc', 'foliarBoronConc', 'foliarCalciumConc', 'foliarCopperConc', 'foliarIronConc', 'foliarMagnesiumConc', 'foliarManganeseConc', 'foliarPhosphorusConc', 'foliarPotassiumConc', 'foliarSulfurConc', 'foliarZincConc'], 'in_subset': []}, 'cfc_chlorophyllParameters_in': {'class_uri': 'neon:cfc_chlorophyllParameters_in', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'chlCarotEquationInput', 'chlCarotExtinctionCoefficient', 'ecReference'], 'in_subset': []}, 'cfc_chlorophyllBatchQA_in': {'class_uri': 'neon:cfc_chlorophyllBatchQA_in', 'slots': ['uid', 'remarks', 'laboratoryName', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'qaReferenceID', 'analysisEndDate', 'reviewedBy', 'analyticalRepNumber', 'runID', 'qaQF', 'extractCarotConc', 'extractChlAConc', 'extractChlBConc', 'standardChlAConc'], 'in_subset': []}, 'cfc_elementsBatchQA_in': {'class_uri': 'neon:cfc_elementsBatchQA_in', 'slots': ['uid', 'remarks', 'dryMass', 'laboratoryName', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'qaReferenceID', 'analysisEndDate', 'reviewedBy', 'analyticalRepNumber', 'runID', 'qaQF', 'digestVolume', 'foliarBoronConc', 'foliarCalciumConc', 'foliarCopperConc', 'foliarIronConc', 'foliarMagnesiumConc', 'foliarManganeseConc', 'foliarPhosphorusConc', 'foliarPotassiumConc', 'foliarSulfurConc', 'foliarZincConc', 'knownBoronConc', 'knownCalciumConc', 'knownCopperConc', 'knownIronConc', 'knownMagnesiumConc', 'knownManganeseConc', 'knownPhosphorusConc', 'knownPotassiumConc', 'knownSulfurConc', 'knownZincConc'], 'in_subset': []}, 'cfc_chlorophyllSummary_in': {'class_uri': 'neon:cfc_chlorophyllSummary_in', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analyteObservedValue', 'analyteAbsoluteError', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'cfc_elementsSummary_in': {'class_uri': 'neon:cfc_elementsSummary_in', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analytePercentRecovery', 'analyteObservedValue', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'bry_productivity_in': {'class_uri': 'neon:bry_productivity_in', 'slots': ['uid', 'plotID', 'measuredBy', 'recordedBy', 'eventID', 'sampleID', 'setDate', 'collectDate', 'targetTaxaPresent', 'subplotID', 'clipID', 'bagCount', 'weighDate', 'qaDryMass', 'dryMass', 'storageHours', 'samplingProtocolVersion', 'collectedBy', 'sampleFate', 'sampleCode', 'dataQF', 'totalSampledArea', 'setNetCount', 'sampledNetCount', 'missingNetCount', 'ovenStartDate', 'ovenEndDate', 'setBy', 'setRemarks', 'collectRemarks', 'weighRemarks', 'sampleCondition', 'growthInterval', 'bryType', 'fulcrumVersion', 'platformInfo'], 'in_subset': ['DP0.10035.001']}, 'bry_productivity_pub': {'class_uri': 'neon:bry_productivity_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'measuredBy', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'setDate', 'collectDate', 'targetTaxaPresent', 'subplotID', 'clipID', 'weighDate', 'qaDryMass', 'dryMass', 'storageHours', 'dryingHours', 'samplingProtocolVersion', 'collectedBy', 'sampleCode', 'dataQF', 'totalSampledArea', 'setNetCount', 'sampledNetCount', 'missingNetCount', 'setBy', 'setRemarks', 'collectRemarks', 'weighRemarks', 'sampleCondition', 'growthInterval', 'bryType', 'namedLocation'], 'in_subset': ['DP1.10035.001']}, 'fsh_BOLDvoucherInfo_pub': {'class_uri': 'neon:fsh_BOLDvoucherInfo_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'fieldID', 'namedLocation', 'collectionCode', 'institutionStoring', 'museumID'], 'in_subset': ['DP1.20105.001']}, 'fsh_BOLDtaxonomy_pub': {'class_uri': 'neon:fsh_BOLDtaxonomy_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'tribe', 'subspecies', 'namedLocation', 'identifier', 'identifierEmail', 'identifierInstitution', 'identificationMethod', 'species', 'taxonomyNotes'], 'in_subset': []}, 'fsh_BOLDspecimenDetails_pub': {'class_uri': 'neon:fsh_BOLDspecimenDetails_pub', 'slots': ['uid', 'sex', 'lifeStage', 'sampleID', 'setDate', 'collectDate', 'namedLocation', 'associatedSpecimens', 'associatedTaxa', 'externalURLs', 'reproduction', 'extraInfo', 'notes', 'tissueDescriptor', 'voucherStatus'], 'in_subset': []}, 'fsh_BOLDcollectionData_pub': {'class_uri': 'neon:fsh_BOLDcollectionData_pub', 'slots': ['uid', 'samplingProtocol', 'elevation', 'sampleID', 'setDate', 'collectDate', 'namedLocation', 'collectionDateAccuracy', 'collectionEventID', 'collectionNotes', 'collectors', 'coordinateAccuracy', 'countryOcean', 'depth', 'depthPrecision', 'elevationPrecision', 'eventTime', 'exactSite', 'gpsSource', 'habitat', 'latitude', 'longitude', 'region', 'sector', 'siteCode', 'stateProvince'], 'in_subset': []}, 'bat_fieldData_in': {'class_uri': 'neon:bat_fieldData_in', 'slots': ['uid', 'remarks', 'measuredBy', 'recordedBy', 'startDate', 'endDate', 'samplingProtocolVersion', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'sonarSystemModel'], 'in_subset': ['DP0.00132.001']}, 'bat_pointcollection_in': {'class_uri': 'neon:bat_pointcollection_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'locationID', 'samplerType', 'dataQF', 'waterDepth', 'fulcrumVersion', 'platformInfo', 'substrate', 'gpsDatafile', 'bathymetryDataType', 'gpsAntennaHeight', 'gpsUsed', 'photoID', 'plantsPresent', 'pointCollectionDate', 'uniqueID', 'waypoint', 'waypointDescription', 'gpsAccuracy', 'gpsAccuracyUnits', 'gpsAccuracyValue'], 'in_subset': []}, 'bat_sonarRecord_in': {'class_uri': 'neon:bat_sonarRecord_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'sonarRecordingNumber', 'sonarRecordingStartTime', 'sonarRecordingStopTime'], 'in_subset': []}, 'bat_resultsFile_in': {'class_uri': 'neon:bat_resultsFile_in', 'slots': ['uid', 'startDate', 'endDate', 'locationID', 'dataQF', 'rawDataFileName', 'rawDataFilePath', 'dataFileName', 'dataFilePath', 'sopVersion'], 'in_subset': []}, 'cdw_densitylog_in': {'class_uri': 'neon:cdw_densitylog_in', 'slots': ['uid', 'plotID', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'eventID', 'sampleID', 'collectDate', 'startDate', 'samplingProtocolVersion', 'sizeCategory', 'pointID', 'sampleFate', 'dataQF', 'sampleBarcode', 'vstTagID', 'branchBarkCover', 'branchesPresent', 'decayClass', 'leavesPresent', 'logBarkCover', 'logDistance', 'logHandBreakable', 'logHoldShape', 'logID', 'twigsPresent', 'yearBoutBegan', 'logAzimuth', 'mappingMethod', 'sampleEasting', 'sampleNorthing'], 'in_subset': ['DP0.10014.001']}, 'cdw_densitydisk_in': {'class_uri': 'neon:cdw_densitydisk_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'sampleID', 'collectDate', 'weighDate', 'dryMass', 'subsampleID', 'dryingHours', 'startDate', 'bulkDensVolume', 'sampleFate', 'dataQF', 'sampleBarcode', 'ovenStartDate', 'ovenEndDate', 'subsampleFreshMassRatio', 'subsampleCode', 'subsampleFate', 'aDiskHeight', 'bagNumber', 'bDiskHeight', 'bulkDensDisk', 'diameter', 'diskDryMass', 'diskFreshMass', 'diskID', 'maxDiskHeight', 'minDiskHeight', 'ninetyDiameter', 'sampleFreshMass', 'qaSample'], 'in_subset': []}, 'cdw_densitylog_pub': {'class_uri': 'neon:cdw_densitylog_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'eventID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'plotType', 'startDate', 'samplingProtocolVersion', 'sizeCategory', 'pointID', 'dataQF', 'sampleBarcode', 'namedLocation', 'vstTagID', 'branchBarkCover', 'branchesPresent', 'decayClass', 'leavesPresent', 'logBarkCover', 'logDistance', 'logHandBreakable', 'logHoldShape', 'logID', 'twigsPresent', 'yearBoutBegan', 'logAzimuth', 'mappingMethod', 'sampleEasting', 'sampleNorthing'], 'in_subset': ['DP1.10014.001']}, 'cdw_densitydisk_pub': {'class_uri': 'neon:cdw_densitydisk_pub', 'slots': ['uid', 'siteID', 'plotID', 'remarks', 'measuredBy', 'sampleID', 'collectDate', 'weighDate', 'dryMass', 'subsampleID', 'dryingHours', 'startDate', 'bulkDensVolume', 'dataQF', 'sampleBarcode', 'ovenStartDate', 'ovenEndDate', 'namedLocation', 'subsampleFreshMassRatio', 'subsampleCode', 'aDiskHeight', 'bagNumber', 'bDiskHeight', 'bulkDensDisk', 'diameter', 'diskDryMass', 'diskFreshMass', 'diskID', 'maxDiskHeight', 'minDiskHeight', 'ninetyDiameter', 'sampleFreshMass', 'qaSample'], 'in_subset': []}, 'bbc_rootStableIsotopes_pub': {'class_uri': 'neon:bbc_rootStableIsotopes_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'sampleType', 'plotType', 'laboratoryName', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'cnSampleCode', 'cnSampleID', 'reviewedBy', 'namedLocation', 'analyticalRepNumber', 'cnIsotopeQF', 'd13C', 'd15N', 'poolSampleCode', 'poolSampleID', 'isotopeAccuracyQF', 'co2Trapped'], 'in_subset': ['DP1.10099.001']}, 'bgc_CNiso_externalSummary_pub': {'class_uri': 'neon:bgc_CNiso_externalSummary_pub', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analyteObservedValue', 'analyteAbsoluteError', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'bgc_CNiso_externalAnalysis_in': {'class_uri': 'neon:bgc_CNiso_externalAnalysis_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'sampleType', 'laboratoryName', 'internalLabID', 'instrument', 'receivedDate', 'testMethod', 'locationID', 'analysisDate', 'analyzedBy', 'dataQF', 'cnSampleCode', 'cnSampleFate', 'cnSampleID', 'reviewedBy', 'acidTreatment', 'analyticalRepNumber', 'carbonPercent', 'cnIsotopeQF', 'cnPercentQF', 'CNratio', 'd13C', 'd15N', 'nitrogenPercent', 'runID', 'isotopeAccuracyQF', 'percentAccuracyQF', 'co2Trapped'], 'in_subset': ['DP0.10103.001']}, 'bgc_CNiso_externalBatchQA_in': {'class_uri': 'neon:bgc_CNiso_externalBatchQA_in', 'slots': ['uid', 'remarks', 'laboratoryName', 'internalLabID', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'qaReferenceID', 'analysisEndDate', 'reviewedBy', 'analyticalRepNumber', 'carbonPercent', 'cnIsotopeQF', 'cnPercentQF', 'CNratio', 'd13C', 'd15N', 'nitrogenPercent', 'runID', 'isotopeAccuracyQF', 'percentAccuracyQF'], 'in_subset': []}, 'bgc_CNiso_externalSummary_in': {'class_uri': 'neon:bgc_CNiso_externalSummary_in', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analyteObservedValue', 'analyteAbsoluteError', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'cfc_foliarStableIsotopes_pub': {'class_uri': 'neon:cfc_foliarStableIsotopes_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'sampleType', 'plotType', 'laboratoryName', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'sampleCode', 'dataQF', 'cnSampleCode', 'cnSampleID', 'reviewedBy', 'namedLocation', 'analyticalRepNumber', 'cnIsotopeQF', 'd13C', 'd15N', 'isotopeAccuracyQF'], 'in_subset': ['DP1.10053.001']}, 'ltr_litterStableIsotopes_pub': {'class_uri': 'neon:ltr_litterStableIsotopes_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'sampleType', 'plotType', 'laboratoryName', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'cnSampleCode', 'cnSampleID', 'reviewedBy', 'massSampleMixtureBarcode', 'massSampleMixtureID', 'namedLocation', 'analyticalRepNumber', 'cnIsotopeQF', 'd13C', 'd15N', 'isotopeAccuracyQF', 'co2Trapped'], 'in_subset': ['DP1.10101.001']}, 'sls_soilStableIsotopes_pub': {'class_uri': 'neon:sls_soilStableIsotopes_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'sampleType', 'plotType', 'laboratoryName', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'sampleCode', 'dataQF', 'cnSampleCode', 'cnSampleID', 'reviewedBy', 'namedLocation', 'acidTreatment', 'analyticalRepNumber', 'cnIsotopeQF', 'd15N', 'isotopeAccuracyQF', 'organicd13C'], 'in_subset': ['DP1.10100.001']}, 'bbc_rootChemistry_pub': {'class_uri': 'neon:bbc_rootChemistry_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'sampleType', 'plotType', 'laboratoryName', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'cnSampleCode', 'cnSampleID', 'reviewedBy', 'namedLocation', 'analyticalRepNumber', 'carbonPercent', 'cnPercentQF', 'CNratio', 'nitrogenPercent', 'poolSampleCode', 'poolSampleID', 'percentAccuracyQF', 'co2Trapped'], 'in_subset': ['DP1.10102.001']}, 'sls_soilChemistry_pub': {'class_uri': 'neon:sls_soilChemistry_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'sampleType', 'plotType', 'laboratoryName', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'sampleCode', 'dataQF', 'cnSampleCode', 'cnSampleID', 'reviewedBy', 'namedLocation', 'acidTreatment', 'analyticalRepNumber', 'cnPercentQF', 'CNratio', 'nitrogenPercent', 'percentAccuracyQF', 'organicCPercent'], 'in_subset': ['DP1.10078.001']}, 'ltr_litterCarbonNitrogen_pub': {'class_uri': 'neon:ltr_litterCarbonNitrogen_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'sampleType', 'plotType', 'laboratoryName', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'cnSampleCode', 'cnSampleID', 'reviewedBy', 'massSampleMixtureBarcode', 'massSampleMixtureID', 'namedLocation', 'analyticalRepNumber', 'carbonPercent', 'cnPercentQF', 'CNratio', 'nitrogenPercent', 'percentAccuracyQF', 'co2Trapped'], 'in_subset': ['DP1.10031.001']}, 'ltr_litterLignin_pub': {'class_uri': 'neon:ltr_litterLignin_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'dryMass', 'plotType', 'laboratoryName', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'reviewedBy', 'ligninSampleBarcode', 'ligninSampleID', 'massSampleMixtureBarcode', 'massSampleMixtureID', 'namedLocation', 'analyticalRepNumber', 'accuracyQF', 'cellulosePercent', 'ligninPercent', 'measurementQF'], 'in_subset': []}, 'lig_externalSummary_pub': {'class_uri': 'neon:lig_externalSummary_pub', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analytePercentRecovery', 'analyteObservedValue', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'cfc_fieldData_pub': {'class_uri': 'neon:cfc_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'taxonID', 'tagID', 'recordedBy', 'individualID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'sampleID', 'setDate', 'collectDate', 'sampleType', 'plantStatus', 'subplotID', 'clipID', 'plotType', 'clipCellNumber', 'samplingProtocolVersion', 'collectedBy', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation', 'clipLength', 'clipWidth', 'samplingMethod', 'individualCode', 'vstTag', 'chlorophyllSampleCode', 'chlorophyllSampleID', 'percentCoverClip', 'subsample1Height', 'subsample2Height', 'subsample3Height', 'toxicodendronPossible', 'chlorophyllSampleCondition'], 'in_subset': ['DP1.10026.001']}, 'cfc_LMA_pub': {'class_uri': 'neon:cfc_LMA_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'measuredBy', 'sampleID', 'setDate', 'collectDate', 'dryMass', 'plotType', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'namedLocation', 'dryMassFraction', 'freshMass', 'leafArea', 'leafMassPerArea', 'lmaSampleCode', 'lmaSampleCondition', 'lmaSampleID', 'percentGreen', 'scanDate', 'scannedBy', 'scannedLeafNumber', 'weighedBy'], 'in_subset': []}, 'cfc_chemistrySubsampling_pub': {'class_uri': 'neon:cfc_chemistrySubsampling_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'plotType', 'sampleCode', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'sampleCondition', 'cnSampleCode', 'cnSampleID', 'processedBy', 'archiveSampleID', 'ligninSampleBarcode', 'ligninSampleID', 'namedLocation', 'archiveSampleCode', 'toxicodendronPossible'], 'in_subset': []}, 'cfc_chlorophyll_pub': {'class_uri': 'neon:cfc_chlorophyll_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'plotType', 'laboratoryName', 'receivedDate', 'testMethod', 'analyzedBy', 'sampleCode', 'dataQF', 'sampleCondition', 'reviewedBy', 'namedLocation', 'freshMass', 'analyticalRepNumber', 'measurementQF', 'extractionStartDate', 'receivedCondition', 'chlCarotWavelength1', 'chlCarotWavelength1Abs', 'chlCarotWavelength2', 'chlCarotWavelength2Abs', 'chlCarotWavelength3', 'chlCarotWavelength3Abs', 'chlCarotWavelength4', 'chlCarotWavelength4Abs', 'chlorophyllSampleCode', 'chlorophyllSampleID', 'dilutionFactor', 'extractCarotConc', 'extractChlAConc', 'extractChlBConc', 'extractionLength', 'handlingQF', 'relativeAccuracyScale', 'solventVolume'], 'in_subset': []}, 'cfc_carbonNitrogen_pub': {'class_uri': 'neon:cfc_carbonNitrogen_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'sampleType', 'plotType', 'laboratoryName', 'instrument', 'testMethod', 'analysisDate', 'analyzedBy', 'sampleCode', 'dataQF', 'cnSampleCode', 'cnSampleID', 'reviewedBy', 'namedLocation', 'analyticalRepNumber', 'carbonPercent', 'cnPercentQF', 'CNratio', 'nitrogenPercent', 'percentAccuracyQF'], 'in_subset': []}, 'cfc_elements_pub': {'class_uri': 'neon:cfc_elements_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'dryMass', 'plotType', 'laboratoryName', 'testMethod', 'analysisDate', 'analyzedBy', 'sampleCode', 'dataQF', 'reviewedBy', 'ligninSampleBarcode', 'ligninSampleID', 'namedLocation', 'analyticalRepNumber', 'accuracyQF', 'measurementQF', 'digestBoronConc', 'digestCalciumConc', 'digestCopperConc', 'digestIronConc', 'digestMagnesiumConc', 'digestManganeseConc', 'digestPhosphorusConc', 'digestPotassiumConc', 'digestSulfurConc', 'digestVolume', 'digestZincConc', 'foliarBoronConc', 'foliarCalciumConc', 'foliarCopperConc', 'foliarIronConc', 'foliarMagnesiumConc', 'foliarManganeseConc', 'foliarPhosphorusConc', 'foliarPotassiumConc', 'foliarSulfurConc', 'foliarZincConc'], 'in_subset': []}, 'cfc_lignin_pub': {'class_uri': 'neon:cfc_lignin_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'sampleID', 'setDate', 'collectDate', 'dryMass', 'plotType', 'laboratoryName', 'testMethod', 'analysisDate', 'analyzedBy', 'sampleCode', 'dataQF', 'reviewedBy', 'ligninSampleBarcode', 'ligninSampleID', 'namedLocation', 'analyticalRepNumber', 'accuracyQF', 'cellulosePercent', 'ligninPercent', 'measurementQF'], 'in_subset': []}, 'cfc_chlorophyllParameters_pub': {'class_uri': 'neon:cfc_chlorophyllParameters_pub', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'chlCarotEquationInput', 'chlCarotExtinctionCoefficient', 'ecReference'], 'in_subset': []}, 'cfc_chlorophyllSummary_pub': {'class_uri': 'neon:cfc_chlorophyllSummary_pub', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analyteObservedValue', 'analyteAbsoluteError', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'cfc_elementsSummary_pub': {'class_uri': 'neon:cfc_elementsSummary_pub', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analytePercentRecovery', 'analyteObservedValue', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'mga_benthicGroupAbundances_pub': {'class_uri': 'neon:mga_benthicGroupAbundances_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'sampleCondition', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'batchID', 'inhibitorRemovalRequired', 'nucleicAcidConcentration', 'reviewedBy', 'sampleMaterial', 'targetGene', 'targetTaxonGroup', 'namedLocation', 'copyNumberStandardDeviation', 'meanCopyNumber', 'meanCqValue'], 'in_subset': ['DP1.20277.001']}, 'mga_batchResults_pub': {'class_uri': 'neon:mga_batchResults_pub', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'dataQF', 'batchID', 'calCurveIntercept', 'calCurveRsquared', 'calCurveSlope', 'linearDynamicRangeLower', 'linearDynamicRangeUpper', 'lodCqVar', 'negControl1Result', 'negControl2Result', 'negControl3Result', 'negControl4Result', 'negControl5Result', 'noTemplateControlCq', 'pcrEfficiency', 'pcrEfficiencyConfInt', 'standardDescription'], 'in_subset': []}, 'mga_labSummary_pub': {'class_uri': 'neon:mga_labSummary_pub', 'slots': ['uid', 'recordedBy', 'startDate', 'endDate', 'laboratoryName', 'instrument', 'labSpecificStartDate', 'labSpecificEndDate', 'dataQF', 'ampliconLength', 'bufferComposition', 'bufferID', 'cqMethod', 'dNTPConcentration', 'forwardPrimer', 'detectionLimit', 'mgConcentration', 'multiplexStatus', 'polymeraseType', 'polymeraseUnitNumber', 'primerConcentration', 'primerSpecificity', 'probeConcentration', 'qPCRAnalysisProgram', 'qpcrDetectionMethod', 'qpcrMethod', 'reactionVolume', 'reversePrimer', 'targetTaxonGroup'], 'in_subset': []}, 'mga_swGroupAbundances_pub': {'class_uri': 'neon:mga_swGroupAbundances_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'sampleCondition', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'batchID', 'inhibitorRemovalRequired', 'nucleicAcidConcentration', 'reviewedBy', 'sampleMaterial', 'targetGene', 'targetTaxonGroup', 'namedLocation', 'copyNumberStandardDeviation', 'meanCopyNumber', 'meanCqValue'], 'in_subset': ['DP1.20278.001']}, 'mcc_taxonTableMetadata_16S_in': {'class_uri': 'neon:mcc_taxonTableMetadata_16S_in', 'slots': ['uid', 'remarks', 'scientificName', 'setDate', 'collectDate', 'individualCount', 'subsampleID', 'laboratoryName', 'internalLabID', 'testMethod', 'locationID', 'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'specificEpithet', 'analysisDate', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'reviewedBy', 'sampleMaterial', 'targetGene', 'targetTaxonGroup', 'subsampleCode', 'subsampleFate', 'downloadFileName', 'completeTaxonomy', 'dnaSampleCodeDataFrame', 'dnaSampleIDDataFrame', 'domain', 'downloadFileUrl', 'communitySubsampleCode', 'communitySubsampleFate', 'communitySubsampleID'], 'in_subset': ['DP0.10081.001']}, 'mcc_taxonTableLabSummary_in': {'class_uri': 'neon:mcc_taxonTableLabSummary_in', 'slots': ['uid', 'remarks', 'recordedBy', 'startDate', 'endDate', 'laboratoryName', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'targetTaxonGroup', 'alignmentMethod', 'analysisCodeFileName', 'analysisProgram', 'analysisProgramVersion', 'chimeraMethod', 'clusterMethod', 'clusterSimilarity', 'referenceDatabase', 'referenceDatabaseVersion', 'sequenceMatchMethod', 'sequenceMatchThresholdValue', 'sequenceMatchValueDescription'], 'in_subset': []}, 'mcc_taxonTableMetadata_ITS_in': {'class_uri': 'neon:mcc_taxonTableMetadata_ITS_in', 'slots': ['uid', 'remarks', 'scientificName', 'setDate', 'collectDate', 'individualCount', 'subsampleID', 'laboratoryName', 'internalLabID', 'testMethod', 'locationID', 'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'specificEpithet', 'analysisDate', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'reviewedBy', 'sampleMaterial', 'targetGene', 'targetTaxonGroup', 'subsampleCode', 'subsampleFate', 'downloadFileName', 'completeTaxonomy', 'dnaSampleCodeDataFrame', 'dnaSampleIDDataFrame', 'domain', 'downloadFileUrl', 'communitySubsampleCode', 'communitySubsampleFate', 'communitySubsampleID'], 'in_subset': []}, 'mcc_soilTaxonTableMetadata_16S_pub': {'class_uri': 'neon:mcc_soilTaxonTableMetadata_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'analysisDate', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'reviewedBy', 'sampleMaterial', 'targetTaxonGroup', 'namedLocation', 'downloadFileName', 'downloadFileUrl'], 'in_subset': ['DP1.10081.001']}, 'mcc_soilTaxonTableMetadata_ITS_pub': {'class_uri': 'neon:mcc_soilTaxonTableMetadata_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'analysisDate', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'reviewedBy', 'sampleMaterial', 'targetTaxonGroup', 'namedLocation', 'downloadFileName', 'downloadFileUrl'], 'in_subset': []}, 'mcc_taxonTableLabSummary_pub': {'class_uri': 'neon:mcc_taxonTableLabSummary_pub', 'slots': ['uid', 'remarks', 'recordedBy', 'startDate', 'endDate', 'laboratoryName', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'targetTaxonGroup', 'alignmentMethod', 'analysisCodeFileName', 'analysisProgram', 'analysisProgramVersion', 'chimeraMethod', 'clusterMethod', 'clusterSimilarity', 'referenceDatabase', 'referenceDatabaseVersion', 'sequenceMatchMethod', 'sequenceMatchThresholdValue', 'sequenceMatchValueDescription'], 'in_subset': []}, 'mga_soilGroupAbundances_pub': {'class_uri': 'neon:mga_soilGroupAbundances_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'sampleCondition', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'batchID', 'inhibitorRemovalRequired', 'nucleicAcidConcentration', 'reviewedBy', 'sampleMaterial', 'targetGene', 'targetTaxonGroup', 'namedLocation', 'copyNumberStandardDeviation', 'meanCopyNumber', 'meanCqValue'], 'in_subset': ['DP1.10109.001']}, 'mga_soilBatchResults_pub': {'class_uri': 'neon:mga_soilBatchResults_pub', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'batchID'], 'in_subset': []}, 'mga_soilLabSummary_pub': {'class_uri': 'neon:mga_soilLabSummary_pub', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'labSpecificStartDate', 'labSpecificEndDate', 'targetTaxonGroup'], 'in_subset': []}, 'geo_mappedPointErrors_pub': {'class_uri': 'neon:geo_mappedPointErrors_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'pointID', 'dataQF', 'namedLocation', 'deletePoint', 'errorDescription', 'errorDescriptionRemarks'], 'in_subset': ['DP4.00131.001']}, 'geo_pebbleCount_pub': {'class_uri': 'neon:geo_pebbleCount_pub', 'slots': ['uid', 'domainID', 'siteID', 'eventID', 'startDate', 'endDate', 'habitatType', 'dataQF', 'measurementLocation', 'namedLocation', 'pebbleCountNumber', 'pebbleSize', 'totalStationLocation'], 'in_subset': []}, 'geo_featureInfo_pub': {'class_uri': 'neon:geo_featureInfo_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'bankfullDepth', 'bankfullWidth', 'featureID', 'featureType', 'floodproneHeight', 'pebbleCountsCollected', 'staffGaugeInstalled', 'staffGaugeMark', 'totalStationLocation', 'upsDwnsHabitatType'], 'in_subset': []}, 'geo_totalStation_pub': {'class_uri': 'neon:geo_totalStation_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'featuresSurveyed', 'featuresSurveyedOther', 'firstControlPointID', 'firstControlPointType', 'firstThalwegPoint', 'firstThalwegPointName', 'lastThalwegPoint', 'lastThalwegPointName', 'secondControlPointID', 'secondControlPointType', 'stDevH', 'stDevHADegrees', 'stDevHAMinutes', 'stDevHASeconds', 'stDevPos', 'thirdControlPointID', 'thirdControlPointType', 'totalStationLocation'], 'in_subset': []}, 'geo_missingLine_pub': {'class_uri': 'neon:geo_missingLine_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'attemptNumber', 'missingLinePoint1', 'missingLinePoint2', 'missingLineResultsdH', 'missingLineResultsHD', 'missingLineReultsStDev'], 'in_subset': []}, 'geo_surveyFieldData_pub': {'class_uri': 'neon:geo_surveyFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'measuredBy', 'recordedBy', 'geodeticDatum', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation', 'missingLineWorkflow', 'pebbleCountD16', 'pebbleCountD5', 'pebbleCountD50', 'pebbleCountD84', 'totalLWDCount'], 'in_subset': []}, 'geo_resultsFile_pub': {'class_uri': 'neon:geo_resultsFile_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'dataQF', 'namedLocation', 'rawDataFileName', 'rawDataFilePath', 'dataFileName', 'dataFilePath', 'sopVersion'], 'in_subset': []}, 'geo_controlInfo_pub': {'class_uri': 'neon:geo_controlInfo_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'controlActivationState', 'controlNumber', 'segmentNumber'], 'in_subset': []}, 'geo_priorParameters_pub': {'class_uri': 'neon:geo_priorParameters_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'controlNumber', 'priorActivationStage', 'priorActivationStageUnc', 'priorCoefficient', 'priorCoefficientUnc', 'priorExponent', 'priorExponentUnc'], 'in_subset': []}, 'geo_controlType_pub': {'class_uri': 'neon:geo_controlType_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'channelSlope', 'channelSlopeUnc', 'controlNumber', 'hydraulicControlType', 'manningCoefficient', 'manningCoefficientUnc', 'orificeArea', 'orificeAreaUnc', 'parabolaHeight', 'parabolaHeightUnc', 'parabolaWidth', 'parabolaWidthUnc', 'rectangularWidth', 'rectangularWidthUnc', 'stricklerCoefficient', 'stricklerCoefficientUnc', 'triangularAngle', 'triangularAngleUnc'], 'in_subset': []}, 'geo_mappedPointErrors_in': {'class_uri': 'neon:geo_mappedPointErrors_in', 'slots': ['uid', 'startDate', 'endDate', 'locationID', 'pointID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'deletePoint', 'errorDescription', 'errorDescriptionRemarks'], 'in_subset': ['DP0.00131.001']}, 'geo_pebbleCount_in': {'class_uri': 'neon:geo_pebbleCount_in', 'slots': ['uid', 'eventID', 'startDate', 'endDate', 'habitatType', 'locationID', 'dataQF', 'measurementLocation', 'fulcrumVersion', 'platformInfo', 'pebbleCountNumber', 'pebbleSize', 'totalStationLocation'], 'in_subset': []}, 'geo_featureInfo_in': {'class_uri': 'neon:geo_featureInfo_in', 'slots': ['uid', 'startDate', 'endDate', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'bankfullDepth', 'bankfullWidth', 'featureID', 'featureType', 'floodproneHeight', 'pebbleCountsCollected', 'staffGaugeInstalled', 'staffGaugeMark', 'totalStationLocation', 'upsDwnsHabitatType'], 'in_subset': []}, 'geo_totalStation_in': {'class_uri': 'neon:geo_totalStation_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'featuresSurveyed', 'featuresSurveyedOther', 'firstControlPointID', 'firstControlPointType', 'firstThalwegPoint', 'firstThalwegPointName', 'lastThalwegPoint', 'lastThalwegPointName', 'secondControlPointID', 'secondControlPointType', 'stDevH', 'stDevHADegrees', 'stDevHAMinutes', 'stDevHASeconds', 'stDevPos', 'thirdControlPointID', 'thirdControlPointType', 'totalStationLocation'], 'in_subset': []}, 'geo_missingLine_in': {'class_uri': 'neon:geo_missingLine_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'attemptNumber', 'missingLinePoint1', 'missingLinePoint2', 'missingLineResultsdH', 'missingLineResultsHD', 'missingLineReultsStDev'], 'in_subset': []}, 'geo_surveyFieldData_in': {'class_uri': 'neon:geo_surveyFieldData_in', 'slots': ['uid', 'remarks', 'measuredBy', 'recordedBy', 'startDate', 'endDate', 'samplingProtocolVersion', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'missingLineWorkflow', 'pebbleCountD16', 'pebbleCountD5', 'pebbleCountD50', 'pebbleCountD84', 'totalLWDCount'], 'in_subset': []}, 'geo_resultsFile_in': {'class_uri': 'neon:geo_resultsFile_in', 'slots': ['uid', 'startDate', 'endDate', 'locationID', 'dataQF', 'rawDataFileName', 'rawDataFilePath', 'dataFileName', 'dataFilePath', 'sopVersion'], 'in_subset': []}, 'geo_controlInfo_in': {'class_uri': 'neon:geo_controlInfo_in', 'slots': ['uid', 'startDate', 'endDate', 'locationID', 'dataQF', 'controlActivationState', 'controlNumber', 'segmentNumber'], 'in_subset': []}, 'geo_priorParameters_in': {'class_uri': 'neon:geo_priorParameters_in', 'slots': ['uid', 'startDate', 'endDate', 'locationID', 'dataQF', 'controlNumber', 'priorActivationStage', 'priorActivationStageUnc', 'priorCoefficient', 'priorCoefficientUnc', 'priorExponent', 'priorExponentUnc'], 'in_subset': []}, 'geo_controlType_in': {'class_uri': 'neon:geo_controlType_in', 'slots': ['uid', 'startDate', 'endDate', 'locationID', 'dataQF', 'channelSlope', 'channelSlopeUnc', 'controlNumber', 'hydraulicControlType', 'manningCoefficient', 'manningCoefficientUnc', 'orificeArea', 'orificeAreaUnc', 'parabolaHeight', 'parabolaHeightUnc', 'parabolaWidth', 'parabolaWidthUnc', 'rectangularWidth', 'rectangularWidthUnc', 'stricklerCoefficient', 'stricklerCoefficientUnc', 'triangularAngle', 'triangularAngleUnc'], 'in_subset': []}, 'sdrc_gaugeDischargeMeas_pub': {'class_uri': 'neon:sdrc_gaugeDischargeMeas_pub', 'slots': ['uid', 'domainID', 'siteID', 'eventID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'gaugeHeight', 'gaugeHeightOffset', 'gaugeHeightUnc', 'includedInRatingCurve', 'L1DataQF', 'recalculatedL1QF', 'streamDischarge', 'streamDischargeUnc'], 'in_subset': ['DP4.00133.001']}, 'sdrc_posteriorParameters_pub': {'class_uri': 'neon:sdrc_posteriorParameters_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'curveID', 'controlNumber', 'maxPostActivationStage', 'maxPostCoefficient', 'maxPostExponent', 'maxPostGamma1', 'maxPostGamma2', 'maxPostZeroFlowOffset', 'stdDevActivationStage', 'stdDevCoefficient', 'stdDevExponent', 'stdDevGamma1', 'stdDevGamma2', 'stdDevZeroFlowOffset', 'curveEndDate', 'curveStartDate'], 'in_subset': []}, 'sdrc_stageDischargeCurveInfo_pub': {'class_uri': 'neon:sdrc_stageDischargeCurveInfo_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'curveID', 'allEventID', 'maxQ', 'maxStage', 'minQ', 'minStage', 'waterYear', 'curveEndDate', 'curveStartDate'], 'in_subset': []}, 'sdrc_sampledParameters_pub': {'class_uri': 'neon:sdrc_sampledParameters_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'curveID', 'controlNumber', 'spagActivationStage', 'spagCoefficient', 'spagExponent', 'spagGamma1', 'spagGamma2', 'spagLogPost', 'spagZeroFlowOffset', 'curveEndDate', 'curveStartDate', 'parameterNumber'], 'in_subset': []}, 'sdrc_resultsResiduals_pub': {'class_uri': 'neon:sdrc_resultsResiduals_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'curveID', 'gaugeEventID', 'X1observed', 'X1true', 'Y1observed', 'Y1residual', 'Y1simulated', 'Y1stdresidual', 'Y1unbiased', 'curveEndDate', 'curveStartDate'], 'in_subset': []}, 'zoo_dnaExtraction_in': {'class_uri': 'neon:zoo_dnaExtraction_in', 'slots': ['uid', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testProtocolVersion', 'locationID', 'dataQF', 'geneticSampleID', 'sampleCondition', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'geneticSampleCode', 'geneticSampleFate', 'nucleicAcidConcentration', 'sampleMaterial', 'sampleMass', 'samplePercent', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'nucleicAcidPurity'], 'in_subset': ['DP0.20221.001']}, 'zoo_markerGeneSequencing_in': {'class_uri': 'neon:zoo_markerGeneSequencing_in', 'slots': ['uid', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'replicate', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'primerSetID', 'processedSeqFileName'], 'in_subset': []}, 'zoo_pcrAmplification_in': {'class_uri': 'neon:zoo_pcrAmplification_in', 'slots': ['uid', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'qaqcStatus', 'replicate', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment', 'primerSetID'], 'in_subset': []}, 'zoo_rawDataFiles_in': {'class_uri': 'neon:zoo_rawDataFiles_in', 'slots': ['uid', 'remarks', 'processedDate', 'startDate', 'endDate', 'laboratoryName', 'internalLabID', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription', 'parentFolderName'], 'in_subset': []}, 'inv_dnaExtraction_in': {'class_uri': 'neon:inv_dnaExtraction_in', 'slots': ['uid', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testProtocolVersion', 'locationID', 'dataQF', 'geneticSampleID', 'sampleCondition', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'geneticSampleCode', 'geneticSampleFate', 'nucleicAcidConcentration', 'sampleMaterial', 'sampleMass', 'samplePercent', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'nucleicAcidPurity', 'standardCreationLocation'], 'in_subset': ['DP0.20126.001']}, 'inv_markerGeneSequencing_in': {'class_uri': 'neon:inv_markerGeneSequencing_in', 'slots': ['uid', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'replicate', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'primerSetID', 'processedSeqFileName'], 'in_subset': []}, 'inv_pcrAmplification_in': {'class_uri': 'neon:inv_pcrAmplification_in', 'slots': ['uid', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'qaqcStatus', 'replicate', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment', 'primerSetID'], 'in_subset': []}, 'inv_rawDataFiles_in': {'class_uri': 'neon:inv_rawDataFiles_in', 'slots': ['uid', 'remarks', 'processedDate', 'startDate', 'endDate', 'laboratoryName', 'internalLabID', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription', 'parentFolderName'], 'in_subset': []}, 'amb_fieldParent_in': {'class_uri': 'neon:amb_fieldParent_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'sampleID', 'collectDate', 'startDate', 'samplingProtocolVersion', 'archiveID', 'collectedBy', 'habitatType', 'locationID', 'sampleNumber', 'substratumSizeClass', 'sampleFate', 'sampleCode', 'dataQF', 'geneticSampleID', 'aquaticSiteType', 'fieldSampleVolume', 'geneticSampleCode', 'geneticSampleFate', 'samplingImpractical', 'sampleMaterial', 'archiveSampleFate', 'fulcrumVersion', 'platformInfo', 'archiveFilteredSampleVolume', 'archiveSampleCode', 'geneticFilteredSampleVolume', 'aquMicrobeType', 'aquMicrobeScrubArea', 'labSampleMedium'], 'in_subset': ['DP0.20086.001']}, 'amb_fieldParent_pub': {'class_uri': 'neon:amb_fieldParent_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'collectDate', 'startDate', 'samplingProtocolVersion', 'archiveID', 'collectedBy', 'habitatType', 'sampleNumber', 'substratumSizeClass', 'sampleCode', 'dataQF', 'geneticSampleID', 'aquaticSiteType', 'fieldSampleVolume', 'geneticSampleCode', 'samplingImpractical', 'sampleMaterial', 'namedLocation', 'archiveFilteredSampleVolume', 'archiveSampleCode', 'geneticFilteredSampleVolume', 'aquMicrobeType', 'aquMicrobeScrubArea', 'labSampleMedium'], 'in_subset': ['DP1.20280.001', 'DP1.20279.001']}, 'mmg_benthicDnaExtraction_pub': {'class_uri': 'neon:mmg_benthicDnaExtraction_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'samplePercent', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'nucleicAcidPurity'], 'in_subset': []}, 'mmg_benthicPcrAmplification_16S_pub': {'class_uri': 'neon:mmg_benthicPcrAmplification_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment'], 'in_subset': []}, 'mmg_benthicPcrAmplification_ITS_pub': {'class_uri': 'neon:mmg_benthicPcrAmplification_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment'], 'in_subset': []}, 'mmg_benthicMarkerGeneSequencing_16S_pub': {'class_uri': 'neon:mmg_benthicMarkerGeneSequencing_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'processedSeqFileName'], 'in_subset': []}, 'mmg_benthicMarkerGeneSequencing_ITS_pub': {'class_uri': 'neon:mmg_benthicMarkerGeneSequencing_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'processedSeqFileName'], 'in_subset': []}, 'amc_fieldSuperParent_pub': {'class_uri': 'neon:amc_fieldSuperParent_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'waterTemp', 'specificConductance', 'aCollectedBy', 'bCollectedBy', 'altLocation', 'altLongitude', 'altLatitude', 'maxDepth', 'upperSegmentDepth', 'lowerSegmentDepth', 'startDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'samplerType', 'parentSampleID', 'lakeSampleDepth1', 'lakeSampleDepth2', 'aquaticSiteType', 'parentSampleCode', 'fieldDataQF', 'samplingImpractical', 'namedLocation', 'additionalCoordUncertainty', 'altCoordinateUncertainty', 'altGeodeticDatum', 'amcSamplingProtocolVersion'], 'in_subset': ['DP1.20282.001']}, 'amc_fieldGenetic_pub': {'class_uri': 'neon:amc_fieldGenetic_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'archiveID', 'parentSampleID', 'dataQF', 'geneticSampleID', 'parentSampleCode', 'geneticSampleCode', 'sampleMaterial', 'namedLocation', 'archiveFilteredSampleVolume', 'archiveSampleCode', 'archiveSampleCond', 'geneticFilteredSampleVolume', 'geneticSampleCond'], 'in_subset': []}, 'mmg_swDnaExtraction_pub': {'class_uri': 'neon:mmg_swDnaExtraction_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'samplePercent', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'nucleicAcidPurity'], 'in_subset': []}, 'mmg_swPcrAmplification_16S_pub': {'class_uri': 'neon:mmg_swPcrAmplification_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment'], 'in_subset': []}, 'mmg_swPcrAmplification_ITS_pub': {'class_uri': 'neon:mmg_swPcrAmplification_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment'], 'in_subset': []}, 'mmg_swMarkerGeneSequencing_16S_pub': {'class_uri': 'neon:mmg_swMarkerGeneSequencing_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'processedSeqFileName'], 'in_subset': []}, 'mmg_swMarkerGeneSequencing_ITS_pub': {'class_uri': 'neon:mmg_swMarkerGeneSequencing_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'processedSeqFileName'], 'in_subset': []}, 'mam_BOLDvoucherInfo_pub': {'class_uri': 'neon:mam_BOLDvoucherInfo_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'fieldID', 'namedLocation', 'collectionCode', 'institutionStoring', 'museumID'], 'in_subset': ['DP1.10076.001']}, 'mam_BOLDtaxonomy_pub': {'class_uri': 'neon:mam_BOLDtaxonomy_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'tribe', 'subspecies', 'namedLocation', 'identifier', 'identifierEmail', 'identifierInstitution', 'identificationMethod', 'species', 'taxonomyNotes'], 'in_subset': []}, 'mam_BOLDspecimenDetails_pub': {'class_uri': 'neon:mam_BOLDspecimenDetails_pub', 'slots': ['uid', 'sex', 'lifeStage', 'sampleID', 'setDate', 'collectDate', 'namedLocation', 'associatedSpecimens', 'associatedTaxa', 'externalURLs', 'reproduction', 'extraInfo', 'notes', 'tissueDescriptor', 'voucherStatus'], 'in_subset': []}, 'mam_BOLDcollectionData_pub': {'class_uri': 'neon:mam_BOLDcollectionData_pub', 'slots': ['uid', 'samplingProtocol', 'elevation', 'sampleID', 'setDate', 'collectDate', 'namedLocation', 'collectionDateAccuracy', 'collectionEventID', 'collectionNotes', 'collectors', 'coordinateAccuracy', 'countryOcean', 'depth', 'depthPrecision', 'elevationPrecision', 'eventTime', 'exactSite', 'gpsSource', 'habitat', 'latitude', 'longitude', 'region', 'sector', 'siteCode', 'stateProvince'], 'in_subset': []}, 'zoo_fieldData_pub': {'class_uri': 'neon:zoo_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'samplerType', 'sampleCode', 'dataQF', 'geneticSampleID', 'towsTrapsNumber', 'aquaticSiteType', 'zooDepth1', 'zooDepth2', 'zooDepth3', 'geneticSampleCode', 'samplingImpractical', 'namedLocation', 'additionalCoordUncertainty', 'towsTrapsVolume'], 'in_subset': ['DP1.20219.001', 'DP1.20221.001']}, 'zoo_taxonomyRaw_pub': {'class_uri': 'neon:zoo_taxonomyRaw_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'individualCount', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'subsampleType', 'startDate', 'laboratoryName', 'internalLabName', 'identificationRemarks', 'testProtocolVersion', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'taxonDatabaseName', 'taxonDatabaseID', 'distinctTaxon', 'qcChecked', 'indeterminateSpecies', 'notSubsampled', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'subkingdom', 'infrakingdom', 'superclass', 'subspecies', 'sampleCode', 'dataQF', 'sampleCondition', 'nauplii', 'zooMinimumLength', 'zooMaximumLength', 'zooMeanLength', 'zooWidth', 'zooSubsampleVolume', 'superphylum', 'infraphylum', 'namedLocation', 'adjCountPerBottle', 'zooVolumePerBottle', 'qcEnumerationDifference', 'qcTaxonomicDifference'], 'in_subset': []}, 'zoo_taxonomyProcessed_pub': {'class_uri': 'neon:zoo_taxonomyProcessed_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'individualCount', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'subsampleType', 'startDate', 'laboratoryName', 'internalLabName', 'identificationRemarks', 'testProtocolVersion', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'distinctTaxon', 'qcChecked', 'indeterminateSpecies', 'notSubsampled', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'subkingdom', 'infrakingdom', 'superclass', 'subspecies', 'sampleCode', 'dataQF', 'sampleCondition', 'nauplii', 'zooMinimumLength', 'zooMaximumLength', 'zooMeanLength', 'zooWidth', 'zooSubsampleVolume', 'superphylum', 'infraphylum', 'namedLocation', 'adjCountPerBottle', 'zooVolumePerBottle', 'qcEnumerationDifference', 'qcTaxonomicDifference'], 'in_subset': []}, 'zoo_perVial_pub': {'class_uri': 'neon:zoo_perVial_pub', 'slots': ['uid', 'domainID', 'siteID', 'scientificName', 'sampleID', 'collectDate', 'morphospeciesID', 'startDate', 'laboratoryName', 'referenceCount', 'referenceID', 'sampleCode', 'dataQF', 'referenceCode', 'namedLocation'], 'in_subset': []}, 'zoo_dnaExtraction_pub': {'class_uri': 'neon:zoo_dnaExtraction_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'sampleCondition', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'nucleicAcidPurity', 'standardCreationLocation'], 'in_subset': []}, 'zoo_pcrAmplification_pub': {'class_uri': 'neon:zoo_pcrAmplification_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'replicate', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment', 'primerSetID'], 'in_subset': []}, 'zoo_markerGeneSequencing_pub': {'class_uri': 'neon:zoo_markerGeneSequencing_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'replicate', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'primerSetID', 'processedSeqFileName'], 'in_subset': []}, 'inv_fieldData_pub': {'class_uri': 'neon:inv_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'habitatType', 'benthicArea', 'samplerType', 'substratumSizeClass', 'ponarDepth', 'snagLength', 'snagDiameter', 'sampleCode', 'dataQF', 'geneticSampleID', 'aquaticSiteType', 'geneticSampleCode', 'samplingImpractical', 'namedLocation', 'dnaSnagDiameter', 'dnaSnagLength'], 'in_subset': ['DP1.20126.001', 'DP1.20120.001']}, 'inv_dnaExtraction_pub': {'class_uri': 'neon:inv_dnaExtraction_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'sampleCondition', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'nucleicAcidPurity'], 'in_subset': []}, 'inv_pcrAmplification_pub': {'class_uri': 'neon:inv_pcrAmplification_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'replicate', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment', 'primerSetID'], 'in_subset': []}, 'inv_markerGeneSequencing_pub': {'class_uri': 'neon:inv_markerGeneSequencing_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'replicate', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'primerSetID', 'processedSeqFileName'], 'in_subset': []}, 'inv_fielddata_in': {'class_uri': 'neon:inv_fielddata_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'sampleID', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'habitatType', 'locationID', 'benthicArea', 'samplerType', 'sampleNumber', 'substratumSizeClass', 'ponarDepth', 'snagLength', 'snagDiameter', 'sampleFate', 'sampleCode', 'dataQF', 'geneticSampleID', 'aquaticSiteType', 'geneticSampleCode', 'geneticSampleFate', 'samplingImpractical', 'fulcrumVersion', 'platformInfo', 'dnaSnagDiameter', 'dnaSnagLength'], 'in_subset': ['DP0.20120.001']}, 'inv_persample_in': {'class_uri': 'neon:inv_persample_in', 'slots': ['uid', 'sampleID', 'collectDate', 'startDate', 'laboratoryName', 'internalLabID', 'sortDate', 'sortedBy', 'testProtocolVersion', 'locationID', 'subsamplePercent', 'qcSortDate', 'primaryMatrix', 'preRinseVolume', 'postRinseVolume', 'qcSortedBy', 'qcPercentSimilarity', 'benchRemarks', 'qcSortingEfficacy', 'qcIterationCount', 'sampleFate', 'sampleCode', 'dataQF', 'qcEnumerationDifference', 'qcTaxonomicDifference', 'chironomidVialCode', 'chironomidVialFate', 'chironomidVialID', 'oligochaeteVialCode', 'oligochaeteVialFate', 'oligochaeteVialID'], 'in_subset': []}, 'inv_pertaxon_in': {'class_uri': 'neon:inv_pertaxon_in', 'slots': ['uid', 'identificationReferences', 'identificationQualifier', 'scientificName', 'sampleID', 'collectDate', 'targetTaxaPresent', 'individualCount', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'startDate', 'laboratoryName', 'internalLabID', 'identificationRemarks', 'locationID', 'slideID', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'taxonDatabaseName', 'taxonDatabaseID', 'subsamplePercent', 'invertebrateLifeStage', 'sizeClass', 'immatureSpecimen', 'distinctTaxon', 'qcChecked', 'indeterminateSpecies', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'estimatedTotalCount', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'slideCode', 'slideFate'], 'in_subset': []}, 'inv_pervial_in': {'class_uri': 'neon:inv_pervial_in', 'slots': ['uid', 'scientificName', 'sampleID', 'morphospeciesID', 'startDate', 'endDate', 'laboratoryName', 'locationID', 'slideID', 'referenceCount', 'referenceID', 'sampleFate', 'sampleCode', 'dataQF', 'slideCode', 'referenceFate', 'referenceCode', 'slideFate'], 'in_subset': []}, 'sme_microbialBiomass_in': {'class_uri': 'neon:sme_microbialBiomass_in', 'slots': ['uid', 'plotID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'biomassCode', 'biomassFate', 'biomassID', 'processedBy', 'batchID', 'reviewedBy', 'freshMass', 'lipid2OH10To0Concentration', 'lipid2OH12To0Concentration', 'lipid2OH14To0Concentration', 'lipid2OH16To0Concentration', 'lipid3OH12To0Concentration', 'lipid3OH14To0Concentration', 'aC15To0Concentration', 'c10To0Concentration', 'c11To0Concentration', 'c12To0Concentration', 'c13To0Concentration', 'c14To0Concentration', 'c14To1Concentration', 'c15To0Concentration', 'c15To1Concentration', 'c16To0Concentration', 'c17To0Concentration', 'c17To1Concentration', 'c18To0Concentration', 'c18To1n11Concentration', 'c18To3n3Concentration', 'c18To3n6Concentration', 'c19To0Concentration', 'c20To0Concentration', 'c20To1Concentration', 'c20To2Concentration', 'c20To3n3Concentration', 'c20To3n6Concentration', 'c20To4n6Concentration', 'c20To5n3Concentration', 'c21To0Concentration', 'c22To0Concentration', 'c22To1n9Concentration', 'c22To2Concentration', 'c23To0Concentration', 'c24To0Concentration', 'c24To1Concentration', 'c8To0Concentration', 'cis16To1n9Concentration', 'cis18To1n9Concentration', 'cis18To2n912Concentration', 'cyclo17To0Concentration', 'cyclo19To0Concentration', 'extractionEfficiency', 'freezeDryMass', 'i15To0Concentration', 'i16To0Concentration', 'i17To0Concentration', 'trans18To1n9Concentration', 'trans18To2n912Concentration', 'totalLipidConcentration', 'c16To1Cis11Concentration', 'c17To0AnteisoConcentration', 'c19To1Cis10Concentration', 'c22To6CisConcentration', 'i14To0Concentration', 'lipid10Methyl16To0Concentration', 'lipid10Methyl17To0Concentration', 'lipid10Methyl18To0Concentration', 'extractEffStdConc', 'analysisResultsQF'], 'in_subset': ['DP0.10104.001']}, 'sme_batchResults_in': {'class_uri': 'neon:sme_batchResults_in', 'slots': ['uid', 'processedDate', 'startDate', 'endDate', 'laboratoryName', 'analyteUnits', 'dataQF', 'batchID', 'analyteKnownValue', 'analyteObservedValue', 'analysisStandardID', 'lipidID', 'lotNumber', 'extractEffStdID', 'extractEffStdUnits', 'analyteStandardQF'], 'in_subset': []}, 'sme_labSummary_in': {'class_uri': 'neon:sme_labSummary_in', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'instrument', 'labSpecificStartDate', 'labSpecificEndDate', 'testProtocolVersion', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'reviewedBy', 'analyteKnownValue', 'analysisStandardID', 'lipidID', 'analyteAccuracyUnits', 'analyteKnownValueUnits', 'analyteStandardDeviationUnits'], 'in_subset': []}, 'mms_benthicMetagenomeDnaExtraction_pub': {'class_uri': 'neon:mms_benthicMetagenomeDnaExtraction_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testMethod', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'samplePercent', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'genomicsSampleCode', 'genomicsSampleID', 'nucleicAcidPurity', 'sequenceAnalysisType'], 'in_subset': []}, 'mms_benthicMetagenomeSequencing_pub': {'class_uri': 'neon:mms_benthicMetagenomeSequencing_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'analyzedBy', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencingMethod', 'investigation_type', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'sequencingProtocol', 'labPrepMethod', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'processedSeqFileName'], 'in_subset': []}, 'mms_swMetagenomeDnaExtraction_pub': {'class_uri': 'neon:mms_swMetagenomeDnaExtraction_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testMethod', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'samplePercent', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'genomicsSampleCode', 'genomicsSampleID', 'nucleicAcidPurity', 'sequenceAnalysisType'], 'in_subset': ['DP1.20281.001']}, 'mms_swMetagenomeSequencing_pub': {'class_uri': 'neon:mms_swMetagenomeSequencing_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'analyzedBy', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencingMethod', 'investigation_type', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'sequencingProtocol', 'labPrepMethod', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'processedSeqFileName'], 'in_subset': []}, 'sme_microbialBiomass_pub': {'class_uri': 'neon:sme_microbialBiomass_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'sampleID', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'sampleCode', 'dataQF', 'biomassCode', 'biomassID', 'processedBy', 'batchID', 'reviewedBy', 'namedLocation', 'freshMass', 'lipid2OH10To0Concentration', 'lipid2OH12To0Concentration', 'lipid2OH14To0Concentration', 'lipid2OH16To0Concentration', 'lipid3OH12To0Concentration', 'lipid3OH14To0Concentration', 'aC15To0Concentration', 'c10To0Concentration', 'c11To0Concentration', 'c12To0Concentration', 'c13To0Concentration', 'c14To0Concentration', 'c14To1Concentration', 'c15To0Concentration', 'c15To1Concentration', 'c16To0Concentration', 'c17To0Concentration', 'c17To1Concentration', 'c18To0Concentration', 'c18To1n11Concentration', 'c18To3n3Concentration', 'c18To3n6Concentration', 'c19To0Concentration', 'c20To0Concentration', 'c20To1Concentration', 'c20To2Concentration', 'c20To3n3Concentration', 'c20To3n6Concentration', 'c20To4n6Concentration', 'c20To5n3Concentration', 'c21To0Concentration', 'c22To0Concentration', 'c22To1n9Concentration', 'c22To2Concentration', 'c23To0Concentration', 'c24To0Concentration', 'c24To1Concentration', 'c8To0Concentration', 'cis16To1n9Concentration', 'cis18To1n9Concentration', 'cis18To2n912Concentration', 'cyclo17To0Concentration', 'cyclo19To0Concentration', 'extractionEfficiency', 'freezeDryMass', 'i15To0Concentration', 'i16To0Concentration', 'i17To0Concentration', 'trans18To1n9Concentration', 'trans18To2n912Concentration', 'totalLipidConcentration', 'c16To1Cis11Concentration', 'c17To0AnteisoConcentration', 'c19To1Cis10Concentration', 'c22To6CisConcentration', 'i14To0Concentration', 'lipid10Methyl16To0Concentration', 'lipid10Methyl17To0Concentration', 'lipid10Methyl18To0Concentration', 'extractEffStdConc', 'analysisResultsQF'], 'in_subset': ['DP1.10104.001']}, 'sme_batchResults_pub': {'class_uri': 'neon:sme_batchResults_pub', 'slots': ['uid', 'processedDate', 'startDate', 'endDate', 'laboratoryName', 'analyteUnits', 'dataQF', 'batchID', 'namedLocation', 'analyteKnownValue', 'analyteObservedValue', 'analysisStandardID', 'lipidID', 'lotNumber', 'extractEffStdID', 'extractEffStdUnits', 'analyteStandardQF'], 'in_subset': []}, 'sme_labSummary_pub': {'class_uri': 'neon:sme_labSummary_pub', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'instrument', 'labSpecificStartDate', 'labSpecificEndDate', 'testProtocolVersion', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'reviewedBy', 'analyteKnownValue', 'analysisStandardID', 'lipidID'], 'in_subset': []}, 'mcc_benthicTaxonTableMetadata_16S_pub': {'class_uri': 'neon:mcc_benthicTaxonTableMetadata_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'analysisDate', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'reviewedBy', 'sampleMaterial', 'targetTaxonGroup', 'namedLocation', 'downloadFileName', 'downloadFileUrl'], 'in_subset': ['DP1.20086.001']}, 'mcc_benthicTaxonTableMetadata_ITS_pub': {'class_uri': 'neon:mcc_benthicTaxonTableMetadata_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'analysisDate', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'reviewedBy', 'sampleMaterial', 'targetTaxonGroup', 'namedLocation', 'downloadFileName', 'downloadFileUrl'], 'in_subset': []}, 'mcc_swTaxonTableMetadata_16S_pub': {'class_uri': 'neon:mcc_swTaxonTableMetadata_16S_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'analysisDate', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'reviewedBy', 'sampleMaterial', 'targetTaxonGroup', 'namedLocation', 'downloadFileName', 'downloadFileUrl'], 'in_subset': ['DP1.20141.001']}, 'mcc_swTaxonTableMetadata_ITS_pub': {'class_uri': 'neon:mcc_swTaxonTableMetadata_ITS_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'analysisDate', 'dataQF', 'geneticSampleID', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'processedBy', 'reviewedBy', 'sampleMaterial', 'targetTaxonGroup', 'namedLocation', 'downloadFileName', 'downloadFileUrl'], 'in_subset': []}, 'dsc_fieldData_in': {'class_uri': 'neon:dsc_fieldData_in', 'slots': ['uid', 'siteID', 'samplingProtocol', 'collectDate', 'stationID', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'streamStage', 'handheldDeviceID', 'velocitySensorID', 'filterParamTime', 'stationEntryTest', 'waterEdge', 'totalDischarge', 'totalDischargeUnits', 'dataQF', 'averageVelocityUnits', 'averageVelocityUnitsQF', 'dischargeUnitsQF', 'flowCalcQF', 'flowCalculation', 'lowVelocityFinalQF', 'recorduid', 'streamStageUnits', 'streamStageUnitsQF', 'tapeDistanceUnits', 'tapeDistanceUnitsQF', 'waterDepthUnits', 'waterDepthUnitsQF'], 'in_subset': ['DP0.20048.001']}, 'dsc_individualFieldData_in': {'class_uri': 'neon:dsc_individualFieldData_in', 'slots': ['uid', 'siteID', 'collectDate', 'stationID', 'startDate', 'collectedBy', 'dataQF', 'averageVelocity', 'bedVelocity', 'edgeFactor', 'fourFifthDepthVelocity', 'lowVelocityQF', 'oneFifthDepthVelocity', 'recorduid', 'sectionArea', 'sectionFlow', 'stationNumber', 'streamProfilingMethod', 'surfaceVelocity', 'tapeDistance', 'threeFifthDepthVelocity', 'twoFifthDepthVelocity', 'waterDepth'], 'in_subset': []}, 'dsc_fieldDataADCP_in': {'class_uri': 'neon:dsc_fieldDataADCP_in', 'slots': ['uid', 'samplingProtocol', 'stationID', 'aCollectedBy', 'bCollectedBy', 'maxDepth', 'startDate', 'endDate', 'streamStage', 'totalDischarge', 'totalDischargeUnits', 'dataQF', 'streamStageUnits', 'rawDataFileName', 'rawDataFilePath', 'adcpCompassCalibrated', 'adcpCompassError', 'loopMBT', 'magneticVariation', 'riverDepthMean', 'riverDischargeMeasDuration', 'riverVelocityMaximum', 'riverWidthMean', 'stationaryMBT', 'totalDischargeRU', 'velocityUnits', 'waterTemperature', 'widthUnits', 'windDirRelativeToFlow', 'windSpeedPrior', 'estimated95percentUC', 'timeZone'], 'in_subset': []}, 'dsc_fieldData_pub': {'class_uri': 'neon:dsc_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'samplingProtocol', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'streamStage', 'handheldDeviceID', 'velocitySensorID', 'filterParamTime', 'stationEntryTest', 'waterEdge', 'totalDischarge', 'totalDischargeUnits', 'dataQF', 'namedLocation', 'averageVelocityUnits', 'averageVelocityUnitsQF', 'dischargeUnitsQF', 'flowCalcQF', 'flowCalculation', 'lowVelocityFinalQF', 'recorduid', 'streamStageUnits', 'streamStageUnitsQF', 'tapeDistanceUnits', 'tapeDistanceUnitsQF', 'waterDepthUnits', 'waterDepthUnitsQF'], 'in_subset': ['DP1.20048.001']}, 'dsc_individualFieldData_pub': {'class_uri': 'neon:dsc_individualFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'collectedBy', 'dataQF', 'namedLocation', 'averageVelocity', 'bedVelocity', 'edgeFactor', 'fourFifthDepthVelocity', 'lowVelocityQF', 'oneFifthDepthVelocity', 'recorduid', 'sectionArea', 'sectionFlow', 'stationNumber', 'streamProfilingMethod', 'surfaceVelocity', 'tapeDistance', 'threeFifthDepthVelocity', 'twoFifthDepthVelocity', 'waterDepth'], 'in_subset': []}, 'dsc_fieldDataADCP_pub': {'class_uri': 'neon:dsc_fieldDataADCP_pub', 'slots': ['uid', 'domainID', 'samplingProtocol', 'stationID', 'aCollectedBy', 'bCollectedBy', 'maxDepth', 'startDate', 'endDate', 'streamStage', 'totalDischarge', 'totalDischargeUnits', 'dataQF', 'namedLocation', 'streamStageUnits', 'rawDataFileName', 'adcpCompassCalibrated', 'adcpCompassError', 'loopMBT', 'magneticVariation', 'riverDepthMean', 'riverDischargeMeasDuration', 'riverVelocityMaximum', 'riverWidthMean', 'stationaryMBT', 'totalDischargeRU', 'velocityUnits', 'waterTemperature', 'widthUnits', 'windDirRelativeToFlow', 'windSpeedPrior'], 'in_subset': []}, 'gwc_fieldSuperParent_pub': {'class_uri': 'neon:gwc_fieldSuperParent_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'waterTemp', 'specificConductance', 'aCollectedBy', 'bCollectedBy', 'altLocation', 'altLongitude', 'altLatitude', 'maxDepth', 'upperSegmentDepth', 'lowerSegmentDepth', 'startDate', 'waterColorDescrip', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'pH', 'wellWaterDepth', 'sampleDepth', 'sampleExtractionMethod', 'wellVolumePurged', 'samplerType', 'parentSampleID', 'lakeSampleDepth1', 'lakeSampleDepth2', 'sdgSamplingProtocolVersion', 'asiSamplingProtocolVersion', 'aquaticSiteType', 'parentSampleCode', 'fieldDataQF', 'samplingImpractical', 'namedLocation', 'waterClarityDescrip', 'altCoordinateUncertainty', 'altGeodeticDatum', 'amcSamplingProtocolVersion', 'swcSamplingProtocolVersion', 'adequateSampleVol'], 'in_subset': ['DP1.20092.001']}, 'gwc_fieldData_pub': {'class_uri': 'neon:gwc_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'collectDate', 'processedDate', 'sampleVolumeFiltered', 'startDate', 'parentSampleID', 'processedDateFilters', 'sampleCode', 'parentSampleCode', 'sampleCondition', 'fieldDataQF', 'replicateNumber', 'namedLocation', 'gwwAlkSampleBubbleFree', 'gwwAlkSampleHeadspace', 'gwwFiltBubbleFree', 'gwwFiltSampleHeadspace'], 'in_subset': []}, 'gwc_domainLabData_pub': {'class_uri': 'neon:gwc_domainLabData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'measuredBy', 'collectDate', 'sampleType', 'titrationLocation', 'initialSamplepH', 'initialSampleTemp', 'normality', 'sampleVolume', 'methodType', 'titrationDate', 'startDate', 'alkMeqPerL', 'alkMgPerL', 'ancMeqPerL', 'ancMgPerL', 'domainSampleID', 'parentSampleID', 'dataQF', 'parentSampleCode', 'namedLocation', 'domainSampleCode', 'titrationDataString'], 'in_subset': []}, 'gwc_externalLabData_pub': {'class_uri': 'neon:gwc_externalLabData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'sampleID', 'collectDate', 'startDate', 'laboratoryName', 'pH', 'externalConductance', 'waterCarbonate', 'waterBicarbonate', 'externalANC', 'waterCalcium', 'waterMagnesium', 'waterSodium', 'waterPotassium', 'waterSulfate', 'waterChlorine', 'waterManganese', 'waterIron', 'waterBromine', 'waterFluorine', 'waterSilica', 'totalSuspendedSolids', 'totalSuspendedSolidsDryMass', 'totalDissolvedSolids', 'waterNitrateAndNitriteN', 'waterNitriteN', 'waterAmmoniumN', 'waterOrthophosphateP', 'waterTotalNitrogen', 'totalDissolvedNitrogen', 'dissolvedInorganicCarbon', 'dissolvedOrganicCarbon', 'waterTotalOrganicCarbon', 'waterTotalPhosphorus', 'totalDissolvedPhosphorus', 'totalParticulateCarbonMass', 'totalParticulateNitrogenMass', 'uvAbsorbance250', 'uvAbsorbance284', 'coolerTemp', 'receivedBy', 'shipmentCondition', 'shipmentWarmQF', 'shipmentLateQF', 'sampleCode', 'sampleCondition', 'externalLabDataQF', 'namedLocation'], 'in_subset': []}, 'swc_externalLabSummaryData_pub': {'class_uri': 'neon:swc_externalLabSummaryData_pub', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'methodModification', 'methodDetectionLimit', 'analyteUnits', 'precision', 'measurementUncertainty', 'internalLabName', 'labSpecificStartDate', 'labSpecificEndDate', 'absorbancePrecision', 'measurementUncertaintyUnits', 'precisionRepeatabilityUnits'], 'in_subset': []}, 'swc_fieldSuperParent_pub': {'class_uri': 'neon:swc_fieldSuperParent_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'waterTemp', 'specificConductance', 'aCollectedBy', 'bCollectedBy', 'altLocation', 'altLongitude', 'altLatitude', 'maxDepth', 'upperSegmentDepth', 'lowerSegmentDepth', 'startDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'wellWaterDepth', 'sampleDepth', 'sampleExtractionMethod', 'wellVolumePurged', 'samplerType', 'parentSampleID', 'lakeSampleDepth1', 'lakeSampleDepth2', 'sdgSamplingProtocolVersion', 'asiSamplingProtocolVersion', 'aquaticSiteType', 'parentSampleCode', 'fieldDataQF', 'samplingImpractical', 'namedLocation', 'additionalCoordUncertainty', 'altCoordinateUncertainty', 'altGeodeticDatum', 'amcSamplingProtocolVersion', 'swcSamplingProtocolVersion'], 'in_subset': ['DP1.20093.001']}, 'swc_fieldData_pub': {'class_uri': 'neon:swc_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'collectDate', 'processedDate', 'sampleVolumeFiltered', 'startDate', 'parentSampleID', 'processedDateFilters', 'sampleCode', 'parentSampleCode', 'sampleCondition', 'fieldDataQF', 'replicateNumber', 'namedLocation'], 'in_subset': []}, 'swc_domainLabData_pub': {'class_uri': 'neon:swc_domainLabData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'measuredBy', 'collectDate', 'sampleType', 'titrationLocation', 'initialSamplepH', 'initialSampleTemp', 'normality', 'sampleVolume', 'methodType', 'titrationDate', 'startDate', 'alkMeqPerL', 'alkMgPerL', 'ancMeqPerL', 'ancMgPerL', 'domainSampleID', 'parentSampleID', 'dataQF', 'parentSampleCode', 'namedLocation', 'domainSampleCode', 'titrationDataString'], 'in_subset': []}, 'swc_externalLabData_pub': {'class_uri': 'neon:swc_externalLabData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'sampleID', 'collectDate', 'startDate', 'laboratoryName', 'pH', 'externalConductance', 'waterCarbonate', 'waterBicarbonate', 'externalANC', 'waterCalcium', 'waterMagnesium', 'waterSodium', 'waterPotassium', 'waterSulfate', 'waterChlorine', 'waterManganese', 'waterIron', 'waterBromine', 'waterFluorine', 'waterSilica', 'totalSuspendedSolids', 'totalSuspendedSolidsDryMass', 'totalDissolvedSolids', 'waterNitrateAndNitriteN', 'waterNitriteN', 'waterAmmoniumN', 'waterOrthophosphateP', 'waterTotalNitrogen', 'totalDissolvedNitrogen', 'dissolvedInorganicCarbon', 'dissolvedOrganicCarbon', 'waterTotalOrganicCarbon', 'waterTotalPhosphorus', 'totalDissolvedPhosphorus', 'totalParticulateCarbonMass', 'totalParticulateNitrogenMass', 'uvAbsorbance250', 'uvAbsorbance284', 'coolerTemp', 'receivedBy', 'shipmentCondition', 'shipmentWarmQF', 'shipmentLateQF', 'sampleCode', 'sampleCondition', 'externalLabDataQF', 'namedLocation'], 'in_subset': []}, 'ptx_taxonomy_in': {'class_uri': 'neon:ptx_taxonomy_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'identificationQualifier', 'scientificName', 'sampleID', 'collectDate', 'targetTaxaPresent', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'stationID', 'startDate', 'laboratoryName', 'internalLabID', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'slideID', 'algalParameter', 'algalParameterValue', 'algalParameterUnit', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'tribe', 'variety', 'taxonDatabaseName', 'taxonDatabaseID', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'subspecies', 'subvariety', 'subform', 'form', 'speciesGroup', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'slideCode', 'slideFate', 'perBottleSampleVolume'], 'in_subset': ['DP0.20064.001']}, 'ptx_qualityCheck_in': {'class_uri': 'neon:ptx_qualityCheck_in', 'slots': ['uid', 'remarks', 'scientificName', 'sampleID', 'collectDate', 'individualCount', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'stationID', 'startDate', 'laboratoryName', 'qcPercentSimilarity', 'sampleFate', 'sampleCode', 'dataQF', 'taxonAbbreviation', 'enumerationDifference', 'qcIdentifiedBy', 'qcIndividualCount'], 'in_subset': []}, 'bat_fieldData_pub': {'class_uri': 'neon:bat_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'measuredBy', 'recordedBy', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation', 'sonarSystemModel'], 'in_subset': ['DP4.00132.001']}, 'bat_pointcollection_pub': {'class_uri': 'neon:bat_pointcollection_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'startDate', 'endDate', 'samplerType', 'dataQF', 'namedLocation', 'waterDepth', 'substrate', 'gpsDatafile', 'bathymetryDataType', 'gpsAntennaHeight', 'gpsUsed', 'plantsPresent', 'pointCollectionDate', 'waypoint', 'waypointDescription', 'gpsAccuracy', 'gpsAccuracyUnits', 'gpsAccuracyValue'], 'in_subset': []}, 'bat_sonarRecord_pub': {'class_uri': 'neon:bat_sonarRecord_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'sonarRecordingNumber', 'sonarRecordingStartTime', 'sonarRecordingStopTime'], 'in_subset': []}, 'bat_resultsFile_pub': {'class_uri': 'neon:bat_resultsFile_pub', 'slots': ['uid', 'domainID', 'siteID', 'startDate', 'endDate', 'locationID', 'dataQF', 'dataFileName', 'dataFilePath', 'sopVersion'], 'in_subset': []}, 'div_1m2Data_in': {'class_uri': 'neon:div_1m2Data_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'enteredBy', 'boutNumber', 'targetTaxaPresent', 'acceptedTaxonID', 'morphospeciesID', 'percentCover', 'subplotID', 'divDataType', 'otherVariablesPresent', 'taxonIDRemarks', 'otherVariables', 'heightPlantOver300cm', 'heightPlantSpecies', 'morphospeciesIDRemarks', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'fulcrumVersion', 'platformInfo'], 'in_subset': ['DP0.10004.001']}, 'div_10m2Data100m2Data_in': {'class_uri': 'neon:div_10m2Data100m2Data_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'enteredBy', 'boutNumber', 'targetTaxaPresent', 'acceptedTaxonID', 'morphospeciesID', 'subplotID', 'taxonIDRemarks', 'morphospeciesIDRemarks', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'fulcrumVersion', 'platformInfo', 'additionalSpecies'], 'in_subset': []}, 'div_morphospecies_in': {'class_uri': 'neon:div_morphospecies_in', 'slots': ['uid', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'dataQF', 'fulcrumVersion', 'platformInfo', 'morphospeciesCreatedDate', 'morphospeciesResolved', 'morphospeciesResolvedDate'], 'in_subset': []}, 'div_voucher_in': {'class_uri': 'neon:div_voucher_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'voucherSampleID', 'recordedBy', 'morphospeciesID', 'identifiedBy', 'taxonIDRemarks', 'morphospeciesIDRemarks', 'altLongitude', 'altLatitude', 'startDate', 'endDate', 'collectedBy', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'altCoordinateUncertainty', 'altGeodeticDatum', 'associatedTaxa', 'voucherSampleFate', 'altCoordinateSource', 'altElevation', 'altElevationUncertainty', 'habitatDescription', 'tagCode', 'voucherSampleCode', 'tagFate', 'untaggedPlantID', 'plantDescription', 'voucherLifeStage', 'voucherLocality'], 'in_subset': []}, 'div_geneticarchive_in': {'class_uri': 'neon:div_geneticarchive_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'recordedBy', 'sampleType', 'morphospeciesID', 'identifiedBy', 'taxonIDRemarks', 'morphospeciesIDRemarks', 'altLongitude', 'altLatitude', 'startDate', 'endDate', 'collectedBy', 'locationID', 'dataQF', 'geneticSampleID', 'sampleClass', 'geneticSampleCode', 'geneticSampleFate', 'fulcrumVersion', 'platformInfo', 'altCoordinateUncertainty', 'altGeodeticDatum', 'altCoordinateSource', 'altElevation', 'altElevationUncertainty', 'tagCode', 'plantCondition', 'tagFate', 'untaggedPlantID'], 'in_subset': []}, 'div_1m2Data_pub': {'class_uri': 'neon:div_1m2Data_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'boutNumber', 'targetTaxaPresent', 'morphospeciesID', 'percentCover', 'subplotID', 'divDataType', 'otherVariablesPresent', 'taxonIDRemarks', 'otherVariables', 'heightPlantOver300cm', 'heightPlantSpecies', 'morphospeciesIDRemarks', 'startDate', 'endDate', 'samplingProtocolVersion', 'family', 'dataQF', 'namedLocation', 'nativeStatusCode'], 'in_subset': ['DP1.10058.001']}, 'div_10m2Data100m2Data_pub': {'class_uri': 'neon:div_10m2Data100m2Data_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'boutNumber', 'targetTaxaPresent', 'morphospeciesID', 'subplotID', 'taxonIDRemarks', 'morphospeciesIDRemarks', 'startDate', 'endDate', 'samplingProtocolVersion', 'family', 'dataQF', 'namedLocation', 'nativeStatusCode', 'additionalSpecies'], 'in_subset': []}, 'div_voucher_pub': {'class_uri': 'neon:div_voucher_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'voucherSampleID', 'recordedBy', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'morphospeciesID', 'identifiedBy', 'taxonIDRemarks', 'morphospeciesIDRemarks', 'altLongitude', 'altLatitude', 'startDate', 'endDate', 'collectedBy', 'family', 'dataQF', 'namedLocation', 'altCoordinateUncertainty', 'altGeodeticDatum', 'associatedTaxa', 'nativeStatusCode', 'altCoordinateSource', 'altElevation', 'altElevationUncertainty', 'habitatDescription', 'tagCode', 'voucherSampleCode', 'plantDescription', 'voucherLifeStage', 'voucherLocality'], 'in_subset': []}, 'div_geneticarchive_pub': {'class_uri': 'neon:div_geneticarchive_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'recordedBy', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'morphospeciesID', 'identifiedBy', 'taxonIDRemarks', 'morphospeciesIDRemarks', 'altLongitude', 'altLatitude', 'startDate', 'endDate', 'collectedBy', 'family', 'dataQF', 'geneticSampleID', 'geneticSampleCode', 'namedLocation', 'altCoordinateUncertainty', 'altGeodeticDatum', 'nativeStatusCode', 'altCoordinateSource', 'altElevation', 'altElevationUncertainty', 'tagCode', 'plantCondition'], 'in_subset': []}, 'alg_fieldData_in': {'class_uri': 'neon:alg_fieldData_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'habitatType', 'sampleCollected', 'locationID', 'benthicArea', 'samplerType', 'parentSampleID', 'sampleNumber', 'substratumSizeClass', 'dataQF', 'aquaticSiteType', 'algalSampleType', 'phytoDepth1', 'phytoDepth2', 'phytoDepth3', 'fieldSampleVolume', 'parentSampleFate', 'parentSampleCode', 'samplingImpractical', 'fulcrumVersion', 'platformInfo'], 'in_subset': ['DP0.20166.001']}, 'alg_domainLab_in': {'class_uri': 'neon:alg_domainLab_in', 'slots': ['uid', 'remarks', 'measuredBy', 'recordedBy', 'sampleID', 'collectDate', 'processedDate', 'startDate', 'boatID', 'boatMass', 'dryMassBoatMass', 'ashMassBoatMass', 'locationID', 'storageDays', 'adjAshFreeDryMass', 'parentSampleID', 'sampleFate', 'sampleCode', 'dataQF', 'fieldSampleVolume', 'alternateFieldSampleVolume', 'parentSampleFate', 'parentSampleCode', 'sampleClass', 'labSampleVolume', 'domainFilterVolume', 'filterNumber', 'preservativeType', 'preservativeVolume', 'sampleCondition', 'plantDryMass', 'plantSurfaceArea', 'fieldSampleID', 'fulcrumVersion', 'platformInfo', 'analysisType', 'originalFieldSampleVolume', 'plantAdjAshFreeDryMass', 'plantAshMassBoatMass', 'plantBoatID', 'plantBoatMass', 'plantDryMassBoatMass', 'filterBlankRep1', 'filterBlankRep2', 'plantMassOnly', 'ashMassDataQF'], 'in_subset': []}, 'alg_biovolumes_in': {'class_uri': 'neon:alg_biovolumes_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'scientificName', 'startDate', 'endDate', 'laboratoryName', 'labSpecificStartDate', 'labSpecificEndDate', 'taxonDatabaseName', 'taxonDatabaseID', 'dataQF', 'biovolumeMean', 'biovolumeFormula', 'biovolumeSpecimenNumber', 'taxonAbbreviation', 'biovolumeSD'], 'in_subset': []}, 'alg_labBlank_in': {'class_uri': 'neon:alg_labBlank_in', 'slots': ['uid', 'siteID', 'startDate', 'endDate', 'dataQF', 'fulcrumVersion', 'platformInfo', 'diBlankCode', 'diBlankFate', 'diBlankID', 'filterBlankRep1', 'filterBlankRep1Code', 'filterBlankRep1Fate', 'filterBlankRep1Volume', 'filterBlankRep2', 'filterBlankRep2Code', 'filterBlankRep2Fate', 'filterBlankRep2Volume'], 'in_subset': []}, 'agw_groundwaterFieldData_in': {'class_uri': 'neon:agw_groundwaterFieldData_in', 'slots': ['uid', 'remarks', 'recordedBy', 'collectDate', 'startDate', 'collectedBy', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'groundSurfToThawDist', 'groundSurfToWaterDist', 'liquidWaterPresence', 'thawProbeDepth1', 'thawProbeDepth10', 'thawProbeDepth2', 'thawProbeDepth3', 'thawProbeDepth4', 'thawProbeDepth5', 'thawProbeDepth6', 'thawProbeDepth7', 'thawProbeDepth8', 'thawProbeDepth9', 'thawProbeDepthAverage', 'thawProbeDepthStdDev', 'topOfWellToGroundDist', 'topOfWellToRefusalDist', 'topOfWellToWaterDist', 'transducerLowered', 'wellPushedDownToThawLayer'], 'in_subset': ['DP0.20099.001']}, 'agw_groundwaterFieldData_pub': {'class_uri': 'neon:agw_groundwaterFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'startDate', 'collectedBy', 'locationID', 'dataQF', 'groundSurfToThawDist', 'groundSurfToWaterDist', 'thawProbeDepth1', 'thawProbeDepth10', 'thawProbeDepth2', 'thawProbeDepth3', 'thawProbeDepth4', 'thawProbeDepth5', 'thawProbeDepth6', 'thawProbeDepth7', 'thawProbeDepth8', 'thawProbeDepth9', 'thawProbeDepthAverage', 'thawProbeDepthStdDev'], 'in_subset': ['DP1.20099.001']}, 'sdg_fieldDataAir_in': {'class_uri': 'neon:sdg_fieldDataAir_in', 'slots': ['uid', 'siteID', 'remarks', 'collectDate', 'startDate', 'referenceAirSampleID', 'airVolumeSample', 'lowAirVolumeQF', 'fulcrumVersion', 'platformInfo', 'referenceAirSampleCode', 'referenceAirSampleFate', 'sdgAirDataQF'], 'in_subset': ['DP0.20097.001']}, 'sdg_fieldDataProc_in': {'class_uri': 'neon:sdg_fieldDataProc_in', 'slots': ['uid', 'remarks', 'collectDate', 'stationID', 'processedDate', 'startDate', 'equilibratedAirSampleID', 'referenceAirSampleID', 'storageWaterTemp', 'ptBarometricPressure', 'waterVolumeSyringe', 'gasVolumeSyringe', 'gasVolumeSample', 'lowGasVolumeQF', 'waterSampleID', 'fulcrumVersion', 'platformInfo', 'equilibratedAirSampleCode', 'equilibratedAirSampleCond', 'equilibratedAirSampleFate', 'referenceAirSampleCode', 'referenceAirSampleCond', 'referenceAirSampleFate', 'sdgProcessDataQF', 'waterSampleCode', 'waterSampleFate'], 'in_subset': []}, 'sdg_fieldData_in': {'class_uri': 'neon:sdg_fieldData_in', 'slots': ['uid', 'collectDate', 'stationID', 'startDate', 'parentSampleID', 'waterSampleID', 'parentSampleFate', 'parentSampleCode', 'fulcrumVersion', 'platformInfo', 'sdgFieldDataQF', 'waterSampleCode', 'waterSampleFate'], 'in_subset': []}, 'sdg_externalLabSummaryData_in': {'class_uri': 'neon:sdg_externalLabSummaryData_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'methodDetectionLimit', 'precision', 'measurementUncertainty', 'labSpecificStartDate', 'labSpecificEndDate', 'dataQF', 'measurementUncertaintyUnits', 'methodDetectionLimitUnits', 'precisionUnits'], 'in_subset': []}, 'sdg_externalLabData_in': {'class_uri': 'neon:sdg_externalLabData_in', 'slots': ['uid', 'sampleID', 'collectDate', 'stationID', 'startDate', 'laboratoryName', 'internalLabID', 'shipmentReceivedDate', 'receivedBy', 'shipmentID', 'externalRemarks', 'analysisDate', 'internalSampleName', 'internalLabFileName', 'concentrationCH4', 'concentrationCO2', 'concentrationN2O', 'volumeGasAnalyzed', 'runDetectionLimitCH4', 'runDetectionLimitCO2', 'runDetectionLimitN2O', 'precisionCH4', 'precisionCO2', 'precisionN2O', 'gasStandardAccuracy', 'analyzedBy', 'sampleFate', 'sampleCode', 'sampleCondition', 'sdgExternalLabDataQF', 'gasCheckStandardPercentDev', 'gasCheckStandardQF'], 'in_subset': []}, 'sdg_fieldSuperParent_pub': {'class_uri': 'neon:sdg_fieldSuperParent_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'waterTemp', 'specificConductance', 'aCollectedBy', 'bCollectedBy', 'altLocation', 'altLongitude', 'altLatitude', 'maxDepth', 'startDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'samplerType', 'parentSampleID', 'lakeSampleDepth1', 'lakeSampleDepth2', 'sdgSamplingProtocolVersion', 'aquaticSiteType', 'parentSampleCode', 'fieldDataQF', 'samplingImpractical', 'namedLocation', 'additionalCoordUncertainty', 'altCoordinateUncertainty', 'altGeodeticDatum', 'measurementDepth'], 'in_subset': ['DP1.20097.001']}, 'sdg_fieldData_pub': {'class_uri': 'neon:sdg_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'parentSampleID', 'waterSampleID', 'parentSampleCode', 'namedLocation', 'sdgFieldDataQF', 'waterSampleCode'], 'in_subset': []}, 'sdg_fieldDataAir_pub': {'class_uri': 'neon:sdg_fieldDataAir_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'startDate', 'referenceAirSampleID', 'airVolumeSample', 'lowAirVolumeQF', 'namedLocation', 'referenceAirSampleCode', 'sdgAirDataQF'], 'in_subset': []}, 'sdg_fieldDataProc_pub': {'class_uri': 'neon:sdg_fieldDataProc_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'processedDate', 'startDate', 'equilibratedAirSampleID', 'referenceAirSampleID', 'storageWaterTemp', 'ptBarometricPressure', 'waterVolumeSyringe', 'gasVolumeSyringe', 'gasVolumeSample', 'lowGasVolumeQF', 'waterSampleID', 'namedLocation', 'equilibratedAirSampleCode', 'referenceAirSampleCode', 'sdgProcessDataQF', 'waterSampleCode'], 'in_subset': []}, 'sdg_externalLabData_pub': {'class_uri': 'neon:sdg_externalLabData_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'collectDate', 'startDate', 'laboratoryName', 'internalLabID', 'shipmentReceivedDate', 'receivedBy', 'shipmentID', 'externalRemarks', 'analysisDate', 'internalSampleName', 'internalLabFileName', 'concentrationCH4', 'concentrationCO2', 'concentrationN2O', 'volumeGasAnalyzed', 'runDetectionLimitCH4', 'runDetectionLimitCO2', 'runDetectionLimitN2O', 'precisionCH4', 'precisionCO2', 'precisionN2O', 'gasStandardAccuracy', 'analyzedBy', 'sampleCode', 'sampleCondition', 'namedLocation', 'sdgExternalLabDataQF', 'gasCheckStandardPercentDev', 'gasCheckStandardQF'], 'in_subset': []}, 'sdg_externalLabSummaryData_pub': {'class_uri': 'neon:sdg_externalLabSummaryData_pub', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'methodDetectionLimit', 'precision', 'measurementUncertainty', 'labSpecificStartDate', 'labSpecificEndDate', 'dataQF', 'measurementUncertaintyUnits', 'methodDetectionLimitUnits', 'precisionUnits'], 'in_subset': []}, 'rea_plateauMeasurementFieldData_in': {'class_uri': 'neon:rea_plateauMeasurementFieldData_in', 'slots': ['uid', 'remarks', 'collectDate', 'stationID', 'waterTemp', 'startDate', 'fulcrumVersion', 'platformInfo', 'plateauFieldDataQF', 'specificConductanceRep1', 'specificConductanceRep2', 'specificConductanceRep3', 'specificConductanceRep4', 'specificConductanceRep5'], 'in_subset': ['DP0.20190.001']}, 'rea_plateauSampleFieldData_in': {'class_uri': 'neon:rea_plateauSampleFieldData_in', 'slots': ['uid', 'collectDate', 'stationID', 'startDate', 'replicateNumber', 'fulcrumVersion', 'platformInfo', 'gasSampleCode', 'gasSampleID', 'plateauSampleFieldDataQF', 'plateauCollectTime', 'saltTracerSampleCode', 'saltTracerSampleID', 'syringeID', 'syringeCode', 'gasSampleFate', 'saltTracerSampleFate', 'syringeFate', 'gasSampleCond', 'saltTracerSampleCond', 'syringeCond', 'incompleteExperimentQF'], 'in_subset': []}, 'rea_externalLabDataSalt_in': {'class_uri': 'neon:rea_externalLabDataSalt_in', 'slots': ['uid', 'remarks', 'collectDate', 'stationID', 'startDate', 'laboratoryName', 'receivedBy', 'shipmentID', 'analyte', 'receivedDate', 'analysisDate', 'analyzedBy', 'sampleCondition', 'externalLabSaltDataQF', 'finalConcentration', 'saltBelowDetectionQF', 'saltSampleID', 'saltSampleCode', 'saltSampleFate', 'saltCheckStandardPercentDev', 'saltCheckStandardQF'], 'in_subset': []}, 'rea_conductivityFieldData_in': {'class_uri': 'neon:rea_conductivityFieldData_in', 'slots': ['uid', 'collectDate', 'stationID', 'waterTemp', 'startDate', 'handheldDeviceID', 'fullRangeSpCondLinear', 'fullRangeSpCondNonlinear', 'lowRangeSpCondLinear', 'lowRangeSpCondNonlinear', 'recorduid', 'dateTimeLogger', 'fullRangeHobo', 'hoboSampleCode', 'hoboSampleID', 'loggerDataQF', 'lowRangeHobo', 'measurementNumber', 'hoboSampleFate'], 'in_subset': []}, 'rea_externalLabDataGas_in': {'class_uri': 'neon:rea_externalLabDataGas_in', 'slots': ['uid', 'remarks', 'collectDate', 'stationID', 'startDate', 'laboratoryName', 'internalLabID', 'receivedBy', 'shipmentID', 'receivedDate', 'analysisDate', 'analyzedBy', 'sampleCondition', 'certifiedStandardAccuracy', 'externalLabGasDataQF', 'gasSampleCode', 'gasSampleID', 'gasTracerConcentration', 'gasTracerType', 'gasVolumeAnalyzed', 'labStandardPrecision', 'runDetectionLimit', 'externaLabFileName', 'gasBelowDetectionQF', 'gasSampleFate', 'gasCheckStandardPercentDev', 'gasCheckStandardQF', 'vialID'], 'in_subset': []}, 'rea_backgroundFieldSaltData_in': {'class_uri': 'neon:rea_backgroundFieldSaltData_in', 'slots': ['uid', 'remarks', 'collectDate', 'stationID', 'startDate', 'sampleCollected', 'fulcrumVersion', 'platformInfo', 'backgroundFieldSaltDataQF', 'saltBackgroundSampleCode', 'saltBackgroundSampleID', 'specificConductanceRep1', 'specificConductanceRep2', 'specificConductanceRep3', 'specificConductanceRep4', 'stationToInjectionDistance', 'saltBackgroundSampleClass', 'saltBackgroundSampleFate', 'saltBackgroundSampleCond', 'incompleteExperimentQF'], 'in_subset': []}, 'rea_backgroundFieldCondData_in': {'class_uri': 'neon:rea_backgroundFieldCondData_in', 'slots': ['uid', 'collectDate', 'stationID', 'startDate', 'fulcrumVersion', 'platformInfo', 'backgroundFieldCondDataQF', 'hoboSampleCode', 'hoboSampleID', 'stationToInjectionDistance', 'hoboSampleFate', 'hoboSampleCond', 'hoboSampleClass'], 'in_subset': []}, 'rea_widthFieldData_in': {'class_uri': 'neon:rea_widthFieldData_in', 'slots': ['uid', 'siteID', 'remarks', 'collectDate', 'startDate', 'wettedWidth', 'fulcrumVersion', 'platformInfo', 'widthMeasurementNumber', 'wettedWidthDataQF', 'measuringMethod'], 'in_subset': []}, 'rea_fieldData_in': {'class_uri': 'neon:rea_fieldData_in', 'slots': ['uid', 'siteID', 'recordedBy', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'fieldDataQF', 'fulcrumVersion', 'platformInfo', 'betweenLoggersDist', 'carboyVolume', 'constantRateTracerMass', 'dripEndTime', 'dripRateStart', 'dripRateEnd', 'dripStartTime', 'gasTracerType', 'injectateSampleCode', 'injectateSampleCollected', 'injectateSampleID', 'injectionType', 'loggersAtSensorSets', 'slugPourTime', 'slugTracerMass', 'tracerAnalysisType', 'injectateSampleFate', 'injectateSampleCond', 'incompleteExperimentQF', 'injectateSampleClass', 'iceCover', 'streambedLeafCover'], 'in_subset': []}, 'rea_backgroundFieldSaltData_pub': {'class_uri': 'neon:rea_backgroundFieldSaltData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'startDate', 'sampleCollected', 'namedLocation', 'backgroundFieldSaltDataQF', 'saltBackgroundSampleCode', 'saltBackgroundSampleID', 'specificConductanceRep1', 'specificConductanceRep2', 'specificConductanceRep3', 'specificConductanceRep4', 'stationToInjectionDistance', 'incompleteExperimentQF'], 'in_subset': ['DP1.20190.001']}, 'rea_backgroundFieldCondData_pub': {'class_uri': 'neon:rea_backgroundFieldCondData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'namedLocation', 'backgroundFieldCondDataQF', 'hoboSampleCode', 'hoboSampleID', 'stationToInjectionDistance'], 'in_subset': []}, 'rea_fieldData_pub': {'class_uri': 'neon:rea_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'recordedBy', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'fieldDataQF', 'namedLocation', 'betweenLoggersDist', 'carboyVolume', 'constantRateTracerMass', 'dripEndTime', 'dripRateStart', 'dripRateEnd', 'dripStartTime', 'gasTracerType', 'injectateSampleCode', 'injectateSampleCollected', 'injectateSampleID', 'injectionType', 'loggersAtSensorSets', 'slugPourTime', 'slugTracerMass', 'tracerAnalysisType', 'incompleteExperimentQF', 'iceCover', 'streambedLeafCover'], 'in_subset': []}, 'rea_plateauMeasurementFieldData_pub': {'class_uri': 'neon:rea_plateauMeasurementFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'waterTemp', 'startDate', 'namedLocation', 'plateauFieldDataQF', 'specificConductanceRep1', 'specificConductanceRep2', 'specificConductanceRep3', 'specificConductanceRep4', 'specificConductanceRep5'], 'in_subset': []}, 'rea_plateauSampleFieldData_pub': {'class_uri': 'neon:rea_plateauSampleFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'replicateNumber', 'namedLocation', 'gasSampleCode', 'gasSampleID', 'plateauSampleFieldDataQF', 'plateauCollectTime', 'saltTracerSampleCode', 'saltTracerSampleID', 'syringeID', 'syringeCode', 'incompleteExperimentQF'], 'in_subset': []}, 'rea_widthFieldData_pub': {'class_uri': 'neon:rea_widthFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'startDate', 'wettedWidth', 'namedLocation', 'widthMeasurementNumber', 'wettedWidthDataQF', 'measuringMethod'], 'in_subset': []}, 'rea_externalLabDataGas_pub': {'class_uri': 'neon:rea_externalLabDataGas_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'startDate', 'laboratoryName', 'receivedBy', 'shipmentID', 'receivedDate', 'analysisDate', 'analyzedBy', 'sampleCode', 'sampleCondition', 'namedLocation', 'certifiedStandardAccuracy', 'externalLabGasDataQF', 'gasSampleID', 'gasTracerConcentration', 'gasTracerType', 'gasVolumeAnalyzed', 'labStandardPrecision', 'runDetectionLimit', 'gasCheckStandardPercentDev', 'gasCheckStandardQF'], 'in_subset': []}, 'rea_externalLabDataSalt_pub': {'class_uri': 'neon:rea_externalLabDataSalt_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'startDate', 'laboratoryName', 'receivedBy', 'shipmentID', 'analyte', 'receivedDate', 'analysisDate', 'analyzedBy', 'sampleCode', 'sampleCondition', 'namedLocation', 'externalLabSaltDataQF', 'finalConcentration', 'saltBelowDetectionQF', 'saltSampleID', 'saltCheckStandardPercentDev', 'saltCheckStandardQF'], 'in_subset': []}, 'rea_conductivityFieldData_pub': {'class_uri': 'neon:rea_conductivityFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'waterTemp', 'startDate', 'namedLocation', 'fullRangeSpCondLinear', 'fullRangeSpCondNonlinear', 'lowRangeSpCondLinear', 'lowRangeSpCondNonlinear', 'recorduid', 'dateTimeLogger', 'fullRangeHobo', 'hoboSampleCode', 'hoboSampleID', 'loggerDataQF', 'lowRangeHobo', 'measurementNumber'], 'in_subset': []}, 'sbd_backgroundFieldSaltData_pub': {'class_uri': 'neon:sbd_backgroundFieldSaltData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'startDate', 'sampleCollected', 'namedLocation', 'backgroundFieldSaltDataQF', 'saltBackgroundSampleCode', 'saltBackgroundSampleID', 'specificConductanceRep1', 'specificConductanceRep2', 'specificConductanceRep3', 'specificConductanceRep4', 'stationToInjectionDistance', 'incompleteExperimentQF'], 'in_subset': ['DP1.20193.001']}, 'sbd_backgroundFieldCondData_pub': {'class_uri': 'neon:sbd_backgroundFieldCondData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'namedLocation', 'backgroundFieldCondDataQF', 'hoboSampleCode', 'hoboSampleID', 'stationToInjectionDistance'], 'in_subset': []}, 'sbd_fieldData_pub': {'class_uri': 'neon:sbd_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'recordedBy', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'startDate', 'samplingProtocolVersion', 'collectedBy', 'fieldDataQF', 'namedLocation', 'betweenLoggersDist', 'carboyVolume', 'constantRateTracerMass', 'dripEndTime', 'dripRateStart', 'dripRateEnd', 'dripStartTime', 'injectateSampleCode', 'injectateSampleCollected', 'injectateSampleID', 'injectionType', 'loggersAtSensorSets', 'slugPourTime', 'slugTracerMass', 'incompleteExperimentQF'], 'in_subset': []}, 'sbd_plateauMeasurementFieldData_pub': {'class_uri': 'neon:sbd_plateauMeasurementFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'waterTemp', 'startDate', 'namedLocation', 'plateauFieldDataQF', 'specificConductanceRep1', 'specificConductanceRep2', 'specificConductanceRep3', 'specificConductanceRep4', 'specificConductanceRep5'], 'in_subset': []}, 'sbd_plateauSampleFieldData_pub': {'class_uri': 'neon:sbd_plateauSampleFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'replicateNumber', 'namedLocation', 'plateauSampleFieldDataQF', 'plateauCollectTime', 'saltTracerSampleCode', 'saltTracerSampleID', 'syringeID', 'syringeCode', 'incompleteExperimentQF'], 'in_subset': []}, 'sbd_externalLabDataSalt_pub': {'class_uri': 'neon:sbd_externalLabDataSalt_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'startDate', 'laboratoryName', 'receivedBy', 'shipmentID', 'analyte', 'receivedDate', 'analysisDate', 'analyzedBy', 'sampleCode', 'sampleCondition', 'namedLocation', 'externalLabSaltDataQF', 'finalConcentration', 'saltBelowDetectionQF', 'saltSampleID', 'saltCheckStandardPercentDev', 'saltCheckStandardQF'], 'in_subset': []}, 'sbd_conductivityFieldData_pub': {'class_uri': 'neon:sbd_conductivityFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'waterTemp', 'startDate', 'namedLocation', 'fullRangeSpCondLinear', 'fullRangeSpCondNonlinear', 'lowRangeSpCondLinear', 'lowRangeSpCondNonlinear', 'recorduid', 'dateTimeLogger', 'fullRangeHobo', 'hoboSampleCode', 'hoboSampleID', 'loggerDataQF', 'lowRangeHobo', 'measurementNumber'], 'in_subset': []}, 'gag_fieldData_in': {'class_uri': 'neon:gag_fieldData_in', 'slots': ['uid', 'remarks', 'recordedBy', 'eventID', 'collectDate', 'startDate', 'initialStageHeight', 'endStageHeight', 'precipDescrip', 'previousRain', 'waterColorDescrip', 'riparianPhenologyDescrip', 'collectedBy', 'locationID', 'dataQF', 'samplingImpractical', 'fulcrumVersion', 'icePresent', 'platformInfo', 'beaufortScaleWind', 'algaePresence', 'leafLitterPresence', 'macrophytePresence', 'nominalCloudCover', 'oilsPresence', 'pollenPresence', 'trashPresent', 'waterClarityDescrip', 'woodyDebrisPresence', 'dscTempHydroCond', 'dscTempHydroCondLoc', 'gaugeTempHydroCond', 'gaugeTempHydroCondLoc'], 'in_subset': ['DP0.20267.001']}, 'gag_fieldData_pub': {'class_uri': 'neon:gag_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'startDate', 'initialStageHeight', 'endStageHeight', 'precipDescrip', 'previousRain', 'waterColorDescrip', 'riparianPhenologyDescrip', 'collectedBy', 'locationID', 'dataQF', 'samplingImpractical', 'icePresent', 'beaufortScaleWind', 'algaePresence', 'leafLitterPresence', 'macrophytePresence', 'nominalCloudCover', 'oilsPresence', 'pollenPresence', 'trashPresent', 'waterClarityDescrip', 'woodyDebrisPresence', 'dscTempHydroCond', 'dscTempHydroCondLoc', 'gaugeTempHydroCond', 'gaugeTempHydroCondLoc'], 'in_subset': ['DP1.20267.001']}, 'scs_shipmentCreation_in': {'class_uri': 'neon:scs_shipmentCreation_in', 'slots': ['uid', 'remarks', 'taxonID', 'sampleID', 'sampleType', 'individualCount', 'sampleVolume', 'startDate', 'endDate', 'shipDate', 'shipmentID', 'numVialsSampleID', 'senderID', 'locationID', 'sampleFate', 'sampleCode', 'dataQF', 'sampleClass', 'preservativeType', 'preservativeVolume', 'namedLocation', 'sampleMass', 'wellCoordinates', 'analysisType', 'containerID', 'containerMass', 'destinationFacility', 'filterVolume', 'holdingTime', 'quarantineStatus', 'sentTo', 'shipmentMethod', 'shipmentService', 'shippedFrom', 'trackingNumber'], 'in_subset': ['DP0.10000.001']}, 'scs_shipmentVerification_in': {'class_uri': 'neon:scs_shipmentVerification_in', 'slots': ['uid', 'remarks', 'sampleID', 'startDate', 'endDate', 'laboratoryName', 'coolerTemp', 'shipmentReceivedDate', 'receivedBy', 'shipmentID', 'shipmentCondition', 'deprecatedVialID', 'locationID', 'sampleFate', 'sampleCode', 'dataQF', 'sampleClass', 'sampleCondition', 'acceptedForAnalysis', 'sampleReceived'], 'in_subset': []}, 'scs_archivedata_in': {'class_uri': 'neon:scs_archivedata_in', 'slots': ['uid', 'remarks', 'identificationQualifier', 'sex', 'lifeStage', 'scientificName', 'reproductiveCondition', 'sampleID', 'identifiedBy', 'scientificNameAuthorship', 'startDate', 'endDate', 'archiveID', 'archiveLaboratoryName', 'archiveMedium', 'locationID', 'sampleFate', 'sampleCode', 'dataQF', 'sampleClass', 'collectionCode', 'archiveCode', 'archiveGuid', 'archiveSampleClass', 'archiveStartDate', 'storageTemperature'], 'in_subset': []}, 'amc_fieldCellCounts_in': {'class_uri': 'neon:amc_fieldCellCounts_in', 'slots': ['uid', 'remarks', 'collectDate', 'processedDate', 'startDate', 'archiveID', 'locationID', 'parentSampleID', 'dataQF', 'cellCountSampleID', 'geneticSampleID', 'parentSampleFate', 'parentSampleCode', 'cellCountSampleFate', 'cellCountSampleCode', 'geneticSampleCode', 'geneticSampleFate', 'sampleMaterial', 'archiveSampleFate', 'fulcrumVersion', 'platformInfo', 'archiveFilteredSampleVolume', 'archiveSampleCode', 'archiveSampleCond', 'cellCountLabSampleMedium', 'cellCountPreservantVolume', 'cellCountSampleCond', 'cellCountSampleVolume', 'geneticFilteredSampleVolume', 'geneticLabSampleMedium', 'geneticSampleCond', 'archiveLabSampleMedium'], 'in_subset': ['DP0.20138.001']}, 'amc_cellCounts_in': {'class_uri': 'neon:amc_cellCounts_in', 'slots': ['uid', 'remarks', 'collectDate', 'startDate', 'laboratoryName', 'deprecatedVialID', 'testedDate', 'testProtocolVersion', 'locationID', 'analyzedBy', 'filterSize', 'cellCountSampleID', 'sampleCondition', 'cellCountSampleFate', 'cellCountSampleCode', 'externalLabDataQF', 'batchID', 'reviewedBy', 'qaqcStatus', 'analysisMagnification', 'analysisVolume', 'batchReferenceCount', 'cellCountMethod', 'enumerationDifference', 'numberOfFieldsAnalyzed', 'rawMicrobialAbundance', 'totalCellCount', 'dilutionFactor', 'qcAnalyzedBy'], 'in_subset': []}, 'amc_cellCountLabSummary_in': {'class_uri': 'neon:amc_cellCountLabSummary_in', 'slots': ['uid', 'recordedBy', 'enteredBy', 'startDate', 'endDate', 'laboratoryName', 'labSpecificStartDate', 'labSpecificEndDate', 'testProtocolVersion', 'dataQF', 'cellCountMethod', 'countStandardDeviation', 'longTermEnumerationDifference', 'referenceImageCount', 'referenceImageID', 'enumerationDifferenceMax', 'enumerationDifferenceMean', 'enumerationDifferenceMin'], 'in_subset': []}, 'ltr_fielddata_in': {'class_uri': 'neon:ltr_fielddata_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'trapID', 'boutNumber', 'setDate', 'collectDate', 'samplingProtocolVersion', 'dataQF', 'trapCondition', 'fieldSampleBarcode', 'fieldSampleFate', 'fieldSampleID', 'yearBoutBegan', 'trappingDays', 'toxicodendronPossible'], 'in_subset': ['DP0.10033.001']}, 'ltr_massdata_in': {'class_uri': 'neon:ltr_massdata_in', 'slots': ['uid', 'plotID', 'remarks', 'measuredBy', 'trapID', 'setDate', 'collectDate', 'weighDate', 'qaDryMass', 'dryMass', 'samplingProtocolVersion', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'sampleCondition', 'biogeoSample', 'fieldSampleBarcode', 'fieldSampleFate', 'fieldSampleID', 'functionalGroup', 'massSampleBarcode', 'massSampleFate', 'massSampleID'], 'in_subset': []}, 'ltr_pertrap_in': {'class_uri': 'neon:ltr_pertrap_in', 'slots': ['uid', 'plotID', 'date', 'remarks', 'recordedBy', 'trapID', 'targetTaxaPresent', 'subplotID', 'startDate', 'samplingProtocolVersion', 'trapType', 'dataQF', 'trapPlacement', 'trapSize'], 'in_subset': []}, 'ltr_chemistrySubsampling_in': {'class_uri': 'neon:ltr_chemistrySubsampling_in', 'slots': ['uid', 'plotID', 'remarks', 'setDate', 'collectDate', 'processingDate', 'dataQF', 'cnSampleCode', 'cnSampleFate', 'cnSampleID', 'processedBy', 'archiveSampleBarcode', 'archiveSampleFate', 'archiveSampleID', 'ligninSampleBarcode', 'ligninSampleFate', 'ligninSampleID', 'massSampleBarcodeList', 'massSampleFateList', 'massSampleIDList', 'massSampleMixtureBarcode', 'massSampleMixtureFate', 'massSampleMixtureID', 'toxicodendronPossible'], 'in_subset': []}, 'ltr_fielddata_pub': {'class_uri': 'neon:ltr_fielddata_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'trapID', 'setDate', 'collectDate', 'samplingProtocolVersion', 'dataQF', 'trapCondition', 'fieldSampleBarcode', 'fieldSampleID', 'namedLocation', 'trappingDays', 'toxicodendronPossible'], 'in_subset': ['DP1.10033.001']}, 'ltr_massdata_pub': {'class_uri': 'neon:ltr_massdata_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'measuredBy', 'trapID', 'setDate', 'collectDate', 'weighDate', 'qaDryMass', 'dryMass', 'samplingProtocolVersion', 'dataQF', 'ovenStartDate', 'ovenEndDate', 'fieldSampleBarcode', 'fieldSampleID', 'functionalGroup', 'massSampleBarcode', 'massSampleID', 'namedLocation'], 'in_subset': []}, 'ltr_pertrap_pub': {'class_uri': 'neon:ltr_pertrap_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'remarks', 'recordedBy', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'trapID', 'targetTaxaPresent', 'subplotID', 'plotType', 'startDate', 'samplingProtocolVersion', 'trapType', 'dataQF', 'trapPlacement', 'trapSize', 'namedLocation'], 'in_subset': []}, 'ltr_chemistrySubsampling_pub': {'class_uri': 'neon:ltr_chemistrySubsampling_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'processingDate', 'dataQF', 'cnSampleCode', 'cnSampleID', 'processedBy', 'archiveSampleBarcode', 'archiveSampleID', 'ligninSampleBarcode', 'ligninSampleID', 'massSampleBarcodeList', 'massSampleIDList', 'massSampleMixtureBarcode', 'massSampleMixtureID', 'namedLocation', 'toxicodendronPossible'], 'in_subset': []}, 'inv_dnaStandard_in': {'class_uri': 'neon:inv_dnaStandard_in', 'slots': ['uid', 'remarks', 'sampleID', 'startDate', 'endDate', 'locationID', 'createdDate', 'sampleFate', 'sampleCode', 'dataQF', 'dnaStandardSampleCode', 'dnaStandardSampleFate', 'dnaStandardSampleID'], 'in_subset': []}, 'inv_dnaStandardTaxon_in': {'class_uri': 'neon:inv_dnaStandardTaxon_in', 'slots': ['uid', 'remarks', 'scientificName', 'sampleID', 'individualCount', 'startDate', 'endDate', 'locationID', 'sizeClass', 'createdBy', 'dataQF', 'dnaStandardSampleCode', 'dnaStandardSampleFate', 'dnaStandardSampleID'], 'in_subset': []}, 'spc_biogeochem_pub': {'class_uri': 'neon:spc_biogeochem_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'setDate', 'collectDate', 'nrcsDescriptionID', 'horizonID', 'horizonName', 'laboratoryName', 'biogeoIDnrcs', 'biogeoSampleType', 'biogeoTopDepth', 'biogeoBottomDepth', 'biogeoCenterDepth', 'caNh4d', 'kNh4d', 'mgNh4d', 'naNh4d', 'cecdNh4', 'alSatCecd33', 'baseSumCecd10', 'bsesatCecd10', 'ececCecd33', 'alKcl', 'feKcl', 'mnKcl', 'phCacl2', 'phH2o', 'ec12pre', 'bSatx', 'brSatx', 'caSatx', 'clSatx', 'co3Satx', 'ecSatp', 'flSatx', 'hco3Sx', 'kSatx', 'mgSatx', 'naSatx', 'no2Satx', 'no3Satx', 'pSatx', 'phSp', 'resist', 'so4Satx', 'archiveID', 'dataQF', 'analysisStartDate', 'namedLocation', 'caco3Conc', 'carbonTot', 'estimatedOC', 'gypsumConc', 'nitrogenTot', 'sulfurTot', 'waterSatx', 'biogeoCode', 'horizonCode', 'acidity', 'acidOxalateMethod', 'acidOxalateMethodPub', 'acidOxalateProcessedDate', 'airDryOvenDryMethod', 'airDryOvenDryMethodPub', 'airDryOvenDryProcessedDate', 'airDryOvenDryRatio', 'alCitDithionate', 'alOxalate', 'archiveCode', 'archiveRemarks', 'Bray1PExtractable', 'Bray1PMethod', 'Bray1PMethodPub', 'Bray1PProcessedDate', 'caco3Method', 'caco3MethodPub', 'caco3ProcessedDate', 'cecMethod', 'cecMethodPub', 'cecProcessedDate', 'citrateDithioMethod', 'citrateDithioMethodPub', 'citrateDithioProcessedDate', 'ctonRatio', 'ecMethod', 'ecMethodPub', 'ecProcessedDate', 'extractAcidityMethod', 'extractAcidityMethodPub', 'extractAcidityProcessedDate', 'feCitDithionate', 'feOxalate', 'gypsumMethod', 'gypsumMethodPub', 'gypsumProcessedDate', 'h2oReten15BarMethod', 'h2oReten15BarMethodPub', 'h2oReten15BarProcessedDate', 'KClExtractMethod', 'KClExtractMethodPub', 'KClExtractProcessedDate', 'MehlichIIIPMethod', 'MehlichIIIPMethodPub', 'MehlichIIIPProcessedDate', 'MehlichIIITotP', 'mnCitDithionate', 'mnOxalate', 'OlsenPExtractable', 'OlsenPMethod', 'OlsenPMethodPub', 'OlsenPProcessedDate', 'optDensityOxalate', 'pOxalate', 'processingRemarks', 'routinepHProcessedDate', 'routinepHMethod', 'routinepHMethodPub', 'satPasteMethod', 'satPasteMethodPub', 'satPasteProcessedDate', 'siliconCitrateDithionate', 'siOxalate', 'TotalNCSMethod', 'TotalNCSMethodPub', 'TotalNCSProcessedDate', 'waterRetention15Bar'], 'in_subset': ['DP1.10008.001']}, 'spc_externalLabSummary_pub': {'class_uri': 'neon:spc_externalLabSummary_pub', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'method', 'methodDetectionLimit', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'methodPub'], 'in_subset': []}, 'spc_perplot_in': {'class_uri': 'neon:spc_perplot_in', 'slots': ['uid', 'plotID', 'remarks', 'setDate', 'collectDate', 'pitID', 'pitDepth', 'recordedByA', 'soilProfileDescriberA', 'soilProfileDescriberInst', 'nrcsDescriptionID', 'soilSeries', 'soilFamily', 'soilSubgroup', 'soilGreatGroup', 'soilSuborder', 'soilOrder', 'testProtocolVersion', 'locationID', 'dataQF', 'pitCode', 'pitFate', 'referenceCorner', 'sampleBearing', 'sampleDistance', 'sampleDistanceDeci', 'sampleRelativeLocation', 'soilSamplingMethod'], 'in_subset': ['DP0.10008.001']}, 'spc_perbulksample_in': {'class_uri': 'neon:spc_perbulksample_in', 'slots': ['uid', 'plotID', 'remarks', 'setDate', 'collectDate', 'nrcsDescriptionID', 'horizonID', 'horizonName', 'laboratoryName', 'labProjID', 'bulkDensIDnrcs', 'bulkDensSampleType', 'bulkDensCenterDepth', 'bulkDensDiameter', 'bulkDensLength', 'bulkDensVolume', 'bulkDensTopDepth', 'bulkDensBottomDepth', 'bulkDensWetWeight', 'bulkDensDryWeight', 'bulkDensCoarseFragWeight', 'bulkDensCoarseFragDens', 'dataQF', 'bulkDensCode', 'bulkDensNrcsFate', 'horizonCode', 'horizonFate', 'bulkDensFieldMoist', 'bulkDensMethod', 'bulkDensMethodPub', 'bulkDensOvenDry', 'bulkDensProcessedDate', 'bulkDensThirdBar', 'bulkDensWidth', 'fieldWaterContent', 'waterRetentionThirdBar', 'bulkDensSampleID'], 'in_subset': []}, 'spc_perbiogeosample_in': {'class_uri': 'neon:spc_perbiogeosample_in', 'slots': ['uid', 'plotID', 'setDate', 'collectDate', 'nrcsDescriptionID', 'horizonID', 'horizonName', 'laboratoryName', 'labProjID', 'biogeoIDnrcs', 'biogeoSampleType', 'biogeoTopDepth', 'biogeoBottomDepth', 'biogeoCenterDepth', 'biogeoTotWeight', 'biogeoTotWeight2To5', 'biogeoTotWeight5To20', 'biogeoTotWeight20To75', 'gypsum', 'caco3', 'caNh4d', 'kNh4d', 'mgNh4d', 'naNh4d', 'cecdNh4', 'alSatCecd33', 'baseSumCecd10', 'bsesatCecd10', 'ececCecd33', 'alKcl', 'feKcl', 'mnKcl', 'phCacl2', 'phH2o', 'ec12pre', 'bSatx', 'brSatx', 'caSatx', 'clSatx', 'co3Satx', 'ecSatp', 'flSatx', 'hco3Sx', 'kSatx', 'mgSatx', 'naSatx', 'no2Satx', 'no3Satx', 'pSatx', 'phSp', 'resist', 'so4Satx', 'cTot', 'nTot', 'sTot', 'eoc', 'coarseFrag2To5', 'coarseFrag5To20', 'archiveID', 'dataQF', 'analysisStartDate', 'archiveFate', 'caco3Conc', 'carbonTot', 'estimatedOC', 'gypsumConc', 'nitrogenTot', 'sulfurTot', 'waterSatx', 'biogeoCode', 'biogeoNrcsFate', 'carbonateClay', 'clayFineContent', 'clayTotal', 'horizonCode', 'horizonFate', 'sandCoarseContent', 'sandFineContent', 'sandMediumContent', 'sandTotal', 'sandVeryCoarseContent', 'sandVeryFineContent', 'siltCoarseContent', 'siltFineContent', 'siltTotal', 'acidity', 'acidOxalateMethod', 'acidOxalateMethodPub', 'acidOxalateProcessedDate', 'airDryOvenDryMethod', 'airDryOvenDryMethodPub', 'airDryOvenDryProcessedDate', 'airDryOvenDryRatio', 'alCitDithionate', 'alOxalate', 'archiveCode', 'archiveRemarks', 'Bray1PExtractable', 'Bray1PMethod', 'Bray1PMethodPub', 'Bray1PProcessedDate', 'caco3Method', 'caco3MethodPub', 'caco3ProcessedDate', 'cecMethod', 'cecMethodPub', 'cecProcessedDate', 'citrateDithioMethod', 'citrateDithioMethodPub', 'citrateDithioProcessedDate', 'ctonRatio', 'ecMethod', 'ecMethodPub', 'ecProcessedDate', 'extractAcidityMethod', 'extractAcidityMethodPub', 'extractAcidityProcessedDate', 'feCitDithionate', 'feOxalate', 'gypsumMethod', 'gypsumMethodPub', 'gypsumProcessedDate', 'h2oReten15BarMethod', 'h2oReten15BarMethodPub', 'h2oReten15BarProcessedDate', 'KClExtractMethod', 'KClExtractMethodPub', 'KClExtractProcessedDate', 'MehlichIIIPMethod', 'MehlichIIIPMethodPub', 'MehlichIIIPProcessedDate', 'MehlichIIITotP', 'mnCitDithionate', 'mnOxalate', 'OlsenPExtractable', 'OlsenPMethod', 'OlsenPMethodPub', 'OlsenPProcessedDate', 'optDensityOxalate', 'particleSizeDistProcessedDate', 'particleSizeDistMethod', 'particleSizeDistMethodPub', 'pOxalate', 'processingRemarks', 'routinepHProcessedDate', 'routinepHMethod', 'routinepHMethodPub', 'satPasteMethod', 'satPasteMethodPub', 'satPasteProcessedDate', 'siliconCitrateDithionate', 'siOxalate', 'TotalNCSMethod', 'TotalNCSMethodPub', 'TotalNCSProcessedDate', 'waterRetention15Bar'], 'in_subset': []}, 'spc_externalLabSummary_in': {'class_uri': 'neon:spc_externalLabSummary_in', 'slots': ['uid', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'method', 'methodDetectionLimit', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'dataQF', 'analyteAccuracy', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'methodPub'], 'in_subset': []}, 'spc_perhorizon_in': {'class_uri': 'neon:spc_perhorizon_in', 'slots': ['uid', 'plotID', 'remarks', 'setDate', 'collectDate', 'pitID', 'nrcsDescriptionID', 'horizonID', 'horizonTempName', 'horizonName', 'horizonTopDepth', 'horizonBottomDepth', 'testProtocolVersion', 'dataQF', 'pitCode', 'pitFate', 'horizonCode', 'horizonFate'], 'in_subset': []}, 'spc_perplot_pub': {'class_uri': 'neon:spc_perplot_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'setDate', 'collectDate', 'plotType', 'pitID', 'pitDepth', 'recordedByA', 'soilProfileDescriberA', 'soilProfileDescriberInst', 'nrcsDescriptionID', 'soilSeries', 'soilFamily', 'soilSubgroup', 'soilGreatGroup', 'soilSuborder', 'soilOrder', 'testProtocolVersion', 'dataQF', 'namedLocation', 'pitCode', 'referenceCorner', 'sampleBearing', 'sampleDistance', 'sampleRelativeLocation', 'soilSamplingMethod'], 'in_subset': ['DP1.10047.001']}, 'spc_perhorizon_pub': {'class_uri': 'neon:spc_perhorizon_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'pitID', 'nrcsDescriptionID', 'horizonID', 'horizonName', 'horizonTopDepth', 'horizonBottomDepth', 'testProtocolVersion', 'dataQF', 'namedLocation', 'pitCode', 'horizonCode'], 'in_subset': []}, 'spc_bulkdensity_pub': {'class_uri': 'neon:spc_bulkdensity_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'setDate', 'collectDate', 'nrcsDescriptionID', 'horizonID', 'horizonName', 'laboratoryName', 'bulkDensIDnrcs', 'bulkDensSampleType', 'bulkDensCenterDepth', 'bulkDensDiameter', 'bulkDensLength', 'bulkDensVolume', 'bulkDensTopDepth', 'bulkDensBottomDepth', 'bulkDensWetWeight', 'bulkDensDryWeight', 'bulkDensCoarseFragWeight', 'bulkDensCoarseFragDens', 'dataQF', 'namedLocation', 'bulkDensCode', 'horizonCode', 'bulkDensFieldMoist', 'bulkDensMethod', 'bulkDensMethodPub', 'bulkDensOvenDry', 'bulkDensProcessedDate', 'bulkDensThirdBar', 'bulkDensWidth', 'fieldWaterContent', 'waterRetentionThirdBar'], 'in_subset': []}, 'spc_particlesize_pub': {'class_uri': 'neon:spc_particlesize_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'setDate', 'collectDate', 'nrcsDescriptionID', 'horizonID', 'horizonName', 'laboratoryName', 'biogeoIDnrcs', 'biogeoSampleType', 'biogeoTopDepth', 'biogeoBottomDepth', 'biogeoCenterDepth', 'coarseFrag2To5', 'coarseFrag5To20', 'dataQF', 'namedLocation', 'biogeoCode', 'carbonateClay', 'clayFineContent', 'clayTotal', 'horizonCode', 'sandCoarseContent', 'sandFineContent', 'sandMediumContent', 'sandTotal', 'sandVeryFineContent', 'siltCoarseContent', 'siltFineContent', 'siltTotal', 'particleSizeDistProcessedDate', 'particleSizeDistMethod', 'particleSizeDistMethodPub'], 'in_subset': []}, 'mos_BOLDvoucherInfo_pub': {'class_uri': 'neon:mos_BOLDvoucherInfo_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'fieldID', 'namedLocation', 'collectionCode', 'institutionStoring', 'museumID'], 'in_subset': ['DP1.10038.001']}, 'mos_BOLDtaxonomy_pub': {'class_uri': 'neon:mos_BOLDtaxonomy_pub', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'tribe', 'subspecies', 'namedLocation', 'identifier', 'identifierEmail', 'identifierInstitution', 'identificationMethod', 'species', 'taxonomyNotes'], 'in_subset': []}, 'mos_BOLDspecimenDetails_pub': {'class_uri': 'neon:mos_BOLDspecimenDetails_pub', 'slots': ['uid', 'sex', 'lifeStage', 'sampleID', 'setDate', 'collectDate', 'namedLocation', 'associatedSpecimens', 'associatedTaxa', 'externalURLs', 'reproduction', 'extraInfo', 'notes', 'tissueDescriptor', 'voucherStatus'], 'in_subset': []}, 'mos_BOLDcollectionData_pub': {'class_uri': 'neon:mos_BOLDcollectionData_pub', 'slots': ['uid', 'samplingProtocol', 'elevation', 'sampleID', 'setDate', 'collectDate', 'namedLocation', 'collectionDateAccuracy', 'collectionEventID', 'collectionNotes', 'collectors', 'coordinateAccuracy', 'countryOcean', 'depth', 'depthPrecision', 'elevationPrecision', 'eventTime', 'exactSite', 'gpsSource', 'habitat', 'latitude', 'longitude', 'region', 'sector', 'siteCode', 'stateProvince'], 'in_subset': []}, 'geo_pebbleFieldData_in': {'class_uri': 'neon:geo_pebbleFieldData_in', 'slots': ['uid', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'startDate', 'endDate', 'samplingProtocolVersion', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'pebbleCountD16', 'pebbleCountD5', 'pebbleCountD50', 'pebbleCountD84', 'protocolActivity'], 'in_subset': []}, 'sim_eventData_in': {'class_uri': 'neon:sim_eventData_in', 'slots': ['uid', 'siteID', 'remarks', 'recordedBy', 'eventID', 'scientificName', 'startDate', 'endDate', 'samplingProtocolVersion', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'biomassRemoval', 'eventType', 'fireSeverity', 'maxQuantity', 'maxStartDate', 'methodTypeChoice', 'minEndDate', 'minQuantity', 'name', 'otherScientificName', 'quantityUnit', 'reporterType'], 'in_subset': ['DP0.10111.001']}, 'sim_eventData_pub': {'class_uri': 'neon:sim_eventData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'recordedBy', 'eventID', 'scientificName', 'startDate', 'endDate', 'samplingProtocolVersion', 'locationID', 'dataQF', 'namedLocation', 'fulcrumVersion', 'platformInfo', 'biomassRemoval', 'eventType', 'fireSeverity', 'maxQuantity', 'maxStartDate', 'methodTypeChoice', 'minEndDate', 'minQuantity', 'name', 'otherScientificName', 'quantityUnit', 'reporterType'], 'in_subset': ['DP1.10111.001']}, 'bet_barcoding_in': {'class_uri': 'neon:bet_barcoding_in', 'slots': ['uid', 'plotID', 'identificationReferences', 'remarks', 'identificationQualifier', 'sex', 'lifeStage', 'eventID', 'individualID', 'scientificName', 'reproductiveCondition', 'setDate', 'collectDate', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'specimenSource', 'scientificNameAuthorship', 'laboratoryName', 'archiveID', 'archiveLaboratoryName', 'collectedBy', 'method', 'identificationRemarks', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'dataQF', 'geneticSampleID', 'sampleCondition', 'geneticSampleCode', 'geneticSampleFate', 'samplingMethod', 'associatedSpecimens', 'associatedTaxa', 'externalURLs', 'individualCode', 'individualFate', 'sampleStatus', 'wellCoordinates', 'identifierEmail', 'collectionCode', 'trappingDays', 'depth', 'depthPrecision', 'eventTime', 'plateID', 'BOLDsequenceURL', 'BOLDtraceURL', 'NEONsequenceURL', 'NEONtraceURL'], 'in_subset': []}, 'bet_expertTaxonomistQA_in': {'class_uri': 'neon:bet_expertTaxonomistQA_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'laboratoryName', 'dataQF', 'batchID', 'genusPTD', 'speciesPTD'], 'in_subset': []}, 'dpm_externalLab_in': {'class_uri': 'neon:dpm_externalLab_in', 'slots': ['uid', 'sampleID', 'setDate', 'collectDate', 'laboratoryName', 'archiveID', 'externalRemarks', 'locationID', 'sampleFate', 'sampleCode', 'dataQF', 'filterID', 'filterLotID', 'filterWeighDate', 'filterWeightDelta', 'filterWeightPostDeploy', 'filterWeightPreDeploy', 'labAverageHumidity', 'labFilterCondition', 'labFilterConditionRemarks', 'labFilterDamage', 'labFilterDamageRemarks', 'labQARemarks', 'labRelativeHumidity', 'labTemp', 'archiveStartDate', 'archiveLocatorID', 'filterManufactureName', 'filterProductModel'], 'in_subset': ['DP0.00121.001']}, 'dpm_fieldData_in': {'class_uri': 'neon:dpm_fieldData_in', 'slots': ['uid', 'remarks', 'sampleID', 'setDate', 'collectDate', 'aCollectedBy', 'bCollectedBy', 'locationID', 'aSetBy', 'bSetBy', 'sampleFate', 'sampleCode', 'dataQF', 'fulcrumVersion', 'platformInfo', 'fieldFilterCondition', 'fieldFilterConditionRemarks', 'fieldFilterDamage', 'fieldFilterDamageRemarks', 'filterID', 'filterWet', 'equipCondition', 'equipConditionDesc', 'filterCode'], 'in_subset': []}, 'fsh_invertBycatch_in': {'class_uri': 'neon:fsh_invertBycatch_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'identificationQualifier', 'voucherSampleID', 'eventID', 'scientificName', 'morphospeciesID', 'identifiedBy', 'morphospeciesIDRemarks', 'locationID', 'dataQF', 'fulcrumVersion', 'platformInfo', 'voucherSampleFate', 'voucherSampleCode', 'bulkMortality', 'passEndTime', 'passNumber', 'passStartTime', 'bulkInvertCount'], 'in_subset': []}, 'fsp_boutMetadata_in': {'class_uri': 'neon:fsp_boutMetadata_in', 'slots': ['uid', 'remarks', 'eventID', 'startDate', 'endDate', 'samplingProtocolVersion', 'instrument', 'locationID', 'dataQF', 'wavelengthIncrement', 'fieldSpectrometerSettings', 'foreopticConnection', 'foreopticType', 'lightSource', 'measurementQuantity', 'measurementUnits'], 'in_subset': ['DP0.30012.001']}, 'fsp_sampleMetadata_in': {'class_uri': 'neon:fsp_sampleMetadata_in', 'slots': ['uid', 'remarks', 'taxonID', 'recordedBy', 'eventID', 'individualID', 'sampleID', 'setDate', 'collectDate', 'plantStatus', 'altLongitude', 'altLatitude', 'collectedBy', 'locationID', 'sampleFate', 'sampleCode', 'dataQF', 'fulcrumVersion', 'platformInfo', 'altCoordinateUncertainty', 'measurementDate', 'individualCode', 'individualFate', 'cfcIndividual', 'leafAge', 'leafArrangement', 'leafExposure', 'leafSamplePosition', 'leafStatus', 'measurementVenue', 'spectralSampleCode', 'spectralSampleFate', 'spectralSampleID', 'targetStatus', 'targetType'], 'in_subset': []}, 'fsp_spectralData_in': {'class_uri': 'neon:fsp_spectralData_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'locationID', 'dataQF', 'processedBy', 'reviewedBy', 'downloadFileName', 'downloadFileUrl', 'wavelength', 'reflectance', 'reflectanceCondition', 'software', 'spectralSampleCode', 'spectralSampleCodeDataFrame', 'spectralSampleFate', 'spectralSampleID', 'spectralSampleIDDataFrame'], 'in_subset': []}, 'gag_stageADCP_in': {'class_uri': 'neon:gag_stageADCP_in', 'slots': ['uid', 'recordedBy', 'eventID', 'collectDate', 'startDate', 'initialStageHeight', 'collectedBy', 'locationID', 'dataQF', 'transectID', 'fulcrumVersion', 'platformInfo', 'assetID'], 'in_subset': []}, 'ltr_lignin_in': {'class_uri': 'neon:ltr_lignin_in', 'slots': ['uid', 'plotID', 'remarks', 'setDate', 'collectDate', 'dryMass', 'laboratoryName', 'internalLabID', 'receivedDate', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'reviewedBy', 'ligninSampleBarcode', 'ligninSampleFate', 'ligninSampleID', 'analyticalRepNumber', 'runID', 'accuracyQF', 'cellulosePercent', 'ligninPercent', 'measurementQF'], 'in_subset': ['DP0.10031.001']}, 'ltr_ligninBatchQA_in': {'class_uri': 'neon:ltr_ligninBatchQA_in', 'slots': ['uid', 'remarks', 'dryMass', 'laboratoryName', 'testMethod', 'analysisDate', 'analyzedBy', 'dataQF', 'qaReferenceID', 'analysisEndDate', 'reviewedBy', 'analyticalRepNumber', 'runID', 'celluloseKnown', 'cellulosePercent', 'ligninKnown', 'ligninPercent', 'qaMaterialQF'], 'in_subset': []}, 'ltr_ligninSummary_in': {'class_uri': 'neon:ltr_ligninSummary_in', 'slots': ['uid', 'sampleType', 'startDate', 'endDate', 'laboratoryName', 'analyte', 'instrument', 'method', 'analyteUnits', 'labSpecificStartDate', 'labSpecificEndDate', 'testMethod', 'dataQF', 'analyteStandardDeviation', 'qaReferenceID', 'analyteKnownValue', 'analytePercentRecovery', 'analyteObservedValue', 'analyteMetricsCount', 'qaReportingEndDate', 'qaReportingStartDate'], 'in_subset': []}, 'mam_barcoding_in': {'class_uri': 'neon:mam_barcoding_in', 'slots': ['uid', 'remarks', 'nightuid', 'taxonID', 'identificationQualifier', 'sex', 'lifeStage', 'measuredBy', 'eventID', 'processingDate', 'sampleType', 'morphospeciesID', 'specimenSource', 'startDate', 'endDate', 'archiveID', 'archiveLaboratoryName', 'trapType', 'method', 'archiveFacilityID', 'locationID', 'samplerType', 'benchRemarks', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'fulcrumVersion', 'platformInfo', 'associatedSpecimens', 'associatedTaxa', 'externalURLs', 'sampleStatus', 'wellCoordinates', 'voucherSampleFate', 'identifier', 'identifierEmail', 'identifierInstitution', 'reproduction', 'trappingDays', 'depth', 'depthPrecision', 'eventTime', 'netDepth', 'plateID', 'BOLDsequenceURL', 'BOLDtraceURL', 'NEONsequenceURL', 'NEONtraceURL'], 'in_subset': []}, 'mam_voucher_in': {'class_uri': 'neon:mam_voucher_in', 'slots': ['uid', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'voucherSampleID', 'recordedBy', 'sampleType', 'identifiedBy', 'taxonIDRemarks', 'altLongitude', 'altLatitude', 'startDate', 'endDate', 'collectedBy', 'locationID', 'dataQF', 'sampleClass', 'fulcrumVersion', 'platformInfo', 'altCoordinateUncertainty', 'altGeodeticDatum', 'voucherSampleFate', 'altCoordinateSource', 'altElevation', 'altElevationUncertainty', 'tagCode', 'voucherSampleCode', 'tagFate'], 'in_subset': []}, 'mic_dnaExtraction_in': {'class_uri': 'neon:mic_dnaExtraction_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'subsampleID', 'processedDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testMethod', 'locationID', 'dataQF', 'geneticSampleID', 'sampleClass', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'geneticSampleCode', 'geneticSampleFate', 'nucleicAcidConcentration', 'sampleMaterial', 'sampleMass', 'samplePercent', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'subsampleCode', 'subsampleFate', 'nucleicAcidPurity', 'sequenceAnalysisType'], 'in_subset': ['DP0.10106.001']}, 'mmg_rawDataFiles_in': {'class_uri': 'neon:mmg_rawDataFiles_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription', 'parentFolderName', 'archiveDataFileDescription', 'archiveDataFileName', 'archiveDataFilePath', 'archiveParentFolderName'], 'in_subset': []}, 'mms_rawDataFiles_in': {'class_uri': 'neon:mms_rawDataFiles_in', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'locationID', 'dataQF', 'dnaSampleID', 'dnaSampleFate', 'dnaSampleCode', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription', 'parentFolderName'], 'in_subset': []}, 'mos_pathogenqa_in': {'class_uri': 'neon:mos_pathogenqa_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'laboratoryName', 'testedDate', 'dataQF', 'batchID', 'controlType', 'criteriaMet'], 'in_subset': []}, 'ptx_archive_in': {'class_uri': 'neon:ptx_archive_in', 'slots': ['uid', 'sampleID', 'startDate', 'endDate', 'locationID', 'slideID', 'sampleFate', 'sampleCode', 'dataQF', 'slideCode', 'slideFate', 'freezeDriedCode', 'freezeDriedID', 'preservedCode', 'preservedID', 'freezeDriedFate', 'preservedFate'], 'in_subset': []}, 'tck_identificationQA_in': {'class_uri': 'neon:tck_identificationQA_in', 'slots': ['uid', 'remarks', 'startDate', 'endDate', 'laboratoryName', 'dataQF', 'batchID', 'genusPTD', 'speciesPTD', 'PDE'], 'in_subset': []}, 'wc_externalLabDataByAnalyte_in': {'class_uri': 'neon:wc_externalLabDataByAnalyte_in', 'slots': ['uid', 'remarks', 'sampleID', 'collectDate', 'stationID', 'startDate', 'laboratoryName', 'coolerTemp', 'externalLabMetadata', 'internalLabID', 'shipmentWarmQF', 'uploadDate', 'analyte', 'analyteUnits', 'sampleFate', 'sampleCode', 'dataQF', 'sampleCondition', 'runID', 'analyteConcentration'], 'in_subset': []}, 'alg_biomass_pub': {'class_uri': 'neon:alg_biomass_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'measuredBy', 'recordedBy', 'sampleID', 'collectDate', 'startDate', 'boatMass', 'dryMassBoatMass', 'ashMassBoatMass', 'adjAshFreeDryMass', 'parentSampleID', 'sampleCode', 'dataQF', 'fieldSampleVolume', 'alternateFieldSampleVolume', 'parentSampleCode', 'labSampleVolume', 'domainFilterVolume', 'preservativeType', 'preservativeVolume', 'sampleCondition', 'plantDryMass', 'plantSurfaceArea', 'namedLocation', 'analysisType', 'originalFieldSampleVolume', 'plantAdjAshFreeDryMass', 'plantAshMassBoatMass', 'plantBoatMass', 'plantDryMassBoatMass', 'plantMassOnly', 'ashMassDataQF'], 'in_subset': []}, 'alg_taxonomyRaw_pub': {'class_uri': 'neon:alg_taxonomyRaw_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'startDate', 'laboratoryName', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'slideID', 'algalParameter', 'algalParameterValue', 'algalParameterUnit', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'tribe', 'variety', 'taxonDatabaseName', 'taxonDatabaseID', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'form', 'sampleCode', 'dataQF', 'sampleCondition', 'slideCode', 'namedLocation', 'perBottleSampleVolume'], 'in_subset': []}, 'alg_taxonomyProcessed_pub': {'class_uri': 'neon:alg_taxonomyProcessed_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'acceptedTaxonID', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'startDate', 'laboratoryName', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'slideID', 'algalParameter', 'algalParameterValue', 'algalParameterUnit', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'sampleCode', 'dataQF', 'sampleCondition', 'slideCode', 'namedLocation', 'perBottleSampleVolume'], 'in_subset': []}, 'alg_biovolumes_pub': {'class_uri': 'neon:alg_biovolumes_pub', 'slots': ['uid', 'identificationReferences', 'remarks', 'scientificName', 'startDate', 'endDate', 'laboratoryName', 'labSpecificStartDate', 'labSpecificEndDate', 'taxonDatabaseName', 'taxonDatabaseID', 'dataQF', 'biovolumeMean', 'biovolumeFormula', 'biovolumeSpecimenNumber', 'taxonAbbreviation', 'biovolumeSD'], 'in_subset': []}, 'alg_archive_pub': {'class_uri': 'neon:alg_archive_pub', 'slots': ['uid', 'sampleID', 'startDate', 'endDate', 'locationID', 'slideID', 'sampleCode', 'dataQF', 'slideCode', 'freezeDriedCode', 'freezeDriedID', 'preservedCode', 'preservedID'], 'in_subset': []}, 'apl_biomass_pub': {'class_uri': 'neon:apl_biomass_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'recordedBy', 'scientificName', 'sampleID', 'collectDate', 'processingDate', 'morphospeciesID', 'identifiedBy', 'scientificNameAuthorship', 'morphospeciesIDRemarks', 'dryMass', 'startDate', 'wetMass', 'wetMassSubsample', 'boatMass', 'dryMassBoatMass', 'ashMassBoatMass', 'fieldID', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'benthicArea', 'adjDryMass', 'adjAshFreeDryMass', 'arealAdjDryMass', 'arealAdjAshFreeDryMass', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'sampleCode', 'chemSubsampleID', 'chemSubsampleBarcode', 'dataQF', 'namedLocation', 'fieldIDCode'], 'in_subset': ['DP1.20066.001']}, 'apl_taxonomyRaw_pub': {'class_uri': 'neon:apl_taxonomyRaw_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'scientificName', 'sampleID', 'collectDate', 'targetTaxaPresent', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'startDate', 'laboratoryName', 'internalLabID', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'algalParameter', 'algalParameterValue', 'algalParameterUnit', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'tribe', 'variety', 'taxonDatabaseName', 'taxonDatabaseID', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'subspecies', 'subvariety', 'subform', 'form', 'speciesGroup', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation', 'perBottleSampleVolume'], 'in_subset': []}, 'apl_taxonomyProcessed_pub': {'class_uri': 'neon:apl_taxonomyProcessed_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'scientificNameAuthorship', 'startDate', 'laboratoryName', 'internalLabID', 'method', 'testMethod', 'qcTaxonomyStatus', 'algalType', 'algalParameter', 'algalParameterValue', 'algalParameterUnit', 'kingdom', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'tribe', 'variety', 'subclass', 'infraclass', 'superorder', 'suborder', 'subtribe', 'section', 'subkingdom', 'infrakingdom', 'superdivision', 'division', 'subdivision', 'infradivision', 'parvdivision', 'superclass', 'subsection', 'subspecies', 'subvariety', 'subform', 'form', 'speciesGroup', 'sampleCode', 'dataQF', 'sampleCondition', 'namedLocation', 'perBottleSampleVolume'], 'in_subset': []}, 'asi_externalLabH2OIsotopes_pub': {'class_uri': 'neon:asi_externalLabH2OIsotopes_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'laboratoryName', 'receivedBy', 'externalRemarks', 'receivedDate', 'analysisDate', 'analyzedBy', 'd18OWater', 'd2HWater', 'isotopeH2OSampleID', 'isotopeH2OSampleCode', 'd18OsdWater', 'd2HsdWater', 'instrumentSN', 'isotopeH2OExternalLabQF', 'sampleCondition', 'externalLabDataQF', 'namedLocation'], 'in_subset': ['DP1.20206.001']}, 'asi_fieldData_pub': {'class_uri': 'neon:asi_fieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'collectDate', 'startDate', 'parentSampleID', 'processedDateH2OIsotopes', 'processedDateFilters', 'sampleVolumeFilteredPOMRep1', 'sampleVolumeFilteredPOMRep2', 'isotopeH2OSampleID', 'isotopePOMSampleID', 'isotopePOMRep2SampleID', 'isotopeH2OSampleCode', 'isotopePOMRep2SampleCode', 'isotopePOMSampleCode', 'parentSampleCode', 'fieldDataQF', 'namedLocation', 'isotopeH2OSampleCond', 'isotopePOMSampleCond', 'isotopePOMRep2SampleCond'], 'in_subset': []}, 'asi_fieldSuperParent_pub': {'class_uri': 'neon:asi_fieldSuperParent_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'eventID', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'collectDate', 'waterTemp', 'specificConductance', 'aCollectedBy', 'bCollectedBy', 'altLocation', 'altLongitude', 'altLatitude', 'maxDepth', 'upperSegmentDepth', 'lowerSegmentDepth', 'startDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'wellWaterDepth', 'sampleDepth', 'sampleExtractionMethod', 'wellVolumePurged', 'samplerType', 'parentSampleID', 'lakeSampleDepth1', 'lakeSampleDepth2', 'sdgSamplingProtocolVersion', 'asiSamplingProtocolVersion', 'aquaticSiteType', 'parentSampleCode', 'fieldDataQF', 'samplingImpractical', 'namedLocation', 'additionalCoordUncertainty', 'altCoordinateUncertainty', 'altGeodeticDatum', 'amcSamplingProtocolVersion', 'swcSamplingProtocolVersion'], 'in_subset': []}, 'asi_POMExternalLabDataPerSample_pub': {'class_uri': 'neon:asi_POMExternalLabDataPerSample_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'collectDate', 'sampleType', 'sampleVolumeFiltered', 'startDate', 'laboratoryName', 'externalRemarks', 'analyte', 'method', 'analysisDate', 'analyzedBy', 'sampleCode', 'filterSize', 'plantAlgaeLabUnits', 'sampleCondition', 'externalLabDataQF', 'batchID', 'namedLocation', 'analyteConcentration', 'percentFilterAnalyzed', 'replicate'], 'in_subset': []}, 'vst_mappingandtagging_pub': {'class_uri': 'neon:vst_mappingandtagging_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'eventID', 'individualID', 'scientificName', 'taxonRank', 'morphospeciesID', 'subplotID', 'morphospeciesIDRemarks', 'endDate', 'samplingProtocolVersion', 'pointID', 'dataQF', 'namedLocation', 'individualBarcode', 'cfcOnlyTag', 'nestedSubplotID', 'previouslyTaggedAs', 'stemAzimuth', 'stemDistance', 'supportingStemIndividualID', 'recordType'], 'in_subset': ['DP1.10098.001']}, 'fsp_boutMetadata_pub': {'class_uri': 'neon:fsp_boutMetadata_pub', 'slots': ['uid', 'siteID', 'remarks', 'eventID', 'startDate', 'endDate', 'samplingProtocolVersion', 'instrument', 'dataQF', 'wavelengthIncrement', 'fieldSpectrometerSettings', 'foreopticConnection', 'foreopticType', 'lightSource', 'measurementQuantity', 'measurementUnits'], 'in_subset': ['DP1.30012.001']}, 'fsp_sampleMetadata_pub': {'class_uri': 'neon:fsp_sampleMetadata_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'taxonID', 'recordedBy', 'eventID', 'individualID', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'sampleID', 'setDate', 'collectDate', 'plantStatus', 'plotType', 'altLongitude', 'altLatitude', 'collectedBy', 'locationID', 'sampleCode', 'dataQF', 'altCoordinateUncertainty', 'measurementDate', 'individualCode', 'cfcIndividual', 'leafAge', 'leafArrangement', 'leafExposure', 'leafSamplePosition', 'leafStatus', 'measurementVenue', 'spectralSampleCode', 'spectralSampleID', 'targetStatus', 'targetType'], 'in_subset': []}, 'fsp_spectralData_pub': {'class_uri': 'neon:fsp_spectralData_pub', 'slots': ['uid', 'remarks', 'setDate', 'collectDate', 'locationID', 'dataQF', 'processedBy', 'reviewedBy', 'downloadFileName', 'downloadFileUrl', 'software', 'spectralSampleCode', 'spectralSampleID'], 'in_subset': []}, 'geo_pebbleFieldData_pub': {'class_uri': 'neon:geo_pebbleFieldData_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'geodeticDatum', 'startDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation', 'pebbleCountD16', 'pebbleCountD5', 'pebbleCountD50', 'pebbleCountD84', 'protocolActivity'], 'in_subset': []}, 'inv_dnaExtractionStandard_pub': {'class_uri': 'neon:inv_dnaExtractionStandard_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'deprecatedVialID', 'testProtocolVersion', 'dataQF', 'geneticSampleID', 'sampleCondition', 'dnaSampleID', 'dnaSampleCode', 'geneticSampleCode', 'nucleicAcidConcentration', 'sampleMaterial', 'namedLocation', 'sampleMass', 'dnaPooledStatus', 'dnaProcessedBy', 'nucleicAcidQuantMethod', 'qaqcStatus', 'nucleicAcidPurity', 'standardCreationLocation'], 'in_subset': []}, 'inv_pcrAmplificationStandard_pub': {'class_uri': 'neon:inv_pcrAmplificationStandard_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'forwardPrimer', 'reversePrimer', 'targetGene', 'namedLocation', 'qaqcStatus', 'replicate', 'ampliconConcentration', 'ampliconPooledStatus', 'targetSubfragment', 'primerSetID'], 'in_subset': []}, 'inv_markerGeneSequencingStandard_pub': {'class_uri': 'neon:inv_markerGeneSequencingStandard_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'processedDate', 'startDate', 'laboratoryName', 'internalLabID', 'testProtocolVersion', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'processedBy', 'namedLocation', 'linkerPrimerSequence', 'reverseLinkerPrimerSequence', 'sequencingMethod', 'sequencingConcentration', 'sequencerRunID', 'sampleTotalReadNumber', 'sampleFilteredReadNumber', 'maxFilteredReadLength', 'minFilteredReadLength', 'averageFilteredReadQuality', 'ambiguousBasesNumber', 'barcodeSequence', 'qaqcStatus', 'replicate', 'instrument_model', 'ncbiProjectID', 'sequencingFacilityID', 'illuminaAdapterKit', 'illuminaIndex1', 'illuminaIndex2', 'library_layout', 'library_selection', 'library_source', 'library_strategy', 'analysisCodeFileName', 'primerSetID', 'processedSeqFileName'], 'in_subset': []}, 'inv_dnaStandardTaxon_pub': {'class_uri': 'neon:inv_dnaStandardTaxon_pub', 'slots': ['uid', 'remarks', 'scientificName', 'sampleID', 'individualCount', 'startDate', 'endDate', 'locationID', 'sizeClass', 'createdBy', 'dataQF', 'dnaStandardSampleCode', 'dnaStandardSampleID'], 'in_subset': []}, 'inv_dnaRawDataFiles_pub': {'class_uri': 'neon:inv_dnaRawDataFiles_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'inv_dnaRawDataFilesStandard_pub': {'class_uri': 'neon:inv_dnaRawDataFilesStandard_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'inv_persample_pub': {'class_uri': 'neon:inv_persample_pub', 'slots': ['uid', 'domainID', 'siteID', 'sampleID', 'collectDate', 'startDate', 'laboratoryName', 'sortDate', 'sortedBy', 'subsamplePercent', 'qcSortDate', 'primaryMatrix', 'preRinseVolume', 'postRinseVolume', 'qcSortedBy', 'qcPercentSimilarity', 'benchRemarks', 'qcSortingEfficacy', 'qcIterationCount', 'sampleCode', 'dataQF', 'namedLocation', 'qcEnumerationDifference', 'qcTaxonomicDifference', 'chironomidVialCode', 'chironomidVialID', 'oligochaeteVialCode', 'oligochaeteVialID'], 'in_subset': []}, 'inv_taxonomyProcessed_pub': {'class_uri': 'neon:inv_taxonomyProcessed_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'individualCount', 'acceptedTaxonID', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'startDate', 'laboratoryName', 'identificationRemarks', 'slideID', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'subsamplePercent', 'invertebrateLifeStage', 'sizeClass', 'immatureSpecimen', 'distinctTaxon', 'qcChecked', 'indeterminateSpecies', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'estimatedTotalCount', 'subkingdom', 'infrakingdom', 'superclass', 'sampleCode', 'dataQF', 'sampleCondition', 'slideCode', 'superphylum', 'infraphylum', 'namedLocation'], 'in_subset': []}, 'inv_taxonomyRaw_pub': {'class_uri': 'neon:inv_taxonomyRaw_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'taxonID', 'identificationQualifier', 'scientificName', 'taxonRank', 'sampleID', 'collectDate', 'targetTaxaPresent', 'individualCount', 'morphospeciesID', 'identifiedBy', 'identifiedDate', 'startDate', 'laboratoryName', 'identificationRemarks', 'slideID', 'kingdom', 'phylum', 'class', 'order', 'family', 'subfamily', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'tribe', 'taxonDatabaseName', 'taxonDatabaseID', 'subsamplePercent', 'invertebrateLifeStage', 'sizeClass', 'immatureSpecimen', 'distinctTaxon', 'qcChecked', 'indeterminateSpecies', 'subphylum', 'subclass', 'infraclass', 'superorder', 'suborder', 'infraorder', 'superfamily', 'subtribe', 'estimatedTotalCount', 'subkingdom', 'infrakingdom', 'superclass', 'sampleCode', 'dataQF', 'sampleCondition', 'slideCode', 'superphylum', 'infraphylum', 'namedLocation'], 'in_subset': []}, 'inv_pervial_pub': {'class_uri': 'neon:inv_pervial_pub', 'slots': ['uid', 'domainID', 'siteID', 'scientificName', 'sampleID', 'collectDate', 'morphospeciesID', 'startDate', 'laboratoryName', 'slideID', 'referenceCount', 'referenceID', 'sampleCode', 'dataQF', 'slideCode', 'referenceCode', 'namedLocation'], 'in_subset': []}, 'mam_perplotnight_pub': {'class_uri': 'neon:mam_perplotnight_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'remarks', 'nightuid', 'collectDate', 'endDate', 'samplingProtocolVersion', 'dataQF', 'namedLocation'], 'in_subset': ['DP1.10072.001']}, 'mam_pertrapnight_pub': {'class_uri': 'neon:mam_pertrapnight_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'identificationReferences', 'remarks', 'nightuid', 'trapCoordinate', 'trapStatus', 'taxonID', 'identificationQualifier', 'sex', 'lifeStage', 'testes', 'nipples', 'pregnancyStatus', 'vagina', 'hindfootLength', 'earLength', 'tailLength', 'totalLength', 'weight', 'tagID', 'replacedTag', 'recapture', 'fate', 'bloodSampleID', 'bloodSampleMethod', 'fecalSampleID', 'fecalSampleCondition', 'earSampleID', 'hairSampleID', 'voucherSampleID', 'measuredBy', 'recordedBy', 'nlcdClass', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'collectDate', 'plotType', 'endDate', 'trapType', 'larvalTicksAttached', 'nymphalTicksAttached', 'adultTicksAttached', 'dataQF', 'namedLocation', 'individualCode', 'nativeStatusCode', 'bloodSampleBarcode', 'earSampleBarcode', 'fecalSampleBarcode', 'hairSampleBarcode', 'voucherSampleBarcode', 'hairSampleContents'], 'in_subset': []}, 'mam_voucher_pub': {'class_uri': 'neon:mam_voucher_pub', 'slots': ['uid', 'domainID', 'siteID', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'tagID', 'voucherSampleID', 'recordedBy', 'decimalLatitude', 'decimalLongitude', 'geodeticDatum', 'coordinateUncertainty', 'elevation', 'elevationUncertainty', 'scientificName', 'taxonRank', 'morphospeciesID', 'identifiedBy', 'taxonIDRemarks', 'morphospeciesIDRemarks', 'altLongitude', 'altLatitude', 'startDate', 'endDate', 'collectedBy', 'dataQF', 'namedLocation', 'altCoordinateUncertainty', 'altGeodeticDatum', 'nativeStatusCode', 'altCoordinateSource', 'altElevation', 'altElevationUncertainty', 'habitatDescription', 'tagCode', 'voucherSampleCode'], 'in_subset': []}, 'mmg_benthicRawDataFiles_pub': {'class_uri': 'neon:mmg_benthicRawDataFiles_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'mmg_soilRawDataFiles_pub': {'class_uri': 'neon:mmg_soilRawDataFiles_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'mmg_swRawDataFiles_pub': {'class_uri': 'neon:mmg_swRawDataFiles_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'mms_benthicRawDataFiles_pub': {'class_uri': 'neon:mms_benthicRawDataFiles_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'mms_rawDataFiles_pub': {'class_uri': 'neon:mms_rawDataFiles_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'startDate', 'endDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'mms_swRawDataFiles_pub': {'class_uri': 'neon:mms_swRawDataFiles_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'collectDate', 'startDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'vst_apparentindividual_pub': {'class_uri': 'neon:vst_apparentindividual_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'remarks', 'measuredBy', 'recordedBy', 'eventID', 'individualID', 'growthForm', 'canopyPosition', 'plantStatus', 'stemDiameter', 'measurementHeight', 'height', 'subplotID', 'endDate', 'dataQF', 'namedLocation', 'individualBarcode', 'tagStatus', 'basalStemDiameter', 'basalStemDiameterMsrmntHeight', 'baseCrownHeight', 'breakDiameter', 'breakHeight', 'maxBaseCrownDiameter', 'maxCrownDiameter', 'ninetyBaseCrownDiameter', 'ninetyCrownDiameter', 'shape', 'tempShrubStemID'], 'in_subset': []}, 'vst_shrubgroup_pub': {'class_uri': 'neon:vst_shrubgroup_pub', 'slots': ['uid', 'domainID', 'siteID', 'plotID', 'date', 'identificationReferences', 'remarks', 'taxonID', 'identificationQualifier', 'measuredBy', 'recordedBy', 'eventID', 'scientificName', 'taxonRank', 'subplotID', 'endDate', 'dataQF', 'namedLocation', 'canopyArea', 'deadPercent', 'groupID', 'livePercent', 'meanHeight', 'nestedSubplotID', 'volumePercent'], 'in_subset': []}, 'zoo_dnaRawDataFiles_pub': {'class_uri': 'neon:zoo_dnaRawDataFiles_pub', 'slots': ['uid', 'domainID', 'siteID', 'remarks', 'setDate', 'collectDate', 'processedDate', 'laboratoryName', 'internalLabID', 'dataQF', 'dnaSampleID', 'dnaSampleCode', 'namedLocation', 'sequencerRunID', 'rawDataFileName', 'rawDataFilePath', 'sequencingFacilityID', 'rawDataFileDescription'], 'in_subset': []}, 'csd_continuousDischarge_pub': {'class_uri': 'neon:csd_continuousDischarge_pub', 'slots': ['siteID', 'startDate', 'endDate', 'namedLocation', 'assetID', 'calCertificateFile', 'calibratedPressure', 'curveID', 'dischargeAlphaQF', 'dischargeBetaQF', 'dischargeConsistQF', 'dischargeFinalQF', 'dischargeFinalQFSciRvw', 'dischargeGapQF', 'dischargeNullQF', 'dischargePersistQF', 'dischargeRangeQF', 'dischargeSpikeQF', 'dischargeStepQF', 'dischargeSuspectCalQF', 'dischargeValidCalQF', 'equivalentStage', 'maxpostDischarge', 'nonSystematicUnc', 'stageUnc', 'systematicUnc', 'withParaUncQlower1Std', 'withParaUncQlower2Std', 'withParaUncQMean', 'withParaUncQMedian', 'withParaUncQStdDev', 'withParaUncQupper1Std', 'withParaUncQupper2Std', 'withRemnUncQlower1Std', 'withRemnUncQlower2Std', 'withRemnUncQMean', 'withRemnUncQMedian', 'withRemnUncQStdDev', 'withRemnUncQupper1Std', 'withRemnUncQUpper2Std', 'calibrationID', 'stationHorizontalID'], 'in_subset': ['DP4.00130.001']}, 'csd_pressureGaugeRelationship_pub': {'class_uri': 'neon:csd_pressureGaugeRelationship_pub', 'slots': ['siteID', 'startDate', 'endDate', 'dataQF', 'namedLocation', 'assetID', 'calCertificateFile', 'calculatedStage', 'calcWaterColumnHeight', 'calibratedPressMean', 'calibratedPressObsCount', 'calibratedPressStdDev', 'gaugeHeight', 'sensorStaffGaugeOffset', 'calibrationID', 'gaugeCollectDate', 'stationHorizontalID'], 'in_subset': []}, 'wdp_sensor_pub': {'class_uri': 'neon:wdp_sensor_pub', 'slots': ['date', 'chamberTemperature', 'powerStatus', 'lidStatusWetDep'], 'in_subset': []}, 'dpm_sensor_pub': {'class_uri': 'neon:dpm_sensor_pub', 'slots': ['date', 'sensorTemp', 'baroPressParticulateMass', 'flowRate', 'corrAirVolume', 'uncorrAirVolume'], 'in_subset': []}, 'wss_daily': {'class_uri': 'neon:wss_daily', 'slots': ['date', 'corPresQF', 'dewTempQF', 'precipQF', 'RHQF', 'shortRadQF', 'staPresQF', 'tempTripleQF', 'windSpeedQF', 'wssCorPres', 'wssDewTempMaximum', 'wssDewTempMean', 'wssDewTempMinimum', 'wssDewTempStdErMean', 'wssDewTempVariance', 'wssPrecipTotal', 'wssRHMaximum', 'wssRHMean', 'wssRHMinimum', 'wssRHStdErMean', 'wssRHVariance', 'wssShortRadMaximum', 'wssShortRadMean', 'wssShortRadMinimum', 'wssShortRadStdErMean', 'wssShortRadVariance', 'wssStaPresMaximum', 'wssStaPresMean', 'wssStaPresMinimum', 'wssStaPresStdErMean', 'wssStaPresVariance', 'wssTempTripleMaximum', 'wssTempTripleMean', 'wssTempTripleMinimum', 'wssTempTripleStdErMean', 'wssTempTripleVariance', 'wssWindSpeedMaximum', 'wssWindSpeedMean', 'wssWindSpeedMinimum', 'wssWindSpeedStdErMean', 'wssWindSpeedVariance', 'wssDewTempNumPts', 'wssRHNumPts', 'wssShortRadNumPts', 'wssStaPresNumPts', 'wssTempTripleNumPts', 'wssWindSpeedNumPts'], 'in_subset': ['DP4.00001.001']}, 'PARWS_1min': {'class_uri': 'neon:PARWS_1min', 'slots': ['PARMean', 'PARMinimum', 'PARMaximum', 'PARVariance', 'PARNumPts', 'PARExpUncert', 'PARStdErMean', 'PARRangeQAQCRpt', 'PARPersistenceQAQCRpt', 'PARStepQAQCRpt', 'PARNullQAQCRpt', 'PARGapQAQCRpt', 'PARSpikeQAQCRpt', 'PARAlphaQAQCRpt', 'PARBetaQAQCRpt', 'PARRangeFailQM', 'PARRangePassQM', 'PARRangeNAQM', 'PARPersistenceFailQM', 'PARPersistencePassQM', 'PARPersistenceNAQM', 'PARStepFailQM', 'PARStepPassQM', 'PARStepNAQM', 'PARNullFailQM', 'PARNullPassQM', 'PARNullNAQM', 'PARGapFailQM', 'PARGapPassQM', 'PARGapNAQM', 'PARSpikeFailQM', 'PARSpikePassQM', 'PARSpikeNAQM', 'PARAlphaQM', 'PARBetaQM', 'PARFinalQF', 'startDateTime', 'endDateTime', 'PARValidCalQAQCRpt', 'PARValidCalPassQM', 'PARValidCalNAQM', 'PARValidCalFailQM', 'PARFinalQFSciRvw'], 'in_subset': ['DP1.20042.001']}, 'PARWS_5min': {'class_uri': 'neon:PARWS_5min', 'slots': ['PARMean', 'PARMinimum', 'PARMaximum', 'PARVariance', 'PARNumPts', 'PARExpUncert', 'PARStdErMean', 'PARRangeFailQM', 'PARRangePassQM', 'PARRangeNAQM', 'PARPersistenceFailQM', 'PARPersistencePassQM', 'PARPersistenceNAQM', 'PARStepFailQM', 'PARStepPassQM', 'PARStepNAQM', 'PARNullFailQM', 'PARNullPassQM', 'PARNullNAQM', 'PARGapFailQM', 'PARGapPassQM', 'PARGapNAQM', 'PARSpikeFailQM', 'PARSpikePassQM', 'PARSpikeNAQM', 'PARAlphaQM', 'PARBetaQM', 'PARFinalQF', 'startDateTime', 'endDateTime', 'PARValidCalPassQM', 'PARValidCalNAQM', 'PARValidCalFailQM', 'PARFinalQFSciRvw'], 'in_subset': []}, 'PARWS_30min': {'class_uri': 'neon:PARWS_30min', 'slots': ['PARMean', 'PARMinimum', 'PARMaximum', 'PARVariance', 'PARNumPts', 'PARExpUncert', 'PARStdErMean', 'PARRangeFailQM', 'PARRangePassQM', 'PARRangeNAQM', 'PARPersistenceFailQM', 'PARPersistencePassQM', 'PARPersistenceNAQM', 'PARStepFailQM', 'PARStepPassQM', 'PARStepNAQM', 'PARNullFailQM', 'PARNullPassQM', 'PARNullNAQM', 'PARGapFailQM', 'PARGapPassQM', 'PARGapNAQM', 'PARSpikeFailQM', 'PARSpikePassQM', 'PARSpikeNAQM', 'PARAlphaQM', 'PARBetaQM', 'PARFinalQF', 'startDateTime', 'endDateTime', 'PARValidCalPassQM', 'PARValidCalNAQM', 'PARValidCalFailQM', 'PARFinalQFSciRvw'], 'in_subset': []}, 'PARPAR_1min': {'class_uri': 'neon:PARPAR_1min', 'slots': ['PARMean', 'PARMinimum', 'PARMaximum', 'PARVariance', 'PARNumPts', 'PARExpUncert', 'PARStdErMean', 'PARRangeQAQCRpt', 'PARPersistenceQAQCRpt', 'PARStepQAQCRpt', 'PARNullQAQCRpt', 'PARGapQAQCRpt', 'PARConsistencyQAQCRpt', 'PARSpikeQAQCRpt', 'PARAlphaQAQCRpt', 'PARBetaQAQCRpt', 'PARRangeFailQM', 'PARRangePassQM', 'PARRangeNAQM', 'PARPersistenceFailQM', 'PARPersistencePassQM', 'PARPersistenceNAQM', 'PARStepFailQM', 'PARStepPassQM', 'PARStepNAQM', 'PARNullFailQM', 'PARNullPassQM', 'PARNullNAQM', 'PARGapFailQM', 'PARGapPassQM', 'PARGapNAQM', 'PARSpikeFailQM', 'PARSpikePassQM', 'PARSpikeNAQM', 'PARConsistencyFailQM', 'PARConsistencyPassQM', 'PARConsistencyNAQM', 'PARAlphaQM', 'PARBetaQM', 'PARFinalQF', 'outPARMean', 'outPARMinimum', 'outPARMaximum', 'outPARVariance', 'outPARNumPts', 'outPARExpUncert', 'outPARStdErMean', 'outPARRangeQAQCRpt', 'outPARPersistenceQAQCRpt', 'outPARStepQAQCRpt', 'outPARNullQAQCRpt', 'outPARGapQAQCRpt', 'outPARConsistencyQAQCRpt', 'outPARSpikeQAQCRpt', 'outPARAlphaQAQCRpt', 'outPARBetaQAQCRpt', 'outPARRangeFailQM', 'outPARRangePassQM', 'outPARRangeNAQM', 'outPARPersistenceFailQM', 'outPARPersistencePassQM', 'outPARPersistenceNAQM', 'outPARStepFailQM', 'outPARStepPassQM', 'outPARStepNAQM', 'outPARNullFailQM', 'outPARNullPassQM', 'outPARNullNAQM', 'outPARGapFailQM', 'outPARGapPassQM', 'outPARGapNAQM', 'outPARSpikeFailQM', 'outPARSpikePassQM', 'outPARSpikeNAQM', 'outPARConsistencyFailQM', 'outPARConsistencyPassQM', 'outPARConsistencyNAQM', 'outPARAlphaQM', 'outPARBetaQM', 'outPARFinalQF', 'startDateTime', 'endDateTime', 'PARValidCalQAQCRpt', 'PARValidCalPassQM', 'PARValidCalNAQM', 'PARValidCalFailQM', 'outPARValidCalQAQCRpt', 'outPARValidCalPassQM', 'outPARValidCalNAQM', 'outPARValidCalFailQM', 'outPARFinalQFSciRvw', 'PARFinalQFSciRvw'], 'in_subset': ['DP1.00024.001']}, 'PARPAR_30min': {'class_uri': 'neon:PARPAR_30min', 'slots': ['PARMean', 'PARMinimum', 'PARMaximum', 'PARVariance', 'PARNumPts', 'PARExpUncert', 'PARStdErMean', 'PARRangeFailQM', 'PARRangePassQM', 'PARRangeNAQM', 'PARPersistenceFailQM', 'PARPersistencePassQM', 'PARPersistenceNAQM', 'PARStepFailQM', 'PARStepPassQM', 'PARStepNAQM', 'PARNullFailQM', 'PARNullPassQM', 'PARNullNAQM', 'PARGapFailQM', 'PARGapPassQM', 'PARGapNAQM', 'PARSpikeFailQM', 'PARSpikePassQM', 'PARSpikeNAQM', 'PARConsistencyFailQM', 'PARConsistencyPassQM', 'PARConsistencyNAQM', 'PARAlphaQM', 'PARBetaQM', 'PARFinalQF', 'outPARMean', 'outPARMinimum', 'outPARMaximum', 'outPARVariance', 'outPARNumPts', 'outPARExpUncert', 'outPARStdErMean', 'outPARRangeFailQM', 'outPARRangePassQM', 'outPARRangeNAQM', 'outPARPersistenceFailQM', 'outPARPersistencePassQM', 'outPARPersistenceNAQM', 'outPARStepFailQM', 'outPARStepPassQM', 'outPARStepNAQM', 'outPARNullFailQM', 'outPARNullPassQM', 'outPARNullNAQM', 'outPARGapFailQM', 'outPARGapPassQM', 'outPARGapNAQM', 'outPARSpikeFailQM', 'outPARSpikePassQM', 'outPARSpikeNAQM', 'outPARConsistencyFailQM', 'outPARConsistencyPassQM', 'outPARConsistencyNAQM', 'outPARAlphaQM', 'outPARBetaQM', 'outPARFinalQF', 'startDateTime', 'endDateTime', 'PARValidCalPassQM', 'PARValidCalNAQM', 'PARValidCalFailQM', 'outPARValidCalPassQM', 'outPARValidCalNAQM', 'outPARValidCalFailQM', 'outPARFinalQFSciRvw'], 'in_subset': []}, 'PRIPRE_5min': {'class_uri': 'neon:PRIPRE_5min', 'slots': ['priPrecipBulk', 'priPrecipExpUncert', 'priPrecipNullQF', 'startDateTime', 'endDateTime', 'wire1StabilityPassQM', 'wire1StabilitySearchQM', 'wire1StabilityFailQM', 'wire2StabilityPassQM', 'wire2StabilitySearchQM', 'wire2StabilityFailQM', 'wire3StabilityPassQM', 'wire3StabilitySearchQM', 'wire3StabilityFailQM', 'inletHeaters1QM', 'inletHeaters2QM', 'inletHeaters3QM', 'priorDepthQF', 'unstableQF', 'lowDepthQF', 'exDeltaQF', 'missingWireInfoQF', 'gaugeNoiseQF', 'wireNoiseQF', 'overflowQF', 'heaterErrorQF', 'priPrecipFinalQF', 'wire1StabilityNAQM', 'wire2StabilityNAQM', 'wire3StabilityNAQM', 'inletHeatersNAQM', 'priPrecipFinalQFSciRvw', 'priPrecipValidCalQF'], 'in_subset': ['DP1.00006.001']}, 'PRIPRE_30min': {'class_uri': 'neon:PRIPRE_30min', 'slots': ['priPrecipBulk', 'priPrecipExpUncert', 'priPrecipNullQF', 'startDateTime', 'endDateTime', 'inletHeaters1QM', 'inletHeaters2QM', 'inletHeaters3QM', 'priPrecipFinalQF', 'priPrecipNumPts', 'inletHeatersNAQM', 'priPrecipFinalQFSciRvw'], 'in_subset': []}, 'SECPRE_1min': {'class_uri': 'neon:SECPRE_1min', 'slots': ['secPrecipBulk', 'secPrecipExpUncert', 'secPrecipHeaterQAQCRpt', 'secPrecipHeater0QM', 'secPrecipHeater1QM', 'secPrecipHeater2QM', 'secPrecipHeater3QM', 'secPrecipRangeQF', 'startDateTime', 'endDateTime', 'secPrecipSciRvwQF', 'secPrecipValidCalQF'], 'in_subset': []}, 'SECPRE_30min': {'class_uri': 'neon:SECPRE_30min', 'slots': ['secPrecipBulk', 'secPrecipExpUncert', 'secPrecipHeater0QM', 'secPrecipHeater1QM', 'secPrecipHeater2QM', 'secPrecipHeater3QM', 'secPrecipRangeQF', 'startDateTime', 'endDateTime', 'secPrecipSciRvwQF', 'secPrecipValidCalQF'], 'in_subset': []}, 'SAAT_1min': {'class_uri': 'neon:SAAT_1min', 'slots': ['tempSingleMean', 'tempSingleMinimum', 'tempSingleMaximum', 'tempSingleVariance', 'tempSingleNumPts', 'tempSingleExpUncert', 'tempSingleStdErMean', 'rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'flowQAQCRpt', 'heaterQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'flowFailQM', 'flowPassQM', 'flowNAQM', 'heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'alphaQM', 'betaQM', 'finalQF', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.00002.001']}, 'SAAT_30min': {'class_uri': 'neon:SAAT_30min', 'slots': ['tempSingleMean', 'tempSingleMinimum', 'tempSingleMaximum', 'tempSingleVariance', 'tempSingleNumPts', 'tempSingleExpUncert', 'tempSingleStdErMean', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'flowFailQM', 'flowPassQM', 'flowNAQM', 'heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'alphaQM', 'betaQM', 'finalQF', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'finalQFSciRvw'], 'in_subset': []}, 'NSW_15_minute': {'class_uri': 'neon:NSW_15_minute', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'startDateTime', 'endDateTime', 'surfWaterNitrateMean', 'surfWaterNitrateMinimum', 'surfWaterNitrateMaximum', 'surfWaterNitrateVariance', 'surfWaterNitrateNumPts', 'surfWaterNitrateExpUncert', 'surfWaterNitrateStdErMean', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'nitrateInternalHumidityPassQM', 'nitrateInternalHumidityFailQM', 'nitrateInternalHumidityNAQM', 'nitrateInternalHumidityQAQCRpt', 'nitrateLightDarkSpectralRatioPassQM', 'nitrateLightDarkSpectralRatioFailQM', 'nitrateLightDarkSpectralRatioNAQM', 'nitrateLightDarkSpectralRatioQAQCRpt', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.20033.001']}, 'TSW_5min': {'class_uri': 'neon:TSW_5min', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'startDateTime', 'endDateTime', 'surfWaterTempExpUncert', 'surfWaterTempMean', 'surfWaterTempMinimum', 'surfWaterTempMaximum', 'surfWaterTempVariance', 'surfWaterTempNumPts', 'surfWaterTempStdErMean', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.20053.001']}, 'IRBT_1_minute': {'class_uri': 'neon:IRBT_1_minute', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'bioTempMean', 'bioTempMinimum', 'bioTempMaximum', 'bioTempVariance', 'bioTempNumPts', 'bioTempExpUncert', 'bioTempStdErMean', 'NANQAQCRpt', 'NANFailQM', 'NANPassQM', 'NANNAQM', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.00005.001']}, 'SRPP_1min': {'class_uri': 'neon:SRPP_1min', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'heaterQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'alphaQM', 'betaQM', 'finalQF', 'shortRadMean', 'shortRadMinimum', 'shortRadMaximum', 'shortRadVariance', 'shortRadNumPts', 'shortRadExpUncert', 'shortRadStdErMean', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.00022.001']}, 'SRPP_30min': {'class_uri': 'neon:SRPP_30min', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'heaterQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'alphaQM', 'betaQM', 'finalQF', 'shortRadMean', 'shortRadMinimum', 'shortRadMaximum', 'shortRadVariance', 'shortRadNumPts', 'shortRadExpUncert', 'shortRadStdErMean', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt'], 'in_subset': []}, 'PARQL_1min': {'class_uri': 'neon:PARQL_1min', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'linePARMean', 'linePARMinimum', 'linePARMaximum', 'linePARVariance', 'linePARNumPts', 'linePARSkewness', 'linePARKurtosis', 'linePARExpUncert', 'linePARStdErMean', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.00066.001']}, 'SCO2C_1_minute': {'class_uri': 'neon:SCO2C_1_minute', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'startDateTime', 'endDateTime', 'soilCO2concentrationMean', 'soilCO2concentrationMinimum', 'soilCO2concentrationMaximum', 'soilCO2concentrationVariance', 'soilCO2concentrationNumPts', 'soilCO2concentrationExpUncert', 'soilCO2concentrationStdErMean', 'warmUpInstallationQAQCRpt', 'sensorErrorStatusQAQCRpt', 'temperatureSCO2QAQCRpt', 'pressureRangeQAQCRpt', 'warmUpInstallationFailQM', 'warmUpInstallationPassQM', 'warmUpInstallationNAQM', 'sensorErrorStatusFailQM', 'sensorErrorStatusPassQM', 'sensorErrorStatusNAQM', 'temperatureSCO2FailQM', 'temperatureSCO2PassQM', 'temperatureSCO2NAQM', 'pressureRangeFailQM', 'pressureRangePassQM', 'pressureRangeNAQM', 'soilCO2FinalQF', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.00095.001']}, 'SHF_1min': {'class_uri': 'neon:SHF_1min', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'startDateTime', 'endDateTime', 'SHFCalHeaterFlag', 'SHFMean', 'SHFMinimum', 'SHFMaximum', 'SHFVariance', 'SHFNumPts', 'SHFExpUncert', 'SHFStdErMean', 'SHFCalHeaterQF', 'SHFCalPeriodFlag', 'SHFInSituCorFactor', 'SHFInSituCorQF', 'SHFCalHeaterOnMetric', 'SHFCalHeaterOffMetric', 'SHFCalHeaterFailQM', 'SHFCalHeaterPassQM', 'SHFCalHeaterNAQM', 'SHFCalPeriodOnMetric', 'SHFCalPeriodOffMetric', 'SHFInSituCorFailQM', 'SHFInSituCorPassQM', 'SHFInSituCorNAQM', 'finalQFSciRvw'], 'in_subset': ['DP1.00040.001']}, 'ST_1_minute': {'class_uri': 'neon:ST_1_minute', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'soilTempMean', 'soilTempMinimum', 'soilTempMaximum', 'soilTempVariance', 'soilTempNumPts', 'soilTempExpUncert', 'soilTempStdErMean', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.00041.001']}, 'TAAT_1min': {'class_uri': 'neon:TAAT_1min', 'slots': ['rangeQAQCRpt', 'persistenceQAQCRpt', 'stepQAQCRpt', 'nullQAQCRpt', 'gapQAQCRpt', 'consistencyQAQCRpt', 'spikeQAQCRpt', 'alphaQAQCRpt', 'betaQAQCRpt', 'flowQAQCRpt', 'heaterQAQCRpt', 'rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'flowFailQM', 'flowPassQM', 'flowNAQM', 'heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'alphaQM', 'betaQM', 'finalQF', 'tempTripleMean', 'tempTripleMinimum', 'tempTripleMaximum', 'tempTripleVariance', 'tempTripleNumPts', 'tempTripleExpUncert', 'tempTripleStdErMean', 'tempAveQAQCRpt', 'tempAve0QM', 'tempAve1QM', 'tempAve2QM', 'tempAve3QM', 'tempAve4QM', 'tempAve5QM', 'tempAve6QM', 'tempAve7QM', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'validCalQAQCRpt', 'finalQFSciRvw'], 'in_subset': ['DP1.00003.001']}, 'SLRNRB_1min': {'class_uri': 'neon:SLRNRB_1min', 'slots': ['heaterQAQCRpt', 'heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'inSWMean', 'inSWMinimum', 'inSWMaximum', 'inSWVariance', 'inSWNumPts', 'inSWExpUncert', 'inSWStdErMean', 'inSWRangeQAQCRpt', 'inSWPersistenceQAQCRpt', 'inSWStepQAQCRpt', 'inSWNullQAQCRpt', 'inSWGapQAQCRpt', 'inSWConsistencyQAQCRpt', 'inSWSpikeQAQCRpt', 'inSWAlphaQAQCRpt', 'inSWBetaQAQCRpt', 'inSWRangeFailQM', 'inSWRangePassQM', 'inSWRangeNAQM', 'inSWPersistenceFailQM', 'inSWPersistencePassQM', 'inSWPersistenceNAQM', 'inSWStepFailQM', 'inSWStepPassQM', 'inSWStepNAQM', 'inSWNullFailQM', 'inSWNullPassQM', 'inSWNullNAQM', 'inSWGapFailQM', 'inSWGapPassQM', 'inSWGapNAQM', 'inSWSpikeFailQM', 'inSWSpikePassQM', 'inSWSpikeNAQM', 'inSWConsistencyFailQM', 'inSWConsistencyPassQM', 'inSWConsistencyNAQM', 'inSWAlphaQM', 'inSWBetaQM', 'inSWFinalQF', 'outSWMean', 'outSWMinimum', 'outSWMaximum', 'outSWVariance', 'outSWNumPts', 'outSWExpUncert', 'outSWStdErMean', 'outSWRangeQAQCRpt', 'outSWPersistenceQAQCRpt', 'outSWStepQAQCRpt', 'outSWNullQAQCRpt', 'outSWGapQAQCRpt', 'outSWConsistencyQAQCRpt', 'outSWSpikeQAQCRpt', 'outSWAlphaQAQCRpt', 'outSWBetaQAQCRpt', 'outSWRangeFailQM', 'outSWRangePassQM', 'outSWRangeNAQM', 'outSWPersistenceFailQM', 'outSWPersistencePassQM', 'outSWPersistenceNAQM', 'outSWStepFailQM', 'outSWStepPassQM', 'outSWStepNAQM', 'outSWNullFailQM', 'outSWNullPassQM', 'outSWNullNAQM', 'outSWGapFailQM', 'outSWGapPassQM', 'outSWGapNAQM', 'outSWSpikeFailQM', 'outSWSpikePassQM', 'outSWSpikeNAQM', 'outSWConsistencyFailQM', 'outSWConsistencyPassQM', 'outSWConsistencyNAQM', 'outSWAlphaQM', 'outSWBetaQM', 'outSWFinalQF', 'inLWMean', 'inLWMinimum', 'inLWMaximum', 'inLWVariance', 'inLWNumPts', 'inLWExpUncert', 'inLWStdErMean', 'inLWRangeQAQCRpt', 'inLWPersistenceQAQCRpt', 'inLWStepQAQCRpt', 'inLWNullQAQCRpt', 'inLWGapQAQCRpt', 'inLWConsistencyQAQCRpt', 'inLWSpikeQAQCRpt', 'inLWAlphaQAQCRpt', 'inLWBetaQAQCRpt', 'inLWRangeFailQM', 'inLWRangePassQM', 'inLWRangeNAQM', 'inLWPersistenceFailQM', 'inLWPersistencePassQM', 'inLWPersistenceNAQM', 'inLWStepFailQM', 'inLWStepPassQM', 'inLWStepNAQM', 'inLWNullFailQM', 'inLWNullPassQM', 'inLWNullNAQM', 'inLWGapFailQM', 'inLWGapPassQM', 'inLWGapNAQM', 'inLWSpikeFailQM', 'inLWSpikePassQM', 'inLWSpikeNAQM', 'inLWConsistencyFailQM', 'inLWConsistencyPassQM', 'inLWConsistencyNAQM', 'inLWAlphaQM', 'inLWBetaQM', 'inLWFinalQF', 'outLWMean', 'outLWMinimum', 'outLWMaximum', 'outLWVariance', 'outLWNumPts', 'outLWExpUncert', 'outLWStdErMean', 'outLWRangeQAQCRpt', 'outLWPersistenceQAQCRpt', 'outLWStepQAQCRpt', 'outLWNullQAQCRpt', 'outLWGapQAQCRpt', 'outLWConsistencyQAQCRpt', 'outLWSpikeQAQCRpt', 'outLWAlphaQAQCRpt', 'outLWBetaQAQCRpt', 'outLWRangeFailQM', 'outLWRangePassQM', 'outLWRangeNAQM', 'outLWPersistenceFailQM', 'outLWPersistencePassQM', 'outLWPersistenceNAQM', 'outLWStepFailQM', 'outLWStepPassQM', 'outLWStepNAQM', 'outLWNullFailQM', 'outLWNullPassQM', 'outLWNullNAQM', 'outLWGapFailQM', 'outLWGapPassQM', 'outLWGapNAQM', 'outLWSpikeFailQM', 'outLWSpikePassQM', 'outLWSpikeNAQM', 'outLWConsistencyFailQM', 'outLWConsistencyPassQM', 'outLWConsistencyNAQM', 'outLWAlphaQM', 'outLWBetaQM', 'outLWFinalQF', 'startDateTime', 'endDateTime', 'inLWFinalQFSciRvw', 'inSWFinalQFSciRvw', 'outLWFinalQFSciRvw', 'outSWFinalQFSciRvw', 'inLWValidCalQAQCRpt', 'inSWValidCalQAQCRpt', 'outLWValidCalQAQCRpt', 'outSWValidCalQAQCRpt', 'inLWValidCalFailQM', 'inLWValidCalNAQM', 'inLWValidCalPassQM', 'inSWValidCalFailQM', 'inSWValidCalNAQM', 'inSWValidCalPassQM', 'outLWValidCalFailQM', 'outLWValidCalNAQM', 'outLWValidCalPassQM', 'outSWValidCalFailQM', 'outSWValidCalNAQM', 'outSWValidCalPassQM'], 'in_subset': ['DP1.20032.001']}, 'SLRNR_1min': {'class_uri': 'neon:SLRNR_1min', 'slots': ['heaterQAQCRpt', 'heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'inSWMean', 'inSWMinimum', 'inSWMaximum', 'inSWVariance', 'inSWNumPts', 'inSWExpUncert', 'inSWStdErMean', 'inSWRangeQAQCRpt', 'inSWPersistenceQAQCRpt', 'inSWStepQAQCRpt', 'inSWNullQAQCRpt', 'inSWGapQAQCRpt', 'inSWConsistencyQAQCRpt', 'inSWSpikeQAQCRpt', 'inSWAlphaQAQCRpt', 'inSWBetaQAQCRpt', 'inSWRangeFailQM', 'inSWRangePassQM', 'inSWRangeNAQM', 'inSWPersistenceFailQM', 'inSWPersistencePassQM', 'inSWPersistenceNAQM', 'inSWStepFailQM', 'inSWStepPassQM', 'inSWStepNAQM', 'inSWNullFailQM', 'inSWNullPassQM', 'inSWNullNAQM', 'inSWGapFailQM', 'inSWGapPassQM', 'inSWGapNAQM', 'inSWSpikeFailQM', 'inSWSpikePassQM', 'inSWSpikeNAQM', 'inSWConsistencyFailQM', 'inSWConsistencyPassQM', 'inSWConsistencyNAQM', 'inSWAlphaQM', 'inSWBetaQM', 'inSWFinalQF', 'outSWMean', 'outSWMinimum', 'outSWMaximum', 'outSWVariance', 'outSWNumPts', 'outSWExpUncert', 'outSWStdErMean', 'outSWRangeQAQCRpt', 'outSWPersistenceQAQCRpt', 'outSWStepQAQCRpt', 'outSWNullQAQCRpt', 'outSWGapQAQCRpt', 'outSWConsistencyQAQCRpt', 'outSWSpikeQAQCRpt', 'outSWAlphaQAQCRpt', 'outSWBetaQAQCRpt', 'outSWRangeFailQM', 'outSWRangePassQM', 'outSWRangeNAQM', 'outSWPersistenceFailQM', 'outSWPersistencePassQM', 'outSWPersistenceNAQM', 'outSWStepFailQM', 'outSWStepPassQM', 'outSWStepNAQM', 'outSWNullFailQM', 'outSWNullPassQM', 'outSWNullNAQM', 'outSWGapFailQM', 'outSWGapPassQM', 'outSWGapNAQM', 'outSWSpikeFailQM', 'outSWSpikePassQM', 'outSWSpikeNAQM', 'outSWConsistencyFailQM', 'outSWConsistencyPassQM', 'outSWConsistencyNAQM', 'outSWAlphaQM', 'outSWBetaQM', 'outSWFinalQF', 'inLWMean', 'inLWMinimum', 'inLWMaximum', 'inLWVariance', 'inLWNumPts', 'inLWExpUncert', 'inLWStdErMean', 'inLWRangeQAQCRpt', 'inLWPersistenceQAQCRpt', 'inLWStepQAQCRpt', 'inLWNullQAQCRpt', 'inLWGapQAQCRpt', 'inLWConsistencyQAQCRpt', 'inLWSpikeQAQCRpt', 'inLWAlphaQAQCRpt', 'inLWBetaQAQCRpt', 'inLWRangeFailQM', 'inLWRangePassQM', 'inLWRangeNAQM', 'inLWPersistenceFailQM', 'inLWPersistencePassQM', 'inLWPersistenceNAQM', 'inLWStepFailQM', 'inLWStepPassQM', 'inLWStepNAQM', 'inLWNullFailQM', 'inLWNullPassQM', 'inLWNullNAQM', 'inLWGapFailQM', 'inLWGapPassQM', 'inLWGapNAQM', 'inLWSpikeFailQM', 'inLWSpikePassQM', 'inLWSpikeNAQM', 'inLWConsistencyFailQM', 'inLWConsistencyPassQM', 'inLWConsistencyNAQM', 'inLWAlphaQM', 'inLWBetaQM', 'inLWFinalQF', 'outLWMean', 'outLWMinimum', 'outLWMaximum', 'outLWVariance', 'outLWNumPts', 'outLWExpUncert', 'outLWStdErMean', 'outLWRangeQAQCRpt', 'outLWPersistenceQAQCRpt', 'outLWStepQAQCRpt', 'outLWNullQAQCRpt', 'outLWGapQAQCRpt', 'outLWConsistencyQAQCRpt', 'outLWSpikeQAQCRpt', 'outLWAlphaQAQCRpt', 'outLWBetaQAQCRpt', 'outLWRangeFailQM', 'outLWRangePassQM', 'outLWRangeNAQM', 'outLWPersistenceFailQM', 'outLWPersistencePassQM', 'outLWPersistenceNAQM', 'outLWStepFailQM', 'outLWStepPassQM', 'outLWStepNAQM', 'outLWNullFailQM', 'outLWNullPassQM', 'outLWNullNAQM', 'outLWGapFailQM', 'outLWGapPassQM', 'outLWGapNAQM', 'outLWSpikeFailQM', 'outLWSpikePassQM', 'outLWSpikeNAQM', 'outLWConsistencyFailQM', 'outLWConsistencyPassQM', 'outLWConsistencyNAQM', 'outLWAlphaQM', 'outLWBetaQM', 'outLWFinalQF', 'startDateTime', 'endDateTime', 'inLWFinalQFSciRvw', 'inSWFinalQFSciRvw', 'outLWFinalQFSciRvw', 'outSWFinalQFSciRvw', 'inLWValidCalQAQCRpt', 'inSWValidCalQAQCRpt', 'outLWValidCalQAQCRpt', 'outSWValidCalQAQCRpt', 'inLWValidCalFailQM', 'inLWValidCalNAQM', 'inLWValidCalPassQM', 'inSWValidCalFailQM', 'inSWValidCalNAQM', 'inSWValidCalPassQM', 'outLWValidCalFailQM', 'outLWValidCalNAQM', 'outLWValidCalPassQM', 'outSWValidCalFailQM', 'outSWValidCalNAQM', 'outSWValidCalPassQM'], 'in_subset': ['DP1.00023.001']}, 'TSW_30min': {'class_uri': 'neon:TSW_30min', 'slots': ['rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'startDateTime', 'endDateTime', 'surfWaterTempExpUncert', 'surfWaterTempMean', 'surfWaterTempMinimum', 'surfWaterTempMaximum', 'surfWaterTempVariance', 'surfWaterTempNumPts', 'surfWaterTempStdErMean', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM'], 'in_subset': []}, 'IRBT_30_minute': {'class_uri': 'neon:IRBT_30_minute', 'slots': ['rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'bioTempMean', 'bioTempMinimum', 'bioTempMaximum', 'bioTempVariance', 'bioTempNumPts', 'bioTempExpUncert', 'bioTempStdErMean', 'NANFailQM', 'NANPassQM', 'NANNAQM', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'finalQFSciRvw'], 'in_subset': []}, 'PARQL_30min': {'class_uri': 'neon:PARQL_30min', 'slots': ['rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'linePARMean', 'linePARMinimum', 'linePARMaximum', 'linePARVariance', 'linePARNumPts', 'linePARSkewness', 'linePARKurtosis', 'linePARExpUncert', 'linePARStdErMean', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'finalQFSciRvw'], 'in_subset': []}, 'SCO2C_30_minute': {'class_uri': 'neon:SCO2C_30_minute', 'slots': ['rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'startDateTime', 'endDateTime', 'soilCO2concentrationMean', 'soilCO2concentrationMinimum', 'soilCO2concentrationMaximum', 'soilCO2concentrationVariance', 'soilCO2concentrationNumPts', 'soilCO2concentrationExpUncert', 'soilCO2concentrationStdErMean', 'warmUpInstallationFailQM', 'warmUpInstallationPassQM', 'warmUpInstallationNAQM', 'sensorErrorStatusFailQM', 'sensorErrorStatusPassQM', 'sensorErrorStatusNAQM', 'temperatureSCO2FailQM', 'temperatureSCO2PassQM', 'temperatureSCO2NAQM', 'pressureRangeFailQM', 'pressureRangePassQM', 'pressureRangeNAQM', 'soilCO2FinalQF', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'finalQFSciRvw'], 'in_subset': []}, 'SHF_30min': {'class_uri': 'neon:SHF_30min', 'slots': ['rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'startDateTime', 'endDateTime', 'SHFCalHeaterFlag', 'SHFMean', 'SHFMinimum', 'SHFMaximum', 'SHFVariance', 'SHFNumPts', 'SHFExpUncert', 'SHFStdErMean', 'SHFCalHeaterQF', 'SHFCalPeriodFlag', 'SHFInSituCorQF', 'SHFCalHeaterOnMetric', 'SHFCalHeaterOffMetric', 'SHFCalHeaterFailQM', 'SHFCalHeaterPassQM', 'SHFCalHeaterNAQM', 'SHFCalPeriodOnMetric', 'SHFCalPeriodOffMetric', 'SHFInSituCorFailQM', 'SHFInSituCorPassQM', 'SHFInSituCorNAQM', 'finalQFSciRvw'], 'in_subset': []}, 'ST_30_minute': {'class_uri': 'neon:ST_30_minute', 'slots': ['rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'alphaQM', 'betaQM', 'finalQF', 'soilTempMean', 'soilTempMinimum', 'soilTempMaximum', 'soilTempVariance', 'soilTempNumPts', 'soilTempExpUncert', 'soilTempStdErMean', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'finalQFSciRvw'], 'in_subset': []}, 'TAAT_30min': {'class_uri': 'neon:TAAT_30min', 'slots': ['rangeFailQM', 'rangePassQM', 'rangeNAQM', 'persistenceFailQM', 'persistencePassQM', 'persistenceNAQM', 'stepFailQM', 'stepPassQM', 'stepNAQM', 'nullFailQM', 'nullPassQM', 'nullNAQM', 'gapFailQM', 'gapPassQM', 'gapNAQM', 'spikeFailQM', 'spikePassQM', 'spikeNAQM', 'consistencyFailQM', 'consistencyPassQM', 'consistencyNAQM', 'flowFailQM', 'flowPassQM', 'flowNAQM', 'heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'alphaQM', 'betaQM', 'finalQF', 'tempTripleMean', 'tempTripleMinimum', 'tempTripleMaximum', 'tempTripleVariance', 'tempTripleNumPts', 'tempTripleExpUncert', 'tempTripleStdErMean', 'tempAve0QM', 'tempAve1QM', 'tempAve2QM', 'tempAve3QM', 'tempAve4QM', 'tempAve5QM', 'tempAve6QM', 'tempAve7QM', 'startDateTime', 'endDateTime', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'finalQFSciRvw'], 'in_subset': []}, 'SLRNRB_30min': {'class_uri': 'neon:SLRNRB_30min', 'slots': ['heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'inSWMean', 'inSWMinimum', 'inSWMaximum', 'inSWVariance', 'inSWNumPts', 'inSWExpUncert', 'inSWStdErMean', 'inSWRangeFailQM', 'inSWRangePassQM', 'inSWRangeNAQM', 'inSWPersistenceFailQM', 'inSWPersistencePassQM', 'inSWPersistenceNAQM', 'inSWStepFailQM', 'inSWStepPassQM', 'inSWStepNAQM', 'inSWNullFailQM', 'inSWNullPassQM', 'inSWNullNAQM', 'inSWGapFailQM', 'inSWGapPassQM', 'inSWGapNAQM', 'inSWSpikeFailQM', 'inSWSpikePassQM', 'inSWSpikeNAQM', 'inSWConsistencyFailQM', 'inSWConsistencyPassQM', 'inSWConsistencyNAQM', 'inSWAlphaQM', 'inSWBetaQM', 'inSWFinalQF', 'outSWMean', 'outSWMinimum', 'outSWMaximum', 'outSWVariance', 'outSWNumPts', 'outSWExpUncert', 'outSWStdErMean', 'outSWRangeFailQM', 'outSWRangePassQM', 'outSWRangeNAQM', 'outSWPersistenceFailQM', 'outSWPersistencePassQM', 'outSWPersistenceNAQM', 'outSWStepFailQM', 'outSWStepPassQM', 'outSWStepNAQM', 'outSWNullFailQM', 'outSWNullPassQM', 'outSWNullNAQM', 'outSWGapFailQM', 'outSWGapPassQM', 'outSWGapNAQM', 'outSWSpikeFailQM', 'outSWSpikePassQM', 'outSWSpikeNAQM', 'outSWConsistencyFailQM', 'outSWConsistencyPassQM', 'outSWConsistencyNAQM', 'outSWAlphaQM', 'outSWBetaQM', 'outSWFinalQF', 'inLWMean', 'inLWMinimum', 'inLWMaximum', 'inLWVariance', 'inLWNumPts', 'inLWExpUncert', 'inLWStdErMean', 'inLWRangeFailQM', 'inLWRangePassQM', 'inLWRangeNAQM', 'inLWPersistenceFailQM', 'inLWPersistencePassQM', 'inLWPersistenceNAQM', 'inLWStepFailQM', 'inLWStepPassQM', 'inLWStepNAQM', 'inLWNullFailQM', 'inLWNullPassQM', 'inLWNullNAQM', 'inLWGapFailQM', 'inLWGapPassQM', 'inLWGapNAQM', 'inLWSpikeFailQM', 'inLWSpikePassQM', 'inLWSpikeNAQM', 'inLWConsistencyFailQM', 'inLWConsistencyPassQM', 'inLWConsistencyNAQM', 'inLWAlphaQM', 'inLWBetaQM', 'inLWFinalQF', 'outLWMean', 'outLWMinimum', 'outLWMaximum', 'outLWVariance', 'outLWNumPts', 'outLWExpUncert', 'outLWStdErMean', 'outLWRangeFailQM', 'outLWRangePassQM', 'outLWRangeNAQM', 'outLWPersistenceFailQM', 'outLWPersistencePassQM', 'outLWPersistenceNAQM', 'outLWStepFailQM', 'outLWStepPassQM', 'outLWStepNAQM', 'outLWNullFailQM', 'outLWNullPassQM', 'outLWNullNAQM', 'outLWGapFailQM', 'outLWGapPassQM', 'outLWGapNAQM', 'outLWSpikeFailQM', 'outLWSpikePassQM', 'outLWSpikeNAQM', 'outLWConsistencyFailQM', 'outLWConsistencyPassQM', 'outLWConsistencyNAQM', 'outLWAlphaQM', 'outLWBetaQM', 'outLWFinalQF', 'startDateTime', 'endDateTime', 'inLWFinalQFSciRvw', 'inSWFinalQFSciRvw', 'outLWFinalQFSciRvw', 'outSWFinalQFSciRvw', 'inLWValidCalFailQM', 'inLWValidCalNAQM', 'inLWValidCalPassQM', 'inSWValidCalFailQM', 'inSWValidCalNAQM', 'inSWValidCalPassQM', 'outLWValidCalFailQM', 'outLWValidCalNAQM', 'outLWValidCalPassQM', 'outSWValidCalFailQM', 'outSWValidCalNAQM', 'outSWValidCalPassQM'], 'in_subset': []}, 'SLRNR_30min': {'class_uri': 'neon:SLRNR_30min', 'slots': ['heaterFailQM', 'heaterPassQM', 'heaterNAQM', 'inSWMean', 'inSWMinimum', 'inSWMaximum', 'inSWVariance', 'inSWNumPts', 'inSWExpUncert', 'inSWStdErMean', 'inSWRangeFailQM', 'inSWRangePassQM', 'inSWRangeNAQM', 'inSWPersistenceFailQM', 'inSWPersistencePassQM', 'inSWPersistenceNAQM', 'inSWStepFailQM', 'inSWStepPassQM', 'inSWStepNAQM', 'inSWNullFailQM', 'inSWNullPassQM', 'inSWNullNAQM', 'inSWGapFailQM', 'inSWGapPassQM', 'inSWGapNAQM', 'inSWSpikeFailQM', 'inSWSpikePassQM', 'inSWSpikeNAQM', 'inSWConsistencyFailQM', 'inSWConsistencyPassQM', 'inSWConsistencyNAQM', 'inSWAlphaQM', 'inSWBetaQM', 'inSWFinalQF', 'outSWMean', 'outSWMinimum', 'outSWMaximum', 'outSWVariance', 'outSWNumPts', 'outSWExpUncert', 'outSWStdErMean', 'outSWRangeFailQM', 'outSWRangePassQM', 'outSWRangeNAQM', 'outSWPersistenceFailQM', 'outSWPersistencePassQM', 'outSWPersistenceNAQM', 'outSWStepFailQM', 'outSWStepPassQM', 'outSWStepNAQM', 'outSWNullFailQM', 'outSWNullPassQM', 'outSWNullNAQM', 'outSWGapFailQM', 'outSWGapPassQM', 'outSWGapNAQM', 'outSWSpikeFailQM', 'outSWSpikePassQM', 'outSWSpikeNAQM', 'outSWConsistencyFailQM', 'outSWConsistencyPassQM', 'outSWConsistencyNAQM', 'outSWAlphaQM', 'outSWBetaQM', 'outSWFinalQF', 'inLWMean', 'inLWMinimum', 'inLWMaximum', 'inLWVariance', 'inLWNumPts', 'inLWExpUncert', 'inLWStdErMean', 'inLWRangeFailQM', 'inLWRangePassQM', 'inLWRangeNAQM', 'inLWPersistenceFailQM', 'inLWPersistencePassQM', 'inLWPersistenceNAQM', 'inLWStepFailQM', 'inLWStepPassQM', 'inLWStepNAQM', 'inLWNullFailQM', 'inLWNullPassQM', 'inLWNullNAQM', 'inLWGapFailQM', 'inLWGapPassQM', 'inLWGapNAQM', 'inLWSpikeFailQM', 'inLWSpikePassQM', 'inLWSpikeNAQM', 'inLWConsistencyFailQM', 'inLWConsistencyPassQM', 'inLWConsistencyNAQM', 'inLWAlphaQM', 'inLWBetaQM', 'inLWFinalQF', 'outLWMean', 'outLWMinimum', 'outLWMaximum', 'outLWVariance', 'outLWNumPts', 'outLWExpUncert', 'outLWStdErMean', 'outLWRangeFailQM', 'outLWRangePassQM', 'outLWRangeNAQM', 'outLWPersistenceFailQM', 'outLWPersistencePassQM', 'outLWPersistenceNAQM', 'outLWStepFailQM', 'outLWStepPassQM', 'outLWStepNAQM', 'outLWNullFailQM', 'outLWNullPassQM', 'outLWNullNAQM', 'outLWGapFailQM', 'outLWGapPassQM', 'outLWGapNAQM', 'outLWSpikeFailQM', 'outLWSpikePassQM', 'outLWSpikeNAQM', 'outLWConsistencyFailQM', 'outLWConsistencyPassQM', 'outLWConsistencyNAQM', 'outLWAlphaQM', 'outLWBetaQM', 'outLWFinalQF', 'startDateTime', 'endDateTime', 'inLWFinalQFSciRvw', 'inSWFinalQFSciRvw', 'outLWFinalQFSciRvw', 'outSWFinalQFSciRvw', 'inLWValidCalFailQM', 'inLWValidCalNAQM', 'inLWValidCalPassQM', 'inSWValidCalFailQM', 'inSWValidCalNAQM', 'inSWValidCalPassQM', 'outLWValidCalFailQM', 'outLWValidCalNAQM', 'outLWValidCalPassQM', 'outSWValidCalFailQM', 'outSWValidCalNAQM', 'outSWValidCalPassQM'], 'in_subset': []}, '2DWSD_2min': {'class_uri': 'neon:2DWSD_2min', 'slots': ['windSpeedMean', 'windSpeedMinimum', 'windSpeedMaximum', 'windSpeedVariance', 'windSpeedNumPts', 'windSpeedExpUncert', 'windSpeedStdErMean', 'windSpeedRangeQAQCRpt', 'windSpeedPersistenceQAQCRpt', 'windSpeedStepQAQCRpt', 'windSpeedNullQAQCRpt', 'windSpeedGapQAQCRpt', 'windSpeedConsistencyQAQCRpt', 'windSpeedSpikeQAQCRpt', 'windSpeedAlphaQAQCRpt', 'windSpeedBetaQAQCRpt', 'windSpeedRangeFailQM', 'windSpeedRangePassQM', 'windSpeedRangeNAQM', 'windSpeedPersistenceFailQM', 'windSpeedPersistencePassQM', 'windSpeedPersistenceNAQM', 'windSpeedStepFailQM', 'windSpeedStepPassQM', 'windSpeedStepNAQM', 'windSpeedNullFailQM', 'windSpeedNullPassQM', 'windSpeedNullNAQM', 'windSpeedGapFailQM', 'windSpeedGapPassQM', 'windSpeedGapNAQM', 'windSpeedSpikeFailQM', 'windSpeedSpikePassQM', 'windSpeedSpikeNAQM', 'windSpeedConsistencyFailQM', 'windSpeedConsistencyPassQM', 'windSpeedConsistencyNAQM', 'windSpeedAlphaQM', 'windSpeedBetaQM', 'windSpeedFinalQF', 'windDirMean', 'windDirVariance', 'windDirNumPts', 'windDirExpUncert', 'windDirStdErMean', 'windDirRangeQAQCRpt', 'windDirPersistenceQAQCRpt', 'windDirStepQAQCRpt', 'windDirNullQAQCRpt', 'windDirGapQAQCRpt', 'windDirConsistencyQAQCRpt', 'windDirSpikeQAQCRpt', 'windDirAlphaQAQCRpt', 'windDirBetaQAQCRpt', 'windDirRangeFailQM', 'windDirRangePassQM', 'windDirRangeNAQM', 'windDirPersistenceFailQM', 'windDirPersistencePassQM', 'windDirPersistenceNAQM', 'windDirStepFailQM', 'windDirStepPassQM', 'windDirStepNAQM', 'windDirNullFailQM', 'windDirNullPassQM', 'windDirNullNAQM', 'windDirGapFailQM', 'windDirGapPassQM', 'windDirGapNAQM', 'windDirSpikeFailQM', 'windDirSpikePassQM', 'windDirSpikeNAQM', 'windDirConsistencyFailQM', 'windDirConsistencyPassQM', 'windDirConsistencyNAQM', 'windDirAlphaQM', 'windDirBetaQM', 'windDirFinalQF', 'windDirDistortedFlowQAQCRpt', 'windDirDistortedFlowFailQM', 'windDirDistortedFlowPassQM', 'windDirDistortedFlowNAQM', 'windSpeedSensorErrorQAQCRpt', 'windSpeedSensorErrorFailQM', 'windSpeedSensorErrorPassQM', 'windSpeedSensorErrorNAQM', 'windSpeedCalmWindQF', 'windDirSensorErrorQAQCRpt', 'windDirSensorErrorFailQM', 'windDirSensorErrorPassQM', 'windDirSensorErrorNAQM', 'windDirCalmWindQF', 'startDateTime', 'endDateTime', 'windDirValidCalFailQM', 'windDirValidCalNAQM', 'windDirValidCalPassQM', 'windDirValidCalQAQCRpt', 'windSpeedValidCalFailQM', 'windSpeedValidCalNAQM', 'windSpeedValidCalPassQM', 'windSpeedValidCalQAQCRpt', 'windDirFinalQFSciRvw', 'windSpeedFinalQFSciRvw'], 'in_subset': ['DP1.00001.001']}, '2DWSD_30min': {'class_uri': 'neon:2DWSD_30min', 'slots': ['windSpeedMean', 'windSpeedMinimum', 'windSpeedMaximum', 'windSpeedVariance', 'windSpeedNumPts', 'windSpeedExpUncert', 'windSpeedStdErMean', 'windSpeedRangeFailQM', 'windSpeedRangePassQM', 'windSpeedRangeNAQM', 'windSpeedPersistenceFailQM', 'windSpeedPersistencePassQM', 'windSpeedPersistenceNAQM', 'windSpeedStepFailQM', 'windSpeedStepPassQM', 'windSpeedStepNAQM', 'windSpeedNullFailQM', 'windSpeedNullPassQM', 'windSpeedNullNAQM', 'windSpeedGapFailQM', 'windSpeedGapPassQM', 'windSpeedGapNAQM', 'windSpeedSpikeFailQM', 'windSpeedSpikePassQM', 'windSpeedSpikeNAQM', 'windSpeedConsistencyFailQM', 'windSpeedConsistencyPassQM', 'windSpeedConsistencyNAQM', 'windSpeedAlphaQM', 'windSpeedBetaQM', 'windSpeedFinalQF', 'windDirMean', 'windDirVariance', 'windDirNumPts', 'windDirExpUncert', 'windDirStdErMean', 'windDirRangeFailQM', 'windDirRangePassQM', 'windDirRangeNAQM', 'windDirPersistenceFailQM', 'windDirPersistencePassQM', 'windDirPersistenceNAQM', 'windDirStepFailQM', 'windDirStepPassQM', 'windDirStepNAQM', 'windDirNullFailQM', 'windDirNullPassQM', 'windDirNullNAQM', 'windDirGapFailQM', 'windDirGapPassQM', 'windDirGapNAQM', 'windDirSpikeFailQM', 'windDirSpikePassQM', 'windDirSpikeNAQM', 'windDirConsistencyFailQM', 'windDirConsistencyPassQM', 'windDirConsistencyNAQM', 'windDirAlphaQM', 'windDirBetaQM', 'windDirFinalQF', 'windDirDistortedFlowFailQM', 'windDirDistortedFlowPassQM', 'windDirDistortedFlowNAQM', 'windSpeedSensorErrorFailQM', 'windSpeedSensorErrorPassQM', 'windSpeedSensorErrorNAQM', 'windSpeedCalmWindQF', 'windDirSensorErrorFailQM', 'windDirSensorErrorPassQM', 'windDirSensorErrorNAQM', 'windDirCalmWindQF', 'startDateTime', 'endDateTime', 'windDirValidCalFailQM', 'windDirValidCalNAQM', 'windDirValidCalPassQM', 'windSpeedValidCalFailQM', 'windSpeedValidCalNAQM', 'windSpeedValidCalPassQM', 'windDirFinalQFSciRvw', 'windSpeedFinalQFSciRvw'], 'in_subset': []}, 'windSpeedDirBuoy': {'class_uri': 'neon:windSpeedDirBuoy', 'slots': ['windSpeedMean', 'windDirMean', 'vectorAverageHeading'], 'in_subset': ['DP0.20059.001']}, 'BP_1min': {'class_uri': 'neon:BP_1min', 'slots': ['staPresMean', 'staPresMinimum', 'staPresMaximum', 'staPresVariance', 'staPresNumPts', 'staPresExpUncert', 'staPresStdErMean', 'staPresRangeQAQCRpt', 'staPresPersistenceQAQCRpt', 'staPresStepQAQCRpt', 'staPresNullQAQCRpt', 'staPresGapQAQCRpt', 'staPresConsistencyQAQCRpt', 'staPresSpikeQAQCRpt', 'staPresAlphaQAQCRpt', 'staPresBetaQAQCRpt', 'staPresRangeFailQM', 'staPresRangePassQM', 'staPresRangeNAQM', 'staPresPersistenceFailQM', 'staPresPersistencePassQM', 'staPresPersistenceNAQM', 'staPresStepFailQM', 'staPresStepPassQM', 'staPresStepNAQM', 'staPresNullFailQM', 'staPresNullPassQM', 'staPresNullNAQM', 'staPresGapFailQM', 'staPresGapPassQM', 'staPresGapNAQM', 'staPresSpikeFailQM', 'staPresSpikePassQM', 'staPresSpikeNAQM', 'staPresConsistencyFailQM', 'staPresConsistencyPassQM', 'staPresConsistencyNAQM', 'staPresAlphaQM', 'staPresBetaQM', 'staPresFinalQF', 'corPres', 'corPresExpUncert', 'corPresFinalQF', 'startDateTime', 'endDateTime', 'corPresTempQF', 'corPresDewPtQF', 'staPresValidCalFailQM', 'staPresValidCalNAQM', 'staPresValidCalPassQM', 'staPresValidCalQAQCRpt', 'corPresFinalQFSciRvw', 'staPresFinalQFSciRvw'], 'in_subset': ['DP1.20004.001', 'DP1.00004.001']}, 'BP_30min': {'class_uri': 'neon:BP_30min', 'slots': ['staPresMean', 'staPresMinimum', 'staPresMaximum', 'staPresVariance', 'staPresNumPts', 'staPresExpUncert', 'staPresStdErMean', 'staPresRangeFailQM', 'staPresRangePassQM', 'staPresRangeNAQM', 'staPresPersistenceFailQM', 'staPresPersistencePassQM', 'staPresPersistenceNAQM', 'staPresStepFailQM', 'staPresStepPassQM', 'staPresStepNAQM', 'staPresNullFailQM', 'staPresNullPassQM', 'staPresNullNAQM', 'staPresGapFailQM', 'staPresGapPassQM', 'staPresGapNAQM', 'staPresSpikeFailQM', 'staPresSpikePassQM', 'staPresSpikeNAQM', 'staPresConsistencyFailQM', 'staPresConsistencyPassQM', 'staPresConsistencyNAQM', 'staPresAlphaQM', 'staPresBetaQM', 'staPresFinalQF', 'corPres', 'corPresExpUncert', 'corPresFinalQF', 'startDateTime', 'endDateTime', 'corPresTempQF', 'corPresDewPtQF', 'staPresValidCalFailQM', 'staPresValidCalNAQM', 'staPresValidCalPassQM', 'corPresFinalQFSciRvw', 'staPresFinalQFSciRvw'], 'in_subset': []}, 'SRDDP_1min': {'class_uri': 'neon:SRDDP_1min', 'slots': ['difRadMean', 'difRadMinimum', 'difRadMaximum', 'difRadVariance', 'difRadNumPts', 'difRadExpUncert', 'difRadStdErMean', 'difRadRangeQAQCRpt', 'difRadPersistenceQAQCRpt', 'difRadStepQAQCRpt', 'difRadNullQAQCRpt', 'difRadGapQAQCRpt', 'difRadConsistencyQAQCRpt', 'difRadSpikeQAQCRpt', 'difRadAlphaQAQCRpt', 'difRadBetaQAQCRpt', 'difRadRangeFailQM', 'difRadRangePassQM', 'difRadRangeNAQM', 'difRadPersistenceFailQM', 'difRadPersistencePassQM', 'difRadPersistenceNAQM', 'difRadStepFailQM', 'difRadStepPassQM', 'difRadStepNAQM', 'difRadNullFailQM', 'difRadNullPassQM', 'difRadNullNAQM', 'difRadGapFailQM', 'difRadGapPassQM', 'difRadGapNAQM', 'difRadSpikeFailQM', 'difRadSpikePassQM', 'difRadSpikeNAQM', 'difRadConsistencyFailQM', 'difRadConsistencyPassQM', 'difRadConsistencyNAQM', 'difRadAlphaQM', 'difRadBetaQM', 'difRadFinalQF', 'dirRadMean', 'dirRadMinimum', 'dirRadMaximum', 'dirRadVariance', 'dirRadNumPts', 'dirRadExpUncert', 'dirRadStdErMean', 'dirRadRangeQAQCRpt', 'dirRadPersistenceQAQCRpt', 'dirRadStepQAQCRpt', 'dirRadNullQAQCRpt', 'dirRadGapQAQCRpt', 'dirRadConsistencyQAQCRpt', 'dirRadSpikeQAQCRpt', 'dirRadAlphaQAQCRpt', 'dirRadBetaQAQCRpt', 'dirRadRangeFailQM', 'dirRadRangePassQM', 'dirRadRangeNAQM', 'dirRadPersistenceFailQM', 'dirRadPersistencePassQM', 'dirRadPersistenceNAQM', 'dirRadStepFailQM', 'dirRadStepPassQM', 'dirRadStepNAQM', 'dirRadNullFailQM', 'dirRadNullPassQM', 'dirRadNullNAQM', 'dirRadGapFailQM', 'dirRadGapPassQM', 'dirRadGapNAQM', 'dirRadSpikeFailQM', 'dirRadSpikePassQM', 'dirRadSpikeNAQM', 'dirRadConsistencyFailQM', 'dirRadConsistencyPassQM', 'dirRadConsistencyNAQM', 'dirRadAlphaQM', 'dirRadBetaQM', 'dirRadFinalQF', 'gloRadMean', 'gloRadMinimum', 'gloRadMaximum', 'gloRadVariance', 'gloRadNumPts', 'gloRadExpUncert', 'gloRadStdErMean', 'gloRadRangeQAQCRpt', 'gloRadPersistenceQAQCRpt', 'gloRadStepQAQCRpt', 'gloRadNullQAQCRpt', 'gloRadGapQAQCRpt', 'gloRadConsistencyQAQCRpt', 'gloRadSpikeQAQCRpt', 'gloRadAlphaQAQCRpt', 'gloRadBetaQAQCRpt', 'gloRadRangeFailQM', 'gloRadRangePassQM', 'gloRadRangeNAQM', 'gloRadPersistenceFailQM', 'gloRadPersistencePassQM', 'gloRadPersistenceNAQM', 'gloRadStepFailQM', 'gloRadStepPassQM', 'gloRadStepNAQM', 'gloRadNullFailQM', 'gloRadNullPassQM', 'gloRadNullNAQM', 'gloRadGapFailQM', 'gloRadGapPassQM', 'gloRadGapNAQM', 'gloRadSpikeFailQM', 'gloRadSpikePassQM', 'gloRadSpikeNAQM', 'gloRadConsistencyFailQM', 'gloRadConsistencyPassQM', 'gloRadConsistencyNAQM', 'gloRadAlphaQM', 'gloRadBetaQM', 'gloRadFinalQF', 'sunPres', 'sunPresNumPts', 'dirRadDirectionalQAQCRpt', 'dirRadDirectionalFailQM', 'dirRadDirectionalPassQM', 'dirRadDirectionalNAQM', 'startDateTime', 'endDateTime', 'difRadValidCalFailQM', 'difRadValidCalNAQM', 'difRadValidCalPassQM', 'difRadValidCalQAQCRpt', 'dirRadValidCalFailQM', 'dirRadValidCalNAQM', 'dirRadValidCalPassQM', 'dirRadValidCalQAQCRpt', 'gloRadValidCalFailQM', 'gloRadValidCalNAQM', 'gloRadValidCalPassQM', 'gloRadValidCalQAQCRpt', 'difRadFinalQFSciRvw', 'dirRadFinalQFSciRvw', 'gloRadFinalQFSciRvw'], 'in_subset': ['DP1.00014.001']}, 'SRDDP_30min': {'class_uri': 'neon:SRDDP_30min', 'slots': ['difRadMean', 'difRadMinimum', 'difRadMaximum', 'difRadVariance', 'difRadNumPts', 'difRadExpUncert', 'difRadStdErMean', 'difRadRangeFailQM', 'difRadRangePassQM', 'difRadRangeNAQM', 'difRadPersistenceFailQM', 'difRadPersistencePassQM', 'difRadPersistenceNAQM', 'difRadStepFailQM', 'difRadStepPassQM', 'difRadStepNAQM', 'difRadNullFailQM', 'difRadNullPassQM', 'difRadNullNAQM', 'difRadGapFailQM', 'difRadGapPassQM', 'difRadGapNAQM', 'difRadSpikeFailQM', 'difRadSpikePassQM', 'difRadSpikeNAQM', 'difRadConsistencyFailQM', 'difRadConsistencyPassQM', 'difRadConsistencyNAQM', 'difRadAlphaQM', 'difRadBetaQM', 'difRadFinalQF', 'dirRadMean', 'dirRadMinimum', 'dirRadMaximum', 'dirRadVariance', 'dirRadNumPts', 'dirRadExpUncert', 'dirRadStdErMean', 'dirRadRangeFailQM', 'dirRadRangePassQM', 'dirRadRangeNAQM', 'dirRadPersistenceFailQM', 'dirRadPersistencePassQM', 'dirRadPersistenceNAQM', 'dirRadStepFailQM', 'dirRadStepPassQM', 'dirRadStepNAQM', 'dirRadNullFailQM', 'dirRadNullPassQM', 'dirRadNullNAQM', 'dirRadGapFailQM', 'dirRadGapPassQM', 'dirRadGapNAQM', 'dirRadSpikeFailQM', 'dirRadSpikePassQM', 'dirRadSpikeNAQM', 'dirRadConsistencyFailQM', 'dirRadConsistencyPassQM', 'dirRadConsistencyNAQM', 'dirRadAlphaQM', 'dirRadBetaQM', 'dirRadFinalQF', 'gloRadMean', 'gloRadMinimum', 'gloRadMaximum', 'gloRadVariance', 'gloRadNumPts', 'gloRadExpUncert', 'gloRadStdErMean', 'gloRadRangeFailQM', 'gloRadRangePassQM', 'gloRadRangeNAQM', 'gloRadPersistenceFailQM', 'gloRadPersistencePassQM', 'gloRadPersistenceNAQM', 'gloRadStepFailQM', 'gloRadStepPassQM', 'gloRadStepNAQM', 'gloRadNullFailQM', 'gloRadNullPassQM', 'gloRadNullNAQM', 'gloRadGapFailQM', 'gloRadGapPassQM', 'gloRadGapNAQM', 'gloRadSpikeFailQM', 'gloRadSpikePassQM', 'gloRadSpikeNAQM', 'gloRadConsistencyFailQM', 'gloRadConsistencyPassQM', 'gloRadConsistencyNAQM', 'gloRadAlphaQM', 'gloRadBetaQM', 'gloRadFinalQF', 'sunPres', 'sunPresNumPts', 'dirRadDirectionalFailQM', 'dirRadDirectionalPassQM', 'dirRadDirectionalNAQM', 'startDateTime', 'endDateTime', 'difRadValidCalFailQM', 'difRadValidCalNAQM', 'difRadValidCalPassQM', 'dirRadValidCalFailQM', 'dirRadValidCalNAQM', 'dirRadValidCalPassQM', 'gloRadValidCalFailQM', 'gloRadValidCalNAQM', 'gloRadValidCalPassQM', 'difRadFinalQFSciRvw', 'dirRadFinalQFSciRvw', 'gloRadFinalQFSciRvw'], 'in_subset': []}, 'RHbuoy_1min': {'class_uri': 'neon:RHbuoy_1min', 'slots': ['RHMean', 'RHMinimum', 'RHMaximum', 'RHVariance', 'RHNumPts', 'RHExpUncert', 'RHStdErMean', 'RHRangeQAQCRpt', 'RHPersistenceQAQCRpt', 'RHStepQAQCRpt', 'RHNullQAQCRpt', 'RHGapQAQCRpt', 'RHConsistencyQAQCRpt', 'RHSpikeQAQCRpt', 'RHAlphaQAQCRpt', 'RHBetaQAQCRpt', 'RHRangeFailQM', 'RHRangePassQM', 'RHRangeNAQM', 'RHPersistenceFailQM', 'RHPersistencePassQM', 'RHPersistenceNAQM', 'RHStepFailQM', 'RHStepPassQM', 'RHStepNAQM', 'RHNullFailQM', 'RHNullPassQM', 'RHNullNAQM', 'RHGapFailQM', 'RHGapPassQM', 'RHGapNAQM', 'RHSpikeFailQM', 'RHSpikePassQM', 'RHSpikeNAQM', 'RHConsistencyFailQM', 'RHConsistencyPassQM', 'RHConsistencyNAQM', 'RHAlphaQM', 'RHBetaQM', 'RHFinalQF', 'tempRHMean', 'tempRHMinimum', 'tempRHMaximum', 'tempRHVariance', 'tempRHNumPts', 'tempRHExpUncert', 'tempRHStdErMean', 'tempRHRangeQAQCRpt', 'tempRHPersistenceQAQCRpt', 'tempRHStepQAQCRpt', 'tempRHNullQAQCRpt', 'tempRHGapQAQCRpt', 'tempRHConsistencyQAQCRpt', 'tempRHSpikeQAQCRpt', 'tempRHAlphaQAQCRpt', 'tempRHBetaQAQCRpt', 'tempRHRangeFailQM', 'tempRHRangePassQM', 'tempRHRangeNAQM', 'tempRHPersistenceFailQM', 'tempRHPersistencePassQM', 'tempRHPersistenceNAQM', 'tempRHStepFailQM', 'tempRHStepPassQM', 'tempRHStepNAQM', 'tempRHNullFailQM', 'tempRHNullPassQM', 'tempRHNullNAQM', 'tempRHGapFailQM', 'tempRHGapPassQM', 'tempRHGapNAQM', 'tempRHSpikeFailQM', 'tempRHSpikePassQM', 'tempRHSpikeNAQM', 'tempRHConsistencyFailQM', 'tempRHConsistencyPassQM', 'tempRHConsistencyNAQM', 'tempRHAlphaQM', 'tempRHBetaQM', 'tempRHFinalQF', 'dewTempMean', 'dewTempMinimum', 'dewTempMaximum', 'dewTempVariance', 'dewTempNumPts', 'dewTempExpUncert', 'dewTempStdErMean', 'dewTempRangeQAQCRpt', 'dewTempPersistenceQAQCRpt', 'dewTempStepQAQCRpt', 'dewTempNullQAQCRpt', 'dewTempGapQAQCRpt', 'dewTempConsistencyQAQCRpt', 'dewTempSpikeQAQCRpt', 'dewTempAlphaQAQCRpt', 'dewTempBetaQAQCRpt', 'dewTempRangeFailQM', 'dewTempRangePassQM', 'dewTempRangeNAQM', 'dewTempPersistenceFailQM', 'dewTempPersistencePassQM', 'dewTempPersistenceNAQM', 'dewTempStepFailQM', 'dewTempStepPassQM', 'dewTempStepNAQM', 'dewTempNullFailQM', 'dewTempNullPassQM', 'dewTempNullNAQM', 'dewTempGapFailQM', 'dewTempGapPassQM', 'dewTempGapNAQM', 'dewTempSpikeFailQM', 'dewTempSpikePassQM', 'dewTempSpikeNAQM', 'dewTempConsistencyFailQM', 'dewTempConsistencyPassQM', 'dewTempConsistencyNAQM', 'dewTempAlphaQM', 'dewTempBetaQM', 'dewTempFinalQF', 'RHSensorErrorFailQM', 'RHSensorErrorPassQM', 'RHSensorErrorNAQM', 'RHSensorErrorQAQCRpt', 'startDateTime', 'endDateTime', 'dewTempFinalQFSciRvw', 'RHFinalQFSciRvw', 'tempRHFinalQFSciRvw', 'dewTempValidCalFailQM', 'dewTempValidCalNAQM', 'dewTempValidCalPassQM', 'dewTempValidCalQAQCRpt', 'RHValidCalFailQM', 'RHValidCalNAQM', 'RHValidCalPassQM', 'RHValidCalQAQCRpt', 'tempRHValidCalFailQM', 'tempRHValidCalNAQM', 'tempRHValidCalPassQM', 'tempRHValidCalQAQCRpt'], 'in_subset': ['DP1.20271.001', 'DP1.20046.001']}, 'RHbuoy_30min': {'class_uri': 'neon:RHbuoy_30min', 'slots': ['RHMean', 'RHMinimum', 'RHMaximum', 'RHVariance', 'RHNumPts', 'RHExpUncert', 'RHStdErMean', 'RHRangeFailQM', 'RHRangePassQM', 'RHRangeNAQM', 'RHPersistenceFailQM', 'RHPersistencePassQM', 'RHPersistenceNAQM', 'RHStepFailQM', 'RHStepPassQM', 'RHStepNAQM', 'RHNullFailQM', 'RHNullPassQM', 'RHNullNAQM', 'RHGapFailQM', 'RHGapPassQM', 'RHGapNAQM', 'RHSpikeFailQM', 'RHSpikePassQM', 'RHSpikeNAQM', 'RHConsistencyFailQM', 'RHConsistencyPassQM', 'RHConsistencyNAQM', 'RHAlphaQM', 'RHBetaQM', 'RHFinalQF', 'tempRHMean', 'tempRHMinimum', 'tempRHMaximum', 'tempRHVariance', 'tempRHNumPts', 'tempRHExpUncert', 'tempRHStdErMean', 'tempRHRangeFailQM', 'tempRHRangePassQM', 'tempRHRangeNAQM', 'tempRHPersistenceFailQM', 'tempRHPersistencePassQM', 'tempRHPersistenceNAQM', 'tempRHStepFailQM', 'tempRHStepPassQM', 'tempRHStepNAQM', 'tempRHNullFailQM', 'tempRHNullPassQM', 'tempRHNullNAQM', 'tempRHGapFailQM', 'tempRHGapPassQM', 'tempRHGapNAQM', 'tempRHSpikeFailQM', 'tempRHSpikePassQM', 'tempRHSpikeNAQM', 'tempRHConsistencyFailQM', 'tempRHConsistencyPassQM', 'tempRHConsistencyNAQM', 'tempRHAlphaQM', 'tempRHBetaQM', 'tempRHFinalQF', 'dewTempMean', 'dewTempMinimum', 'dewTempMaximum', 'dewTempVariance', 'dewTempNumPts', 'dewTempExpUncert', 'dewTempStdErMean', 'dewTempRangeFailQM', 'dewTempRangePassQM', 'dewTempRangeNAQM', 'dewTempPersistenceFailQM', 'dewTempPersistencePassQM', 'dewTempPersistenceNAQM', 'dewTempStepFailQM', 'dewTempStepPassQM', 'dewTempStepNAQM', 'dewTempNullFailQM', 'dewTempNullPassQM', 'dewTempNullNAQM', 'dewTempGapFailQM', 'dewTempGapPassQM', 'dewTempGapNAQM', 'dewTempSpikeFailQM', 'dewTempSpikePassQM', 'dewTempSpikeNAQM', 'dewTempConsistencyFailQM', 'dewTempConsistencyPassQM', 'dewTempConsistencyNAQM', 'dewTempAlphaQM', 'dewTempBetaQM', 'dewTempFinalQF', 'RHSensorErrorFailQM', 'RHSensorErrorPassQM', 'RHSensorErrorNAQM', 'startDateTime', 'endDateTime', 'dewTempFinalQFSciRvw', 'RHFinalQFSciRvw', 'tempRHFinalQFSciRvw', 'dewTempValidCalFailQM', 'dewTempValidCalNAQM', 'dewTempValidCalPassQM', 'RHValidCalFailQM', 'RHValidCalNAQM', 'RHValidCalPassQM', 'tempRHValidCalFailQM', 'tempRHValidCalNAQM', 'tempRHValidCalPassQM'], 'in_subset': []}, 'RH_1min': {'class_uri': 'neon:RH_1min', 'slots': ['RHMean', 'RHMinimum', 'RHMaximum', 'RHVariance', 'RHNumPts', 'RHExpUncert', 'RHStdErMean', 'RHRangeQAQCRpt', 'RHPersistenceQAQCRpt', 'RHStepQAQCRpt', 'RHNullQAQCRpt', 'RHGapQAQCRpt', 'RHConsistencyQAQCRpt', 'RHSpikeQAQCRpt', 'RHAlphaQAQCRpt', 'RHBetaQAQCRpt', 'RHRangeFailQM', 'RHRangePassQM', 'RHRangeNAQM', 'RHPersistenceFailQM', 'RHPersistencePassQM', 'RHPersistenceNAQM', 'RHStepFailQM', 'RHStepPassQM', 'RHStepNAQM', 'RHNullFailQM', 'RHNullPassQM', 'RHNullNAQM', 'RHGapFailQM', 'RHGapPassQM', 'RHGapNAQM', 'RHSpikeFailQM', 'RHSpikePassQM', 'RHSpikeNAQM', 'RHConsistencyFailQM', 'RHConsistencyPassQM', 'RHConsistencyNAQM', 'RHAlphaQM', 'RHBetaQM', 'RHFinalQF', 'tempRHMean', 'tempRHMinimum', 'tempRHMaximum', 'tempRHVariance', 'tempRHNumPts', 'tempRHExpUncert', 'tempRHStdErMean', 'tempRHRangeQAQCRpt', 'tempRHPersistenceQAQCRpt', 'tempRHStepQAQCRpt', 'tempRHNullQAQCRpt', 'tempRHGapQAQCRpt', 'tempRHConsistencyQAQCRpt', 'tempRHSpikeQAQCRpt', 'tempRHAlphaQAQCRpt', 'tempRHBetaQAQCRpt', 'tempRHRangeFailQM', 'tempRHRangePassQM', 'tempRHRangeNAQM', 'tempRHPersistenceFailQM', 'tempRHPersistencePassQM', 'tempRHPersistenceNAQM', 'tempRHStepFailQM', 'tempRHStepPassQM', 'tempRHStepNAQM', 'tempRHNullFailQM', 'tempRHNullPassQM', 'tempRHNullNAQM', 'tempRHGapFailQM', 'tempRHGapPassQM', 'tempRHGapNAQM', 'tempRHSpikeFailQM', 'tempRHSpikePassQM', 'tempRHSpikeNAQM', 'tempRHConsistencyFailQM', 'tempRHConsistencyPassQM', 'tempRHConsistencyNAQM', 'tempRHAlphaQM', 'tempRHBetaQM', 'tempRHFinalQF', 'dewTempMean', 'dewTempMinimum', 'dewTempMaximum', 'dewTempVariance', 'dewTempNumPts', 'dewTempExpUncert', 'dewTempStdErMean', 'dewTempRangeQAQCRpt', 'dewTempPersistenceQAQCRpt', 'dewTempStepQAQCRpt', 'dewTempNullQAQCRpt', 'dewTempGapQAQCRpt', 'dewTempConsistencyQAQCRpt', 'dewTempSpikeQAQCRpt', 'dewTempAlphaQAQCRpt', 'dewTempBetaQAQCRpt', 'dewTempRangeFailQM', 'dewTempRangePassQM', 'dewTempRangeNAQM', 'dewTempPersistenceFailQM', 'dewTempPersistencePassQM', 'dewTempPersistenceNAQM', 'dewTempStepFailQM', 'dewTempStepPassQM', 'dewTempStepNAQM', 'dewTempNullFailQM', 'dewTempNullPassQM', 'dewTempNullNAQM', 'dewTempGapFailQM', 'dewTempGapPassQM', 'dewTempGapNAQM', 'dewTempSpikeFailQM', 'dewTempSpikePassQM', 'dewTempSpikeNAQM', 'dewTempConsistencyFailQM', 'dewTempConsistencyPassQM', 'dewTempConsistencyNAQM', 'dewTempAlphaQM', 'dewTempBetaQM', 'dewTempFinalQF', 'RHSensorErrorFailQM', 'RHSensorErrorPassQM', 'RHSensorErrorNAQM', 'RHSensorErrorQAQCRpt', 'startDateTime', 'endDateTime', 'dewTempFinalQFSciRvw', 'RHFinalQFSciRvw', 'tempRHFinalQFSciRvw', 'dewTempValidCalFailQM', 'dewTempValidCalNAQM', 'dewTempValidCalPassQM', 'dewTempValidCalQAQCRpt', 'RHValidCalFailQM', 'RHValidCalNAQM', 'RHValidCalPassQM', 'RHValidCalQAQCRpt', 'tempRHValidCalFailQM', 'tempRHValidCalNAQM', 'tempRHValidCalPassQM', 'tempRHValidCalQAQCRpt'], 'in_subset': ['DP1.00098.001']}, 'RH_30min': {'class_uri': 'neon:RH_30min', 'slots': ['RHMean', 'RHMinimum', 'RHMaximum', 'RHVariance', 'RHNumPts', 'RHExpUncert', 'RHStdErMean', 'RHRangeFailQM', 'RHRangePassQM', 'RHRangeNAQM', 'RHPersistenceFailQM', 'RHPersistencePassQM', 'RHPersistenceNAQM', 'RHStepFailQM', 'RHStepPassQM', 'RHStepNAQM', 'RHNullFailQM', 'RHNullPassQM', 'RHNullNAQM', 'RHGapFailQM', 'RHGapPassQM', 'RHGapNAQM', 'RHSpikeFailQM', 'RHSpikePassQM', 'RHSpikeNAQM', 'RHConsistencyFailQM', 'RHConsistencyPassQM', 'RHConsistencyNAQM', 'RHAlphaQM', 'RHBetaQM', 'RHFinalQF', 'tempRHMean', 'tempRHMinimum', 'tempRHMaximum', 'tempRHVariance', 'tempRHNumPts', 'tempRHExpUncert', 'tempRHStdErMean', 'tempRHRangeFailQM', 'tempRHRangePassQM', 'tempRHRangeNAQM', 'tempRHPersistenceFailQM', 'tempRHPersistencePassQM', 'tempRHPersistenceNAQM', 'tempRHStepFailQM', 'tempRHStepPassQM', 'tempRHStepNAQM', 'tempRHNullFailQM', 'tempRHNullPassQM', 'tempRHNullNAQM', 'tempRHGapFailQM', 'tempRHGapPassQM', 'tempRHGapNAQM', 'tempRHSpikeFailQM', 'tempRHSpikePassQM', 'tempRHSpikeNAQM', 'tempRHConsistencyFailQM', 'tempRHConsistencyPassQM', 'tempRHConsistencyNAQM', 'tempRHAlphaQM', 'tempRHBetaQM', 'tempRHFinalQF', 'dewTempMean', 'dewTempMinimum', 'dewTempMaximum', 'dewTempVariance', 'dewTempNumPts', 'dewTempExpUncert', 'dewTempStdErMean', 'dewTempRangeFailQM', 'dewTempRangePassQM', 'dewTempRangeNAQM', 'dewTempPersistenceFailQM', 'dewTempPersistencePassQM', 'dewTempPersistenceNAQM', 'dewTempStepFailQM', 'dewTempStepPassQM', 'dewTempStepNAQM', 'dewTempNullFailQM', 'dewTempNullPassQM', 'dewTempNullNAQM', 'dewTempGapFailQM', 'dewTempGapPassQM', 'dewTempGapNAQM', 'dewTempSpikeFailQM', 'dewTempSpikePassQM', 'dewTempSpikeNAQM', 'dewTempConsistencyFailQM', 'dewTempConsistencyPassQM', 'dewTempConsistencyNAQM', 'dewTempAlphaQM', 'dewTempBetaQM', 'dewTempFinalQF', 'RHSensorErrorFailQM', 'RHSensorErrorPassQM', 'RHSensorErrorNAQM', 'startDateTime', 'endDateTime', 'dewTempFinalQFSciRvw', 'RHFinalQFSciRvw', 'tempRHFinalQFSciRvw', 'dewTempValidCalFailQM', 'dewTempValidCalNAQM', 'dewTempValidCalPassQM', 'RHValidCalFailQM', 'RHValidCalNAQM', 'RHValidCalPassQM', 'tempRHValidCalFailQM', 'tempRHValidCalNAQM', 'tempRHValidCalPassQM'], 'in_subset': []}, 'THRPRE_1min': {'class_uri': 'neon:THRPRE_1min', 'slots': ['TFPrecipBulk', 'TFPrecipExpUncert', 'TFPrecipRangeQF', 'startDateTime', 'endDateTime', 'TFPrecipSciRvwQF', 'TFPrecipValidCalQF'], 'in_subset': []}, 'THRPRE_30min': {'class_uri': 'neon:THRPRE_30min', 'slots': ['TFPrecipBulk', 'TFPrecipExpUncert', 'TFPrecipRangeQF', 'startDateTime', 'endDateTime', 'TFPrecipSciRvwQF', 'TFPrecipValidCalQF'], 'in_subset': []}, 'SWS_1_minute': {'class_uri': 'neon:SWS_1_minute', 'slots': ['VSWCMean', 'VSWCMinimum', 'VSWCMaximum', 'VSWCVariance', 'VSWCNumPts', 'VSWCExpUncert', 'VSWCStdErMean', 'VSWCRangeQAQCRpt', 'VSWCPersistenceQAQCRpt', 'VSWCStepQAQCRpt', 'VSWCNullQAQCRpt', 'VSWCGapQAQCRpt', 'VSWCConsistencyQAQCRpt', 'VSWCSpikeQAQCRpt', 'VSWCAlphaQAQCRpt', 'VSWCBetaQAQCRpt', 'VSWCRangeFailQM', 'VSWCRangePassQM', 'VSWCRangeNAQM', 'VSWCPersistenceFailQM', 'VSWCPersistencePassQM', 'VSWCPersistenceNAQM', 'VSWCStepFailQM', 'VSWCStepPassQM', 'VSWCStepNAQM', 'VSWCNullFailQM', 'VSWCNullPassQM', 'VSWCNullNAQM', 'VSWCGapFailQM', 'VSWCGapPassQM', 'VSWCGapNAQM', 'VSWCSpikeFailQM', 'VSWCSpikePassQM', 'VSWCSpikeNAQM', 'VSWCConsistencyFailQM', 'VSWCConsistencyPassQM', 'VSWCConsistencyNAQM', 'VSWCAlphaQM', 'VSWCBetaQM', 'VSWCFinalQF', 'VSICMean', 'VSICMinimum', 'VSICMaximum', 'VSICVariance', 'VSICNumPts', 'VSICExpUncert', 'VSICStdErMean', 'VSICRangeQAQCRpt', 'VSICPersistenceQAQCRpt', 'VSICStepQAQCRpt', 'VSICNullQAQCRpt', 'VSICGapQAQCRpt', 'VSICConsistencyQAQCRpt', 'VSICSpikeQAQCRpt', 'VSICAlphaQAQCRpt', 'VSICBetaQAQCRpt', 'VSICRangeFailQM', 'VSICRangePassQM', 'VSICRangeNAQM', 'VSICPersistenceFailQM', 'VSICPersistencePassQM', 'VSICPersistenceNAQM', 'VSICStepFailQM', 'VSICStepPassQM', 'VSICStepNAQM', 'VSICNullFailQM', 'VSICNullPassQM', 'VSICNullNAQM', 'VSICGapFailQM', 'VSICGapPassQM', 'VSICGapNAQM', 'VSICSpikeFailQM', 'VSICSpikePassQM', 'VSICSpikeNAQM', 'VSICConsistencyFailQM', 'VSICConsistencyPassQM', 'VSICConsistencyNAQM', 'VSICAlphaQM', 'VSICBetaQM', 'VSICFinalQF', 'tempQAQCRpt', 'tempFailQM', 'tempPassQM', 'tempNAQM', 'startDateTime', 'endDateTime', 'calQAQCRpt', 'calDefaultQM', 'calNEONQM', 'calNAQM', 'VSICFinalQFSciRvw', 'VSICValidCalFailQM', 'VSICValidCalNAQM', 'VSICValidCalPassQM', 'VSICValidCalQAQCRpt', 'VSWCFinalQFSciRvw', 'VSWCValidCalFailQM', 'VSWCValidCalNAQM', 'VSWCValidCalPassQM', 'VSWCValidCalQAQCRpt'], 'in_subset': ['DP1.00094.001']}, 'SWS_30_minute': {'class_uri': 'neon:SWS_30_minute', 'slots': ['VSWCMean', 'VSWCMinimum', 'VSWCMaximum', 'VSWCVariance', 'VSWCNumPts', 'VSWCExpUncert', 'VSWCStdErMean', 'VSWCRangeFailQM', 'VSWCRangePassQM', 'VSWCRangeNAQM', 'VSWCPersistenceFailQM', 'VSWCPersistencePassQM', 'VSWCPersistenceNAQM', 'VSWCStepFailQM', 'VSWCStepPassQM', 'VSWCStepNAQM', 'VSWCNullFailQM', 'VSWCNullPassQM', 'VSWCNullNAQM', 'VSWCGapFailQM', 'VSWCGapPassQM', 'VSWCGapNAQM', 'VSWCSpikeFailQM', 'VSWCSpikePassQM', 'VSWCSpikeNAQM', 'VSWCConsistencyFailQM', 'VSWCConsistencyPassQM', 'VSWCConsistencyNAQM', 'VSWCAlphaQM', 'VSWCBetaQM', 'VSWCFinalQF', 'VSICMean', 'VSICMinimum', 'VSICMaximum', 'VSICVariance', 'VSICNumPts', 'VSICExpUncert', 'VSICStdErMean', 'VSICRangeFailQM', 'VSICRangePassQM', 'VSICRangeNAQM', 'VSICPersistenceFailQM', 'VSICPersistencePassQM', 'VSICPersistenceNAQM', 'VSICStepFailQM', 'VSICStepPassQM', 'VSICStepNAQM', 'VSICNullFailQM', 'VSICNullPassQM', 'VSICNullNAQM', 'VSICGapFailQM', 'VSICGapPassQM', 'VSICGapNAQM', 'VSICSpikeFailQM', 'VSICSpikePassQM', 'VSICSpikeNAQM', 'VSICConsistencyFailQM', 'VSICConsistencyPassQM', 'VSICConsistencyNAQM', 'VSICAlphaQM', 'VSICBetaQM', 'VSICFinalQF', 'tempFailQM', 'tempPassQM', 'tempNAQM', 'startDateTime', 'endDateTime', 'calDefaultQM', 'calNEONQM', 'calNAQM', 'VSICFinalQFSciRvw', 'VSICValidCalFailQM', 'VSICValidCalNAQM', 'VSICValidCalPassQM', 'VSWCFinalQFSciRvw', 'VSWCValidCalFailQM', 'VSWCValidCalNAQM', 'VSWCValidCalPassQM'], 'in_subset': []}, 'waterQuality': {'class_uri': 'neon:waterQuality', 'slots': ['specificConductance', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'conductance', 'batteryVoltage', 'surfaceWaterTemperature', 'sensorVoltage', 'pH', 'pHvoltage', 'blueGreenAlgaePhycocyanin', 'chlorophyll', 'fDOM', 'turbidity', 'sondeSurfaceWaterPressure', 'sensorDepth', 'chlorophyllRaw', 'blueGreenAlgaeRaw', 'fDOMRaw', 'turbidityRaw', 'wiperPosition', 'sondeValve'], 'in_subset': ['DP0.20005.001']}, 'waq_instantaneous_pub': {'class_uri': 'neon:waq_instantaneous_pub', 'slots': ['specificConductance', 'startDate', 'endDate', 'dissolvedOxygen', 'dissolvedOxygenSaturation', 'pH', 'chlorophyll', 'fDOM', 'turbidity', 'sensorDepth', 'sensorDepthValidCalQF', 'specificConductanceValidCalQF', 'buoyNAFlag', 'chlorophyllAlphaQF', 'chlorophyllBetaQF', 'chlorophyllConsistQF', 'chlorophyllExpUncert', 'chlorophyllFinalQF', 'chlorophyllFinalQFSciRvw', 'chlorophyllGapQF', 'chlorophyllNullQF', 'chlorophyllPersistenceQF', 'chlorophyllRangeQF', 'chlorophyllSpikeQF', 'chlorophyllStepQF', 'chlorophyllValidCalQF', 'dissolvedOxygenAlphaQF', 'dissolvedOxygenBetaQF', 'dissolvedOxygenConsistQF', 'dissolvedOxygenExpUncert', 'dissolvedOxygenFinalQF', 'dissolvedOxygenFinalQFSciRvw', 'dissolvedOxygenGapQF', 'dissolvedOxygenNullQF', 'dissolvedOxygenPersistenceQF', 'dissolvedOxygenRangeQF', 'dissolvedOxygenSatAlphaQF', 'dissolvedOxygenSatBetaQF', 'dissolvedOxygenSatConsistQF', 'dissolvedOxygenSatExpUncert', 'dissolvedOxygenSatFinalQF', 'dissolvedOxygenSatFinalQFSciRvw', 'dissolvedOxygenSatGapQF', 'dissolvedOxygenSatNullQF', 'dissolvedOxygenSatPersistQF', 'dissolvedOxygenSatRangeQF', 'dissolvedOxygenSatSpikeQF', 'dissolvedOxygenSatStepQF', 'dissolvedOxygenSatValidCalQF', 'dissolvedOxygenSpikeQF', 'dissolvedOxygenStepQF', 'dissolvedOxygenValidCalQF', 'fDOMAbsQF', 'fDOMAlphaQF', 'fDOMBetaQF', 'fDOMConsistQF', 'fDOMExpUncert', 'fDOMFinalQF', 'fDOMFinalQFSciRvw', 'fDOMGapQF', 'fDOMNullQF', 'fDOMPersistenceQF', 'fDOMRangeQF', 'fDOMSpikeQF', 'fDOMStepQF', 'fDOMTempQF', 'fDOMValidCalQF', 'pHAlphaQF', 'pHBetaQF', 'pHConsistQF', 'pHExpUncert', 'pHFinalQF', 'pHFinalQFSciRvw', 'pHGapQF', 'pHNullQF', 'pHPersistenceQF', 'pHRangeQF', 'pHSpikeQF', 'pHStepQF', 'pHValidCalQF', 'sensorDepthExpUncert', 'sensorDepthFinalQFSciRvw', 'specificCondFinalQFSciRvw', 'specificConductanceAlphaQF', 'specificConductanceBetaQF', 'specificConductanceConsistQF', 'specificConductanceExpUncert', 'specificCondFinalQF', 'specificConductanceGapQF', 'specificConductanceNullQF', 'specificConductancePersistQF', 'specificConductanceRangeQF', 'specificConductanceSpikeQF', 'specificConductanceStepQF', 'turbidityAlphaQF', 'turbidityBetaQF', 'turbidityConsistQF', 'turbidityExpUncert', 'turbidityFinalQF', 'turbidityFinalQFSciRvw', 'turbidityGapQF', 'turbidityNullQF', 'turbidityPersistenceQF', 'turbidityRangeQF', 'turbiditySpikeQF', 'turbidityStepQF', 'turbidityValidCalQF', 'sensorDepthAlphaQF', 'sensorDepthBetaQF', 'sensorDepthConsistQF', 'sensorDepthGapQF', 'sensorDepthNullQF', 'sensorDepthPersistQF', 'sensorDepthRangeQF', 'spectrumCount', 'rawCalibratedfDOM', 'chlorophyllSuspectCalQF', 'dissolvedOxygenSuspectCalQF', 'dissOxygenSatSuspectCalQF', 'fDOMSuspectCalQF', 'pHSuspectCalQF', 'sensorDepthSuspectCalQF', 'specificCondSuspectCalQF', 'turbiditySuspectCalQF', 'sensorDepthFinalQF'], 'in_subset': ['DP1.20288.001']}, '2DWSD': {'class_uri': 'neon:2DWSD', 'slots': ['uVectorComponent', 'vVectorComponent', 'soundSpeed', 'sensorTemp', '2dWindSensorStatus'], 'in_subset': ['DP0.00001.001']}, '2DWSD_L0prime': {'class_uri': 'neon:2DWSD_L0prime', 'slots': ['uVectorComponent', 'vVectorComponent', 'soundSpeed', 'sensorTemp', '2dWindSensorStatus'], 'in_subset': ['IP0.00001.001']}, 'barPres': {'class_uri': 'neon:barPres', 'slots': ['sensorTemp', 'rawBarometricPressure', 'sensorStatus'], 'in_subset': ['DP0.00004.001']}, 'RH': {'class_uri': 'neon:RH', 'slots': ['sensorTemp', 'RH', 'dewPoint', 'RHStatus'], 'in_subset': ['DP0.00098.001']}, 'dpm_sensor_in': {'class_uri': 'neon:dpm_sensor_in', 'slots': ['sensorTemp', 'baroPressParticulateMass', 'flowRate', 'corrAirVolume', 'uncorrAirVolume'], 'in_subset': ['DP0.00101.001']}, 'barPresBuoy': {'class_uri': 'neon:barPresBuoy', 'slots': ['sensorTemp', 'rawBarometricPressure', 'sensorStatus'], 'in_subset': ['DP0.20004.001']}, 'RHBuoy': {'class_uri': 'neon:RHBuoy', 'slots': ['sensorTemp', 'RH', 'dewPoint', 'RHStatus'], 'in_subset': ['DP0.20271.001']}, 'RH_L0prime': {'class_uri': 'neon:RH_L0prime', 'slots': ['sensorTemp', 'RH', 'dewPoint', 'RHStatus', 'qfHeat'], 'in_subset': ['IP0.00098.001']}, 'IRBioTemp': {'class_uri': 'neon:IRBioTemp', 'slots': ['infraredThermopileOutput', 'sensorResistance'], 'in_subset': ['DP0.00005.001']}, 'SLRNR': {'class_uri': 'neon:SLRNR', 'slots': ['sensorResistance', 'inNetRadPyranometer', 'outNetRadPyranometer', 'inNetRadPyrgeometer', 'outNetRadPyrgeometer', 'heaterFlag'], 'in_subset': ['DP0.00023.001']}, 'netRadBuoy': {'class_uri': 'neon:netRadBuoy', 'slots': ['sensorResistance', 'inNetRadPyranometer', 'outNetRadPyranometer', 'inNetRadPyrgeometer', 'outNetRadPyrgeometer', 'heaterFlag'], 'in_subset': ['DP0.20032.001']}, 'SAAT': {'class_uri': 'neon:SAAT', 'slots': ['heaterFlag', 'PRTResistance', 'fanSpeed', 'turbineSpeed'], 'in_subset': ['DP0.00002.001']}, 'TAAT': {'class_uri': 'neon:TAAT', 'slots': ['heaterFlag', 'PRTResistance', 'fanSpeed', 'turbineSpeed'], 'in_subset': ['DP0.00003.001']}, 'soni': {'class_uri': 'neon:soni', 'slots': ['heaterFlag', 'veloXaxs', 'veloYaxs', 'veloZaxs', 'idx', 'tempTranTop', 'tempArmTop', 'tempArmBot', 'tempTranBot', 'tempBloc', 'diag16', 'veloSoni'], 'in_subset': ['DP0.00007.001']}, 'SAAT_L0prime': {'class_uri': 'neon:SAAT_L0prime', 'slots': ['heaterFlag', 'PRTResistance', 'fanSpeed', 'turbineSpeed'], 'in_subset': ['IP0.00002.001']}, 'soni_L0prime': {'class_uri': 'neon:soni_L0prime', 'slots': ['heaterFlag', 'veloXaxs', 'veloYaxs', 'veloZaxs', 'idx', 'veloSoni', 'tempSoni', 'qfSoniCode', 'voucherStatus', 'qfSoniSignalLow', 'qfSoniUnrs', 'qfSoniData', 'qfSoniTrig', 'qfSoniComm', 'qfSoniTemp', 'qfSoniSignalPoor', 'qfSoniSignalHigh'], 'in_subset': ['IP0.00007.001']}, 'TAAT_L0prime': {'class_uri': 'neon:TAAT_L0prime', 'slots': ['heaterFlag', 'PRTResistance', 'fanSpeed', 'turbineSpeed'], 'in_subset': ['IP0.00003.001']}, 'PAR': {'class_uri': 'neon:PAR', 'slots': ['inPAR', 'outPAR'], 'in_subset': ['DP0.00024.001']}, 'PARWS': {'class_uri': 'neon:PARWS', 'slots': ['inPAR', 'outPAR'], 'in_subset': ['DP0.20042.001']}, 'UPAR': {'class_uri': 'neon:UPAR', 'slots': ['inPAR', 'outPAR'], 'in_subset': ['DP0.20261.001']}, 'PRE': {'class_uri': 'neon:PRE', 'slots': ['secPrecipBucketTips', 'TFPrecipBucketTips', 'strainGauge1Stability', 'strainGauge1Temp', 'strainGauge1FreqRaw', 'strainGauge1Weight', 'totalGaugeWeight', 'totalPrecipDepth', 'inletTemp', 'internalTemp', 'precipAccumulationRate', 'strainGauge1FreqComp', 'orificeHeaterFlag', 'strainGauge2Stability', 'strainGauge3Stability', 'strainGauge2Temp', 'strainGauge3Temp', 'strainGauge2FreqRaw', 'strainGauge3FreqRaw', 'strainGauge2Weight', 'strainGauge3Weight', 'strainGauge2FreqComp', 'strainGauge3FreqComp', 'heaterMonitor'], 'in_subset': ['DP0.00006.001']}, 'SRPP': {'class_uri': 'neon:SRPP', 'slots': ['pyranometerOutput', 'PRTResistance', 'fanSpeed', 'heater1Flag', 'heater2Flag'], 'in_subset': ['DP0.00022.001']}, 'TSW': {'class_uri': 'neon:TSW', 'slots': ['PRTResistance'], 'in_subset': ['DP0.20053.001']}, 'PARQL': {'class_uri': 'neon:PARQL', 'slots': ['linePAR'], 'in_subset': ['DP0.00066.001']}, 'SPH': {'class_uri': 'neon:SPH', 'slots': ['spectralPhotometerK7'], 'in_subset': ['DP0.00043.001']}, 'swRad': {'class_uri': 'neon:swRad', 'slots': ['rawShortwaveRadiationGlobal', 'rawShortwaveRadiationDiffuse', 'sunPresence'], 'in_subset': ['DP0.00014.001']}, 'aquTroll': {'class_uri': 'neon:aquTroll', 'slots': ['conductance', 'batteryVoltage', 'conductanceDataQualityID', 'groundwaterTemp', 'tempDataQualityID', 'groundwaterPressure', 'pressureDataQualityID'], 'in_subset': ['DP0.20015.001']}, 'swConTempPres': {'class_uri': 'neon:swConTempPres', 'slots': ['conductance', 'batteryVoltage', 'conductanceDataQualityID', 'groundwaterTemp', 'tempDataQualityID', 'groundwaterPressure', 'pressureDataQualityID'], 'in_subset': ['DP0.20054.001']}, 'levelTroll': {'class_uri': 'neon:levelTroll', 'slots': ['batteryVoltage', 'tempDataQualityID', 'pressureDataQualityID', 'surfaceWaterTemperature', 'surfaceWaterPressure'], 'in_subset': ['DP0.20016.001']}, 'TGW_5_minute': {'class_uri': 'neon:TGW_5_minute', 'slots': ['groundwaterTemp', 'startDateTime', 'endDateTime', 'groundwaterTempExpUncert', 'groundwaterTempRangeQF', 'groundwaterTempPersistenceQF', 'groundwaterTempStepQF', 'groundwaterTempNullQF', 'groundwaterTempGapQF', 'groundwaterTempConsistencyQF', 'groundwaterTempSpikeQF', 'validCalQF', 'sciRvwQF'], 'in_subset': ['DP1.20217.001']}, 'SCGW_30_minute': {'class_uri': 'neon:SCGW_30_minute', 'slots': ['startDateTime', 'endDateTime', 'groundwaterSpecCondExpUncert', 'groundwaterSpecCondMean', 'groundwaterSpecCondMinimum', 'groundwaterSpecCondMaximum', 'groundwaterSpecCondVariance', 'groundwaterSpecCondNumPts', 'groundwaterSpecCondStdErMean', 'gWatSCondRangeFailQM', 'gWatSCondRangePassQM', 'gWatSCondRangeNAQM', 'gWatSCondPersistenceFailQM', 'gWatSCondPersistencePassQM', 'gWatSCondPersistenceNAQM', 'gWatSCondStepFailQM', 'gWatSCondStepPassQM', 'gWatSCondStepNAQM', 'gWatSCondNullFailQM', 'gWatSCondNullPassQM', 'gWatSCondNullNAQM', 'gWatSCondGapFailQM', 'gWatSCondGapPassQM', 'gWatSCondGapNAQM', 'gWatSCondSpikeFailQM', 'gWatSCondSpikePassQM', 'gWatSCondSpikeNAQM', 'gWatSCondConsistencyFailQM', 'gWatSCondConsistencyPassQM', 'gWatSCondConsistencyNAQM', 'gWatSCondAlphaQM', 'gWatSCondBetaQM', 'gWatSCondFinalQF', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'gWatSCondFinalQFSciRvw'], 'in_subset': ['DP1.20015.001']}, 'EOG_5_min': {'class_uri': 'neon:EOG_5_min', 'slots': ['startDateTime', 'endDateTime', 'groundwaterElev', 'groundwaterElevExpUncert', 'groundwaterElevRangeQF', 'groundwaterElevPersistQF', 'groundwaterElevStepQF', 'groundwaterElevNullQF', 'groundwaterElevGapQF', 'groundwaterElevConsistQF', 'groundwaterElevSpikeQF', 'validCalQF', 'sciRvwQF'], 'in_subset': ['DP1.20100.001']}, 'EOG_30_min': {'class_uri': 'neon:EOG_30_min', 'slots': ['startDateTime', 'endDateTime', 'groundwaterElevExpUncert', 'groundwaterElevMean', 'groundwaterElevMinimum', 'groundwaterElevMaximum', 'groundwaterElevVariance', 'groundwaterElevNumPts', 'groundwaterElevStdErMean', 'gWatElevRangeFailQM', 'gWatElevRangePassQM', 'gWatElevRangeNAQM', 'gWatElevPersistenceFailQM', 'gWatElevPersistencePassQM', 'gWatElevPersistenceNAQM', 'gWatElevStepFailQM', 'gWatElevStepPassQM', 'gWatElevStepNAQM', 'gWatElevNullFailQM', 'gWatElevNullPassQM', 'gWatElevNullNAQM', 'gWatElevGapFailQM', 'gWatElevGapPassQM', 'gWatElevGapNAQM', 'gWatElevSpikeFailQM', 'gWatElevSpikePassQM', 'gWatElevSpikeNAQM', 'gWatElevConsistencyFailQM', 'gWatElevConsistencyPassQM', 'gWatElevConsistencyNAQM', 'gWatElevAlphaQM', 'gWatElevBetaQM', 'gWatElevFinalQF', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'gWatElevFinalQFSciRvw'], 'in_subset': []}, 'TGW_30_minute': {'class_uri': 'neon:TGW_30_minute', 'slots': ['startDateTime', 'endDateTime', 'groundwaterTempExpUncert', 'groundwaterTempMean', 'groundwaterTempMinimum', 'groundwaterTempMaximum', 'groundwaterTempVariance', 'groundwaterTempNumPts', 'groundwaterTempStdErMean', 'gWatTempRangeFailQM', 'gWatTempRangePassQM', 'gWatTempRangeNAQM', 'gWatTempPersistenceFailQM', 'gWatTempPersistencePassQM', 'gWatTempPersistenceNAQM', 'gWatTempStepFailQM', 'gWatTempStepPassQM', 'gWatTempStepNAQM', 'gWatTempNullFailQM', 'gWatTempNullPassQM', 'gWatTempNullNAQM', 'gWatTempGapFailQM', 'gWatTempGapPassQM', 'gWatTempGapNAQM', 'gWatTempSpikeFailQM', 'gWatTempSpikePassQM', 'gWatTempSpikeNAQM', 'gWatTempConsistencyFailQM', 'gWatTempConsistencyPassQM', 'gWatTempConsistencyNAQM', 'gWatTempAlphaQM', 'gWatTempBetaQM', 'gWatTempFinalQF', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'gWatTempFinalQFSciRvw'], 'in_subset': []}, 'EOS_5_min': {'class_uri': 'neon:EOS_5_min', 'slots': ['startDateTime', 'endDateTime', 'surfacewaterElevMean', 'surfacewaterElevMinimum', 'surfacewaterElevMaximum', 'surfacewaterElevVariance', 'surfacewaterElevNumPts', 'surfacewaterElevExpUncert', 'surfacewaterElevStdErMean', 'sWatElevRangeFailQM', 'sWatElevRangePassQM', 'sWatElevRangeNAQM', 'sWatElevPersistenceFailQM', 'sWatElevPersistencePassQM', 'sWatElevPersistenceNAQM', 'sWatElevStepFailQM', 'sWatElevStepPassQM', 'sWatElevStepNAQM', 'sWatElevNullFailQM', 'sWatElevNullPassQM', 'sWatElevNullNAQM', 'sWatElevGapFailQM', 'sWatElevGapPassQM', 'sWatElevGapNAQM', 'sWatElevSpikeFailQM', 'sWatElevSpikePassQM', 'sWatElevSpikeNAQM', 'sWatElevConsistencyFailQM', 'sWatElevConsistencyPassQM', 'sWatElevConsistencyNAQM', 'sWatElevAlphaQM', 'sWatElevBetaQM', 'sWatElevFinalQF', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'tempRHValidCalQAQCRpt', 'sWatElevFinalQFSciRvw'], 'in_subset': ['DP1.20016.001']}, 'EOS_30_min': {'class_uri': 'neon:EOS_30_min', 'slots': ['startDateTime', 'endDateTime', 'surfacewaterElevMean', 'surfacewaterElevMinimum', 'surfacewaterElevMaximum', 'surfacewaterElevVariance', 'surfacewaterElevNumPts', 'surfacewaterElevExpUncert', 'surfacewaterElevStdErMean', 'sWatElevRangeFailQM', 'sWatElevRangePassQM', 'sWatElevRangeNAQM', 'sWatElevPersistenceFailQM', 'sWatElevPersistencePassQM', 'sWatElevPersistenceNAQM', 'sWatElevStepFailQM', 'sWatElevStepPassQM', 'sWatElevStepNAQM', 'sWatElevNullFailQM', 'sWatElevNullPassQM', 'sWatElevNullNAQM', 'sWatElevGapFailQM', 'sWatElevGapPassQM', 'sWatElevGapNAQM', 'sWatElevSpikeFailQM', 'sWatElevSpikePassQM', 'sWatElevSpikeNAQM', 'sWatElevConsistencyFailQM', 'sWatElevConsistencyPassQM', 'sWatElevConsistencyNAQM', 'sWatElevAlphaQM', 'sWatElevBetaQM', 'sWatElevFinalQF', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'tempRHValidCalQAQCRpt', 'sWatElevFinalQFSciRvw'], 'in_subset': []}, 'dpsd_30_minutes': {'class_uri': 'neon:dpsd_30_minutes', 'slots': ['startDateTime', 'endDateTime', 'PM15Median', 'PM15Minimum', 'PM15Maximum', 'PM15NumPts', 'PM15MAD', 'PM15rangeFailQM', 'PM15rangePassQM', 'PM15rangeNAQM', 'PM15persistenceFailQM', 'PM15persistencePassQM', 'PM15persistenceNAQM', 'PM15stepFailQM', 'PM15stepPassQM', 'PM15stepNAQM', 'PM15nullFailQM', 'PM15nullPassQM', 'PM15nullNAQM', 'PM15gapFailQM', 'PM15gapPassQM', 'PM15gapNAQM', 'PM15spikeFailQM', 'PM15spikePassQM', 'PM15spikeNAQM', 'PM15consistencyFailQM', 'PM15consistencyPassQM', 'PM15consistencyNAQM', 'PM15alphaQM', 'PM15betaQM', 'PM15finalQF', 'PM10Median', 'PM10Minimum', 'PM10Maximum', 'PM10NumPts', 'PM10MAD', 'PM10rangeFailQM', 'PM10rangePassQM', 'PM10rangeNAQM', 'PM10persistenceFailQM', 'PM10persistencePassQM', 'PM10persistenceNAQM', 'PM10stepFailQM', 'PM10stepPassQM', 'PM10stepNAQM', 'PM10nullFailQM', 'PM10nullPassQM', 'PM10nullNAQM', 'PM10gapFailQM', 'PM10gapPassQM', 'PM10gapNAQM', 'PM10spikeFailQM', 'PM10spikePassQM', 'PM10spikeNAQM', 'PM10consistencyFailQM', 'PM10consistencyPassQM', 'PM10consistencyNAQM', 'PM10alphaQM', 'PM10betaQM', 'PM10finalQF', 'PM4Median', 'PM4Minimum', 'PM4Maximum', 'PM4NumPts', 'PM4MAD', 'PM4rangeFailQM', 'PM4rangePassQM', 'PM4rangeNAQM', 'PM4persistenceFailQM', 'PM4persistencePassQM', 'PM4persistenceNAQM', 'PM4stepFailQM', 'PM4stepPassQM', 'PM4stepNAQM', 'PM4nullFailQM', 'PM4nullPassQM', 'PM4nullNAQM', 'PM4gapFailQM', 'PM4gapPassQM', 'PM4gapNAQM', 'PM4spikeFailQM', 'PM4spikePassQM', 'PM4spikeNAQM', 'PM4consistencyFailQM', 'PM4consistencyPassQM', 'PM4consistencyNAQM', 'PM4alphaQM', 'PM4betaQM', 'PM4finalQF', 'PM2.5Median', 'PM2.5Minimum', 'PM2.5Maximum', 'PM2.5NumPts', 'PM2.5MAD', 'PM2.5rangeFailQM', 'PM2.5rangePassQM', 'PM2.5rangeNAQM', 'PM2.5persistenceFailQM', 'PM2.5persistencePassQM', 'PM2.5persistenceNAQM', 'PM2.5stepFailQM', 'PM2.5stepPassQM', 'PM2.5stepNAQM', 'PM2.5nullFailQM', 'PM2.5nullPassQM', 'PM2.5nullNAQM', 'PM2.5gapFailQM', 'PM2.5gapPassQM', 'PM2.5gapNAQM', 'PM2.5spikeFailQM', 'PM2.5spikePassQM', 'PM2.5spikeNAQM', 'PM2.5consistencyFailQM', 'PM2.5consistencyPassQM', 'PM2.5consistencyNAQM', 'PM2.5alphaQM', 'PM2.5betaQM', 'PM2.5finalQF', 'PM1Median', 'PM1Minimum', 'PM1Maximum', 'PM1NumPts', 'PM1MAD', 'PM1rangeFailQM', 'PM1rangePassQM', 'PM1rangeNAQM', 'PM1persistenceFailQM', 'PM1persistencePassQM', 'PM1persistenceNAQM', 'PM1stepFailQM', 'PM1stepPassQM', 'PM1stepNAQM', 'PM1nullFailQM', 'PM1nullPassQM', 'PM1nullNAQM', 'PM1gapFailQM', 'PM1gapPassQM', 'PM1gapNAQM', 'PM1spikeFailQM', 'PM1spikePassQM', 'PM1spikeNAQM', 'PM1consistencyFailQM', 'PM1consistencyPassQM', 'PM1consistencyNAQM', 'PM1alphaQM', 'PM1betaQM', 'PM1finalQF', 'PM15sub50RHMedian', 'PM15sub50RHMinimum', 'PM15sub50RHMaximum', 'PM15sub50RHNumPts', 'PM15sub50RHMAD', 'PM15sub50RHrangeFailQM', 'PM15sub50RHrangePassQM', 'PM15sub50RHrangeNAQM', 'PM15sub50RHpersistenceFailQM', 'PM15sub50RHpersistencePassQM', 'PM15sub50RHpersistenceNAQM', 'PM15sub50RHstepFailQM', 'PM15sub50RHstepPassQM', 'PM15sub50RHstepNAQM', 'PM15sub50RHnullFailQM', 'PM15sub50RHnullPassQM', 'PM15sub50RHnullNAQM', 'PM15sub50RHgapFailQM', 'PM15sub50RHgapPassQM', 'PM15sub50RHgapNAQM', 'PM15sub50RHspikeFailQM', 'PM15sub50RHspikePassQM', 'PM15sub50RHspikeNAQM', 'PM15sub50RHconsistencyFailQM', 'PM15sub50RHconsistencyPassQM', 'PM15sub50RHconsistencyNAQM', 'PM15sub50RHalphaQM', 'PM15sub50RHbetaQM', 'PM15sub50RHfinalQF', 'PM10sub50RHMedian', 'PM10sub50RHMinimum', 'PM10sub50RHMaximum', 'PM10sub50RHNumPts', 'PM10sub50RHMAD', 'PM10sub50RHrangeFailQM', 'PM10sub50RHrangePassQM', 'PM10sub50RHrangeNAQM', 'PM10sub50RHpersistenceFailQM', 'PM10sub50RHpersistencePassQM', 'PM10sub50RHpersistenceNAQM', 'PM10sub50RHstepFailQM', 'PM10sub50RHstepPassQM', 'PM10sub50RHstepNAQM', 'PM10sub50RHnullFailQM', 'PM10sub50RHnullPassQM', 'PM10sub50RHnullNAQM', 'PM10sub50RHgapFailQM', 'PM10sub50RHgapPassQM', 'PM10sub50RHgapNAQM', 'PM10sub50RHspikeFailQM', 'PM10sub50RHspikePassQM', 'PM10sub50RHspikeNAQM', 'PM10sub50RHconsistencyFailQM', 'PM10sub50RHconsistencyPassQM', 'PM10sub50RHconsistencyNAQM', 'PM10sub50RHalphaQM', 'PM10sub50RHbetaQM', 'PM10sub50RHfinalQF', 'PM4sub50RHMedian', 'PM4sub50RHMinimum', 'PM4sub50RHMaximum', 'PM4sub50RHNumPts', 'PM4sub50RHMAD', 'PM4sub50RHrangeFailQM', 'PM4sub50RHrangePassQM', 'PM4sub50RHrangeNAQM', 'PM4sub50RHpersistenceFailQM', 'PM4sub50RHpersistencePassQM', 'PM4sub50RHpersistenceNAQM', 'PM4sub50RHstepFailQM', 'PM4sub50RHstepPassQM', 'PM4sub50RHstepNAQM', 'PM4sub50RHnullFailQM', 'PM4sub50RHnullPassQM', 'PM4sub50RHnullNAQM', 'PM4sub50RHgapFailQM', 'PM4sub50RHgapPassQM', 'PM4sub50RHgapNAQM', 'PM4sub50RHspikeFailQM', 'PM4sub50RHspikePassQM', 'PM4sub50RHspikeNAQM', 'PM4sub50RHconsistencyFailQM', 'PM4sub50RHconsistencyPassQM', 'PM4sub50RHconsistencyNAQM', 'PM4sub50RHalphaQM', 'PM4sub50RHbetaQM', 'PM4sub50RHfinalQF', 'PM2.5sub50RHMedian', 'PM2.5sub50RHMinimum', 'PM2.5sub50RHMaximum', 'PM2.5sub50RHNumPts', 'PM2.5sub50RHMAD', 'PM2.5sub50RHrangeFailQM', 'PM2.5sub50RHrangePassQM', 'PM2.5sub50RHrangeNAQM', 'PM2.5sub50RHpersistenceFailQM', 'PM2.5sub50RHpersistencePassQM', 'PM2.5sub50RHpersistenceNAQM', 'PM2.5sub50RHstepFailQM', 'PM2.5sub50RHstepPassQM', 'PM2.5sub50RHstepNAQM', 'PM2.5sub50RHnullFailQM', 'PM2.5sub50RHnullPassQM', 'PM2.5sub50RHnullNAQM', 'PM2.5sub50RHgapFailQM', 'PM2.5sub50RHgapPassQM', 'PM2.5sub50RHgapNAQM', 'PM2.5sub50RHspikeFailQM', 'PM2.5sub50RHspikePassQM', 'PM2.5sub50RHspikeNAQM', 'PM2.5sub50RHconsistencyFailQM', 'PM2.5sub50RHconsistencyPassQM', 'PM2.5sub50RHconsistencyNAQM', 'PM2.5sub50RHalphaQM', 'PM2.5sub50RHbetaQM', 'PM2.5sub50RHfinalQF', 'PM1sub50RHMedian', 'PM1sub50RHMinimum', 'PM1sub50RHMaximum', 'PM1sub50RHNumPts', 'PM1sub50RHMAD', 'PM1sub50RHrangeFailQM', 'PM1sub50RHrangePassQM', 'PM1sub50RHrangeNAQM', 'PM1sub50RHpersistenceFailQM', 'PM1sub50RHpersistencePassQM', 'PM1sub50RHpersistenceNAQM', 'PM1sub50RHstepFailQM', 'PM1sub50RHstepPassQM', 'PM1sub50RHstepNAQM', 'PM1sub50RHnullFailQM', 'PM1sub50RHnullPassQM', 'PM1sub50RHnullNAQM', 'PM1sub50RHgapFailQM', 'PM1sub50RHgapPassQM', 'PM1sub50RHgapNAQM', 'PM1sub50RHspikeFailQM', 'PM1sub50RHspikePassQM', 'PM1sub50RHspikeNAQM', 'PM1sub50RHconsistencyFailQM', 'PM1sub50RHconsistencyPassQM', 'PM1sub50RHconsistencyNAQM', 'PM1sub50RHalphaQM', 'PM1sub50RHbetaQM', 'PM1sub50RHfinalQF', 'sensorFlowRateFailQM', 'sensorFlowRatePassQM', 'sensorFlowRateNAQM', 'assemblyFlowRateFailQM', 'assemblyFlowRatePassQM', 'assemblyFlowRateNAQM', 'measurementValidityFailQM', 'measurementValidityPassQM', 'measurementValidityNAQM', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'PM15finalQFSciRvw', 'PM10finalQFSciRvw', 'PM10sub50RHfinalQFSciRvw', 'PM15sub50RHfinalQFSciRvw', 'PM1finalQFSciRvw', 'PM1sub50RHfinalQFSciRvw', 'PM2.5finalQFSciRvw', 'PM2.5sub50RHfinalQFSciRvw', 'PM4finalQFSciRvw', 'PM4sub50RHfinalQFSciRvw'], 'in_subset': ['DP1.00017.001']}, 'dpsd_60_minutes': {'class_uri': 'neon:dpsd_60_minutes', 'slots': ['startDateTime', 'endDateTime', 'PM15Median', 'PM15Minimum', 'PM15Maximum', 'PM15NumPts', 'PM15MAD', 'PM15rangeFailQM', 'PM15rangePassQM', 'PM15rangeNAQM', 'PM15persistenceFailQM', 'PM15persistencePassQM', 'PM15persistenceNAQM', 'PM15stepFailQM', 'PM15stepPassQM', 'PM15stepNAQM', 'PM15nullFailQM', 'PM15nullPassQM', 'PM15nullNAQM', 'PM15gapFailQM', 'PM15gapPassQM', 'PM15gapNAQM', 'PM15spikeFailQM', 'PM15spikePassQM', 'PM15spikeNAQM', 'PM15consistencyFailQM', 'PM15consistencyPassQM', 'PM15consistencyNAQM', 'PM15alphaQM', 'PM15betaQM', 'PM15finalQF', 'PM10Median', 'PM10Minimum', 'PM10Maximum', 'PM10NumPts', 'PM10MAD', 'PM10rangeFailQM', 'PM10rangePassQM', 'PM10rangeNAQM', 'PM10persistenceFailQM', 'PM10persistencePassQM', 'PM10persistenceNAQM', 'PM10stepFailQM', 'PM10stepPassQM', 'PM10stepNAQM', 'PM10nullFailQM', 'PM10nullPassQM', 'PM10nullNAQM', 'PM10gapFailQM', 'PM10gapPassQM', 'PM10gapNAQM', 'PM10spikeFailQM', 'PM10spikePassQM', 'PM10spikeNAQM', 'PM10consistencyFailQM', 'PM10consistencyPassQM', 'PM10consistencyNAQM', 'PM10alphaQM', 'PM10betaQM', 'PM10finalQF', 'PM4Median', 'PM4Minimum', 'PM4Maximum', 'PM4NumPts', 'PM4MAD', 'PM4rangeFailQM', 'PM4rangePassQM', 'PM4rangeNAQM', 'PM4persistenceFailQM', 'PM4persistencePassQM', 'PM4persistenceNAQM', 'PM4stepFailQM', 'PM4stepPassQM', 'PM4stepNAQM', 'PM4nullFailQM', 'PM4nullPassQM', 'PM4nullNAQM', 'PM4gapFailQM', 'PM4gapPassQM', 'PM4gapNAQM', 'PM4spikeFailQM', 'PM4spikePassQM', 'PM4spikeNAQM', 'PM4consistencyFailQM', 'PM4consistencyPassQM', 'PM4consistencyNAQM', 'PM4alphaQM', 'PM4betaQM', 'PM4finalQF', 'PM2.5Median', 'PM2.5Minimum', 'PM2.5Maximum', 'PM2.5NumPts', 'PM2.5MAD', 'PM2.5rangeFailQM', 'PM2.5rangePassQM', 'PM2.5rangeNAQM', 'PM2.5persistenceFailQM', 'PM2.5persistencePassQM', 'PM2.5persistenceNAQM', 'PM2.5stepFailQM', 'PM2.5stepPassQM', 'PM2.5stepNAQM', 'PM2.5nullFailQM', 'PM2.5nullPassQM', 'PM2.5nullNAQM', 'PM2.5gapFailQM', 'PM2.5gapPassQM', 'PM2.5gapNAQM', 'PM2.5spikeFailQM', 'PM2.5spikePassQM', 'PM2.5spikeNAQM', 'PM2.5consistencyFailQM', 'PM2.5consistencyPassQM', 'PM2.5consistencyNAQM', 'PM2.5alphaQM', 'PM2.5betaQM', 'PM2.5finalQF', 'PM1Median', 'PM1Minimum', 'PM1Maximum', 'PM1NumPts', 'PM1MAD', 'PM1rangeFailQM', 'PM1rangePassQM', 'PM1rangeNAQM', 'PM1persistenceFailQM', 'PM1persistencePassQM', 'PM1persistenceNAQM', 'PM1stepFailQM', 'PM1stepPassQM', 'PM1stepNAQM', 'PM1nullFailQM', 'PM1nullPassQM', 'PM1nullNAQM', 'PM1gapFailQM', 'PM1gapPassQM', 'PM1gapNAQM', 'PM1spikeFailQM', 'PM1spikePassQM', 'PM1spikeNAQM', 'PM1consistencyFailQM', 'PM1consistencyPassQM', 'PM1consistencyNAQM', 'PM1alphaQM', 'PM1betaQM', 'PM1finalQF', 'PM15sub50RHMedian', 'PM15sub50RHMinimum', 'PM15sub50RHMaximum', 'PM15sub50RHNumPts', 'PM15sub50RHMAD', 'PM15sub50RHrangeFailQM', 'PM15sub50RHrangePassQM', 'PM15sub50RHrangeNAQM', 'PM15sub50RHpersistenceFailQM', 'PM15sub50RHpersistencePassQM', 'PM15sub50RHpersistenceNAQM', 'PM15sub50RHstepFailQM', 'PM15sub50RHstepPassQM', 'PM15sub50RHstepNAQM', 'PM15sub50RHnullFailQM', 'PM15sub50RHnullPassQM', 'PM15sub50RHnullNAQM', 'PM15sub50RHgapFailQM', 'PM15sub50RHgapPassQM', 'PM15sub50RHgapNAQM', 'PM15sub50RHspikeFailQM', 'PM15sub50RHspikePassQM', 'PM15sub50RHspikeNAQM', 'PM15sub50RHconsistencyFailQM', 'PM15sub50RHconsistencyPassQM', 'PM15sub50RHconsistencyNAQM', 'PM15sub50RHalphaQM', 'PM15sub50RHbetaQM', 'PM15sub50RHfinalQF', 'PM10sub50RHMedian', 'PM10sub50RHMinimum', 'PM10sub50RHMaximum', 'PM10sub50RHNumPts', 'PM10sub50RHMAD', 'PM10sub50RHrangeFailQM', 'PM10sub50RHrangePassQM', 'PM10sub50RHrangeNAQM', 'PM10sub50RHpersistenceFailQM', 'PM10sub50RHpersistencePassQM', 'PM10sub50RHpersistenceNAQM', 'PM10sub50RHstepFailQM', 'PM10sub50RHstepPassQM', 'PM10sub50RHstepNAQM', 'PM10sub50RHnullFailQM', 'PM10sub50RHnullPassQM', 'PM10sub50RHnullNAQM', 'PM10sub50RHgapFailQM', 'PM10sub50RHgapPassQM', 'PM10sub50RHgapNAQM', 'PM10sub50RHspikeFailQM', 'PM10sub50RHspikePassQM', 'PM10sub50RHspikeNAQM', 'PM10sub50RHconsistencyFailQM', 'PM10sub50RHconsistencyPassQM', 'PM10sub50RHconsistencyNAQM', 'PM10sub50RHalphaQM', 'PM10sub50RHbetaQM', 'PM10sub50RHfinalQF', 'PM4sub50RHMedian', 'PM4sub50RHMinimum', 'PM4sub50RHMaximum', 'PM4sub50RHNumPts', 'PM4sub50RHMAD', 'PM4sub50RHrangeFailQM', 'PM4sub50RHrangePassQM', 'PM4sub50RHrangeNAQM', 'PM4sub50RHpersistenceFailQM', 'PM4sub50RHpersistencePassQM', 'PM4sub50RHpersistenceNAQM', 'PM4sub50RHstepFailQM', 'PM4sub50RHstepPassQM', 'PM4sub50RHstepNAQM', 'PM4sub50RHnullFailQM', 'PM4sub50RHnullPassQM', 'PM4sub50RHnullNAQM', 'PM4sub50RHgapFailQM', 'PM4sub50RHgapPassQM', 'PM4sub50RHgapNAQM', 'PM4sub50RHspikeFailQM', 'PM4sub50RHspikePassQM', 'PM4sub50RHspikeNAQM', 'PM4sub50RHconsistencyFailQM', 'PM4sub50RHconsistencyPassQM', 'PM4sub50RHconsistencyNAQM', 'PM4sub50RHalphaQM', 'PM4sub50RHbetaQM', 'PM4sub50RHfinalQF', 'PM2.5sub50RHMedian', 'PM2.5sub50RHMinimum', 'PM2.5sub50RHMaximum', 'PM2.5sub50RHNumPts', 'PM2.5sub50RHMAD', 'PM2.5sub50RHrangeFailQM', 'PM2.5sub50RHrangePassQM', 'PM2.5sub50RHrangeNAQM', 'PM2.5sub50RHpersistenceFailQM', 'PM2.5sub50RHpersistencePassQM', 'PM2.5sub50RHpersistenceNAQM', 'PM2.5sub50RHstepFailQM', 'PM2.5sub50RHstepPassQM', 'PM2.5sub50RHstepNAQM', 'PM2.5sub50RHnullFailQM', 'PM2.5sub50RHnullPassQM', 'PM2.5sub50RHnullNAQM', 'PM2.5sub50RHgapFailQM', 'PM2.5sub50RHgapPassQM', 'PM2.5sub50RHgapNAQM', 'PM2.5sub50RHspikeFailQM', 'PM2.5sub50RHspikePassQM', 'PM2.5sub50RHspikeNAQM', 'PM2.5sub50RHconsistencyFailQM', 'PM2.5sub50RHconsistencyPassQM', 'PM2.5sub50RHconsistencyNAQM', 'PM2.5sub50RHalphaQM', 'PM2.5sub50RHbetaQM', 'PM2.5sub50RHfinalQF', 'PM1sub50RHMedian', 'PM1sub50RHMinimum', 'PM1sub50RHMaximum', 'PM1sub50RHNumPts', 'PM1sub50RHMAD', 'PM1sub50RHrangeFailQM', 'PM1sub50RHrangePassQM', 'PM1sub50RHrangeNAQM', 'PM1sub50RHpersistenceFailQM', 'PM1sub50RHpersistencePassQM', 'PM1sub50RHpersistenceNAQM', 'PM1sub50RHstepFailQM', 'PM1sub50RHstepPassQM', 'PM1sub50RHstepNAQM', 'PM1sub50RHnullFailQM', 'PM1sub50RHnullPassQM', 'PM1sub50RHnullNAQM', 'PM1sub50RHgapFailQM', 'PM1sub50RHgapPassQM', 'PM1sub50RHgapNAQM', 'PM1sub50RHspikeFailQM', 'PM1sub50RHspikePassQM', 'PM1sub50RHspikeNAQM', 'PM1sub50RHconsistencyFailQM', 'PM1sub50RHconsistencyPassQM', 'PM1sub50RHconsistencyNAQM', 'PM1sub50RHalphaQM', 'PM1sub50RHbetaQM', 'PM1sub50RHfinalQF', 'sensorFlowRateFailQM', 'sensorFlowRatePassQM', 'sensorFlowRateNAQM', 'assemblyFlowRateFailQM', 'assemblyFlowRatePassQM', 'assemblyFlowRateNAQM', 'measurementValidityFailQM', 'measurementValidityPassQM', 'measurementValidityNAQM', 'validCalFailQM', 'validCalNAQM', 'validCalPassQM', 'PM15finalQFSciRvw', 'PM10finalQFSciRvw', 'PM10sub50RHfinalQFSciRvw', 'PM15sub50RHfinalQFSciRvw', 'PM1finalQFSciRvw', 'PM1sub50RHfinalQFSciRvw', 'PM2.5finalQFSciRvw', 'PM2.5sub50RHfinalQFSciRvw', 'PM4finalQFSciRvw', 'PM4sub50RHfinalQFSciRvw'], 'in_subset': []}, 'uPAR_1min': {'class_uri': 'neon:uPAR_1min', 'slots': ['startDateTime', 'endDateTime', 'outuPARAlphaQAQCRpt', 'outuPARAlphaQM', 'outuPARBetaQAQCRpt', 'outuPARBetaQM', 'outuPARConsistencyFailQM', 'outuPARConsistencyNAQM', 'outuPARConsistencyPassQM', 'outuPARConsistencyQAQCRpt', 'outuPARExpUncert', 'outuPARFinalQF', 'outuPARGapFailQM', 'outuPARGapNAQM', 'outuPARGapPassQM', 'outuPARGapQAQCRpt', 'outuPARMaximum', 'outuPARMean', 'outuPARMinimum', 'outuPARNullFailQM', 'outuPARNullNAQM', 'outuPARNullPassQM', 'outuPARNullQAQCRpt', 'outuPARNumPts', 'outuPARPersistenceFailQM', 'outuPARPersistenceNAQM', 'outuPARPersistencePassQM', 'outuPARPersistenceQAQCRpt', 'outuPARRangeFailQM', 'outuPARRangeNAQM', 'outuPARRangePassQM', 'outuPARRangeQAQCRpt', 'outuPARSpikeFailQM', 'outuPARSpikeNAQM', 'outuPARSpikePassQM', 'outuPARSpikeQAQCRpt', 'outuPARStdErMean', 'outuPARStepFailQM', 'outuPARStepNAQM', 'outuPARStepPassQM', 'outuPARStepQAQCRpt', 'outuPARValidCalFailQM', 'outuPARValidCalNAQM', 'outuPARValidCalPassQM', 'outuPARValidCalQAQCRpt', 'outuPARVariance', 'uPARAlphaQAQCRpt', 'uPARAlphaQM', 'uPARBetaQAQCRpt', 'uPARBetaQM', 'uPARConsistencyFailQM', 'uPARConsistencyNAQM', 'uPARConsistencyPassQM', 'uPARConsistencyQAQCRpt', 'uPARExpUncert', 'uPARFinalQF', 'uPARGapFailQM', 'uPARGapNAQM', 'uPARGapPassQM', 'uPARGapQAQCRpt', 'uPARMaximum', 'uPARMean', 'uPARMinimum', 'uPARNullFailQM', 'uPARNullNAQM', 'uPARNullPassQM', 'uPARNullQAQCRpt', 'uPARNumPts', 'uPARPersistenceFailQM', 'uPARPersistenceNAQM', 'uPARPersistencePassQM', 'uPARPersistenceQAQCRpt', 'uPARRangeFailQM', 'uPARRangeNAQM', 'uPARRangePassQM', 'uPARRangeQAQCRpt', 'uPARSpikeFailQM', 'uPARSpikeNAQM', 'uPARSpikePassQM', 'uPARSpikeQAQCRpt', 'uPARStdErMean', 'uPARStepFailQM', 'uPARStepNAQM', 'uPARStepPassQM', 'uPARStepQAQCRpt', 'uPARValidCalFailQM', 'uPARValidCalNAQM', 'uPARValidCalPassQM', 'uPARValidCalQAQCRpt', 'uPARVariance', 'outuPARFinalQFSciRvw', 'uPARFinalQFSciRvw'], 'in_subset': ['DP1.20261.001']}, 'uPAR_30min': {'class_uri': 'neon:uPAR_30min', 'slots': ['startDateTime', 'endDateTime', 'outuPARAlphaQM', 'outuPARBetaQM', 'outuPARConsistencyFailQM', 'outuPARConsistencyNAQM', 'outuPARConsistencyPassQM', 'outuPARExpUncert', 'outuPARFinalQF', 'outuPARGapFailQM', 'outuPARGapNAQM', 'outuPARGapPassQM', 'outuPARMaximum', 'outuPARMean', 'outuPARMinimum', 'outuPARNullFailQM', 'outuPARNullNAQM', 'outuPARNullPassQM', 'outuPARNumPts', 'outuPARPersistenceFailQM', 'outuPARPersistenceNAQM', 'outuPARPersistencePassQM', 'outuPARRangeFailQM', 'outuPARRangeNAQM', 'outuPARRangePassQM', 'outuPARSpikeFailQM', 'outuPARSpikeNAQM', 'outuPARSpikePassQM', 'outuPARStdErMean', 'outuPARStepFailQM', 'outuPARStepNAQM', 'outuPARStepPassQM', 'outuPARValidCalFailQM', 'outuPARValidCalNAQM', 'outuPARValidCalPassQM', 'outuPARVariance', 'uPARAlphaQM', 'uPARBetaQM', 'uPARConsistencyFailQM', 'uPARConsistencyNAQM', 'uPARConsistencyPassQM', 'uPARExpUncert', 'uPARFinalQF', 'uPARGapFailQM', 'uPARGapNAQM', 'uPARGapPassQM', 'uPARMaximum', 'uPARMean', 'uPARMinimum', 'uPARNullFailQM', 'uPARNullNAQM', 'uPARNullPassQM', 'uPARNumPts', 'uPARPersistenceFailQM', 'uPARPersistenceNAQM', 'uPARPersistencePassQM', 'uPARRangeFailQM', 'uPARRangeNAQM', 'uPARRangePassQM', 'uPARSpikeFailQM', 'uPARSpikeNAQM', 'uPARSpikePassQM', 'uPARStdErMean', 'uPARStepFailQM', 'uPARStepNAQM', 'uPARStepPassQM', 'uPARValidCalFailQM', 'uPARValidCalNAQM', 'uPARValidCalPassQM', 'uPARVariance', 'outuPARFinalQFSciRvw', 'uPARFinalQFSciRvw'], 'in_subset': []}, 'WSDBuoy_2min': {'class_uri': 'neon:WSDBuoy_2min', 'slots': ['startDateTime', 'endDateTime', 'buoyCompGapFailQM', 'buoyCompGapNAQM', 'buoyCompGapPassQM', 'buoyCompGapQAQCRpt', 'buoyCompNullFailQM', 'buoyCompNullNAQM', 'buoyCompNullPassQM', 'buoyCompNullQAQCRpt', 'buoyCompPersistenceFailQM', 'buoyCompPersistenceNAQM', 'buoyCompPersistencePassQM', 'buoyCompPersistenceQAQCRpt', 'buoyCompRangeFailQM', 'buoyCompRangeNAQM', 'buoyCompRangePassQM', 'buoyCompRangeQAQCRpt', 'buoyCompSpikeFailQM', 'buoyCompSpikeNAQM', 'buoyCompSpikePassQM', 'buoyCompSpikeQAQCRpt', 'buoyCompStepFailQM', 'buoyCompStepNAQM', 'buoyCompStepPassQM', 'buoyCompStepQAQCRpt', 'buoyWindDirAlphaQAQCRpt', 'buoyWindDirAlphaQM', 'buoyWindDirBetaQAQCRpt', 'buoyWindDirBetaQM', 'buoyWindDirCalmWindFailQM', 'buoyWindDirCalmWindNAQM', 'buoyWindDirCalmWindPassQM', 'buoyWindDirCalmWindQAQCRpt', 'buoyWindDirConsistencyFailQM', 'buoyWindDirConsistencyNAQM', 'buoyWindDirConsistencyPassQM', 'buoyWindDirConsistencyQAQCRpt', 'buoyWindDirDeadZoneFailQM', 'buoyWindDirDeadZoneNAQM', 'buoyWindDirDeadZonePassQM', 'buoyWindDirDeadZoneQAQCRpt', 'buoyWindDirExpUncert', 'buoyWindDirFinalQF', 'buoyWindDirFinalQFSciRvw', 'buoyWindDirGapFailQM', 'buoyWindDirGapNAQM', 'buoyWindDirGapPassQM', 'buoyWindDirGapQAQCRpt', 'buoyWindDirMean', 'buoyWindDirNullFailQM', 'buoyWindDirNullNAQM', 'buoyWindDirNullPassQM', 'buoyWindDirNullQAQCRpt', 'buoyWindDirNumPts', 'buoyWindDirPersistenceFailQM', 'buoyWindDirPersistenceNAQM', 'buoyWindDirPersistencePassQM', 'buoyWindDirPersistenceQAQCRpt', 'buoyWindDirRangeFailQM', 'buoyWindDirRangeNAQM', 'buoyWindDirRangePassQM', 'buoyWindDirRangeQAQCRpt', 'buoyWindDirSpikeFailQM', 'buoyWindDirSpikeNAQM', 'buoyWindDirSpikePassQM', 'buoyWindDirSpikeQAQCRpt', 'buoyWindDirStdErMean', 'buoyWindDirStepFailQM', 'buoyWindDirStepNAQM', 'buoyWindDirStepPassQM', 'buoyWindDirStepQAQCRpt', 'buoyWindDirValidCalFailQM', 'buoyWindDirValidCalNAQM', 'buoyWindDirValidCalPassQM', 'buoyWindDirValidCalQAQCRpt', 'buoyWindDirVariance', 'buoyWindSpeedAlphaQAQCRpt', 'buoyWindSpeedAlphaQM', 'buoyWindSpeedBetaQAQCRpt', 'buoyWindSpeedBetaQM', 'buoyWindSpeedConsistencyFailQM', 'buoyWindSpeedConsistencyNAQM', 'buoyWindSpeedConsistencyPassQM', 'buoyWindSpeedConsistencyQAQCRpt', 'buoyWindSpeedExpUncert', 'buoyWindSpeedFinalQF', 'buoyWindSpeedFinalQFSciRvw', 'buoyWindSpeedGapFailQM', 'buoyWindSpeedGapNAQM', 'buoyWindSpeedGapPassQM', 'buoyWindSpeedGapQAQCRpt', 'buoyWindSpeedMaximum', 'buoyWindSpeedMean', 'buoyWindSpeedMinimum', 'buoyWindSpeedNullFailQM', 'buoyWindSpeedNullNAQM', 'buoyWindSpeedNullPassQM', 'buoyWindSpeedNullQAQCRpt', 'buoyWindSpeedNumPts', 'buoyWindSpeedPersistenceFailQM', 'buoyWindSpeedPersistenceNAQM', 'buoyWindSpeedPersistencePassQM', 'buoyWindSpeedPersistenceQAQCRpt', 'buoyWindSpeedRangeFailQM', 'buoyWindSpeedRangeNAQM', 'buoyWindSpeedRangePassQM', 'buoyWindSpeedRangeQAQCRpt', 'buoyWindSpeedSpikeFailQM', 'buoyWindSpeedSpikeNAQM', 'buoyWindSpeedSpikePassQM', 'buoyWindSpeedSpikeQAQCRpt', 'buoyWindSpeedStdErMean', 'buoyWindSpeedStepFailQM', 'buoyWindSpeedStepNAQM', 'buoyWindSpeedStepPassQM', 'buoyWindSpeedStepQAQCRpt', 'buoyWindSpeedValidCalFailQM', 'buoyWindSpeedValidCalNAQM', 'buoyWindSpeedValidCalPassQM', 'buoyWindSpeedValidCalQAQCRpt', 'buoyWindSpeedVariance'], 'in_subset': ['DP1.20059.001']}, 'WSDBuoy_30min': {'class_uri': 'neon:WSDBuoy_30min', 'slots': ['startDateTime', 'endDateTime', 'buoyCompGapFailQM', 'buoyCompGapNAQM', 'buoyCompGapPassQM', 'buoyCompNullFailQM', 'buoyCompNullNAQM', 'buoyCompNullPassQM', 'buoyCompPersistenceFailQM', 'buoyCompPersistenceNAQM', 'buoyCompPersistencePassQM', 'buoyCompRangeFailQM', 'buoyCompRangeNAQM', 'buoyCompRangePassQM', 'buoyCompSpikeFailQM', 'buoyCompSpikeNAQM', 'buoyCompSpikePassQM', 'buoyCompStepFailQM', 'buoyCompStepNAQM', 'buoyCompStepPassQM', 'buoyWindDirAlphaQM', 'buoyWindDirBetaQM', 'buoyWindDirCalmWindFailQM', 'buoyWindDirCalmWindNAQM', 'buoyWindDirCalmWindPassQM', 'buoyWindDirConsistencyFailQM', 'buoyWindDirConsistencyNAQM', 'buoyWindDirConsistencyPassQM', 'buoyWindDirDeadZoneFailQM', 'buoyWindDirDeadZoneNAQM', 'buoyWindDirDeadZonePassQM', 'buoyWindDirExpUncert', 'buoyWindDirFinalQF', 'buoyWindDirFinalQFSciRvw', 'buoyWindDirGapFailQM', 'buoyWindDirGapNAQM', 'buoyWindDirGapPassQM', 'buoyWindDirMean', 'buoyWindDirNullFailQM', 'buoyWindDirNullNAQM', 'buoyWindDirNullPassQM', 'buoyWindDirNumPts', 'buoyWindDirPersistenceFailQM', 'buoyWindDirPersistenceNAQM', 'buoyWindDirPersistencePassQM', 'buoyWindDirRangeFailQM', 'buoyWindDirRangeNAQM', 'buoyWindDirRangePassQM', 'buoyWindDirSpikeFailQM', 'buoyWindDirSpikeNAQM', 'buoyWindDirSpikePassQM', 'buoyWindDirStdErMean', 'buoyWindDirStepFailQM', 'buoyWindDirStepNAQM', 'buoyWindDirStepPassQM', 'buoyWindDirValidCalFailQM', 'buoyWindDirValidCalNAQM', 'buoyWindDirValidCalPassQM', 'buoyWindDirVariance', 'buoyWindSpeedAlphaQM', 'buoyWindSpeedBetaQM', 'buoyWindSpeedConsistencyFailQM', 'buoyWindSpeedConsistencyNAQM', 'buoyWindSpeedConsistencyPassQM', 'buoyWindSpeedExpUncert', 'buoyWindSpeedFinalQF', 'buoyWindSpeedFinalQFSciRvw', 'buoyWindSpeedGapFailQM', 'buoyWindSpeedGapNAQM', 'buoyWindSpeedGapPassQM', 'buoyWindSpeedMaximum', 'buoyWindSpeedMean', 'buoyWindSpeedMinimum', 'buoyWindSpeedNullFailQM', 'buoyWindSpeedNullNAQM', 'buoyWindSpeedNullPassQM', 'buoyWindSpeedNumPts', 'buoyWindSpeedPersistenceFailQM', 'buoyWindSpeedPersistenceNAQM', 'buoyWindSpeedPersistencePassQM', 'buoyWindSpeedRangeFailQM', 'buoyWindSpeedRangeNAQM', 'buoyWindSpeedRangePassQM', 'buoyWindSpeedSpikeFailQM', 'buoyWindSpeedSpikeNAQM', 'buoyWindSpeedSpikePassQM', 'buoyWindSpeedStdErMean', 'buoyWindSpeedStepFailQM', 'buoyWindSpeedStepNAQM', 'buoyWindSpeedStepPassQM', 'buoyWindSpeedValidCalFailQM', 'buoyWindSpeedValidCalNAQM', 'buoyWindSpeedValidCalPassQM', 'buoyWindSpeedVariance'], 'in_subset': []}, 'TSD_30_min': {'class_uri': 'neon:TSD_30_min', 'slots': ['startDateTime', 'endDateTime', 'thermistorDepth', 'tsdWaterTempAlphaQM', 'tsdWaterTempBetaQM', 'tsdWaterTempConsistencyFailQM', 'tsdWaterTempConsistencyNAQM', 'tsdWaterTempConsistencyPassQM', 'tsdWaterTempExpUncert', 'tsdWaterTempFinalQF', 'tsdWaterTempGapFailQM', 'tsdWaterTempGapNAQM', 'tsdWaterTempGapPassQM', 'tsdWaterTempMaximum', 'tsdWaterTempMean', 'tsdWaterTempMinimum', 'tsdWaterTempNullFailQM', 'tsdWaterTempNullNAQM', 'tsdWaterTempNullPassQM', 'tsdWaterTempNumPts', 'tsdWaterTempRangeFailQM', 'tsdWaterTempRangeNAQM', 'tsdWaterTempRangePassQM', 'tsdWaterTempSpikeFailQM', 'tsdWaterTempSpikeNAQM', 'tsdWaterTempSpikePassQM', 'tsdWaterTempStdErMean', 'tsdWaterTempStepFailQM', 'tsdWaterTempStepNAQM', 'tsdWaterTempStepPassQM', 'tsdWaterTempValidCalFailQM', 'tsdWaterTempValidCalNAQM', 'tsdWaterTempValidCalPassQM', 'tsdWaterTempVariance', 'tsdWaterTempFinalQFSciRvw'], 'in_subset': ['DP1.20264.001']}, 'TSD_1_min': {'class_uri': 'neon:TSD_1_min', 'slots': ['startDateTime', 'endDateTime', 'thermistorDepth', 'tsdWaterTemp', 'tsdWaterTempConsistQF', 'tsdWaterTempExpUncert', 'tsdWaterTempGapQF', 'tsdWaterTempNullQF', 'tsdWaterTempRangeQF', 'tsdWaterTempSpikeQF', 'tsdWaterTempStepQF', 'tsdWaterTempValidCalQF', 'sciRvwQF'], 'in_subset': []}, 'SCGW_5_minute': {'class_uri': 'neon:SCGW_5_minute', 'slots': ['endDateTime', 'groundwaterSpecCond', 'groundwaterSpecCondExpUncert', 'groundwaterSpecCondRangeQF', 'groundwaterSpecCondPersistQF', 'groundwaterSpecCondStepQF', 'groundwaterSpecCondNullQF', 'groundwaterSpecCondGapQF', 'groundwaterSpecCondConsistQF', 'groundwaterSpecCondSpikeQF', 'validCalQF', 'sciRvwQF'], 'in_subset': []}, 'ST': {'class_uri': 'neon:ST', 'slots': ['soilPRTResistance'], 'in_subset': ['DP0.00041.001']}, 'SCO2C': {'class_uri': 'neon:SCO2C', 'slots': ['rawCO2', 'headspaceTemp', 'errorStatus'], 'in_subset': ['DP0.00095.001']}, 'phenocam': {'class_uri': 'neon:phenocam', 'slots': ['rawIRImage', 'rawRGBImage', 'IRmetadata', 'RGBmetadata'], 'in_subset': ['DP0.00033.001']}, 'snowcam': {'class_uri': 'neon:snowcam', 'slots': ['rawIRImage', 'rawRGBImage', 'IRmetadata', 'RGBmetadata'], 'in_subset': ['DP0.00042.001']}, 'aqu_gauge_photos': {'class_uri': 'neon:aqu_gauge_photos', 'slots': ['rawIRImage', 'rawRGBImage', 'IRmetadata', 'RGBmetadata'], 'in_subset': ['DP0.20002.001']}, 'SHF': {'class_uri': 'neon:SHF', 'slots': ['SHFVoltage', 'SHFCalHeaterFlag', 'curVoltage'], 'in_subset': ['DP0.00040.001']}, 'wdp_sensor_in': {'class_uri': 'neon:wdp_sensor_in', 'slots': ['chamberTemperature', 'powerStatus', 'lidStatusWetDep'], 'in_subset': ['DP0.00013.001']}, 'soniAmrs': {'class_uri': 'neon:soniAmrs', 'slots': ['idx', 'acceXaxs', 'acceYaxs', 'acceZaxs', 'acceXaxsFree', 'acceYaxsFree', 'acceZaxsFree', 'omegYaxs', 'omegXaxs', 'omegZaxs', 'thetYaxs', 'thetXaxs', 'thetZaxs', 'diag32'], 'in_subset': ['DP0.00010.001']}, 'irga': {'class_uri': 'neon:irga', 'slots': ['idx', 'diag', 'tempBloc', 'tempCellIn', 'tempCellOut', 'presAtmBox', 'presGageCell', 'pwrH2OSamp', 'pwrH2ORef', 'asrpH2O', 'rhoMoleH2O', 'fdMoleH2O', 'pwrCO2Samp', 'pwrCO2Ref', 'asrpCO2', 'rhoMoleCO2', 'fdMoleCO2', 'diag2', 'poteCool', 'ssiCO2', 'ssiH2O'], 'in_subset': ['DP0.00016.001']}, 'soniAmrs_L0prime': {'class_uri': 'neon:soniAmrs_L0prime', 'slots': ['idx', 'acceXaxs', 'acceYaxs', 'acceZaxs', 'acceXaxsFree', 'acceYaxsFree', 'acceZaxsFree', 'omegYaxs', 'omegXaxs', 'omegZaxs', 'thetYaxs', 'thetXaxs', 'thetZaxs', 'diag32', 'qfAmrsVal', 'qfAmrsFilt', 'qfAmrsVelo', 'qfAmrsRng'], 'in_subset': ['IP0.00010.001']}, 'irga_L0prime': {'class_uri': 'neon:irga_L0prime', 'slots': ['idx', 'diag', 'tempBloc', 'tempCellIn', 'tempCellOut', 'presAtmBox', 'presGageCell', 'pwrH2OSamp', 'pwrH2ORef', 'asrpH2O', 'rhoMoleH2O', 'fdMoleH2O', 'pwrCO2Samp', 'pwrCO2Ref', 'asrpCO2', 'rhoMoleCO2', 'fdMoleCO2', 'diag2', 'poteCool', 'ssiCO2', 'ssiH2O', 'tempMean', 'presSum', 'qfIrgaHead', 'qfIrgaTempOut', 'qfIrgaTempIn', 'qfIrgaAux', 'qfIrgaPres', 'qfIrgaChop', 'qfIrgaDetc', 'qfIrgaPll', 'qfIrgaSync', 'qfIrgaAgc'], 'in_subset': ['IP0.00016.001']}, 'DPSD': {'class_uri': 'neon:DPSD', 'slots': ['particulateMass1.0', 'particulateMass2.5', 'particulateMass4.0', 'particulateMass10', 'particulateMass15', 'pressureFM', 'tempFM', 'flowRateVolFM', 'flowRateMassFM', 'presAtm', 'temp', 'frt', 'frt0', 'frtSet0', 'pumpVoltage'], 'in_subset': ['DP0.00017.001']}, 'irgaMfcSamp': {'class_uri': 'neon:irgaMfcSamp', 'slots': ['presAtm', 'temp', 'frt', 'frt0', 'frtSet0'], 'in_subset': ['DP0.00012.001']}, 'irgaMfcVali': {'class_uri': 'neon:irgaMfcVali', 'slots': ['presAtm', 'temp', 'frt', 'frt0', 'frtSet0'], 'in_subset': ['DP0.00015.001']}, 'irgaPresTrap': {'class_uri': 'neon:irgaPresTrap', 'slots': ['presAtm'], 'in_subset': ['DP0.00036.001']}, 'profMfcSamp': {'class_uri': 'neon:profMfcSamp', 'slots': ['presAtm', 'temp', 'frt', 'frt0', 'frtSet0'], 'in_subset': ['DP0.00106.001']}, 'profMfcVali': {'class_uri': 'neon:profMfcVali', 'slots': ['presAtm', 'temp', 'frt', 'frt0', 'frtSet0'], 'in_subset': ['DP0.00107.001']}, 'profMfm': {'class_uri': 'neon:profMfm', 'slots': ['presAtm', 'temp', 'frt', 'frt0'], 'in_subset': ['DP0.00108.001']}, 'irgaMfcSamp_L0prime': {'class_uri': 'neon:irgaMfcSamp_L0prime', 'slots': ['presAtm', 'temp', 'frt', 'frt0', 'frtSet0'], 'in_subset': ['IP0.00012.001']}, 'irgaMfcVali_L0prime': {'class_uri': 'neon:irgaMfcVali_L0prime', 'slots': ['presAtm', 'temp', 'frt', 'frt0', 'frtSet0'], 'in_subset': ['IP0.00015.001']}, 'irgaPresTrap_L0prime': {'class_uri': 'neon:irgaPresTrap_L0prime', 'slots': ['presAtm'], 'in_subset': ['IP0.00036.001']}, 'profMfcSamp_L0prime': {'class_uri': 'neon:profMfcSamp_L0prime', 'slots': ['presAtm', 'temp', 'frt', 'frt0', 'frtSet0', 'qfFrt0'], 'in_subset': ['IP0.00106.001']}, 'profMfcVali_L0prime': {'class_uri': 'neon:profMfcVali_L0prime', 'slots': ['presAtm', 'temp', 'frt', 'frt0', 'frtSet0', 'qfFrt0'], 'in_subset': ['IP0.00107.001']}, 'profMfm_L0prime': {'class_uri': 'neon:profMfm_L0prime', 'slots': ['presAtm', 'temp', 'frt', 'frt0'], 'in_subset': ['IP0.00108.001']}, 'SWS': {'class_uri': 'neon:SWS', 'slots': ['rawVSWC0', 'rawVSIC0', 'rawVSWC1', 'rawVSIC1', 'rawVSWC2', 'rawVSIC2', 'rawVSWC3', 'rawVSIC3', 'rawVSWC4', 'rawVSIC4', 'rawVSWC5', 'rawVSIC5', 'rawVSWC6', 'rawVSIC6', 'rawVSWC7', 'rawVSIC7'], 'in_subset': ['DP0.00094.001']}, 'profIrga': {'class_uri': 'neon:profIrga', 'slots': ['asrpH2O', 'asrpCO2', 'fwMoleCO2', 'fwMoleH2O', 'tempCell', 'presCell'], 'in_subset': ['DP0.00105.001']}, 'profIrga_L0prime': {'class_uri': 'neon:profIrga_L0prime', 'slots': ['asrpH2O', 'fdMoleH2O', 'asrpCO2', 'fdMoleCO2', 'fwMoleCO2', 'fwMoleH2O', 'tempCell', 'presCell'], 'in_subset': ['IP0.00105.001']}, 'CO2Iso_L0prime': {'class_uri': 'neon:CO2Iso_L0prime', 'slots': ['fdMoleH2O', 'fdMoleCO2', 'instStat', 'presCavi', 'tempCavi', 'tempWarmBox', 'fwMoleCO2', 'fwMole12CO2', 'fdMole12CO2', 'fwMole13CO2', 'fdMole13CO2', 'd13CO2', 'percentFwMoleH2O', 'qfSensStatus', 'idGas'], 'in_subset': ['IP0.00102.001']}, 'H2OIso_L0prime': {'class_uri': 'neon:H2OIso_L0prime', 'slots': ['fdMoleH2O', 'instStat', 'presCavi', 'tempCavi', 'tempWarmBox', 'valvMask', 'ppmvFwMoleH2O', 'N2Flag', 'd18OWater', 'd2HWater', 'qfSensStatus', 'qfStusN2', 'qfLowRtioMoleWetH2O'], 'in_subset': ['IP0.00103.001']}, 'CO2Iso': {'class_uri': 'neon:CO2Iso', 'slots': ['fdMoleCO2', 'instStat', 'presCavi', 'tempCavi', 'tempDas', 'tempEtal', 'tempWarmBox', 'posiMPV', 'valvOutl', 'valvSol', 'specID', 'fwMoleCO2', 'fwMole12CO2', 'fdMole12CO2', 'fwMole13CO2', 'fdMole13CO2', '2Mind13CO2', '30Secd13CO2', '5Mind13CO2', 'd13CO2', 'percentFwMoleH2O', '2MinCO2IsoRatio', '30SecCO2IsoRatio', '5MinCO2IsoRatio', 'CO2IsoRatio', 'fwMoleCH4', 'fdMoleCH4', 'fwMoleHPCH4', 'fdMoleHPCH4', 'peakHeigH2O', 'spliFitCH4', 'peakHeig12C', 'peakHeig13C'], 'in_subset': ['DP0.00102.001']}, 'irgaGasCyl': {'class_uri': 'neon:irgaGasCyl', 'slots': ['fdMoleCO2', 'fdMole12CO2', 'fdMole13CO2', 'd13CO2'], 'in_subset': ['DP0.00117.001']}, 'profGasCyl': {'class_uri': 'neon:profGasCyl', 'slots': ['fdMoleCO2', 'fdMole12CO2', 'fdMole13CO2', 'd13CO2'], 'in_subset': ['DP0.00118.001']}, 'profGasCyl_L0prime': {'class_uri': 'neon:profGasCyl_L0prime', 'slots': ['fdMoleCO2', 'fdMole12CO2', 'fdMole13CO2', 'd13CO2'], 'in_subset': ['IP0.00118.001']}, 'profGasCyl_L1prime': {'class_uri': 'neon:profGasCyl_L1prime', 'slots': ['fdMoleCO2', 'fdMole12CO2', 'fdMole13CO2', 'd13CO2'], 'in_subset': ['IP1.00118.001']}, 'profGasCyl_L2prime': {'class_uri': 'neon:profGasCyl_L2prime', 'slots': ['fdMoleCO2', 'fdMole12CO2', 'fdMole13CO2', 'd13CO2'], 'in_subset': ['IP2.00118.001']}, 'irgaPresValiRegIn': {'class_uri': 'neon:irgaPresValiRegIn', 'slots': ['presGage'], 'in_subset': ['DP0.00034.001']}, 'irgaPresValiRegOut': {'class_uri': 'neon:irgaPresValiRegOut', 'slots': ['presGage'], 'in_subset': ['DP0.00035.001']}, 'irgaPresValiLine': {'class_uri': 'neon:irgaPresValiLine', 'slots': ['presGage'], 'in_subset': ['DP0.00037.001']}, 'profPresInlet': {'class_uri': 'neon:profPresInlet', 'slots': ['presGage'], 'in_subset': ['DP0.00109.001']}, 'profPresValiRegDel': {'class_uri': 'neon:profPresValiRegDel', 'slots': ['presGage'], 'in_subset': ['DP0.00110.001']}, 'profPresValiRegTank': {'class_uri': 'neon:profPresValiRegTank', 'slots': ['presGage'], 'in_subset': ['DP0.00111.001']}, 'irgaPresValiRegIn_L0prime': {'class_uri': 'neon:irgaPresValiRegIn_L0prime', 'slots': ['presGage'], 'in_subset': ['IP0.00034.001', 'IP0.00035.001']}, 'irgaPresValiLine_L0prime': {'class_uri': 'neon:irgaPresValiLine_L0prime', 'slots': ['presGage'], 'in_subset': ['IP0.00037.001']}, 'profPresInlet_L0prime': {'class_uri': 'neon:profPresInlet_L0prime', 'slots': ['presGage'], 'in_subset': ['IP0.00109.001']}, 'profPresValiRegDel_L0prime': {'class_uri': 'neon:profPresValiRegDel_L0prime', 'slots': ['presGage'], 'in_subset': ['IP0.00110.001']}, 'profPresValiRegTank_L0prime': {'class_uri': 'neon:profPresValiRegTank_L0prime', 'slots': ['presGage'], 'in_subset': ['IP0.00111.001']}, 'irgaSndLeak': {'class_uri': 'neon:irgaSndLeak', 'slots': ['qfTrapIn', 'qfTrapOut', 'qfLeak', 'qfHeatSoni', 'qfHeatTube', 'qfHeatCap', 'qfHeatVali'], 'in_subset': ['DP0.00008.001']}, 'irgaSndLeakHeat_L0prime': {'class_uri': 'neon:irgaSndLeakHeat_L0prime', 'slots': ['qfTrapIn', 'qfTrapOut', 'qfLeak', 'qfHeatSoni', 'qfHeatTube', 'qfHeatCap', 'qfHeatVali'], 'in_subset': ['IP0.00008.001']}, 'irgaSndValiNema': {'class_uri': 'neon:irgaSndValiNema', 'slots': ['qfGas1', 'qfGas2', 'qfGas3', 'qfGas4', 'qfGas5'], 'in_subset': ['DP0.00009.001']}, 'irgaSndValiHut': {'class_uri': 'neon:irgaSndValiHut', 'slots': ['qfGas1', 'qfGas2', 'qfGas3', 'qfGas4', 'qfGas5'], 'in_subset': ['DP0.00011.001']}, 'irgaSndValiNema_L0prime': {'class_uri': 'neon:irgaSndValiNema_L0prime', 'slots': ['qfGas1', 'qfGas2', 'qfGas3', 'qfGas4', 'qfGas5'], 'in_subset': ['IP0.00009.001']}, 'irgaSndValiHut_L0prime': {'class_uri': 'neon:irgaSndValiHut_L0prime', 'slots': ['qfGas1', 'qfGas2', 'qfGas3', 'qfGas4', 'qfGas5'], 'in_subset': ['IP0.00011.001']}, 'irgaSndValiNema_L1prime': {'class_uri': 'neon:irgaSndValiNema_L1prime', 'slots': ['qfGas1', 'qfGas2', 'qfGas3', 'qfGas4', 'qfGas5'], 'in_subset': ['IP1.00009.001']}, 'nitrate': {'class_uri': 'neon:nitrate', 'slots': ['rawNitrateSingleCompressedStream'], 'in_subset': ['DP0.20033.001']}, 'H2OIso': {'class_uri': 'neon:H2OIso', 'slots': ['instStat', 'presCavi', 'tempCavi', 'tempDas', 'tempEtal', 'tempWarmBox', 'posiMPV', 'valvOutl', 'fwMoleCH4', 'valvMask', 'ppmvFwMoleH2O', 'N2Flag', 'baseShift', 'slopShift', 'resiRMS', 'd18OWater', 'd2HWater'], 'in_subset': ['DP0.00103.001']}, 'hutEnv': {'class_uri': 'neon:hutEnv', 'slots': ['tempHut', 'RHHut', 'baroPresHut', 'H2OMixRatioHut'], 'in_subset': ['DP0.00104.001']}, 'hutEnv_L0prime': {'class_uri': 'neon:hutEnv_L0prime', 'slots': ['tempHut', 'RHHut', 'baroPresHut', 'H2OMixRatioHut', 'qfTemp', 'qfRh'], 'in_subset': ['IP0.00104.001']}, 'profPumpSmp': {'class_uri': 'neon:profPumpSmp', 'slots': ['pumpVoltage'], 'in_subset': ['DP0.00112.001']}, 'irgaPump': {'class_uri': 'neon:irgaPump', 'slots': ['pumpVoltage'], 'in_subset': ['DP0.00116.001']}, 'irgaPump_L0prime': {'class_uri': 'neon:irgaPump_L0prime', 'slots': ['pumpVoltage'], 'in_subset': ['IP0.00116.001']}, 'profPumpSmp_L0prime': {'class_uri': 'neon:profPumpSmp_L0prime', 'slots': ['pumpVoltage'], 'in_subset': ['IP0.00112.001']}, 'profSndVapor': {'class_uri': 'neon:profSndVapor', 'slots': ['valvStat1'], 'in_subset': ['DP0.00115.001']}, 'profSnd_L0prime': {'class_uri': 'neon:profSnd_L0prime', 'slots': ['valvStat1', 'valvCmd1', 'valvCmd2', 'valvCmd3', 'valvCmd4', 'valvCmd5', 'valvCmd6', 'valvCmd7', 'valvCmd8', 'typeGas', 'typeGasCrdH2O', 'lvlIrga', 'lvlCrdCO2', 'lvlCrdH2O', 'injNum', 'typeH2o'], 'in_subset': ['IP0.00115.001', 'IP0.00113.001']}, 'profSnd': {'class_uri': 'neon:profSnd', 'slots': ['valvCmd1', 'valvCmd2', 'valvCmd3', 'valvCmd4', 'valvCmd5', 'valvCmd6', 'valvCmd7', 'valvCmd8'], 'in_subset': ['DP0.00113.001']}, 'profSndAux': {'class_uri': 'neon:profSndAux', 'slots': ['valvCmd1', 'valvCmd2', 'valvCmd3', 'valvCmd4'], 'in_subset': ['DP0.00114.001']}, 'profSndAux_L0prime': {'class_uri': 'neon:profSndAux_L0prime', 'slots': ['valvCmd1', 'valvCmd2', 'valvCmd3', 'valvCmd4', 'measTypeCrdH2O', 'measTypeCrdCO2', 'qfValvIrga', 'measTypeIrga'], 'in_subset': ['IP0.00114.001']}, 'profTray45Vial': {'class_uri': 'neon:profTray45Vial', 'slots': ['d2HWaterLow', 'd18OWaterLow', 'd2HWaterMed', 'd18OWaterMed', 'd2HWaterHigh', 'd18OWaterHigh'], 'in_subset': ['DP0.00119.001']}, 'profTray90Vial': {'class_uri': 'neon:profTray90Vial', 'slots': ['d2HWaterLow', 'd18OWaterLow', 'd2HWaterMed', 'd18OWaterMed', 'd2HWaterHigh', 'd18OWaterHigh'], 'in_subset': ['DP0.00120.001']}, 'profRefeH2oVali_L0prime': {'class_uri': 'neon:profRefeH2oVali_L0prime', 'slots': ['d2HWaterLow', 'd18OWaterLow', 'd2HWaterMed', 'd18OWaterMed', 'd2HWaterHigh', 'd18OWaterHigh'], 'in_subset': ['IP0.00120.001']}, 'h2oIsoCVAL': {'class_uri': 'neon:h2oIsoCVAL', 'slots': ['d2HWaterLow', 'd18OWaterLow', 'd2HWaterMed', 'd18OWaterMed', 'd2HWaterHigh', 'd18OWaterHigh', 'd18OWaterHighArchive', 'd18OWaterLowArchive', 'd18OWaterMedArchive', 'd2HWaterHighArchive', 'd2HWaterLowArchive', 'd2HWaterMedArchive'], 'in_subset': ['DP0.00122.001']}, 'waterTempDepthBuoy': {'class_uri': 'neon:waterTempDepthBuoy', 'slots': ['depth0WaterTemp', 'depth1WaterTemp', 'depth2WaterTemp', 'depth3WaterTemp', 'depth4WaterTemp', 'depth5WaterTemp', 'depth6WaterTemp', 'depth7WaterTemp', 'depth8WaterTemp', 'depth9WaterTemp', 'depth10WaterTemp'], 'in_subset': ['DP0.20264.001']}, 'wss_monthly': {'class_uri': 'neon:wss_monthly', 'slots': ['yearMonth', 'corPresQF', 'dewTempQF', 'precipQF', 'RHQF', 'shortRadQF', 'staPresQF', 'tempTripleQF', 'windSpeedQF', 'wssCorPres', 'wssDewTempMaximum', 'wssDewTempMean', 'wssDewTempMinimum', 'wssDewTempStdErMean', 'wssDewTempVariance', 'wssPrecipTotal', 'wssRHMaximum', 'wssRHMean', 'wssRHMinimum', 'wssRHStdErMean', 'wssRHVariance', 'wssShortRadMaximum', 'wssShortRadMean', 'wssShortRadMinimum', 'wssShortRadStdErMean', 'wssShortRadVariance', 'wssStaPresMaximum', 'wssStaPresMean', 'wssStaPresMinimum', 'wssStaPresStdErMean', 'wssStaPresVariance', 'wssTempTripleMaximum', 'wssTempTripleMean', 'wssTempTripleMinimum', 'wssTempTripleStdErMean', 'wssTempTripleVariance', 'wssWindSpeedMaximum', 'wssWindSpeedMean', 'wssWindSpeedMinimum', 'wssWindSpeedStdErMean', 'wssWindSpeedVariance', 'wssDewTempNumPts', 'wssRHNumPts', 'wssShortRadNumPts', 'wssStaPresNumPts', 'wssTempTripleNumPts', 'wssWindSpeedNumPts'], 'in_subset': []}, 'wss_yearly': {'class_uri': 'neon:wss_yearly', 'slots': ['year', 'corPresQF', 'dewTempQF', 'precipQF', 'RHQF', 'shortRadQF', 'staPresQF', 'tempTripleQF', 'windSpeedQF', 'wssCorPres', 'wssDewTempMaximum', 'wssDewTempMean', 'wssDewTempMinimum', 'wssDewTempStdErMean', 'wssDewTempVariance', 'wssPrecipTotal', 'wssRHMaximum', 'wssRHMean', 'wssRHMinimum', 'wssRHStdErMean', 'wssRHVariance', 'wssShortRadMaximum', 'wssShortRadMean', 'wssShortRadMinimum', 'wssShortRadStdErMean', 'wssShortRadVariance', 'wssStaPresMaximum', 'wssStaPresMean', 'wssStaPresMinimum', 'wssStaPresStdErMean', 'wssStaPresVariance', 'wssTempTripleMaximum', 'wssTempTripleMean', 'wssTempTripleMinimum', 'wssTempTripleStdErMean', 'wssTempTripleVariance', 'wssWindSpeedMaximum', 'wssWindSpeedMean', 'wssWindSpeedMinimum', 'wssWindSpeedStdErMean', 'wssWindSpeedVariance', 'wssDewTempNumPts', 'wssRHNumPts', 'wssShortRadNumPts', 'wssStaPresNumPts', 'wssTempTripleNumPts', 'wssWindSpeedNumPts'], 'in_subset': []}, 'smt_in': {'class_uri': 'neon:smt_in', 'slots': ['rawSoilTemp', 'rawSoilMoisture', 'rawSoilBulkRelPerm', 'rawSoilElectricCond', 'rawSoilPoreWaterEC'], 'in_subset': ['DP0.00044.001']}}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {'metatype': 'https://w3id.org/biolink/biolinkml/meta/types/', 'xsd': 'http://www.w3.org/2001/XMLSchema#', 'shex': 'http://www.w3.org/ns/shex#'}
YO SLOT: {}
YO SLOT: {'string': {'uri': 'xsd:string', 'base': 'str', 'description': 'A character string'}, 'integer': {'uri': 'xsd:integer', 'base': 'int', 'description': 'An integer'}, 'boolean': {'uri': 'xsd:boolean', 'base': 'Bool', 'repr': 'bool', 'description': 'A binary (true or false) value'}, 'float': {'uri': 'xsd:float', 'base': 'float', 'description': 'A real number that conforms to the xsd:float specification'}, 'double': {'uri': 'xsd:double', 'base': 'float', 'description': 'A real number that conforms to the xsd:double specification'}, 'decimal': {'uri': 'xsd:decimal', 'base': 'Decimal', 'description': 'A real number with arbitrary precision that conforms to the xsd:decimal specification'}, 'time': {'uri': 'xsd:dateTime', 'base': 'XSDTime', 'repr': 'str', 'description': 'A time object represents a (local) time of day, independent of any particular day', 'notes': ["URI is dateTime because OWL reasoners don't work with straight date or time"]}, 'date': {'uri': 'xsd:date', 'base': 'XSDDate', 'repr': 'str', 'description': 'a date (year, month and day) in an idealized calendar', 'notes': ["URI is dateTime because OWL reasoners don't work with straight date or time"]}, 'datetime': {'uri': 'xsd:dateTime', 'repr': 'str', 'base': 'XSDDateTime', 'description': 'The combination of a date and time'}, 'uriorcurie': {'uri': 'xsd:anyURI', 'base': 'URIorCURIE', 'repr': 'str', 'description': 'a URI or a CURIE'}, 'uri': {'uri': 'xsd:anyURI', 'base': 'URI', 'repr': 'str', 'description': 'a complete URI'}, 'ncname': {'uri': 'xsd:string', 'base': 'NCName', 'repr': 'str', 'description': 'Prefix part of CURIE'}, 'objectidentifier': {'uri': 'shex:iri', 'base': 'ElementIdentifier', 'repr': 'str', 'description': 'A URI or CURIE that represents an object in the model.', 'comments': ['Used for inheritence and type checking']}, 'nodeidentifier': {'uri': 'shex:nonLiteral', 'base': 'NodeIdentifier', 'repr': 'str', 'description': 'A URI, CURIE or BNODE that represents a node in a model.'}}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
YO SLOT: {}
type 2DWSD
  {
    uVectorComponent: Double
    vVectorComponent: Double
    soundSpeed: Double
    sensorTemp: Double
    2dWindSensorStatus: Integer
  }

type 2DWSD2min
  {
    windSpeedMean: Double
    windSpeedMinimum: Double
    windSpeedMaximum: Double
    windSpeedVariance: Double
    windSpeedNumPts: Double
    windSpeedExpUncert: Double
    windSpeedStdErMean: Double
    windSpeedRangeQAQCRpt: String
    windSpeedPersistenceQAQCRpt: String
    windSpeedStepQAQCRpt: String
    windSpeedNullQAQCRpt: String
    windSpeedGapQAQCRpt: String
    windSpeedConsistencyQAQCRpt: String
    windSpeedSpikeQAQCRpt: String
    windSpeedAlphaQAQCRpt: String
    windSpeedBetaQAQCRpt: String
    windSpeedRangeFailQM: Double
    windSpeedRangePassQM: Double
    windSpeedRangeNAQM: Double
    windSpeedPersistenceFailQM: Double
    windSpeedPersistencePassQM: Double
    windSpeedPersistenceNAQM: Double
    windSpeedStepFailQM: Double
    windSpeedStepPassQM: Double
    windSpeedStepNAQM: Double
    windSpeedNullFailQM: Double
    windSpeedNullPassQM: Double
    windSpeedNullNAQM: Double
    windSpeedGapFailQM: Double
    windSpeedGapPassQM: Double
    windSpeedGapNAQM: Double
    windSpeedSpikeFailQM: Double
    windSpeedSpikePassQM: Double
    windSpeedSpikeNAQM: Double
    windSpeedConsistencyFailQM: Double
    windSpeedConsistencyPassQM: Double
    windSpeedConsistencyNAQM: Double
    windSpeedAlphaQM: Double
    windSpeedBetaQM: Double
    windSpeedFinalQF: String
    windDirMean: Double
    windDirVariance: Double
    windDirNumPts: Double
    windDirExpUncert: Double
    windDirStdErMean: Double
    windDirRangeQAQCRpt: String
    windDirPersistenceQAQCRpt: String
    windDirStepQAQCRpt: String
    windDirNullQAQCRpt: String
    windDirGapQAQCRpt: String
    windDirConsistencyQAQCRpt: String
    windDirSpikeQAQCRpt: String
    windDirAlphaQAQCRpt: String
    windDirBetaQAQCRpt: String
    windDirRangeFailQM: Double
    windDirRangePassQM: Double
    windDirRangeNAQM: Double
    windDirPersistenceFailQM: Double
    windDirPersistencePassQM: Double
    windDirPersistenceNAQM: Double
    windDirStepFailQM: Double
    windDirStepPassQM: Double
    windDirStepNAQM: Double
    windDirNullFailQM: Double
    windDirNullPassQM: Double
    windDirNullNAQM: Double
    windDirGapFailQM: Double
    windDirGapPassQM: Double
    windDirGapNAQM: Double
    windDirSpikeFailQM: Double
    windDirSpikePassQM: Double
    windDirSpikeNAQM: Double
    windDirConsistencyFailQM: Double
    windDirConsistencyPassQM: Double
    windDirConsistencyNAQM: Double
    windDirAlphaQM: Double
    windDirBetaQM: Double
    windDirFinalQF: String
    windDirDistortedFlowQAQCRpt: String
    windDirDistortedFlowFailQM: Double
    windDirDistortedFlowPassQM: Double
    windDirDistortedFlowNAQM: Double
    windSpeedSensorErrorQAQCRpt: String
    windSpeedSensorErrorFailQM: Double
    windSpeedSensorErrorPassQM: Double
    windSpeedSensorErrorNAQM: Double
    windSpeedCalmWindQF: Integer
    windDirSensorErrorQAQCRpt: String
    windDirSensorErrorFailQM: Double
    windDirSensorErrorPassQM: Double
    windDirSensorErrorNAQM: Double
    windDirCalmWindQF: Integer
    startDateTime: Time
    endDateTime: Time
    windDirValidCalFailQM: Double
    windDirValidCalNAQM: Double
    windDirValidCalPassQM: Double
    windDirValidCalQAQCRpt: String
    windSpeedValidCalFailQM: Double
    windSpeedValidCalNAQM: Double
    windSpeedValidCalPassQM: Double
    windSpeedValidCalQAQCRpt: String
    windDirFinalQFSciRvw: String
    windSpeedFinalQFSciRvw: String
  }

type 2DWSD30min
  {
    windSpeedMean: Double
    windSpeedMinimum: Double
    windSpeedMaximum: Double
    windSpeedVariance: Double
    windSpeedNumPts: Double
    windSpeedExpUncert: Double
    windSpeedStdErMean: Double
    windSpeedRangeFailQM: Double
    windSpeedRangePassQM: Double
    windSpeedRangeNAQM: Double
    windSpeedPersistenceFailQM: Double
    windSpeedPersistencePassQM: Double
    windSpeedPersistenceNAQM: Double
    windSpeedStepFailQM: Double
    windSpeedStepPassQM: Double
    windSpeedStepNAQM: Double
    windSpeedNullFailQM: Double
    windSpeedNullPassQM: Double
    windSpeedNullNAQM: Double
    windSpeedGapFailQM: Double
    windSpeedGapPassQM: Double
    windSpeedGapNAQM: Double
    windSpeedSpikeFailQM: Double
    windSpeedSpikePassQM: Double
    windSpeedSpikeNAQM: Double
    windSpeedConsistencyFailQM: Double
    windSpeedConsistencyPassQM: Double
    windSpeedConsistencyNAQM: Double
    windSpeedAlphaQM: Double
    windSpeedBetaQM: Double
    windSpeedFinalQF: String
    windDirMean: Double
    windDirVariance: Double
    windDirNumPts: Double
    windDirExpUncert: Double
    windDirStdErMean: Double
    windDirRangeFailQM: Double
    windDirRangePassQM: Double
    windDirRangeNAQM: Double
    windDirPersistenceFailQM: Double
    windDirPersistencePassQM: Double
    windDirPersistenceNAQM: Double
    windDirStepFailQM: Double
    windDirStepPassQM: Double
    windDirStepNAQM: Double
    windDirNullFailQM: Double
    windDirNullPassQM: Double
    windDirNullNAQM: Double
    windDirGapFailQM: Double
    windDirGapPassQM: Double
    windDirGapNAQM: Double
    windDirSpikeFailQM: Double
    windDirSpikePassQM: Double
    windDirSpikeNAQM: Double
    windDirConsistencyFailQM: Double
    windDirConsistencyPassQM: Double
    windDirConsistencyNAQM: Double
    windDirAlphaQM: Double
    windDirBetaQM: Double
    windDirFinalQF: String
    windDirDistortedFlowFailQM: Double
    windDirDistortedFlowPassQM: Double
    windDirDistortedFlowNAQM: Double
    windSpeedSensorErrorFailQM: Double
    windSpeedSensorErrorPassQM: Double
    windSpeedSensorErrorNAQM: Double
    windSpeedCalmWindQF: Integer
    windDirSensorErrorFailQM: Double
    windDirSensorErrorPassQM: Double
    windDirSensorErrorNAQM: Double
    windDirCalmWindQF: Integer
    startDateTime: Time
    endDateTime: Time
    windDirValidCalFailQM: Double
    windDirValidCalNAQM: Double
    windDirValidCalPassQM: Double
    windSpeedValidCalFailQM: Double
    windSpeedValidCalNAQM: Double
    windSpeedValidCalPassQM: Double
    windDirFinalQFSciRvw: String
    windSpeedFinalQFSciRvw: String
  }

type 2DWSDL0prime
  {
    uVectorComponent: Double
    vVectorComponent: Double
    soundSpeed: Double
    sensorTemp: Double
    2dWindSensorStatus: Integer
  }

type AgwGroundwaterFieldDataIn
  {
    uid: String
    remarks: String
    recordedBy: String
    collectDate: Time
    startDate: Time
    collectedBy: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    groundSurfToThawDist: Double
    groundSurfToWaterDist: Double
    liquidWaterPresence: String
    thawProbeDepth1: Double
    thawProbeDepth10: Double
    thawProbeDepth2: Double
    thawProbeDepth3: Double
    thawProbeDepth4: Double
    thawProbeDepth5: Double
    thawProbeDepth6: Double
    thawProbeDepth7: Double
    thawProbeDepth8: Double
    thawProbeDepth9: Double
    thawProbeDepthAverage: Double
    thawProbeDepthStdDev: Double
    topOfWellToGroundDist: Double
    topOfWellToRefusalDist: Double
    topOfWellToWaterDist: Double
    transducerLowered: String
    wellPushedDownToThawLayer: String
  }

type AgwGroundwaterFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    startDate: Time
    collectedBy: String
    locationID: String
    dataQF: String
    groundSurfToThawDist: Double
    groundSurfToWaterDist: Double
    thawProbeDepth1: Double
    thawProbeDepth10: Double
    thawProbeDepth2: Double
    thawProbeDepth3: Double
    thawProbeDepth4: Double
    thawProbeDepth5: Double
    thawProbeDepth6: Double
    thawProbeDepth7: Double
    thawProbeDepth8: Double
    thawProbeDepth9: Double
    thawProbeDepthAverage: Double
    thawProbeDepthStdDev: Double
  }

type AlgAlgaeExternalLabDataPerSamplePub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    collectDate: Time
    sampleType: String
    sampleVolumeFiltered: Double
    startDate: Time
    laboratoryName: String
    externalRemarks: String
    analyte: String
    method: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    filterSize: Double
    plantAlgaeLabUnits: String
    sampleCondition: String
    externalLabDataQF: String
    batchID: String
    namedLocation: String
    analyteConcentration: Double
    percentFilterAnalyzed: Double
    replicate: String
  }

type AlgArchivePub
  {
    uid: String
    sampleID: String
    startDate: Time
    endDate: Time
    locationID: String
    slideID: String
    sampleCode: String
    dataQF: String
    slideCode: String
    freezeDriedCode: String
    freezeDriedID: String
    preservedCode: String
    preservedID: String
  }

type AlgBiomassPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    sampleID: String
    collectDate: Time
    startDate: Time
    boatMass: Double
    dryMassBoatMass: Double
    ashMassBoatMass: Double
    adjAshFreeDryMass: Double
    parentSampleID: String
    sampleCode: String
    dataQF: String
    fieldSampleVolume: Double
    alternateFieldSampleVolume: Double
    parentSampleCode: String
    labSampleVolume: Double
    domainFilterVolume: Double
    preservativeType: String
    preservativeVolume: Double
    sampleCondition: String
    plantDryMass: Double
    plantSurfaceArea: Double
    namedLocation: String
    analysisType: String
    originalFieldSampleVolume: Double
    plantAdjAshFreeDryMass: Double
    plantAshMassBoatMass: Double
    plantBoatMass: Double
    plantDryMassBoatMass: Double
    plantMassOnly: String
    ashMassDataQF: String
  }

type AlgBiovolumesIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    scientificName: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    taxonDatabaseName: String
    taxonDatabaseID: String
    dataQF: String
    biovolumeMean: Double
    biovolumeFormula: String
    biovolumeSpecimenNumber: String
    taxonAbbreviation: String
    biovolumeSD: Double
  }

type AlgBiovolumesPub
  {
    uid: String
    identificationReferences: String
    remarks: String
    scientificName: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    taxonDatabaseName: String
    taxonDatabaseID: String
    dataQF: String
    biovolumeMean: Double
    biovolumeFormula: String
    biovolumeSpecimenNumber: String
    taxonAbbreviation: String
    biovolumeSD: Double
  }

type AlgDomainLabIn
  {
    uid: String
    remarks: String
    measuredBy: String
    recordedBy: String
    sampleID: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    boatID: String
    boatMass: Double
    dryMassBoatMass: Double
    ashMassBoatMass: Double
    locationID: String
    storageDays: Double
    adjAshFreeDryMass: Double
    parentSampleID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    fieldSampleVolume: Double
    alternateFieldSampleVolume: Double
    parentSampleFate: String
    parentSampleCode: String
    sampleClass: String
    labSampleVolume: Double
    domainFilterVolume: Double
    filterNumber: String
    preservativeType: String
    preservativeVolume: Double
    sampleCondition: String
    plantDryMass: Double
    plantSurfaceArea: Double
    fieldSampleID: String
    fulcrumVersion: String
    platformInfo: String
    analysisType: String
    originalFieldSampleVolume: Double
    plantAdjAshFreeDryMass: Double
    plantAshMassBoatMass: Double
    plantBoatID: String
    plantBoatMass: Double
    plantDryMassBoatMass: Double
    filterBlankRep1: String
    filterBlankRep2: String
    plantMassOnly: String
    ashMassDataQF: String
  }

type AlgDomainLabChemistryPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    sampleID: String
    collectDate: Time
    startDate: Time
    boatMass: Double
    dryMassBoatMass: Double
    ashMassBoatMass: Double
    storageDays: Double
    adjAshFreeDryMass: Double
    parentSampleID: String
    sampleCode: String
    dataQF: String
    fieldSampleVolume: Double
    alternateFieldSampleVolume: Double
    parentSampleCode: String
    labSampleVolume: Double
    domainFilterVolume: Double
    filterNumber: String
    preservativeType: String
    preservativeVolume: Double
    sampleCondition: String
    plantDryMass: Double
    plantSurfaceArea: Double
    namedLocation: String
    analysisType: String
    originalFieldSampleVolume: Double
    plantAdjAshFreeDryMass: Double
    plantAshMassBoatMass: Double
    plantBoatMass: Double
    plantDryMassBoatMass: Double
    filterBlankRep1: String
    filterBlankRep2: String
  }

type AlgFieldDataIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    habitatType: String
    sampleCollected: String
    locationID: String
    benthicArea: Double
    samplerType: String
    parentSampleID: String
    sampleNumber: String
    substratumSizeClass: String
    dataQF: String
    aquaticSiteType: String
    algalSampleType: String
    phytoDepth1: Double
    phytoDepth2: Double
    phytoDepth3: Double
    fieldSampleVolume: Double
    parentSampleFate: String
    parentSampleCode: String
    samplingImpractical: String
    fulcrumVersion: String
    platformInfo: String
  }

type AlgFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    habitatType: String
    sampleCollected: String
    benthicArea: Double
    samplerType: String
    parentSampleID: String
    substratumSizeClass: String
    dataQF: String
    aquaticSiteType: String
    algalSampleType: String
    phytoDepth1: Double
    phytoDepth2: Double
    phytoDepth3: Double
    fieldSampleVolume: Double
    parentSampleCode: String
    samplingImpractical: String
    namedLocation: String
  }

type AlgLabBlankIn
  {
    uid: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    diBlankCode: String
    diBlankFate: String
    diBlankID: String
    filterBlankRep1: String
    filterBlankRep1Code: String
    filterBlankRep1Fate: String
    filterBlankRep1Volume: Double
    filterBlankRep2: String
    filterBlankRep2Code: String
    filterBlankRep2Fate: String
    filterBlankRep2Volume: Double
  }

type AlgTaxonomyProcessedPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    acceptedTaxonID: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    startDate: Time
    laboratoryName: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    slideID: String
    algalParameter: String
    algalParameterValue: Double
    algalParameterUnit: String
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    slideCode: String
    namedLocation: String
    perBottleSampleVolume: Double
  }

type AlgTaxonomyRawPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    startDate: Time
    laboratoryName: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    slideID: String
    algalParameter: String
    algalParameterValue: Double
    algalParameterUnit: String
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    tribe: String
    variety: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    form: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    slideCode: String
    namedLocation: String
    perBottleSampleVolume: Double
  }

type AmbFieldParentIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    sampleID: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    archiveID: String
    collectedBy: String
    habitatType: String
    locationID: String
    sampleNumber: String
    substratumSizeClass: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    geneticSampleID: String
    aquaticSiteType: String
    fieldSampleVolume: Double
    geneticSampleCode: String
    geneticSampleFate: String
    samplingImpractical: String
    sampleMaterial: String
    archiveSampleFate: String
    fulcrumVersion: String
    platformInfo: String
    archiveFilteredSampleVolume: String
    archiveSampleCode: String
    geneticFilteredSampleVolume: String
    aquMicrobeType: String
    aquMicrobeScrubArea: Double
    labSampleMedium: String
  }

type AmbFieldParentPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    archiveID: String
    collectedBy: String
    habitatType: String
    sampleNumber: String
    substratumSizeClass: String
    sampleCode: String
    dataQF: String
    geneticSampleID: String
    aquaticSiteType: String
    fieldSampleVolume: Double
    geneticSampleCode: String
    samplingImpractical: String
    sampleMaterial: String
    namedLocation: String
    archiveFilteredSampleVolume: String
    archiveSampleCode: String
    geneticFilteredSampleVolume: String
    aquMicrobeType: String
    aquMicrobeScrubArea: Double
    labSampleMedium: String
  }

type AmcCellCountLabSummaryIn
  {
    uid: String
    recordedBy: String
    enteredBy: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testProtocolVersion: String
    dataQF: String
    cellCountMethod: String
    countStandardDeviation: Double
    longTermEnumerationDifference: Double
    referenceImageCount: String
    referenceImageID: String
    enumerationDifferenceMax: Double
    enumerationDifferenceMean: Double
    enumerationDifferenceMin: Double
  }

type AmcCellCountsIn
  {
    uid: String
    remarks: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    deprecatedVialID: String
    testedDate: Time
    testProtocolVersion: String
    locationID: String
    analyzedBy: String
    filterSize: Double
    cellCountSampleID: String
    sampleCondition: String
    cellCountSampleFate: String
    cellCountSampleCode: String
    externalLabDataQF: String
    batchID: String
    reviewedBy: String
    qaqcStatus: String
    analysisMagnification: String
    analysisVolume: Double
    batchReferenceCount: String
    cellCountMethod: String
    enumerationDifference: Double
    numberOfFieldsAnalyzed: String
    rawMicrobialAbundance: String
    totalCellCount: String
    dilutionFactor: Double
    qcAnalyzedBy: String
  }

type AmcFieldCellCountsIn
  {
    uid: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    archiveID: String
    locationID: String
    parentSampleID: String
    dataQF: String
    cellCountSampleID: String
    geneticSampleID: String
    parentSampleFate: String
    parentSampleCode: String
    cellCountSampleFate: String
    cellCountSampleCode: String
    geneticSampleCode: String
    geneticSampleFate: String
    sampleMaterial: String
    archiveSampleFate: String
    fulcrumVersion: String
    platformInfo: String
    archiveFilteredSampleVolume: String
    archiveSampleCode: String
    archiveSampleCond: String
    cellCountLabSampleMedium: String
    cellCountPreservantVolume: Double
    cellCountSampleCond: String
    cellCountSampleVolume: Double
    geneticFilteredSampleVolume: String
    geneticLabSampleMedium: String
    geneticSampleCond: String
    archiveLabSampleMedium: String
  }

type AmcFieldGeneticPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    archiveID: String
    parentSampleID: String
    dataQF: String
    geneticSampleID: String
    parentSampleCode: String
    geneticSampleCode: String
    sampleMaterial: String
    namedLocation: String
    archiveFilteredSampleVolume: String
    archiveSampleCode: String
    archiveSampleCond: String
    geneticFilteredSampleVolume: String
    geneticSampleCond: String
  }

type AmcFieldSuperParentPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    waterTemp: Double
    specificConductance: Double
    aCollectedBy: String
    bCollectedBy: String
    altLocation: String
    altLongitude: Double
    altLatitude: Double
    maxDepth: Double
    upperSegmentDepth: Double
    lowerSegmentDepth: Double
    startDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    samplerType: String
    parentSampleID: String
    lakeSampleDepth1: Double
    lakeSampleDepth2: Double
    aquaticSiteType: String
    parentSampleCode: String
    fieldDataQF: String
    samplingImpractical: String
    namedLocation: String
    additionalCoordUncertainty: Double
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    amcSamplingProtocolVersion: String
  }

type ApcMorphospeciesIn
  {
    uid: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    dataQF: String
    aquaticSiteType: String
    fulcrumVersion: String
    platformInfo: String
    morphospeciesCreatedDate: Time
    morphospeciesResolved: String
    morphospeciesResolvedDate: Time
  }

type ApcMorphospeciesPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    scientificName: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    dataQF: String
    namedLocation: String
    morphospeciesCreatedDate: Time
    morphospeciesResolvedDate: Time
  }

type ApcPerTaxonIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    eventID: String
    sampleID: String
    collectDate: Time
    morphospeciesID: String
    growthForm: String
    morphospeciesIDRemarks: String
    startDate: Time
    sampleCollected: String
    aquaticPlantType: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleClass: String
    transectID: String
    fulcrumVersion: String
    platformInfo: String
    pointNumber: String
  }

type ApcPerTaxonPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    eventID: String
    scientificName: String
    sampleID: String
    collectDate: Time
    morphospeciesID: String
    scientificNameAuthorship: String
    growthForm: String
    morphospeciesIDRemarks: String
    startDate: Time
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    sampleCode: String
    dataQF: String
    namedLocation: String
    pointNumber: String
  }

type ApcPointTransectIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    collectDate: Time
    targetTaxaPresent: String
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    habitatType: String
    dataQF: String
    aquaticSiteType: String
    transectID: String
    samplingImpractical: String
    fulcrumVersion: String
    platformInfo: String
    pointNumber: String
    substrate: String
    transectDistance: Double
  }

type ApcPointTransectPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    targetTaxaPresent: String
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    habitatType: String
    dataQF: String
    samplingImpractical: String
    namedLocation: String
    pointNumber: String
    substrate: String
    transectDistance: Double
  }

type ApcTaxonomyProcessedPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    acceptedTaxonID: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    startDate: Time
    laboratoryName: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    algalParameter: String
    algalParameterValue: Double
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
  }

type ApcTaxonomyRawPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    startDate: Time
    laboratoryName: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    algalParameter: String
    algalParameterValue: Double
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    tribe: String
    variety: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    form: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
  }

type ApcVoucherIn
  {
    uid: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    sampleID: String
    collectDate: Time
    morphospeciesID: String
    morphospeciesIDRemarks: String
    startDate: Time
    collectedBy: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    aquaticSiteType: String
    fulcrumVersion: String
    platformInfo: String
  }

type ApcVoucherPub
  {
    uid: String
    siteID: String
    taxonID: String
    recordedBy: String
    sampleID: String
    collectDate: Time
    morphospeciesID: String
    startDate: Time
    collectedBy: String
    sampleCode: String
    dataQF: String
    namedLocation: String
  }

type ApcVoucherTaxonomyProcessedPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    acceptedTaxonID: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    startDate: Time
    laboratoryName: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    algalParameter: String
    algalParameterValue: Double
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
  }

type ApcVoucherTaxonomyRawPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    startDate: Time
    laboratoryName: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    algalParameter: String
    algalParameterValue: Double
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    tribe: String
    variety: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    form: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
  }

type AplBiomassPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    scientificName: String
    sampleID: String
    collectDate: Time
    processingDate: Time
    morphospeciesID: String
    identifiedBy: String
    scientificNameAuthorship: String
    morphospeciesIDRemarks: String
    dryMass: Double
    startDate: Time
    wetMass: Double
    wetMassSubsample: Double
    boatMass: Double
    dryMassBoatMass: Double
    ashMassBoatMass: Double
    fieldID: String
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    benthicArea: Double
    adjDryMass: Double
    adjAshFreeDryMass: Double
    arealAdjDryMass: Double
    arealAdjAshFreeDryMass: Double
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    sampleCode: String
    chemSubsampleID: String
    chemSubsampleBarcode: String
    dataQF: String
    namedLocation: String
    fieldIDCode: String
  }

type AplClipHarvestIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    collectDate: Time
    targetTaxaPresent: String
    growthForm: String
    stationID: String
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    sampleDepth: Double
    habitatType: String
    fieldID: String
    sampleCollected: String
    locationID: String
    benthicArea: Double
    samplerType: String
    dataQF: String
    aquaticSiteType: String
    samplingImpractical: String
    fieldIDCode: String
    fieldIDFate: String
    streamAddCoordinateUncertainty: Double
    fulcrumVersion: String
    platformInfo: String
  }

type AplClipHarvestPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    targetTaxaPresent: String
    growthForm: String
    altLongitude: Double
    altLatitude: Double
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    sampleDepth: Double
    habitatType: String
    fieldID: String
    sampleCollected: String
    locationID: String
    benthicArea: Double
    samplerType: String
    dataQF: String
    aquaticSiteType: String
    samplingImpractical: String
    namedLocation: String
    fieldIDCode: String
    streamAddCoordinateUncertainty: Double
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
  }

type AplDomainLabIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    sampleID: String
    collectDate: Time
    processingDate: Time
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    dryMass: Double
    stationID: String
    startDate: Time
    wetMass: Double
    wetMassSubsample: Double
    boatID: String
    boatMass: Double
    dryMassBoatMass: Double
    ashMassBoatMass: Double
    fieldID: String
    aquaticPlantType: String
    benthicArea: Double
    adjDryMass: Double
    adjAshFreeDryMass: Double
    arealAdjDryMass: Double
    arealAdjAshFreeDryMass: Double
    sampleFate: String
    sampleCode: String
    chemSubsampleID: String
    chemSubsampleFate: String
    chemSubsampleBarcode: String
    dataQF: String
    sampleClass: String
    fieldIDCode: String
    fieldIDFate: String
    fulcrumVersion: String
    platformInfo: String
    boatWetMassSum: Double
  }

type AplDomainLabChemistryPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    sampleID: String
    collectDate: Time
    processingDate: Time
    startDate: Time
    fieldID: String
    sampleCode: String
    chemSubsampleID: String
    chemSubsampleBarcode: String
    dataQF: String
    namedLocation: String
    fieldIDCode: String
  }

type AplPlantExternalLabDataPerSamplePub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    collectDate: Time
    sampleType: String
    sampleVolumeFiltered: Double
    startDate: Time
    laboratoryName: String
    externalRemarks: String
    analyte: String
    method: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    filterSize: Double
    plantAlgaeLabUnits: String
    sampleCondition: String
    externalLabDataQF: String
    batchID: String
    namedLocation: String
    analyteConcentration: Double
    percentFilterAnalyzed: Double
    replicate: String
  }

type AplTaxonomyProcessedPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    startDate: Time
    laboratoryName: String
    internalLabID: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    algalParameter: String
    algalParameterValue: Double
    algalParameterUnit: String
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    tribe: String
    variety: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    subspecies: String
    subvariety: String
    subform: String
    form: String
    speciesGroup: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
    perBottleSampleVolume: Double
  }

type AplTaxonomyRawPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    startDate: Time
    laboratoryName: String
    internalLabID: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    algalParameter: String
    algalParameterValue: Double
    algalParameterUnit: String
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    tribe: String
    variety: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    subspecies: String
    subvariety: String
    subform: String
    form: String
    speciesGroup: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
    perBottleSampleVolume: Double
  }

type AquGaugePhotos
  {
    rawIRImage: String
    rawRGBImage: String
    iRmetadata: String
    rGBmetadata: String
  }

type AquchemExternalLabSummaryDataIn
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    standardReferenceKnownValue: Double
    standardReferenceMeasuredMean: Double
  }

type AquchemPlantAlgaeExternalLabDataIn
  {
    uid: String
    sampleID: String
    collectDate: Time
    sampleType: String
    sampleVolumeFiltered: Double
    startDate: Time
    laboratoryName: String
    internalLabID: String
    externalRemarks: String
    analyte: String
    method: String
    testMethod: String
    locationID: String
    analysisDate: Time
    analyzedBy: String
    sampleFate: String
    sampleCode: String
    filterSize: Double
    plantAlgaeLabUnits: String
    sampleCondition: String
    externalLabDataQF: String
    batchID: String
    analyteConcentration: Double
    percentFilterAnalyzed: Double
    replicate: String
  }

type AquchemPlantAlgaeExternalLabQAIn
  {
    uid: String
    sampleID: String
    startDate: Time
    laboratoryName: String
    internalLabID: String
    externalRemarks: String
    analyte: String
    analysisDate: Time
    analyzedBy: String
    sampleFate: String
    sampleCode: String
    plantAlgaeLabUnits: String
    externalLabDataQF: String
    batchID: String
    analyteConcentration: Double
    qaType: String
  }

type AquTroll
  {
    conductance: Double
    batteryVoltage: Double
    conductanceDataQualityID: Double
    groundwaterTemp: Double
    tempDataQualityID: Double
    groundwaterPressure: Double
    pressureDataQualityID: Double
  }

type AscExternalLabBatchQAIn
  {
    uid: String
    laboratoryName: String
    internalLabID: String
    analyte: String
    analyteUnits: String
    analysisDate: Time
    analysisEndDate: Time
    batchID: String
    analyteKnownValue: Double
    runID: String
    qaType: String
    analyteObservedValue: Double
    analyteSampleValue: Double
    analyteSurrogate: String
    qaQF: String
    reagentSN: String
    recovery: Double
    recoveryLimitLower: Double
    recoveryLimitUpper: Double
    relativePercentDifference: Double
    relativePercentLimit: Double
  }

type AscExternalLabDataIn
  {
    uid: String
    sampleID: String
    stationID: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    internalLabID: String
    analyte: String
    method: String
    methodDetectionLimit: Double
    analyteUnits: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    primaryMatrix: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    batchID: String
    analyticalRepNumber: String
    runID: String
    analyteConcentration: Double
    receivedCondition: String
    analyteConcText: String
    analyteSurrogate: String
    cas: String
    deptName: String
    extendedQualifier1: String
    extendedQualifier2: String
    extendedQualifier3: String
    extendedQualifier4: String
    extendedQualifier5: String
    externalQualifier: String
    practicalQuantitationLimit: Double
    projectID: String
  }

type AscExternalLabSummaryIn
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    method: String
    methodDetectionLimit: Double
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    primaryMatrix: String
    dataQF: String
    analytePercentRecovery: Double
    analytePercentSD: Double
    quantitationLimit: Double
  }

type AscExternalLabSummaryPub
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    method: String
    methodDetectionLimit: Double
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    primaryMatrix: String
    dataQF: String
    analytePercentRecovery: Double
    analytePercentSD: Double
    quantitationLimit: Double
  }

type AscFieldDataPointIn
  {
    uid: String
    remarks: String
    stationID: String
    waterTemp: Double
    specificConductance: Double
    startDate: Time
    endDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    dataQF: String
    waterDepth: Double
    fulcrumVersion: String
    platformInfo: String
    pointNumber: String
    coreLength: Double
    sedimentSampleBarcode: String
    sedimentSampleFate: String
    sedimentSampleID: String
    zoneNumber: String
  }

type AscFieldDataPointPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    waterTemp: Double
    specificConductance: Double
    startDate: Time
    endDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    dataQF: String
    namedLocation: String
    waterDepth: Double
    pointNumber: String
    coreLength: Double
    observations: String
    sedimentSampleBarcode: String
    sedimentSampleID: String
    zoneNumber: String
  }

type AscFieldDataStationIn
  {
    uid: String
    remarks: String
    recordedBy: String
    stationID: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    dataQF: String
    samplingImpractical: String
    fulcrumVersion: String
    platformInfo: String
    carbonSedimentSampleFate: String
    carbonSedimentSampleID: String
    carbonSedSampleCode: String
    inorganicSedimentSampleFate: String
    inorganicSedimentSampleID: String
    inorgSedimentSampleBarcode: String
    organicSedimentSampleFate: String
    organicSedimentSampleID: String
    orgSedimentSampleBarcode: String
    physicalSedimentSampleFate: String
    physicalSedimentSampleID: String
    physSedimentSampleBarcode: String
    sedimentSampleBarcode: String
    sedimentSampleFate: String
    sedimentSampleID: String
    zoneSampleCount: String
  }

type AscFieldDataStationPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    dataQF: String
    samplingImpractical: String
    namedLocation: String
    carbonSedimentSampleID: String
    carbonSedSampleCode: String
    inorganicSedimentSampleID: String
    inorgSedimentSampleBarcode: String
    organicSedimentSampleID: String
    orgSedimentSampleBarcode: String
    physicalSedimentSampleID: String
    physSedimentSampleBarcode: String
    sedimentSampleBarcode: String
    sedimentSampleID: String
    zoneSampleCount: String
  }

type AscFieldDataZoneIn
  {
    uid: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    stationID: String
    startDate: Time
    endDate: Time
    habitatType: String
    samplerType: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    downstreamCoordUncert: Double
    downstreamDecimalLatitude: Double
    downstreamDecimalLongitude: Double
    downstreamGeodeticDatum: String
    pointSampleCount: String
    sedimentSampleBarcode: String
    sedimentSampleFate: String
    sedimentSampleID: String
    upstreamCoordUncert: Double
    upstreamDecimalLatitude: Double
    upstreamDecimalLongitude: Double
    upstreamGeodeticDatum: String
    zoneNumber: String
  }

type AscFieldDataZonePub
  {
    uid: String
    domainID: String
    siteID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    startDate: Time
    endDate: Time
    habitatType: String
    samplerType: String
    dataQF: String
    namedLocation: String
    downstreamCoordUncert: Double
    downstreamDecimalLatitude: Double
    downstreamDecimalLongitude: Double
    downstreamGeodeticDatum: String
    pointSampleCount: String
    sedimentSampleBarcode: String
    sedimentSampleID: String
    upstreamCoordUncert: Double
    upstreamDecimalLatitude: Double
    upstreamDecimalLongitude: Double
    upstreamGeodeticDatum: String
    zoneNumber: String
  }

type AsiExternalLabH2OIsotopesPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    receivedBy: String
    externalRemarks: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    d18OWater: Double
    d2HWater: Double
    isotopeH2OSampleID: String
    isotopeH2OSampleCode: String
    d18OsdWater: Double
    d2HsdWater: Double
    instrumentSN: String
    isotopeH2OExternalLabQF: String
    sampleCondition: String
    externalLabDataQF: String
    namedLocation: String
  }

type AsiExternalLabPOMSummaryDataPub
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    standardReferenceKnownValue: Double
    standardReferenceMeasuredMean: Double
  }

type AsiExternalLabSummaryDataPub
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    standardReferenceKnownValue: Double
    standardReferenceMeasuredMean: Double
    namedLocation: String
  }

type AsiFieldDataIn
  {
    uid: String
    remarks: String
    collectDate: Time
    stationID: String
    startDate: Time
    parentSampleID: String
    processedDateH2OIsotopes: Time
    processedDateFilters: Time
    sampleVolumeFilteredPOMRep1: Double
    sampleVolumeFilteredPOMRep2: Double
    isotopeH2OSampleID: String
    isotopePOMSampleID: String
    isotopePOMRep2SampleID: String
    isotopeH2OSampleFate: String
    isotopeH2OSampleCode: String
    isotopePOMSampleFate: String
    isotopePOMRep2SampleFate: String
    isotopePOMRep2SampleCode: String
    isotopePOMSampleCode: String
    parentSampleFate: String
    parentSampleCode: String
    sampleClass: String
    fieldDataQF: String
    fulcrumVersion: String
    platformInfo: String
    isotopeH2OSampleCond: String
    isotopePOMSampleCond: String
    isotopePOMRep2SampleCond: String
  }

type AsiFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    parentSampleID: String
    processedDateH2OIsotopes: Time
    processedDateFilters: Time
    sampleVolumeFilteredPOMRep1: Double
    sampleVolumeFilteredPOMRep2: Double
    isotopeH2OSampleID: String
    isotopePOMSampleID: String
    isotopePOMRep2SampleID: String
    isotopeH2OSampleCode: String
    isotopePOMRep2SampleCode: String
    isotopePOMSampleCode: String
    parentSampleCode: String
    fieldDataQF: String
    namedLocation: String
    isotopeH2OSampleCond: String
    isotopePOMSampleCond: String
    isotopePOMRep2SampleCond: String
  }

type AsiFieldSuperParentPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    waterTemp: Double
    specificConductance: Double
    aCollectedBy: String
    bCollectedBy: String
    altLocation: String
    altLongitude: Double
    altLatitude: Double
    maxDepth: Double
    upperSegmentDepth: Double
    lowerSegmentDepth: Double
    startDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    wellWaterDepth: Double
    sampleDepth: Double
    sampleExtractionMethod: String
    wellVolumePurged: Double
    samplerType: String
    parentSampleID: String
    lakeSampleDepth1: Double
    lakeSampleDepth2: Double
    sdgSamplingProtocolVersion: String
    asiSamplingProtocolVersion: String
    aquaticSiteType: String
    parentSampleCode: String
    fieldDataQF: String
    samplingImpractical: String
    namedLocation: String
    additionalCoordUncertainty: Double
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    amcSamplingProtocolVersion: String
    swcSamplingProtocolVersion: String
  }

type AsiPOMExternalLabDataPerSamplePub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    collectDate: Time
    sampleType: String
    sampleVolumeFiltered: Double
    startDate: Time
    laboratoryName: String
    externalRemarks: String
    analyte: String
    method: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    filterSize: Double
    plantAlgaeLabUnits: String
    sampleCondition: String
    externalLabDataQF: String
    batchID: String
    namedLocation: String
    analyteConcentration: Double
    percentFilterAnalyzed: Double
    replicate: String
  }

type Asih2oExternalLabH2OIsotopesIn
  {
    uid: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    receivedBy: String
    shipmentID: String
    externalRemarks: String
    receivedDate: Time
    locationID: String
    analysisDate: Time
    analyzedBy: String
    d18OWater: Double
    d2HWater: Double
    isotopeH2OSampleID: String
    isotopeH2OSampleFate: String
    isotopeH2OSampleCode: String
    d18OsdWater: Double
    d2HsdWater: Double
    instrumentSN: String
    isotopeH2OExternalLabQF: String
    sampleCondition: String
    externalLabDataQF: String
    isotopeH2OExternalLabTest: String
  }

type Asih2oExternalLabQAQCDataH2OIn
  {
    uid: String
    startDate: Time
    laboratoryName: String
    analysisDate: Time
    d18OsdWater: Double
    d2HsdWater: Double
    instrumentSN: String
    h2OIsotopeQAQCID: String
    d18OMeasured: Double
    d2HMeasured: Double
    d18OKnown: Double
    d2HKnown: Double
    subsamplesProcessed: String
    isotopeH2OexternalLabQAQCFlag: String
    labSampleID: String
    externalLabDataQF: String
  }

type Asih2oExternalLabSummaryDataIn
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    standardReferenceKnownValue: Double
    standardReferenceMeasuredMean: Double
  }

type AspExternalLabDataPub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    method: String
    methodDetectionLimit: Double
    analyteUnits: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    primaryMatrix: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
    analyticalRepNumber: String
    analyteConcentration: Double
    analyteSurrogate: String
    cas: String
    deptName: String
    extendedQualifier1: String
    extendedQualifier2: String
    extendedQualifier3: String
    extendedQualifier4: String
    extendedQualifier5: String
    externalQualifier: String
    practicalQuantitationLimit: Double
  }

type BarPres
  {
    sensorTemp: Double
    rawBarometricPressure: Double
    sensorStatus: Integer
  }

type BarPresBuoy
  {
    sensorTemp: Double
    rawBarometricPressure: Double
    sensorStatus: Integer
  }

type BatFieldDataIn
  {
    uid: String
    remarks: String
    measuredBy: String
    recordedBy: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    sonarSystemModel: String
  }

type BatFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
    sonarSystemModel: String
  }

type BatPointcollectionIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    locationID: String
    samplerType: String
    dataQF: String
    waterDepth: Double
    fulcrumVersion: String
    platformInfo: String
    substrate: String
    gpsDatafile: String
    bathymetryDataType: String
    gpsAntennaHeight: Double
    gpsUsed: String
    photoID: String
    plantsPresent: String
    pointCollectionDate: Time
    uniqueID: String
    waypoint: String
    waypointDescription: String
    gpsAccuracy: Double
    gpsAccuracyUnits: String
    gpsAccuracyValue: Double
  }

type BatPointcollectionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    startDate: Time
    endDate: Time
    samplerType: String
    dataQF: String
    namedLocation: String
    waterDepth: Double
    substrate: String
    gpsDatafile: String
    bathymetryDataType: String
    gpsAntennaHeight: Double
    gpsUsed: String
    plantsPresent: String
    pointCollectionDate: Time
    waypoint: String
    waypointDescription: String
    gpsAccuracy: Double
    gpsAccuracyUnits: String
    gpsAccuracyValue: Double
  }

type BatResultsFileIn
  {
    uid: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    rawDataFileName: String
    rawDataFilePath: String
    dataFileName: String
    dataFilePath: String
    sopVersion: String
  }

type BatResultsFilePub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    dataFileName: String
    dataFilePath: String
    sopVersion: String
  }

type BatSonarRecordIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    sonarRecordingNumber: String
    sonarRecordingStartTime: Time
    sonarRecordingStopTime: Time
  }

type BatSonarRecordPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    sonarRecordingNumber: String
    sonarRecordingStartTime: Time
    sonarRecordingStopTime: Time
  }

type BbcChemistryPoolingIn
  {
    uid: String
    plotID: String
    measuredBy: String
    recordedBy: String
    enteredBy: String
    setDate: Time
    collectDate: Time
    dataQF: String
    bgcArchiveCode: String
    bgcArchiveFate: String
    bgcArchiveID: String
    cnSampleCode: String
    cnSampleFate: String
    cnSampleID: String
    fulcrumVersion: String
    platformInfo: String
    subsampleIDList: String
    pooledSampleMass: Double
    poolSampleCode: String
    poolSampleFate: String
    poolSampleID: String
    subsampleCodeList: String
    subsampleFateList: String
    toxicodendronPossible: String
  }

type BbcChemistryPoolingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    measuredBy: String
    recordedBy: String
    setDate: Time
    collectDate: Time
    dataQF: String
    bgcArchiveCode: String
    bgcArchiveID: String
    cnSampleCode: String
    cnSampleID: String
    namedLocation: String
    subsampleIDList: String
    poolSampleCode: String
    poolSampleID: String
    subsampleCodeList: String
    toxicodendronPossible: String
  }

type BbcDilutionIn
  {
    uid: String
    domainID: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    enteredBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    processedDate: Time
    sampleVolume: Double
    sampleFate: String
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    fulcrumVersion: String
    platformInfo: String
    dilutionSampleCode: String
    dilutionSampleFate: String
    dilutionSampleID: String
    dilutionSubsampleCode: String
    dilutionSubsampleFate: String
    dilutionSubsampleID: String
    dilutionSubsampleVolume: Double
    somDryMass: Double
  }

type BbcDilutionPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    sampleVolume: Double
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    namedLocation: String
    dilutionSampleCode: String
    dilutionSampleID: String
    dilutionSubsampleCode: String
    dilutionSubsampleID: String
    dilutionSubsampleVolume: Double
    somDryMass: Double
  }

type BbcPercoreIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    subplotID: String
    clipID: String
    clipCellNumber: String
    samplingProtocolVersion: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    litterDepth: Double
    fulcrumVersion: String
    platformInfo: String
    bareGround: String
    coreDiameter: Double
    coreID: String
    monolithLength: Double
    monolithWidth: Double
    rootSampleArea: Double
    rootSampleDepth: Double
    rootSamplingMethod: String
    rootSamplingPossible: String
    wst10cmDist: Double
    wst1cmDist: Double
    toxicodendronPossible: String
  }

type BbcPercorePub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    subplotID: String
    clipID: String
    samplingProtocolVersion: String
    sampleCode: String
    dataQF: String
    litterDepth: Double
    namedLocation: String
    bareGround: String
    coreDiameter: Double
    coreID: String
    monolithLength: Double
    monolithWidth: Double
    rootSampleArea: Double
    rootSampleDepth: Double
    rootSamplingMethod: String
    rootSamplingPossible: String
    wst10cmDist: Double
    wst1cmDist: Double
    toxicodendronPossible: String
  }

type BbcRootChemistryPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plotType: String
    laboratoryName: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    reviewedBy: String
    namedLocation: String
    analyticalRepNumber: String
    carbonPercent: Double
    cnPercentQF: String
    cNratio: Double
    nitrogenPercent: Double
    poolSampleCode: String
    poolSampleID: String
    percentAccuracyQF: String
    co2Trapped: String
  }

type BbcRootmassIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    enteredBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    weighDate: Time
    qaDryMass: String
    dryMass: Double
    subsampleID: String
    dryingHours: Double
    rootStatus: String
    sizeCategory: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    fulcrumVersion: String
    platformInfo: String
    subsampleCode: String
    subsampleFate: String
  }

type BbcRootmassPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    qaDryMass: String
    dryMass: Double
    subsampleID: String
    dryingHours: Double
    rootStatus: String
    sizeCategory: String
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    namedLocation: String
    subsampleCode: String
  }

type BbcRootStableIsotopesPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plotType: String
    laboratoryName: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    reviewedBy: String
    namedLocation: String
    analyticalRepNumber: String
    cnIsotopeQF: String
    d13C: Double
    d15N: Double
    poolSampleCode: String
    poolSampleID: String
    isotopeAccuracyQF: String
    co2Trapped: String
  }

type BetArchivepoolingIn
  {
    uid: String
    plotID: String
    remarks: String
    taxonID: String
    recordedBy: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    sampleType: String
    dataQF: String
    sampleClass: String
    archiveSampleFate: String
    fulcrumVersion: String
    platformInfo: String
    subsampleCode: String
    subsampleFate: String
    archiveSampleCode: String
    archiveVialID: String
    subsampleIDList: String
  }

type BetArchivepoolingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    recordedBy: String
    scientificName: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    dataQF: String
    namedLocation: String
    subsampleCode: String
    archiveSampleCode: String
    archiveVialID: String
    subsampleIDList: String
  }

type BetBarcodingIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    sex: String
    lifeStage: String
    eventID: String
    individualID: String
    scientificName: String
    reproductiveCondition: String
    setDate: Time
    collectDate: Time
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    specimenSource: String
    scientificNameAuthorship: String
    laboratoryName: String
    archiveID: String
    archiveLaboratoryName: String
    collectedBy: String
    method: String
    identificationRemarks: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    geneticSampleCode: String
    geneticSampleFate: String
    samplingMethod: String
    associatedSpecimens: String
    associatedTaxa: String
    externalURLs: String
    individualCode: String
    individualFate: String
    sampleStatus: String
    wellCoordinates: String
    identifierEmail: String
    collectionCode: String
    trappingDays: Double
    depth: Double
    depthPrecision: Double
    eventTime: String
    plateID: String
    bOLDsequenceURL: String
    bOLDtraceURL: String
    nEONsequenceURL: String
    nEONtraceURL: String
  }

type BetBOLDcollectionDataPub
  {
    uid: String
    samplingProtocol: String
    elevation: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    namedLocation: String
    collectionDateAccuracy: String
    collectionEventID: String
    collectionNotes: String
    collectors: String
    coordinateAccuracy: Double
    countryOcean: String
    depth: Double
    depthPrecision: Double
    elevationPrecision: Double
    eventTime: String
    exactSite: String
    gpsSource: String
    habitat: String
    latitude: Double
    longitude: Double
    region: String
    sector: String
    siteCode: String
    stateProvince: String
  }

type BetBOLDspecimenDetailsPub
  {
    uid: String
    sex: String
    lifeStage: String
    sampleID: String
    setDate: Time
    collectDate: Time
    namedLocation: String
    associatedSpecimens: String
    associatedTaxa: String
    externalURLs: String
    reproduction: String
    extraInfo: String
    notes: String
    tissueDescriptor: String
    voucherStatus: String
  }

type BetBOLDtaxonomyPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    tribe: String
    subspecies: String
    namedLocation: String
    identifier: String
    identifierEmail: String
    identifierInstitution: String
    identificationMethod: String
    species: String
    taxonomyNotes: String
  }

type BetBOLDvoucherInfoPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    fieldID: String
    namedLocation: String
    collectionCode: String
    institutionStoring: String
    museumID: String
  }

type BetExpertTaxonomistIDIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    sex: String
    individualID: String
    scientificName: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    laboratoryName: String
    identificationRemarks: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    dataQF: String
    sampleCondition: String
    batchID: String
    individualCode: String
    individualFate: String
  }

type BetExpertTaxonomistIDProcessedPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    sex: String
    individualID: String
    scientificName: String
    taxonRank: String
    setDate: Time
    collectDate: Time
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    laboratoryName: String
    identificationRemarks: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
    individualCode: String
    nativeStatusCode: String
  }

type BetExpertTaxonomistIDRawPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    sex: String
    individualID: String
    scientificName: String
    setDate: Time
    collectDate: Time
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    laboratoryName: String
    identificationRemarks: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
    individualCode: String
  }

type BetExpertTaxonomistQAIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    dataQF: String
    batchID: String
    genusPTD: Double
    speciesPTD: Double
  }

type BetFielddataIn
  {
    uid: String
    plotID: String
    remarks: String
    recordedBy: String
    eventID: String
    trapID: String
    enteredBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    cupStatus: String
    lidStatus: String
    fluidLevel: String
    daysOfTrapping: String
    samplingProtocolVersion: String
    sampleCollected: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    trappingDays: Double
  }

type BetFielddataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    recordedBy: String
    eventID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    trapID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    cupStatus: String
    lidStatus: String
    fluidLevel: String
    daysOfTrapping: String
    plotType: String
    samplingProtocolVersion: String
    sampleCollected: String
    sampleCode: String
    dataQF: String
    namedLocation: String
    trappingDays: Double
  }

type BetIDandpinningIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    totalLength: String
    recordedBy: String
    individualID: String
    trapID: String
    enteredBy: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    subsampleID: String
    dataQF: String
    referencePhotoID: String
    fulcrumVersion: String
    platformInfo: String
    subsampleCode: String
    subsampleFate: String
    dnaBarcoded: String
    individualCode: String
    individualFate: String
    photographedBy: String
    photoView: String
  }

type BetParataxonomistIDPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    totalLength: String
    recordedBy: String
    individualID: String
    scientificName: String
    taxonRank: String
    trapID: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    subsampleID: String
    dataQF: String
    namedLocation: String
    subsampleCode: String
    individualCode: String
    nativeStatusCode: String
  }

type BetSortingIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    trapID: String
    enteredBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    etOHChangeDate: Time
    targetTaxaPresent: String
    sampleType: String
    individualCount: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    subsampleID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleClass: String
    fulcrumVersion: String
    platformInfo: String
    subsampleCode: String
    subsampleFate: String
  }

type BetSortingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    scientificName: String
    taxonRank: String
    trapID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    etOHChangeDate: Time
    sampleType: String
    individualCount: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    subsampleID: String
    sampleCode: String
    dataQF: String
    namedLocation: String
    subsampleCode: String
    nativeStatusCode: String
  }

type BgcCNisoExternalAnalysisIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    sampleType: String
    laboratoryName: String
    internalLabID: String
    instrument: String
    receivedDate: Time
    testMethod: String
    locationID: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    cnSampleCode: String
    cnSampleFate: String
    cnSampleID: String
    reviewedBy: String
    acidTreatment: String
    analyticalRepNumber: String
    carbonPercent: Double
    cnIsotopeQF: String
    cnPercentQF: String
    cNratio: Double
    d13C: Double
    d15N: Double
    nitrogenPercent: Double
    runID: String
    isotopeAccuracyQF: String
    percentAccuracyQF: String
    co2Trapped: String
  }

type BgcCNisoExternalBatchQAIn
  {
    uid: String
    remarks: String
    laboratoryName: String
    internalLabID: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    qaReferenceID: String
    analysisEndDate: Time
    reviewedBy: String
    analyticalRepNumber: String
    carbonPercent: Double
    cnIsotopeQF: String
    cnPercentQF: String
    cNratio: Double
    d13C: Double
    d15N: Double
    nitrogenPercent: Double
    runID: String
    isotopeAccuracyQF: String
    percentAccuracyQF: String
  }

type BgcCNisoExternalSummaryIn
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analyteObservedValue: Double
    analyteAbsoluteError: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type BgcCNisoExternalSummaryPub
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analyteObservedValue: Double
    analyteAbsoluteError: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type BP1min
  {
    staPresMean: Double
    staPresMinimum: Double
    staPresMaximum: Double
    staPresVariance: Double
    staPresNumPts: Double
    staPresExpUncert: Double
    staPresStdErMean: Double
    staPresRangeQAQCRpt: String
    staPresPersistenceQAQCRpt: String
    staPresStepQAQCRpt: String
    staPresNullQAQCRpt: String
    staPresGapQAQCRpt: String
    staPresConsistencyQAQCRpt: String
    staPresSpikeQAQCRpt: String
    staPresAlphaQAQCRpt: String
    staPresBetaQAQCRpt: String
    staPresRangeFailQM: Double
    staPresRangePassQM: Double
    staPresRangeNAQM: Double
    staPresPersistenceFailQM: Double
    staPresPersistencePassQM: Double
    staPresPersistenceNAQM: Double
    staPresStepFailQM: Double
    staPresStepPassQM: Double
    staPresStepNAQM: Double
    staPresNullFailQM: Double
    staPresNullPassQM: Double
    staPresNullNAQM: Double
    staPresGapFailQM: Double
    staPresGapPassQM: Double
    staPresGapNAQM: Double
    staPresSpikeFailQM: Double
    staPresSpikePassQM: Double
    staPresSpikeNAQM: Double
    staPresConsistencyFailQM: Double
    staPresConsistencyPassQM: Double
    staPresConsistencyNAQM: Double
    staPresAlphaQM: Double
    staPresBetaQM: Double
    staPresFinalQF: String
    corPres: Double
    corPresExpUncert: Double
    corPresFinalQF: String
    startDateTime: Time
    endDateTime: Time
    corPresTempQF: String
    corPresDewPtQF: String
    staPresValidCalFailQM: Double
    staPresValidCalNAQM: Double
    staPresValidCalPassQM: Double
    staPresValidCalQAQCRpt: String
    corPresFinalQFSciRvw: String
    staPresFinalQFSciRvw: String
  }

type BP30min
  {
    staPresMean: Double
    staPresMinimum: Double
    staPresMaximum: Double
    staPresVariance: Double
    staPresNumPts: Double
    staPresExpUncert: Double
    staPresStdErMean: Double
    staPresRangeFailQM: Double
    staPresRangePassQM: Double
    staPresRangeNAQM: Double
    staPresPersistenceFailQM: Double
    staPresPersistencePassQM: Double
    staPresPersistenceNAQM: Double
    staPresStepFailQM: Double
    staPresStepPassQM: Double
    staPresStepNAQM: Double
    staPresNullFailQM: Double
    staPresNullPassQM: Double
    staPresNullNAQM: Double
    staPresGapFailQM: Double
    staPresGapPassQM: Double
    staPresGapNAQM: Double
    staPresSpikeFailQM: Double
    staPresSpikePassQM: Double
    staPresSpikeNAQM: Double
    staPresConsistencyFailQM: Double
    staPresConsistencyPassQM: Double
    staPresConsistencyNAQM: Double
    staPresAlphaQM: Double
    staPresBetaQM: Double
    staPresFinalQF: String
    corPres: Double
    corPresExpUncert: Double
    corPresFinalQF: String
    startDateTime: Time
    endDateTime: Time
    corPresTempQF: String
    corPresDewPtQF: String
    staPresValidCalFailQM: Double
    staPresValidCalNAQM: Double
    staPresValidCalPassQM: Double
    corPresFinalQFSciRvw: String
    staPresFinalQFSciRvw: String
  }

type BrdCountdataIn
  {
    uid: String
    siteID: String
    plotID: String
    taxonID: String
    eventID: String
    targetTaxaPresent: String
    identifiedBy: String
    startDate: Time
    endDate: Time
    internalLabID: String
    locationID: String
    pointCountMinute: String
    observerDistance: Double
    detectionMethod: String
    sexOrAge: String
    visualConfirmation: String
    clusterCode: String
    clusterSize: String
    pointID: String
    dataQF: String
    taxonRaw: String
  }

type BrdCountdataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    taxonID: String
    eventID: String
    scientificName: String
    taxonRank: String
    targetTaxaPresent: String
    identifiedBy: String
    plotType: String
    startDate: Time
    endDate: Time
    family: String
    pointCountMinute: String
    observerDistance: Double
    detectionMethod: String
    sexOrAge: String
    visualConfirmation: String
    clusterCode: String
    clusterSize: String
    pointID: String
    vernacularName: String
    dataQF: String
    namedLocation: String
    nativeStatusCode: String
  }

type BrdPerpointIn
  {
    uid: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    eventID: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    laboratoryName: String
    internalLabID: String
    locationID: String
    startCloudCoverPercentage: String
    endCloudCoverPercentage: String
    startRH: String
    endRH: String
    observedHabitat: String
    observedAirTemp: Double
    kmPerHourObservedWindSpeed: Double
    pointID: String
    dataQF: String
  }

type BrdPerpointPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    eventID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    plotType: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    laboratoryName: String
    startCloudCoverPercentage: String
    endCloudCoverPercentage: String
    startRH: String
    endRH: String
    observedHabitat: String
    observedAirTemp: Double
    kmPerHourObservedWindSpeed: Double
    pointID: String
    dataQF: String
    namedLocation: String
  }

type BrdPersonnelIn
  {
    uid: String
    siteID: String
    remarks: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    observerInstitutionName: String
    technicianID: String
    fullName: String
    evaluationMethod: String
    evaluationScore: String
    dataQF: String
  }

type BrdPersonnelPub
  {
    uid: String
    siteID: String
    date: Time
    endDate: Time
    laboratoryName: String
    observerInstitutionName: String
    technicianID: String
    evaluationMethod: String
    evaluationScore: String
    dataQF: String
  }

type BrdReferencesIn
  {
    uid: String
    siteID: String
    identificationReferences: String
    remarks: String
    startDate: Time
    endDate: Time
    dataQF: String
  }

type BrdReferencesPub
  {
    uid: String
    siteID: String
    date: Time
    identificationReferences: String
    remarks: String
    endDate: Time
    dataQF: String
  }

type BryProductivityIn
  {
    uid: String
    plotID: String
    measuredBy: String
    recordedBy: String
    eventID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    subplotID: String
    clipID: String
    bagCount: String
    weighDate: Time
    qaDryMass: String
    dryMass: Double
    storageHours: Double
    samplingProtocolVersion: String
    collectedBy: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    totalSampledArea: Double
    setNetCount: String
    sampledNetCount: String
    missingNetCount: String
    ovenStartDate: Time
    ovenEndDate: Time
    setBy: String
    setRemarks: String
    collectRemarks: String
    weighRemarks: String
    sampleCondition: String
    growthInterval: String
    bryType: String
    fulcrumVersion: String
    platformInfo: String
  }

type BryProductivityPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    measuredBy: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    subplotID: String
    clipID: String
    weighDate: Time
    qaDryMass: String
    dryMass: Double
    storageHours: Double
    dryingHours: Double
    samplingProtocolVersion: String
    collectedBy: String
    sampleCode: String
    dataQF: String
    totalSampledArea: Double
    setNetCount: String
    sampledNetCount: String
    missingNetCount: String
    setBy: String
    setRemarks: String
    collectRemarks: String
    weighRemarks: String
    sampleCondition: String
    growthInterval: String
    bryType: String
    namedLocation: String
  }

type CdwDensitydiskIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    sampleID: String
    collectDate: Time
    weighDate: Time
    dryMass: Double
    subsampleID: String
    dryingHours: Double
    startDate: Time
    bulkDensVolume: Double
    sampleFate: String
    dataQF: String
    sampleBarcode: String
    ovenStartDate: Time
    ovenEndDate: Time
    subsampleFreshMassRatio: Double
    subsampleCode: String
    subsampleFate: String
    aDiskHeight: Double
    bagNumber: String
    bDiskHeight: Double
    bulkDensDisk: Double
    diameter: Double
    diskDryMass: Double
    diskFreshMass: Double
    diskID: String
    maxDiskHeight: Double
    minDiskHeight: Double
    ninetyDiameter: Double
    sampleFreshMass: Double
    qaSample: String
  }

type CdwDensitydiskPub
  {
    uid: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    sampleID: String
    collectDate: Time
    weighDate: Time
    dryMass: Double
    subsampleID: String
    dryingHours: Double
    startDate: Time
    bulkDensVolume: Double
    dataQF: String
    sampleBarcode: String
    ovenStartDate: Time
    ovenEndDate: Time
    namedLocation: String
    subsampleFreshMassRatio: Double
    subsampleCode: String
    aDiskHeight: Double
    bagNumber: String
    bDiskHeight: Double
    bulkDensDisk: Double
    diameter: Double
    diskDryMass: Double
    diskFreshMass: Double
    diskID: String
    maxDiskHeight: Double
    minDiskHeight: Double
    ninetyDiameter: Double
    sampleFreshMass: Double
    qaSample: String
  }

type CdwDensitylogIn
  {
    uid: String
    plotID: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    eventID: String
    sampleID: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    sizeCategory: String
    pointID: String
    sampleFate: String
    dataQF: String
    sampleBarcode: String
    vstTagID: String
    branchBarkCover: String
    branchesPresent: String
    decayClass: String
    leavesPresent: String
    logBarkCover: String
    logDistance: Double
    logHandBreakable: String
    logHoldShape: String
    logID: String
    twigsPresent: String
    yearBoutBegan: Integer
    logAzimuth: String
    mappingMethod: String
    sampleEasting: Double
    sampleNorthing: Double
  }

type CdwDensitylogPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    eventID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    plotType: String
    startDate: Time
    samplingProtocolVersion: String
    sizeCategory: String
    pointID: String
    dataQF: String
    sampleBarcode: String
    namedLocation: String
    vstTagID: String
    branchBarkCover: String
    branchesPresent: String
    decayClass: String
    leavesPresent: String
    logBarkCover: String
    logDistance: Double
    logHandBreakable: String
    logHoldShape: String
    logID: String
    twigsPresent: String
    yearBoutBegan: Integer
    logAzimuth: String
    mappingMethod: String
    sampleEasting: Double
    sampleNorthing: Double
  }

type CdwFieldtallyIn
  {
    uid: String
    plotID: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    eventID: String
    individualID: String
    targetTaxaPresent: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    individualFate: String
    individualBarcode: String
    vstTagID: String
    aForkMaxDiameter: Double
    aForkMinorDiameter: Double
    bForkMaxDiameter: Double
    bForkMinorDiameter: Double
    cForkMaxDiameter: Double
    cForkMinorDiameter: Double
    dForkMaxDiameter: Double
    dForkMinorDiameter: Double
    eForkMaxDiameter: Double
    eForkMinorDiameter: Double
    fForkMaxDiameter: Double
    fForkMinorDiameter: Double
    gForkMaxDiameter: Double
    gForkMinorDiameter: Double
    hForkMaxDiameter: Double
    hForkMinorDiameter: Double
    iForkMaxDiameter: Double
    iForkMinorDiameter: Double
    jForkMaxDiameter: Double
    jForkMinorDiameter: Double
    branchBarkCover: String
    branchesPresent: String
    decayClass: String
    equivalentLogDiameter: Double
    leavesPresent: String
    lidsAzimuth: String
    logBarkCover: String
    logDistance: Double
    logHandBreakable: String
    logHoldShape: String
    logID: String
    logLength: Double
    logMaxDiameter: Double
    logMinorDiameter: Double
    tagStatus: String
    twigsPresent: String
    volumeFactor: String
    yearBoutBegan: Integer
  }

type CdwFieldtallyPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    eventID: String
    individualID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    targetTaxaPresent: String
    plotType: String
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
    individualBarcode: String
    vstTagID: String
    aForkMaxDiameter: Double
    aForkMinorDiameter: Double
    bForkMaxDiameter: Double
    bForkMinorDiameter: Double
    cForkMaxDiameter: Double
    cForkMinorDiameter: Double
    dForkMaxDiameter: Double
    dForkMinorDiameter: Double
    eForkMaxDiameter: Double
    eForkMinorDiameter: Double
    fForkMaxDiameter: Double
    fForkMinorDiameter: Double
    gForkMaxDiameter: Double
    gForkMinorDiameter: Double
    hForkMaxDiameter: Double
    hForkMinorDiameter: Double
    iForkMaxDiameter: Double
    iForkMinorDiameter: Double
    jForkMaxDiameter: Double
    jForkMinorDiameter: Double
    branchBarkCover: String
    branchesPresent: String
    decayClass: String
    equivalentLogDiameter: Double
    leavesPresent: String
    lidsAzimuth: String
    logBarkCover: String
    logDistance: Double
    logHandBreakable: String
    logHoldShape: String
    logID: String
    logLength: Double
    logMaxDiameter: Double
    logMinorDiameter: Double
    twigsPresent: String
    volumeFactor: String
    yearBoutBegan: Integer
  }

type CfcCarbonNitrogenPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plotType: String
    laboratoryName: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    reviewedBy: String
    namedLocation: String
    analyticalRepNumber: String
    carbonPercent: Double
    cnPercentQF: String
    cNratio: Double
    nitrogenPercent: Double
    percentAccuracyQF: String
  }

type CfcChemistrySubsamplingIn
  {
    uid: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    sampleFate: String
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    sampleCondition: String
    cnSampleCode: String
    cnSampleFate: String
    cnSampleID: String
    processedBy: String
    archiveSampleFate: String
    archiveSampleID: String
    ligninSampleBarcode: String
    ligninSampleFate: String
    ligninSampleID: String
    fulcrumVersion: String
    platformInfo: String
    archiveSampleCode: String
    bgcArchive: String
    toxicodendronPossible: String
  }

type CfcChemistrySubsamplingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    plotType: String
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    sampleCondition: String
    cnSampleCode: String
    cnSampleID: String
    processedBy: String
    archiveSampleID: String
    ligninSampleBarcode: String
    ligninSampleID: String
    namedLocation: String
    archiveSampleCode: String
    toxicodendronPossible: String
  }

type CfcChlorophyllIn
  {
    uid: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    receivedDate: Time
    testMethod: String
    analyzedBy: String
    dataQF: String
    sampleCondition: String
    reviewedBy: String
    freshMass: Double
    analyticalRepNumber: String
    runID: String
    measurementQF: String
    extractionStartDate: Time
    receivedCondition: String
    chlCarotWavelength1: Double
    chlCarotWavelength1Abs: Double
    chlCarotWavelength2: Double
    chlCarotWavelength2Abs: Double
    chlCarotWavelength3: Double
    chlCarotWavelength3Abs: Double
    chlCarotWavelength4: Double
    chlCarotWavelength4Abs: Double
    chlorophyllSampleCode: String
    chlorophyllSampleFate: String
    chlorophyllSampleID: String
    dilutionFactor: Double
    extractCarotConc: Double
    extractChlAConc: Double
    extractChlBConc: Double
    extractionLength: Double
    handlingQF: String
    relativeAccuracyScale: String
    solventVolume: Double
  }

type CfcChlorophyllPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    plotType: String
    laboratoryName: String
    receivedDate: Time
    testMethod: String
    analyzedBy: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    reviewedBy: String
    namedLocation: String
    freshMass: Double
    analyticalRepNumber: String
    measurementQF: String
    extractionStartDate: Time
    receivedCondition: String
    chlCarotWavelength1: Double
    chlCarotWavelength1Abs: Double
    chlCarotWavelength2: Double
    chlCarotWavelength2Abs: Double
    chlCarotWavelength3: Double
    chlCarotWavelength3Abs: Double
    chlCarotWavelength4: Double
    chlCarotWavelength4Abs: Double
    chlorophyllSampleCode: String
    chlorophyllSampleID: String
    dilutionFactor: Double
    extractCarotConc: Double
    extractChlAConc: Double
    extractChlBConc: Double
    extractionLength: Double
    handlingQF: String
    relativeAccuracyScale: String
    solventVolume: Double
  }

type CfcChlorophyllBatchQAIn
  {
    uid: String
    remarks: String
    laboratoryName: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    qaReferenceID: String
    analysisEndDate: Time
    reviewedBy: String
    analyticalRepNumber: String
    runID: String
    qaQF: String
    extractCarotConc: Double
    extractChlAConc: Double
    extractChlBConc: Double
    standardChlAConc: Double
  }

type CfcChlorophyllParametersIn
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    chlCarotEquationInput: String
    chlCarotExtinctionCoefficient: Double
    ecReference: String
  }

type CfcChlorophyllParametersPub
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    chlCarotEquationInput: String
    chlCarotExtinctionCoefficient: Double
    ecReference: String
  }

type CfcChlorophyllSummaryIn
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analyteObservedValue: Double
    analyteAbsoluteError: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type CfcChlorophyllSummaryPub
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analyteObservedValue: Double
    analyteAbsoluteError: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type CfcElementsIn
  {
    uid: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    laboratoryName: String
    internalLabID: String
    receivedDate: Time
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    reviewedBy: String
    ligninSampleBarcode: String
    ligninSampleFate: String
    ligninSampleID: String
    analyticalRepNumber: String
    runID: String
    accuracyQF: String
    measurementQF: String
    digestBoronConc: Double
    digestCalciumConc: Double
    digestCopperConc: Double
    digestIronConc: Double
    digestMagnesiumConc: Double
    digestManganeseConc: Double
    digestPhosphorusConc: Double
    digestPotassiumConc: Double
    digestSulfurConc: Double
    digestVolume: Double
    digestZincConc: Double
    foliarBoronConc: Double
    foliarCalciumConc: Double
    foliarCopperConc: Double
    foliarIronConc: Double
    foliarMagnesiumConc: Double
    foliarManganeseConc: Double
    foliarPhosphorusConc: Double
    foliarPotassiumConc: Double
    foliarSulfurConc: Double
    foliarZincConc: Double
  }

type CfcElementsPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    plotType: String
    laboratoryName: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    dataQF: String
    reviewedBy: String
    ligninSampleBarcode: String
    ligninSampleID: String
    namedLocation: String
    analyticalRepNumber: String
    accuracyQF: String
    measurementQF: String
    digestBoronConc: Double
    digestCalciumConc: Double
    digestCopperConc: Double
    digestIronConc: Double
    digestMagnesiumConc: Double
    digestManganeseConc: Double
    digestPhosphorusConc: Double
    digestPotassiumConc: Double
    digestSulfurConc: Double
    digestVolume: Double
    digestZincConc: Double
    foliarBoronConc: Double
    foliarCalciumConc: Double
    foliarCopperConc: Double
    foliarIronConc: Double
    foliarMagnesiumConc: Double
    foliarManganeseConc: Double
    foliarPhosphorusConc: Double
    foliarPotassiumConc: Double
    foliarSulfurConc: Double
    foliarZincConc: Double
  }

type CfcElementsBatchQAIn
  {
    uid: String
    remarks: String
    dryMass: Double
    laboratoryName: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    qaReferenceID: String
    analysisEndDate: Time
    reviewedBy: String
    analyticalRepNumber: String
    runID: String
    qaQF: String
    digestVolume: Double
    foliarBoronConc: Double
    foliarCalciumConc: Double
    foliarCopperConc: Double
    foliarIronConc: Double
    foliarMagnesiumConc: Double
    foliarManganeseConc: Double
    foliarPhosphorusConc: Double
    foliarPotassiumConc: Double
    foliarSulfurConc: Double
    foliarZincConc: Double
    knownBoronConc: Double
    knownCalciumConc: Double
    knownCopperConc: Double
    knownIronConc: Double
    knownMagnesiumConc: Double
    knownManganeseConc: Double
    knownPhosphorusConc: Double
    knownPotassiumConc: Double
    knownSulfurConc: Double
    knownZincConc: Double
  }

type CfcElementsSummaryIn
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analytePercentRecovery: Double
    analyteObservedValue: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type CfcElementsSummaryPub
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analytePercentRecovery: Double
    analyteObservedValue: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type CfcFieldDataIn
  {
    uid: String
    plotID: String
    remarks: String
    taxonID: String
    tagID: String
    recordedBy: String
    individualID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plantStatus: String
    subplotID: String
    clipID: String
    bagCount: String
    clipCellNumber: String
    samplingProtocolVersion: String
    collectedBy: String
    sampleNumber: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    fulcrumVersion: String
    platformInfo: String
    clipLength: Double
    clipWidth: Double
    samplingMethod: String
    individualCode: String
    individualFate: String
    vstTag: String
    chlorophyllSampleCode: String
    chlorophyllSampleFate: String
    chlorophyllSampleID: String
    percentCoverClip: Double
    subsample1Height: Double
    subsample2Height: Double
    subsample3Height: Double
    vd1BaseHeight: Double
    vd1Sample: Double
    vd2BaseHeight: Double
    vd2Sample: Double
    vd3BaseHeight: Double
    vd3Sample: Double
    toxicodendronPossible: String
    chlorophyllSampleCondition: String
  }

type CfcFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    taxonID: String
    tagID: String
    recordedBy: String
    individualID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    sampleID: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plantStatus: String
    subplotID: String
    clipID: String
    plotType: String
    clipCellNumber: String
    samplingProtocolVersion: String
    collectedBy: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
    clipLength: Double
    clipWidth: Double
    samplingMethod: String
    individualCode: String
    vstTag: String
    chlorophyllSampleCode: String
    chlorophyllSampleID: String
    percentCoverClip: Double
    subsample1Height: Double
    subsample2Height: Double
    subsample3Height: Double
    toxicodendronPossible: String
    chlorophyllSampleCondition: String
  }

type CfcFoliarStableIsotopesPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plotType: String
    laboratoryName: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    reviewedBy: String
    namedLocation: String
    analyticalRepNumber: String
    cnIsotopeQF: String
    d13C: Double
    d15N: Double
    isotopeAccuracyQF: String
  }

type CfcLigninPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    plotType: String
    laboratoryName: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    dataQF: String
    reviewedBy: String
    ligninSampleBarcode: String
    ligninSampleID: String
    namedLocation: String
    analyticalRepNumber: String
    accuracyQF: String
    cellulosePercent: Double
    ligninPercent: Double
    measurementQF: String
  }

type CfcLMAIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    sampleFate: String
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    dryMassFraction: Double
    fulcrumVersion: String
    platformInfo: String
    freshMass: Double
    leafArea: Double
    leafMassPerArea: Double
    lmaSampleCode: String
    lmaSampleCondition: String
    lmaSampleFate: String
    lmaSampleID: String
    percentGreen: String
    scanDate: Time
    scannedBy: String
    scannedLeafNumber: String
    weighedBy: String
  }

type CfcLMAPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    measuredBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    plotType: String
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    namedLocation: String
    dryMassFraction: Double
    freshMass: Double
    leafArea: Double
    leafMassPerArea: Double
    lmaSampleCode: String
    lmaSampleCondition: String
    lmaSampleID: String
    percentGreen: String
    scanDate: Time
    scannedBy: String
    scannedLeafNumber: String
    weighedBy: String
  }

type CO2Iso
  {
    fdMoleCO2: Double
    instStat: Integer
    presCavi: Double
    tempCavi: Double
    tempDas: Double
    tempEtal: Double
    tempWarmBox: Double
    posiMPV: Double
    valvOutl: Double
    valvSol: Double
    specID: Double
    fwMoleCO2: Double
    fwMole12CO2: Double
    fdMole12CO2: Double
    fwMole13CO2: Double
    fdMole13CO2: Double
    2Mind13CO2: Double
    30Secd13CO2: Double
    5Mind13CO2: Double
    d13CO2: Double
    percentFwMoleH2O: Double
    2MinCO2IsoRatio: Double
    30SecCO2IsoRatio: Double
    5MinCO2IsoRatio: Double
    cO2IsoRatio: Double
    fwMoleCH4: Double
    fdMoleCH4: Double
    fwMoleHPCH4: Double
    fdMoleHPCH4: Double
    peakHeigH2O: Double
    spliFitCH4: Double
    peakHeig12C: Double
    peakHeig13C: Double
  }

type CO2IsoL0prime
  {
    fdMoleH2O: Double
    fdMoleCO2: Double
    instStat: Integer
    presCavi: Double
    tempCavi: Double
    tempWarmBox: Double
    fwMoleCO2: Double
    fwMole12CO2: Double
    fdMole12CO2: Double
    fwMole13CO2: Double
    fdMole13CO2: Double
    d13CO2: Double
    percentFwMoleH2O: Double
    qfSensStatus: Integer
    idGas: Integer
  }

type CsdContinuousDischargePub
  {
    siteID: String
    startDate: Time
    endDate: Time
    namedLocation: String
    assetID: String
    calCertificateFile: String
    calibratedPressure: Double
    curveID: String
    dischargeAlphaQF: Integer
    dischargeBetaQF: Integer
    dischargeConsistQF: Integer
    dischargeFinalQF: Integer
    dischargeFinalQFSciRvw: String
    dischargeGapQF: Integer
    dischargeNullQF: Integer
    dischargePersistQF: Integer
    dischargeRangeQF: Integer
    dischargeSpikeQF: Integer
    dischargeStepQF: Integer
    dischargeSuspectCalQF: Integer
    dischargeValidCalQF: Integer
    equivalentStage: Double
    maxpostDischarge: Double
    nonSystematicUnc: Double
    stageUnc: Double
    systematicUnc: Double
    withParaUncQlower1Std: Double
    withParaUncQlower2Std: Double
    withParaUncQMean: Double
    withParaUncQMedian: Double
    withParaUncQStdDev: Double
    withParaUncQupper1Std: Double
    withParaUncQupper2Std: Double
    withRemnUncQlower1Std: Double
    withRemnUncQlower2Std: Double
    withRemnUncQMean: Double
    withRemnUncQMedian: Double
    withRemnUncQStdDev: Double
    withRemnUncQupper1Std: Double
    withRemnUncQUpper2Std: Double
    calibrationID: String
    stationHorizontalID: String
  }

type CsdPressureGaugeRelationshipPub
  {
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    assetID: String
    calCertificateFile: String
    calculatedStage: Double
    calcWaterColumnHeight: Double
    calibratedPressMean: Double
    calibratedPressObsCount: Double
    calibratedPressStdDev: Double
    gaugeHeight: Double
    sensorStaffGaugeOffset: Double
    calibrationID: String
    gaugeCollectDate: String
    stationHorizontalID: String
  }

type DepProfileDataIn
  {
    uid: String
    date: Time
    eventID: String
    stationID: String
    waterTemp: Double
    specificConductance: Double
    startDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    sampleDepth: Double
    dataQF: String
  }

type DepProfileDataPub
  {
    uid: String
    domainID: String
    siteID: String
    date: Time
    eventID: String
    waterTemp: Double
    specificConductance: Double
    startDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    sampleDepth: Double
    dataQF: String
    namedLocation: String
  }

type DepProfileHeaderIn
  {
    uid: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    stationID: String
    maxDepth: Double
    startDate: Time
    samplingProtocolVersion: String
    iceThickness: Double
    thermalStratification: String
    dataQF: String
    samplingImpractical: String
    additionalCoordUncertainty: Double
    fulcrumVersion: String
    platformInfo: String
    estimatedMetalimnionDepths: String
    lowerMetalimnionDepth: String
    lowerMetalimnion2Depth: String
    upperMetalimnionDepth: String
    upperMetalimnion2Depth: String
    snowThickness: Double
  }

type DepProfileHeaderPub
  {
    uid: String
    domainID: String
    siteID: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    maxDepth: Double
    startDate: Time
    samplingProtocolVersion: String
    iceThickness: Double
    thermalStratification: String
    dataQF: String
    samplingImpractical: String
    namedLocation: String
    additionalCoordUncertainty: Double
    estimatedMetalimnionDepths: String
    lowerMetalimnionDepth: String
    lowerMetalimnion2Depth: String
    upperMetalimnionDepth: String
    upperMetalimnion2Depth: String
    snowThickness: Double
  }

type DepSecchiIn
  {
    uid: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    stationID: String
    maxDepth: Double
    startDate: Time
    samplingProtocolVersion: String
    secchi1Depth: Double
    secchi2Depth: Double
    clearToBottom: String
    secchiMeanDepth: Double
    euphoticDepth: Double
    dataQF: String
    samplingImpractical: String
    additionalCoordUncertainty: Double
    fulcrumVersion: String
    icePresent: String
    platformInfo: String
  }

type DepSecchiPub
  {
    uid: String
    domainID: String
    siteID: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    maxDepth: Double
    startDate: Time
    samplingProtocolVersion: String
    secchi1Depth: Double
    secchi2Depth: Double
    clearToBottom: String
    secchiMeanDepth: Double
    euphoticDepth: Double
    dataQF: String
    samplingImpractical: String
    namedLocation: String
    additionalCoordUncertainty: Double
    icePresent: String
  }

type DhpPerimagefileIn
  {
    uid: String
    plotID: String
    remarks: String
    sampleID: String
    subsampleID: String
    startDate: Time
    endDate: Time
    locationID: String
    pointID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    subsampleCode: String
    subsampleFate: String
    cameraOrientation: String
    cameraPosition: String
    imageFileName: String
    imageFileNumber: String
    downloadFileName: String
    fulcrumFilePath: String
    imageFilePath: String
    imageType: String
  }

type DhpPerimagefilePub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    subsampleID: String
    startDate: Time
    endDate: Time
    pointID: String
    dataQF: String
    sampleBarcode: String
    namedLocation: String
    subsampleCode: String
    cameraOrientation: String
    cameraPosition: String
    imageFileName: String
    downloadFileName: String
    imageFileUrl: String
    imageType: String
  }

type DhpPerplotIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    boutNumber: String
    sampleID: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    overstoryHeight: Double
    understoryHeight: Double
    yearBoutBegan: Integer
    snowPresent: String
  }

type DhpPerplotPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    plotType: String
    plotSize: Double
    utmZone: String
    slopeAspect: Double
    slopeGradient: Double
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    sampleBarcode: String
    namedLocation: String
    overstoryHeight: Double
    understoryHeight: Double
    snowPresent: String
  }

type Div10m2Data100m2DataIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    enteredBy: String
    boutNumber: String
    targetTaxaPresent: String
    acceptedTaxonID: String
    morphospeciesID: String
    subplotID: String
    taxonIDRemarks: String
    morphospeciesIDRemarks: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    additionalSpecies: String
  }

type Div10m2Data100m2DataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    boutNumber: String
    targetTaxaPresent: String
    morphospeciesID: String
    subplotID: String
    taxonIDRemarks: String
    morphospeciesIDRemarks: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    family: String
    dataQF: String
    namedLocation: String
    nativeStatusCode: String
    additionalSpecies: String
  }

type Div1m2DataIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    enteredBy: String
    boutNumber: String
    targetTaxaPresent: String
    acceptedTaxonID: String
    morphospeciesID: String
    percentCover: Double
    subplotID: String
    divDataType: String
    otherVariablesPresent: String
    taxonIDRemarks: String
    otherVariables: String
    heightPlantOver300cm: String
    heightPlantSpecies: String
    morphospeciesIDRemarks: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
  }

type Div1m2DataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    boutNumber: String
    targetTaxaPresent: String
    morphospeciesID: String
    percentCover: Double
    subplotID: String
    divDataType: String
    otherVariablesPresent: String
    taxonIDRemarks: String
    otherVariables: String
    heightPlantOver300cm: String
    heightPlantSpecies: String
    morphospeciesIDRemarks: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    family: String
    dataQF: String
    namedLocation: String
    nativeStatusCode: String
  }

type DivGeneticarchiveIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    recordedBy: String
    sampleType: String
    morphospeciesID: String
    identifiedBy: String
    taxonIDRemarks: String
    morphospeciesIDRemarks: String
    altLongitude: Double
    altLatitude: Double
    startDate: Time
    endDate: Time
    collectedBy: String
    locationID: String
    dataQF: String
    geneticSampleID: String
    sampleClass: String
    geneticSampleCode: String
    geneticSampleFate: String
    fulcrumVersion: String
    platformInfo: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    altCoordinateSource: String
    altElevation: Double
    altElevationUncertainty: Double
    tagCode: String
    plantCondition: String
    tagFate: String
    untaggedPlantID: String
  }

type DivGeneticarchivePub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    recordedBy: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    morphospeciesID: String
    identifiedBy: String
    taxonIDRemarks: String
    morphospeciesIDRemarks: String
    altLongitude: Double
    altLatitude: Double
    startDate: Time
    endDate: Time
    collectedBy: String
    family: String
    dataQF: String
    geneticSampleID: String
    geneticSampleCode: String
    namedLocation: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    nativeStatusCode: String
    altCoordinateSource: String
    altElevation: Double
    altElevationUncertainty: Double
    tagCode: String
    plantCondition: String
  }

type DivMorphospeciesIn
  {
    uid: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    morphospeciesCreatedDate: Time
    morphospeciesResolved: String
    morphospeciesResolvedDate: Time
  }

type DivVoucherIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    voucherSampleID: String
    recordedBy: String
    morphospeciesID: String
    identifiedBy: String
    taxonIDRemarks: String
    morphospeciesIDRemarks: String
    altLongitude: Double
    altLatitude: Double
    startDate: Time
    endDate: Time
    collectedBy: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    associatedTaxa: String
    voucherSampleFate: String
    altCoordinateSource: String
    altElevation: Double
    altElevationUncertainty: Double
    habitatDescription: String
    tagCode: String
    voucherSampleCode: String
    tagFate: String
    untaggedPlantID: String
    plantDescription: String
    voucherLifeStage: String
    voucherLocality: String
  }

type DivVoucherPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    voucherSampleID: String
    recordedBy: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    morphospeciesID: String
    identifiedBy: String
    taxonIDRemarks: String
    morphospeciesIDRemarks: String
    altLongitude: Double
    altLatitude: Double
    startDate: Time
    endDate: Time
    collectedBy: String
    family: String
    dataQF: String
    namedLocation: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    associatedTaxa: String
    nativeStatusCode: String
    altCoordinateSource: String
    altElevation: Double
    altElevationUncertainty: Double
    habitatDescription: String
    tagCode: String
    voucherSampleCode: String
    plantDescription: String
    voucherLifeStage: String
    voucherLocality: String
  }

type DpmExternalLabIn
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    archiveID: String
    externalRemarks: String
    locationID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    filterID: String
    filterLotID: String
    filterWeighDate: Time
    filterWeightDelta: Double
    filterWeightPostDeploy: Double
    filterWeightPreDeploy: Double
    labAverageHumidity: Double
    labFilterCondition: String
    labFilterConditionRemarks: String
    labFilterDamage: String
    labFilterDamageRemarks: String
    labQARemarks: String
    labRelativeHumidity: Double
    labTemp: Double
    archiveStartDate: Time
    archiveLocatorID: String
    filterManufactureName: String
    filterProductModel: String
  }

type DpmFieldPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    aCollectedBy: String
    bCollectedBy: String
    aSetBy: String
    bSetBy: String
    sampleCode: String
    dataQF: String
    namedLocation: String
    fieldFilterCondition: String
    fieldFilterConditionRemarks: String
    fieldFilterDamage: String
    fieldFilterDamageRemarks: String
    filterID: String
    filterWet: Double
    equipCondition: String
    equipConditionDesc: String
  }

type DpmFieldDataIn
  {
    uid: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    aCollectedBy: String
    bCollectedBy: String
    locationID: String
    aSetBy: String
    bSetBy: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    fieldFilterCondition: String
    fieldFilterConditionRemarks: String
    fieldFilterDamage: String
    fieldFilterDamageRemarks: String
    filterID: String
    filterWet: Double
    equipCondition: String
    equipConditionDesc: String
    filterCode: String
  }

type DpmLabPub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    archiveID: String
    externalRemarks: String
    sampleCode: String
    dataQF: String
    namedLocation: String
    filterID: String
    filterLotID: String
    filterWeighDate: Time
    filterWeightDelta: Double
    filterWeightPostDeploy: Double
    filterWeightPreDeploy: Double
    labAverageHumidity: Double
    labFilterCondition: String
    labFilterConditionRemarks: String
    labFilterDamage: String
    labFilterDamageRemarks: String
    labQARemarks: String
    labRelativeHumidity: Double
    labTemp: Double
  }

type DpmSensorIn
  {
    sensorTemp: Double
    baroPressParticulateMass: Double
    flowRate: Double
    corrAirVolume: Double
    uncorrAirVolume: Double
  }

type DpmSensorPub
  {
    date: Time
    sensorTemp: Double
    baroPressParticulateMass: Double
    flowRate: Double
    corrAirVolume: Double
    uncorrAirVolume: Double
  }

type DPSD
  {
    particulateMass1.0: Double
    particulateMass2.5: Double
    particulateMass4.0: Double
    particulateMass10: Double
    particulateMass15: Double
    pressureFM: Double
    tempFM: Double
    flowRateVolFM: Double
    flowRateMassFM: Double
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
    pumpVoltage: Double
  }

type Dpsd30Minutes
  {
    startDateTime: Time
    endDateTime: Time
    pM15Median: Double
    pM15Minimum: Double
    pM15Maximum: Double
    pM15NumPts: Double
    pM15MAD: Double
    pM15rangeFailQM: Double
    pM15rangePassQM: Double
    pM15rangeNAQM: Double
    pM15persistenceFailQM: Double
    pM15persistencePassQM: Double
    pM15persistenceNAQM: Double
    pM15stepFailQM: Double
    pM15stepPassQM: Double
    pM15stepNAQM: Double
    pM15nullFailQM: Double
    pM15nullPassQM: Double
    pM15nullNAQM: Double
    pM15gapFailQM: Double
    pM15gapPassQM: Double
    pM15gapNAQM: Double
    pM15spikeFailQM: Double
    pM15spikePassQM: Double
    pM15spikeNAQM: Double
    pM15consistencyFailQM: Double
    pM15consistencyPassQM: Double
    pM15consistencyNAQM: Double
    pM15alphaQM: Double
    pM15betaQM: Double
    pM15finalQF: String
    pM10Median: Double
    pM10Minimum: Double
    pM10Maximum: Double
    pM10NumPts: Double
    pM10MAD: Double
    pM10rangeFailQM: Double
    pM10rangePassQM: Double
    pM10rangeNAQM: Double
    pM10persistenceFailQM: Double
    pM10persistencePassQM: Double
    pM10persistenceNAQM: Double
    pM10stepFailQM: Double
    pM10stepPassQM: Double
    pM10stepNAQM: Double
    pM10nullFailQM: Double
    pM10nullPassQM: Double
    pM10nullNAQM: Double
    pM10gapFailQM: Double
    pM10gapPassQM: Double
    pM10gapNAQM: Double
    pM10spikeFailQM: Double
    pM10spikePassQM: Double
    pM10spikeNAQM: Double
    pM10consistencyFailQM: Double
    pM10consistencyPassQM: Double
    pM10consistencyNAQM: Double
    pM10alphaQM: Double
    pM10betaQM: Double
    pM10finalQF: String
    pM4Median: Double
    pM4Minimum: Double
    pM4Maximum: Double
    pM4NumPts: Double
    pM4MAD: Double
    pM4rangeFailQM: Double
    pM4rangePassQM: Double
    pM4rangeNAQM: Double
    pM4persistenceFailQM: Double
    pM4persistencePassQM: Double
    pM4persistenceNAQM: Double
    pM4stepFailQM: Double
    pM4stepPassQM: Double
    pM4stepNAQM: Double
    pM4nullFailQM: Double
    pM4nullPassQM: Double
    pM4nullNAQM: Double
    pM4gapFailQM: Double
    pM4gapPassQM: Double
    pM4gapNAQM: Double
    pM4spikeFailQM: Double
    pM4spikePassQM: Double
    pM4spikeNAQM: Double
    pM4consistencyFailQM: Double
    pM4consistencyPassQM: Double
    pM4consistencyNAQM: Double
    pM4alphaQM: Double
    pM4betaQM: Double
    pM4finalQF: String
    pM2.5Median: Double
    pM2.5Minimum: Double
    pM2.5Maximum: Double
    pM2.5NumPts: Double
    pM2.5MAD: Double
    pM2.5rangeFailQM: Double
    pM2.5rangePassQM: Double
    pM2.5rangeNAQM: Double
    pM2.5persistenceFailQM: Double
    pM2.5persistencePassQM: Double
    pM2.5persistenceNAQM: Double
    pM2.5stepFailQM: Double
    pM2.5stepPassQM: Double
    pM2.5stepNAQM: Double
    pM2.5nullFailQM: Double
    pM2.5nullPassQM: Double
    pM2.5nullNAQM: Double
    pM2.5gapFailQM: Double
    pM2.5gapPassQM: Double
    pM2.5gapNAQM: Double
    pM2.5spikeFailQM: Double
    pM2.5spikePassQM: Double
    pM2.5spikeNAQM: Double
    pM2.5consistencyFailQM: Double
    pM2.5consistencyPassQM: Double
    pM2.5consistencyNAQM: Double
    pM2.5alphaQM: Double
    pM2.5betaQM: Double
    pM2.5finalQF: String
    pM1Median: Double
    pM1Minimum: Double
    pM1Maximum: Double
    pM1NumPts: Double
    pM1MAD: Double
    pM1rangeFailQM: Double
    pM1rangePassQM: Double
    pM1rangeNAQM: Double
    pM1persistenceFailQM: Double
    pM1persistencePassQM: Double
    pM1persistenceNAQM: Double
    pM1stepFailQM: Double
    pM1stepPassQM: Double
    pM1stepNAQM: Double
    pM1nullFailQM: Double
    pM1nullPassQM: Double
    pM1nullNAQM: Double
    pM1gapFailQM: Double
    pM1gapPassQM: Double
    pM1gapNAQM: Double
    pM1spikeFailQM: Double
    pM1spikePassQM: Double
    pM1spikeNAQM: Double
    pM1consistencyFailQM: Double
    pM1consistencyPassQM: Double
    pM1consistencyNAQM: Double
    pM1alphaQM: Double
    pM1betaQM: Double
    pM1finalQF: String
    pM15sub50RHMedian: Double
    pM15sub50RHMinimum: Double
    pM15sub50RHMaximum: Double
    pM15sub50RHNumPts: Double
    pM15sub50RHMAD: Double
    pM15sub50RHrangeFailQM: Double
    pM15sub50RHrangePassQM: Double
    pM15sub50RHrangeNAQM: Double
    pM15sub50RHpersistenceFailQM: Double
    pM15sub50RHpersistencePassQM: Double
    pM15sub50RHpersistenceNAQM: Double
    pM15sub50RHstepFailQM: Double
    pM15sub50RHstepPassQM: Double
    pM15sub50RHstepNAQM: Double
    pM15sub50RHnullFailQM: Double
    pM15sub50RHnullPassQM: Double
    pM15sub50RHnullNAQM: Double
    pM15sub50RHgapFailQM: Double
    pM15sub50RHgapPassQM: Double
    pM15sub50RHgapNAQM: Double
    pM15sub50RHspikeFailQM: Double
    pM15sub50RHspikePassQM: Double
    pM15sub50RHspikeNAQM: Double
    pM15sub50RHconsistencyFailQM: Double
    pM15sub50RHconsistencyPassQM: Double
    pM15sub50RHconsistencyNAQM: Double
    pM15sub50RHalphaQM: Double
    pM15sub50RHbetaQM: Double
    pM15sub50RHfinalQF: String
    pM10sub50RHMedian: Double
    pM10sub50RHMinimum: Double
    pM10sub50RHMaximum: Double
    pM10sub50RHNumPts: Double
    pM10sub50RHMAD: Double
    pM10sub50RHrangeFailQM: Double
    pM10sub50RHrangePassQM: Double
    pM10sub50RHrangeNAQM: Double
    pM10sub50RHpersistenceFailQM: Double
    pM10sub50RHpersistencePassQM: Double
    pM10sub50RHpersistenceNAQM: Double
    pM10sub50RHstepFailQM: Double
    pM10sub50RHstepPassQM: Double
    pM10sub50RHstepNAQM: Double
    pM10sub50RHnullFailQM: Double
    pM10sub50RHnullPassQM: Double
    pM10sub50RHnullNAQM: Double
    pM10sub50RHgapFailQM: Double
    pM10sub50RHgapPassQM: Double
    pM10sub50RHgapNAQM: Double
    pM10sub50RHspikeFailQM: Double
    pM10sub50RHspikePassQM: Double
    pM10sub50RHspikeNAQM: Double
    pM10sub50RHconsistencyFailQM: Double
    pM10sub50RHconsistencyPassQM: Double
    pM10sub50RHconsistencyNAQM: Double
    pM10sub50RHalphaQM: Double
    pM10sub50RHbetaQM: Double
    pM10sub50RHfinalQF: String
    pM4sub50RHMedian: Double
    pM4sub50RHMinimum: Double
    pM4sub50RHMaximum: Double
    pM4sub50RHNumPts: Double
    pM4sub50RHMAD: Double
    pM4sub50RHrangeFailQM: Double
    pM4sub50RHrangePassQM: Double
    pM4sub50RHrangeNAQM: Double
    pM4sub50RHpersistenceFailQM: Double
    pM4sub50RHpersistencePassQM: Double
    pM4sub50RHpersistenceNAQM: Double
    pM4sub50RHstepFailQM: Double
    pM4sub50RHstepPassQM: Double
    pM4sub50RHstepNAQM: Double
    pM4sub50RHnullFailQM: Double
    pM4sub50RHnullPassQM: Double
    pM4sub50RHnullNAQM: Double
    pM4sub50RHgapFailQM: Double
    pM4sub50RHgapPassQM: Double
    pM4sub50RHgapNAQM: Double
    pM4sub50RHspikeFailQM: Double
    pM4sub50RHspikePassQM: Double
    pM4sub50RHspikeNAQM: Double
    pM4sub50RHconsistencyFailQM: Double
    pM4sub50RHconsistencyPassQM: Double
    pM4sub50RHconsistencyNAQM: Double
    pM4sub50RHalphaQM: Double
    pM4sub50RHbetaQM: Double
    pM4sub50RHfinalQF: String
    pM2.5sub50RHMedian: Double
    pM2.5sub50RHMinimum: Double
    pM2.5sub50RHMaximum: Double
    pM2.5sub50RHNumPts: Double
    pM2.5sub50RHMAD: Double
    pM2.5sub50RHrangeFailQM: Double
    pM2.5sub50RHrangePassQM: Double
    pM2.5sub50RHrangeNAQM: Double
    pM2.5sub50RHpersistenceFailQM: Double
    pM2.5sub50RHpersistencePassQM: Double
    pM2.5sub50RHpersistenceNAQM: Double
    pM2.5sub50RHstepFailQM: Double
    pM2.5sub50RHstepPassQM: Double
    pM2.5sub50RHstepNAQM: Double
    pM2.5sub50RHnullFailQM: Double
    pM2.5sub50RHnullPassQM: Double
    pM2.5sub50RHnullNAQM: Double
    pM2.5sub50RHgapFailQM: Double
    pM2.5sub50RHgapPassQM: Double
    pM2.5sub50RHgapNAQM: Double
    pM2.5sub50RHspikeFailQM: Double
    pM2.5sub50RHspikePassQM: Double
    pM2.5sub50RHspikeNAQM: Double
    pM2.5sub50RHconsistencyFailQM: Double
    pM2.5sub50RHconsistencyPassQM: Double
    pM2.5sub50RHconsistencyNAQM: Double
    pM2.5sub50RHalphaQM: Double
    pM2.5sub50RHbetaQM: Double
    pM2.5sub50RHfinalQF: String
    pM1sub50RHMedian: Double
    pM1sub50RHMinimum: Double
    pM1sub50RHMaximum: Double
    pM1sub50RHNumPts: Double
    pM1sub50RHMAD: Double
    pM1sub50RHrangeFailQM: Double
    pM1sub50RHrangePassQM: Double
    pM1sub50RHrangeNAQM: Double
    pM1sub50RHpersistenceFailQM: Double
    pM1sub50RHpersistencePassQM: Double
    pM1sub50RHpersistenceNAQM: Double
    pM1sub50RHstepFailQM: Double
    pM1sub50RHstepPassQM: Double
    pM1sub50RHstepNAQM: Double
    pM1sub50RHnullFailQM: Double
    pM1sub50RHnullPassQM: Double
    pM1sub50RHnullNAQM: Double
    pM1sub50RHgapFailQM: Double
    pM1sub50RHgapPassQM: Double
    pM1sub50RHgapNAQM: Double
    pM1sub50RHspikeFailQM: Double
    pM1sub50RHspikePassQM: Double
    pM1sub50RHspikeNAQM: Double
    pM1sub50RHconsistencyFailQM: Double
    pM1sub50RHconsistencyPassQM: Double
    pM1sub50RHconsistencyNAQM: Double
    pM1sub50RHalphaQM: Double
    pM1sub50RHbetaQM: Double
    pM1sub50RHfinalQF: String
    sensorFlowRateFailQM: Double
    sensorFlowRatePassQM: Double
    sensorFlowRateNAQM: Double
    assemblyFlowRateFailQM: Double
    assemblyFlowRatePassQM: Double
    assemblyFlowRateNAQM: Double
    measurementValidityFailQM: Double
    measurementValidityPassQM: Double
    measurementValidityNAQM: Double
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    pM15finalQFSciRvw: String
    pM10finalQFSciRvw: String
    pM10sub50RHfinalQFSciRvw: String
    pM15sub50RHfinalQFSciRvw: String
    pM1finalQFSciRvw: String
    pM1sub50RHfinalQFSciRvw: String
    pM2.5finalQFSciRvw: String
    pM2.5sub50RHfinalQFSciRvw: String
    pM4finalQFSciRvw: String
    pM4sub50RHfinalQFSciRvw: String
  }

type Dpsd60Minutes
  {
    startDateTime: Time
    endDateTime: Time
    pM15Median: Double
    pM15Minimum: Double
    pM15Maximum: Double
    pM15NumPts: Double
    pM15MAD: Double
    pM15rangeFailQM: Double
    pM15rangePassQM: Double
    pM15rangeNAQM: Double
    pM15persistenceFailQM: Double
    pM15persistencePassQM: Double
    pM15persistenceNAQM: Double
    pM15stepFailQM: Double
    pM15stepPassQM: Double
    pM15stepNAQM: Double
    pM15nullFailQM: Double
    pM15nullPassQM: Double
    pM15nullNAQM: Double
    pM15gapFailQM: Double
    pM15gapPassQM: Double
    pM15gapNAQM: Double
    pM15spikeFailQM: Double
    pM15spikePassQM: Double
    pM15spikeNAQM: Double
    pM15consistencyFailQM: Double
    pM15consistencyPassQM: Double
    pM15consistencyNAQM: Double
    pM15alphaQM: Double
    pM15betaQM: Double
    pM15finalQF: String
    pM10Median: Double
    pM10Minimum: Double
    pM10Maximum: Double
    pM10NumPts: Double
    pM10MAD: Double
    pM10rangeFailQM: Double
    pM10rangePassQM: Double
    pM10rangeNAQM: Double
    pM10persistenceFailQM: Double
    pM10persistencePassQM: Double
    pM10persistenceNAQM: Double
    pM10stepFailQM: Double
    pM10stepPassQM: Double
    pM10stepNAQM: Double
    pM10nullFailQM: Double
    pM10nullPassQM: Double
    pM10nullNAQM: Double
    pM10gapFailQM: Double
    pM10gapPassQM: Double
    pM10gapNAQM: Double
    pM10spikeFailQM: Double
    pM10spikePassQM: Double
    pM10spikeNAQM: Double
    pM10consistencyFailQM: Double
    pM10consistencyPassQM: Double
    pM10consistencyNAQM: Double
    pM10alphaQM: Double
    pM10betaQM: Double
    pM10finalQF: String
    pM4Median: Double
    pM4Minimum: Double
    pM4Maximum: Double
    pM4NumPts: Double
    pM4MAD: Double
    pM4rangeFailQM: Double
    pM4rangePassQM: Double
    pM4rangeNAQM: Double
    pM4persistenceFailQM: Double
    pM4persistencePassQM: Double
    pM4persistenceNAQM: Double
    pM4stepFailQM: Double
    pM4stepPassQM: Double
    pM4stepNAQM: Double
    pM4nullFailQM: Double
    pM4nullPassQM: Double
    pM4nullNAQM: Double
    pM4gapFailQM: Double
    pM4gapPassQM: Double
    pM4gapNAQM: Double
    pM4spikeFailQM: Double
    pM4spikePassQM: Double
    pM4spikeNAQM: Double
    pM4consistencyFailQM: Double
    pM4consistencyPassQM: Double
    pM4consistencyNAQM: Double
    pM4alphaQM: Double
    pM4betaQM: Double
    pM4finalQF: String
    pM2.5Median: Double
    pM2.5Minimum: Double
    pM2.5Maximum: Double
    pM2.5NumPts: Double
    pM2.5MAD: Double
    pM2.5rangeFailQM: Double
    pM2.5rangePassQM: Double
    pM2.5rangeNAQM: Double
    pM2.5persistenceFailQM: Double
    pM2.5persistencePassQM: Double
    pM2.5persistenceNAQM: Double
    pM2.5stepFailQM: Double
    pM2.5stepPassQM: Double
    pM2.5stepNAQM: Double
    pM2.5nullFailQM: Double
    pM2.5nullPassQM: Double
    pM2.5nullNAQM: Double
    pM2.5gapFailQM: Double
    pM2.5gapPassQM: Double
    pM2.5gapNAQM: Double
    pM2.5spikeFailQM: Double
    pM2.5spikePassQM: Double
    pM2.5spikeNAQM: Double
    pM2.5consistencyFailQM: Double
    pM2.5consistencyPassQM: Double
    pM2.5consistencyNAQM: Double
    pM2.5alphaQM: Double
    pM2.5betaQM: Double
    pM2.5finalQF: String
    pM1Median: Double
    pM1Minimum: Double
    pM1Maximum: Double
    pM1NumPts: Double
    pM1MAD: Double
    pM1rangeFailQM: Double
    pM1rangePassQM: Double
    pM1rangeNAQM: Double
    pM1persistenceFailQM: Double
    pM1persistencePassQM: Double
    pM1persistenceNAQM: Double
    pM1stepFailQM: Double
    pM1stepPassQM: Double
    pM1stepNAQM: Double
    pM1nullFailQM: Double
    pM1nullPassQM: Double
    pM1nullNAQM: Double
    pM1gapFailQM: Double
    pM1gapPassQM: Double
    pM1gapNAQM: Double
    pM1spikeFailQM: Double
    pM1spikePassQM: Double
    pM1spikeNAQM: Double
    pM1consistencyFailQM: Double
    pM1consistencyPassQM: Double
    pM1consistencyNAQM: Double
    pM1alphaQM: Double
    pM1betaQM: Double
    pM1finalQF: String
    pM15sub50RHMedian: Double
    pM15sub50RHMinimum: Double
    pM15sub50RHMaximum: Double
    pM15sub50RHNumPts: Double
    pM15sub50RHMAD: Double
    pM15sub50RHrangeFailQM: Double
    pM15sub50RHrangePassQM: Double
    pM15sub50RHrangeNAQM: Double
    pM15sub50RHpersistenceFailQM: Double
    pM15sub50RHpersistencePassQM: Double
    pM15sub50RHpersistenceNAQM: Double
    pM15sub50RHstepFailQM: Double
    pM15sub50RHstepPassQM: Double
    pM15sub50RHstepNAQM: Double
    pM15sub50RHnullFailQM: Double
    pM15sub50RHnullPassQM: Double
    pM15sub50RHnullNAQM: Double
    pM15sub50RHgapFailQM: Double
    pM15sub50RHgapPassQM: Double
    pM15sub50RHgapNAQM: Double
    pM15sub50RHspikeFailQM: Double
    pM15sub50RHspikePassQM: Double
    pM15sub50RHspikeNAQM: Double
    pM15sub50RHconsistencyFailQM: Double
    pM15sub50RHconsistencyPassQM: Double
    pM15sub50RHconsistencyNAQM: Double
    pM15sub50RHalphaQM: Double
    pM15sub50RHbetaQM: Double
    pM15sub50RHfinalQF: String
    pM10sub50RHMedian: Double
    pM10sub50RHMinimum: Double
    pM10sub50RHMaximum: Double
    pM10sub50RHNumPts: Double
    pM10sub50RHMAD: Double
    pM10sub50RHrangeFailQM: Double
    pM10sub50RHrangePassQM: Double
    pM10sub50RHrangeNAQM: Double
    pM10sub50RHpersistenceFailQM: Double
    pM10sub50RHpersistencePassQM: Double
    pM10sub50RHpersistenceNAQM: Double
    pM10sub50RHstepFailQM: Double
    pM10sub50RHstepPassQM: Double
    pM10sub50RHstepNAQM: Double
    pM10sub50RHnullFailQM: Double
    pM10sub50RHnullPassQM: Double
    pM10sub50RHnullNAQM: Double
    pM10sub50RHgapFailQM: Double
    pM10sub50RHgapPassQM: Double
    pM10sub50RHgapNAQM: Double
    pM10sub50RHspikeFailQM: Double
    pM10sub50RHspikePassQM: Double
    pM10sub50RHspikeNAQM: Double
    pM10sub50RHconsistencyFailQM: Double
    pM10sub50RHconsistencyPassQM: Double
    pM10sub50RHconsistencyNAQM: Double
    pM10sub50RHalphaQM: Double
    pM10sub50RHbetaQM: Double
    pM10sub50RHfinalQF: String
    pM4sub50RHMedian: Double
    pM4sub50RHMinimum: Double
    pM4sub50RHMaximum: Double
    pM4sub50RHNumPts: Double
    pM4sub50RHMAD: Double
    pM4sub50RHrangeFailQM: Double
    pM4sub50RHrangePassQM: Double
    pM4sub50RHrangeNAQM: Double
    pM4sub50RHpersistenceFailQM: Double
    pM4sub50RHpersistencePassQM: Double
    pM4sub50RHpersistenceNAQM: Double
    pM4sub50RHstepFailQM: Double
    pM4sub50RHstepPassQM: Double
    pM4sub50RHstepNAQM: Double
    pM4sub50RHnullFailQM: Double
    pM4sub50RHnullPassQM: Double
    pM4sub50RHnullNAQM: Double
    pM4sub50RHgapFailQM: Double
    pM4sub50RHgapPassQM: Double
    pM4sub50RHgapNAQM: Double
    pM4sub50RHspikeFailQM: Double
    pM4sub50RHspikePassQM: Double
    pM4sub50RHspikeNAQM: Double
    pM4sub50RHconsistencyFailQM: Double
    pM4sub50RHconsistencyPassQM: Double
    pM4sub50RHconsistencyNAQM: Double
    pM4sub50RHalphaQM: Double
    pM4sub50RHbetaQM: Double
    pM4sub50RHfinalQF: String
    pM2.5sub50RHMedian: Double
    pM2.5sub50RHMinimum: Double
    pM2.5sub50RHMaximum: Double
    pM2.5sub50RHNumPts: Double
    pM2.5sub50RHMAD: Double
    pM2.5sub50RHrangeFailQM: Double
    pM2.5sub50RHrangePassQM: Double
    pM2.5sub50RHrangeNAQM: Double
    pM2.5sub50RHpersistenceFailQM: Double
    pM2.5sub50RHpersistencePassQM: Double
    pM2.5sub50RHpersistenceNAQM: Double
    pM2.5sub50RHstepFailQM: Double
    pM2.5sub50RHstepPassQM: Double
    pM2.5sub50RHstepNAQM: Double
    pM2.5sub50RHnullFailQM: Double
    pM2.5sub50RHnullPassQM: Double
    pM2.5sub50RHnullNAQM: Double
    pM2.5sub50RHgapFailQM: Double
    pM2.5sub50RHgapPassQM: Double
    pM2.5sub50RHgapNAQM: Double
    pM2.5sub50RHspikeFailQM: Double
    pM2.5sub50RHspikePassQM: Double
    pM2.5sub50RHspikeNAQM: Double
    pM2.5sub50RHconsistencyFailQM: Double
    pM2.5sub50RHconsistencyPassQM: Double
    pM2.5sub50RHconsistencyNAQM: Double
    pM2.5sub50RHalphaQM: Double
    pM2.5sub50RHbetaQM: Double
    pM2.5sub50RHfinalQF: String
    pM1sub50RHMedian: Double
    pM1sub50RHMinimum: Double
    pM1sub50RHMaximum: Double
    pM1sub50RHNumPts: Double
    pM1sub50RHMAD: Double
    pM1sub50RHrangeFailQM: Double
    pM1sub50RHrangePassQM: Double
    pM1sub50RHrangeNAQM: Double
    pM1sub50RHpersistenceFailQM: Double
    pM1sub50RHpersistencePassQM: Double
    pM1sub50RHpersistenceNAQM: Double
    pM1sub50RHstepFailQM: Double
    pM1sub50RHstepPassQM: Double
    pM1sub50RHstepNAQM: Double
    pM1sub50RHnullFailQM: Double
    pM1sub50RHnullPassQM: Double
    pM1sub50RHnullNAQM: Double
    pM1sub50RHgapFailQM: Double
    pM1sub50RHgapPassQM: Double
    pM1sub50RHgapNAQM: Double
    pM1sub50RHspikeFailQM: Double
    pM1sub50RHspikePassQM: Double
    pM1sub50RHspikeNAQM: Double
    pM1sub50RHconsistencyFailQM: Double
    pM1sub50RHconsistencyPassQM: Double
    pM1sub50RHconsistencyNAQM: Double
    pM1sub50RHalphaQM: Double
    pM1sub50RHbetaQM: Double
    pM1sub50RHfinalQF: String
    sensorFlowRateFailQM: Double
    sensorFlowRatePassQM: Double
    sensorFlowRateNAQM: Double
    assemblyFlowRateFailQM: Double
    assemblyFlowRatePassQM: Double
    assemblyFlowRateNAQM: Double
    measurementValidityFailQM: Double
    measurementValidityPassQM: Double
    measurementValidityNAQM: Double
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    pM15finalQFSciRvw: String
    pM10finalQFSciRvw: String
    pM10sub50RHfinalQFSciRvw: String
    pM15sub50RHfinalQFSciRvw: String
    pM1finalQFSciRvw: String
    pM1sub50RHfinalQFSciRvw: String
    pM2.5finalQFSciRvw: String
    pM2.5sub50RHfinalQFSciRvw: String
    pM4finalQFSciRvw: String
    pM4sub50RHfinalQFSciRvw: String
  }

type DscFieldDataIn
  {
    uid: String
    siteID: String
    samplingProtocol: String
    collectDate: Time
    stationID: String
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    streamStage: Double
    handheldDeviceID: String
    velocitySensorID: String
    filterParamTime: Double
    stationEntryTest: String
    waterEdge: String
    totalDischarge: Double
    totalDischargeUnits: String
    dataQF: String
    averageVelocityUnits: String
    averageVelocityUnitsQF: Integer
    dischargeUnitsQF: Integer
    flowCalcQF: String
    flowCalculation: String
    lowVelocityFinalQF: Double
    recorduid: String
    streamStageUnits: String
    streamStageUnitsQF: Integer
    tapeDistanceUnits: String
    tapeDistanceUnitsQF: Integer
    waterDepthUnits: String
    waterDepthUnitsQF: Integer
  }

type DscFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    samplingProtocol: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    streamStage: Double
    handheldDeviceID: String
    velocitySensorID: String
    filterParamTime: Double
    stationEntryTest: String
    waterEdge: String
    totalDischarge: Double
    totalDischargeUnits: String
    dataQF: String
    namedLocation: String
    averageVelocityUnits: String
    averageVelocityUnitsQF: Integer
    dischargeUnitsQF: Integer
    flowCalcQF: String
    flowCalculation: String
    lowVelocityFinalQF: Double
    recorduid: String
    streamStageUnits: String
    streamStageUnitsQF: Integer
    tapeDistanceUnits: String
    tapeDistanceUnitsQF: Integer
    waterDepthUnits: String
    waterDepthUnitsQF: Integer
  }

type DscFieldDataADCPIn
  {
    uid: String
    samplingProtocol: String
    stationID: String
    aCollectedBy: String
    bCollectedBy: String
    maxDepth: Double
    startDate: Time
    endDate: Time
    streamStage: Double
    totalDischarge: Double
    totalDischargeUnits: String
    dataQF: String
    streamStageUnits: String
    rawDataFileName: String
    rawDataFilePath: String
    adcpCompassCalibrated: String
    adcpCompassError: Double
    loopMBT: String
    magneticVariation: Double
    riverDepthMean: Double
    riverDischargeMeasDuration: Double
    riverVelocityMaximum: Double
    riverWidthMean: Double
    stationaryMBT: String
    totalDischargeRU: Double
    velocityUnits: String
    waterTemperature: Double
    widthUnits: String
    windDirRelativeToFlow: String
    windSpeedPrior: Double
    estimated95percentUC: Double
    timeZone: String
  }

type DscFieldDataADCPPub
  {
    uid: String
    domainID: String
    samplingProtocol: String
    stationID: String
    aCollectedBy: String
    bCollectedBy: String
    maxDepth: Double
    startDate: Time
    endDate: Time
    streamStage: Double
    totalDischarge: Double
    totalDischargeUnits: String
    dataQF: String
    namedLocation: String
    streamStageUnits: String
    rawDataFileName: String
    adcpCompassCalibrated: String
    adcpCompassError: Double
    loopMBT: String
    magneticVariation: Double
    riverDepthMean: Double
    riverDischargeMeasDuration: Double
    riverVelocityMaximum: Double
    riverWidthMean: Double
    stationaryMBT: String
    totalDischargeRU: Double
    velocityUnits: String
    waterTemperature: Double
    widthUnits: String
    windDirRelativeToFlow: String
    windSpeedPrior: Double
  }

type DscIndividualFieldDataIn
  {
    uid: String
    siteID: String
    collectDate: Time
    stationID: String
    startDate: Time
    collectedBy: String
    dataQF: String
    averageVelocity: Double
    bedVelocity: Double
    edgeFactor: String
    fourFifthDepthVelocity: Double
    lowVelocityQF: Integer
    oneFifthDepthVelocity: Double
    recorduid: String
    sectionArea: Double
    sectionFlow: Double
    stationNumber: Integer
    streamProfilingMethod: String
    surfaceVelocity: Double
    tapeDistance: Double
    threeFifthDepthVelocity: Double
    twoFifthDepthVelocity: Double
    waterDepth: Double
  }

type DscIndividualFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    collectedBy: String
    dataQF: String
    namedLocation: String
    averageVelocity: Double
    bedVelocity: Double
    edgeFactor: String
    fourFifthDepthVelocity: Double
    lowVelocityQF: Integer
    oneFifthDepthVelocity: Double
    recorduid: String
    sectionArea: Double
    sectionFlow: Double
    stationNumber: Integer
    streamProfilingMethod: String
    surfaceVelocity: Double
    tapeDistance: Double
    threeFifthDepthVelocity: Double
    twoFifthDepthVelocity: Double
    waterDepth: Double
  }

type EOG30Min
  {
    startDateTime: Time
    endDateTime: Time
    groundwaterElevExpUncert: Double
    groundwaterElevMean: Double
    groundwaterElevMinimum: Double
    groundwaterElevMaximum: Double
    groundwaterElevVariance: Double
    groundwaterElevNumPts: Double
    groundwaterElevStdErMean: Double
    gWatElevRangeFailQM: Double
    gWatElevRangePassQM: Double
    gWatElevRangeNAQM: Double
    gWatElevPersistenceFailQM: Double
    gWatElevPersistencePassQM: Double
    gWatElevPersistenceNAQM: Double
    gWatElevStepFailQM: Double
    gWatElevStepPassQM: Double
    gWatElevStepNAQM: Double
    gWatElevNullFailQM: Double
    gWatElevNullPassQM: Double
    gWatElevNullNAQM: Double
    gWatElevGapFailQM: Double
    gWatElevGapPassQM: Double
    gWatElevGapNAQM: Double
    gWatElevSpikeFailQM: Double
    gWatElevSpikePassQM: Double
    gWatElevSpikeNAQM: Double
    gWatElevConsistencyFailQM: Double
    gWatElevConsistencyPassQM: Double
    gWatElevConsistencyNAQM: Double
    gWatElevAlphaQM: Double
    gWatElevBetaQM: Double
    gWatElevFinalQF: String
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    gWatElevFinalQFSciRvw: String
  }

type EOG5Min
  {
    startDateTime: Time
    endDateTime: Time
    groundwaterElev: Double
    groundwaterElevExpUncert: Double
    groundwaterElevRangeQF: Integer
    groundwaterElevPersistQF: Integer
    groundwaterElevStepQF: Integer
    groundwaterElevNullQF: Integer
    groundwaterElevGapQF: Integer
    groundwaterElevConsistQF: Integer
    groundwaterElevSpikeQF: Integer
    validCalQF: Integer
    sciRvwQF: String
  }

type EOS30Min
  {
    startDateTime: Time
    endDateTime: Time
    surfacewaterElevMean: Double
    surfacewaterElevMinimum: Double
    surfacewaterElevMaximum: Double
    surfacewaterElevVariance: Double
    surfacewaterElevNumPts: Double
    surfacewaterElevExpUncert: Double
    surfacewaterElevStdErMean: Double
    sWatElevRangeFailQM: Double
    sWatElevRangePassQM: Double
    sWatElevRangeNAQM: Double
    sWatElevPersistenceFailQM: Double
    sWatElevPersistencePassQM: Double
    sWatElevPersistenceNAQM: Double
    sWatElevStepFailQM: Double
    sWatElevStepPassQM: Double
    sWatElevStepNAQM: Double
    sWatElevNullFailQM: Double
    sWatElevNullPassQM: Double
    sWatElevNullNAQM: Double
    sWatElevGapFailQM: Double
    sWatElevGapPassQM: Double
    sWatElevGapNAQM: Double
    sWatElevSpikeFailQM: Double
    sWatElevSpikePassQM: Double
    sWatElevSpikeNAQM: Double
    sWatElevConsistencyFailQM: Double
    sWatElevConsistencyPassQM: Double
    sWatElevConsistencyNAQM: Double
    sWatElevAlphaQM: Double
    sWatElevBetaQM: Double
    sWatElevFinalQF: String
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    tempRHValidCalQAQCRpt: String
    sWatElevFinalQFSciRvw: String
  }

type EOS5Min
  {
    startDateTime: Time
    endDateTime: Time
    surfacewaterElevMean: Double
    surfacewaterElevMinimum: Double
    surfacewaterElevMaximum: Double
    surfacewaterElevVariance: Double
    surfacewaterElevNumPts: Double
    surfacewaterElevExpUncert: Double
    surfacewaterElevStdErMean: Double
    sWatElevRangeFailQM: Double
    sWatElevRangePassQM: Double
    sWatElevRangeNAQM: Double
    sWatElevPersistenceFailQM: Double
    sWatElevPersistencePassQM: Double
    sWatElevPersistenceNAQM: Double
    sWatElevStepFailQM: Double
    sWatElevStepPassQM: Double
    sWatElevStepNAQM: Double
    sWatElevNullFailQM: Double
    sWatElevNullPassQM: Double
    sWatElevNullNAQM: Double
    sWatElevGapFailQM: Double
    sWatElevGapPassQM: Double
    sWatElevGapNAQM: Double
    sWatElevSpikeFailQM: Double
    sWatElevSpikePassQM: Double
    sWatElevSpikeNAQM: Double
    sWatElevConsistencyFailQM: Double
    sWatElevConsistencyPassQM: Double
    sWatElevConsistencyNAQM: Double
    sWatElevAlphaQM: Double
    sWatElevBetaQM: Double
    sWatElevFinalQF: String
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    tempRHValidCalQAQCRpt: String
    sWatElevFinalQFSciRvw: String
  }

type FshBOLDcollectionDataPub
  {
    uid: String
    samplingProtocol: String
    elevation: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    namedLocation: String
    collectionDateAccuracy: String
    collectionEventID: String
    collectionNotes: String
    collectors: String
    coordinateAccuracy: Double
    countryOcean: String
    depth: Double
    depthPrecision: Double
    elevationPrecision: Double
    eventTime: String
    exactSite: String
    gpsSource: String
    habitat: String
    latitude: Double
    longitude: Double
    region: String
    sector: String
    siteCode: String
    stateProvince: String
  }

type FshBOLDspecimenDetailsPub
  {
    uid: String
    sex: String
    lifeStage: String
    sampleID: String
    setDate: Time
    collectDate: Time
    namedLocation: String
    associatedSpecimens: String
    associatedTaxa: String
    externalURLs: String
    reproduction: String
    extraInfo: String
    notes: String
    tissueDescriptor: String
    voucherStatus: String
  }

type FshBOLDtaxonomyPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    tribe: String
    subspecies: String
    namedLocation: String
    identifier: String
    identifierEmail: String
    identifierInstitution: String
    identificationMethod: String
    species: String
    taxonomyNotes: String
  }

type FshBOLDvoucherInfoPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    fieldID: String
    namedLocation: String
    collectionCode: String
    institutionStoring: String
    museumID: String
  }

type FshBulkCountIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    eventID: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    actualOrEstimated: String
    bulkFishCount: String
    bulkMortality: String
    passEndTime: Time
    passNumber: String
    passStartTime: Time
  }

type FshBulkCountPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    eventID: String
    scientificName: String
    morphospeciesID: String
    identifiedBy: String
    dataQF: String
    namedLocation: String
    actualOrEstimated: String
    bulkFishCount: String
    passEndTime: Time
    passNumber: String
    passStartTime: Time
  }

type FshFieldDataIn
  {
    uid: String
    remarks: String
    identifiedBy: String
    aCollectedBy: String
    bCollectedBy: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    locationID: String
    dataQF: String
    aquaticSiteType: String
    samplingImpractical: String
    fulcrumVersion: String
    platformInfo: String
    cCollectedBy: String
    fixedRandomReach: String
    measuredReachLength: Double
    reachCondition: String
    reachID: String
  }

type FshFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    identifiedBy: String
    aCollectedBy: String
    bCollectedBy: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    aquaticSiteType: String
    samplingImpractical: String
    namedLocation: String
    cCollectedBy: String
    fixedRandomReach: String
    measuredReachLength: Double
    reachCondition: String
    reachID: String
  }

type FshInvertBycatchIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    voucherSampleID: String
    eventID: String
    scientificName: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    voucherSampleFate: String
    voucherSampleCode: String
    bulkMortality: String
    passEndTime: Time
    passNumber: String
    passStartTime: Time
    bulkInvertCount: String
  }

type FshMorphospeciesIn
  {
    uid: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    dataQF: String
    aquaticSiteType: String
    fulcrumVersion: String
    platformInfo: String
    morphospeciesCreatedDate: Time
    morphospeciesResolved: String
    morphospeciesResolvedDate: Time
  }

type FshMorphospeciesPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    recordedBy: String
    scientificName: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    dataQF: String
    namedLocation: String
    morphospeciesCreatedDate: Time
    morphospeciesResolvedDate: Time
  }

type FshNonTargetIn
  {
    uid: String
    remarks: String
    voucherSampleID: String
    eventID: String
    identifiedBy: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    voucherSampleFate: String
    voucherSampleCode: String
    delt: String
    efInjury: String
    efMortality: String
    nonTargetSpecies: String
    passEndTime: Time
    passNumber: String
    passStartTime: Time
    specimenNumber: String
    voucherSampleCollected: String
  }

type FshPerFishIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    voucherSampleID: String
    eventID: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    locationID: String
    samplerType: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    fulcrumVersion: String
    platformInfo: String
    voucherSampleFate: String
    voucherSampleCode: String
    delt: String
    fishLifeStage: String
    fishTotalLength: Double
    fishWeight: Double
    efInjury: String
    efMortality: String
    netDepth: Double
    passEndTime: Time
    passNumber: String
    passStartTime: Time
    sampleTypeCollected: String
    specimenNumber: String
  }

type FshPerFishPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    voucherSampleID: String
    eventID: String
    scientificName: String
    taxonRank: String
    morphospeciesID: String
    identifiedBy: String
    morphospeciesIDRemarks: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    voucherSampleCode: String
    delt: String
    fishLifeStage: String
    fishTotalLength: Double
    fishWeight: Double
    efInjury: String
    efMortality: String
    passEndTime: Time
    passNumber: String
    passStartTime: Time
    sampleTypeCollected: String
    specimenNumber: String
  }

type FshPerPassIn
  {
    uid: String
    remarks: String
    eventID: String
    targetTaxaPresent: String
    waterTemp: Double
    specificConductance: Double
    dissolvedOxygen: Double
    habitatType: String
    locationID: String
    samplerType: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    efTime: Double
    efTime2: Double
    finalDutyCycle: Double
    finalDutyCycle2: Double
    finalFrequency: Double
    finalFrequency2: Double
    finalVoltage: Double
    finalVoltage2: Double
    initialDutyCycle: Double
    initialDutyCycle2: Double
    initialFrequency: Double
    initialFrequency2: Double
    initialVoltage: Double
    initialVoltage2: Double
    netDeploymentTime: Double
    netDepth: Double
    netEndTime: Time
    netIntegrity: String
    netLength: Double
    netSetTime: Time
    passEndTime: Time
    passNumber: String
    passStartTime: Time
    reachID: String
    settingsChanged: String
    settingsChanged2: String
    subdominantHabitatType: String
  }

type FshPerPassPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    eventID: String
    targetTaxaPresent: String
    waterTemp: Double
    specificConductance: Double
    dissolvedOxygen: Double
    habitatType: String
    samplerType: String
    dataQF: String
    namedLocation: String
    efTime: Double
    efTime2: Double
    finalDutyCycle: Double
    finalDutyCycle2: Double
    finalFrequency: Double
    finalFrequency2: Double
    finalVoltage: Double
    finalVoltage2: Double
    initialDutyCycle: Double
    initialDutyCycle2: Double
    initialFrequency: Double
    initialFrequency2: Double
    initialVoltage: Double
    initialVoltage2: Double
    netDeploymentTime: Double
    netDepth: Double
    netEndTime: Time
    netIntegrity: String
    netLength: Double
    netSetTime: Time
    passEndTime: Time
    passNumber: String
    passStartTime: Time
    reachID: String
    settingsChanged: String
    settingsChanged2: String
    subdominantHabitatType: String
  }

type FspBoutMetadataIn
  {
    uid: String
    remarks: String
    eventID: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    instrument: String
    locationID: String
    dataQF: String
    wavelengthIncrement: Double
    fieldSpectrometerSettings: String
    foreopticConnection: String
    foreopticType: String
    lightSource: String
    measurementQuantity: String
    measurementUnits: String
  }

type FspBoutMetadataPub
  {
    uid: String
    siteID: String
    remarks: String
    eventID: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    instrument: String
    dataQF: String
    wavelengthIncrement: Double
    fieldSpectrometerSettings: String
    foreopticConnection: String
    foreopticType: String
    lightSource: String
    measurementQuantity: String
    measurementUnits: String
  }

type FspSampleMetadataIn
  {
    uid: String
    remarks: String
    taxonID: String
    recordedBy: String
    eventID: String
    individualID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    plantStatus: String
    altLongitude: Double
    altLatitude: Double
    collectedBy: String
    locationID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    altCoordinateUncertainty: Double
    measurementDate: Time
    individualCode: String
    individualFate: String
    cfcIndividual: String
    leafAge: String
    leafArrangement: String
    leafExposure: String
    leafSamplePosition: String
    leafStatus: String
    measurementVenue: String
    spectralSampleCode: String
    spectralSampleFate: String
    spectralSampleID: String
    targetStatus: String
    targetType: String
  }

type FspSampleMetadataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    taxonID: String
    recordedBy: String
    eventID: String
    individualID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    sampleID: String
    setDate: Time
    collectDate: Time
    plantStatus: String
    plotType: String
    altLongitude: Double
    altLatitude: Double
    collectedBy: String
    locationID: String
    sampleCode: String
    dataQF: String
    altCoordinateUncertainty: Double
    measurementDate: Time
    individualCode: String
    cfcIndividual: String
    leafAge: String
    leafArrangement: String
    leafExposure: String
    leafSamplePosition: String
    leafStatus: String
    measurementVenue: String
    spectralSampleCode: String
    spectralSampleID: String
    targetStatus: String
    targetType: String
  }

type FspSpectralDataIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    locationID: String
    dataQF: String
    processedBy: String
    reviewedBy: String
    downloadFileName: String
    downloadFileUrl: String
    wavelength: Double
    reflectance: Double
    reflectanceCondition: String
    software: String
    spectralSampleCode: String
    spectralSampleCodeDataFrame: String
    spectralSampleFate: String
    spectralSampleID: String
    spectralSampleIDDataFrame: String
  }

type FspSpectralDataPub
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    locationID: String
    dataQF: String
    processedBy: String
    reviewedBy: String
    downloadFileName: String
    downloadFileUrl: String
    software: String
    spectralSampleCode: String
    spectralSampleID: String
  }

type GagFieldDataIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    collectDate: Time
    startDate: Time
    initialStageHeight: Double
    endStageHeight: Double
    precipDescrip: String
    previousRain: String
    waterColorDescrip: String
    riparianPhenologyDescrip: String
    collectedBy: String
    locationID: String
    dataQF: String
    samplingImpractical: String
    fulcrumVersion: String
    icePresent: String
    platformInfo: String
    beaufortScaleWind: String
    algaePresence: String
    leafLitterPresence: String
    macrophytePresence: String
    nominalCloudCover: String
    oilsPresence: String
    pollenPresence: String
    trashPresent: String
    waterClarityDescrip: String
    woodyDebrisPresence: String
    dscTempHydroCond: String
    dscTempHydroCondLoc: String
    gaugeTempHydroCond: String
    gaugeTempHydroCondLoc: String
  }

type GagFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    startDate: Time
    initialStageHeight: Double
    endStageHeight: Double
    precipDescrip: String
    previousRain: String
    waterColorDescrip: String
    riparianPhenologyDescrip: String
    collectedBy: String
    locationID: String
    dataQF: String
    samplingImpractical: String
    icePresent: String
    beaufortScaleWind: String
    algaePresence: String
    leafLitterPresence: String
    macrophytePresence: String
    nominalCloudCover: String
    oilsPresence: String
    pollenPresence: String
    trashPresent: String
    waterClarityDescrip: String
    woodyDebrisPresence: String
    dscTempHydroCond: String
    dscTempHydroCondLoc: String
    gaugeTempHydroCond: String
    gaugeTempHydroCondLoc: String
  }

type GagStageADCPIn
  {
    uid: String
    recordedBy: String
    eventID: String
    collectDate: Time
    startDate: Time
    initialStageHeight: Double
    collectedBy: String
    locationID: String
    dataQF: String
    transectID: String
    fulcrumVersion: String
    platformInfo: String
    assetID: String
  }

type GeoControlInfoIn
  {
    uid: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    controlActivationState: Integer
    controlNumber: Integer
    segmentNumber: Integer
  }

type GeoControlInfoPub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    controlActivationState: Integer
    controlNumber: Integer
    segmentNumber: Integer
  }

type GeoControlTypeIn
  {
    uid: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    channelSlope: Double
    channelSlopeUnc: Double
    controlNumber: Integer
    hydraulicControlType: String
    manningCoefficient: Double
    manningCoefficientUnc: Double
    orificeArea: Double
    orificeAreaUnc: Double
    parabolaHeight: Double
    parabolaHeightUnc: Double
    parabolaWidth: Double
    parabolaWidthUnc: Double
    rectangularWidth: Double
    rectangularWidthUnc: Double
    stricklerCoefficient: Double
    stricklerCoefficientUnc: Double
    triangularAngle: Double
    triangularAngleUnc: Double
  }

type GeoControlTypePub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    channelSlope: Double
    channelSlopeUnc: Double
    controlNumber: Integer
    hydraulicControlType: String
    manningCoefficient: Double
    manningCoefficientUnc: Double
    orificeArea: Double
    orificeAreaUnc: Double
    parabolaHeight: Double
    parabolaHeightUnc: Double
    parabolaWidth: Double
    parabolaWidthUnc: Double
    rectangularWidth: Double
    rectangularWidthUnc: Double
    stricklerCoefficient: Double
    stricklerCoefficientUnc: Double
    triangularAngle: Double
    triangularAngleUnc: Double
  }

type GeoFeatureInfoIn
  {
    uid: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    bankfullDepth: Double
    bankfullWidth: Double
    featureID: String
    featureType: String
    floodproneHeight: Double
    pebbleCountsCollected: String
    staffGaugeInstalled: String
    staffGaugeMark: Double
    totalStationLocation: String
    upsDwnsHabitatType: String
  }

type GeoFeatureInfoPub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    bankfullDepth: Double
    bankfullWidth: Double
    featureID: String
    featureType: String
    floodproneHeight: Double
    pebbleCountsCollected: String
    staffGaugeInstalled: String
    staffGaugeMark: Double
    totalStationLocation: String
    upsDwnsHabitatType: String
  }

type GeoMappedPointErrorsIn
  {
    uid: String
    startDate: Time
    endDate: Time
    locationID: String
    pointID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    deletePoint: String
    errorDescription: String
    errorDescriptionRemarks: String
  }

type GeoMappedPointErrorsPub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    pointID: String
    dataQF: String
    namedLocation: String
    deletePoint: String
    errorDescription: String
    errorDescriptionRemarks: String
  }

type GeoMissingLineIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    attemptNumber: Integer
    missingLinePoint1: String
    missingLinePoint2: String
    missingLineResultsdH: Double
    missingLineResultsHD: Double
    missingLineReultsStDev: Double
  }

type GeoMissingLinePub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    attemptNumber: Integer
    missingLinePoint1: String
    missingLinePoint2: String
    missingLineResultsdH: Double
    missingLineResultsHD: Double
    missingLineReultsStDev: Double
  }

type GeoPebbleCountIn
  {
    uid: String
    eventID: String
    startDate: Time
    endDate: Time
    habitatType: String
    locationID: String
    dataQF: String
    measurementLocation: String
    fulcrumVersion: String
    platformInfo: String
    pebbleCountNumber: Integer
    pebbleSize: String
    totalStationLocation: String
  }

type GeoPebbleCountPub
  {
    uid: String
    domainID: String
    siteID: String
    eventID: String
    startDate: Time
    endDate: Time
    habitatType: String
    dataQF: String
    measurementLocation: String
    namedLocation: String
    pebbleCountNumber: Integer
    pebbleSize: String
    totalStationLocation: String
  }

type GeoPebbleFieldDataIn
  {
    uid: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    pebbleCountD16: String
    pebbleCountD5: String
    pebbleCountD50: String
    pebbleCountD84: String
    protocolActivity: String
  }

type GeoPebbleFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    geodeticDatum: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
    pebbleCountD16: String
    pebbleCountD5: String
    pebbleCountD50: String
    pebbleCountD84: String
    protocolActivity: String
  }

type GeoPriorParametersIn
  {
    uid: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    controlNumber: Integer
    priorActivationStage: Double
    priorActivationStageUnc: Double
    priorCoefficient: Double
    priorCoefficientUnc: Double
    priorExponent: Double
    priorExponentUnc: Double
  }

type GeoPriorParametersPub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    controlNumber: Integer
    priorActivationStage: Double
    priorActivationStageUnc: Double
    priorCoefficient: Double
    priorCoefficientUnc: Double
    priorExponent: Double
    priorExponentUnc: Double
  }

type GeoResultsFileIn
  {
    uid: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    rawDataFileName: String
    rawDataFilePath: String
    dataFileName: String
    dataFilePath: String
    sopVersion: String
  }

type GeoResultsFilePub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    dataQF: String
    namedLocation: String
    rawDataFileName: String
    rawDataFilePath: String
    dataFileName: String
    dataFilePath: String
    sopVersion: String
  }

type GeoSurveyFieldDataIn
  {
    uid: String
    remarks: String
    measuredBy: String
    recordedBy: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    missingLineWorkflow: String
    pebbleCountD16: String
    pebbleCountD5: String
    pebbleCountD50: String
    pebbleCountD84: String
    totalLWDCount: Integer
  }

type GeoSurveyFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    geodeticDatum: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
    missingLineWorkflow: String
    pebbleCountD16: String
    pebbleCountD5: String
    pebbleCountD50: String
    pebbleCountD84: String
    totalLWDCount: Integer
  }

type GeoTotalStationIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    featuresSurveyed: String
    featuresSurveyedOther: String
    firstControlPointID: String
    firstControlPointType: String
    firstThalwegPoint: Integer
    firstThalwegPointName: String
    lastThalwegPoint: Integer
    lastThalwegPointName: String
    secondControlPointID: String
    secondControlPointType: String
    stDevH: Double
    stDevHADegrees: Double
    stDevHAMinutes: Double
    stDevHASeconds: Double
    stDevPos: Double
    thirdControlPointID: String
    thirdControlPointType: String
    totalStationLocation: String
  }

type GeoTotalStationPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    featuresSurveyed: String
    featuresSurveyedOther: String
    firstControlPointID: String
    firstControlPointType: String
    firstThalwegPoint: Integer
    firstThalwegPointName: String
    lastThalwegPoint: Integer
    lastThalwegPointName: String
    secondControlPointID: String
    secondControlPointType: String
    stDevH: Double
    stDevHADegrees: Double
    stDevHAMinutes: Double
    stDevHASeconds: Double
    stDevPos: Double
    thirdControlPointID: String
    thirdControlPointType: String
    totalStationLocation: String
  }

type GsiExternalLabH2OIsotopesPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    receivedBy: String
    externalRemarks: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    d18OWater: Double
    d2HWater: Double
    isotopeH2OSampleID: String
    isotopeH2OSampleCode: String
    d18OsdWater: Double
    d2HsdWater: Double
    instrumentSN: String
    isotopeH2OExternalLabQF: String
    sampleCondition: String
    externalLabDataQF: String
    namedLocation: String
  }

type GsiFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    parentSampleID: String
    processedDateH2OIsotopes: Time
    isotopeH2OSampleID: String
    isotopeH2OSampleCode: String
    parentSampleCode: String
    fieldDataQF: String
    namedLocation: String
    isotopeH2OSampleCond: String
  }

type GsiFieldSuperParentPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    waterTemp: Double
    specificConductance: Double
    aCollectedBy: String
    bCollectedBy: String
    altLocation: String
    altLongitude: Double
    altLatitude: Double
    maxDepth: Double
    upperSegmentDepth: Double
    lowerSegmentDepth: Double
    startDate: Time
    waterColorDescrip: String
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    wellWaterDepth: Double
    sampleDepth: Double
    sampleExtractionMethod: String
    wellVolumePurged: Double
    samplerType: String
    parentSampleID: String
    lakeSampleDepth1: Double
    lakeSampleDepth2: Double
    sdgSamplingProtocolVersion: String
    asiSamplingProtocolVersion: String
    aquaticSiteType: String
    parentSampleCode: String
    fieldDataQF: String
    samplingImpractical: String
    namedLocation: String
    waterClarityDescrip: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    amcSamplingProtocolVersion: String
    swcSamplingProtocolVersion: String
  }

type GwcDomainLabDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    measuredBy: String
    collectDate: Time
    sampleType: String
    titrationLocation: String
    initialSamplepH: Double
    initialSampleTemp: Double
    normality: String
    sampleVolume: Double
    methodType: String
    titrationDate: Time
    startDate: Time
    alkMeqPerL: Double
    alkMgPerL: Double
    ancMeqPerL: Double
    ancMgPerL: Double
    domainSampleID: String
    parentSampleID: String
    dataQF: String
    parentSampleCode: String
    namedLocation: String
    domainSampleCode: String
    titrationDataString: String
  }

type GwcExternalLabDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    sampleID: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    pH: Double
    externalConductance: Double
    waterCarbonate: Double
    waterBicarbonate: Double
    externalANC: Double
    waterCalcium: Double
    waterMagnesium: Double
    waterSodium: Double
    waterPotassium: Double
    waterSulfate: Double
    waterChlorine: Double
    waterManganese: Double
    waterIron: Double
    waterBromine: Double
    waterFluorine: Double
    waterSilica: Double
    totalSuspendedSolids: Double
    totalSuspendedSolidsDryMass: Double
    totalDissolvedSolids: Double
    waterNitrateAndNitriteN: Double
    waterNitriteN: Double
    waterAmmoniumN: Double
    waterOrthophosphateP: Double
    waterTotalNitrogen: Double
    totalDissolvedNitrogen: Double
    dissolvedInorganicCarbon: Double
    dissolvedOrganicCarbon: Double
    waterTotalOrganicCarbon: Double
    waterTotalPhosphorus: Double
    totalDissolvedPhosphorus: Double
    totalParticulateCarbonMass: Double
    totalParticulateNitrogenMass: Double
    uvAbsorbance250: Double
    uvAbsorbance284: Double
    coolerTemp: Double
    receivedBy: String
    shipmentCondition: String
    shipmentWarmQF: Double
    shipmentLateQF: Double
    sampleCode: String
    sampleCondition: String
    externalLabDataQF: String
    namedLocation: String
  }

type GwcFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    collectDate: Time
    processedDate: Time
    sampleVolumeFiltered: Double
    startDate: Time
    parentSampleID: String
    processedDateFilters: Time
    sampleCode: String
    parentSampleCode: String
    sampleCondition: String
    fieldDataQF: String
    replicateNumber: Integer
    namedLocation: String
    gwwAlkSampleBubbleFree: String
    gwwAlkSampleHeadspace: String
    gwwFiltBubbleFree: String
    gwwFiltSampleHeadspace: String
  }

type GwcFieldSuperParentPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    waterTemp: Double
    specificConductance: Double
    aCollectedBy: String
    bCollectedBy: String
    altLocation: String
    altLongitude: Double
    altLatitude: Double
    maxDepth: Double
    upperSegmentDepth: Double
    lowerSegmentDepth: Double
    startDate: Time
    waterColorDescrip: String
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    pH: Double
    wellWaterDepth: Double
    sampleDepth: Double
    sampleExtractionMethod: String
    wellVolumePurged: Double
    samplerType: String
    parentSampleID: String
    lakeSampleDepth1: Double
    lakeSampleDepth2: Double
    sdgSamplingProtocolVersion: String
    asiSamplingProtocolVersion: String
    aquaticSiteType: String
    parentSampleCode: String
    fieldDataQF: String
    samplingImpractical: String
    namedLocation: String
    waterClarityDescrip: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    amcSamplingProtocolVersion: String
    swcSamplingProtocolVersion: String
    adequateSampleVol: String
  }

type H2OIso
  {
    instStat: Integer
    presCavi: Double
    tempCavi: Double
    tempDas: Double
    tempEtal: Double
    tempWarmBox: Double
    posiMPV: Double
    valvOutl: Double
    fwMoleCH4: Double
    valvMask: Double
    ppmvFwMoleH2O: Double
    n2Flag: Double
    baseShift: Double
    slopShift: Double
    resiRMS: Double
    d18OWater: Double
    d2HWater: Double
  }

type H2OIsoL0prime
  {
    fdMoleH2O: Double
    instStat: Integer
    presCavi: Double
    tempCavi: Double
    tempWarmBox: Double
    valvMask: Double
    ppmvFwMoleH2O: Double
    n2Flag: Double
    d18OWater: Double
    d2HWater: Double
    qfSensStatus: Integer
    qfStusN2: Integer
    qfLowRtioMoleWetH2O: Integer
  }

type H2oIsoCVAL
  {
    d2HWaterLow: Double
    d18OWaterLow: Double
    d2HWaterMed: Double
    d18OWaterMed: Double
    d2HWaterHigh: Double
    d18OWaterHigh: Double
    d18OWaterHighArchive: Double
    d18OWaterLowArchive: Double
    d18OWaterMedArchive: Double
    d2HWaterHighArchive: Double
    d2HWaterLowArchive: Double
    d2HWaterMedArchive: Double
  }

type HbpMassdataIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    enteredBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    herbGroup: String
    weighDate: Time
    qaDryMass: String
    dryMass: Double
    subsampleID: String
    dryingHours: Double
    sampleFate: String
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    subsampleFreshMassRatio: Double
    freshMass: Double
    subsampleCode: String
    subsampleDryMass: Double
    subsampleFate: String
    subsampleFreshMass: Double
  }

type HbpMassdataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    herbGroup: String
    weighDate: Time
    qaDryMass: String
    dryMass: Double
    subsampleID: String
    plotType: String
    dryingHours: Double
    sampleCode: String
    dataQF: String
    namedLocation: String
    freshMass: Double
    subsampleCode: String
    subsampleDryMass: Double
    subsampleFreshMass: Double
  }

type HbpPerboutIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    enteredBy: String
    boutNumber: String
    sampleID: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    subplotID: String
    clipID: String
    exclosure: String
    bagCount: String
    clipCellNumber: String
    samplingProtocolVersion: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    hbpType: String
    subsamplesCreated: String
    clipArea: Double
    clipLength: Double
    clipWidth: Double
  }

type HbpPerboutPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    boutNumber: String
    sampleID: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    subplotID: String
    clipID: String
    exclosure: String
    plotType: String
    plotSize: Double
    utmZone: String
    slopeAspect: Double
    slopeGradient: Double
    samplingProtocolVersion: String
    sampleCode: String
    dataQF: String
    namedLocation: String
    clipArea: Double
    clipLength: Double
    clipWidth: Double
    plotManagement: String
  }

type HutEnv
  {
    tempHut: Double
    rHHut: Double
    baroPresHut: Double
    h2OMixRatioHut: Double
  }

type HutEnvL0prime
  {
    tempHut: Double
    rHHut: Double
    baroPresHut: Double
    h2OMixRatioHut: Double
    qfTemp: String
    qfRh: Integer
  }

type InvDnaExtractionIn
  {
    uid: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    geneticSampleCode: String
    geneticSampleFate: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    sampleMass: Double
    samplePercent: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    nucleicAcidPurity: Double
    standardCreationLocation: String
  }

type InvDnaExtractionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    nucleicAcidPurity: Double
  }

type InvDnaExtractionStandardPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    nucleicAcidPurity: Double
    standardCreationLocation: String
  }

type InvDnaRawDataFilesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type InvDnaRawDataFilesStandardPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type InvDnaStandardIn
  {
    uid: String
    remarks: String
    sampleID: String
    startDate: Time
    endDate: Time
    locationID: String
    createdDate: Time
    sampleFate: String
    sampleCode: String
    dataQF: String
    dnaStandardSampleCode: String
    dnaStandardSampleFate: String
    dnaStandardSampleID: String
  }

type InvDnaStandardTaxonIn
  {
    uid: String
    remarks: String
    scientificName: String
    sampleID: String
    individualCount: String
    startDate: Time
    endDate: Time
    locationID: String
    sizeClass: String
    createdBy: String
    dataQF: String
    dnaStandardSampleCode: String
    dnaStandardSampleFate: String
    dnaStandardSampleID: String
  }

type InvDnaStandardTaxonPub
  {
    uid: String
    remarks: String
    scientificName: String
    sampleID: String
    individualCount: String
    startDate: Time
    endDate: Time
    locationID: String
    sizeClass: String
    createdBy: String
    dataQF: String
    dnaStandardSampleCode: String
    dnaStandardSampleID: String
  }

type InvFielddataIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    sampleID: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    habitatType: String
    locationID: String
    benthicArea: Double
    samplerType: String
    sampleNumber: String
    substratumSizeClass: String
    ponarDepth: Double
    snagLength: Double
    snagDiameter: Double
    sampleFate: String
    sampleCode: String
    dataQF: String
    geneticSampleID: String
    aquaticSiteType: String
    geneticSampleCode: String
    geneticSampleFate: String
    samplingImpractical: String
    fulcrumVersion: String
    platformInfo: String
    dnaSnagDiameter: Double
    dnaSnagLength: Double
  }

type InvFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    habitatType: String
    benthicArea: Double
    samplerType: String
    substratumSizeClass: String
    ponarDepth: Double
    snagLength: Double
    snagDiameter: Double
    sampleCode: String
    dataQF: String
    geneticSampleID: String
    aquaticSiteType: String
    geneticSampleCode: String
    samplingImpractical: String
    namedLocation: String
    dnaSnagDiameter: Double
    dnaSnagLength: Double
  }

type InvMarkerGeneSequencingIn
  {
    uid: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    replicate: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    primerSetID: String
    processedSeqFileName: String
  }

type InvMarkerGeneSequencingPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    replicate: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    primerSetID: String
    processedSeqFileName: String
  }

type InvMarkerGeneSequencingStandardPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    replicate: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    primerSetID: String
    processedSeqFileName: String
  }

type InvPcrAmplificationIn
  {
    uid: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    qaqcStatus: String
    replicate: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
    primerSetID: String
  }

type InvPcrAmplificationPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    replicate: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
    primerSetID: String
  }

type InvPcrAmplificationStandardPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    replicate: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
    primerSetID: String
  }

type InvPersampleIn
  {
    uid: String
    sampleID: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    sortDate: Time
    sortedBy: String
    testProtocolVersion: String
    locationID: String
    subsamplePercent: Double
    qcSortDate: Time
    primaryMatrix: String
    preRinseVolume: Double
    postRinseVolume: Double
    qcSortedBy: String
    qcPercentSimilarity: Double
    benchRemarks: String
    qcSortingEfficacy: Double
    qcIterationCount: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    qcEnumerationDifference: Double
    qcTaxonomicDifference: Double
    chironomidVialCode: String
    chironomidVialFate: String
    chironomidVialID: String
    oligochaeteVialCode: String
    oligochaeteVialFate: String
    oligochaeteVialID: String
  }

type InvPersamplePub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    sortDate: Time
    sortedBy: String
    subsamplePercent: Double
    qcSortDate: Time
    primaryMatrix: String
    preRinseVolume: Double
    postRinseVolume: Double
    qcSortedBy: String
    qcPercentSimilarity: Double
    benchRemarks: String
    qcSortingEfficacy: Double
    qcIterationCount: String
    sampleCode: String
    dataQF: String
    namedLocation: String
    qcEnumerationDifference: Double
    qcTaxonomicDifference: Double
    chironomidVialCode: String
    chironomidVialID: String
    oligochaeteVialCode: String
    oligochaeteVialID: String
  }

type InvPertaxonIn
  {
    uid: String
    identificationReferences: String
    identificationQualifier: String
    scientificName: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    identificationRemarks: String
    locationID: String
    slideID: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    subsamplePercent: Double
    invertebrateLifeStage: String
    sizeClass: String
    immatureSpecimen: String
    distinctTaxon: String
    qcChecked: String
    indeterminateSpecies: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    estimatedTotalCount: Double
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    slideCode: String
    slideFate: String
  }

type InvPervialIn
  {
    uid: String
    scientificName: String
    sampleID: String
    morphospeciesID: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    locationID: String
    slideID: String
    referenceCount: String
    referenceID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    slideCode: String
    referenceFate: String
    referenceCode: String
    slideFate: String
  }

type InvPervialPub
  {
    uid: String
    domainID: String
    siteID: String
    scientificName: String
    sampleID: String
    collectDate: Time
    morphospeciesID: String
    startDate: Time
    laboratoryName: String
    slideID: String
    referenceCount: String
    referenceID: String
    sampleCode: String
    dataQF: String
    slideCode: String
    referenceCode: String
    namedLocation: String
  }

type InvRawDataFilesIn
  {
    uid: String
    remarks: String
    processedDate: Time
    startDate: Time
    endDate: Time
    laboratoryName: String
    internalLabID: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
    parentFolderName: String
  }

type InvTaxonomyProcessedPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    acceptedTaxonID: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    startDate: Time
    laboratoryName: String
    identificationRemarks: String
    slideID: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    subsamplePercent: Double
    invertebrateLifeStage: String
    sizeClass: String
    immatureSpecimen: String
    distinctTaxon: String
    qcChecked: String
    indeterminateSpecies: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    estimatedTotalCount: Double
    subkingdom: String
    infrakingdom: String
    superclass: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    slideCode: String
    superphylum: String
    infraphylum: String
    namedLocation: String
  }

type InvTaxonomyRawPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    startDate: Time
    laboratoryName: String
    identificationRemarks: String
    slideID: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    subsamplePercent: Double
    invertebrateLifeStage: String
    sizeClass: String
    immatureSpecimen: String
    distinctTaxon: String
    qcChecked: String
    indeterminateSpecies: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    estimatedTotalCount: Double
    subkingdom: String
    infrakingdom: String
    superclass: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    slideCode: String
    superphylum: String
    infraphylum: String
    namedLocation: String
  }

type IRBioTemp
  {
    infraredThermopileOutput: Double
    sensorResistance: Double
  }

type IRBT1Minute
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    bioTempMean: Double
    bioTempMinimum: Double
    bioTempMaximum: Double
    bioTempVariance: Double
    bioTempNumPts: Double
    bioTempExpUncert: Double
    bioTempStdErMean: Double
    nANQAQCRpt: String
    nANFailQM: Double
    nANPassQM: Double
    nANNAQM: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type IRBT30Minute
  {
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    bioTempMean: Double
    bioTempMinimum: Double
    bioTempMaximum: Double
    bioTempVariance: Double
    bioTempNumPts: Double
    bioTempExpUncert: Double
    bioTempStdErMean: Double
    nANFailQM: Double
    nANPassQM: Double
    nANNAQM: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    finalQFSciRvw: String
  }

type Irga
  {
    idx: Integer
    diag: Integer
    tempBloc: Double
    tempCellIn: Double
    tempCellOut: Double
    presAtmBox: Double
    presGageCell: Double
    pwrH2OSamp: Double
    pwrH2ORef: Double
    asrpH2O: Double
    rhoMoleH2O: Double
    fdMoleH2O: Double
    pwrCO2Samp: Double
    pwrCO2Ref: Double
    asrpCO2: Double
    rhoMoleCO2: Double
    fdMoleCO2: Double
    diag2: Integer
    poteCool: Double
    ssiCO2: Double
    ssiH2O: Double
  }

type IrgaL0prime
  {
    idx: Integer
    diag: Integer
    tempBloc: Double
    tempCellIn: Double
    tempCellOut: Double
    presAtmBox: Double
    presGageCell: Double
    pwrH2OSamp: Double
    pwrH2ORef: Double
    asrpH2O: Double
    rhoMoleH2O: Double
    fdMoleH2O: Double
    pwrCO2Samp: Double
    pwrCO2Ref: Double
    asrpCO2: Double
    rhoMoleCO2: Double
    fdMoleCO2: Double
    diag2: Integer
    poteCool: Double
    ssiCO2: Double
    ssiH2O: Double
    tempMean: String
    presSum: String
    qfIrgaHead: Integer
    qfIrgaTempOut: Integer
    qfIrgaTempIn: Integer
    qfIrgaAux: Integer
    qfIrgaPres: Integer
    qfIrgaChop: Integer
    qfIrgaDetc: Integer
    qfIrgaPll: Integer
    qfIrgaSync: Integer
    qfIrgaAgc: Integer
  }

type IrgaGasCyl
  {
    fdMoleCO2: Double
    fdMole12CO2: Double
    fdMole13CO2: Double
    d13CO2: Double
  }

type IrgaMfcSamp
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
  }

type IrgaMfcSampL0prime
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
  }

type IrgaMfcVali
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
  }

type IrgaMfcValiL0prime
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
  }

type IrgaPresTrap
  {
    presAtm: Double
  }

type IrgaPresTrapL0prime
  {
    presAtm: Double
  }

type IrgaPresValiLine
  {
    presGage: Double
  }

type IrgaPresValiLineL0prime
  {
    presGage: Double
  }

type IrgaPresValiRegIn
  {
    presGage: Double
  }

type IrgaPresValiRegInL0prime
  {
    presGage: Double
  }

type IrgaPresValiRegOut
  {
    presGage: Double
  }

type IrgaPump
  {
    pumpVoltage: Double
  }

type IrgaPumpL0prime
  {
    pumpVoltage: Double
  }

type IrgaSndLeak
  {
    qfTrapIn: Integer
    qfTrapOut: Integer
    qfLeak: Integer
    qfHeatSoni: Integer
    qfHeatTube: Integer
    qfHeatCap: Integer
    qfHeatVali: Integer
  }

type IrgaSndLeakHeatL0prime
  {
    qfTrapIn: Integer
    qfTrapOut: Integer
    qfLeak: Integer
    qfHeatSoni: Integer
    qfHeatTube: Integer
    qfHeatCap: Integer
    qfHeatVali: Integer
  }

type IrgaSndValiHut
  {
    qfGas1: Integer
    qfGas2: Integer
    qfGas3: Integer
    qfGas4: Integer
    qfGas5: Integer
  }

type IrgaSndValiHutL0prime
  {
    qfGas1: Integer
    qfGas2: Integer
    qfGas3: Integer
    qfGas4: Integer
    qfGas5: Integer
  }

type IrgaSndValiNema
  {
    qfGas1: Integer
    qfGas2: Integer
    qfGas3: Integer
    qfGas4: Integer
    qfGas5: Integer
  }

type IrgaSndValiNemaL0prime
  {
    qfGas1: Integer
    qfGas2: Integer
    qfGas3: Integer
    qfGas4: Integer
    qfGas5: Integer
  }

type IrgaSndValiNemaL1prime
  {
    qfGas1: Integer
    qfGas2: Integer
    qfGas3: Integer
    qfGas4: Integer
    qfGas5: Integer
  }

type LevelTroll
  {
    batteryVoltage: Double
    tempDataQualityID: Double
    pressureDataQualityID: Double
    surfaceWaterTemperature: Double
    surfaceWaterPressure: Double
  }

type LigExternalSummaryPub
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analytePercentRecovery: Double
    analyteObservedValue: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type LtrChemistrySubsamplingIn
  {
    uid: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    dataQF: String
    cnSampleCode: String
    cnSampleFate: String
    cnSampleID: String
    processedBy: String
    archiveSampleBarcode: String
    archiveSampleFate: String
    archiveSampleID: String
    ligninSampleBarcode: String
    ligninSampleFate: String
    ligninSampleID: String
    massSampleBarcodeList: String
    massSampleFateList: String
    massSampleIDList: String
    massSampleMixtureBarcode: String
    massSampleMixtureFate: String
    massSampleMixtureID: String
    toxicodendronPossible: String
  }

type LtrChemistrySubsamplingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    processedBy: String
    archiveSampleBarcode: String
    archiveSampleID: String
    ligninSampleBarcode: String
    ligninSampleID: String
    massSampleBarcodeList: String
    massSampleIDList: String
    massSampleMixtureBarcode: String
    massSampleMixtureID: String
    namedLocation: String
    toxicodendronPossible: String
  }

type LtrFielddataIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    trapID: String
    boutNumber: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    dataQF: String
    trapCondition: String
    fieldSampleBarcode: String
    fieldSampleFate: String
    fieldSampleID: String
    yearBoutBegan: Integer
    trappingDays: Double
    toxicodendronPossible: String
  }

type LtrFielddataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    trapID: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    dataQF: String
    trapCondition: String
    fieldSampleBarcode: String
    fieldSampleID: String
    namedLocation: String
    trappingDays: Double
    toxicodendronPossible: String
  }

type LtrLigninIn
  {
    uid: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    laboratoryName: String
    internalLabID: String
    receivedDate: Time
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    reviewedBy: String
    ligninSampleBarcode: String
    ligninSampleFate: String
    ligninSampleID: String
    analyticalRepNumber: String
    runID: String
    accuracyQF: String
    cellulosePercent: Double
    ligninPercent: Double
    measurementQF: String
  }

type LtrLigninBatchQAIn
  {
    uid: String
    remarks: String
    dryMass: Double
    laboratoryName: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    qaReferenceID: String
    analysisEndDate: Time
    reviewedBy: String
    analyticalRepNumber: String
    runID: String
    celluloseKnown: Double
    cellulosePercent: Double
    ligninKnown: Double
    ligninPercent: Double
    qaMaterialQF: String
  }

type LtrLigninSummaryIn
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analytePercentRecovery: Double
    analyteObservedValue: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type LtrLitterCarbonNitrogenPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plotType: String
    laboratoryName: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    reviewedBy: String
    massSampleMixtureBarcode: String
    massSampleMixtureID: String
    namedLocation: String
    analyticalRepNumber: String
    carbonPercent: Double
    cnPercentQF: String
    cNratio: Double
    nitrogenPercent: Double
    percentAccuracyQF: String
    co2Trapped: String
  }

type LtrLitterLigninPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    dryMass: Double
    plotType: String
    laboratoryName: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    reviewedBy: String
    ligninSampleBarcode: String
    ligninSampleID: String
    massSampleMixtureBarcode: String
    massSampleMixtureID: String
    namedLocation: String
    analyticalRepNumber: String
    accuracyQF: String
    cellulosePercent: Double
    ligninPercent: Double
    measurementQF: String
  }

type LtrLitterStableIsotopesPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plotType: String
    laboratoryName: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    reviewedBy: String
    massSampleMixtureBarcode: String
    massSampleMixtureID: String
    namedLocation: String
    analyticalRepNumber: String
    cnIsotopeQF: String
    d13C: Double
    d15N: Double
    isotopeAccuracyQF: String
    co2Trapped: String
  }

type LtrMassdataIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    trapID: String
    setDate: Time
    collectDate: Time
    weighDate: Time
    qaDryMass: String
    dryMass: Double
    samplingProtocolVersion: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    sampleCondition: String
    biogeoSample: String
    fieldSampleBarcode: String
    fieldSampleFate: String
    fieldSampleID: String
    functionalGroup: String
    massSampleBarcode: String
    massSampleFate: String
    massSampleID: String
  }

type LtrMassdataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    trapID: String
    setDate: Time
    collectDate: Time
    weighDate: Time
    qaDryMass: String
    dryMass: Double
    samplingProtocolVersion: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    fieldSampleBarcode: String
    fieldSampleID: String
    functionalGroup: String
    massSampleBarcode: String
    massSampleID: String
    namedLocation: String
  }

type LtrPertrapIn
  {
    uid: String
    plotID: String
    date: Time
    remarks: String
    recordedBy: String
    trapID: String
    targetTaxaPresent: String
    subplotID: String
    startDate: Time
    samplingProtocolVersion: String
    trapType: String
    dataQF: String
    trapPlacement: String
    trapSize: Double
  }

type LtrPertrapPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    remarks: String
    recordedBy: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    trapID: String
    targetTaxaPresent: String
    subplotID: String
    plotType: String
    startDate: Time
    samplingProtocolVersion: String
    trapType: String
    dataQF: String
    trapPlacement: String
    trapSize: Double
    namedLocation: String
  }

type MamBarcodingIn
  {
    uid: String
    remarks: String
    nightuid: String
    taxonID: String
    identificationQualifier: String
    sex: String
    lifeStage: String
    measuredBy: String
    eventID: String
    processingDate: Time
    sampleType: String
    morphospeciesID: String
    specimenSource: String
    startDate: Time
    endDate: Time
    archiveID: String
    archiveLaboratoryName: String
    trapType: String
    method: String
    archiveFacilityID: String
    locationID: String
    samplerType: String
    benchRemarks: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    fulcrumVersion: String
    platformInfo: String
    associatedSpecimens: String
    associatedTaxa: String
    externalURLs: String
    sampleStatus: String
    wellCoordinates: String
    voucherSampleFate: String
    identifier: String
    identifierEmail: String
    identifierInstitution: String
    reproduction: String
    trappingDays: Double
    depth: Double
    depthPrecision: Double
    eventTime: String
    netDepth: Double
    plateID: String
    bOLDsequenceURL: String
    bOLDtraceURL: String
    nEONsequenceURL: String
    nEONtraceURL: String
  }

type MamBOLDcollectionDataPub
  {
    uid: String
    samplingProtocol: String
    elevation: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    namedLocation: String
    collectionDateAccuracy: String
    collectionEventID: String
    collectionNotes: String
    collectors: String
    coordinateAccuracy: Double
    countryOcean: String
    depth: Double
    depthPrecision: Double
    elevationPrecision: Double
    eventTime: String
    exactSite: String
    gpsSource: String
    habitat: String
    latitude: Double
    longitude: Double
    region: String
    sector: String
    siteCode: String
    stateProvince: String
  }

type MamBOLDspecimenDetailsPub
  {
    uid: String
    sex: String
    lifeStage: String
    sampleID: String
    setDate: Time
    collectDate: Time
    namedLocation: String
    associatedSpecimens: String
    associatedTaxa: String
    externalURLs: String
    reproduction: String
    extraInfo: String
    notes: String
    tissueDescriptor: String
    voucherStatus: String
  }

type MamBOLDtaxonomyPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    tribe: String
    subspecies: String
    namedLocation: String
    identifier: String
    identifierEmail: String
    identifierInstitution: String
    identificationMethod: String
    species: String
    taxonomyNotes: String
  }

type MamBOLDvoucherInfoPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    fieldID: String
    namedLocation: String
    collectionCode: String
    institutionStoring: String
    museumID: String
  }

type MamPerplotnightIn
  {
    uid: String
    plotID: String
    remarks: String
    nightuid: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
  }

type MamPerplotnightPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    nightuid: String
    collectDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
  }

type MamPertrapnightIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    nightuid: String
    trapCoordinate: String
    trapStatus: String
    taxonID: String
    identificationQualifier: String
    sex: String
    lifeStage: String
    testes: String
    nipples: String
    pregnancyStatus: String
    vagina: String
    hindfootLength: String
    earLength: String
    tailLength: String
    totalLength: String
    weight: String
    tagID: String
    replacedTag: String
    recapture: String
    fate: String
    bloodSampleID: String
    bloodSampleMethod: String
    fecalSampleID: String
    fecalSampleCondition: String
    earSampleID: String
    hairSampleID: String
    voucherSampleID: String
    measuredBy: String
    recordedBy: String
    enteredBy: String
    specimenSource: String
    daysOfTrapping: String
    startDate: Time
    endDate: Time
    trapType: String
    method: String
    larvalTicksAttached: String
    nymphalTicksAttached: String
    adultTicksAttached: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    dnaBarcoded: String
    externalURLs: String
    individualCode: String
    individualFate: String
    sampleStatus: String
    bloodSampleBarcode: String
    earSampleBarcode: String
    fecalSampleBarcode: String
    hairSampleBarcode: String
    voucherSampleBarcode: String
    bloodSampleFate: String
    earSampleFate: String
    fecalSampleFate: String
    hairSampleFate: String
    voucherSampleFate: String
    identifierEmail: String
    identifierInstitution: String
    reproduction: String
    hairSampleContents: String
  }

type MamPertrapnightPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    nightuid: String
    trapCoordinate: String
    trapStatus: String
    taxonID: String
    identificationQualifier: String
    sex: String
    lifeStage: String
    testes: String
    nipples: String
    pregnancyStatus: String
    vagina: String
    hindfootLength: String
    earLength: String
    tailLength: String
    totalLength: String
    weight: String
    tagID: String
    replacedTag: String
    recapture: String
    fate: String
    bloodSampleID: String
    bloodSampleMethod: String
    fecalSampleID: String
    fecalSampleCondition: String
    earSampleID: String
    hairSampleID: String
    voucherSampleID: String
    measuredBy: String
    recordedBy: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    collectDate: Time
    plotType: String
    endDate: Time
    trapType: String
    larvalTicksAttached: String
    nymphalTicksAttached: String
    adultTicksAttached: String
    dataQF: String
    namedLocation: String
    individualCode: String
    nativeStatusCode: String
    bloodSampleBarcode: String
    earSampleBarcode: String
    fecalSampleBarcode: String
    hairSampleBarcode: String
    voucherSampleBarcode: String
    hairSampleContents: String
  }

type MamVoucherIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    voucherSampleID: String
    recordedBy: String
    sampleType: String
    identifiedBy: String
    taxonIDRemarks: String
    altLongitude: Double
    altLatitude: Double
    startDate: Time
    endDate: Time
    collectedBy: String
    locationID: String
    dataQF: String
    sampleClass: String
    fulcrumVersion: String
    platformInfo: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    voucherSampleFate: String
    altCoordinateSource: String
    altElevation: Double
    altElevationUncertainty: Double
    tagCode: String
    voucherSampleCode: String
    tagFate: String
  }

type MamVoucherPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    voucherSampleID: String
    recordedBy: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    morphospeciesID: String
    identifiedBy: String
    taxonIDRemarks: String
    morphospeciesIDRemarks: String
    altLongitude: Double
    altLatitude: Double
    startDate: Time
    endDate: Time
    collectedBy: String
    dataQF: String
    namedLocation: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    nativeStatusCode: String
    altCoordinateSource: String
    altElevation: Double
    altElevationUncertainty: Double
    habitatDescription: String
    tagCode: String
    voucherSampleCode: String
  }

type MccBenthicTaxonTableMetadata16SPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    analysisDate: Time
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    reviewedBy: String
    sampleMaterial: String
    targetTaxonGroup: String
    namedLocation: String
    downloadFileName: String
    downloadFileUrl: String
  }

type MccBenthicTaxonTableMetadataITSPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    analysisDate: Time
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    reviewedBy: String
    sampleMaterial: String
    targetTaxonGroup: String
    namedLocation: String
    downloadFileName: String
    downloadFileUrl: String
  }

type MccSoilTaxonTableMetadata16SPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    analysisDate: Time
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    reviewedBy: String
    sampleMaterial: String
    targetTaxonGroup: String
    namedLocation: String
    downloadFileName: String
    downloadFileUrl: String
  }

type MccSoilTaxonTableMetadataITSPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    analysisDate: Time
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    reviewedBy: String
    sampleMaterial: String
    targetTaxonGroup: String
    namedLocation: String
    downloadFileName: String
    downloadFileUrl: String
  }

type MccSwTaxonTableMetadata16SPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    analysisDate: Time
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    reviewedBy: String
    sampleMaterial: String
    targetTaxonGroup: String
    namedLocation: String
    downloadFileName: String
    downloadFileUrl: String
  }

type MccSwTaxonTableMetadataITSPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    analysisDate: Time
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    reviewedBy: String
    sampleMaterial: String
    targetTaxonGroup: String
    namedLocation: String
    downloadFileName: String
    downloadFileUrl: String
  }

type MccTaxonTableLabSummaryIn
  {
    uid: String
    remarks: String
    recordedBy: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    targetTaxonGroup: String
    alignmentMethod: String
    analysisCodeFileName: String
    analysisProgram: String
    analysisProgramVersion: String
    chimeraMethod: String
    clusterMethod: String
    clusterSimilarity: Double
    referenceDatabase: String
    referenceDatabaseVersion: String
    sequenceMatchMethod: String
    sequenceMatchThresholdValue: Double
    sequenceMatchValueDescription: String
  }

type MccTaxonTableLabSummaryPub
  {
    uid: String
    remarks: String
    recordedBy: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testMethod: String
    dataQF: String
    targetTaxonGroup: String
    alignmentMethod: String
    analysisCodeFileName: String
    analysisProgram: String
    analysisProgramVersion: String
    chimeraMethod: String
    clusterMethod: String
    clusterSimilarity: Double
    referenceDatabase: String
    referenceDatabaseVersion: String
    sequenceMatchMethod: String
    sequenceMatchThresholdValue: Double
    sequenceMatchValueDescription: String
  }

type MccTaxonTableMetadata16SIn
  {
    uid: String
    remarks: String
    scientificName: String
    setDate: Time
    collectDate: Time
    individualCount: String
    subsampleID: String
    laboratoryName: String
    internalLabID: String
    testMethod: String
    locationID: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    genus: String
    specificEpithet: String
    analysisDate: Time
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    reviewedBy: String
    sampleMaterial: String
    targetGene: String
    targetTaxonGroup: String
    subsampleCode: String
    subsampleFate: String
    downloadFileName: String
    completeTaxonomy: String
    dnaSampleCodeDataFrame: String
    dnaSampleIDDataFrame: String
    domain: String
    downloadFileUrl: String
    communitySubsampleCode: String
    communitySubsampleFate: String
    communitySubsampleID: String
  }

type MccTaxonTableMetadataITSIn
  {
    uid: String
    remarks: String
    scientificName: String
    setDate: Time
    collectDate: Time
    individualCount: String
    subsampleID: String
    laboratoryName: String
    internalLabID: String
    testMethod: String
    locationID: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    genus: String
    specificEpithet: String
    analysisDate: Time
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    reviewedBy: String
    sampleMaterial: String
    targetGene: String
    targetTaxonGroup: String
    subsampleCode: String
    subsampleFate: String
    downloadFileName: String
    completeTaxonomy: String
    dnaSampleCodeDataFrame: String
    dnaSampleIDDataFrame: String
    domain: String
    downloadFileUrl: String
    communitySubsampleCode: String
    communitySubsampleFate: String
    communitySubsampleID: String
  }

type MgaBatchResultsIn
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    dataQF: String
    batchID: String
    calCurveIntercept: Double
    calCurveRsquared: Double
    calCurveSlope: Double
    linearDynamicRangeLower: Double
    linearDynamicRangeUpper: Double
    lodCqVar: Double
    negControl1Result: String
    negControl2Result: String
    negControl3Result: String
    negControl4Result: String
    negControl5Result: String
    noTemplateControlCq: Integer
    pcrEfficiency: Double
    pcrEfficiencyConfInt: Double
    standardDescription: String
  }

type MgaBatchResultsPub
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    dataQF: String
    batchID: String
    calCurveIntercept: Double
    calCurveRsquared: Double
    calCurveSlope: Double
    linearDynamicRangeLower: Double
    linearDynamicRangeUpper: Double
    lodCqVar: Double
    negControl1Result: String
    negControl2Result: String
    negControl3Result: String
    negControl4Result: String
    negControl5Result: String
    noTemplateControlCq: Integer
    pcrEfficiency: Double
    pcrEfficiencyConfInt: Double
    standardDescription: String
  }

type MgaBenthicGroupAbundancesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    batchID: String
    inhibitorRemovalRequired: String
    nucleicAcidConcentration: Double
    reviewedBy: String
    sampleMaterial: String
    targetGene: String
    targetTaxonGroup: String
    namedLocation: String
    copyNumberStandardDeviation: Double
    meanCopyNumber: Double
    meanCqValue: Double
  }

type MgaGroupAbundancesIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    batchID: String
    inhibitorRemovalRequired: String
    nucleicAcidConcentration: Double
    reviewedBy: String
    sampleMaterial: String
    targetGene: String
    targetTaxonGroup: String
    qaqcStatus: String
    copyNumberStandardDeviation: Double
    meanCopyNumber: Double
    meanCqValue: Double
    rep1CopyNumber: Double
    rep1CqValue: Double
    rep1MeltingTemperature: Double
    rep2CopyNumber: Double
    rep2CqValue: Double
    rep2MeltingTemperature: Double
    rep3CopyNumber: Double
    rep3CqValue: Double
    rep3MeltingTemperature: Double
    rep4CopyNumber: Double
    rep4CqValue: Double
    rep5CopyNumber: Double
    rep5CqValue: Double
    targetTaxonCode: String
    targetTaxonFate: String
    targetTaxonID: String
  }

type MgaLabSummaryIn
  {
    uid: String
    recordedBy: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    instrument: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    dataQF: String
    ampliconLength: String
    bufferComposition: String
    bufferID: String
    cqMethod: String
    dNTPConcentration: Double
    forwardPrimer: String
    detectionLimit: Double
    mgConcentration: Double
    multiplexStatus: String
    polymeraseType: String
    polymeraseUnitNumber: Double
    primerConcentration: Double
    primerSpecificity: Double
    probeConcentration: Double
    qPCRAnalysisProgram: String
    qpcrDetectionMethod: String
    qpcrMethod: String
    reactionVolume: Double
    reversePrimer: String
    targetTaxonGroup: String
  }

type MgaLabSummaryPub
  {
    uid: String
    recordedBy: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    instrument: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    dataQF: String
    ampliconLength: String
    bufferComposition: String
    bufferID: String
    cqMethod: String
    dNTPConcentration: Double
    forwardPrimer: String
    detectionLimit: Double
    mgConcentration: Double
    multiplexStatus: String
    polymeraseType: String
    polymeraseUnitNumber: Double
    primerConcentration: Double
    primerSpecificity: Double
    probeConcentration: Double
    qPCRAnalysisProgram: String
    qpcrDetectionMethod: String
    qpcrMethod: String
    reactionVolume: Double
    reversePrimer: String
    targetTaxonGroup: String
  }

type MgaSoilBatchResultsPub
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    batchID: String
  }

type MgaSoilGroupAbundancesPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    batchID: String
    inhibitorRemovalRequired: String
    nucleicAcidConcentration: Double
    reviewedBy: String
    sampleMaterial: String
    targetGene: String
    targetTaxonGroup: String
    namedLocation: String
    copyNumberStandardDeviation: Double
    meanCopyNumber: Double
    meanCqValue: Double
  }

type MgaSoilLabSummaryPub
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    targetTaxonGroup: String
  }

type MgaSwGroupAbundancesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    processedBy: String
    batchID: String
    inhibitorRemovalRequired: String
    nucleicAcidConcentration: Double
    reviewedBy: String
    sampleMaterial: String
    targetGene: String
    targetTaxonGroup: String
    namedLocation: String
    copyNumberStandardDeviation: Double
    meanCopyNumber: Double
    meanCqValue: Double
  }

type MgcPerarchivesamplePub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    horizonID: String
    horizonName: String
    archiveID: String
    archiveTopDepth: Double
    archiveBottomDepth: Double
    pitNamedLocation: String
    archiveLaboratoryName: String
    dataQF: String
  }

type MgcPerbiogeosamplePub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    horizonID: String
    horizonName: String
    laboratoryName: String
    labProjID: String
    biogeoID: String
    biogeoHorizonProportion: Double
    biogeoSampleType: String
    biogeoTopDepth: Double
    biogeoBottomDepth: Double
    biogeoCenterDepth: Double
    airDryOvenDry: Double
    caNh4d: Double
    kNh4d: Double
    mgNh4d: Double
    naNh4d: Double
    cecdNh4: Double
    alSatCecd33: Double
    baseSumCecd10: Double
    bsesatCecd10: Double
    ececCecd33: Double
    alKcl: Double
    feKcl: Double
    mnKcl: Double
    alMjelm: Double
    caMjelm: Double
    feMjelm: Double
    kMjelm: Double
    mgMjelm: Double
    mnMjelm: Double
    naMjelm: Double
    pMjelm: Double
    siMjelm: Double
    srMjelm: Double
    tiMjelm: Double
    zrMjelm: Double
    phCacl2: Double
    phH2o: Double
    ec12pre: Double
    bSatx: Double
    brSatx: Double
    caSatx: Double
    clSatx: Double
    co3Satx: Double
    ecSatp: Double
    flSatx: Double
    hco3Sx: Double
    kSatx: Double
    mgSatx: Double
    naSatx: Double
    no2Satx: Double
    no3Satx: Double
    pSatx: Double
    phSp: Double
    resist: Double
    so4Satx: Double
    pitNamedLocation: String
    dataQF: String
    caco3Conc: Double
    carbonTot: Double
    estimatedOC: Double
    gypsumConc: Double
    nitrogenTot: Double
    sulfurTot: Double
    waterSatx: Double
  }

type MgcPerhorizonPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    nrcsDescriptionID: String
    horizonID: String
    horizonName: String
    horizonTopDepth: Double
    horizonBottomDepth: Double
    pitNamedLocation: String
    dataQF: String
  }

type MgcPermegapitPub
  {
    uid: String
    domainID: String
    siteID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    pitID: String
    pitDepth: Double
    recordedByA: String
    recordedByB: String
    recordedByC: String
    recordedByD: String
    recordedByE: String
    soilProfileDescriberA: String
    soilProfileDescriberB: String
    soilProfileDescriberC: String
    soilProfileDescriberD: String
    soilProfileDescriberE: String
    soilProfileDescriberF: String
    soilProfileDescriberInst: String
    nrcsDescriptionID: String
    soilSeries: String
    soilFamily: String
    soilSubgroup: String
    soilGreatGroup: String
    soilSuborder: String
    soilOrder: String
    pitNamedLocation: String
    dataQF: String
  }

type MgpPerarchivesampleIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    horizonID: String
    horizonName: String
    laboratoryName: String
    archiveID: String
    archiveTopDepth: Double
    archiveBottomDepth: Double
    pitNamedLocation: String
    dataQF: String
    archiveFate: String
    archiveIDCode: String
    horizonCode: String
    horizonFate: String
  }

type MgpPerarchivesamplePub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    horizonID: String
    horizonName: String
    archiveID: String
    archiveTopDepth: Double
    archiveBottomDepth: Double
    pitNamedLocation: String
    archiveLaboratoryName: String
    dataQF: String
  }

type MgpPerbiogeosampleIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    horizonID: String
    horizonName: String
    laboratoryName: String
    labProjID: String
    biogeoID: String
    biogeoIDnrcs: String
    biogeoHorizonProportion: Double
    biogeoSampleType: String
    biogeoTopDepth: Double
    biogeoBottomDepth: Double
    biogeoCenterDepth: Double
    biogeoTotWeight: Double
    biogeoTotWeight2To5: Double
    biogeoTotWeight5To20: Double
    biogeoTotWeight20To75: Double
    airDryOvenDry: Double
    gypsum: Double
    caco3: Double
    caNh4d: Double
    kNh4d: Double
    mgNh4d: Double
    naNh4d: Double
    cecdNh4: Double
    alSatCecd33: Double
    baseSumCecd10: Double
    bsesatCecd10: Double
    ececCecd33: Double
    alKcl: Double
    feKcl: Double
    mnKcl: Double
    alMjelm: Double
    caMjelm: Double
    feMjelm: Double
    kMjelm: Double
    mgMjelm: Double
    mnMjelm: Double
    naMjelm: Double
    pMjelm: Double
    siMjelm: Double
    srMjelm: Double
    tiMjelm: Double
    zrMjelm: Double
    phCacl2: Double
    phH2o: Double
    ec12pre: Double
    bSatx: Double
    brSatx: Double
    caSatx: Double
    clSatx: Double
    co3Satx: Double
    ecSatp: Double
    flSatx: Double
    hco3Sx: Double
    kSatx: Double
    mgSatx: Double
    naSatx: Double
    no2Satx: Double
    no3Satx: Double
    pSatx: Double
    phSp: Double
    resist: Double
    so4Satx: Double
    cTot: Double
    nTot: Double
    sTot: Double
    eoc: Double
    coarseFrag2To5: Double
    coarseFrag5To20: Double
    pitNamedLocation: String
    dataQF: String
    caco3Conc: Double
    carbonTot: Double
    estimatedOC: Double
    gypsumConc: Double
    nitrogenTot: Double
    sulfurTot: Double
    waterSatx: Double
    biogeoCode: String
    biogeoNrcsFate: String
    carbonateClay: Double
    clayFineContent: Double
    clayTotal: Double
    horizonCode: String
    horizonFate: String
    sandCoarseContent: Double
    sandFineContent: Double
    sandMediumContent: Double
    sandTotal: Double
    sandVeryCoarseContent: Double
    sandVeryFineContent: Double
    siltCoarseContent: Double
    siltFineContent: Double
    siltTotal: Double
  }

type MgpPerbiogeosamplePub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    horizonID: String
    horizonName: String
    laboratoryName: String
    labProjID: String
    biogeoID: String
    biogeoHorizonProportion: Double
    biogeoSampleType: String
    biogeoTopDepth: Double
    biogeoBottomDepth: Double
    biogeoCenterDepth: Double
    coarseFrag2To5: Double
    coarseFrag5To20: Double
    pitNamedLocation: String
    dataQF: String
    carbonateClay: Double
    clayFineContent: Double
    clayTotal: Double
    sandCoarseContent: Double
    sandFineContent: Double
    sandMediumContent: Double
    sandTotal: Double
    sandVeryCoarseContent: Double
    sandVeryFineContent: Double
    siltCoarseContent: Double
    siltFineContent: Double
    siltTotal: Double
  }

type MgpPerbulksampleIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    horizonID: String
    horizonName: String
    laboratoryName: String
    labProjID: String
    bulkDensID: String
    bulkDensIDnrcs: String
    bulkDensHorizonProportion: Double
    bulkDensSampleType: String
    bulkDensCenterDepth: Double
    bulkDensDiameter: Double
    bulkDensLength: Double
    bulkDensVolume: Double
    bulkDensTopDepth: Double
    bulkDensBottomDepth: Double
    bulkDensOrientation: String
    bulkDensWetWeight: Double
    bulkDensDryWeight: Double
    bulkDensCoarseFragWeight: Double
    bulkDensCoarseFragDens: Double
    bulkDensCoarseFragDensMeas: String
    bulkDensExclCoarseFrag: Double
    bulkDensInclCoarseFrag: Double
    coarseFragWeight: Double
    coarseFragVolume: Double
    pitNamedLocation: String
    dataQF: String
    bulkDensCode: String
    bulkDensNrcsFate: String
    horizonCode: String
    horizonFate: String
  }

type MgpPerbulksamplePub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    horizonID: String
    horizonName: String
    laboratoryName: String
    labProjID: String
    bulkDensID: String
    bulkDensHorizonProportion: Double
    bulkDensSampleType: String
    bulkDensCenterDepth: Double
    bulkDensTopDepth: Double
    bulkDensBottomDepth: Double
    bulkDensExclCoarseFrag: Double
    pitNamedLocation: String
    dataQF: String
  }

type MgpPerhorizonIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    nrcsDescriptionID: String
    horizonID: String
    horizonTempName: String
    horizonName: String
    horizonTopDepth: Double
    horizonBottomDepth: Double
    pitNamedLocation: String
    dataQF: String
    pitCode: String
    pitFate: String
    horizonCode: String
    horizonFate: String
  }

type MgpPerhorizonPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    nrcsDescriptionID: String
    horizonID: String
    horizonName: String
    horizonTopDepth: Double
    horizonBottomDepth: Double
    pitNamedLocation: String
    dataQF: String
  }

type MgpPermegapitIn
  {
    uid: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    pitID: String
    pitDepth: Double
    recordedByA: String
    recordedByB: String
    recordedByC: String
    recordedByD: String
    recordedByE: String
    rootsCollectedByA: String
    rootsCollectedByB: String
    rootsCollectedByC: String
    rootsCollectedByD: String
    safetyPersonnelA: String
    safetyPersonnelB: String
    safetyPersonnelC: String
    fccConstructionSupervisorA: String
    fccConstructionSupervisorB: String
    fccConstructionSupervisorC: String
    fccConstructionContractor: String
    soilProfileDescriberA: String
    soilProfileDescriberB: String
    soilProfileDescriberC: String
    soilProfileDescriberD: String
    soilProfileDescriberE: String
    soilProfileDescriberF: String
    soilProfileDescriberInst: String
    nrcsDescriptionID: String
    soilSeries: String
    soilFamily: String
    soilSubgroup: String
    soilGreatGroup: String
    soilSuborder: String
    soilOrder: String
    pitNamedLocation: String
    dataQF: String
    pitCode: String
    pitFate: String
  }

type MgpPermegapitPub
  {
    uid: String
    domainID: String
    siteID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    pitID: String
    pitDepth: Double
    recordedByA: String
    recordedByB: String
    recordedByC: String
    recordedByD: String
    recordedByE: String
    soilProfileDescriberA: String
    soilProfileDescriberB: String
    soilProfileDescriberC: String
    soilProfileDescriberD: String
    soilProfileDescriberE: String
    soilProfileDescriberF: String
    soilProfileDescriberInst: String
    nrcsDescriptionID: String
    soilSeries: String
    soilFamily: String
    soilSubgroup: String
    soilGreatGroup: String
    soilSuborder: String
    soilOrder: String
    pitNamedLocation: String
    dataQF: String
  }

type MicDnaExtractionIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    subsampleID: String
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testMethod: String
    locationID: String
    dataQF: String
    geneticSampleID: String
    sampleClass: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    geneticSampleCode: String
    geneticSampleFate: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    sampleMass: Double
    samplePercent: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    subsampleCode: String
    subsampleFate: String
    nucleicAcidPurity: Double
    sequenceAnalysisType: String
  }

type MmgBenthicDnaExtractionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    samplePercent: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    nucleicAcidPurity: Double
  }

type MmgBenthicMarkerGeneSequencing16SPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    processedSeqFileName: String
  }

type MmgBenthicMarkerGeneSequencingITSPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    processedSeqFileName: String
  }

type MmgBenthicPcrAmplification16SPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
  }

type MmgBenthicPcrAmplificationITSPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
  }

type MmgBenthicRawDataFilesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type MmgMarkerGeneSequencing16SIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    subsampleID: String
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    targetGene: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    subsampleCode: String
    subsampleFate: String
    instrumentModel: String
    ncbiProjectID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    processedSeqFileName: String
    processedSeqFileNameCode: String
    processedSeqFileNameFate: String
    processedSeqFileNameID: String
  }

type MmgMarkerGeneSequencingITSIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    subsampleID: String
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    targetGene: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    subsampleCode: String
    subsampleFate: String
    instrumentModel: String
    ncbiProjectID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    processedSeqFileName: String
    processedSeqFileNameCode: String
    processedSeqFileNameFate: String
    processedSeqFileNameID: String
  }

type MmgPcrAmplification16SIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    subsampleID: String
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    qaqcStatus: String
    subsampleCode: String
    subsampleFate: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
  }

type MmgPcrAmplificationITSIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    subsampleID: String
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    qaqcStatus: String
    subsampleCode: String
    subsampleFate: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
  }

type MmgRawDataFilesIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
    parentFolderName: String
    archiveDataFileDescription: String
    archiveDataFileName: String
    archiveDataFilePath: String
    archiveParentFolderName: String
  }

type MmgSoilDnaExtractionPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    nucleicAcidPurity: Double
    sequenceAnalysisType: String
  }

type MmgSoilMarkerGeneSequencing16SPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    processedSeqFileName: String
  }

type MmgSoilMarkerGeneSequencingITSPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    processedSeqFileName: String
  }

type MmgSoilPcrAmplification16SPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
  }

type MmgSoilPcrAmplificationITSPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
  }

type MmgSoilRawDataFilesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type MmgSwDnaExtractionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    samplePercent: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    nucleicAcidPurity: Double
  }

type MmgSwMarkerGeneSequencing16SPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    processedSeqFileName: String
  }

type MmgSwMarkerGeneSequencingITSPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    processedSeqFileName: String
  }

type MmgSwPcrAmplification16SPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
  }

type MmgSwPcrAmplificationITSPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
  }

type MmgSwRawDataFilesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type MmsBenthicMetagenomeDnaExtractionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testMethod: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    samplePercent: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    genomicsSampleCode: String
    genomicsSampleID: String
    nucleicAcidPurity: Double
    sequenceAnalysisType: String
  }

type MmsBenthicMetagenomeSequencingPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    analyzedBy: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencingMethod: String
    investigationType: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    sequencingProtocol: String
    labPrepMethod: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    processedSeqFileName: String
  }

type MmsBenthicRawDataFilesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type MmsMetagenomeDnaExtractionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testMethod: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    genomicsSampleCode: String
    genomicsSampleID: String
    nucleicAcidPurity: Double
    sequenceAnalysisType: String
  }

type MmsMetagenomeSequencingIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    subsampleID: String
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    locationID: String
    analyzedBy: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    sequencingMethod: String
    investigationType: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    subsampleCode: String
    subsampleFate: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    sequencingProtocol: String
    labPrepMethod: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    processedSeqFileName: String
    processedSeqFileNameCode: String
    processedSeqFileNameFate: String
    processedSeqFileNameID: String
  }

type MmsMetagenomeSequencingPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    analyzedBy: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencingMethod: String
    investigationType: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    sequencingProtocol: String
    labPrepMethod: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    processedSeqFileName: String
  }

type MmsRawDataFilesIn
  {
    uid: String
    remarks: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
    parentFolderName: String
  }

type MmsRawDataFilesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type MmsSwMetagenomeDnaExtractionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testMethod: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    samplePercent: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    genomicsSampleCode: String
    genomicsSampleID: String
    nucleicAcidPurity: Double
    sequenceAnalysisType: String
  }

type MmsSwMetagenomeSequencingPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    analyzedBy: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencingMethod: String
    investigationType: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    sequencingProtocol: String
    labPrepMethod: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    processedSeqFileName: String
  }

type MmsSwRawDataFilesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type MosArchivepoolingIn
  {
    uid: String
    processingDate: Time
    laboratoryName: String
    archiveID: String
    archiveVialIDList: String
    archivedCount: String
    archiveMedium: String
    deprecatedVialID: String
    startCollectDate: Time
    endCollectDate: Time
    archiveFacilityID: String
    locationID: String
    dataQF: String
    archiveSampleFate: String
    archiveSampleCode: String
    archiveFate: String
    archiveIDCode: String
  }

type MosArchivepoolingPub
  {
    uid: String
    domainID: String
    siteID: String
    archiveID: String
    archiveVialIDList: String
    archivedCount: String
    archiveMedium: String
    deprecatedVialID: String
    startCollectDate: Time
    endCollectDate: Time
    archiveFacilityID: String
    dataQF: String
    namedLocation: String
    archiveSampleCode: String
    archiveIDCode: String
  }

type MosBarcodingIn
  {
    uid: String
    plotID: String
    remarks: String
    sex: String
    lifeStage: String
    eventID: String
    individualID: String
    scientificName: String
    reproductiveCondition: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    identifiedBy: String
    specimenSource: String
    laboratoryName: String
    archiveID: String
    archiveLaboratoryName: String
    collectedBy: String
    method: String
    identificationRemarks: String
    archiveFacilityID: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    specificEpithet: String
    dataQF: String
    geneticSampleID: String
    geneticSampleCode: String
    geneticSampleFate: String
    reviewedBy: String
    samplingMethod: String
    associatedSpecimens: String
    associatedTaxa: String
    externalURLs: String
    individualCode: String
    individualFate: String
    sampleStatus: String
    wellCoordinates: String
    identifier: String
    identifierEmail: String
    identifierInstitution: String
    reproduction: String
    trappingDays: Double
    depth: Double
    depthPrecision: Double
    eventTime: String
    plateID: String
    bOLDsequenceURL: String
    bOLDtraceURL: String
    nEONsequenceURL: String
    nEONtraceURL: String
  }

type MosBarcodingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    individualID: String
    setDate: Time
    collectDate: Time
    processingDate: Time
    laboratoryName: String
    dataQF: String
    geneticSampleID: String
    geneticSampleCode: String
    namedLocation: String
    individualCode: String
    wellCoordinates: String
  }

type MosBOLDcollectionDataPub
  {
    uid: String
    samplingProtocol: String
    elevation: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    namedLocation: String
    collectionDateAccuracy: String
    collectionEventID: String
    collectionNotes: String
    collectors: String
    coordinateAccuracy: Double
    countryOcean: String
    depth: Double
    depthPrecision: Double
    elevationPrecision: Double
    eventTime: String
    exactSite: String
    gpsSource: String
    habitat: String
    latitude: Double
    longitude: Double
    region: String
    sector: String
    siteCode: String
    stateProvince: String
  }

type MosBOLDspecimenDetailsPub
  {
    uid: String
    sex: String
    lifeStage: String
    sampleID: String
    setDate: Time
    collectDate: Time
    namedLocation: String
    associatedSpecimens: String
    associatedTaxa: String
    externalURLs: String
    reproduction: String
    extraInfo: String
    notes: String
    tissueDescriptor: String
    voucherStatus: String
  }

type MosBOLDtaxonomyPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    tribe: String
    subspecies: String
    namedLocation: String
    identifier: String
    identifierEmail: String
    identifierInstitution: String
    identificationMethod: String
    species: String
    taxonomyNotes: String
  }

type MosBOLDvoucherInfoPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    fieldID: String
    namedLocation: String
    collectionCode: String
    institutionStoring: String
    museumID: String
  }

type MosExpertTaxonomistIDProcessedPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    sex: String
    scientificName: String
    taxonRank: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    subsampleID: String
    laboratoryName: String
    archiveID: String
    testingID: String
    individualIDList: String
    identificationRemarks: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    dataQF: String
    sampleCondition: String
    testingIDCode: String
    namedLocation: String
    subsampleCode: String
    archiveIDCode: String
    individualCode: String
    nativeStatusCode: String
  }

type MosExpertTaxonomistIDRawPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    sex: String
    scientificName: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    subsampleID: String
    laboratoryName: String
    archiveID: String
    testingID: String
    individualIDList: String
    identificationRemarks: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    dataQF: String
    sampleCondition: String
    testingIDCode: String
    namedLocation: String
    subsampleCode: String
    archiveIDCode: String
    individualCode: String
  }

type MosIdentificationIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    sex: String
    scientificName: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    identifiedBy: String
    identifiedDate: Time
    subsampleID: String
    laboratoryName: String
    archiveID: String
    sampleCompromised: String
    testingID: String
    individualIDList: String
    identificationRemarks: String
    dataQF: String
    testingIDCode: String
    testingIDFate: String
    subsampleCode: String
    subsampleFate: String
    archiveFate: String
    archiveIDCode: String
    individualCode: String
    individualFate: String
  }

type MosPathogenpoolingIn
  {
    uid: String
    processingDate: Time
    laboratoryName: String
    testingID: String
    testingVialID: String
    poolSize: String
    startCollectDate: Time
    endCollectDate: Time
    locationID: String
    dataQF: String
    testingIDCode: String
    testingIDFate: String
    testingVialIDCode: String
    testingVialIDFate: String
  }

type MosPathogenpoolingPub
  {
    uid: String
    domainID: String
    siteID: String
    testingID: String
    testingVialID: String
    poolSize: String
    startCollectDate: Time
    endCollectDate: Time
    dataQF: String
    testingIDCode: String
    namedLocation: String
    testingVialIDCode: String
  }

type MosPathogenqaIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    testedDate: Time
    dataQF: String
    batchID: String
    controlType: String
    criteriaMet: String
  }

type MosPathogenresultsIn
  {
    uid: String
    remarks: String
    laboratoryName: String
    sampleCompromised: String
    receivedDate: Time
    testingVialID: String
    deprecatedVialID: String
    testedDate: Time
    senderID: String
    testProtocolVersion: String
    testMethod: String
    testResult: String
    testPathogenName: String
    testNumber: String
    finalResult: String
    locus: String
    percentIdentity: String
    sequenceDatabase: String
    sequenceDatabaseID: String
    extractDepleted: String
    testedBy: String
    startCollectDate: Time
    endCollectDate: Time
    locationID: String
    dataQF: String
    batchID: String
    testingVialIDCode: String
    testingVialIDFate: String
  }

type MosPathogenresultsPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    taxonID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    laboratoryName: String
    receivedDate: Time
    testingVialID: String
    deprecatedVialID: String
    testedDate: Time
    testProtocolVersion: String
    testMethod: String
    testResult: String
    testPathogenName: String
    testNumber: String
    finalResult: String
    locus: String
    percentIdentity: String
    sequenceDatabase: String
    sequenceDatabaseID: String
    extractDepleted: String
    testedBy: String
    startCollectDate: Time
    endCollectDate: Time
    dataQF: String
    sampleCondition: String
    namedLocation: String
    testingVialIDCode: String
  }

type MosSortingIn
  {
    uid: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    subsampleID: String
    laboratoryName: String
    sampleCompromised: String
    receivedDate: Time
    sortDate: Time
    totalWeight: Double
    subsampleWeight: Double
    bycatchWeight: Double
    sortedBy: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    subsampleCode: String
    subsampleFate: String
    genusPTD: Double
    speciesPTD: Double
    pDE: Double
  }

type MosSortingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    subsampleID: String
    laboratoryName: String
    receivedDate: Time
    sortDate: Time
    totalWeight: Double
    subsampleWeight: Double
    bycatchWeight: Double
    sortedBy: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
    subsampleCode: String
  }

type MosTrappingIn
  {
    uid: String
    plotID: String
    remarks: String
    recordedBy: String
    eventID: String
    enteredBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    samplingProtocolVersion: String
    sampleTiming: String
    numVialsSampleID: String
    fanStatus: String
    catchCupStatus: String
    dryIceStatus: String
    pdaDecimalLatitude: Double
    pdaDecimalLongitude: Double
    pdaAccuracy: Double
    pdaElevation: Double
    nightOrDay: String
    trapHours: Double
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    samplingImpractical: String
    fulcrumVersion: String
    platformInfo: String
  }

type MosTrappingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    recordedBy: String
    eventID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    targetTaxaPresent: String
    plotType: String
    samplingProtocolVersion: String
    sampleTiming: String
    fanStatus: String
    catchCupStatus: String
    dryIceStatus: String
    nightOrDay: String
    trapHours: Double
    sampleCode: String
    dataQF: String
    sampleCondition: String
    samplingImpractical: String
    namedLocation: String
  }

type MprPerdepthincrementIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    pitNamedLocation: String
    pitProfileID: String
    topDepth: Double
    bottomDepth: Double
    depthIncrementID: String
    depthIncrementVolume: Double
    sampleMethod: String
    dataQF: String
    depthIncrementCode: String
    depthIncrementFate: String
    pitProfileCode: String
    pitProfileFate: String
  }

type MprPerdepthincrementPub
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    pitNamedLocation: String
    pitProfileID: String
    topDepth: Double
    bottomDepth: Double
    depthIncrementID: String
    depthIncrementVolume: Double
    sampleMethod: String
    dataQF: String
  }

type MprPerpitprofileIn
  {
    uid: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    pitID: String
    rootsCollectedByA: String
    rootsCollectedByB: String
    pitNamedLocation: String
    pitProfileID: String
    rootStatus: String
    sizeCategory: String
    maxProfileDepth: Double
    totalRootBiomass: Double
    depth100RootBiomass: Double
    dataQF: String
    pitCode: String
    pitFate: String
    pitProfileClassCode: String
    pitProfileClassFate: String
    pitProfileClassID: String
    pitProfileCode: String
    pitProfileFate: String
  }

type MprPerpitprofilePub
  {
    uid: String
    domainID: String
    siteID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    pitID: String
    rootsCollectedByA: String
    rootsCollectedByB: String
    pitNamedLocation: String
    pitProfileID: String
    rootStatus: String
    sizeCategory: String
    maxProfileDepth: Double
    totalRootBiomass: Double
    depth100RootBiomass: Double
    dataQF: String
  }

type MprPerrootsampleIn
  {
    uid: String
    sampleID: String
    duplicateSampleIDQF: Integer
    startDate: Time
    endDate: Time
    archiveID: String
    pitNamedLocation: String
    rootStatus: String
    sizeCategory: String
    depthIncrementID: String
    rootDryMass: Double
    incrementRootBiomass: Double
    incrementRootDensity: Double
    sampleFate: String
    sampleCode: String
    dataQF: String
    archiveFate: String
    archiveIDCode: String
    depthIncrementCode: String
    depthIncrementFate: String
  }

type MprPerrootsamplePub
  {
    uid: String
    sampleID: String
    startDate: Time
    endDate: Time
    archiveID: String
    pitNamedLocation: String
    rootStatus: String
    sizeCategory: String
    depthIncrementID: String
    rootDryMass: Double
    incrementRootBiomass: Double
    incrementRootDensity: Double
    sampleCode: String
    dataQF: String
    archiveIDCode: String
  }

type NetRadBuoy
  {
    sensorResistance: Double
    inNetRadPyranometer: Double
    outNetRadPyranometer: Double
    inNetRadPyrgeometer: Double
    outNetRadPyrgeometer: Double
    heaterFlag: Integer
  }

type Nitrate
  {
    rawNitrateSingleCompressedStream: String
  }

type NstPerindividualPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    measuredBy: String
    recordedBy: String
    eventID: String
    individualID: String
    scientificName: String
    taxonRank: String
    morphospeciesID: String
    growthForm: String
    canopyPosition: String
    plantStatus: String
    stemDiameter: Double
    measurementHeight: Double
    height: Double
    subplotID: String
    morphospeciesIDRemarks: String
    endDate: Time
    dataQF: String
    namedLocation: String
    individualBarcode: String
    tagStatus: String
    basalStemDiameter: Double
    baseCrownHeight: Double
    branchCount: String
    leafNumber: String
    maxBaseCrownDiameter: Double
    maxCrownDiameter: Double
    meanBasalDiameter: Double
    meanBladeLength: Double
    meanBranchLength: Double
    meanLeafLength: Double
    meanPetioleLength: Double
    nestedSubplotID: String
    newPadCount: String
    ninetyBaseCrownDiameter: Double
    ninetyCrownDiameter: Double
    oldPadCount: String
    shape: String
    stemCount: String
    stemLength: Double
  }

type NSW15Minute
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    startDateTime: Time
    endDateTime: Time
    surfWaterNitrateMean: Double
    surfWaterNitrateMinimum: Double
    surfWaterNitrateMaximum: Double
    surfWaterNitrateVariance: Double
    surfWaterNitrateNumPts: Double
    surfWaterNitrateExpUncert: Double
    surfWaterNitrateStdErMean: Double
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    nitrateInternalHumidityPassQM: Double
    nitrateInternalHumidityFailQM: Double
    nitrateInternalHumidityNAQM: Double
    nitrateInternalHumidityQAQCRpt: String
    nitrateLightDarkSpectralRatioPassQM: Double
    nitrateLightDarkSpectralRatioFailQM: Double
    nitrateLightDarkSpectralRatioNAQM: Double
    nitrateLightDarkSpectralRatioQAQCRpt: String
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type NtrExternalBatchQAIn
  {
    uid: String
    remarks: String
    laboratoryName: String
    analyte: String
    instrument: String
    analyteUnits: String
    analysisDate: Time
    analyzedBy: String
    dataQF: String
    qaReferenceID: String
    analysisEndDate: Time
    reviewedBy: String
    analyteKnownValue: Double
    analyticalRepNumber: String
    runID: String
    analyteConcentration: Double
    analyteQF: String
  }

type NtrExternalLabIn
  {
    uid: String
    plotID: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    nitrateNitriteNRunID: String
    internalLabID: String
    receivedDate: Time
    dataQF: String
    sampleCondition: String
    ammoniumNAnalysisDate: Time
    ammoniumNAnalyzedBy: String
    ammoniumNInstrument: String
    ammoniumNMethod: String
    ammoniumNQF: String
    ammoniumNRemarks: String
    ammoniumNRepNum: String
    ammoniumNReviewedBy: String
    ammoniumNRunID: String
    kclAmmoniumNConc: Double
    kclNitrateNitriteNConc: Double
    kclSampleCode: String
    kclSampleFate: String
    kclSampleID: String
    nitrateNitriteNAnalysisDate: Time
    nitrateNitriteNAnalyzedBy: String
    nitrateNitriteNInstrument: String
    nitrateNitriteNMethod: String
    nitrateNitriteNQF: String
    nitrateNitriteNRemarks: String
    nitrateNitriteNRepNum: String
    nitrateNitriteNReviewedBy: String
    receivedCondition: String
  }

type NtrExternalLabPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    receivedDate: Time
    sampleCode: String
    dataQF: String
    sampleCondition: String
    namedLocation: String
    ammoniumNAnalysisDate: Time
    ammoniumNAnalyzedBy: String
    ammoniumNInstrument: String
    ammoniumNMethod: String
    ammoniumNQF: String
    ammoniumNRemarks: String
    ammoniumNRepNum: String
    ammoniumNReviewedBy: String
    kclAmmoniumNConc: Double
    kclNitrateNitriteNConc: Double
    kclSampleCode: String
    kclSampleID: String
    nitrateNitriteNAnalysisDate: Time
    nitrateNitriteNAnalyzedBy: String
    nitrateNitriteNInstrument: String
    nitrateNitriteNMethod: String
    nitrateNitriteNQF: String
    nitrateNitriteNRemarks: String
    nitrateNitriteNRepNum: String
    nitrateNitriteNReviewedBy: String
    receivedCondition: String
  }

type NtrExternalSummaryIn
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    methodDetectionLimit: Double
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analytePercentRecovery: Double
    lotID: String
    analyteObservedValue: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type NtrExternalSummaryPub
  {
    uid: String
    sampleType: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    methodDetectionLimit: Double
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    analytePercentRecovery: Double
    lotID: String
    analyteObservedValue: Double
    analyteMetricsCount: String
    qaReportingEndDate: Time
    qaReportingStartDate: Time
  }

type NtrInternalLabIn
  {
    uid: String
    plotID: String
    remarks: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    nTransBoutType: String
    processedBy: String
    fulcrumVersion: String
    platformInfo: String
    extractionEndDate: Time
    extractionStartDate: Time
    incubationLength: Double
    incubationPairID: String
    kclBatchNumber: String
    kclReferenceID: String
    kclSampleCode: String
    kclSampleFate: String
    kclSampleID: String
    kclVolume: Double
    soilFreshMass: Double
  }

type NtrInternalLabPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    plotType: String
    samplingProtocolVersion: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    nTransBoutType: String
    processedBy: String
    namedLocation: String
    extractionEndDate: Time
    extractionStartDate: Time
    incubationLength: Double
    incubationPairID: String
    kclReferenceID: String
    kclSampleCode: String
    kclSampleID: String
    kclVolume: Double
    soilFreshMass: Double
  }

type NtrInternalLabBlanksIn
  {
    uid: String
    siteID: String
    remarks: String
    recordedBy: String
    dataQF: String
    processedBy: String
    fulcrumVersion: String
    platformInfo: String
    extractionEndDate: Time
    extractionStartDate: Time
    kclBlank1Code: String
    kclBlank1Fate: String
    kclBlank1ID: String
    kclBlank2Code: String
    kclBlank2Fate: String
    kclBlank2ID: String
    kclBlank3Code: String
    kclBlank3Fate: String
    kclBlank3ID: String
    kclReferenceCode: String
    kclReferenceFate: String
    kclReferenceID: String
  }

type NtrInternalLabBlanksPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    dataQF: String
    extractionEndDate: Time
    extractionStartDate: Time
    kclBlank1Code: String
    kclBlank1ID: String
    kclBlank2Code: String
    kclBlank2ID: String
    kclBlank3Code: String
    kclBlank3ID: String
    kclReferenceID: String
  }

type PAR
  {
    inPAR: Double
    outPAR: Double
  }

type PARPAR1min
  {
    pARMean: Double
    pARMinimum: Double
    pARMaximum: Double
    pARVariance: Double
    pARNumPts: Double
    pARExpUncert: Double
    pARStdErMean: Double
    pARRangeQAQCRpt: String
    pARPersistenceQAQCRpt: String
    pARStepQAQCRpt: String
    pARNullQAQCRpt: String
    pARGapQAQCRpt: String
    pARConsistencyQAQCRpt: String
    pARSpikeQAQCRpt: String
    pARAlphaQAQCRpt: String
    pARBetaQAQCRpt: String
    pARRangeFailQM: Double
    pARRangePassQM: Double
    pARRangeNAQM: Double
    pARPersistenceFailQM: Double
    pARPersistencePassQM: Double
    pARPersistenceNAQM: Double
    pARStepFailQM: Double
    pARStepPassQM: Double
    pARStepNAQM: Double
    pARNullFailQM: Double
    pARNullPassQM: Double
    pARNullNAQM: Double
    pARGapFailQM: Double
    pARGapPassQM: Double
    pARGapNAQM: Double
    pARSpikeFailQM: Double
    pARSpikePassQM: Double
    pARSpikeNAQM: Double
    pARConsistencyFailQM: Double
    pARConsistencyPassQM: Double
    pARConsistencyNAQM: Double
    pARAlphaQM: Double
    pARBetaQM: Double
    pARFinalQF: String
    outPARMean: Double
    outPARMinimum: Double
    outPARMaximum: Double
    outPARVariance: Double
    outPARNumPts: Double
    outPARExpUncert: Double
    outPARStdErMean: Double
    outPARRangeQAQCRpt: String
    outPARPersistenceQAQCRpt: String
    outPARStepQAQCRpt: String
    outPARNullQAQCRpt: String
    outPARGapQAQCRpt: String
    outPARConsistencyQAQCRpt: String
    outPARSpikeQAQCRpt: String
    outPARAlphaQAQCRpt: String
    outPARBetaQAQCRpt: String
    outPARRangeFailQM: Double
    outPARRangePassQM: Double
    outPARRangeNAQM: Double
    outPARPersistenceFailQM: Double
    outPARPersistencePassQM: Double
    outPARPersistenceNAQM: Double
    outPARStepFailQM: Double
    outPARStepPassQM: Double
    outPARStepNAQM: Double
    outPARNullFailQM: Double
    outPARNullPassQM: Double
    outPARNullNAQM: Double
    outPARGapFailQM: Double
    outPARGapPassQM: Double
    outPARGapNAQM: Double
    outPARSpikeFailQM: Double
    outPARSpikePassQM: Double
    outPARSpikeNAQM: Double
    outPARConsistencyFailQM: Double
    outPARConsistencyPassQM: Double
    outPARConsistencyNAQM: Double
    outPARAlphaQM: Double
    outPARBetaQM: Double
    outPARFinalQF: String
    startDateTime: Time
    endDateTime: Time
    pARValidCalQAQCRpt: String
    pARValidCalPassQM: Double
    pARValidCalNAQM: Double
    pARValidCalFailQM: Double
    outPARValidCalQAQCRpt: String
    outPARValidCalPassQM: Double
    outPARValidCalNAQM: Double
    outPARValidCalFailQM: Double
    outPARFinalQFSciRvw: String
    pARFinalQFSciRvw: String
  }

type PARPAR30min
  {
    pARMean: Double
    pARMinimum: Double
    pARMaximum: Double
    pARVariance: Double
    pARNumPts: Double
    pARExpUncert: Double
    pARStdErMean: Double
    pARRangeFailQM: Double
    pARRangePassQM: Double
    pARRangeNAQM: Double
    pARPersistenceFailQM: Double
    pARPersistencePassQM: Double
    pARPersistenceNAQM: Double
    pARStepFailQM: Double
    pARStepPassQM: Double
    pARStepNAQM: Double
    pARNullFailQM: Double
    pARNullPassQM: Double
    pARNullNAQM: Double
    pARGapFailQM: Double
    pARGapPassQM: Double
    pARGapNAQM: Double
    pARSpikeFailQM: Double
    pARSpikePassQM: Double
    pARSpikeNAQM: Double
    pARConsistencyFailQM: Double
    pARConsistencyPassQM: Double
    pARConsistencyNAQM: Double
    pARAlphaQM: Double
    pARBetaQM: Double
    pARFinalQF: String
    outPARMean: Double
    outPARMinimum: Double
    outPARMaximum: Double
    outPARVariance: Double
    outPARNumPts: Double
    outPARExpUncert: Double
    outPARStdErMean: Double
    outPARRangeFailQM: Double
    outPARRangePassQM: Double
    outPARRangeNAQM: Double
    outPARPersistenceFailQM: Double
    outPARPersistencePassQM: Double
    outPARPersistenceNAQM: Double
    outPARStepFailQM: Double
    outPARStepPassQM: Double
    outPARStepNAQM: Double
    outPARNullFailQM: Double
    outPARNullPassQM: Double
    outPARNullNAQM: Double
    outPARGapFailQM: Double
    outPARGapPassQM: Double
    outPARGapNAQM: Double
    outPARSpikeFailQM: Double
    outPARSpikePassQM: Double
    outPARSpikeNAQM: Double
    outPARConsistencyFailQM: Double
    outPARConsistencyPassQM: Double
    outPARConsistencyNAQM: Double
    outPARAlphaQM: Double
    outPARBetaQM: Double
    outPARFinalQF: String
    startDateTime: Time
    endDateTime: Time
    pARValidCalPassQM: Double
    pARValidCalNAQM: Double
    pARValidCalFailQM: Double
    outPARValidCalPassQM: Double
    outPARValidCalNAQM: Double
    outPARValidCalFailQM: Double
    outPARFinalQFSciRvw: String
  }

type PARQL
  {
    linePAR: Double
  }

type PARQL1min
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    linePARMean: Double
    linePARMinimum: Double
    linePARMaximum: Double
    linePARVariance: Double
    linePARNumPts: Double
    linePARSkewness: Double
    linePARKurtosis: Double
    linePARExpUncert: Double
    linePARStdErMean: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type PARQL30min
  {
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    linePARMean: Double
    linePARMinimum: Double
    linePARMaximum: Double
    linePARVariance: Double
    linePARNumPts: Double
    linePARSkewness: Double
    linePARKurtosis: Double
    linePARExpUncert: Double
    linePARStdErMean: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    finalQFSciRvw: String
  }

type PARWS
  {
    inPAR: Double
    outPAR: Double
  }

type PARWS1min
  {
    pARMean: Double
    pARMinimum: Double
    pARMaximum: Double
    pARVariance: Double
    pARNumPts: Double
    pARExpUncert: Double
    pARStdErMean: Double
    pARRangeQAQCRpt: String
    pARPersistenceQAQCRpt: String
    pARStepQAQCRpt: String
    pARNullQAQCRpt: String
    pARGapQAQCRpt: String
    pARSpikeQAQCRpt: String
    pARAlphaQAQCRpt: String
    pARBetaQAQCRpt: String
    pARRangeFailQM: Double
    pARRangePassQM: Double
    pARRangeNAQM: Double
    pARPersistenceFailQM: Double
    pARPersistencePassQM: Double
    pARPersistenceNAQM: Double
    pARStepFailQM: Double
    pARStepPassQM: Double
    pARStepNAQM: Double
    pARNullFailQM: Double
    pARNullPassQM: Double
    pARNullNAQM: Double
    pARGapFailQM: Double
    pARGapPassQM: Double
    pARGapNAQM: Double
    pARSpikeFailQM: Double
    pARSpikePassQM: Double
    pARSpikeNAQM: Double
    pARAlphaQM: Double
    pARBetaQM: Double
    pARFinalQF: String
    startDateTime: Time
    endDateTime: Time
    pARValidCalQAQCRpt: String
    pARValidCalPassQM: Double
    pARValidCalNAQM: Double
    pARValidCalFailQM: Double
    pARFinalQFSciRvw: String
  }

type PARWS30min
  {
    pARMean: Double
    pARMinimum: Double
    pARMaximum: Double
    pARVariance: Double
    pARNumPts: Double
    pARExpUncert: Double
    pARStdErMean: Double
    pARRangeFailQM: Double
    pARRangePassQM: Double
    pARRangeNAQM: Double
    pARPersistenceFailQM: Double
    pARPersistencePassQM: Double
    pARPersistenceNAQM: Double
    pARStepFailQM: Double
    pARStepPassQM: Double
    pARStepNAQM: Double
    pARNullFailQM: Double
    pARNullPassQM: Double
    pARNullNAQM: Double
    pARGapFailQM: Double
    pARGapPassQM: Double
    pARGapNAQM: Double
    pARSpikeFailQM: Double
    pARSpikePassQM: Double
    pARSpikeNAQM: Double
    pARAlphaQM: Double
    pARBetaQM: Double
    pARFinalQF: String
    startDateTime: Time
    endDateTime: Time
    pARValidCalPassQM: Double
    pARValidCalNAQM: Double
    pARValidCalFailQM: Double
    pARFinalQFSciRvw: String
  }

type PARWS5min
  {
    pARMean: Double
    pARMinimum: Double
    pARMaximum: Double
    pARVariance: Double
    pARNumPts: Double
    pARExpUncert: Double
    pARStdErMean: Double
    pARRangeFailQM: Double
    pARRangePassQM: Double
    pARRangeNAQM: Double
    pARPersistenceFailQM: Double
    pARPersistencePassQM: Double
    pARPersistenceNAQM: Double
    pARStepFailQM: Double
    pARStepPassQM: Double
    pARStepNAQM: Double
    pARNullFailQM: Double
    pARNullPassQM: Double
    pARNullNAQM: Double
    pARGapFailQM: Double
    pARGapPassQM: Double
    pARGapNAQM: Double
    pARSpikeFailQM: Double
    pARSpikePassQM: Double
    pARSpikeNAQM: Double
    pARAlphaQM: Double
    pARBetaQM: Double
    pARFinalQF: String
    startDateTime: Time
    endDateTime: Time
    pARValidCalPassQM: Double
    pARValidCalNAQM: Double
    pARValidCalFailQM: Double
    pARFinalQFSciRvw: String
  }

type PhePerindividualIn
  {
    uid: String
    plotID: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    individualID: String
    enteredBy: String
    acceptedTaxonID: String
    identifiedBy: String
    identifiedDate: Time
    addDate: Time
    transectMeter: Double
    directionFromTransect: String
    ninetyDegreeDistance: Double
    growthForm: String
    dropPlant: String
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    individualFate: String
    editedDate: Time
    gpsDatafile: String
    individualBarcode: String
    logCount: Double
    sampleCoordinateUncertainty: Double
    sampleElevation: Double
    sampleElevationUncertainty: Double
    sampleLatitude: Double
    sampleLongitude: Double
    subtypeSpecification: String
    vstTag: String
  }

type PhePerindividualPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    individualID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    taxonRank: String
    identifiedBy: String
    transectMeter: Double
    directionFromTransect: String
    ninetyDegreeDistance: Double
    growthForm: String
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
    editedDate: Time
    individualBarcode: String
    sampleCoordinateUncertainty: Double
    sampleElevation: Double
    sampleElevationUncertainty: Double
    sampleLatitude: Double
    sampleLongitude: Double
    subtypeSpecification: String
    sampleGeodeticDatum: String
    vstTag: String
  }

type PhePerindividualperyearIn
  {
    uid: String
    plotID: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    individualID: String
    enteredBy: String
    patchOrIndividual: String
    canopyPosition: String
    plantStatus: String
    stemDiameter: Double
    measurementHeight: Double
    maxCanopyDiameter: Double
    ninetyCanopyDiameter: Double
    percentCover: Double
    height: Double
    adultLeafLength: Double
    diseaseStatus: String
    diseaseType: String
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    individualFate: String
    editedDate: Time
    individualBarcode: String
    patchSize: Double
  }

type PhePerindividualperyearPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    individualID: String
    patchOrIndividual: String
    canopyPosition: String
    plantStatus: String
    stemDiameter: Double
    measurementHeight: Double
    maxCanopyDiameter: Double
    ninetyCanopyDiameter: Double
    percentCover: Double
    height: Double
    adultLeafLength: Double
    diseaseType: String
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
    editedDate: Time
    individualBarcode: String
    patchSize: Double
  }

type PheStatusintensityIn
  {
    uid: String
    plotID: String
    date: Time
    remarks: String
    taxonID: String
    measuredBy: String
    recordedBy: String
    individualID: String
    enteredBy: String
    growthForm: String
    phenophaseName: String
    phenophaseStatus: String
    phenophaseIntensityDefinition: String
    phenophaseIntensity: String
    dayOfYear: String
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    individualFate: String
    editedDate: Time
    individualBarcode: String
  }

type PheStatusintensityPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    individualID: String
    growthForm: String
    phenophaseName: String
    phenophaseStatus: String
    phenophaseIntensityDefinition: String
    phenophaseIntensity: String
    dayOfYear: String
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
    editedDate: Time
    individualBarcode: String
  }

type Phenocam
  {
    rawIRImage: String
    rawRGBImage: String
    iRmetadata: String
    rGBmetadata: String
  }

type PRE
  {
    secPrecipBucketTips: Integer
    tFPrecipBucketTips: Integer
    strainGauge1Stability: Integer
    strainGauge1Temp: Double
    strainGauge1FreqRaw: Double
    strainGauge1Weight: Double
    totalGaugeWeight: Double
    totalPrecipDepth: Double
    inletTemp: Double
    internalTemp: Double
    precipAccumulationRate: Double
    strainGauge1FreqComp: Double
    orificeHeaterFlag: Integer
    strainGauge2Stability: Integer
    strainGauge3Stability: Integer
    strainGauge2Temp: Double
    strainGauge3Temp: Double
    strainGauge2FreqRaw: Double
    strainGauge3FreqRaw: Double
    strainGauge2Weight: Double
    strainGauge3Weight: Double
    strainGauge2FreqComp: Double
    strainGauge3FreqComp: Double
    heaterMonitor: Double
  }

type PRIPRE30min
  {
    priPrecipBulk: Double
    priPrecipExpUncert: Double
    priPrecipNullQF: Integer
    startDateTime: Time
    endDateTime: Time
    inletHeaters1QM: Double
    inletHeaters2QM: Double
    inletHeaters3QM: Double
    priPrecipFinalQF: String
    priPrecipNumPts: Double
    inletHeatersNAQM: Double
    priPrecipFinalQFSciRvw: String
  }

type PRIPRE5min
  {
    priPrecipBulk: Double
    priPrecipExpUncert: Double
    priPrecipNullQF: Integer
    startDateTime: Time
    endDateTime: Time
    wire1StabilityPassQM: Double
    wire1StabilitySearchQM: Double
    wire1StabilityFailQM: Double
    wire2StabilityPassQM: Double
    wire2StabilitySearchQM: Double
    wire2StabilityFailQM: Double
    wire3StabilityPassQM: Double
    wire3StabilitySearchQM: Double
    wire3StabilityFailQM: Double
    inletHeaters1QM: Double
    inletHeaters2QM: Double
    inletHeaters3QM: Double
    priorDepthQF: String
    unstableQF: String
    lowDepthQF: String
    exDeltaQF: String
    missingWireInfoQF: String
    gaugeNoiseQF: String
    wireNoiseQF: String
    overflowQF: String
    heaterErrorQF: String
    priPrecipFinalQF: String
    wire1StabilityNAQM: Double
    wire2StabilityNAQM: Double
    wire3StabilityNAQM: Double
    inletHeatersNAQM: Double
    priPrecipFinalQFSciRvw: String
    priPrecipValidCalQF: Integer
  }

type ProfGasCyl
  {
    fdMoleCO2: Double
    fdMole12CO2: Double
    fdMole13CO2: Double
    d13CO2: Double
  }

type ProfGasCylL0prime
  {
    fdMoleCO2: Double
    fdMole12CO2: Double
    fdMole13CO2: Double
    d13CO2: Double
  }

type ProfGasCylL1prime
  {
    fdMoleCO2: Double
    fdMole12CO2: Double
    fdMole13CO2: Double
    d13CO2: Double
  }

type ProfGasCylL2prime
  {
    fdMoleCO2: Double
    fdMole12CO2: Double
    fdMole13CO2: Double
    d13CO2: Double
  }

type ProfIrga
  {
    asrpH2O: Double
    asrpCO2: Double
    fwMoleCO2: Double
    fwMoleH2O: Double
    tempCell: Double
    presCell: Double
  }

type ProfIrgaL0prime
  {
    asrpH2O: Double
    fdMoleH2O: Double
    asrpCO2: Double
    fdMoleCO2: Double
    fwMoleCO2: Double
    fwMoleH2O: Double
    tempCell: Double
    presCell: Double
  }

type ProfMfcSamp
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
  }

type ProfMfcSampL0prime
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
    qfFrt0: Integer
  }

type ProfMfcVali
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
  }

type ProfMfcValiL0prime
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
    frtSet0: Double
    qfFrt0: Integer
  }

type ProfMfm
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
  }

type ProfMfmL0prime
  {
    presAtm: Double
    temp: Double
    frt: Double
    frt0: Double
  }

type ProfPresInlet
  {
    presGage: Double
  }

type ProfPresInletL0prime
  {
    presGage: Double
  }

type ProfPresValiRegDel
  {
    presGage: Double
  }

type ProfPresValiRegDelL0prime
  {
    presGage: Double
  }

type ProfPresValiRegTank
  {
    presGage: Double
  }

type ProfPresValiRegTankL0prime
  {
    presGage: Double
  }

type ProfPumpSmp
  {
    pumpVoltage: Double
  }

type ProfPumpSmpL0prime
  {
    pumpVoltage: Double
  }

type ProfRefeH2oValiL0prime
  {
    d2HWaterLow: Double
    d18OWaterLow: Double
    d2HWaterMed: Double
    d18OWaterMed: Double
    d2HWaterHigh: Double
    d18OWaterHigh: Double
  }

type ProfSnd
  {
    valvCmd1: Integer
    valvCmd2: Integer
    valvCmd3: Integer
    valvCmd4: Integer
    valvCmd5: Integer
    valvCmd6: Integer
    valvCmd7: Integer
    valvCmd8: Integer
  }

type ProfSndL0prime
  {
    valvStat1: Integer
    valvCmd1: Integer
    valvCmd2: Integer
    valvCmd3: Integer
    valvCmd4: Integer
    valvCmd5: Integer
    valvCmd6: Integer
    valvCmd7: Integer
    valvCmd8: Integer
    typeGas: String
    typeGasCrdH2O: Integer
    lvlIrga: Integer
    lvlCrdCO2: Integer
    lvlCrdH2O: Integer
    injNum: String
    typeH2o: String
  }

type ProfSndAux
  {
    valvCmd1: Integer
    valvCmd2: Integer
    valvCmd3: Integer
    valvCmd4: Integer
  }

type ProfSndAuxL0prime
  {
    valvCmd1: Integer
    valvCmd2: Integer
    valvCmd3: Integer
    valvCmd4: Integer
    measTypeCrdH2O: Integer
    measTypeCrdCO2: Integer
    qfValvIrga: Integer
    measTypeIrga: Integer
  }

type ProfSndVapor
  {
    valvStat1: Integer
  }

type ProfTray45Vial
  {
    d2HWaterLow: Double
    d18OWaterLow: Double
    d2HWaterMed: Double
    d18OWaterMed: Double
    d2HWaterHigh: Double
    d18OWaterHigh: Double
  }

type ProfTray90Vial
  {
    d2HWaterLow: Double
    d18OWaterLow: Double
    d2HWaterMed: Double
    d18OWaterMed: Double
    d2HWaterHigh: Double
    d18OWaterHigh: Double
  }

type PtxArchiveIn
  {
    uid: String
    sampleID: String
    startDate: Time
    endDate: Time
    locationID: String
    slideID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    slideCode: String
    slideFate: String
    freezeDriedCode: String
    freezeDriedID: String
    preservedCode: String
    preservedID: String
    freezeDriedFate: String
    preservedFate: String
  }

type PtxQualityCheckIn
  {
    uid: String
    remarks: String
    scientificName: String
    sampleID: String
    collectDate: Time
    individualCount: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    stationID: String
    startDate: Time
    laboratoryName: String
    qcPercentSimilarity: Double
    sampleFate: String
    sampleCode: String
    dataQF: String
    taxonAbbreviation: String
    enumerationDifference: Double
    qcIdentifiedBy: String
    qcIndividualCount: String
  }

type PtxTaxonomyIn
  {
    uid: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    scientificName: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    stationID: String
    startDate: Time
    laboratoryName: String
    internalLabID: String
    method: String
    testMethod: String
    qcTaxonomyStatus: String
    algalType: String
    slideID: String
    algalParameter: String
    algalParameterValue: Double
    algalParameterUnit: String
    kingdom: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    tribe: String
    variety: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    subtribe: String
    section: String
    subkingdom: String
    infrakingdom: String
    superdivision: String
    division: String
    subdivision: String
    infradivision: String
    parvdivision: String
    superclass: String
    subsection: String
    subspecies: String
    subvariety: String
    subform: String
    form: String
    speciesGroup: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    slideCode: String
    slideFate: String
    perBottleSampleVolume: Double
  }

type ReaBackgroundFieldCondDataIn
  {
    uid: String
    collectDate: Time
    stationID: String
    startDate: Time
    fulcrumVersion: String
    platformInfo: String
    backgroundFieldCondDataQF: String
    hoboSampleCode: String
    hoboSampleID: String
    stationToInjectionDistance: Double
    hoboSampleFate: String
    hoboSampleCond: String
    hoboSampleClass: String
  }

type ReaBackgroundFieldCondDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    namedLocation: String
    backgroundFieldCondDataQF: String
    hoboSampleCode: String
    hoboSampleID: String
    stationToInjectionDistance: Double
  }

type ReaBackgroundFieldSaltDataIn
  {
    uid: String
    remarks: String
    collectDate: Time
    stationID: String
    startDate: Time
    sampleCollected: String
    fulcrumVersion: String
    platformInfo: String
    backgroundFieldSaltDataQF: String
    saltBackgroundSampleCode: String
    saltBackgroundSampleID: String
    specificConductanceRep1: Double
    specificConductanceRep2: Double
    specificConductanceRep3: Double
    specificConductanceRep4: Double
    stationToInjectionDistance: Double
    saltBackgroundSampleClass: String
    saltBackgroundSampleFate: String
    saltBackgroundSampleCond: String
    incompleteExperimentQF: String
  }

type ReaBackgroundFieldSaltDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    sampleCollected: String
    namedLocation: String
    backgroundFieldSaltDataQF: String
    saltBackgroundSampleCode: String
    saltBackgroundSampleID: String
    specificConductanceRep1: Double
    specificConductanceRep2: Double
    specificConductanceRep3: Double
    specificConductanceRep4: Double
    stationToInjectionDistance: Double
    incompleteExperimentQF: String
  }

type ReaConductivityFieldDataIn
  {
    uid: String
    collectDate: Time
    stationID: String
    waterTemp: Double
    startDate: Time
    handheldDeviceID: String
    fullRangeSpCondLinear: Double
    fullRangeSpCondNonlinear: Double
    lowRangeSpCondLinear: Double
    lowRangeSpCondNonlinear: Double
    recorduid: String
    dateTimeLogger: Time
    fullRangeHobo: Double
    hoboSampleCode: String
    hoboSampleID: String
    loggerDataQF: String
    lowRangeHobo: Double
    measurementNumber: String
    hoboSampleFate: String
  }

type ReaConductivityFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    waterTemp: Double
    startDate: Time
    namedLocation: String
    fullRangeSpCondLinear: Double
    fullRangeSpCondNonlinear: Double
    lowRangeSpCondLinear: Double
    lowRangeSpCondNonlinear: Double
    recorduid: String
    dateTimeLogger: Time
    fullRangeHobo: Double
    hoboSampleCode: String
    hoboSampleID: String
    loggerDataQF: String
    lowRangeHobo: Double
    measurementNumber: String
  }

type ReaExternalLabDataGasIn
  {
    uid: String
    remarks: String
    collectDate: Time
    stationID: String
    startDate: Time
    laboratoryName: String
    internalLabID: String
    receivedBy: String
    shipmentID: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    sampleCondition: String
    certifiedStandardAccuracy: Double
    externalLabGasDataQF: String
    gasSampleCode: String
    gasSampleID: String
    gasTracerConcentration: Double
    gasTracerType: String
    gasVolumeAnalyzed: Double
    labStandardPrecision: Double
    runDetectionLimit: Double
    externaLabFileName: String
    gasBelowDetectionQF: Integer
    gasSampleFate: String
    gasCheckStandardPercentDev: Double
    gasCheckStandardQF: Integer
    vialID: String
  }

type ReaExternalLabDataGasPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    receivedBy: String
    shipmentID: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    sampleCondition: String
    namedLocation: String
    certifiedStandardAccuracy: Double
    externalLabGasDataQF: String
    gasSampleID: String
    gasTracerConcentration: Double
    gasTracerType: String
    gasVolumeAnalyzed: Double
    labStandardPrecision: Double
    runDetectionLimit: Double
    gasCheckStandardPercentDev: Double
    gasCheckStandardQF: Integer
  }

type ReaExternalLabDataSaltIn
  {
    uid: String
    remarks: String
    collectDate: Time
    stationID: String
    startDate: Time
    laboratoryName: String
    receivedBy: String
    shipmentID: String
    analyte: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    sampleCondition: String
    externalLabSaltDataQF: String
    finalConcentration: Double
    saltBelowDetectionQF: Integer
    saltSampleID: String
    saltSampleCode: String
    saltSampleFate: String
    saltCheckStandardPercentDev: Double
    saltCheckStandardQF: Integer
  }

type ReaExternalLabDataSaltPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    receivedBy: String
    shipmentID: String
    analyte: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    sampleCondition: String
    namedLocation: String
    externalLabSaltDataQF: String
    finalConcentration: Double
    saltBelowDetectionQF: Integer
    saltSampleID: String
    saltCheckStandardPercentDev: Double
    saltCheckStandardQF: Integer
  }

type ReaFieldDataIn
  {
    uid: String
    siteID: String
    recordedBy: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    fieldDataQF: String
    fulcrumVersion: String
    platformInfo: String
    betweenLoggersDist: Double
    carboyVolume: Double
    constantRateTracerMass: Double
    dripEndTime: Time
    dripRateStart: Double
    dripRateEnd: Double
    dripStartTime: Time
    gasTracerType: String
    injectateSampleCode: String
    injectateSampleCollected: String
    injectateSampleID: String
    injectionType: String
    loggersAtSensorSets: String
    slugPourTime: Time
    slugTracerMass: Double
    tracerAnalysisType: String
    injectateSampleFate: String
    injectateSampleCond: String
    incompleteExperimentQF: String
    injectateSampleClass: String
    iceCover: String
    streambedLeafCover: String
  }

type ReaFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    recordedBy: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    fieldDataQF: String
    namedLocation: String
    betweenLoggersDist: Double
    carboyVolume: Double
    constantRateTracerMass: Double
    dripEndTime: Time
    dripRateStart: Double
    dripRateEnd: Double
    dripStartTime: Time
    gasTracerType: String
    injectateSampleCode: String
    injectateSampleCollected: String
    injectateSampleID: String
    injectionType: String
    loggersAtSensorSets: String
    slugPourTime: Time
    slugTracerMass: Double
    tracerAnalysisType: String
    incompleteExperimentQF: String
    iceCover: String
    streambedLeafCover: String
  }

type ReaPlateauMeasurementFieldDataIn
  {
    uid: String
    remarks: String
    collectDate: Time
    stationID: String
    waterTemp: Double
    startDate: Time
    fulcrumVersion: String
    platformInfo: String
    plateauFieldDataQF: String
    specificConductanceRep1: Double
    specificConductanceRep2: Double
    specificConductanceRep3: Double
    specificConductanceRep4: Double
    specificConductanceRep5: Double
  }

type ReaPlateauMeasurementFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    waterTemp: Double
    startDate: Time
    namedLocation: String
    plateauFieldDataQF: String
    specificConductanceRep1: Double
    specificConductanceRep2: Double
    specificConductanceRep3: Double
    specificConductanceRep4: Double
    specificConductanceRep5: Double
  }

type ReaPlateauSampleFieldDataIn
  {
    uid: String
    collectDate: Time
    stationID: String
    startDate: Time
    replicateNumber: Integer
    fulcrumVersion: String
    platformInfo: String
    gasSampleCode: String
    gasSampleID: String
    plateauSampleFieldDataQF: String
    plateauCollectTime: Time
    saltTracerSampleCode: String
    saltTracerSampleID: String
    syringeID: String
    syringeCode: String
    gasSampleFate: String
    saltTracerSampleFate: String
    syringeFate: String
    gasSampleCond: String
    saltTracerSampleCond: String
    syringeCond: String
    incompleteExperimentQF: String
  }

type ReaPlateauSampleFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    replicateNumber: Integer
    namedLocation: String
    gasSampleCode: String
    gasSampleID: String
    plateauSampleFieldDataQF: String
    plateauCollectTime: Time
    saltTracerSampleCode: String
    saltTracerSampleID: String
    syringeID: String
    syringeCode: String
    incompleteExperimentQF: String
  }

type ReaWidthFieldDataIn
  {
    uid: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    wettedWidth: Double
    fulcrumVersion: String
    platformInfo: String
    widthMeasurementNumber: String
    wettedWidthDataQF: String
    measuringMethod: String
  }

type ReaWidthFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    wettedWidth: Double
    namedLocation: String
    widthMeasurementNumber: String
    wettedWidthDataQF: String
    measuringMethod: String
  }

type RH
  {
    sensorTemp: Double
    rH: Double
    dewPoint: Double
    rHStatus: Double
  }

type RH1min
  {
    rHMean: Double
    rHMinimum: Double
    rHMaximum: Double
    rHVariance: Double
    rHNumPts: Double
    rHExpUncert: Double
    rHStdErMean: Double
    rHRangeQAQCRpt: String
    rHPersistenceQAQCRpt: String
    rHStepQAQCRpt: String
    rHNullQAQCRpt: String
    rHGapQAQCRpt: String
    rHConsistencyQAQCRpt: String
    rHSpikeQAQCRpt: String
    rHAlphaQAQCRpt: String
    rHBetaQAQCRpt: String
    rHRangeFailQM: Double
    rHRangePassQM: Double
    rHRangeNAQM: Double
    rHPersistenceFailQM: Double
    rHPersistencePassQM: Double
    rHPersistenceNAQM: Double
    rHStepFailQM: Double
    rHStepPassQM: Double
    rHStepNAQM: Double
    rHNullFailQM: Double
    rHNullPassQM: Double
    rHNullNAQM: Double
    rHGapFailQM: Double
    rHGapPassQM: Double
    rHGapNAQM: Double
    rHSpikeFailQM: Double
    rHSpikePassQM: Double
    rHSpikeNAQM: Double
    rHConsistencyFailQM: Double
    rHConsistencyPassQM: Double
    rHConsistencyNAQM: Double
    rHAlphaQM: Double
    rHBetaQM: Double
    rHFinalQF: String
    tempRHMean: Double
    tempRHMinimum: Double
    tempRHMaximum: Double
    tempRHVariance: Double
    tempRHNumPts: Double
    tempRHExpUncert: Double
    tempRHStdErMean: Double
    tempRHRangeQAQCRpt: String
    tempRHPersistenceQAQCRpt: String
    tempRHStepQAQCRpt: String
    tempRHNullQAQCRpt: String
    tempRHGapQAQCRpt: String
    tempRHConsistencyQAQCRpt: String
    tempRHSpikeQAQCRpt: String
    tempRHAlphaQAQCRpt: String
    tempRHBetaQAQCRpt: String
    tempRHRangeFailQM: Double
    tempRHRangePassQM: Double
    tempRHRangeNAQM: Double
    tempRHPersistenceFailQM: Double
    tempRHPersistencePassQM: Double
    tempRHPersistenceNAQM: Double
    tempRHStepFailQM: Double
    tempRHStepPassQM: Double
    tempRHStepNAQM: Double
    tempRHNullFailQM: Double
    tempRHNullPassQM: Double
    tempRHNullNAQM: Double
    tempRHGapFailQM: Double
    tempRHGapPassQM: Double
    tempRHGapNAQM: Double
    tempRHSpikeFailQM: Double
    tempRHSpikePassQM: Double
    tempRHSpikeNAQM: Double
    tempRHConsistencyFailQM: Double
    tempRHConsistencyPassQM: Double
    tempRHConsistencyNAQM: Double
    tempRHAlphaQM: Double
    tempRHBetaQM: Double
    tempRHFinalQF: String
    dewTempMean: Double
    dewTempMinimum: Double
    dewTempMaximum: Double
    dewTempVariance: Double
    dewTempNumPts: Double
    dewTempExpUncert: Double
    dewTempStdErMean: Double
    dewTempRangeQAQCRpt: String
    dewTempPersistenceQAQCRpt: String
    dewTempStepQAQCRpt: String
    dewTempNullQAQCRpt: String
    dewTempGapQAQCRpt: String
    dewTempConsistencyQAQCRpt: String
    dewTempSpikeQAQCRpt: String
    dewTempAlphaQAQCRpt: String
    dewTempBetaQAQCRpt: String
    dewTempRangeFailQM: Double
    dewTempRangePassQM: Double
    dewTempRangeNAQM: Double
    dewTempPersistenceFailQM: Double
    dewTempPersistencePassQM: Double
    dewTempPersistenceNAQM: Double
    dewTempStepFailQM: Double
    dewTempStepPassQM: Double
    dewTempStepNAQM: Double
    dewTempNullFailQM: Double
    dewTempNullPassQM: Double
    dewTempNullNAQM: Double
    dewTempGapFailQM: Double
    dewTempGapPassQM: Double
    dewTempGapNAQM: Double
    dewTempSpikeFailQM: Double
    dewTempSpikePassQM: Double
    dewTempSpikeNAQM: Double
    dewTempConsistencyFailQM: Double
    dewTempConsistencyPassQM: Double
    dewTempConsistencyNAQM: Double
    dewTempAlphaQM: Double
    dewTempBetaQM: Double
    dewTempFinalQF: String
    rHSensorErrorFailQM: Double
    rHSensorErrorPassQM: Double
    rHSensorErrorNAQM: Double
    rHSensorErrorQAQCRpt: String
    startDateTime: Time
    endDateTime: Time
    dewTempFinalQFSciRvw: String
    rHFinalQFSciRvw: String
    tempRHFinalQFSciRvw: String
    dewTempValidCalFailQM: Double
    dewTempValidCalNAQM: Double
    dewTempValidCalPassQM: Double
    dewTempValidCalQAQCRpt: String
    rHValidCalFailQM: Double
    rHValidCalNAQM: Double
    rHValidCalPassQM: Double
    rHValidCalQAQCRpt: String
    tempRHValidCalFailQM: Double
    tempRHValidCalNAQM: Double
    tempRHValidCalPassQM: Double
    tempRHValidCalQAQCRpt: String
  }

type RH30min
  {
    rHMean: Double
    rHMinimum: Double
    rHMaximum: Double
    rHVariance: Double
    rHNumPts: Double
    rHExpUncert: Double
    rHStdErMean: Double
    rHRangeFailQM: Double
    rHRangePassQM: Double
    rHRangeNAQM: Double
    rHPersistenceFailQM: Double
    rHPersistencePassQM: Double
    rHPersistenceNAQM: Double
    rHStepFailQM: Double
    rHStepPassQM: Double
    rHStepNAQM: Double
    rHNullFailQM: Double
    rHNullPassQM: Double
    rHNullNAQM: Double
    rHGapFailQM: Double
    rHGapPassQM: Double
    rHGapNAQM: Double
    rHSpikeFailQM: Double
    rHSpikePassQM: Double
    rHSpikeNAQM: Double
    rHConsistencyFailQM: Double
    rHConsistencyPassQM: Double
    rHConsistencyNAQM: Double
    rHAlphaQM: Double
    rHBetaQM: Double
    rHFinalQF: String
    tempRHMean: Double
    tempRHMinimum: Double
    tempRHMaximum: Double
    tempRHVariance: Double
    tempRHNumPts: Double
    tempRHExpUncert: Double
    tempRHStdErMean: Double
    tempRHRangeFailQM: Double
    tempRHRangePassQM: Double
    tempRHRangeNAQM: Double
    tempRHPersistenceFailQM: Double
    tempRHPersistencePassQM: Double
    tempRHPersistenceNAQM: Double
    tempRHStepFailQM: Double
    tempRHStepPassQM: Double
    tempRHStepNAQM: Double
    tempRHNullFailQM: Double
    tempRHNullPassQM: Double
    tempRHNullNAQM: Double
    tempRHGapFailQM: Double
    tempRHGapPassQM: Double
    tempRHGapNAQM: Double
    tempRHSpikeFailQM: Double
    tempRHSpikePassQM: Double
    tempRHSpikeNAQM: Double
    tempRHConsistencyFailQM: Double
    tempRHConsistencyPassQM: Double
    tempRHConsistencyNAQM: Double
    tempRHAlphaQM: Double
    tempRHBetaQM: Double
    tempRHFinalQF: String
    dewTempMean: Double
    dewTempMinimum: Double
    dewTempMaximum: Double
    dewTempVariance: Double
    dewTempNumPts: Double
    dewTempExpUncert: Double
    dewTempStdErMean: Double
    dewTempRangeFailQM: Double
    dewTempRangePassQM: Double
    dewTempRangeNAQM: Double
    dewTempPersistenceFailQM: Double
    dewTempPersistencePassQM: Double
    dewTempPersistenceNAQM: Double
    dewTempStepFailQM: Double
    dewTempStepPassQM: Double
    dewTempStepNAQM: Double
    dewTempNullFailQM: Double
    dewTempNullPassQM: Double
    dewTempNullNAQM: Double
    dewTempGapFailQM: Double
    dewTempGapPassQM: Double
    dewTempGapNAQM: Double
    dewTempSpikeFailQM: Double
    dewTempSpikePassQM: Double
    dewTempSpikeNAQM: Double
    dewTempConsistencyFailQM: Double
    dewTempConsistencyPassQM: Double
    dewTempConsistencyNAQM: Double
    dewTempAlphaQM: Double
    dewTempBetaQM: Double
    dewTempFinalQF: String
    rHSensorErrorFailQM: Double
    rHSensorErrorPassQM: Double
    rHSensorErrorNAQM: Double
    startDateTime: Time
    endDateTime: Time
    dewTempFinalQFSciRvw: String
    rHFinalQFSciRvw: String
    tempRHFinalQFSciRvw: String
    dewTempValidCalFailQM: Double
    dewTempValidCalNAQM: Double
    dewTempValidCalPassQM: Double
    rHValidCalFailQM: Double
    rHValidCalNAQM: Double
    rHValidCalPassQM: Double
    tempRHValidCalFailQM: Double
    tempRHValidCalNAQM: Double
    tempRHValidCalPassQM: Double
  }

type RHL0prime
  {
    sensorTemp: Double
    rH: Double
    dewPoint: Double
    rHStatus: Double
    qfHeat: Integer
  }

type RHBuoy
  {
    sensorTemp: Double
    rH: Double
    dewPoint: Double
    rHStatus: Double
  }

type RHbuoy1min
  {
    rHMean: Double
    rHMinimum: Double
    rHMaximum: Double
    rHVariance: Double
    rHNumPts: Double
    rHExpUncert: Double
    rHStdErMean: Double
    rHRangeQAQCRpt: String
    rHPersistenceQAQCRpt: String
    rHStepQAQCRpt: String
    rHNullQAQCRpt: String
    rHGapQAQCRpt: String
    rHConsistencyQAQCRpt: String
    rHSpikeQAQCRpt: String
    rHAlphaQAQCRpt: String
    rHBetaQAQCRpt: String
    rHRangeFailQM: Double
    rHRangePassQM: Double
    rHRangeNAQM: Double
    rHPersistenceFailQM: Double
    rHPersistencePassQM: Double
    rHPersistenceNAQM: Double
    rHStepFailQM: Double
    rHStepPassQM: Double
    rHStepNAQM: Double
    rHNullFailQM: Double
    rHNullPassQM: Double
    rHNullNAQM: Double
    rHGapFailQM: Double
    rHGapPassQM: Double
    rHGapNAQM: Double
    rHSpikeFailQM: Double
    rHSpikePassQM: Double
    rHSpikeNAQM: Double
    rHConsistencyFailQM: Double
    rHConsistencyPassQM: Double
    rHConsistencyNAQM: Double
    rHAlphaQM: Double
    rHBetaQM: Double
    rHFinalQF: String
    tempRHMean: Double
    tempRHMinimum: Double
    tempRHMaximum: Double
    tempRHVariance: Double
    tempRHNumPts: Double
    tempRHExpUncert: Double
    tempRHStdErMean: Double
    tempRHRangeQAQCRpt: String
    tempRHPersistenceQAQCRpt: String
    tempRHStepQAQCRpt: String
    tempRHNullQAQCRpt: String
    tempRHGapQAQCRpt: String
    tempRHConsistencyQAQCRpt: String
    tempRHSpikeQAQCRpt: String
    tempRHAlphaQAQCRpt: String
    tempRHBetaQAQCRpt: String
    tempRHRangeFailQM: Double
    tempRHRangePassQM: Double
    tempRHRangeNAQM: Double
    tempRHPersistenceFailQM: Double
    tempRHPersistencePassQM: Double
    tempRHPersistenceNAQM: Double
    tempRHStepFailQM: Double
    tempRHStepPassQM: Double
    tempRHStepNAQM: Double
    tempRHNullFailQM: Double
    tempRHNullPassQM: Double
    tempRHNullNAQM: Double
    tempRHGapFailQM: Double
    tempRHGapPassQM: Double
    tempRHGapNAQM: Double
    tempRHSpikeFailQM: Double
    tempRHSpikePassQM: Double
    tempRHSpikeNAQM: Double
    tempRHConsistencyFailQM: Double
    tempRHConsistencyPassQM: Double
    tempRHConsistencyNAQM: Double
    tempRHAlphaQM: Double
    tempRHBetaQM: Double
    tempRHFinalQF: String
    dewTempMean: Double
    dewTempMinimum: Double
    dewTempMaximum: Double
    dewTempVariance: Double
    dewTempNumPts: Double
    dewTempExpUncert: Double
    dewTempStdErMean: Double
    dewTempRangeQAQCRpt: String
    dewTempPersistenceQAQCRpt: String
    dewTempStepQAQCRpt: String
    dewTempNullQAQCRpt: String
    dewTempGapQAQCRpt: String
    dewTempConsistencyQAQCRpt: String
    dewTempSpikeQAQCRpt: String
    dewTempAlphaQAQCRpt: String
    dewTempBetaQAQCRpt: String
    dewTempRangeFailQM: Double
    dewTempRangePassQM: Double
    dewTempRangeNAQM: Double
    dewTempPersistenceFailQM: Double
    dewTempPersistencePassQM: Double
    dewTempPersistenceNAQM: Double
    dewTempStepFailQM: Double
    dewTempStepPassQM: Double
    dewTempStepNAQM: Double
    dewTempNullFailQM: Double
    dewTempNullPassQM: Double
    dewTempNullNAQM: Double
    dewTempGapFailQM: Double
    dewTempGapPassQM: Double
    dewTempGapNAQM: Double
    dewTempSpikeFailQM: Double
    dewTempSpikePassQM: Double
    dewTempSpikeNAQM: Double
    dewTempConsistencyFailQM: Double
    dewTempConsistencyPassQM: Double
    dewTempConsistencyNAQM: Double
    dewTempAlphaQM: Double
    dewTempBetaQM: Double
    dewTempFinalQF: String
    rHSensorErrorFailQM: Double
    rHSensorErrorPassQM: Double
    rHSensorErrorNAQM: Double
    rHSensorErrorQAQCRpt: String
    startDateTime: Time
    endDateTime: Time
    dewTempFinalQFSciRvw: String
    rHFinalQFSciRvw: String
    tempRHFinalQFSciRvw: String
    dewTempValidCalFailQM: Double
    dewTempValidCalNAQM: Double
    dewTempValidCalPassQM: Double
    dewTempValidCalQAQCRpt: String
    rHValidCalFailQM: Double
    rHValidCalNAQM: Double
    rHValidCalPassQM: Double
    rHValidCalQAQCRpt: String
    tempRHValidCalFailQM: Double
    tempRHValidCalNAQM: Double
    tempRHValidCalPassQM: Double
    tempRHValidCalQAQCRpt: String
  }

type RHbuoy30min
  {
    rHMean: Double
    rHMinimum: Double
    rHMaximum: Double
    rHVariance: Double
    rHNumPts: Double
    rHExpUncert: Double
    rHStdErMean: Double
    rHRangeFailQM: Double
    rHRangePassQM: Double
    rHRangeNAQM: Double
    rHPersistenceFailQM: Double
    rHPersistencePassQM: Double
    rHPersistenceNAQM: Double
    rHStepFailQM: Double
    rHStepPassQM: Double
    rHStepNAQM: Double
    rHNullFailQM: Double
    rHNullPassQM: Double
    rHNullNAQM: Double
    rHGapFailQM: Double
    rHGapPassQM: Double
    rHGapNAQM: Double
    rHSpikeFailQM: Double
    rHSpikePassQM: Double
    rHSpikeNAQM: Double
    rHConsistencyFailQM: Double
    rHConsistencyPassQM: Double
    rHConsistencyNAQM: Double
    rHAlphaQM: Double
    rHBetaQM: Double
    rHFinalQF: String
    tempRHMean: Double
    tempRHMinimum: Double
    tempRHMaximum: Double
    tempRHVariance: Double
    tempRHNumPts: Double
    tempRHExpUncert: Double
    tempRHStdErMean: Double
    tempRHRangeFailQM: Double
    tempRHRangePassQM: Double
    tempRHRangeNAQM: Double
    tempRHPersistenceFailQM: Double
    tempRHPersistencePassQM: Double
    tempRHPersistenceNAQM: Double
    tempRHStepFailQM: Double
    tempRHStepPassQM: Double
    tempRHStepNAQM: Double
    tempRHNullFailQM: Double
    tempRHNullPassQM: Double
    tempRHNullNAQM: Double
    tempRHGapFailQM: Double
    tempRHGapPassQM: Double
    tempRHGapNAQM: Double
    tempRHSpikeFailQM: Double
    tempRHSpikePassQM: Double
    tempRHSpikeNAQM: Double
    tempRHConsistencyFailQM: Double
    tempRHConsistencyPassQM: Double
    tempRHConsistencyNAQM: Double
    tempRHAlphaQM: Double
    tempRHBetaQM: Double
    tempRHFinalQF: String
    dewTempMean: Double
    dewTempMinimum: Double
    dewTempMaximum: Double
    dewTempVariance: Double
    dewTempNumPts: Double
    dewTempExpUncert: Double
    dewTempStdErMean: Double
    dewTempRangeFailQM: Double
    dewTempRangePassQM: Double
    dewTempRangeNAQM: Double
    dewTempPersistenceFailQM: Double
    dewTempPersistencePassQM: Double
    dewTempPersistenceNAQM: Double
    dewTempStepFailQM: Double
    dewTempStepPassQM: Double
    dewTempStepNAQM: Double
    dewTempNullFailQM: Double
    dewTempNullPassQM: Double
    dewTempNullNAQM: Double
    dewTempGapFailQM: Double
    dewTempGapPassQM: Double
    dewTempGapNAQM: Double
    dewTempSpikeFailQM: Double
    dewTempSpikePassQM: Double
    dewTempSpikeNAQM: Double
    dewTempConsistencyFailQM: Double
    dewTempConsistencyPassQM: Double
    dewTempConsistencyNAQM: Double
    dewTempAlphaQM: Double
    dewTempBetaQM: Double
    dewTempFinalQF: String
    rHSensorErrorFailQM: Double
    rHSensorErrorPassQM: Double
    rHSensorErrorNAQM: Double
    startDateTime: Time
    endDateTime: Time
    dewTempFinalQFSciRvw: String
    rHFinalQFSciRvw: String
    tempRHFinalQFSciRvw: String
    dewTempValidCalFailQM: Double
    dewTempValidCalNAQM: Double
    dewTempValidCalPassQM: Double
    rHValidCalFailQM: Double
    rHValidCalNAQM: Double
    rHValidCalPassQM: Double
    tempRHValidCalFailQM: Double
    tempRHValidCalNAQM: Double
    tempRHValidCalPassQM: Double
  }

type RipAssessmentPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    scientificName: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    dataQF: String
    adjacentAreaLeftRemarks: String
    adjacentAreaRightRemarks: String
    agriculturePresence: String
    bankLR: String
    bareDirtCoverClass: String
    bigTreeCoverClass: String
    bigTreeType: String
    boatRampPresence: String
    buildingPresence: String
    dominantBankAngle: String
    dominantBankRevetment: String
    dominantBankTexture: String
    industryPresence: String
    lawnsParksPresence: String
    pavementPresence: String
    riparianClass: String
    riparianDominantVegetation: String
    riparianSubclass: String
    riparianSubsystem: String
    riparianWaterDepth: Double
    roadPresence: String
    shortHerbCoverClass: String
    smallTreeCoverClass: String
    smallTreeType: String
    standingWaterCoverClass: String
    subdominantBankAngle: String
    subdominantBankRevetment: String
    subdominantBankTexture: String
    tallHerbCoverClass: String
    tallHerbType: String
    trashPresence: String
    wettedWidth: Double
    woodyShrubGroundCoverClass: String
    woodyShrubSaplingCoverClass: String
    woodyShrubSaplingType: String
    replicateNumber: Integer
    namedLocation: String
    boatToShoreDist: Double
    estVisibilityDist: String
    bankUndercut: String
  }

type RipFieldDataBankIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    dataQF: String
    adjacentAreaLeftRemarks: String
    adjacentAreaRightRemarks: String
    agriculturePresence: String
    bankLR: String
    bareDirtCoverClass: String
    bigTreeCoverClass: String
    bigTreeType: String
    boatRampPresence: String
    buildingPresence: String
    dominantBankAngle: String
    dominantBankRevetment: String
    dominantBankTexture: String
    industryPresence: String
    lawnsParksPresence: String
    pavementPresence: String
    riparianClass: String
    riparianDominantVegetation: String
    riparianSubclass: String
    riparianSubsystem: String
    riparianWaterDepth: Double
    roadPresence: String
    shortHerbCoverClass: String
    smallTreeCoverClass: String
    smallTreeType: String
    standingWaterCoverClass: String
    subdominantBankAngle: String
    subdominantBankRevetment: String
    subdominantBankTexture: String
    tallHerbCoverClass: String
    tallHerbType: String
    transectID: String
    trashPresence: String
    wettedWidth: Double
    woodyShrubGroundCoverClass: String
    woodyShrubSaplingCoverClass: String
    woodyShrubSaplingType: String
    replicateNumber: Integer
    fulcrumVersion: String
    platformInfo: String
    boatToShoreDist: Double
    estVisibilityDist: String
    fulcrumChildID: String
    fulcrumGrandchildID: String
    bankUndercut: String
  }

type RipPercentCanopyCoverIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    dataQF: String
    transectID: String
    coveredDensiometerPoints: String
    measurementDirection: String
    measurementLocation: String
    totalDensiometerPoints: String
    replicateNumber: Integer
    fulcrumVersion: String
    platformInfo: String
    canopyCoverPercent: Double
    fulcrumChildID: String
    fulcrumGrandchildID: String
  }

type RipPercentCompositionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    dataQF: String
    coveredDensiometerPoints: String
    measurementDirection: String
    measurementLocation: String
    totalDensiometerPoints: String
    replicateNumber: Integer
    namedLocation: String
    canopyCoverPercent: Double
  }

type RptBloodtestingIn
  {
    uid: String
    plotID: String
    remarks: String
    bloodSampleID: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    testedDate: Time
    testProtocolVersion: String
    testResult: String
    testPathogenName: String
    dataQF: String
    sampleCondition: String
    batchID: String
    bloodSampleBarcode: String
    bloodSampleFate: String
    agWellOpticalDensity: Double
    cAgWellOpticalDensity: Double
    conjugateDilution: String
    conjugateLot: String
    diluentDilution: String
    diluentLot: String
    internalLabBarcode: String
    internalLabFate: String
    negAbDilution: String
    negAbLot: String
    netOpticalDensity: Double
    plateLot: String
    posAbDilution: String
    posAbLot: String
    rawTestResult: String
    substrateLot: String
    substrateTime: Double
  }

type RptBloodtestingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    bloodSampleID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    setDate: Time
    collectDate: Time
    laboratoryName: String
    internalLabID: String
    testedDate: Time
    testProtocolVersion: String
    testResult: String
    testPathogenName: String
    dataQF: String
    sampleCondition: String
    batchID: String
    namedLocation: String
    bloodSampleBarcode: String
    agWellOpticalDensity: Double
    cAgWellOpticalDensity: Double
    conjugateDilution: String
    conjugateLot: String
    diluentDilution: String
    diluentLot: String
    internalLabBarcode: String
    negAbDilution: String
    negAbLot: String
    netOpticalDensity: Double
    plateLot: String
    posAbDilution: String
    posAbLot: String
    rawTestResult: String
    substrateLot: String
    substrateTime: Double
  }

type SAAT
  {
    heaterFlag: Integer
    pRTResistance: Double
    fanSpeed: Double
    turbineSpeed: Double
  }

type SAAT1min
  {
    tempSingleMean: Double
    tempSingleMinimum: Double
    tempSingleMaximum: Double
    tempSingleVariance: Double
    tempSingleNumPts: Double
    tempSingleExpUncert: Double
    tempSingleStdErMean: Double
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    flowQAQCRpt: String
    heaterQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    flowFailQM: Double
    flowPassQM: Double
    flowNAQM: Double
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type SAAT30min
  {
    tempSingleMean: Double
    tempSingleMinimum: Double
    tempSingleMaximum: Double
    tempSingleVariance: Double
    tempSingleNumPts: Double
    tempSingleExpUncert: Double
    tempSingleStdErMean: Double
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    flowFailQM: Double
    flowPassQM: Double
    flowNAQM: Double
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    finalQFSciRvw: String
  }

type SAATL0prime
  {
    heaterFlag: Integer
    pRTResistance: Double
    fanSpeed: Double
    turbineSpeed: Double
  }

type SbdBackgroundFieldCondDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    namedLocation: String
    backgroundFieldCondDataQF: String
    hoboSampleCode: String
    hoboSampleID: String
    stationToInjectionDistance: Double
  }

type SbdBackgroundFieldSaltDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    sampleCollected: String
    namedLocation: String
    backgroundFieldSaltDataQF: String
    saltBackgroundSampleCode: String
    saltBackgroundSampleID: String
    specificConductanceRep1: Double
    specificConductanceRep2: Double
    specificConductanceRep3: Double
    specificConductanceRep4: Double
    stationToInjectionDistance: Double
    incompleteExperimentQF: String
  }

type SbdConductivityFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    waterTemp: Double
    startDate: Time
    namedLocation: String
    fullRangeSpCondLinear: Double
    fullRangeSpCondNonlinear: Double
    lowRangeSpCondLinear: Double
    lowRangeSpCondNonlinear: Double
    recorduid: String
    dateTimeLogger: Time
    fullRangeHobo: Double
    hoboSampleCode: String
    hoboSampleID: String
    loggerDataQF: String
    lowRangeHobo: Double
    measurementNumber: String
  }

type SbdExternalLabDataSaltPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    receivedBy: String
    shipmentID: String
    analyte: String
    receivedDate: Time
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    sampleCondition: String
    namedLocation: String
    externalLabSaltDataQF: String
    finalConcentration: Double
    saltBelowDetectionQF: Integer
    saltSampleID: String
    saltCheckStandardPercentDev: Double
    saltCheckStandardQF: Integer
  }

type SbdFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    recordedBy: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    fieldDataQF: String
    namedLocation: String
    betweenLoggersDist: Double
    carboyVolume: Double
    constantRateTracerMass: Double
    dripEndTime: Time
    dripRateStart: Double
    dripRateEnd: Double
    dripStartTime: Time
    injectateSampleCode: String
    injectateSampleCollected: String
    injectateSampleID: String
    injectionType: String
    loggersAtSensorSets: String
    slugPourTime: Time
    slugTracerMass: Double
    incompleteExperimentQF: String
  }

type SbdPlateauMeasurementFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    waterTemp: Double
    startDate: Time
    namedLocation: String
    plateauFieldDataQF: String
    specificConductanceRep1: Double
    specificConductanceRep2: Double
    specificConductanceRep3: Double
    specificConductanceRep4: Double
    specificConductanceRep5: Double
  }

type SbdPlateauSampleFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    replicateNumber: Integer
    namedLocation: String
    plateauSampleFieldDataQF: String
    plateauCollectTime: Time
    saltTracerSampleCode: String
    saltTracerSampleID: String
    syringeID: String
    syringeCode: String
    incompleteExperimentQF: String
  }

type SCGW30Minute
  {
    startDateTime: Time
    endDateTime: Time
    groundwaterSpecCondExpUncert: Double
    groundwaterSpecCondMean: Double
    groundwaterSpecCondMinimum: Double
    groundwaterSpecCondMaximum: Double
    groundwaterSpecCondVariance: Double
    groundwaterSpecCondNumPts: Double
    groundwaterSpecCondStdErMean: Double
    gWatSCondRangeFailQM: Double
    gWatSCondRangePassQM: Double
    gWatSCondRangeNAQM: Double
    gWatSCondPersistenceFailQM: Double
    gWatSCondPersistencePassQM: Double
    gWatSCondPersistenceNAQM: Double
    gWatSCondStepFailQM: Double
    gWatSCondStepPassQM: Double
    gWatSCondStepNAQM: Double
    gWatSCondNullFailQM: Double
    gWatSCondNullPassQM: Double
    gWatSCondNullNAQM: Double
    gWatSCondGapFailQM: Double
    gWatSCondGapPassQM: Double
    gWatSCondGapNAQM: Double
    gWatSCondSpikeFailQM: Double
    gWatSCondSpikePassQM: Double
    gWatSCondSpikeNAQM: Double
    gWatSCondConsistencyFailQM: Double
    gWatSCondConsistencyPassQM: Double
    gWatSCondConsistencyNAQM: Double
    gWatSCondAlphaQM: Double
    gWatSCondBetaQM: Double
    gWatSCondFinalQF: String
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    gWatSCondFinalQFSciRvw: String
  }

type SCGW5Minute
  {
    endDateTime: Time
    groundwaterSpecCond: Double
    groundwaterSpecCondExpUncert: Double
    groundwaterSpecCondRangeQF: Integer
    groundwaterSpecCondPersistQF: Integer
    groundwaterSpecCondStepQF: Integer
    groundwaterSpecCondNullQF: Integer
    groundwaterSpecCondGapQF: Integer
    groundwaterSpecCondConsistQF: Integer
    groundwaterSpecCondSpikeQF: Integer
    validCalQF: Integer
    sciRvwQF: String
  }

type SCO2C
  {
    rawCO2: Double
    headspaceTemp: Double
    errorStatus: Double
  }

type SCO2C1Minute
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    startDateTime: Time
    endDateTime: Time
    soilCO2concentrationMean: Double
    soilCO2concentrationMinimum: Double
    soilCO2concentrationMaximum: Double
    soilCO2concentrationVariance: Double
    soilCO2concentrationNumPts: Double
    soilCO2concentrationExpUncert: Double
    soilCO2concentrationStdErMean: Double
    warmUpInstallationQAQCRpt: String
    sensorErrorStatusQAQCRpt: String
    temperatureSCO2QAQCRpt: String
    pressureRangeQAQCRpt: String
    warmUpInstallationFailQM: Double
    warmUpInstallationPassQM: Double
    warmUpInstallationNAQM: Double
    sensorErrorStatusFailQM: Double
    sensorErrorStatusPassQM: Double
    sensorErrorStatusNAQM: Double
    temperatureSCO2FailQM: Double
    temperatureSCO2PassQM: Double
    temperatureSCO2NAQM: Double
    pressureRangeFailQM: Double
    pressureRangePassQM: Double
    pressureRangeNAQM: Double
    soilCO2FinalQF: String
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type SCO2C30Minute
  {
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    startDateTime: Time
    endDateTime: Time
    soilCO2concentrationMean: Double
    soilCO2concentrationMinimum: Double
    soilCO2concentrationMaximum: Double
    soilCO2concentrationVariance: Double
    soilCO2concentrationNumPts: Double
    soilCO2concentrationExpUncert: Double
    soilCO2concentrationStdErMean: Double
    warmUpInstallationFailQM: Double
    warmUpInstallationPassQM: Double
    warmUpInstallationNAQM: Double
    sensorErrorStatusFailQM: Double
    sensorErrorStatusPassQM: Double
    sensorErrorStatusNAQM: Double
    temperatureSCO2FailQM: Double
    temperatureSCO2PassQM: Double
    temperatureSCO2NAQM: Double
    pressureRangeFailQM: Double
    pressureRangePassQM: Double
    pressureRangeNAQM: Double
    soilCO2FinalQF: String
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    finalQFSciRvw: String
  }

type ScsArchivedataIn
  {
    uid: String
    remarks: String
    identificationQualifier: String
    sex: String
    lifeStage: String
    scientificName: String
    reproductiveCondition: String
    sampleID: String
    identifiedBy: String
    scientificNameAuthorship: String
    startDate: Time
    endDate: Time
    archiveID: String
    archiveLaboratoryName: String
    archiveMedium: String
    locationID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleClass: String
    collectionCode: String
    archiveCode: String
    archiveGuid: String
    archiveSampleClass: String
    archiveStartDate: Time
    storageTemperature: String
  }

type ScsShipmentCreationIn
  {
    uid: String
    remarks: String
    taxonID: String
    sampleID: String
    sampleType: String
    individualCount: String
    sampleVolume: Double
    startDate: Time
    endDate: Time
    shipDate: Time
    shipmentID: String
    numVialsSampleID: String
    senderID: String
    locationID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleClass: String
    preservativeType: String
    preservativeVolume: Double
    namedLocation: String
    sampleMass: Double
    wellCoordinates: String
    analysisType: String
    containerID: String
    containerMass: Double
    destinationFacility: String
    filterVolume: Double
    holdingTime: Time
    quarantineStatus: String
    sentTo: String
    shipmentMethod: String
    shipmentService: String
    shippedFrom: String
    trackingNumber: String
  }

type ScsShipmentVerificationIn
  {
    uid: String
    remarks: String
    sampleID: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    coolerTemp: Double
    shipmentReceivedDate: Time
    receivedBy: String
    shipmentID: String
    shipmentCondition: String
    deprecatedVialID: String
    locationID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleClass: String
    sampleCondition: String
    acceptedForAnalysis: String
    sampleReceived: String
  }

type SdgExternalLabDataIn
  {
    uid: String
    sampleID: String
    collectDate: Time
    stationID: String
    startDate: Time
    laboratoryName: String
    internalLabID: String
    shipmentReceivedDate: Time
    receivedBy: String
    shipmentID: String
    externalRemarks: String
    analysisDate: Time
    internalSampleName: String
    internalLabFileName: String
    concentrationCH4: Double
    concentrationCO2: Double
    concentrationN2O: Double
    volumeGasAnalyzed: Double
    runDetectionLimitCH4: Double
    runDetectionLimitCO2: Double
    runDetectionLimitN2O: Double
    precisionCH4: Double
    precisionCO2: Double
    precisionN2O: Double
    gasStandardAccuracy: Double
    analyzedBy: String
    sampleFate: String
    sampleCode: String
    sampleCondition: String
    sdgExternalLabDataQF: String
    gasCheckStandardPercentDev: Double
    gasCheckStandardQF: Integer
  }

type SdgExternalLabDataPub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    shipmentReceivedDate: Time
    receivedBy: String
    shipmentID: String
    externalRemarks: String
    analysisDate: Time
    internalSampleName: String
    internalLabFileName: String
    concentrationCH4: Double
    concentrationCO2: Double
    concentrationN2O: Double
    volumeGasAnalyzed: Double
    runDetectionLimitCH4: Double
    runDetectionLimitCO2: Double
    runDetectionLimitN2O: Double
    precisionCH4: Double
    precisionCO2: Double
    precisionN2O: Double
    gasStandardAccuracy: Double
    analyzedBy: String
    sampleCode: String
    sampleCondition: String
    namedLocation: String
    sdgExternalLabDataQF: String
    gasCheckStandardPercentDev: Double
    gasCheckStandardQF: Integer
  }

type SdgExternalLabSummaryDataIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    methodDetectionLimit: Double
    precision: Double
    measurementUncertainty: Double
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    dataQF: String
    measurementUncertaintyUnits: String
    methodDetectionLimitUnits: String
    precisionUnits: String
  }

type SdgExternalLabSummaryDataPub
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    methodDetectionLimit: Double
    precision: Double
    measurementUncertainty: Double
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    dataQF: String
    measurementUncertaintyUnits: String
    methodDetectionLimitUnits: String
    precisionUnits: String
  }

type SdgFieldDataIn
  {
    uid: String
    collectDate: Time
    stationID: String
    startDate: Time
    parentSampleID: String
    waterSampleID: String
    parentSampleFate: String
    parentSampleCode: String
    fulcrumVersion: String
    platformInfo: String
    sdgFieldDataQF: String
    waterSampleCode: String
    waterSampleFate: String
  }

type SdgFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    startDate: Time
    parentSampleID: String
    waterSampleID: String
    parentSampleCode: String
    namedLocation: String
    sdgFieldDataQF: String
    waterSampleCode: String
  }

type SdgFieldDataAirIn
  {
    uid: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    referenceAirSampleID: String
    airVolumeSample: Double
    lowAirVolumeQF: Integer
    fulcrumVersion: String
    platformInfo: String
    referenceAirSampleCode: String
    referenceAirSampleFate: String
    sdgAirDataQF: String
  }

type SdgFieldDataAirPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    startDate: Time
    referenceAirSampleID: String
    airVolumeSample: Double
    lowAirVolumeQF: Integer
    namedLocation: String
    referenceAirSampleCode: String
    sdgAirDataQF: String
  }

type SdgFieldDataProcIn
  {
    uid: String
    remarks: String
    collectDate: Time
    stationID: String
    processedDate: Time
    startDate: Time
    equilibratedAirSampleID: String
    referenceAirSampleID: String
    storageWaterTemp: Double
    ptBarometricPressure: Double
    waterVolumeSyringe: Double
    gasVolumeSyringe: Double
    gasVolumeSample: Double
    lowGasVolumeQF: Integer
    waterSampleID: String
    fulcrumVersion: String
    platformInfo: String
    equilibratedAirSampleCode: String
    equilibratedAirSampleCond: String
    equilibratedAirSampleFate: String
    referenceAirSampleCode: String
    referenceAirSampleCond: String
    referenceAirSampleFate: String
    sdgProcessDataQF: String
    waterSampleCode: String
    waterSampleFate: String
  }

type SdgFieldDataProcPub
  {
    uid: String
    domainID: String
    siteID: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    equilibratedAirSampleID: String
    referenceAirSampleID: String
    storageWaterTemp: Double
    ptBarometricPressure: Double
    waterVolumeSyringe: Double
    gasVolumeSyringe: Double
    gasVolumeSample: Double
    lowGasVolumeQF: Integer
    waterSampleID: String
    namedLocation: String
    equilibratedAirSampleCode: String
    referenceAirSampleCode: String
    sdgProcessDataQF: String
    waterSampleCode: String
  }

type SdgFieldSuperParentPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    waterTemp: Double
    specificConductance: Double
    aCollectedBy: String
    bCollectedBy: String
    altLocation: String
    altLongitude: Double
    altLatitude: Double
    maxDepth: Double
    startDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    samplerType: String
    parentSampleID: String
    lakeSampleDepth1: Double
    lakeSampleDepth2: Double
    sdgSamplingProtocolVersion: String
    aquaticSiteType: String
    parentSampleCode: String
    fieldDataQF: String
    samplingImpractical: String
    namedLocation: String
    additionalCoordUncertainty: Double
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    measurementDepth: Double
  }

type SdrcGaugeDischargeMeasPub
  {
    uid: String
    domainID: String
    siteID: String
    eventID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    gaugeHeight: Double
    gaugeHeightOffset: Double
    gaugeHeightUnc: Double
    includedInRatingCurve: String
    l1DataQF: String
    recalculatedL1QF: String
    streamDischarge: Double
    streamDischargeUnc: Double
  }

type SdrcPosteriorParametersPub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    curveID: String
    controlNumber: Integer
    maxPostActivationStage: Double
    maxPostCoefficient: Double
    maxPostExponent: Double
    maxPostGamma1: Double
    maxPostGamma2: Double
    maxPostZeroFlowOffset: Double
    stdDevActivationStage: Double
    stdDevCoefficient: Double
    stdDevExponent: Double
    stdDevGamma1: Double
    stdDevGamma2: Double
    stdDevZeroFlowOffset: Double
    curveEndDate: Time
    curveStartDate: Time
  }

type SdrcResultsResidualsPub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    curveID: String
    gaugeEventID: String
    x1observed: Double
    x1true: Double
    y1observed: Double
    y1residual: Double
    y1simulated: Double
    y1stdresidual: Double
    y1unbiased: Double
    curveEndDate: Time
    curveStartDate: Time
  }

type SdrcSampledParametersPub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    curveID: String
    controlNumber: Integer
    spagActivationStage: Double
    spagCoefficient: Double
    spagExponent: Double
    spagGamma1: Double
    spagGamma2: Double
    spagLogPost: Double
    spagZeroFlowOffset: Double
    curveEndDate: Time
    curveStartDate: Time
    parameterNumber: Integer
  }

type SdrcStageDischargeCurveInfoPub
  {
    uid: String
    domainID: String
    siteID: String
    startDate: Time
    endDate: Time
    dataQF: String
    namedLocation: String
    curveID: String
    allEventID: String
    maxQ: Double
    maxStage: Double
    minQ: Double
    minStage: Double
    waterYear: String
    curveEndDate: Time
    curveStartDate: Time
  }

type SECPRE1min
  {
    secPrecipBulk: Double
    secPrecipExpUncert: Double
    secPrecipHeaterQAQCRpt: String
    secPrecipHeater0QM: Double
    secPrecipHeater1QM: Double
    secPrecipHeater2QM: Double
    secPrecipHeater3QM: Double
    secPrecipRangeQF: Integer
    startDateTime: Time
    endDateTime: Time
    secPrecipSciRvwQF: String
    secPrecipValidCalQF: Integer
  }

type SECPRE30min
  {
    secPrecipBulk: Double
    secPrecipExpUncert: Double
    secPrecipHeater0QM: Double
    secPrecipHeater1QM: Double
    secPrecipHeater2QM: Double
    secPrecipHeater3QM: Double
    secPrecipRangeQF: Integer
    startDateTime: Time
    endDateTime: Time
    secPrecipSciRvwQF: String
    secPrecipValidCalQF: Integer
  }

type SHF
  {
    sHFVoltage: Double
    sHFCalHeaterFlag: Double
    curVoltage: Double
  }

type SHF1min
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    startDateTime: Time
    endDateTime: Time
    sHFCalHeaterFlag: Double
    sHFMean: Double
    sHFMinimum: Double
    sHFMaximum: Double
    sHFVariance: Double
    sHFNumPts: Double
    sHFExpUncert: Double
    sHFStdErMean: Double
    sHFCalHeaterQF: Integer
    sHFCalPeriodFlag: Double
    sHFInSituCorFactor: Double
    sHFInSituCorQF: Integer
    sHFCalHeaterOnMetric: Double
    sHFCalHeaterOffMetric: Double
    sHFCalHeaterFailQM: Double
    sHFCalHeaterPassQM: Double
    sHFCalHeaterNAQM: Double
    sHFCalPeriodOnMetric: Double
    sHFCalPeriodOffMetric: Double
    sHFInSituCorFailQM: Double
    sHFInSituCorPassQM: Double
    sHFInSituCorNAQM: Double
    finalQFSciRvw: String
  }

type SHF30min
  {
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    startDateTime: Time
    endDateTime: Time
    sHFCalHeaterFlag: Double
    sHFMean: Double
    sHFMinimum: Double
    sHFMaximum: Double
    sHFVariance: Double
    sHFNumPts: Double
    sHFExpUncert: Double
    sHFStdErMean: Double
    sHFCalHeaterQF: Integer
    sHFCalPeriodFlag: Double
    sHFInSituCorQF: Integer
    sHFCalHeaterOnMetric: Double
    sHFCalHeaterOffMetric: Double
    sHFCalHeaterFailQM: Double
    sHFCalHeaterPassQM: Double
    sHFCalHeaterNAQM: Double
    sHFCalPeriodOnMetric: Double
    sHFCalPeriodOffMetric: Double
    sHFInSituCorFailQM: Double
    sHFInSituCorPassQM: Double
    sHFInSituCorNAQM: Double
    finalQFSciRvw: String
  }

type SimEventDataIn
  {
    uid: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    scientificName: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    locationID: String
    dataQF: String
    fulcrumVersion: String
    platformInfo: String
    biomassRemoval: String
    eventType: String
    fireSeverity: String
    maxQuantity: Double
    maxStartDate: Time
    methodTypeChoice: String
    minEndDate: Time
    minQuantity: Double
    name: String
    otherScientificName: String
    quantityUnit: String
    reporterType: String
  }

type SimEventDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    scientificName: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    locationID: String
    dataQF: String
    namedLocation: String
    fulcrumVersion: String
    platformInfo: String
    biomassRemoval: String
    eventType: String
    fireSeverity: String
    maxQuantity: Double
    maxStartDate: Time
    methodTypeChoice: String
    minEndDate: Time
    minQuantity: Double
    name: String
    otherScientificName: String
    quantityUnit: String
    reporterType: String
  }

type SLRNR
  {
    sensorResistance: Double
    inNetRadPyranometer: Double
    outNetRadPyranometer: Double
    inNetRadPyrgeometer: Double
    outNetRadPyrgeometer: Double
    heaterFlag: Integer
  }

type SLRNR1min
  {
    heaterQAQCRpt: String
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    inSWMean: Double
    inSWMinimum: Double
    inSWMaximum: Double
    inSWVariance: Double
    inSWNumPts: Double
    inSWExpUncert: Double
    inSWStdErMean: Double
    inSWRangeQAQCRpt: String
    inSWPersistenceQAQCRpt: String
    inSWStepQAQCRpt: String
    inSWNullQAQCRpt: String
    inSWGapQAQCRpt: String
    inSWConsistencyQAQCRpt: String
    inSWSpikeQAQCRpt: String
    inSWAlphaQAQCRpt: String
    inSWBetaQAQCRpt: String
    inSWRangeFailQM: Double
    inSWRangePassQM: Double
    inSWRangeNAQM: Double
    inSWPersistenceFailQM: Double
    inSWPersistencePassQM: Double
    inSWPersistenceNAQM: Double
    inSWStepFailQM: Double
    inSWStepPassQM: Double
    inSWStepNAQM: Double
    inSWNullFailQM: Double
    inSWNullPassQM: Double
    inSWNullNAQM: Double
    inSWGapFailQM: Double
    inSWGapPassQM: Double
    inSWGapNAQM: Double
    inSWSpikeFailQM: Double
    inSWSpikePassQM: Double
    inSWSpikeNAQM: Double
    inSWConsistencyFailQM: Double
    inSWConsistencyPassQM: Double
    inSWConsistencyNAQM: Double
    inSWAlphaQM: Double
    inSWBetaQM: Double
    inSWFinalQF: String
    outSWMean: Double
    outSWMinimum: Double
    outSWMaximum: Double
    outSWVariance: Double
    outSWNumPts: Double
    outSWExpUncert: Double
    outSWStdErMean: Double
    outSWRangeQAQCRpt: String
    outSWPersistenceQAQCRpt: String
    outSWStepQAQCRpt: String
    outSWNullQAQCRpt: String
    outSWGapQAQCRpt: String
    outSWConsistencyQAQCRpt: String
    outSWSpikeQAQCRpt: String
    outSWAlphaQAQCRpt: String
    outSWBetaQAQCRpt: String
    outSWRangeFailQM: Double
    outSWRangePassQM: Double
    outSWRangeNAQM: Double
    outSWPersistenceFailQM: Double
    outSWPersistencePassQM: Double
    outSWPersistenceNAQM: Double
    outSWStepFailQM: Double
    outSWStepPassQM: Double
    outSWStepNAQM: Double
    outSWNullFailQM: Double
    outSWNullPassQM: Double
    outSWNullNAQM: Double
    outSWGapFailQM: Double
    outSWGapPassQM: Double
    outSWGapNAQM: Double
    outSWSpikeFailQM: Double
    outSWSpikePassQM: Double
    outSWSpikeNAQM: Double
    outSWConsistencyFailQM: Double
    outSWConsistencyPassQM: Double
    outSWConsistencyNAQM: Double
    outSWAlphaQM: Double
    outSWBetaQM: Double
    outSWFinalQF: String
    inLWMean: Double
    inLWMinimum: Double
    inLWMaximum: Double
    inLWVariance: Double
    inLWNumPts: Double
    inLWExpUncert: Double
    inLWStdErMean: Double
    inLWRangeQAQCRpt: String
    inLWPersistenceQAQCRpt: String
    inLWStepQAQCRpt: String
    inLWNullQAQCRpt: String
    inLWGapQAQCRpt: String
    inLWConsistencyQAQCRpt: String
    inLWSpikeQAQCRpt: String
    inLWAlphaQAQCRpt: String
    inLWBetaQAQCRpt: String
    inLWRangeFailQM: Double
    inLWRangePassQM: Double
    inLWRangeNAQM: Double
    inLWPersistenceFailQM: Double
    inLWPersistencePassQM: Double
    inLWPersistenceNAQM: Double
    inLWStepFailQM: Double
    inLWStepPassQM: Double
    inLWStepNAQM: Double
    inLWNullFailQM: Double
    inLWNullPassQM: Double
    inLWNullNAQM: Double
    inLWGapFailQM: Double
    inLWGapPassQM: Double
    inLWGapNAQM: Double
    inLWSpikeFailQM: Double
    inLWSpikePassQM: Double
    inLWSpikeNAQM: Double
    inLWConsistencyFailQM: Double
    inLWConsistencyPassQM: Double
    inLWConsistencyNAQM: Double
    inLWAlphaQM: Double
    inLWBetaQM: Double
    inLWFinalQF: String
    outLWMean: Double
    outLWMinimum: Double
    outLWMaximum: Double
    outLWVariance: Double
    outLWNumPts: Double
    outLWExpUncert: Double
    outLWStdErMean: Double
    outLWRangeQAQCRpt: String
    outLWPersistenceQAQCRpt: String
    outLWStepQAQCRpt: String
    outLWNullQAQCRpt: String
    outLWGapQAQCRpt: String
    outLWConsistencyQAQCRpt: String
    outLWSpikeQAQCRpt: String
    outLWAlphaQAQCRpt: String
    outLWBetaQAQCRpt: String
    outLWRangeFailQM: Double
    outLWRangePassQM: Double
    outLWRangeNAQM: Double
    outLWPersistenceFailQM: Double
    outLWPersistencePassQM: Double
    outLWPersistenceNAQM: Double
    outLWStepFailQM: Double
    outLWStepPassQM: Double
    outLWStepNAQM: Double
    outLWNullFailQM: Double
    outLWNullPassQM: Double
    outLWNullNAQM: Double
    outLWGapFailQM: Double
    outLWGapPassQM: Double
    outLWGapNAQM: Double
    outLWSpikeFailQM: Double
    outLWSpikePassQM: Double
    outLWSpikeNAQM: Double
    outLWConsistencyFailQM: Double
    outLWConsistencyPassQM: Double
    outLWConsistencyNAQM: Double
    outLWAlphaQM: Double
    outLWBetaQM: Double
    outLWFinalQF: String
    startDateTime: Time
    endDateTime: Time
    inLWFinalQFSciRvw: String
    inSWFinalQFSciRvw: String
    outLWFinalQFSciRvw: String
    outSWFinalQFSciRvw: String
    inLWValidCalQAQCRpt: String
    inSWValidCalQAQCRpt: String
    outLWValidCalQAQCRpt: String
    outSWValidCalQAQCRpt: String
    inLWValidCalFailQM: Double
    inLWValidCalNAQM: Double
    inLWValidCalPassQM: Double
    inSWValidCalFailQM: Double
    inSWValidCalNAQM: Double
    inSWValidCalPassQM: Double
    outLWValidCalFailQM: Double
    outLWValidCalNAQM: Double
    outLWValidCalPassQM: Double
    outSWValidCalFailQM: Double
    outSWValidCalNAQM: Double
    outSWValidCalPassQM: Double
  }

type SLRNR30min
  {
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    inSWMean: Double
    inSWMinimum: Double
    inSWMaximum: Double
    inSWVariance: Double
    inSWNumPts: Double
    inSWExpUncert: Double
    inSWStdErMean: Double
    inSWRangeFailQM: Double
    inSWRangePassQM: Double
    inSWRangeNAQM: Double
    inSWPersistenceFailQM: Double
    inSWPersistencePassQM: Double
    inSWPersistenceNAQM: Double
    inSWStepFailQM: Double
    inSWStepPassQM: Double
    inSWStepNAQM: Double
    inSWNullFailQM: Double
    inSWNullPassQM: Double
    inSWNullNAQM: Double
    inSWGapFailQM: Double
    inSWGapPassQM: Double
    inSWGapNAQM: Double
    inSWSpikeFailQM: Double
    inSWSpikePassQM: Double
    inSWSpikeNAQM: Double
    inSWConsistencyFailQM: Double
    inSWConsistencyPassQM: Double
    inSWConsistencyNAQM: Double
    inSWAlphaQM: Double
    inSWBetaQM: Double
    inSWFinalQF: String
    outSWMean: Double
    outSWMinimum: Double
    outSWMaximum: Double
    outSWVariance: Double
    outSWNumPts: Double
    outSWExpUncert: Double
    outSWStdErMean: Double
    outSWRangeFailQM: Double
    outSWRangePassQM: Double
    outSWRangeNAQM: Double
    outSWPersistenceFailQM: Double
    outSWPersistencePassQM: Double
    outSWPersistenceNAQM: Double
    outSWStepFailQM: Double
    outSWStepPassQM: Double
    outSWStepNAQM: Double
    outSWNullFailQM: Double
    outSWNullPassQM: Double
    outSWNullNAQM: Double
    outSWGapFailQM: Double
    outSWGapPassQM: Double
    outSWGapNAQM: Double
    outSWSpikeFailQM: Double
    outSWSpikePassQM: Double
    outSWSpikeNAQM: Double
    outSWConsistencyFailQM: Double
    outSWConsistencyPassQM: Double
    outSWConsistencyNAQM: Double
    outSWAlphaQM: Double
    outSWBetaQM: Double
    outSWFinalQF: String
    inLWMean: Double
    inLWMinimum: Double
    inLWMaximum: Double
    inLWVariance: Double
    inLWNumPts: Double
    inLWExpUncert: Double
    inLWStdErMean: Double
    inLWRangeFailQM: Double
    inLWRangePassQM: Double
    inLWRangeNAQM: Double
    inLWPersistenceFailQM: Double
    inLWPersistencePassQM: Double
    inLWPersistenceNAQM: Double
    inLWStepFailQM: Double
    inLWStepPassQM: Double
    inLWStepNAQM: Double
    inLWNullFailQM: Double
    inLWNullPassQM: Double
    inLWNullNAQM: Double
    inLWGapFailQM: Double
    inLWGapPassQM: Double
    inLWGapNAQM: Double
    inLWSpikeFailQM: Double
    inLWSpikePassQM: Double
    inLWSpikeNAQM: Double
    inLWConsistencyFailQM: Double
    inLWConsistencyPassQM: Double
    inLWConsistencyNAQM: Double
    inLWAlphaQM: Double
    inLWBetaQM: Double
    inLWFinalQF: String
    outLWMean: Double
    outLWMinimum: Double
    outLWMaximum: Double
    outLWVariance: Double
    outLWNumPts: Double
    outLWExpUncert: Double
    outLWStdErMean: Double
    outLWRangeFailQM: Double
    outLWRangePassQM: Double
    outLWRangeNAQM: Double
    outLWPersistenceFailQM: Double
    outLWPersistencePassQM: Double
    outLWPersistenceNAQM: Double
    outLWStepFailQM: Double
    outLWStepPassQM: Double
    outLWStepNAQM: Double
    outLWNullFailQM: Double
    outLWNullPassQM: Double
    outLWNullNAQM: Double
    outLWGapFailQM: Double
    outLWGapPassQM: Double
    outLWGapNAQM: Double
    outLWSpikeFailQM: Double
    outLWSpikePassQM: Double
    outLWSpikeNAQM: Double
    outLWConsistencyFailQM: Double
    outLWConsistencyPassQM: Double
    outLWConsistencyNAQM: Double
    outLWAlphaQM: Double
    outLWBetaQM: Double
    outLWFinalQF: String
    startDateTime: Time
    endDateTime: Time
    inLWFinalQFSciRvw: String
    inSWFinalQFSciRvw: String
    outLWFinalQFSciRvw: String
    outSWFinalQFSciRvw: String
    inLWValidCalFailQM: Double
    inLWValidCalNAQM: Double
    inLWValidCalPassQM: Double
    inSWValidCalFailQM: Double
    inSWValidCalNAQM: Double
    inSWValidCalPassQM: Double
    outLWValidCalFailQM: Double
    outLWValidCalNAQM: Double
    outLWValidCalPassQM: Double
    outSWValidCalFailQM: Double
    outSWValidCalNAQM: Double
    outSWValidCalPassQM: Double
  }

type SLRNRB1min
  {
    heaterQAQCRpt: String
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    inSWMean: Double
    inSWMinimum: Double
    inSWMaximum: Double
    inSWVariance: Double
    inSWNumPts: Double
    inSWExpUncert: Double
    inSWStdErMean: Double
    inSWRangeQAQCRpt: String
    inSWPersistenceQAQCRpt: String
    inSWStepQAQCRpt: String
    inSWNullQAQCRpt: String
    inSWGapQAQCRpt: String
    inSWConsistencyQAQCRpt: String
    inSWSpikeQAQCRpt: String
    inSWAlphaQAQCRpt: String
    inSWBetaQAQCRpt: String
    inSWRangeFailQM: Double
    inSWRangePassQM: Double
    inSWRangeNAQM: Double
    inSWPersistenceFailQM: Double
    inSWPersistencePassQM: Double
    inSWPersistenceNAQM: Double
    inSWStepFailQM: Double
    inSWStepPassQM: Double
    inSWStepNAQM: Double
    inSWNullFailQM: Double
    inSWNullPassQM: Double
    inSWNullNAQM: Double
    inSWGapFailQM: Double
    inSWGapPassQM: Double
    inSWGapNAQM: Double
    inSWSpikeFailQM: Double
    inSWSpikePassQM: Double
    inSWSpikeNAQM: Double
    inSWConsistencyFailQM: Double
    inSWConsistencyPassQM: Double
    inSWConsistencyNAQM: Double
    inSWAlphaQM: Double
    inSWBetaQM: Double
    inSWFinalQF: String
    outSWMean: Double
    outSWMinimum: Double
    outSWMaximum: Double
    outSWVariance: Double
    outSWNumPts: Double
    outSWExpUncert: Double
    outSWStdErMean: Double
    outSWRangeQAQCRpt: String
    outSWPersistenceQAQCRpt: String
    outSWStepQAQCRpt: String
    outSWNullQAQCRpt: String
    outSWGapQAQCRpt: String
    outSWConsistencyQAQCRpt: String
    outSWSpikeQAQCRpt: String
    outSWAlphaQAQCRpt: String
    outSWBetaQAQCRpt: String
    outSWRangeFailQM: Double
    outSWRangePassQM: Double
    outSWRangeNAQM: Double
    outSWPersistenceFailQM: Double
    outSWPersistencePassQM: Double
    outSWPersistenceNAQM: Double
    outSWStepFailQM: Double
    outSWStepPassQM: Double
    outSWStepNAQM: Double
    outSWNullFailQM: Double
    outSWNullPassQM: Double
    outSWNullNAQM: Double
    outSWGapFailQM: Double
    outSWGapPassQM: Double
    outSWGapNAQM: Double
    outSWSpikeFailQM: Double
    outSWSpikePassQM: Double
    outSWSpikeNAQM: Double
    outSWConsistencyFailQM: Double
    outSWConsistencyPassQM: Double
    outSWConsistencyNAQM: Double
    outSWAlphaQM: Double
    outSWBetaQM: Double
    outSWFinalQF: String
    inLWMean: Double
    inLWMinimum: Double
    inLWMaximum: Double
    inLWVariance: Double
    inLWNumPts: Double
    inLWExpUncert: Double
    inLWStdErMean: Double
    inLWRangeQAQCRpt: String
    inLWPersistenceQAQCRpt: String
    inLWStepQAQCRpt: String
    inLWNullQAQCRpt: String
    inLWGapQAQCRpt: String
    inLWConsistencyQAQCRpt: String
    inLWSpikeQAQCRpt: String
    inLWAlphaQAQCRpt: String
    inLWBetaQAQCRpt: String
    inLWRangeFailQM: Double
    inLWRangePassQM: Double
    inLWRangeNAQM: Double
    inLWPersistenceFailQM: Double
    inLWPersistencePassQM: Double
    inLWPersistenceNAQM: Double
    inLWStepFailQM: Double
    inLWStepPassQM: Double
    inLWStepNAQM: Double
    inLWNullFailQM: Double
    inLWNullPassQM: Double
    inLWNullNAQM: Double
    inLWGapFailQM: Double
    inLWGapPassQM: Double
    inLWGapNAQM: Double
    inLWSpikeFailQM: Double
    inLWSpikePassQM: Double
    inLWSpikeNAQM: Double
    inLWConsistencyFailQM: Double
    inLWConsistencyPassQM: Double
    inLWConsistencyNAQM: Double
    inLWAlphaQM: Double
    inLWBetaQM: Double
    inLWFinalQF: String
    outLWMean: Double
    outLWMinimum: Double
    outLWMaximum: Double
    outLWVariance: Double
    outLWNumPts: Double
    outLWExpUncert: Double
    outLWStdErMean: Double
    outLWRangeQAQCRpt: String
    outLWPersistenceQAQCRpt: String
    outLWStepQAQCRpt: String
    outLWNullQAQCRpt: String
    outLWGapQAQCRpt: String
    outLWConsistencyQAQCRpt: String
    outLWSpikeQAQCRpt: String
    outLWAlphaQAQCRpt: String
    outLWBetaQAQCRpt: String
    outLWRangeFailQM: Double
    outLWRangePassQM: Double
    outLWRangeNAQM: Double
    outLWPersistenceFailQM: Double
    outLWPersistencePassQM: Double
    outLWPersistenceNAQM: Double
    outLWStepFailQM: Double
    outLWStepPassQM: Double
    outLWStepNAQM: Double
    outLWNullFailQM: Double
    outLWNullPassQM: Double
    outLWNullNAQM: Double
    outLWGapFailQM: Double
    outLWGapPassQM: Double
    outLWGapNAQM: Double
    outLWSpikeFailQM: Double
    outLWSpikePassQM: Double
    outLWSpikeNAQM: Double
    outLWConsistencyFailQM: Double
    outLWConsistencyPassQM: Double
    outLWConsistencyNAQM: Double
    outLWAlphaQM: Double
    outLWBetaQM: Double
    outLWFinalQF: String
    startDateTime: Time
    endDateTime: Time
    inLWFinalQFSciRvw: String
    inSWFinalQFSciRvw: String
    outLWFinalQFSciRvw: String
    outSWFinalQFSciRvw: String
    inLWValidCalQAQCRpt: String
    inSWValidCalQAQCRpt: String
    outLWValidCalQAQCRpt: String
    outSWValidCalQAQCRpt: String
    inLWValidCalFailQM: Double
    inLWValidCalNAQM: Double
    inLWValidCalPassQM: Double
    inSWValidCalFailQM: Double
    inSWValidCalNAQM: Double
    inSWValidCalPassQM: Double
    outLWValidCalFailQM: Double
    outLWValidCalNAQM: Double
    outLWValidCalPassQM: Double
    outSWValidCalFailQM: Double
    outSWValidCalNAQM: Double
    outSWValidCalPassQM: Double
  }

type SLRNRB30min
  {
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    inSWMean: Double
    inSWMinimum: Double
    inSWMaximum: Double
    inSWVariance: Double
    inSWNumPts: Double
    inSWExpUncert: Double
    inSWStdErMean: Double
    inSWRangeFailQM: Double
    inSWRangePassQM: Double
    inSWRangeNAQM: Double
    inSWPersistenceFailQM: Double
    inSWPersistencePassQM: Double
    inSWPersistenceNAQM: Double
    inSWStepFailQM: Double
    inSWStepPassQM: Double
    inSWStepNAQM: Double
    inSWNullFailQM: Double
    inSWNullPassQM: Double
    inSWNullNAQM: Double
    inSWGapFailQM: Double
    inSWGapPassQM: Double
    inSWGapNAQM: Double
    inSWSpikeFailQM: Double
    inSWSpikePassQM: Double
    inSWSpikeNAQM: Double
    inSWConsistencyFailQM: Double
    inSWConsistencyPassQM: Double
    inSWConsistencyNAQM: Double
    inSWAlphaQM: Double
    inSWBetaQM: Double
    inSWFinalQF: String
    outSWMean: Double
    outSWMinimum: Double
    outSWMaximum: Double
    outSWVariance: Double
    outSWNumPts: Double
    outSWExpUncert: Double
    outSWStdErMean: Double
    outSWRangeFailQM: Double
    outSWRangePassQM: Double
    outSWRangeNAQM: Double
    outSWPersistenceFailQM: Double
    outSWPersistencePassQM: Double
    outSWPersistenceNAQM: Double
    outSWStepFailQM: Double
    outSWStepPassQM: Double
    outSWStepNAQM: Double
    outSWNullFailQM: Double
    outSWNullPassQM: Double
    outSWNullNAQM: Double
    outSWGapFailQM: Double
    outSWGapPassQM: Double
    outSWGapNAQM: Double
    outSWSpikeFailQM: Double
    outSWSpikePassQM: Double
    outSWSpikeNAQM: Double
    outSWConsistencyFailQM: Double
    outSWConsistencyPassQM: Double
    outSWConsistencyNAQM: Double
    outSWAlphaQM: Double
    outSWBetaQM: Double
    outSWFinalQF: String
    inLWMean: Double
    inLWMinimum: Double
    inLWMaximum: Double
    inLWVariance: Double
    inLWNumPts: Double
    inLWExpUncert: Double
    inLWStdErMean: Double
    inLWRangeFailQM: Double
    inLWRangePassQM: Double
    inLWRangeNAQM: Double
    inLWPersistenceFailQM: Double
    inLWPersistencePassQM: Double
    inLWPersistenceNAQM: Double
    inLWStepFailQM: Double
    inLWStepPassQM: Double
    inLWStepNAQM: Double
    inLWNullFailQM: Double
    inLWNullPassQM: Double
    inLWNullNAQM: Double
    inLWGapFailQM: Double
    inLWGapPassQM: Double
    inLWGapNAQM: Double
    inLWSpikeFailQM: Double
    inLWSpikePassQM: Double
    inLWSpikeNAQM: Double
    inLWConsistencyFailQM: Double
    inLWConsistencyPassQM: Double
    inLWConsistencyNAQM: Double
    inLWAlphaQM: Double
    inLWBetaQM: Double
    inLWFinalQF: String
    outLWMean: Double
    outLWMinimum: Double
    outLWMaximum: Double
    outLWVariance: Double
    outLWNumPts: Double
    outLWExpUncert: Double
    outLWStdErMean: Double
    outLWRangeFailQM: Double
    outLWRangePassQM: Double
    outLWRangeNAQM: Double
    outLWPersistenceFailQM: Double
    outLWPersistencePassQM: Double
    outLWPersistenceNAQM: Double
    outLWStepFailQM: Double
    outLWStepPassQM: Double
    outLWStepNAQM: Double
    outLWNullFailQM: Double
    outLWNullPassQM: Double
    outLWNullNAQM: Double
    outLWGapFailQM: Double
    outLWGapPassQM: Double
    outLWGapNAQM: Double
    outLWSpikeFailQM: Double
    outLWSpikePassQM: Double
    outLWSpikeNAQM: Double
    outLWConsistencyFailQM: Double
    outLWConsistencyPassQM: Double
    outLWConsistencyNAQM: Double
    outLWAlphaQM: Double
    outLWBetaQM: Double
    outLWFinalQF: String
    startDateTime: Time
    endDateTime: Time
    inLWFinalQFSciRvw: String
    inSWFinalQFSciRvw: String
    outLWFinalQFSciRvw: String
    outSWFinalQFSciRvw: String
    inLWValidCalFailQM: Double
    inLWValidCalNAQM: Double
    inLWValidCalPassQM: Double
    inSWValidCalFailQM: Double
    inSWValidCalNAQM: Double
    inSWValidCalPassQM: Double
    outLWValidCalFailQM: Double
    outLWValidCalNAQM: Double
    outLWValidCalPassQM: Double
    outSWValidCalFailQM: Double
    outSWValidCalNAQM: Double
    outSWValidCalPassQM: Double
  }

type SlsBgcSubsamplingIn
  {
    uid: String
    plotID: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    sampleFate: String
    sampleCode: String
    ovenStartDate: Time
    ovenEndDate: Time
    sampleCondition: String
    bgcArchiveCode: String
    bgcArchiveFate: String
    bgcArchiveID: String
    cnSampleCode: String
    cnSampleFate: String
    cnSampleID: String
    horizon: String
    processedBy: String
    bgcDataQF: String
    bgcRemarks: String
  }

type SlsBgcSubsamplingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    sampleCode: String
    ovenStartDate: Time
    ovenEndDate: Time
    sampleCondition: String
    bgcArchiveCode: String
    bgcArchiveID: String
    cnSampleCode: String
    cnSampleID: String
    horizon: String
    processedBy: String
    namedLocation: String
    bgcDataQF: String
    bgcRemarks: String
  }

type SlsMetagenomicsPoolingIn
  {
    uid: String
    plotID: String
    remarks: String
    recordedBy: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    sampleCondition: String
    compositeSampleCode: String
    compositeSampleFate: String
    compositeSampleID: String
    horizon: String
    processedBy: String
    toCompositeBarcodeList: String
    toCompositeFateList: String
    toCompositeSampleIDList: String
    genomicsDataQF: String
  }

type SlsMetagenomicsPoolingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    sampleCondition: String
    processedBy: String
    namedLocation: String
    genomicsDataQF: String
    genomicsPooledCodeList: String
    genomicsPooledIDList: String
    genomicsSampleCode: String
    genomicsSampleID: String
  }

type SlsSoilChemistryPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plotType: String
    laboratoryName: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    reviewedBy: String
    namedLocation: String
    acidTreatment: String
    analyticalRepNumber: String
    cnPercentQF: String
    cNratio: Double
    nitrogenPercent: Double
    percentAccuracyQF: String
    organicCPercent: Double
  }

type SlsSoilCoreCollectionIn
  {
    uid: String
    plotID: String
    remarks: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    sampleTiming: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    geneticSampleID: String
    biomassCode: String
    biomassFate: String
    biomassID: String
    boutType: String
    coreCoordinateX: Double
    coreCoordinateY: Double
    geneticArchiveSample1Code: String
    geneticArchiveSample1Fate: String
    geneticArchiveSample1ID: String
    geneticArchiveSample2Code: String
    geneticArchiveSample2Fate: String
    geneticArchiveSample2ID: String
    geneticArchiveSample3Code: String
    geneticArchiveSample3Fate: String
    geneticArchiveSample3ID: String
    geneticArchiveSample4Code: String
    geneticArchiveSample4Fate: String
    geneticArchiveSample4ID: String
    geneticArchiveSample5Code: String
    geneticArchiveSample5Fate: String
    geneticArchiveSample5ID: String
    geneticArchiveSampleCount: Integer
    geneticSampleCode: String
    geneticSampleCondition: String
    geneticSampleFate: String
    horizon: String
    litterDepth: Double
    nTransBoutType: String
    sampleBottomDepth: Double
    sampleTopDepth: Double
    soilCoreCount: String
    soilSamplingDevice: String
    soilTemp: Double
    incubationMethod: String
    sampleExtent: String
    standingWaterDepth: Double
    incubationCondition: String
  }

type SlsSoilCoreCollectionPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    plotType: String
    easting: Double
    northing: Double
    utmZone: String
    samplingProtocolVersion: String
    collectedBy: String
    sampleTiming: String
    sampleCode: String
    dataQF: String
    geneticSampleID: String
    biomassCode: String
    biomassID: String
    coreCoordinateX: Double
    coreCoordinateY: Double
    geneticArchiveSample1Code: String
    geneticArchiveSample1ID: String
    geneticArchiveSample2Code: String
    geneticArchiveSample2ID: String
    geneticArchiveSample3Code: String
    geneticArchiveSample3ID: String
    geneticArchiveSample4Code: String
    geneticArchiveSample4ID: String
    geneticArchiveSample5Code: String
    geneticArchiveSample5ID: String
    geneticSampleCode: String
    geneticSampleCondition: String
    horizon: String
    litterDepth: Double
    nTransBoutType: String
    sampleBottomDepth: Double
    sampleTopDepth: Double
    soilCoreCount: String
    soilSamplingDevice: String
    soilTemp: Double
    incubationMethod: String
    namedLocation: String
    sampleExtent: String
    standingWaterDepth: Double
    incubationCondition: String
  }

type SlsSoilMoistureIn
  {
    uid: String
    plotID: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    samplingProtocolVersion: String
    boatMass: Double
    dryMassBoatMass: Double
    sampleFate: String
    sampleCode: String
    ovenStartDate: Time
    ovenEndDate: Time
    freshMassBoatMass: Double
    horizon: String
    moistureSampleCode: String
    moistureSampleFate: String
    moistureSampleID: String
    dryMassFraction: Double
    smDataQF: String
    smMeasuredBy: String
    smRemarks: String
    soilMoisture: Double
  }

type SlsSoilMoisturePub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    plotType: String
    samplingProtocolVersion: String
    boatMass: Double
    dryMassBoatMass: Double
    sampleCode: String
    dataQF: String
    ovenStartDate: Time
    ovenEndDate: Time
    freshMassBoatMass: Double
    horizon: String
    moistureSampleCode: String
    moistureSampleID: String
    namedLocation: String
    dryMassFraction: Double
    smDataQF: String
    smMeasuredBy: String
    smRemarks: String
    soilMoisture: Double
  }

type SlsSoilpHIn
  {
    uid: String
    plotID: String
    recordedBy: String
    sampleID: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    samplingProtocolVersion: String
    sampleFate: String
    sampleCode: String
    horizon: String
    pHCaClVol: Double
    pHSampleCode: String
    pHSampleFate: String
    pHSampleID: String
    pHSoilInCaClMass: Double
    pHSoilInWaterMass: Double
    pHWaterVol: Double
    soilInCaClpH: Double
    soilInWaterpH: Double
    caclpHRatio: Double
    pHDataQF: String
    pHMeasuredBy: String
    pHRemarks: String
    waterpHRatio: Double
  }

type SlsSoilpHPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    sampleID: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    samplingProtocolVersion: String
    sampleCode: String
    horizon: String
    pHCaClVol: Double
    pHSampleCode: String
    pHSampleID: String
    pHSoilInCaClMass: Double
    pHSoilInWaterMass: Double
    pHWaterVol: Double
    soilInCaClpH: Double
    soilInWaterpH: Double
    namedLocation: String
    caclpHRatio: Double
    pHDataQF: String
    pHMeasuredBy: String
    pHRemarks: String
    waterpHRatio: Double
  }

type SlsSoilStableIsotopesPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    sampleType: String
    plotType: String
    laboratoryName: String
    instrument: String
    testMethod: String
    analysisDate: Time
    analyzedBy: String
    sampleCode: String
    dataQF: String
    cnSampleCode: String
    cnSampleID: String
    reviewedBy: String
    namedLocation: String
    acidTreatment: String
    analyticalRepNumber: String
    cnIsotopeQF: String
    d15N: Double
    isotopeAccuracyQF: String
    organicd13C: Double
  }

type SmeBatchResultsIn
  {
    uid: String
    processedDate: Time
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyteUnits: String
    dataQF: String
    batchID: String
    analyteKnownValue: Double
    analyteObservedValue: Double
    analysisStandardID: String
    lipidID: String
    lotNumber: String
    extractEffStdID: String
    extractEffStdUnits: String
    analyteStandardQF: String
  }

type SmeBatchResultsPub
  {
    uid: String
    processedDate: Time
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyteUnits: String
    dataQF: String
    batchID: String
    namedLocation: String
    analyteKnownValue: Double
    analyteObservedValue: Double
    analysisStandardID: String
    lipidID: String
    lotNumber: String
    extractEffStdID: String
    extractEffStdUnits: String
    analyteStandardQF: String
  }

type SmeLabSummaryIn
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    instrument: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testProtocolVersion: String
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    reviewedBy: String
    analyteKnownValue: Double
    analysisStandardID: String
    lipidID: String
    analyteAccuracyUnits: String
    analyteKnownValueUnits: String
    analyteStandardDeviationUnits: String
  }

type SmeLabSummaryPub
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    instrument: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    testProtocolVersion: String
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    reviewedBy: String
    analyteKnownValue: Double
    analysisStandardID: String
    lipidID: String
  }

type SmeMicrobialBiomassIn
  {
    uid: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    biomassCode: String
    biomassFate: String
    biomassID: String
    processedBy: String
    batchID: String
    reviewedBy: String
    freshMass: Double
    lipid2OH10To0Concentration: Double
    lipid2OH12To0Concentration: Double
    lipid2OH14To0Concentration: Double
    lipid2OH16To0Concentration: Double
    lipid3OH12To0Concentration: Double
    lipid3OH14To0Concentration: Double
    aC15To0Concentration: Double
    c10To0Concentration: Double
    c11To0Concentration: Double
    c12To0Concentration: Double
    c13To0Concentration: Double
    c14To0Concentration: Double
    c14To1Concentration: Double
    c15To0Concentration: Double
    c15To1Concentration: Double
    c16To0Concentration: Double
    c17To0Concentration: Double
    c17To1Concentration: Double
    c18To0Concentration: Double
    c18To1n11Concentration: Double
    c18To3n3Concentration: Double
    c18To3n6Concentration: Double
    c19To0Concentration: Double
    c20To0Concentration: Double
    c20To1Concentration: Double
    c20To2Concentration: Double
    c20To3n3Concentration: Double
    c20To3n6Concentration: Double
    c20To4n6Concentration: Double
    c20To5n3Concentration: Double
    c21To0Concentration: Double
    c22To0Concentration: Double
    c22To1n9Concentration: Double
    c22To2Concentration: Double
    c23To0Concentration: Double
    c24To0Concentration: Double
    c24To1Concentration: Double
    c8To0Concentration: Double
    cis16To1n9Concentration: Double
    cis18To1n9Concentration: Double
    cis18To2n912Concentration: Double
    cyclo17To0Concentration: Double
    cyclo19To0Concentration: Double
    extractionEfficiency: Double
    freezeDryMass: Double
    i15To0Concentration: Double
    i16To0Concentration: Double
    i17To0Concentration: Double
    trans18To1n9Concentration: Double
    trans18To2n912Concentration: Double
    totalLipidConcentration: Double
    c16To1Cis11Concentration: Double
    c17To0AnteisoConcentration: Double
    c19To1Cis10Concentration: Double
    c22To6CisConcentration: Double
    i14To0Concentration: Double
    lipid10Methyl16To0Concentration: Double
    lipid10Methyl17To0Concentration: Double
    lipid10Methyl18To0Concentration: Double
    extractEffStdConc: Double
    analysisResultsQF: String
  }

type SmeMicrobialBiomassPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    sampleCode: String
    dataQF: String
    biomassCode: String
    biomassID: String
    processedBy: String
    batchID: String
    reviewedBy: String
    namedLocation: String
    freshMass: Double
    lipid2OH10To0Concentration: Double
    lipid2OH12To0Concentration: Double
    lipid2OH14To0Concentration: Double
    lipid2OH16To0Concentration: Double
    lipid3OH12To0Concentration: Double
    lipid3OH14To0Concentration: Double
    aC15To0Concentration: Double
    c10To0Concentration: Double
    c11To0Concentration: Double
    c12To0Concentration: Double
    c13To0Concentration: Double
    c14To0Concentration: Double
    c14To1Concentration: Double
    c15To0Concentration: Double
    c15To1Concentration: Double
    c16To0Concentration: Double
    c17To0Concentration: Double
    c17To1Concentration: Double
    c18To0Concentration: Double
    c18To1n11Concentration: Double
    c18To3n3Concentration: Double
    c18To3n6Concentration: Double
    c19To0Concentration: Double
    c20To0Concentration: Double
    c20To1Concentration: Double
    c20To2Concentration: Double
    c20To3n3Concentration: Double
    c20To3n6Concentration: Double
    c20To4n6Concentration: Double
    c20To5n3Concentration: Double
    c21To0Concentration: Double
    c22To0Concentration: Double
    c22To1n9Concentration: Double
    c22To2Concentration: Double
    c23To0Concentration: Double
    c24To0Concentration: Double
    c24To1Concentration: Double
    c8To0Concentration: Double
    cis16To1n9Concentration: Double
    cis18To1n9Concentration: Double
    cis18To2n912Concentration: Double
    cyclo17To0Concentration: Double
    cyclo19To0Concentration: Double
    extractionEfficiency: Double
    freezeDryMass: Double
    i15To0Concentration: Double
    i16To0Concentration: Double
    i17To0Concentration: Double
    trans18To1n9Concentration: Double
    trans18To2n912Concentration: Double
    totalLipidConcentration: Double
    c16To1Cis11Concentration: Double
    c17To0AnteisoConcentration: Double
    c19To1Cis10Concentration: Double
    c22To6CisConcentration: Double
    i14To0Concentration: Double
    lipid10Methyl16To0Concentration: Double
    lipid10Methyl17To0Concentration: Double
    lipid10Methyl18To0Concentration: Double
    extractEffStdConc: Double
    analysisResultsQF: String
  }

type SmtIn
  {
    rawSoilTemp: Double
    rawSoilMoisture: Double
    rawSoilBulkRelPerm: Double
    rawSoilElectricCond: Double
    rawSoilPoreWaterEC: Double
  }

type Snowcam
  {
    rawIRImage: String
    rawRGBImage: String
    iRmetadata: String
    rGBmetadata: String
  }

type Soni
  {
    heaterFlag: Integer
    veloXaxs: Double
    veloYaxs: Double
    veloZaxs: Double
    idx: Integer
    tempTranTop: Double
    tempArmTop: Double
    tempArmBot: Double
    tempTranBot: Double
    tempBloc: Double
    diag16: Integer
    veloSoni: Double
  }

type SoniL0prime
  {
    heaterFlag: Integer
    veloXaxs: Double
    veloYaxs: Double
    veloZaxs: Double
    idx: Integer
    veloSoni: Double
    tempSoni: String
    qfSoniCode: String
    voucherStatus: String
    qfSoniSignalLow: Integer
    qfSoniUnrs: Integer
    qfSoniData: Integer
    qfSoniTrig: Integer
    qfSoniComm: Integer
    qfSoniTemp: Integer
    qfSoniSignalPoor: Integer
    qfSoniSignalHigh: Integer
  }

type SoniAmrs
  {
    idx: Integer
    acceXaxs: Double
    acceYaxs: Double
    acceZaxs: Double
    acceXaxsFree: Double
    acceYaxsFree: Double
    acceZaxsFree: Double
    omegYaxs: Double
    omegXaxs: Double
    omegZaxs: Double
    thetYaxs: Double
    thetXaxs: Double
    thetZaxs: Double
    diag32: Integer
  }

type SoniAmrsL0prime
  {
    idx: Integer
    acceXaxs: Double
    acceYaxs: Double
    acceZaxs: Double
    acceXaxsFree: Double
    acceYaxsFree: Double
    acceZaxsFree: Double
    omegYaxs: Double
    omegXaxs: Double
    omegZaxs: Double
    thetYaxs: Double
    thetXaxs: Double
    thetZaxs: Double
    diag32: Integer
    qfAmrsVal: Integer
    qfAmrsFilt: Integer
    qfAmrsVelo: Integer
    qfAmrsRng: Integer
  }

type SpcBiogeochemPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    setDate: Time
    collectDate: Time
    nrcsDescriptionID: String
    horizonID: String
    horizonName: String
    laboratoryName: String
    biogeoIDnrcs: String
    biogeoSampleType: String
    biogeoTopDepth: Double
    biogeoBottomDepth: Double
    biogeoCenterDepth: Double
    caNh4d: Double
    kNh4d: Double
    mgNh4d: Double
    naNh4d: Double
    cecdNh4: Double
    alSatCecd33: Double
    baseSumCecd10: Double
    bsesatCecd10: Double
    ececCecd33: Double
    alKcl: Double
    feKcl: Double
    mnKcl: Double
    phCacl2: Double
    phH2o: Double
    ec12pre: Double
    bSatx: Double
    brSatx: Double
    caSatx: Double
    clSatx: Double
    co3Satx: Double
    ecSatp: Double
    flSatx: Double
    hco3Sx: Double
    kSatx: Double
    mgSatx: Double
    naSatx: Double
    no2Satx: Double
    no3Satx: Double
    pSatx: Double
    phSp: Double
    resist: Double
    so4Satx: Double
    archiveID: String
    dataQF: String
    analysisStartDate: Time
    namedLocation: String
    caco3Conc: Double
    carbonTot: Double
    estimatedOC: Double
    gypsumConc: Double
    nitrogenTot: Double
    sulfurTot: Double
    waterSatx: Double
    biogeoCode: String
    horizonCode: String
    acidity: Double
    acidOxalateMethod: String
    acidOxalateMethodPub: String
    acidOxalateProcessedDate: Time
    airDryOvenDryMethod: String
    airDryOvenDryMethodPub: String
    airDryOvenDryProcessedDate: Time
    airDryOvenDryRatio: Double
    alCitDithionate: Double
    alOxalate: Double
    archiveCode: String
    archiveRemarks: String
    bray1PExtractable: Double
    bray1PMethod: String
    bray1PMethodPub: String
    bray1PProcessedDate: Time
    caco3Method: String
    caco3MethodPub: String
    caco3ProcessedDate: Time
    cecMethod: String
    cecMethodPub: String
    cecProcessedDate: Time
    citrateDithioMethod: String
    citrateDithioMethodPub: String
    citrateDithioProcessedDate: Time
    ctonRatio: Double
    ecMethod: String
    ecMethodPub: String
    ecProcessedDate: Time
    extractAcidityMethod: String
    extractAcidityMethodPub: String
    extractAcidityProcessedDate: Time
    feCitDithionate: Double
    feOxalate: Double
    gypsumMethod: String
    gypsumMethodPub: String
    gypsumProcessedDate: Time
    h2oReten15BarMethod: String
    h2oReten15BarMethodPub: String
    h2oReten15BarProcessedDate: Time
    kClExtractMethod: String
    kClExtractMethodPub: String
    kClExtractProcessedDate: Time
    mehlichIIIPMethod: String
    mehlichIIIPMethodPub: String
    mehlichIIIPProcessedDate: Time
    mehlichIIITotP: Double
    mnCitDithionate: Double
    mnOxalate: Double
    olsenPExtractable: Double
    olsenPMethod: String
    olsenPMethodPub: String
    olsenPProcessedDate: Time
    optDensityOxalate: Double
    pOxalate: Double
    processingRemarks: String
    routinepHProcessedDate: Time
    routinepHMethod: String
    routinepHMethodPub: String
    satPasteMethod: String
    satPasteMethodPub: String
    satPasteProcessedDate: Time
    siliconCitrateDithionate: Double
    siOxalate: Double
    totalNCSMethod: String
    totalNCSMethodPub: String
    totalNCSProcessedDate: Time
    waterRetention15Bar: Double
  }

type SpcBulkdensityPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    nrcsDescriptionID: String
    horizonID: String
    horizonName: String
    laboratoryName: String
    bulkDensIDnrcs: String
    bulkDensSampleType: String
    bulkDensCenterDepth: Double
    bulkDensDiameter: Double
    bulkDensLength: Double
    bulkDensVolume: Double
    bulkDensTopDepth: Double
    bulkDensBottomDepth: Double
    bulkDensWetWeight: Double
    bulkDensDryWeight: Double
    bulkDensCoarseFragWeight: Double
    bulkDensCoarseFragDens: Double
    dataQF: String
    namedLocation: String
    bulkDensCode: String
    horizonCode: String
    bulkDensFieldMoist: Double
    bulkDensMethod: String
    bulkDensMethodPub: String
    bulkDensOvenDry: Double
    bulkDensProcessedDate: Time
    bulkDensThirdBar: Double
    bulkDensWidth: Double
    fieldWaterContent: Double
    waterRetentionThirdBar: Double
  }

type SpcExternalLabSummaryIn
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    method: String
    methodDetectionLimit: Double
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    methodPub: String
  }

type SpcExternalLabSummaryPub
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    method: String
    methodDetectionLimit: Double
    analyteUnits: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    dataQF: String
    analyteAccuracy: Double
    analyteStandardDeviation: Double
    qaReferenceID: String
    analyteKnownValue: Double
    methodPub: String
  }

type SpcParticlesizePub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    setDate: Time
    collectDate: Time
    nrcsDescriptionID: String
    horizonID: String
    horizonName: String
    laboratoryName: String
    biogeoIDnrcs: String
    biogeoSampleType: String
    biogeoTopDepth: Double
    biogeoBottomDepth: Double
    biogeoCenterDepth: Double
    coarseFrag2To5: Double
    coarseFrag5To20: Double
    dataQF: String
    namedLocation: String
    biogeoCode: String
    carbonateClay: Double
    clayFineContent: Double
    clayTotal: Double
    horizonCode: String
    sandCoarseContent: Double
    sandFineContent: Double
    sandMediumContent: Double
    sandTotal: Double
    sandVeryFineContent: Double
    siltCoarseContent: Double
    siltFineContent: Double
    siltTotal: Double
    particleSizeDistProcessedDate: Time
    particleSizeDistMethod: String
    particleSizeDistMethodPub: String
  }

type SpcPerbiogeosampleIn
  {
    uid: String
    plotID: String
    setDate: Time
    collectDate: Time
    nrcsDescriptionID: String
    horizonID: String
    horizonName: String
    laboratoryName: String
    labProjID: String
    biogeoIDnrcs: String
    biogeoSampleType: String
    biogeoTopDepth: Double
    biogeoBottomDepth: Double
    biogeoCenterDepth: Double
    biogeoTotWeight: Double
    biogeoTotWeight2To5: Double
    biogeoTotWeight5To20: Double
    biogeoTotWeight20To75: Double
    gypsum: Double
    caco3: Double
    caNh4d: Double
    kNh4d: Double
    mgNh4d: Double
    naNh4d: Double
    cecdNh4: Double
    alSatCecd33: Double
    baseSumCecd10: Double
    bsesatCecd10: Double
    ececCecd33: Double
    alKcl: Double
    feKcl: Double
    mnKcl: Double
    phCacl2: Double
    phH2o: Double
    ec12pre: Double
    bSatx: Double
    brSatx: Double
    caSatx: Double
    clSatx: Double
    co3Satx: Double
    ecSatp: Double
    flSatx: Double
    hco3Sx: Double
    kSatx: Double
    mgSatx: Double
    naSatx: Double
    no2Satx: Double
    no3Satx: Double
    pSatx: Double
    phSp: Double
    resist: Double
    so4Satx: Double
    cTot: Double
    nTot: Double
    sTot: Double
    eoc: Double
    coarseFrag2To5: Double
    coarseFrag5To20: Double
    archiveID: String
    dataQF: String
    analysisStartDate: Time
    archiveFate: String
    caco3Conc: Double
    carbonTot: Double
    estimatedOC: Double
    gypsumConc: Double
    nitrogenTot: Double
    sulfurTot: Double
    waterSatx: Double
    biogeoCode: String
    biogeoNrcsFate: String
    carbonateClay: Double
    clayFineContent: Double
    clayTotal: Double
    horizonCode: String
    horizonFate: String
    sandCoarseContent: Double
    sandFineContent: Double
    sandMediumContent: Double
    sandTotal: Double
    sandVeryCoarseContent: Double
    sandVeryFineContent: Double
    siltCoarseContent: Double
    siltFineContent: Double
    siltTotal: Double
    acidity: Double
    acidOxalateMethod: String
    acidOxalateMethodPub: String
    acidOxalateProcessedDate: Time
    airDryOvenDryMethod: String
    airDryOvenDryMethodPub: String
    airDryOvenDryProcessedDate: Time
    airDryOvenDryRatio: Double
    alCitDithionate: Double
    alOxalate: Double
    archiveCode: String
    archiveRemarks: String
    bray1PExtractable: Double
    bray1PMethod: String
    bray1PMethodPub: String
    bray1PProcessedDate: Time
    caco3Method: String
    caco3MethodPub: String
    caco3ProcessedDate: Time
    cecMethod: String
    cecMethodPub: String
    cecProcessedDate: Time
    citrateDithioMethod: String
    citrateDithioMethodPub: String
    citrateDithioProcessedDate: Time
    ctonRatio: Double
    ecMethod: String
    ecMethodPub: String
    ecProcessedDate: Time
    extractAcidityMethod: String
    extractAcidityMethodPub: String
    extractAcidityProcessedDate: Time
    feCitDithionate: Double
    feOxalate: Double
    gypsumMethod: String
    gypsumMethodPub: String
    gypsumProcessedDate: Time
    h2oReten15BarMethod: String
    h2oReten15BarMethodPub: String
    h2oReten15BarProcessedDate: Time
    kClExtractMethod: String
    kClExtractMethodPub: String
    kClExtractProcessedDate: Time
    mehlichIIIPMethod: String
    mehlichIIIPMethodPub: String
    mehlichIIIPProcessedDate: Time
    mehlichIIITotP: Double
    mnCitDithionate: Double
    mnOxalate: Double
    olsenPExtractable: Double
    olsenPMethod: String
    olsenPMethodPub: String
    olsenPProcessedDate: Time
    optDensityOxalate: Double
    particleSizeDistProcessedDate: Time
    particleSizeDistMethod: String
    particleSizeDistMethodPub: String
    pOxalate: Double
    processingRemarks: String
    routinepHProcessedDate: Time
    routinepHMethod: String
    routinepHMethodPub: String
    satPasteMethod: String
    satPasteMethodPub: String
    satPasteProcessedDate: Time
    siliconCitrateDithionate: Double
    siOxalate: Double
    totalNCSMethod: String
    totalNCSMethodPub: String
    totalNCSProcessedDate: Time
    waterRetention15Bar: Double
  }

type SpcPerbulksampleIn
  {
    uid: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    nrcsDescriptionID: String
    horizonID: String
    horizonName: String
    laboratoryName: String
    labProjID: String
    bulkDensIDnrcs: String
    bulkDensSampleType: String
    bulkDensCenterDepth: Double
    bulkDensDiameter: Double
    bulkDensLength: Double
    bulkDensVolume: Double
    bulkDensTopDepth: Double
    bulkDensBottomDepth: Double
    bulkDensWetWeight: Double
    bulkDensDryWeight: Double
    bulkDensCoarseFragWeight: Double
    bulkDensCoarseFragDens: Double
    dataQF: String
    bulkDensCode: String
    bulkDensNrcsFate: String
    horizonCode: String
    horizonFate: String
    bulkDensFieldMoist: Double
    bulkDensMethod: String
    bulkDensMethodPub: String
    bulkDensOvenDry: Double
    bulkDensProcessedDate: Time
    bulkDensThirdBar: Double
    bulkDensWidth: Double
    fieldWaterContent: Double
    waterRetentionThirdBar: Double
    bulkDensSampleID: String
  }

type SpcPerhorizonIn
  {
    uid: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    nrcsDescriptionID: String
    horizonID: String
    horizonTempName: String
    horizonName: String
    horizonTopDepth: Double
    horizonBottomDepth: Double
    testProtocolVersion: String
    dataQF: String
    pitCode: String
    pitFate: String
    horizonCode: String
    horizonFate: String
  }

type SpcPerhorizonPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    nrcsDescriptionID: String
    horizonID: String
    horizonName: String
    horizonTopDepth: Double
    horizonBottomDepth: Double
    testProtocolVersion: String
    dataQF: String
    namedLocation: String
    pitCode: String
    horizonCode: String
  }

type SpcPerplotIn
  {
    uid: String
    plotID: String
    remarks: String
    setDate: Time
    collectDate: Time
    pitID: String
    pitDepth: Double
    recordedByA: String
    soilProfileDescriberA: String
    soilProfileDescriberInst: String
    nrcsDescriptionID: String
    soilSeries: String
    soilFamily: String
    soilSubgroup: String
    soilGreatGroup: String
    soilSuborder: String
    soilOrder: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    pitCode: String
    pitFate: String
    referenceCorner: String
    sampleBearing: Double
    sampleDistance: Double
    sampleDistanceDeci: Double
    sampleRelativeLocation: String
    soilSamplingMethod: String
  }

type SpcPerplotPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    setDate: Time
    collectDate: Time
    plotType: String
    pitID: String
    pitDepth: Double
    recordedByA: String
    soilProfileDescriberA: String
    soilProfileDescriberInst: String
    nrcsDescriptionID: String
    soilSeries: String
    soilFamily: String
    soilSubgroup: String
    soilGreatGroup: String
    soilSuborder: String
    soilOrder: String
    testProtocolVersion: String
    dataQF: String
    namedLocation: String
    pitCode: String
    referenceCorner: String
    sampleBearing: Double
    sampleDistance: Double
    sampleRelativeLocation: String
    soilSamplingMethod: String
  }

type SPH
  {
    spectralPhotometerK7: String
  }

type SRDDP1min
  {
    difRadMean: Double
    difRadMinimum: Double
    difRadMaximum: Double
    difRadVariance: Double
    difRadNumPts: Double
    difRadExpUncert: Double
    difRadStdErMean: Double
    difRadRangeQAQCRpt: String
    difRadPersistenceQAQCRpt: String
    difRadStepQAQCRpt: String
    difRadNullQAQCRpt: String
    difRadGapQAQCRpt: String
    difRadConsistencyQAQCRpt: String
    difRadSpikeQAQCRpt: String
    difRadAlphaQAQCRpt: String
    difRadBetaQAQCRpt: String
    difRadRangeFailQM: Double
    difRadRangePassQM: Double
    difRadRangeNAQM: Double
    difRadPersistenceFailQM: Double
    difRadPersistencePassQM: Double
    difRadPersistenceNAQM: Double
    difRadStepFailQM: Double
    difRadStepPassQM: Double
    difRadStepNAQM: Double
    difRadNullFailQM: Double
    difRadNullPassQM: Double
    difRadNullNAQM: Double
    difRadGapFailQM: Double
    difRadGapPassQM: Double
    difRadGapNAQM: Double
    difRadSpikeFailQM: Double
    difRadSpikePassQM: Double
    difRadSpikeNAQM: Double
    difRadConsistencyFailQM: Double
    difRadConsistencyPassQM: Double
    difRadConsistencyNAQM: Double
    difRadAlphaQM: Double
    difRadBetaQM: Double
    difRadFinalQF: String
    dirRadMean: Double
    dirRadMinimum: Double
    dirRadMaximum: Double
    dirRadVariance: Double
    dirRadNumPts: Double
    dirRadExpUncert: Double
    dirRadStdErMean: Double
    dirRadRangeQAQCRpt: String
    dirRadPersistenceQAQCRpt: String
    dirRadStepQAQCRpt: String
    dirRadNullQAQCRpt: String
    dirRadGapQAQCRpt: String
    dirRadConsistencyQAQCRpt: String
    dirRadSpikeQAQCRpt: String
    dirRadAlphaQAQCRpt: String
    dirRadBetaQAQCRpt: String
    dirRadRangeFailQM: Double
    dirRadRangePassQM: Double
    dirRadRangeNAQM: Double
    dirRadPersistenceFailQM: Double
    dirRadPersistencePassQM: Double
    dirRadPersistenceNAQM: Double
    dirRadStepFailQM: Double
    dirRadStepPassQM: Double
    dirRadStepNAQM: Double
    dirRadNullFailQM: Double
    dirRadNullPassQM: Double
    dirRadNullNAQM: Double
    dirRadGapFailQM: Double
    dirRadGapPassQM: Double
    dirRadGapNAQM: Double
    dirRadSpikeFailQM: Double
    dirRadSpikePassQM: Double
    dirRadSpikeNAQM: Double
    dirRadConsistencyFailQM: Double
    dirRadConsistencyPassQM: Double
    dirRadConsistencyNAQM: Double
    dirRadAlphaQM: Double
    dirRadBetaQM: Double
    dirRadFinalQF: String
    gloRadMean: Double
    gloRadMinimum: Double
    gloRadMaximum: Double
    gloRadVariance: Double
    gloRadNumPts: Double
    gloRadExpUncert: Double
    gloRadStdErMean: Double
    gloRadRangeQAQCRpt: String
    gloRadPersistenceQAQCRpt: String
    gloRadStepQAQCRpt: String
    gloRadNullQAQCRpt: String
    gloRadGapQAQCRpt: String
    gloRadConsistencyQAQCRpt: String
    gloRadSpikeQAQCRpt: String
    gloRadAlphaQAQCRpt: String
    gloRadBetaQAQCRpt: String
    gloRadRangeFailQM: Double
    gloRadRangePassQM: Double
    gloRadRangeNAQM: Double
    gloRadPersistenceFailQM: Double
    gloRadPersistencePassQM: Double
    gloRadPersistenceNAQM: Double
    gloRadStepFailQM: Double
    gloRadStepPassQM: Double
    gloRadStepNAQM: Double
    gloRadNullFailQM: Double
    gloRadNullPassQM: Double
    gloRadNullNAQM: Double
    gloRadGapFailQM: Double
    gloRadGapPassQM: Double
    gloRadGapNAQM: Double
    gloRadSpikeFailQM: Double
    gloRadSpikePassQM: Double
    gloRadSpikeNAQM: Double
    gloRadConsistencyFailQM: Double
    gloRadConsistencyPassQM: Double
    gloRadConsistencyNAQM: Double
    gloRadAlphaQM: Double
    gloRadBetaQM: Double
    gloRadFinalQF: String
    sunPres: Double
    sunPresNumPts: Double
    dirRadDirectionalQAQCRpt: String
    dirRadDirectionalFailQM: Double
    dirRadDirectionalPassQM: Double
    dirRadDirectionalNAQM: Double
    startDateTime: Time
    endDateTime: Time
    difRadValidCalFailQM: Double
    difRadValidCalNAQM: Double
    difRadValidCalPassQM: Double
    difRadValidCalQAQCRpt: String
    dirRadValidCalFailQM: Double
    dirRadValidCalNAQM: Double
    dirRadValidCalPassQM: Double
    dirRadValidCalQAQCRpt: String
    gloRadValidCalFailQM: Double
    gloRadValidCalNAQM: Double
    gloRadValidCalPassQM: Double
    gloRadValidCalQAQCRpt: String
    difRadFinalQFSciRvw: String
    dirRadFinalQFSciRvw: String
    gloRadFinalQFSciRvw: String
  }

type SRDDP30min
  {
    difRadMean: Double
    difRadMinimum: Double
    difRadMaximum: Double
    difRadVariance: Double
    difRadNumPts: Double
    difRadExpUncert: Double
    difRadStdErMean: Double
    difRadRangeFailQM: Double
    difRadRangePassQM: Double
    difRadRangeNAQM: Double
    difRadPersistenceFailQM: Double
    difRadPersistencePassQM: Double
    difRadPersistenceNAQM: Double
    difRadStepFailQM: Double
    difRadStepPassQM: Double
    difRadStepNAQM: Double
    difRadNullFailQM: Double
    difRadNullPassQM: Double
    difRadNullNAQM: Double
    difRadGapFailQM: Double
    difRadGapPassQM: Double
    difRadGapNAQM: Double
    difRadSpikeFailQM: Double
    difRadSpikePassQM: Double
    difRadSpikeNAQM: Double
    difRadConsistencyFailQM: Double
    difRadConsistencyPassQM: Double
    difRadConsistencyNAQM: Double
    difRadAlphaQM: Double
    difRadBetaQM: Double
    difRadFinalQF: String
    dirRadMean: Double
    dirRadMinimum: Double
    dirRadMaximum: Double
    dirRadVariance: Double
    dirRadNumPts: Double
    dirRadExpUncert: Double
    dirRadStdErMean: Double
    dirRadRangeFailQM: Double
    dirRadRangePassQM: Double
    dirRadRangeNAQM: Double
    dirRadPersistenceFailQM: Double
    dirRadPersistencePassQM: Double
    dirRadPersistenceNAQM: Double
    dirRadStepFailQM: Double
    dirRadStepPassQM: Double
    dirRadStepNAQM: Double
    dirRadNullFailQM: Double
    dirRadNullPassQM: Double
    dirRadNullNAQM: Double
    dirRadGapFailQM: Double
    dirRadGapPassQM: Double
    dirRadGapNAQM: Double
    dirRadSpikeFailQM: Double
    dirRadSpikePassQM: Double
    dirRadSpikeNAQM: Double
    dirRadConsistencyFailQM: Double
    dirRadConsistencyPassQM: Double
    dirRadConsistencyNAQM: Double
    dirRadAlphaQM: Double
    dirRadBetaQM: Double
    dirRadFinalQF: String
    gloRadMean: Double
    gloRadMinimum: Double
    gloRadMaximum: Double
    gloRadVariance: Double
    gloRadNumPts: Double
    gloRadExpUncert: Double
    gloRadStdErMean: Double
    gloRadRangeFailQM: Double
    gloRadRangePassQM: Double
    gloRadRangeNAQM: Double
    gloRadPersistenceFailQM: Double
    gloRadPersistencePassQM: Double
    gloRadPersistenceNAQM: Double
    gloRadStepFailQM: Double
    gloRadStepPassQM: Double
    gloRadStepNAQM: Double
    gloRadNullFailQM: Double
    gloRadNullPassQM: Double
    gloRadNullNAQM: Double
    gloRadGapFailQM: Double
    gloRadGapPassQM: Double
    gloRadGapNAQM: Double
    gloRadSpikeFailQM: Double
    gloRadSpikePassQM: Double
    gloRadSpikeNAQM: Double
    gloRadConsistencyFailQM: Double
    gloRadConsistencyPassQM: Double
    gloRadConsistencyNAQM: Double
    gloRadAlphaQM: Double
    gloRadBetaQM: Double
    gloRadFinalQF: String
    sunPres: Double
    sunPresNumPts: Double
    dirRadDirectionalFailQM: Double
    dirRadDirectionalPassQM: Double
    dirRadDirectionalNAQM: Double
    startDateTime: Time
    endDateTime: Time
    difRadValidCalFailQM: Double
    difRadValidCalNAQM: Double
    difRadValidCalPassQM: Double
    dirRadValidCalFailQM: Double
    dirRadValidCalNAQM: Double
    dirRadValidCalPassQM: Double
    gloRadValidCalFailQM: Double
    gloRadValidCalNAQM: Double
    gloRadValidCalPassQM: Double
    difRadFinalQFSciRvw: String
    dirRadFinalQFSciRvw: String
    gloRadFinalQFSciRvw: String
  }

type SRPP
  {
    pyranometerOutput: Double
    pRTResistance: Double
    fanSpeed: Double
    heater1Flag: Integer
    heater2Flag: Integer
  }

type SRPP1min
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    heaterQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    shortRadMean: Double
    shortRadMinimum: Double
    shortRadMaximum: Double
    shortRadVariance: Double
    shortRadNumPts: Double
    shortRadExpUncert: Double
    shortRadStdErMean: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type SRPP30min
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    heaterQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    shortRadMean: Double
    shortRadMinimum: Double
    shortRadMaximum: Double
    shortRadVariance: Double
    shortRadNumPts: Double
    shortRadExpUncert: Double
    shortRadStdErMean: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
  }

type ST
  {
    soilPRTResistance: Double
  }

type ST1Minute
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    soilTempMean: Double
    soilTempMinimum: Double
    soilTempMaximum: Double
    soilTempVariance: Double
    soilTempNumPts: Double
    soilTempExpUncert: Double
    soilTempStdErMean: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type ST30Minute
  {
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    soilTempMean: Double
    soilTempMinimum: Double
    soilTempMaximum: Double
    soilTempVariance: Double
    soilTempNumPts: Double
    soilTempExpUncert: Double
    soilTempStdErMean: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    finalQFSciRvw: String
  }

type SwcDomainLabDataIn
  {
    uid: String
    remarks: String
    measuredBy: String
    collectDate: Time
    sampleType: String
    stationID: String
    titrationLocation: String
    pH4CheckValue: Double
    pH7CheckValue: Double
    pHMeterCalibration: String
    initialSamplepH: Double
    initialSampleTemp: Double
    normality: String
    sampleVolume: Double
    methodType: String
    titrationDate: Time
    startDate: Time
    alkMeqPerL: Double
    alkMgPerL: Double
    ancMeqPerL: Double
    ancMgPerL: Double
    domainSampleID: String
    parentSampleID: String
    dataQF: String
    parentSampleFate: String
    parentSampleCode: String
    domainSampleCode: String
    titrationDataString: String
    domainSampleFate: String
  }

type SwcDomainLabDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    measuredBy: String
    collectDate: Time
    sampleType: String
    titrationLocation: String
    initialSamplepH: Double
    initialSampleTemp: Double
    normality: String
    sampleVolume: Double
    methodType: String
    titrationDate: Time
    startDate: Time
    alkMeqPerL: Double
    alkMgPerL: Double
    ancMeqPerL: Double
    ancMgPerL: Double
    domainSampleID: String
    parentSampleID: String
    dataQF: String
    parentSampleCode: String
    namedLocation: String
    domainSampleCode: String
    titrationDataString: String
  }

type SwcExternalLabDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    sampleID: String
    collectDate: Time
    startDate: Time
    laboratoryName: String
    pH: Double
    externalConductance: Double
    waterCarbonate: Double
    waterBicarbonate: Double
    externalANC: Double
    waterCalcium: Double
    waterMagnesium: Double
    waterSodium: Double
    waterPotassium: Double
    waterSulfate: Double
    waterChlorine: Double
    waterManganese: Double
    waterIron: Double
    waterBromine: Double
    waterFluorine: Double
    waterSilica: Double
    totalSuspendedSolids: Double
    totalSuspendedSolidsDryMass: Double
    totalDissolvedSolids: Double
    waterNitrateAndNitriteN: Double
    waterNitriteN: Double
    waterAmmoniumN: Double
    waterOrthophosphateP: Double
    waterTotalNitrogen: Double
    totalDissolvedNitrogen: Double
    dissolvedInorganicCarbon: Double
    dissolvedOrganicCarbon: Double
    waterTotalOrganicCarbon: Double
    waterTotalPhosphorus: Double
    totalDissolvedPhosphorus: Double
    totalParticulateCarbonMass: Double
    totalParticulateNitrogenMass: Double
    uvAbsorbance250: Double
    uvAbsorbance284: Double
    coolerTemp: Double
    receivedBy: String
    shipmentCondition: String
    shipmentWarmQF: Double
    shipmentLateQF: Double
    sampleCode: String
    sampleCondition: String
    externalLabDataQF: String
    namedLocation: String
  }

type SwcExternalLabSummaryDataPub
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    methodModification: String
    methodDetectionLimit: Double
    analyteUnits: String
    precision: Double
    measurementUncertainty: Double
    internalLabName: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    absorbancePrecision: String
    measurementUncertaintyUnits: String
    precisionRepeatabilityUnits: String
  }

type SwcFieldDataIn
  {
    uid: String
    remarks: String
    sampleID: String
    collectDate: Time
    stationID: String
    processedDate: Time
    sampleVolumeFiltered: Double
    startDate: Time
    parentSampleID: String
    processedDateFilters: Time
    sampleFate: String
    sampleCode: String
    parentSampleFate: String
    parentSampleCode: String
    sampleClass: String
    sampleCondition: String
    fieldDataQF: String
    replicateNumber: Integer
    fulcrumVersion: String
    platformInfo: String
    filtSampleCode: String
    filtSampleCond: String
    filtSampleFate: String
    filtSampleID: String
    pcnSampleCode: String
    pcnSampleCond: String
    pcnSampleFate: String
    pcnSampleID: String
    rawSampleCode: String
    rawSampleCond: String
    rawSampleFate: String
    rawSampleID: String
    dicSampleCode: String
    dicSampleCond: String
    dicSampleFate: String
    dicSampleID: String
    filtSampleBottleSize: String
    gwwAlkSampleBubbleFree: String
    gwwAlkSampleHeadspace: String
    gwwFiltBubbleFree: String
    gwwFiltSampleHeadspace: String
    filtNutSampleBarcode: String
    filtNutSampleClass: String
    filtNutSampleCond: String
    filtNutSampleFate: String
    filtNutSampleID: String
    gwwDICBubbleFree: String
    rawNutSampleBarcode: String
    rawNutSampleClass: String
    rawNutSampleCond: String
    rawNutSampleFate: String
    rawNutSampleID: String
  }

type SwcFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    sampleID: String
    collectDate: Time
    processedDate: Time
    sampleVolumeFiltered: Double
    startDate: Time
    parentSampleID: String
    processedDateFilters: Time
    sampleCode: String
    parentSampleCode: String
    sampleCondition: String
    fieldDataQF: String
    replicateNumber: Integer
    namedLocation: String
  }

type SwcFieldSuperParentPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    waterTemp: Double
    specificConductance: Double
    aCollectedBy: String
    bCollectedBy: String
    altLocation: String
    altLongitude: Double
    altLatitude: Double
    maxDepth: Double
    upperSegmentDepth: Double
    lowerSegmentDepth: Double
    startDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    wellWaterDepth: Double
    sampleDepth: Double
    sampleExtractionMethod: String
    wellVolumePurged: Double
    samplerType: String
    parentSampleID: String
    lakeSampleDepth1: Double
    lakeSampleDepth2: Double
    sdgSamplingProtocolVersion: String
    asiSamplingProtocolVersion: String
    aquaticSiteType: String
    parentSampleCode: String
    fieldDataQF: String
    samplingImpractical: String
    namedLocation: String
    additionalCoordUncertainty: Double
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    amcSamplingProtocolVersion: String
    swcSamplingProtocolVersion: String
  }

type SwConTempPres
  {
    conductance: Double
    batteryVoltage: Double
    conductanceDataQualityID: Double
    groundwaterTemp: Double
    tempDataQualityID: Double
    groundwaterPressure: Double
    pressureDataQualityID: Double
  }

type SwRad
  {
    rawShortwaveRadiationGlobal: Double
    rawShortwaveRadiationDiffuse: Double
    sunPresence: Integer
  }

type SWS
  {
    rawVSWC0: Double
    rawVSIC0: Double
    rawVSWC1: Double
    rawVSIC1: Double
    rawVSWC2: Double
    rawVSIC2: Double
    rawVSWC3: Double
    rawVSIC3: Double
    rawVSWC4: Double
    rawVSIC4: Double
    rawVSWC5: Double
    rawVSIC5: Double
    rawVSWC6: Double
    rawVSIC6: Double
    rawVSWC7: Double
    rawVSIC7: Double
  }

type SWS1Minute
  {
    vSWCMean: Double
    vSWCMinimum: Double
    vSWCMaximum: Double
    vSWCVariance: Double
    vSWCNumPts: Double
    vSWCExpUncert: Double
    vSWCStdErMean: Double
    vSWCRangeQAQCRpt: String
    vSWCPersistenceQAQCRpt: String
    vSWCStepQAQCRpt: String
    vSWCNullQAQCRpt: String
    vSWCGapQAQCRpt: String
    vSWCConsistencyQAQCRpt: String
    vSWCSpikeQAQCRpt: String
    vSWCAlphaQAQCRpt: String
    vSWCBetaQAQCRpt: String
    vSWCRangeFailQM: Double
    vSWCRangePassQM: Double
    vSWCRangeNAQM: Double
    vSWCPersistenceFailQM: Double
    vSWCPersistencePassQM: Double
    vSWCPersistenceNAQM: Double
    vSWCStepFailQM: Double
    vSWCStepPassQM: Double
    vSWCStepNAQM: Double
    vSWCNullFailQM: Double
    vSWCNullPassQM: Double
    vSWCNullNAQM: Double
    vSWCGapFailQM: Double
    vSWCGapPassQM: Double
    vSWCGapNAQM: Double
    vSWCSpikeFailQM: Double
    vSWCSpikePassQM: Double
    vSWCSpikeNAQM: Double
    vSWCConsistencyFailQM: Double
    vSWCConsistencyPassQM: Double
    vSWCConsistencyNAQM: Double
    vSWCAlphaQM: Double
    vSWCBetaQM: Double
    vSWCFinalQF: String
    vSICMean: Double
    vSICMinimum: Double
    vSICMaximum: Double
    vSICVariance: Double
    vSICNumPts: Double
    vSICExpUncert: Double
    vSICStdErMean: Double
    vSICRangeQAQCRpt: String
    vSICPersistenceQAQCRpt: String
    vSICStepQAQCRpt: String
    vSICNullQAQCRpt: String
    vSICGapQAQCRpt: String
    vSICConsistencyQAQCRpt: String
    vSICSpikeQAQCRpt: String
    vSICAlphaQAQCRpt: String
    vSICBetaQAQCRpt: String
    vSICRangeFailQM: Double
    vSICRangePassQM: Double
    vSICRangeNAQM: Double
    vSICPersistenceFailQM: Double
    vSICPersistencePassQM: Double
    vSICPersistenceNAQM: Double
    vSICStepFailQM: Double
    vSICStepPassQM: Double
    vSICStepNAQM: Double
    vSICNullFailQM: Double
    vSICNullPassQM: Double
    vSICNullNAQM: Double
    vSICGapFailQM: Double
    vSICGapPassQM: Double
    vSICGapNAQM: Double
    vSICSpikeFailQM: Double
    vSICSpikePassQM: Double
    vSICSpikeNAQM: Double
    vSICConsistencyFailQM: Double
    vSICConsistencyPassQM: Double
    vSICConsistencyNAQM: Double
    vSICAlphaQM: Double
    vSICBetaQM: Double
    vSICFinalQF: String
    tempQAQCRpt: String
    tempFailQM: Double
    tempPassQM: Double
    tempNAQM: Double
    startDateTime: Time
    endDateTime: Time
    calQAQCRpt: String
    calDefaultQM: Double
    calNEONQM: Double
    calNAQM: Double
    vSICFinalQFSciRvw: String
    vSICValidCalFailQM: Double
    vSICValidCalNAQM: Double
    vSICValidCalPassQM: Double
    vSICValidCalQAQCRpt: String
    vSWCFinalQFSciRvw: String
    vSWCValidCalFailQM: Double
    vSWCValidCalNAQM: Double
    vSWCValidCalPassQM: Double
    vSWCValidCalQAQCRpt: String
  }

type SWS30Minute
  {
    vSWCMean: Double
    vSWCMinimum: Double
    vSWCMaximum: Double
    vSWCVariance: Double
    vSWCNumPts: Double
    vSWCExpUncert: Double
    vSWCStdErMean: Double
    vSWCRangeFailQM: Double
    vSWCRangePassQM: Double
    vSWCRangeNAQM: Double
    vSWCPersistenceFailQM: Double
    vSWCPersistencePassQM: Double
    vSWCPersistenceNAQM: Double
    vSWCStepFailQM: Double
    vSWCStepPassQM: Double
    vSWCStepNAQM: Double
    vSWCNullFailQM: Double
    vSWCNullPassQM: Double
    vSWCNullNAQM: Double
    vSWCGapFailQM: Double
    vSWCGapPassQM: Double
    vSWCGapNAQM: Double
    vSWCSpikeFailQM: Double
    vSWCSpikePassQM: Double
    vSWCSpikeNAQM: Double
    vSWCConsistencyFailQM: Double
    vSWCConsistencyPassQM: Double
    vSWCConsistencyNAQM: Double
    vSWCAlphaQM: Double
    vSWCBetaQM: Double
    vSWCFinalQF: String
    vSICMean: Double
    vSICMinimum: Double
    vSICMaximum: Double
    vSICVariance: Double
    vSICNumPts: Double
    vSICExpUncert: Double
    vSICStdErMean: Double
    vSICRangeFailQM: Double
    vSICRangePassQM: Double
    vSICRangeNAQM: Double
    vSICPersistenceFailQM: Double
    vSICPersistencePassQM: Double
    vSICPersistenceNAQM: Double
    vSICStepFailQM: Double
    vSICStepPassQM: Double
    vSICStepNAQM: Double
    vSICNullFailQM: Double
    vSICNullPassQM: Double
    vSICNullNAQM: Double
    vSICGapFailQM: Double
    vSICGapPassQM: Double
    vSICGapNAQM: Double
    vSICSpikeFailQM: Double
    vSICSpikePassQM: Double
    vSICSpikeNAQM: Double
    vSICConsistencyFailQM: Double
    vSICConsistencyPassQM: Double
    vSICConsistencyNAQM: Double
    vSICAlphaQM: Double
    vSICBetaQM: Double
    vSICFinalQF: String
    tempFailQM: Double
    tempPassQM: Double
    tempNAQM: Double
    startDateTime: Time
    endDateTime: Time
    calDefaultQM: Double
    calNEONQM: Double
    calNAQM: Double
    vSICFinalQFSciRvw: String
    vSICValidCalFailQM: Double
    vSICValidCalNAQM: Double
    vSICValidCalPassQM: Double
    vSWCFinalQFSciRvw: String
    vSWCValidCalFailQM: Double
    vSWCValidCalNAQM: Double
    vSWCValidCalPassQM: Double
  }

type TAAT
  {
    heaterFlag: Integer
    pRTResistance: Double
    fanSpeed: Double
    turbineSpeed: Double
  }

type TAAT1min
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    flowQAQCRpt: String
    heaterQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    flowFailQM: Double
    flowPassQM: Double
    flowNAQM: Double
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    tempTripleMean: Double
    tempTripleMinimum: Double
    tempTripleMaximum: Double
    tempTripleVariance: Double
    tempTripleNumPts: Double
    tempTripleExpUncert: Double
    tempTripleStdErMean: Double
    tempAveQAQCRpt: String
    tempAve0QM: Double
    tempAve1QM: Double
    tempAve2QM: Double
    tempAve3QM: Double
    tempAve4QM: Double
    tempAve5QM: Double
    tempAve6QM: Double
    tempAve7QM: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type TAAT30min
  {
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    flowFailQM: Double
    flowPassQM: Double
    flowNAQM: Double
    heaterFailQM: Double
    heaterPassQM: Double
    heaterNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    tempTripleMean: Double
    tempTripleMinimum: Double
    tempTripleMaximum: Double
    tempTripleVariance: Double
    tempTripleNumPts: Double
    tempTripleExpUncert: Double
    tempTripleStdErMean: Double
    tempAve0QM: Double
    tempAve1QM: Double
    tempAve2QM: Double
    tempAve3QM: Double
    tempAve4QM: Double
    tempAve5QM: Double
    tempAve6QM: Double
    tempAve7QM: Double
    startDateTime: Time
    endDateTime: Time
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    finalQFSciRvw: String
  }

type TAATL0prime
  {
    heaterFlag: Integer
    pRTResistance: Double
    fanSpeed: Double
    turbineSpeed: Double
  }

type TckCollectionIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    sampleID: String
    targetTaxaPresent: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    numVialsSampleID: String
    archiveMedium: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    totalSampledArea: Double
    sampleCondition: String
    fulcrumVersion: String
    platformInfo: String
    adultCount: String
    larvaCount: String
    nymphCount: String
    samplingMethod: String
  }

type TckFielddataPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    measuredBy: String
    eventID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    plotType: String
    endDate: Time
    samplingProtocolVersion: String
    sampleCode: String
    dataQF: String
    totalSampledArea: Double
    sampleCondition: String
    namedLocation: String
    adultCount: String
    larvaCount: String
    nymphCount: String
    samplingMethod: String
  }

type TckIdentificationIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    scientificName: String
    sampleID: String
    targetTaxaPresent: String
    individualCount: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    subsampleID: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    archiveMedium: String
    deprecatedVialID: String
    archiveFacilityID: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    sexOrAge: String
    subkingdom: String
    infrakingdom: String
    superclass: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    superphylum: String
    infraphylum: String
    batchID: String
    subsampleCode: String
    subsampleFate: String
    identificationProtocolVersion: String
  }

type TckIdentificationQAIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    dataQF: String
    batchID: String
    genusPTD: Double
    speciesPTD: Double
    pDE: Double
  }

type TckPathogenPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    remarks: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    collectDate: Time
    individualCount: String
    subsampleID: String
    plotType: String
    endDate: Time
    laboratoryName: String
    testingID: String
    testedDate: Time
    testProtocolVersion: String
    testResult: String
    testPathogenName: String
    testedBy: String
    dataQF: String
    sampleCondition: String
    testingIDCode: String
    batchID: String
    namedLocation: String
    subsampleCode: String
  }

type TckPathogenqaIn
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    testedDate: Time
    dataQF: String
    batchID: String
    controlType: String
    criteriaMet: String
  }

type TckPathogenqaPub
  {
    uid: String
    remarks: String
    startDate: Time
    endDate: Time
    testedDate: Time
    dataQF: String
    batchID: String
    namedLocation: String
    controlType: String
    criteriaMet: String
  }

type TckPathogenresultsIn
  {
    uid: String
    plotID: String
    remarks: String
    individualCount: String
    subsampleID: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    testingID: String
    testedDate: Time
    testProtocolVersion: String
    testResult: String
    testPathogenName: String
    testedBy: String
    dataQF: String
    sampleCondition: String
    testingIDCode: String
    testingIDFate: String
    batchID: String
    subsampleCode: String
    subsampleFate: String
  }

type TckTaxonomyProcessedPub
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    individualCount: String
    acceptedTaxonID: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    subsampleID: String
    endDate: Time
    laboratoryName: String
    archiveMedium: String
    deprecatedVialID: String
    archiveFacilityID: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    sexOrAge: String
    subkingdom: String
    infrakingdom: String
    superclass: String
    dataQF: String
    sampleCondition: String
    superphylum: String
    infraphylum: String
    namedLocation: String
    subsampleCode: String
    identificationProtocolVersion: String
  }

type TckTaxonomyRawPub
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    sampleID: String
    collectDate: Time
    individualCount: String
    identifiedBy: String
    identifiedDate: Time
    scientificNameAuthorship: String
    subsampleID: String
    endDate: Time
    laboratoryName: String
    archiveMedium: String
    deprecatedVialID: String
    archiveFacilityID: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    sexOrAge: String
    subkingdom: String
    infrakingdom: String
    superclass: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    superphylum: String
    infraphylum: String
    namedLocation: String
    subsampleCode: String
    identificationProtocolVersion: String
  }

type TGW30Minute
  {
    startDateTime: Time
    endDateTime: Time
    groundwaterTempExpUncert: Double
    groundwaterTempMean: Double
    groundwaterTempMinimum: Double
    groundwaterTempMaximum: Double
    groundwaterTempVariance: Double
    groundwaterTempNumPts: Double
    groundwaterTempStdErMean: Double
    gWatTempRangeFailQM: Double
    gWatTempRangePassQM: Double
    gWatTempRangeNAQM: Double
    gWatTempPersistenceFailQM: Double
    gWatTempPersistencePassQM: Double
    gWatTempPersistenceNAQM: Double
    gWatTempStepFailQM: Double
    gWatTempStepPassQM: Double
    gWatTempStepNAQM: Double
    gWatTempNullFailQM: Double
    gWatTempNullPassQM: Double
    gWatTempNullNAQM: Double
    gWatTempGapFailQM: Double
    gWatTempGapPassQM: Double
    gWatTempGapNAQM: Double
    gWatTempSpikeFailQM: Double
    gWatTempSpikePassQM: Double
    gWatTempSpikeNAQM: Double
    gWatTempConsistencyFailQM: Double
    gWatTempConsistencyPassQM: Double
    gWatTempConsistencyNAQM: Double
    gWatTempAlphaQM: Double
    gWatTempBetaQM: Double
    gWatTempFinalQF: String
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    gWatTempFinalQFSciRvw: String
  }

type TGW5Minute
  {
    groundwaterTemp: Double
    startDateTime: Time
    endDateTime: Time
    groundwaterTempExpUncert: Double
    groundwaterTempRangeQF: Integer
    groundwaterTempPersistenceQF: Integer
    groundwaterTempStepQF: Integer
    groundwaterTempNullQF: Integer
    groundwaterTempGapQF: Integer
    groundwaterTempConsistencyQF: Integer
    groundwaterTempSpikeQF: Integer
    validCalQF: Integer
    sciRvwQF: String
  }

type THRPRE1min
  {
    tFPrecipBulk: Double
    tFPrecipExpUncert: Double
    tFPrecipRangeQF: Integer
    startDateTime: Time
    endDateTime: Time
    tFPrecipSciRvwQF: String
    tFPrecipValidCalQF: Integer
  }

type THRPRE30min
  {
    tFPrecipBulk: Double
    tFPrecipExpUncert: Double
    tFPrecipRangeQF: Integer
    startDateTime: Time
    endDateTime: Time
    tFPrecipSciRvwQF: String
    tFPrecipValidCalQF: Integer
  }

type TSD1Min
  {
    startDateTime: Time
    endDateTime: Time
    thermistorDepth: Double
    tsdWaterTemp: Double
    tsdWaterTempConsistQF: Integer
    tsdWaterTempExpUncert: Double
    tsdWaterTempGapQF: Integer
    tsdWaterTempNullQF: Integer
    tsdWaterTempRangeQF: Integer
    tsdWaterTempSpikeQF: Integer
    tsdWaterTempStepQF: Integer
    tsdWaterTempValidCalQF: Integer
    sciRvwQF: String
  }

type TSD30Min
  {
    startDateTime: Time
    endDateTime: Time
    thermistorDepth: Double
    tsdWaterTempAlphaQM: Double
    tsdWaterTempBetaQM: Double
    tsdWaterTempConsistencyFailQM: Double
    tsdWaterTempConsistencyNAQM: Double
    tsdWaterTempConsistencyPassQM: Double
    tsdWaterTempExpUncert: Double
    tsdWaterTempFinalQF: String
    tsdWaterTempGapFailQM: Double
    tsdWaterTempGapNAQM: Double
    tsdWaterTempGapPassQM: Double
    tsdWaterTempMaximum: Double
    tsdWaterTempMean: Double
    tsdWaterTempMinimum: Double
    tsdWaterTempNullFailQM: Double
    tsdWaterTempNullNAQM: Double
    tsdWaterTempNullPassQM: Double
    tsdWaterTempNumPts: String
    tsdWaterTempRangeFailQM: Double
    tsdWaterTempRangeNAQM: Double
    tsdWaterTempRangePassQM: Double
    tsdWaterTempSpikeFailQM: Double
    tsdWaterTempSpikeNAQM: Double
    tsdWaterTempSpikePassQM: Double
    tsdWaterTempStdErMean: Double
    tsdWaterTempStepFailQM: Double
    tsdWaterTempStepNAQM: Double
    tsdWaterTempStepPassQM: Double
    tsdWaterTempValidCalFailQM: Double
    tsdWaterTempValidCalNAQM: Double
    tsdWaterTempValidCalPassQM: Double
    tsdWaterTempVariance: Double
    tsdWaterTempFinalQFSciRvw: String
  }

type TSW
  {
    pRTResistance: Double
  }

type TSW30min
  {
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    startDateTime: Time
    endDateTime: Time
    surfWaterTempExpUncert: Double
    surfWaterTempMean: Double
    surfWaterTempMinimum: Double
    surfWaterTempMaximum: Double
    surfWaterTempVariance: Double
    surfWaterTempNumPts: Double
    surfWaterTempStdErMean: Double
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
  }

type TSW5min
  {
    rangeQAQCRpt: String
    persistenceQAQCRpt: String
    stepQAQCRpt: String
    nullQAQCRpt: String
    gapQAQCRpt: String
    consistencyQAQCRpt: String
    spikeQAQCRpt: String
    alphaQAQCRpt: String
    betaQAQCRpt: String
    rangeFailQM: Double
    rangePassQM: Double
    rangeNAQM: Double
    persistenceFailQM: Double
    persistencePassQM: Double
    persistenceNAQM: Double
    stepFailQM: Double
    stepPassQM: Double
    stepNAQM: Double
    nullFailQM: Double
    nullPassQM: Double
    nullNAQM: Double
    gapFailQM: Double
    gapPassQM: Double
    gapNAQM: Double
    spikeFailQM: Double
    spikePassQM: Double
    spikeNAQM: Double
    consistencyFailQM: Double
    consistencyPassQM: Double
    consistencyNAQM: Double
    alphaQM: Double
    betaQM: Double
    finalQF: String
    startDateTime: Time
    endDateTime: Time
    surfWaterTempExpUncert: Double
    surfWaterTempMean: Double
    surfWaterTempMinimum: Double
    surfWaterTempMaximum: Double
    surfWaterTempVariance: Double
    surfWaterTempNumPts: Double
    surfWaterTempStdErMean: Double
    validCalFailQM: Double
    validCalNAQM: Double
    validCalPassQM: Double
    validCalQAQCRpt: String
    finalQFSciRvw: String
  }

type UPAR
  {
    inPAR: Double
    outPAR: Double
  }

type UPAR1min
  {
    startDateTime: Time
    endDateTime: Time
    outuPARAlphaQAQCRpt: String
    outuPARAlphaQM: Double
    outuPARBetaQAQCRpt: String
    outuPARBetaQM: Double
    outuPARConsistencyFailQM: Double
    outuPARConsistencyNAQM: Double
    outuPARConsistencyPassQM: Double
    outuPARConsistencyQAQCRpt: String
    outuPARExpUncert: Double
    outuPARFinalQF: String
    outuPARGapFailQM: Double
    outuPARGapNAQM: Double
    outuPARGapPassQM: Double
    outuPARGapQAQCRpt: String
    outuPARMaximum: Double
    outuPARMean: Double
    outuPARMinimum: Double
    outuPARNullFailQM: Double
    outuPARNullNAQM: Double
    outuPARNullPassQM: Double
    outuPARNullQAQCRpt: String
    outuPARNumPts: Integer
    outuPARPersistenceFailQM: Double
    outuPARPersistenceNAQM: Double
    outuPARPersistencePassQM: Double
    outuPARPersistenceQAQCRpt: String
    outuPARRangeFailQM: Double
    outuPARRangeNAQM: Double
    outuPARRangePassQM: Double
    outuPARRangeQAQCRpt: String
    outuPARSpikeFailQM: Double
    outuPARSpikeNAQM: Double
    outuPARSpikePassQM: Double
    outuPARSpikeQAQCRpt: String
    outuPARStdErMean: Double
    outuPARStepFailQM: Double
    outuPARStepNAQM: Double
    outuPARStepPassQM: Double
    outuPARStepQAQCRpt: String
    outuPARValidCalFailQM: Double
    outuPARValidCalNAQM: Double
    outuPARValidCalPassQM: Double
    outuPARValidCalQAQCRpt: String
    outuPARVariance: Double
    uPARAlphaQAQCRpt: String
    uPARAlphaQM: Double
    uPARBetaQAQCRpt: String
    uPARBetaQM: Double
    uPARConsistencyFailQM: Double
    uPARConsistencyNAQM: Double
    uPARConsistencyPassQM: Double
    uPARConsistencyQAQCRpt: String
    uPARExpUncert: Double
    uPARFinalQF: String
    uPARGapFailQM: Double
    uPARGapNAQM: Double
    uPARGapPassQM: Double
    uPARGapQAQCRpt: String
    uPARMaximum: Double
    uPARMean: Double
    uPARMinimum: Double
    uPARNullFailQM: Double
    uPARNullNAQM: Double
    uPARNullPassQM: Double
    uPARNullQAQCRpt: String
    uPARNumPts: Integer
    uPARPersistenceFailQM: Double
    uPARPersistenceNAQM: Double
    uPARPersistencePassQM: Double
    uPARPersistenceQAQCRpt: String
    uPARRangeFailQM: Double
    uPARRangeNAQM: Double
    uPARRangePassQM: Double
    uPARRangeQAQCRpt: String
    uPARSpikeFailQM: Double
    uPARSpikeNAQM: Double
    uPARSpikePassQM: Double
    uPARSpikeQAQCRpt: String
    uPARStdErMean: Double
    uPARStepFailQM: Double
    uPARStepNAQM: Double
    uPARStepPassQM: Double
    uPARStepQAQCRpt: String
    uPARValidCalFailQM: Double
    uPARValidCalNAQM: Double
    uPARValidCalPassQM: Double
    uPARValidCalQAQCRpt: String
    uPARVariance: Double
    outuPARFinalQFSciRvw: String
    uPARFinalQFSciRvw: String
  }

type UPAR30min
  {
    startDateTime: Time
    endDateTime: Time
    outuPARAlphaQM: Double
    outuPARBetaQM: Double
    outuPARConsistencyFailQM: Double
    outuPARConsistencyNAQM: Double
    outuPARConsistencyPassQM: Double
    outuPARExpUncert: Double
    outuPARFinalQF: String
    outuPARGapFailQM: Double
    outuPARGapNAQM: Double
    outuPARGapPassQM: Double
    outuPARMaximum: Double
    outuPARMean: Double
    outuPARMinimum: Double
    outuPARNullFailQM: Double
    outuPARNullNAQM: Double
    outuPARNullPassQM: Double
    outuPARNumPts: Integer
    outuPARPersistenceFailQM: Double
    outuPARPersistenceNAQM: Double
    outuPARPersistencePassQM: Double
    outuPARRangeFailQM: Double
    outuPARRangeNAQM: Double
    outuPARRangePassQM: Double
    outuPARSpikeFailQM: Double
    outuPARSpikeNAQM: Double
    outuPARSpikePassQM: Double
    outuPARStdErMean: Double
    outuPARStepFailQM: Double
    outuPARStepNAQM: Double
    outuPARStepPassQM: Double
    outuPARValidCalFailQM: Double
    outuPARValidCalNAQM: Double
    outuPARValidCalPassQM: Double
    outuPARVariance: Double
    uPARAlphaQM: Double
    uPARBetaQM: Double
    uPARConsistencyFailQM: Double
    uPARConsistencyNAQM: Double
    uPARConsistencyPassQM: Double
    uPARExpUncert: Double
    uPARFinalQF: String
    uPARGapFailQM: Double
    uPARGapNAQM: Double
    uPARGapPassQM: Double
    uPARMaximum: Double
    uPARMean: Double
    uPARMinimum: Double
    uPARNullFailQM: Double
    uPARNullNAQM: Double
    uPARNullPassQM: Double
    uPARNumPts: Integer
    uPARPersistenceFailQM: Double
    uPARPersistenceNAQM: Double
    uPARPersistencePassQM: Double
    uPARRangeFailQM: Double
    uPARRangeNAQM: Double
    uPARRangePassQM: Double
    uPARSpikeFailQM: Double
    uPARSpikeNAQM: Double
    uPARSpikePassQM: Double
    uPARStdErMean: Double
    uPARStepFailQM: Double
    uPARStepNAQM: Double
    uPARStepPassQM: Double
    uPARValidCalFailQM: Double
    uPARValidCalNAQM: Double
    uPARValidCalPassQM: Double
    uPARVariance: Double
    outuPARFinalQFSciRvw: String
    uPARFinalQFSciRvw: String
  }

type VstApparentindividualIn
  {
    uid: String
    plotID: String
    remarks: String
    tagID: String
    measuredBy: String
    recordedBy: String
    eventID: String
    individualID: String
    growthForm: String
    canopyPosition: String
    plantStatus: String
    stemDiameter: Double
    measurementHeight: Double
    height: Double
    subplotID: String
    startDate: Time
    endDate: Time
    dataQF: String
    individualFate: String
    individualBarcode: String
    tagStatus: String
    nullFieldValidation: Double
    basalStemDiameter: Double
    basalStemDiameterMsrmntHeight: Double
    baseCrownHeight: Double
    breakDiameter: Double
    breakHeight: Double
    maxBaseCrownDiameter: Double
    maxCrownDiameter: Double
    ninetyBaseCrownDiameter: Double
    ninetyCrownDiameter: Double
    shape: String
    vdApexBreakHeight: Double
    vdApexHeight: Double
    vdBaseBreakHeight: Double
    vdBaseHeight: Double
    initialBandStemDiameter: Double
    initialDendrometerGap: Double
    dendrometerHeight: Double
    tempStemID: String
    measurementStrategy: String
    changedMeasurementLocation: String
    dendrometerInstallationDate: String
    initalGapMeasurementDate: Time
    dendrometerGap: Double
    dendrometerCondition: String
    bandStemDiameter: Double
  }

type VstApparentindividualPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    individualID: String
    growthForm: String
    canopyPosition: String
    plantStatus: String
    stemDiameter: Double
    measurementHeight: Double
    height: Double
    subplotID: String
    endDate: Time
    dataQF: String
    namedLocation: String
    individualBarcode: String
    tagStatus: String
    basalStemDiameter: Double
    basalStemDiameterMsrmntHeight: Double
    baseCrownHeight: Double
    breakDiameter: Double
    breakHeight: Double
    maxBaseCrownDiameter: Double
    maxCrownDiameter: Double
    ninetyBaseCrownDiameter: Double
    ninetyCrownDiameter: Double
    shape: String
    tempShrubStemID: String
  }

type VstMappingandtaggingIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    measuredBy: String
    recordedBy: String
    eventID: String
    individualID: String
    morphospeciesID: String
    subplotID: String
    morphospeciesIDRemarks: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    pointID: String
    dataQF: String
    individualFate: String
    individualBarcode: String
    yearBoutBegan: Integer
    cfcOnlyTag: String
    nestedSubplotID: String
    previouslyTaggedAs: String
    stemAzimuth: Double
    stemDistance: Double
    supportingStemIndividualID: String
    supportingStemTagID: String
    vstBarcode: String
    vstFate: String
    vstID: String
    initialBandStemDiameter: Double
    initialDendrometerGap: Double
    dendrometerHeight: Double
    recordType: String
  }

type VstMappingandtaggingPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    eventID: String
    individualID: String
    scientificName: String
    taxonRank: String
    morphospeciesID: String
    subplotID: String
    morphospeciesIDRemarks: String
    endDate: Time
    samplingProtocolVersion: String
    pointID: String
    dataQF: String
    namedLocation: String
    individualBarcode: String
    cfcOnlyTag: String
    nestedSubplotID: String
    previouslyTaggedAs: String
    stemAzimuth: Double
    stemDistance: Double
    supportingStemIndividualID: String
    recordType: String
  }

type VstNon-woodyIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    tagID: String
    measuredBy: String
    recordedBy: String
    eventID: String
    individualID: String
    morphospeciesID: String
    growthForm: String
    canopyPosition: String
    plantStatus: String
    stemDiameter: Double
    measurementHeight: Double
    height: Double
    subplotID: String
    morphospeciesIDRemarks: String
    startDate: Time
    endDate: Time
    dataQF: String
    individualFate: String
    individualBarcode: String
    tagStatus: String
    basalStemDiameter: Double
    baseCrownHeight: Double
    branchCount: String
    leafNumber: String
    maxBaseCrownDiameter: Double
    maxCrownDiameter: Double
    meanBasalDiameter: Double
    meanBladeLength: Double
    meanBranchLength: Double
    meanLeafLength: Double
    meanPetioleLength: Double
    nestedSubplotID: String
    newPadCount: String
    ninetyBaseCrownDiameter: Double
    ninetyCrownDiameter: Double
    oldPadCount: String
    shape: String
    stemCount: String
    padCountValidation: String
    stemLength: Double
  }

type VstPerplotperyearIn
  {
    uid: String
    plotID: String
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    targetTaxaPresent: String
    startDate: Time
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    samplingImpractical: String
    yearBoutBegan: Integer
    cactiAbsentList: String
    cactiPresent: String
    fernsAbsentList: String
    fernsPresent: String
    lianasAbsentList: String
    lianasPresent: String
    nestedSubplotAreaLiana: String
    nestedSubplotAreaOther: String
    nestedSubplotAreaShrubSapling: String
    ocotillosAbsentList: String
    ocotillosPresent: String
    palmsAbsentList: String
    palmsPresent: String
    shrubsAbsentList: String
    shrubsPresent: String
    totalSampledAreaLiana: Double
    totalSampledAreaOther: Double
    totalSampledAreaShrubSapling: Double
    totalSampledAreaTrees: Double
    treesAbsentList: String
    treesPresent: String
    xerophyllumAbsentList: String
    xerophyllumPresent: String
    yuccasAbsentList: String
    yuccasPresent: String
    eventType: String
    dataCollected: String
  }

type VstPerplotperyearPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    remarks: String
    measuredBy: String
    recordedBy: String
    eventID: String
    nlcdClass: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    plotType: String
    plotSize: Double
    easting: Double
    northing: Double
    utmZone: String
    endDate: Time
    samplingProtocolVersion: String
    dataQF: String
    namedLocation: String
    cactiAbsentList: String
    cactiPresent: String
    fernsAbsentList: String
    fernsPresent: String
    lianasAbsentList: String
    lianasPresent: String
    nestedSubplotAreaLiana: String
    nestedSubplotAreaOther: String
    nestedSubplotAreaShrubSapling: String
    ocotillosAbsentList: String
    ocotillosPresent: String
    palmsAbsentList: String
    palmsPresent: String
    shrubsAbsentList: String
    shrubsPresent: String
    totalSampledAreaLiana: Double
    totalSampledAreaOther: Double
    totalSampledAreaShrubSapling: Double
    totalSampledAreaTrees: Double
    treesAbsentList: String
    treesPresent: String
    xerophyllumAbsentList: String
    xerophyllumPresent: String
    yuccasAbsentList: String
    yuccasPresent: String
  }

type VstShrubgroupIn
  {
    uid: String
    plotID: String
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    eventID: String
    morphospeciesID: String
    subplotID: String
    morphospeciesIDRemarks: String
    startDate: Time
    endDate: Time
    dataQF: String
    aGroupHeight: Double
    bGroupHeight: Double
    cGroupHeight: Double
    dGroupHeight: Double
    eGroupHeight: Double
    canopyArea: Double
    deadPercent: Double
    groupID: String
    livePercent: Double
    meanHeight: Double
    nestedSubplotID: String
    volumePercent: Double
  }

type VstShrubgroupPub
  {
    uid: String
    domainID: String
    siteID: String
    plotID: String
    date: Time
    identificationReferences: String
    remarks: String
    taxonID: String
    identificationQualifier: String
    measuredBy: String
    recordedBy: String
    eventID: String
    scientificName: String
    taxonRank: String
    subplotID: String
    endDate: Time
    dataQF: String
    namedLocation: String
    canopyArea: Double
    deadPercent: Double
    groupID: String
    livePercent: Double
    meanHeight: Double
    nestedSubplotID: String
    volumePercent: Double
  }

type WaqInstantaneousPub
  {
    specificConductance: Double
    startDate: Time
    endDate: Time
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    pH: Double
    chlorophyll: Double
    fDOM: Double
    turbidity: Double
    sensorDepth: Double
    sensorDepthValidCalQF: Integer
    specificConductanceValidCalQF: Integer
    buoyNAFlag: Integer
    chlorophyllAlphaQF: Integer
    chlorophyllBetaQF: Integer
    chlorophyllConsistQF: Integer
    chlorophyllExpUncert: Double
    chlorophyllFinalQF: String
    chlorophyllFinalQFSciRvw: String
    chlorophyllGapQF: Integer
    chlorophyllNullQF: Integer
    chlorophyllPersistenceQF: Integer
    chlorophyllRangeQF: Integer
    chlorophyllSpikeQF: Integer
    chlorophyllStepQF: Integer
    chlorophyllValidCalQF: Integer
    dissolvedOxygenAlphaQF: Integer
    dissolvedOxygenBetaQF: Integer
    dissolvedOxygenConsistQF: Integer
    dissolvedOxygenExpUncert: Double
    dissolvedOxygenFinalQF: Integer
    dissolvedOxygenFinalQFSciRvw: Integer
    dissolvedOxygenGapQF: Integer
    dissolvedOxygenNullQF: Integer
    dissolvedOxygenPersistenceQF: Integer
    dissolvedOxygenRangeQF: Integer
    dissolvedOxygenSatAlphaQF: Integer
    dissolvedOxygenSatBetaQF: Integer
    dissolvedOxygenSatConsistQF: Integer
    dissolvedOxygenSatExpUncert: Double
    dissolvedOxygenSatFinalQF: String
    dissolvedOxygenSatFinalQFSciRvw: String
    dissolvedOxygenSatGapQF: Integer
    dissolvedOxygenSatNullQF: Integer
    dissolvedOxygenSatPersistQF: Integer
    dissolvedOxygenSatRangeQF: Integer
    dissolvedOxygenSatSpikeQF: Integer
    dissolvedOxygenSatStepQF: Integer
    dissolvedOxygenSatValidCalQF: Integer
    dissolvedOxygenSpikeQF: Integer
    dissolvedOxygenStepQF: Integer
    dissolvedOxygenValidCalQF: Integer
    fDOMAbsQF: Integer
    fDOMAlphaQF: Integer
    fDOMBetaQF: Integer
    fDOMConsistQF: Integer
    fDOMExpUncert: Double
    fDOMFinalQF: String
    fDOMFinalQFSciRvw: String
    fDOMGapQF: Integer
    fDOMNullQF: Integer
    fDOMPersistenceQF: Integer
    fDOMRangeQF: Integer
    fDOMSpikeQF: Integer
    fDOMStepQF: Integer
    fDOMTempQF: Integer
    fDOMValidCalQF: Integer
    pHAlphaQF: Integer
    pHBetaQF: Integer
    pHConsistQF: Integer
    pHExpUncert: Double
    pHFinalQF: String
    pHFinalQFSciRvw: String
    pHGapQF: Integer
    pHNullQF: Integer
    pHPersistenceQF: Integer
    pHRangeQF: Integer
    pHSpikeQF: Integer
    pHStepQF: Integer
    pHValidCalQF: Integer
    sensorDepthExpUncert: Double
    sensorDepthFinalQFSciRvw: Integer
    specificCondFinalQFSciRvw: String
    specificConductanceAlphaQF: Integer
    specificConductanceBetaQF: Integer
    specificConductanceConsistQF: Integer
    specificConductanceExpUncert: Double
    specificCondFinalQF: Integer
    specificConductanceGapQF: Integer
    specificConductanceNullQF: Integer
    specificConductancePersistQF: Integer
    specificConductanceRangeQF: Integer
    specificConductanceSpikeQF: Integer
    specificConductanceStepQF: Integer
    turbidityAlphaQF: Integer
    turbidityBetaQF: Integer
    turbidityConsistQF: Integer
    turbidityExpUncert: Double
    turbidityFinalQF: String
    turbidityFinalQFSciRvw: String
    turbidityGapQF: Integer
    turbidityNullQF: Integer
    turbidityPersistenceQF: Integer
    turbidityRangeQF: Integer
    turbiditySpikeQF: Integer
    turbidityStepQF: Integer
    turbidityValidCalQF: Integer
    sensorDepthAlphaQF: Integer
    sensorDepthBetaQF: Integer
    sensorDepthConsistQF: Integer
    sensorDepthGapQF: Integer
    sensorDepthNullQF: Integer
    sensorDepthPersistQF: Integer
    sensorDepthRangeQF: Integer
    spectrumCount: Integer
    rawCalibratedfDOM: Double
    chlorophyllSuspectCalQF: Integer
    dissolvedOxygenSuspectCalQF: Integer
    dissOxygenSatSuspectCalQF: Integer
    fDOMSuspectCalQF: Integer
    pHSuspectCalQF: Integer
    sensorDepthSuspectCalQF: Integer
    specificCondSuspectCalQF: Integer
    turbiditySuspectCalQF: Integer
    sensorDepthFinalQF: Integer
  }

type WaterQuality
  {
    specificConductance: Double
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    conductance: Double
    batteryVoltage: Double
    surfaceWaterTemperature: Double
    sensorVoltage: Double
    pH: Double
    pHvoltage: Double
    blueGreenAlgaePhycocyanin: Double
    chlorophyll: Double
    fDOM: Double
    turbidity: Double
    sondeSurfaceWaterPressure: Double
    sensorDepth: Double
    chlorophyllRaw: Double
    blueGreenAlgaeRaw: Double
    fDOMRaw: Double
    turbidityRaw: Double
    wiperPosition: Double
    sondeValve: Integer
  }

type WaterTempDepthBuoy
  {
    depth0WaterTemp: Double
    depth1WaterTemp: Double
    depth2WaterTemp: Double
    depth3WaterTemp: Double
    depth4WaterTemp: Double
    depth5WaterTemp: Double
    depth6WaterTemp: Double
    depth7WaterTemp: Double
    depth8WaterTemp: Double
    depth9WaterTemp: Double
    depth10WaterTemp: Double
  }

type WcExternalLabDataIn
  {
    uid: String
    siteID: String
    remarks: String
    sampleID: String
    collectDate: Time
    stationID: String
    startDate: Time
    laboratoryName: String
    pH: Double
    externalConductance: Double
    waterCarbonate: Double
    waterBicarbonate: Double
    externalANC: Double
    waterCalcium: Double
    waterMagnesium: Double
    waterSodium: Double
    waterPotassium: Double
    waterSulfate: Double
    waterChlorine: Double
    waterManganese: Double
    waterIron: Double
    waterBromine: Double
    waterFluorine: Double
    waterSilica: Double
    totalSuspendedSolids: Double
    totalSuspendedSolidsDryMass: Double
    totalDissolvedSolids: Double
    waterNitrateAndNitriteN: Double
    waterNitriteN: Double
    waterAmmoniumN: Double
    waterOrthophosphateP: Double
    waterTotalNitrogen: Double
    totalDissolvedNitrogen: Double
    dissolvedInorganicCarbon: Double
    dissolvedOrganicCarbon: Double
    waterTotalOrganicCarbon: Double
    waterTotalPhosphorus: Double
    totalDissolvedPhosphorus: Double
    totalParticulateCarbonMass: Double
    totalParticulateNitrogenMass: Double
    uvAbsorbance250: Double
    uvAbsorbance284: Double
    nitriteRunID: String
    nh4RunID: String
    orthoPRunID: String
    tnRunID: String
    tdnRunID: String
    dicRunID: String
    docRunID: String
    tocRunID: String
    tpcnRunDate: Time
    uvBatchID: String
    coolerTemp: Double
    externalLabMetadata: String
    internalLabID: String
    shipmentReceivedDate: Time
    receivedBy: String
    shipDate: Time
    shipmentID: String
    shipmentCondition: String
    shipmentWarmQF: Double
    shipmentLateQF: Double
    uploadDate: Time
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    shipmentLateTest: Double
    nitrateNitriteRunID: String
  }

type WcExternalLabDataByAnalyteIn
  {
    uid: String
    remarks: String
    sampleID: String
    collectDate: Time
    stationID: String
    startDate: Time
    laboratoryName: String
    coolerTemp: Double
    externalLabMetadata: String
    internalLabID: String
    shipmentWarmQF: Double
    uploadDate: Time
    analyte: String
    analyteUnits: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    runID: String
    analyteConcentration: Double
  }

type WcExternalLabSummaryDataIn
  {
    uid: String
    startDate: Time
    endDate: Time
    laboratoryName: String
    analyte: String
    instrument: String
    method: String
    methodModification: String
    methodDetectionLimit: Double
    analyteUnits: String
    precision: Double
    measurementUncertainty: Double
    internalLabName: String
    labSpecificStartDate: Time
    labSpecificEndDate: Time
    absorbancePrecision: String
    measurementUncertaintyUnits: String
    precisionRepeatabilityUnits: String
  }

type WdiCollectionPub
  {
    uid: String
    remarks: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    aCollectedBy: String
    bCollectedBy: String
    samplingProtocolVersion: String
    equipmentProblems: String
    equipmentProblemsCategory: String
    equipmentProblemsRemarks: String
    sampleCode: String
    isoSubsampleID: String
    isoSubsampleBarcode: String
    dataQF: String
    isoTestSubsampleID: String
    isoTestSubsampleBarcode: String
    namedLocation: String
  }

type WdiCollectionIsoPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    isoSubsampleMass: Double
    sampleCode: String
    isoSubsampleID: String
    isoSubsampleBarcode: String
    dataQF: String
    isoSubsampleCondition: String
    isoSubsampleConditionRemarks: String
    namedLocation: String
  }

type WdiCollectionIsoTestPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    sampleCode: String
    dataQF: String
    isoTestSubsampleID: String
    isoTestSubsampleBarcode: String
    isoTestSubsampleVolume: Double
    namedLocation: String
  }

type WdiIsoPerSamplePub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    externalRemarks: String
    analysisDate: Time
    d18OWater: Double
    d2HWater: Double
    sampleCode: String
    dataQF: String
    isoTestSubsampleID: String
    isoTestSubsampleBarcode: String
    d18OsdWater: Double
    d2HsdWater: Double
    sampleCondition: String
    namedLocation: String
  }

type WdpChemLabIn
  {
    uid: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    pH: Double
    shipmentCondition: String
    externalRemarks: String
    receivedDate: Time
    locationID: String
    analysisDate: Time
    chemSubsampleID: String
    chemSubsampleFate: String
    chemSubsampleBarcode: String
    dataQF: String
    sampleCondition: String
    labCondition: String
    labConditionRemarks: String
    pHUncertainty: Double
    precipAmmonium: Double
    precipAmmoniumFlag: String
    precipAmmoniumUncertainty: Double
    precipBromide: Double
    precipBromideFlag: String
    precipBromideUncertainty: Double
    precipCalcium: Double
    precipCalciumFlag: String
    precipCalciumUncertainty: Double
    precipChloride: Double
    precipChlorideFlag: String
    precipChlorideUncertainty: Double
    precipConductivity: Double
    precipConductivityUncertainty: Double
    precipMagnesium: Double
    precipMagnesiumFlag: String
    precipMagnesiumUncertainty: Double
    precipNitrate: Double
    precipNitrateFlag: String
    precipNitrateUncertainty: Double
    precipPhosphate: Double
    precipPhosphateFlag: String
    precipPhosphateUncertainty: Double
    precipPotassium: Double
    precipPotassiumFlag: String
    precipPotassiumUncertainty: Double
    precipSodium: Double
    precipSodiumFlag: String
    precipSodiumUncertainty: Double
    precipSulfate: Double
    precipSulfateFlag: String
    precipSulfateUncertainty: Double
    sampleMass: Double
    pHFlag: String
    precipConductivityFlag: String
  }

type WdpChemLabPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    laboratoryName: String
    pH: Double
    shipmentCondition: String
    externalRemarks: String
    receivedDate: Time
    analysisDate: Time
    sampleCode: String
    chemSubsampleID: String
    chemSubsampleBarcode: String
    dataQF: String
    sampleCondition: String
    labCondition: String
    labConditionRemarks: String
    pHUncertainty: Double
    precipAmmonium: Double
    precipAmmoniumFlag: String
    precipAmmoniumUncertainty: Double
    precipBromide: Double
    precipBromideFlag: String
    precipBromideUncertainty: Double
    precipCalcium: Double
    precipCalciumFlag: String
    precipCalciumUncertainty: Double
    precipChloride: Double
    precipChlorideFlag: String
    precipChlorideUncertainty: Double
    precipConductivity: Double
    precipConductivityUncertainty: Double
    precipMagnesium: Double
    precipMagnesiumFlag: String
    precipMagnesiumUncertainty: Double
    precipNitrate: Double
    precipNitrateFlag: String
    precipNitrateUncertainty: Double
    precipPhosphate: Double
    precipPhosphateFlag: String
    precipPhosphateUncertainty: Double
    precipPotassium: Double
    precipPotassiumFlag: String
    precipPotassiumUncertainty: Double
    precipSodium: Double
    precipSodiumFlag: String
    precipSodiumUncertainty: Double
    precipSulfate: Double
    precipSulfateFlag: String
    precipSulfateUncertainty: Double
    namedLocation: String
    sampleMass: Double
  }

type WdpCollectionIn
  {
    uid: String
    remarks: String
    sampleID: String
    setDate: Time
    collectDate: Time
    aCollectedBy: String
    bCollectedBy: String
    samplingProtocolVersion: String
    locationID: String
    equipmentProblems: String
    equipmentProblemsCategory: String
    equipmentProblemsRemarks: String
    aSetBy: String
    bSetBy: String
    sampleFate: String
    sampleCode: String
    chemSubsampleID: String
    chemSubsampleFate: String
    chemSubsampleBarcode: String
    isoSubsampleID: String
    isoSubsampleFate: String
    isoSubsampleBarcode: String
    dataQF: String
    isoTestSubsampleID: String
    isoTestSubsampleFate: String
    isoTestSubsampleBarcode: String
    fulcrumVersion: String
    platformInfo: String
    shippingCaseCode: String
  }

type WdpCollectionPub
  {
    uid: String
    remarks: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    setDate: Time
    collectDate: Time
    aCollectedBy: String
    bCollectedBy: String
    samplingProtocolVersion: String
    equipmentProblems: String
    equipmentProblemsCategory: String
    equipmentProblemsRemarks: String
    sampleCode: String
    chemSubsampleID: String
    chemSubsampleBarcode: String
    dataQF: String
    namedLocation: String
  }

type WdpCollectionChemIn
  {
    uid: String
    setDate: Time
    collectDate: Time
    locationID: String
    chemSubsampleBottleNumber: String
    chemSubsampleBottleStartMass: Double
    chemSubsampleBottleEndMass: Double
    chemSubsampleMass: Double
    chemSubsampleID: String
    chemSubsampleFate: String
    chemSubsampleBarcode: String
    dataQF: String
    chemSubsampleCondition: String
    chemSubsampleConditionRemarks: String
    chemFunnelCode: String
    chemTubeCode: String
    extChemBottleCode: String
  }

type WdpCollectionChemPub
  {
    uid: String
    sampleID: String
    setDate: Time
    collectDate: Time
    chemSubsampleMass: Double
    sampleCode: String
    chemSubsampleID: String
    chemSubsampleBarcode: String
    dataQF: String
    chemSubsampleCondition: String
    chemSubsampleConditionRemarks: String
    namedLocation: String
  }

type WdpCollectionIsoIn
  {
    uid: String
    setDate: Time
    collectDate: Time
    locationID: String
    isoSubsampleBottleNumber: String
    isoSubsampleBottleStartMass: Double
    isoSubsampleBottleEndMass: Double
    isoSubsampleMass: Double
    isoSubsampleID: String
    isoSubsampleFate: String
    isoSubsampleBarcode: String
    dataQF: String
    isoSubsampleCondition: String
    isoSubsampleConditionRemarks: String
    extIsoBottleCode: String
    isoFunnelCode: String
    isoTubeCode: String
  }

type WdpCollectionIsoTestIn
  {
    uid: String
    setDate: Time
    collectDate: Time
    locationID: String
    dataQF: String
    isoTestSubsampleID: String
    isoTestSubsampleFate: String
    isoTestSubsampleBarcode: String
    isoTestSubsampleVolume: Double
  }

type WdpSensorIn
  {
    chamberTemperature: Double
    powerStatus: Double
    lidStatusWetDep: Double
  }

type WdpSensorPub
  {
    date: Time
    chamberTemperature: Double
    powerStatus: Double
    lidStatusWetDep: Double
  }

type WindSpeedDirBuoy
  {
    windSpeedMean: Double
    windDirMean: Double
    vectorAverageHeading: Double
  }

type WpaFieldSuperParentIn
  {
    uid: String
    remarks: String
    eventID: String
    collectDate: Time
    stationID: String
    waterTemp: Double
    specificConductance: Double
    aCollectedBy: String
    bCollectedBy: String
    altLocation: String
    altLongitude: Double
    altLatitude: Double
    maxDepth: Double
    upperSegmentDepth: Double
    lowerSegmentDepth: Double
    startDate: Time
    waterColorDescrip: String
    dissolvedOxygen: Double
    dissolvedOxygenSaturation: Double
    pH: Double
    wellWaterDepth: Double
    sampleDepth: Double
    sampleExtractionMethod: String
    wellVolumePurged: Double
    samplerType: String
    parentSampleID: String
    lakeSampleDepth1: Double
    lakeSampleDepth2: Double
    sdgSamplingProtocolVersion: String
    asiSamplingProtocolVersion: String
    aquaticSiteType: String
    parentSampleFate: String
    parentSampleCode: String
    sampleClass: String
    fieldDataQF: String
    samplingImpractical: String
    additionalCoordUncertainty: Double
    fulcrumVersion: String
    platformInfo: String
    waterClarityDescrip: String
    altCoordinateUncertainty: Double
    altGeodeticDatum: String
    amcSamplingProtocolVersion: String
    swcSamplingProtocolVersion: String
    measurementDepth: Double
    pumpStartTime: Time
    totalWellDepth: Double
    volume3Wells: Double
    waterColumnHeight: Double
    wellRedeveloped: String
    wellRedevelopedDate: Time
    maxAllowableDrawdown: Double
    measTotalWellDepth: Double
    pumpPlacementDepth: Double
    screenedIntervalDepth: Double
    wellDepthChanged: String
    pumpPlacementDate: Time
    adequateSampleVol: String
  }

type WpaWellStabilizingIn
  {
    uid: String
    collectDate: Time
    stationID: String
    waterTemp: Double
    specificConductance: Double
    startDate: Time
    waterColorDescrip: String
    dissolvedOxygenSaturation: Double
    wellDischargeRate: Double
    parentSampleID: String
    parentSampleFate: String
    parentSampleCode: String
    fulcrumVersion: String
    platformInfo: String
    waterClarityDescrip: String
    groundwaterFieldDataQF: String
    measurementDate: Time
  }

type WSDBuoy2min
  {
    startDateTime: Time
    endDateTime: Time
    buoyCompGapFailQM: Double
    buoyCompGapNAQM: Double
    buoyCompGapPassQM: Double
    buoyCompGapQAQCRpt: String
    buoyCompNullFailQM: Double
    buoyCompNullNAQM: Double
    buoyCompNullPassQM: Double
    buoyCompNullQAQCRpt: String
    buoyCompPersistenceFailQM: Double
    buoyCompPersistenceNAQM: Double
    buoyCompPersistencePassQM: Double
    buoyCompPersistenceQAQCRpt: String
    buoyCompRangeFailQM: Double
    buoyCompRangeNAQM: Double
    buoyCompRangePassQM: Double
    buoyCompRangeQAQCRpt: String
    buoyCompSpikeFailQM: Double
    buoyCompSpikeNAQM: Double
    buoyCompSpikePassQM: Double
    buoyCompSpikeQAQCRpt: String
    buoyCompStepFailQM: Double
    buoyCompStepNAQM: Double
    buoyCompStepPassQM: Double
    buoyCompStepQAQCRpt: String
    buoyWindDirAlphaQAQCRpt: String
    buoyWindDirAlphaQM: Double
    buoyWindDirBetaQAQCRpt: String
    buoyWindDirBetaQM: Double
    buoyWindDirCalmWindFailQM: Double
    buoyWindDirCalmWindNAQM: Double
    buoyWindDirCalmWindPassQM: Double
    buoyWindDirCalmWindQAQCRpt: String
    buoyWindDirConsistencyFailQM: Double
    buoyWindDirConsistencyNAQM: Double
    buoyWindDirConsistencyPassQM: Double
    buoyWindDirConsistencyQAQCRpt: String
    buoyWindDirDeadZoneFailQM: Double
    buoyWindDirDeadZoneNAQM: Double
    buoyWindDirDeadZonePassQM: Double
    buoyWindDirDeadZoneQAQCRpt: String
    buoyWindDirExpUncert: Double
    buoyWindDirFinalQF: String
    buoyWindDirFinalQFSciRvw: String
    buoyWindDirGapFailQM: Double
    buoyWindDirGapNAQM: Double
    buoyWindDirGapPassQM: Double
    buoyWindDirGapQAQCRpt: String
    buoyWindDirMean: Double
    buoyWindDirNullFailQM: Double
    buoyWindDirNullNAQM: Double
    buoyWindDirNullPassQM: Double
    buoyWindDirNullQAQCRpt: String
    buoyWindDirNumPts: Double
    buoyWindDirPersistenceFailQM: Double
    buoyWindDirPersistenceNAQM: Double
    buoyWindDirPersistencePassQM: Double
    buoyWindDirPersistenceQAQCRpt: String
    buoyWindDirRangeFailQM: Double
    buoyWindDirRangeNAQM: Double
    buoyWindDirRangePassQM: Double
    buoyWindDirRangeQAQCRpt: String
    buoyWindDirSpikeFailQM: Double
    buoyWindDirSpikeNAQM: Double
    buoyWindDirSpikePassQM: Double
    buoyWindDirSpikeQAQCRpt: String
    buoyWindDirStdErMean: Double
    buoyWindDirStepFailQM: Double
    buoyWindDirStepNAQM: Double
    buoyWindDirStepPassQM: Double
    buoyWindDirStepQAQCRpt: String
    buoyWindDirValidCalFailQM: Double
    buoyWindDirValidCalNAQM: Double
    buoyWindDirValidCalPassQM: Double
    buoyWindDirValidCalQAQCRpt: String
    buoyWindDirVariance: Double
    buoyWindSpeedAlphaQAQCRpt: String
    buoyWindSpeedAlphaQM: Double
    buoyWindSpeedBetaQAQCRpt: String
    buoyWindSpeedBetaQM: Double
    buoyWindSpeedConsistencyFailQM: Double
    buoyWindSpeedConsistencyNAQM: Double
    buoyWindSpeedConsistencyPassQM: Double
    buoyWindSpeedConsistencyQAQCRpt: String
    buoyWindSpeedExpUncert: Double
    buoyWindSpeedFinalQF: String
    buoyWindSpeedFinalQFSciRvw: String
    buoyWindSpeedGapFailQM: Double
    buoyWindSpeedGapNAQM: Double
    buoyWindSpeedGapPassQM: Double
    buoyWindSpeedGapQAQCRpt: String
    buoyWindSpeedMaximum: Double
    buoyWindSpeedMean: Double
    buoyWindSpeedMinimum: Double
    buoyWindSpeedNullFailQM: Double
    buoyWindSpeedNullNAQM: Double
    buoyWindSpeedNullPassQM: Double
    buoyWindSpeedNullQAQCRpt: String
    buoyWindSpeedNumPts: Double
    buoyWindSpeedPersistenceFailQM: Double
    buoyWindSpeedPersistenceNAQM: Double
    buoyWindSpeedPersistencePassQM: Double
    buoyWindSpeedPersistenceQAQCRpt: String
    buoyWindSpeedRangeFailQM: Double
    buoyWindSpeedRangeNAQM: Double
    buoyWindSpeedRangePassQM: Double
    buoyWindSpeedRangeQAQCRpt: String
    buoyWindSpeedSpikeFailQM: Double
    buoyWindSpeedSpikeNAQM: Double
    buoyWindSpeedSpikePassQM: Double
    buoyWindSpeedSpikeQAQCRpt: String
    buoyWindSpeedStdErMean: Double
    buoyWindSpeedStepFailQM: Double
    buoyWindSpeedStepNAQM: Double
    buoyWindSpeedStepPassQM: Double
    buoyWindSpeedStepQAQCRpt: String
    buoyWindSpeedValidCalFailQM: Double
    buoyWindSpeedValidCalNAQM: Double
    buoyWindSpeedValidCalPassQM: Double
    buoyWindSpeedValidCalQAQCRpt: String
    buoyWindSpeedVariance: Double
  }

type WSDBuoy30min
  {
    startDateTime: Time
    endDateTime: Time
    buoyCompGapFailQM: Double
    buoyCompGapNAQM: Double
    buoyCompGapPassQM: Double
    buoyCompNullFailQM: Double
    buoyCompNullNAQM: Double
    buoyCompNullPassQM: Double
    buoyCompPersistenceFailQM: Double
    buoyCompPersistenceNAQM: Double
    buoyCompPersistencePassQM: Double
    buoyCompRangeFailQM: Double
    buoyCompRangeNAQM: Double
    buoyCompRangePassQM: Double
    buoyCompSpikeFailQM: Double
    buoyCompSpikeNAQM: Double
    buoyCompSpikePassQM: Double
    buoyCompStepFailQM: Double
    buoyCompStepNAQM: Double
    buoyCompStepPassQM: Double
    buoyWindDirAlphaQM: Double
    buoyWindDirBetaQM: Double
    buoyWindDirCalmWindFailQM: Double
    buoyWindDirCalmWindNAQM: Double
    buoyWindDirCalmWindPassQM: Double
    buoyWindDirConsistencyFailQM: Double
    buoyWindDirConsistencyNAQM: Double
    buoyWindDirConsistencyPassQM: Double
    buoyWindDirDeadZoneFailQM: Double
    buoyWindDirDeadZoneNAQM: Double
    buoyWindDirDeadZonePassQM: Double
    buoyWindDirExpUncert: Double
    buoyWindDirFinalQF: String
    buoyWindDirFinalQFSciRvw: String
    buoyWindDirGapFailQM: Double
    buoyWindDirGapNAQM: Double
    buoyWindDirGapPassQM: Double
    buoyWindDirMean: Double
    buoyWindDirNullFailQM: Double
    buoyWindDirNullNAQM: Double
    buoyWindDirNullPassQM: Double
    buoyWindDirNumPts: Double
    buoyWindDirPersistenceFailQM: Double
    buoyWindDirPersistenceNAQM: Double
    buoyWindDirPersistencePassQM: Double
    buoyWindDirRangeFailQM: Double
    buoyWindDirRangeNAQM: Double
    buoyWindDirRangePassQM: Double
    buoyWindDirSpikeFailQM: Double
    buoyWindDirSpikeNAQM: Double
    buoyWindDirSpikePassQM: Double
    buoyWindDirStdErMean: Double
    buoyWindDirStepFailQM: Double
    buoyWindDirStepNAQM: Double
    buoyWindDirStepPassQM: Double
    buoyWindDirValidCalFailQM: Double
    buoyWindDirValidCalNAQM: Double
    buoyWindDirValidCalPassQM: Double
    buoyWindDirVariance: Double
    buoyWindSpeedAlphaQM: Double
    buoyWindSpeedBetaQM: Double
    buoyWindSpeedConsistencyFailQM: Double
    buoyWindSpeedConsistencyNAQM: Double
    buoyWindSpeedConsistencyPassQM: Double
    buoyWindSpeedExpUncert: Double
    buoyWindSpeedFinalQF: String
    buoyWindSpeedFinalQFSciRvw: String
    buoyWindSpeedGapFailQM: Double
    buoyWindSpeedGapNAQM: Double
    buoyWindSpeedGapPassQM: Double
    buoyWindSpeedMaximum: Double
    buoyWindSpeedMean: Double
    buoyWindSpeedMinimum: Double
    buoyWindSpeedNullFailQM: Double
    buoyWindSpeedNullNAQM: Double
    buoyWindSpeedNullPassQM: Double
    buoyWindSpeedNumPts: Double
    buoyWindSpeedPersistenceFailQM: Double
    buoyWindSpeedPersistenceNAQM: Double
    buoyWindSpeedPersistencePassQM: Double
    buoyWindSpeedRangeFailQM: Double
    buoyWindSpeedRangeNAQM: Double
    buoyWindSpeedRangePassQM: Double
    buoyWindSpeedSpikeFailQM: Double
    buoyWindSpeedSpikeNAQM: Double
    buoyWindSpeedSpikePassQM: Double
    buoyWindSpeedStdErMean: Double
    buoyWindSpeedStepFailQM: Double
    buoyWindSpeedStepNAQM: Double
    buoyWindSpeedStepPassQM: Double
    buoyWindSpeedValidCalFailQM: Double
    buoyWindSpeedValidCalNAQM: Double
    buoyWindSpeedValidCalPassQM: Double
    buoyWindSpeedVariance: Double
  }

type WssDaily
  {
    date: Time
    corPresQF: String
    dewTempQF: String
    precipQF: String
    rHQF: String
    shortRadQF: String
    staPresQF: String
    tempTripleQF: String
    windSpeedQF: String
    wssCorPres: Double
    wssDewTempMaximum: Double
    wssDewTempMean: Double
    wssDewTempMinimum: Double
    wssDewTempStdErMean: Double
    wssDewTempVariance: Double
    wssPrecipTotal: Double
    wssRHMaximum: Double
    wssRHMean: Double
    wssRHMinimum: Double
    wssRHStdErMean: Double
    wssRHVariance: Double
    wssShortRadMaximum: Double
    wssShortRadMean: Double
    wssShortRadMinimum: Double
    wssShortRadStdErMean: Double
    wssShortRadVariance: Double
    wssStaPresMaximum: Double
    wssStaPresMean: Double
    wssStaPresMinimum: Double
    wssStaPresStdErMean: Double
    wssStaPresVariance: Double
    wssTempTripleMaximum: Double
    wssTempTripleMean: Double
    wssTempTripleMinimum: Double
    wssTempTripleStdErMean: Double
    wssTempTripleVariance: Double
    wssWindSpeedMaximum: Double
    wssWindSpeedMean: Double
    wssWindSpeedMinimum: Double
    wssWindSpeedStdErMean: Double
    wssWindSpeedVariance: Double
    wssDewTempNumPts: Double
    wssRHNumPts: Double
    wssShortRadNumPts: Double
    wssStaPresNumPts: Double
    wssTempTripleNumPts: Double
    wssWindSpeedNumPts: Double
  }

type WssMonthly
  {
    yearMonth: Time
    corPresQF: String
    dewTempQF: String
    precipQF: String
    rHQF: String
    shortRadQF: String
    staPresQF: String
    tempTripleQF: String
    windSpeedQF: String
    wssCorPres: Double
    wssDewTempMaximum: Double
    wssDewTempMean: Double
    wssDewTempMinimum: Double
    wssDewTempStdErMean: Double
    wssDewTempVariance: Double
    wssPrecipTotal: Double
    wssRHMaximum: Double
    wssRHMean: Double
    wssRHMinimum: Double
    wssRHStdErMean: Double
    wssRHVariance: Double
    wssShortRadMaximum: Double
    wssShortRadMean: Double
    wssShortRadMinimum: Double
    wssShortRadStdErMean: Double
    wssShortRadVariance: Double
    wssStaPresMaximum: Double
    wssStaPresMean: Double
    wssStaPresMinimum: Double
    wssStaPresStdErMean: Double
    wssStaPresVariance: Double
    wssTempTripleMaximum: Double
    wssTempTripleMean: Double
    wssTempTripleMinimum: Double
    wssTempTripleStdErMean: Double
    wssTempTripleVariance: Double
    wssWindSpeedMaximum: Double
    wssWindSpeedMean: Double
    wssWindSpeedMinimum: Double
    wssWindSpeedStdErMean: Double
    wssWindSpeedVariance: Double
    wssDewTempNumPts: Double
    wssRHNumPts: Double
    wssShortRadNumPts: Double
    wssStaPresNumPts: Double
    wssTempTripleNumPts: Double
    wssWindSpeedNumPts: Double
  }

type WssYearly
  {
    year: Time
    corPresQF: String
    dewTempQF: String
    precipQF: String
    rHQF: String
    shortRadQF: String
    staPresQF: String
    tempTripleQF: String
    windSpeedQF: String
    wssCorPres: Double
    wssDewTempMaximum: Double
    wssDewTempMean: Double
    wssDewTempMinimum: Double
    wssDewTempStdErMean: Double
    wssDewTempVariance: Double
    wssPrecipTotal: Double
    wssRHMaximum: Double
    wssRHMean: Double
    wssRHMinimum: Double
    wssRHStdErMean: Double
    wssRHVariance: Double
    wssShortRadMaximum: Double
    wssShortRadMean: Double
    wssShortRadMinimum: Double
    wssShortRadStdErMean: Double
    wssShortRadVariance: Double
    wssStaPresMaximum: Double
    wssStaPresMean: Double
    wssStaPresMinimum: Double
    wssStaPresStdErMean: Double
    wssStaPresVariance: Double
    wssTempTripleMaximum: Double
    wssTempTripleMean: Double
    wssTempTripleMinimum: Double
    wssTempTripleStdErMean: Double
    wssTempTripleVariance: Double
    wssWindSpeedMaximum: Double
    wssWindSpeedMean: Double
    wssWindSpeedMinimum: Double
    wssWindSpeedStdErMean: Double
    wssWindSpeedVariance: Double
    wssDewTempNumPts: Double
    wssRHNumPts: Double
    wssShortRadNumPts: Double
    wssStaPresNumPts: Double
    wssTempTripleNumPts: Double
    wssWindSpeedNumPts: Double
  }

type ZooDnaExtractionIn
  {
    uid: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    geneticSampleCode: String
    geneticSampleFate: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    sampleMass: Double
    samplePercent: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    nucleicAcidPurity: Double
  }

type ZooDnaExtractionPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    deprecatedVialID: String
    testProtocolVersion: String
    dataQF: String
    geneticSampleID: String
    sampleCondition: String
    dnaSampleID: String
    dnaSampleCode: String
    geneticSampleCode: String
    nucleicAcidConcentration: Double
    sampleMaterial: String
    namedLocation: String
    sampleMass: Double
    dnaPooledStatus: String
    dnaProcessedBy: String
    nucleicAcidQuantMethod: String
    qaqcStatus: String
    nucleicAcidPurity: Double
    standardCreationLocation: String
  }

type ZooDnaRawDataFilesPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    setDate: Time
    collectDate: Time
    processedDate: Time
    laboratoryName: String
    internalLabID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    namedLocation: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
  }

type ZooFieldDataIn
  {
    uid: String
    remarks: String
    recordedBy: String
    eventID: String
    sampleID: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    locationID: String
    samplerType: String
    sampleNumber: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    towsTrapsNumber: String
    aquaticSiteType: String
    zooDepth1: Double
    zooDepth2: Double
    zooDepth3: Double
    sampleClass: String
    samplingImpractical: String
    additionalCoordUncertainty: Double
    fulcrumVersion: String
    platformInfo: String
    towsTrapsVolume: Double
  }

type ZooFieldDataPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    recordedBy: String
    eventID: String
    decimalLatitude: Double
    decimalLongitude: Double
    geodeticDatum: String
    coordinateUncertainty: Double
    elevation: Double
    elevationUncertainty: Double
    sampleID: String
    collectDate: Time
    startDate: Time
    samplingProtocolVersion: String
    collectedBy: String
    samplerType: String
    sampleCode: String
    dataQF: String
    geneticSampleID: String
    towsTrapsNumber: String
    aquaticSiteType: String
    zooDepth1: Double
    zooDepth2: Double
    zooDepth3: Double
    geneticSampleCode: String
    samplingImpractical: String
    namedLocation: String
    additionalCoordUncertainty: Double
    towsTrapsVolume: Double
  }

type ZooMarkerGeneSequencingIn
  {
    uid: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    replicate: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    primerSetID: String
    processedSeqFileName: String
  }

type ZooMarkerGeneSequencingPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    namedLocation: String
    linkerPrimerSequence: String
    reverseLinkerPrimerSequence: String
    sequencingMethod: String
    sequencingConcentration: Double
    sequencerRunID: String
    sampleTotalReadNumber: String
    sampleFilteredReadNumber: String
    maxFilteredReadLength: String
    minFilteredReadLength: String
    averageFilteredReadQuality: Double
    ambiguousBasesNumber: String
    barcodeSequence: String
    qaqcStatus: String
    replicate: String
    instrumentModel: String
    ncbiProjectID: String
    sequencingFacilityID: String
    illuminaAdapterKit: String
    illuminaIndex1: String
    illuminaIndex2: String
    libraryLayout: String
    librarySelection: String
    librarySource: String
    libraryStrategy: String
    analysisCodeFileName: String
    primerSetID: String
    processedSeqFileName: String
  }

type ZooPcrAmplificationIn
  {
    uid: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    qaqcStatus: String
    replicate: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
    primerSetID: String
  }

type ZooPcrAmplificationPub
  {
    uid: String
    domainID: String
    siteID: String
    remarks: String
    collectDate: Time
    processedDate: Time
    startDate: Time
    laboratoryName: String
    internalLabID: String
    testProtocolVersion: String
    dataQF: String
    dnaSampleID: String
    dnaSampleCode: String
    processedBy: String
    forwardPrimer: String
    reversePrimer: String
    targetGene: String
    namedLocation: String
    qaqcStatus: String
    replicate: String
    ampliconConcentration: Double
    ampliconPooledStatus: String
    targetSubfragment: String
    primerSetID: String
  }

type ZooPerTaxonIn
  {
    uid: String
    identificationReferences: String
    identificationQualifier: String
    scientificName: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    subsampleType: String
    startDate: Time
    laboratoryName: String
    internalLabID: String
    internalLabName: String
    identificationRemarks: String
    testProtocolVersion: String
    locationID: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    distinctTaxon: String
    qcChecked: String
    indeterminateSpecies: String
    notSubsampled: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    subkingdom: String
    infrakingdom: String
    superclass: String
    subspecies: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    referencePhotoID: String
    sampleCondition: String
    nauplii: String
    zooMinimumLength: Double
    zooMaximumLength: Double
    zooMeanLength: Double
    zooWidth: Double
    zooSubsampleVolume: Double
    superphylum: String
    infraphylum: String
    adjCountPerBottle: Double
    referencePhotoCode: String
    zooVolumePerBottle: Double
    qcEnumerationDifference: Double
    qcTaxonomicDifference: Double
  }

type ZooPerVialIn
  {
    uid: String
    scientificName: String
    sampleID: String
    collectDate: Time
    morphospeciesID: String
    startDate: Time
    laboratoryName: String
    locationID: String
    referenceCount: String
    referenceID: String
    sampleFate: String
    sampleCode: String
    dataQF: String
    referenceFate: String
    referenceCode: String
  }

type ZooPerVialPub
  {
    uid: String
    domainID: String
    siteID: String
    scientificName: String
    sampleID: String
    collectDate: Time
    morphospeciesID: String
    startDate: Time
    laboratoryName: String
    referenceCount: String
    referenceID: String
    sampleCode: String
    dataQF: String
    referenceCode: String
    namedLocation: String
  }

type ZooRawDataFilesIn
  {
    uid: String
    remarks: String
    processedDate: Time
    startDate: Time
    endDate: Time
    laboratoryName: String
    internalLabID: String
    locationID: String
    dataQF: String
    dnaSampleID: String
    dnaSampleFate: String
    dnaSampleCode: String
    sequencerRunID: String
    rawDataFileName: String
    rawDataFilePath: String
    sequencingFacilityID: String
    rawDataFileDescription: String
    parentFolderName: String
  }

type ZooTaxonomyProcessedPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    subsampleType: String
    startDate: Time
    laboratoryName: String
    internalLabName: String
    identificationRemarks: String
    testProtocolVersion: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    distinctTaxon: String
    qcChecked: String
    indeterminateSpecies: String
    notSubsampled: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    subkingdom: String
    infrakingdom: String
    superclass: String
    subspecies: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    nauplii: String
    zooMinimumLength: Double
    zooMaximumLength: Double
    zooMeanLength: Double
    zooWidth: Double
    zooSubsampleVolume: Double
    superphylum: String
    infraphylum: String
    namedLocation: String
    adjCountPerBottle: Double
    zooVolumePerBottle: Double
    qcEnumerationDifference: Double
    qcTaxonomicDifference: Double
  }

type ZooTaxonomyRawPub
  {
    uid: String
    domainID: String
    siteID: String
    identificationReferences: String
    taxonID: String
    identificationQualifier: String
    scientificName: String
    taxonRank: String
    sampleID: String
    collectDate: Time
    targetTaxaPresent: String
    individualCount: String
    morphospeciesID: String
    identifiedBy: String
    identifiedDate: Time
    subsampleType: String
    startDate: Time
    laboratoryName: String
    internalLabName: String
    identificationRemarks: String
    testProtocolVersion: String
    kingdom: String
    phylum: String
    class: String
    order: String
    family: String
    subfamily: String
    genus: String
    subgenus: String
    specificEpithet: String
    infraspecificEpithet: String
    tribe: String
    taxonDatabaseName: String
    taxonDatabaseID: String
    distinctTaxon: String
    qcChecked: String
    indeterminateSpecies: String
    notSubsampled: String
    subphylum: String
    subclass: String
    infraclass: String
    superorder: String
    suborder: String
    infraorder: String
    superfamily: String
    subtribe: String
    subkingdom: String
    infrakingdom: String
    superclass: String
    subspecies: String
    sampleCode: String
    dataQF: String
    sampleCondition: String
    nauplii: String
    zooMinimumLength: Double
    zooMaximumLength: Double
    zooMeanLength: Double
    zooWidth: Double
    zooSubsampleVolume: Double
    superphylum: String
    infraphylum: String
    namedLocation: String
    adjCountPerBottle: Double
    zooVolumePerBottle: Double
    qcEnumerationDifference: Double
    qcTaxonomicDifference: Double
  }


