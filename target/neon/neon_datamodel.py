# Auto generated from neon.yaml by pythongen.py version: 0.4.0
# Generation date: 2020-06-17 10:46
# Schema: neon
#
# id: https://microbiomedata/schema/neon
# description: NEON rendering of KBase metadata schema
# license: https://creativecommons.org/publicdomain/zero/1.0/

import dataclasses
import sys
from typing import Optional, List, Union, Dict, ClassVar, Any
from dataclasses import dataclass
from biolinkml.utils.slot import Slot
from biolinkml.utils.metamodelcore import empty_list, empty_dict, bnode
from biolinkml.utils.yamlutils import YAMLRoot, extended_str, extended_float, extended_int
if sys.version_info < (3, 7, 6):
    from biolinkml.utils.dataclass_extensions_375 import dataclasses_init_fn_with_kwargs
else:
    from biolinkml.utils.dataclass_extensions_376 import dataclasses_init_fn_with_kwargs
from biolinkml.utils.formatutils import camelcase, underscore, sfx
from rdflib import Namespace, URIRef
from biolinkml.utils.curienamespace import CurieNamespace
from biolinkml.utils.metamodelcore import XSDTime
from includes.types import Double, Integer, String, Time

metamodel_version = "1.4.3"

# Overwrite dataclasses _init_fn to add **kwargs in __init__
dataclasses._init_fn = dataclasses_init_fn_with_kwargs

# Namespaces
BIOLINKML = CurieNamespace('biolinkml', 'https://w3id.org/biolink/biolinkml/')
NEON = CurieNamespace('neon', 'https://data.neonscience.org/')
DEFAULT_ = NEON


# Types

# Class references



class AlgFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:alg_fieldData_pub"
    class_name: ClassVar[str] = "alg_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AlgFieldDataPub


class AlgDomainLabChemistryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_domainLabChemistry_pub
    class_class_curie: ClassVar[str] = "neon:alg_domainLabChemistry_pub"
    class_name: ClassVar[str] = "alg_domainLabChemistry_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AlgDomainLabChemistryPub


class AlgAlgaeExternalLabDataPerSamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_algaeExternalLabDataPerSample_pub
    class_class_curie: ClassVar[str] = "neon:alg_algaeExternalLabDataPerSample_pub"
    class_name: ClassVar[str] = "alg_algaeExternalLabDataPerSample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AlgAlgaeExternalLabDataPerSamplePub


class AsiExternalLabPOMSummaryDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asi_externalLabPOMSummaryData_pub
    class_class_curie: ClassVar[str] = "neon:asi_externalLabPOMSummaryData_pub"
    class_name: ClassVar[str] = "asi_externalLabPOMSummaryData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AsiExternalLabPOMSummaryDataPub


class AquchemPlantAlgaeExternalLabDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.aquchem_plantAlgaeExternalLabData_in
    class_class_curie: ClassVar[str] = "neon:aquchem_plantAlgaeExternalLabData_in"
    class_name: ClassVar[str] = "aquchem_plantAlgaeExternalLabData_in"
    class_model_uri: ClassVar[URIRef] = NEON.AquchemPlantAlgaeExternalLabDataIn


class AquchemPlantAlgaeExternalLabQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.aquchem_plantAlgaeExternalLabQA_in
    class_class_curie: ClassVar[str] = "neon:aquchem_plantAlgaeExternalLabQA_in"
    class_name: ClassVar[str] = "aquchem_plantAlgaeExternalLabQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.AquchemPlantAlgaeExternalLabQAIn


class AquchemExternalLabSummaryDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.aquchem_externalLabSummaryData_in
    class_class_curie: ClassVar[str] = "neon:aquchem_externalLabSummaryData_in"
    class_name: ClassVar[str] = "aquchem_externalLabSummaryData_in"
    class_model_uri: ClassVar[URIRef] = NEON.AquchemExternalLabSummaryDataIn


@dataclass
class AsiFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asi_fieldData_in
    class_class_curie: ClassVar[str] = "neon:asi_fieldData_in"
    class_name: ClassVar[str] = "asi_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.AsiFieldDataIn

    isotopePOMSampleFate: Optional[str] = None
    isotopePOMRep2SampleFate: Optional[str] = None

class GsiFieldSuperParentPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gsi_fieldSuperParent_pub
    class_class_curie: ClassVar[str] = "neon:gsi_fieldSuperParent_pub"
    class_name: ClassVar[str] = "gsi_fieldSuperParent_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GsiFieldSuperParentPub


class GsiFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gsi_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:gsi_fieldData_pub"
    class_name: ClassVar[str] = "gsi_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GsiFieldDataPub


class GsiExternalLabH2OIsotopesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gsi_externalLabH2OIsotopes_pub
    class_class_curie: ClassVar[str] = "neon:gsi_externalLabH2OIsotopes_pub"
    class_name: ClassVar[str] = "gsi_externalLabH2OIsotopes_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GsiExternalLabH2OIsotopesPub


class AsiExternalLabSummaryDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asi_externalLabSummaryData_pub
    class_class_curie: ClassVar[str] = "neon:asi_externalLabSummaryData_pub"
    class_name: ClassVar[str] = "asi_externalLabSummaryData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AsiExternalLabSummaryDataPub


@dataclass
class Asih2oExternalLabH2OIsotopesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asih2o_externalLabH2OIsotopes_in
    class_class_curie: ClassVar[str] = "neon:asih2o_externalLabH2OIsotopes_in"
    class_name: ClassVar[str] = "asih2o_externalLabH2OIsotopes_in"
    class_model_uri: ClassVar[URIRef] = NEON.Asih2oExternalLabH2OIsotopesIn

    isotopeH2OSampleFate: Optional[str] = None
    isotopeH2OExternalLabTest: Optional[str] = None

@dataclass
class Asih2oExternalLabQAQCDataH2OIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asih2o_externalLabQAQCDataH2O_in
    class_class_curie: ClassVar[str] = "neon:asih2o_externalLabQAQCDataH2O_in"
    class_name: ClassVar[str] = "asih2o_externalLabQAQCDataH2O_in"
    class_model_uri: ClassVar[URIRef] = NEON.Asih2oExternalLabQAQCDataH2OIn

    H2OIsotopeQAQCID: Optional[str] = None
    d18OMeasured: Optional[float] = None
    d2HMeasured: Optional[float] = None
    d18OKnown: Optional[float] = None
    d2HKnown: Optional[float] = None
    subsamplesProcessed: Optional[str] = None
    isotopeH2OexternalLabQAQCFlag: Optional[str] = None
    labSampleID: Optional[str] = None

@dataclass
class Asih2oExternalLabSummaryDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asih2o_externalLabSummaryData_in
    class_class_curie: ClassVar[str] = "neon:asih2o_externalLabSummaryData_in"
    class_name: ClassVar[str] = "asih2o_externalLabSummaryData_in"
    class_model_uri: ClassVar[URIRef] = NEON.Asih2oExternalLabSummaryDataIn

    standardReferenceKnownValue: Optional[float] = None
    standardReferenceMeasuredMean: Optional[float] = None

class AplClipHarvestPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apl_clipHarvest_pub
    class_class_curie: ClassVar[str] = "neon:apl_clipHarvest_pub"
    class_name: ClassVar[str] = "apl_clipHarvest_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AplClipHarvestPub


class AplDomainLabChemistryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apl_domainLabChemistry_pub
    class_class_curie: ClassVar[str] = "neon:apl_domainLabChemistry_pub"
    class_name: ClassVar[str] = "apl_domainLabChemistry_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AplDomainLabChemistryPub


class AplPlantExternalLabDataPerSamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apl_plantExternalLabDataPerSample_pub
    class_class_curie: ClassVar[str] = "neon:apl_plantExternalLabDataPerSample_pub"
    class_name: ClassVar[str] = "apl_plantExternalLabDataPerSample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AplPlantExternalLabDataPerSamplePub


class BbcPercoreIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_percore_in
    class_class_curie: ClassVar[str] = "neon:bbc_percore_in"
    class_name: ClassVar[str] = "bbc_percore_in"
    class_model_uri: ClassVar[URIRef] = NEON.BbcPercoreIn


class BbcRootmassIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_rootmass_in
    class_class_curie: ClassVar[str] = "neon:bbc_rootmass_in"
    class_name: ClassVar[str] = "bbc_rootmass_in"
    class_model_uri: ClassVar[URIRef] = NEON.BbcRootmassIn


@dataclass
class BbcChemistryPoolingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_chemistryPooling_in
    class_class_curie: ClassVar[str] = "neon:bbc_chemistryPooling_in"
    class_name: ClassVar[str] = "bbc_chemistryPooling_in"
    class_model_uri: ClassVar[URIRef] = NEON.BbcChemistryPoolingIn

    pooledSampleMass: Optional[float] = None
    poolSampleFate: Optional[str] = None
    subsampleFateList: Optional[str] = None

@dataclass
class BbcDilutionIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_dilution_in
    class_class_curie: ClassVar[str] = "neon:bbc_dilution_in"
    class_name: ClassVar[str] = "bbc_dilution_in"
    class_model_uri: ClassVar[URIRef] = NEON.BbcDilutionIn

    dilutionSampleFate: Optional[str] = None
    dilutionSubsampleFate: Optional[str] = None

@dataclass
class BbcPercorePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_percore_pub
    class_class_curie: ClassVar[str] = "neon:bbc_percore_pub"
    class_name: ClassVar[str] = "bbc_percore_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BbcPercorePub

    bareGround: Optional[str] = None
    coreDiameter: Optional[float] = None
    coreID: Optional[str] = None
    monolithLength: Optional[float] = None
    monolithWidth: Optional[float] = None
    rootSampleArea: Optional[float] = None
    rootSampleDepth: Optional[float] = None
    rootSamplingMethod: Optional[str] = None
    rootSamplingPossible: Optional[str] = None
    wst10cmDist: Optional[float] = None
    wst1cmDist: Optional[float] = None

class BbcRootmassPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_rootmass_pub
    class_class_curie: ClassVar[str] = "neon:bbc_rootmass_pub"
    class_name: ClassVar[str] = "bbc_rootmass_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BbcRootmassPub


@dataclass
class BbcDilutionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_dilution_pub
    class_class_curie: ClassVar[str] = "neon:bbc_dilution_pub"
    class_name: ClassVar[str] = "bbc_dilution_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BbcDilutionPub

    dilutionSampleCode: Optional[str] = None
    dilutionSampleID: Optional[str] = None
    dilutionSubsampleCode: Optional[str] = None
    dilutionSubsampleID: Optional[str] = None
    dilutionSubsampleVolume: Optional[float] = None
    somDryMass: Optional[float] = None

@dataclass
class BbcChemistryPoolingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_chemistryPooling_pub
    class_class_curie: ClassVar[str] = "neon:bbc_chemistryPooling_pub"
    class_name: ClassVar[str] = "bbc_chemistryPooling_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BbcChemistryPoolingPub

    subsampleCodeList: Optional[str] = None

class DhpPerplotIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dhp_perplot_in
    class_class_curie: ClassVar[str] = "neon:dhp_perplot_in"
    class_name: ClassVar[str] = "dhp_perplot_in"
    class_model_uri: ClassVar[URIRef] = NEON.DhpPerplotIn


@dataclass
class DhpPerimagefileIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dhp_perimagefile_in
    class_class_curie: ClassVar[str] = "neon:dhp_perimagefile_in"
    class_name: ClassVar[str] = "dhp_perimagefile_in"
    class_model_uri: ClassVar[URIRef] = NEON.DhpPerimagefileIn

    imageFileNumber: Optional[str] = None
    fulcrumFilePath: Optional[str] = None
    imageFilePath: Optional[str] = None

@dataclass
class DhpPerplotPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dhp_perplot_pub
    class_class_curie: ClassVar[str] = "neon:dhp_perplot_pub"
    class_name: ClassVar[str] = "dhp_perplot_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DhpPerplotPub

    overstoryHeight: Optional[float] = None
    understoryHeight: Optional[float] = None
    snowPresent: Optional[str] = None

@dataclass
class DhpPerimagefilePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dhp_perimagefile_pub
    class_class_curie: ClassVar[str] = "neon:dhp_perimagefile_pub"
    class_name: ClassVar[str] = "dhp_perimagefile_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DhpPerimagefilePub

    cameraOrientation: Optional[str] = None
    cameraPosition: Optional[str] = None
    imageFileName: Optional[str] = None
    imageFileUrl: Optional[str] = None
    imageType: Optional[str] = None

class MgcPermegapitPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgc_permegapit_pub
    class_class_curie: ClassVar[str] = "neon:mgc_permegapit_pub"
    class_name: ClassVar[str] = "mgc_permegapit_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgcPermegapitPub


class MgcPerhorizonPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgc_perhorizon_pub
    class_class_curie: ClassVar[str] = "neon:mgc_perhorizon_pub"
    class_name: ClassVar[str] = "mgc_perhorizon_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgcPerhorizonPub


class MgcPerbiogeosamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgc_perbiogeosample_pub
    class_class_curie: ClassVar[str] = "neon:mgc_perbiogeosample_pub"
    class_name: ClassVar[str] = "mgc_perbiogeosample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgcPerbiogeosamplePub


class MgcPerarchivesamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgc_perarchivesample_pub
    class_class_curie: ClassVar[str] = "neon:mgc_perarchivesample_pub"
    class_name: ClassVar[str] = "mgc_perarchivesample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgcPerarchivesamplePub


class MgpPermegapitPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_permegapit_pub
    class_class_curie: ClassVar[str] = "neon:mgp_permegapit_pub"
    class_name: ClassVar[str] = "mgp_permegapit_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPermegapitPub


class MgpPerhorizonPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_perhorizon_pub
    class_class_curie: ClassVar[str] = "neon:mgp_perhorizon_pub"
    class_name: ClassVar[str] = "mgp_perhorizon_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPerhorizonPub


class MgpPerbulksamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_perbulksample_pub
    class_class_curie: ClassVar[str] = "neon:mgp_perbulksample_pub"
    class_name: ClassVar[str] = "mgp_perbulksample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPerbulksamplePub


class MgpPerbiogeosamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_perbiogeosample_pub
    class_class_curie: ClassVar[str] = "neon:mgp_perbiogeosample_pub"
    class_name: ClassVar[str] = "mgp_perbiogeosample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPerbiogeosamplePub


class MgpPerarchivesamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_perarchivesample_pub
    class_class_curie: ClassVar[str] = "neon:mgp_perarchivesample_pub"
    class_name: ClassVar[str] = "mgp_perarchivesample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPerarchivesamplePub


@dataclass
class MgpPermegapitIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_permegapit_in
    class_class_curie: ClassVar[str] = "neon:mgp_permegapit_in"
    class_name: ClassVar[str] = "mgp_permegapit_in"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPermegapitIn

    recordedByB: Optional[str] = None
    recordedByC: Optional[str] = None
    recordedByD: Optional[str] = None
    recordedByE: Optional[str] = None
    rootsCollectedByC: Optional[str] = None
    rootsCollectedByD: Optional[str] = None
    safetyPersonnelA: Optional[str] = None
    safetyPersonnelB: Optional[str] = None
    safetyPersonnelC: Optional[str] = None
    fccConstructionSupervisorA: Optional[str] = None
    fccConstructionSupervisorB: Optional[str] = None
    fccConstructionSupervisorC: Optional[str] = None
    fccConstructionContractor: Optional[str] = None
    soilProfileDescriberB: Optional[str] = None
    soilProfileDescriberC: Optional[str] = None
    soilProfileDescriberD: Optional[str] = None
    soilProfileDescriberE: Optional[str] = None
    soilProfileDescriberF: Optional[str] = None

class MgpPerhorizonIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_perhorizon_in
    class_class_curie: ClassVar[str] = "neon:mgp_perhorizon_in"
    class_name: ClassVar[str] = "mgp_perhorizon_in"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPerhorizonIn


@dataclass
class MgpPerbulksampleIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_perbulksample_in
    class_class_curie: ClassVar[str] = "neon:mgp_perbulksample_in"
    class_name: ClassVar[str] = "mgp_perbulksample_in"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPerbulksampleIn

    bulkDensID: Optional[str] = None
    bulkDensHorizonProportion: Optional[float] = None
    bulkDensOrientation: Optional[str] = None
    bulkDensCoarseFragDensMeas: Optional[str] = None
    bulkDensExclCoarseFrag: Optional[float] = None
    bulkDensInclCoarseFrag: Optional[float] = None
    coarseFragWeight: Optional[float] = None
    coarseFragVolume: Optional[float] = None

@dataclass
class MgpPerbiogeosampleIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_perbiogeosample_in
    class_class_curie: ClassVar[str] = "neon:mgp_perbiogeosample_in"
    class_name: ClassVar[str] = "mgp_perbiogeosample_in"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPerbiogeosampleIn

    biogeoID: Optional[str] = None
    biogeoHorizonProportion: Optional[float] = None
    airDryOvenDry: Optional[float] = None
    alMjelm: Optional[float] = None
    caMjelm: Optional[float] = None
    feMjelm: Optional[float] = None
    kMjelm: Optional[float] = None
    mgMjelm: Optional[float] = None
    mnMjelm: Optional[float] = None
    naMjelm: Optional[float] = None
    pMjelm: Optional[float] = None
    siMjelm: Optional[float] = None
    srMjelm: Optional[float] = None
    tiMjelm: Optional[float] = None
    zrMjelm: Optional[float] = None

@dataclass
class MgpPerarchivesampleIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mgp_perarchivesample_in
    class_class_curie: ClassVar[str] = "neon:mgp_perarchivesample_in"
    class_name: ClassVar[str] = "mgp_perarchivesample_in"
    class_model_uri: ClassVar[URIRef] = NEON.MgpPerarchivesampleIn

    archiveTopDepth: Optional[float] = None
    archiveBottomDepth: Optional[float] = None

@dataclass
class MprPerpitprofileIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mpr_perpitprofile_in
    class_class_curie: ClassVar[str] = "neon:mpr_perpitprofile_in"
    class_name: ClassVar[str] = "mpr_perpitprofile_in"
    class_model_uri: ClassVar[URIRef] = NEON.MprPerpitprofileIn

    pitProfileClassCode: Optional[str] = None
    pitProfileClassFate: Optional[str] = None
    pitProfileClassID: Optional[str] = None

@dataclass
class MprPerdepthincrementIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mpr_perdepthincrement_in
    class_class_curie: ClassVar[str] = "neon:mpr_perdepthincrement_in"
    class_name: ClassVar[str] = "mpr_perdepthincrement_in"
    class_model_uri: ClassVar[URIRef] = NEON.MprPerdepthincrementIn

    pitProfileCode: Optional[str] = None
    pitProfileFate: Optional[str] = None

@dataclass
class MprPerrootsampleIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mpr_perrootsample_in
    class_class_curie: ClassVar[str] = "neon:mpr_perrootsample_in"
    class_name: ClassVar[str] = "mpr_perrootsample_in"
    class_model_uri: ClassVar[URIRef] = NEON.MprPerrootsampleIn

    duplicateSampleIDQF: Optional[int] = None
    depthIncrementCode: Optional[str] = None
    depthIncrementFate: Optional[str] = None

@dataclass
class MprPerpitprofilePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mpr_perpitprofile_pub
    class_class_curie: ClassVar[str] = "neon:mpr_perpitprofile_pub"
    class_name: ClassVar[str] = "mpr_perpitprofile_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MprPerpitprofilePub

    rootsCollectedByA: Optional[str] = None
    rootsCollectedByB: Optional[str] = None
    maxProfileDepth: Optional[float] = None
    totalRootBiomass: Optional[float] = None
    depth100RootBiomass: Optional[float] = None

@dataclass
class MprPerdepthincrementPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mpr_perdepthincrement_pub
    class_class_curie: ClassVar[str] = "neon:mpr_perdepthincrement_pub"
    class_name: ClassVar[str] = "mpr_perdepthincrement_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MprPerdepthincrementPub

    pitProfileID: Optional[str] = None
    topDepth: Optional[float] = None
    bottomDepth: Optional[float] = None
    depthIncrementVolume: Optional[float] = None
    sampleMethod: Optional[str] = None

@dataclass
class MprPerrootsamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mpr_perrootsample_pub
    class_class_curie: ClassVar[str] = "neon:mpr_perrootsample_pub"
    class_name: ClassVar[str] = "mpr_perrootsample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MprPerrootsamplePub

    pitNamedLocation: Optional[str] = None
    rootStatus: Optional[str] = None
    depthIncrementID: Optional[str] = None
    rootDryMass: Optional[float] = None
    incrementRootBiomass: Optional[float] = None
    incrementRootDensity: Optional[float] = None

@dataclass
class SlsSoilCoreCollectionIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_soilCoreCollection_in
    class_class_curie: ClassVar[str] = "neon:sls_soilCoreCollection_in"
    class_name: ClassVar[str] = "sls_soilCoreCollection_in"
    class_model_uri: ClassVar[URIRef] = NEON.SlsSoilCoreCollectionIn

    boutType: Optional[str] = None
    geneticArchiveSample1Fate: Optional[str] = None
    geneticArchiveSample2Fate: Optional[str] = None
    geneticArchiveSample3Fate: Optional[str] = None
    geneticArchiveSample4Fate: Optional[str] = None
    geneticArchiveSample5Fate: Optional[str] = None
    geneticArchiveSampleCount: Optional[int] = None

@dataclass
class SlsSoilpHIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_soilpH_in
    class_class_curie: ClassVar[str] = "neon:sls_soilpH_in"
    class_name: ClassVar[str] = "sls_soilpH_in"
    class_model_uri: ClassVar[URIRef] = NEON.SlsSoilpHIn

    pHSampleFate: Optional[str] = None

@dataclass
class SlsSoilMoistureIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_soilMoisture_in
    class_class_curie: ClassVar[str] = "neon:sls_soilMoisture_in"
    class_name: ClassVar[str] = "sls_soilMoisture_in"
    class_model_uri: ClassVar[URIRef] = NEON.SlsSoilMoistureIn

    moistureSampleFate: Optional[str] = None

@dataclass
class SlsBgcSubsamplingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_bgcSubsampling_in
    class_class_curie: ClassVar[str] = "neon:sls_bgcSubsampling_in"
    class_name: ClassVar[str] = "sls_bgcSubsampling_in"
    class_model_uri: ClassVar[URIRef] = NEON.SlsBgcSubsamplingIn

    bgcArchiveFate: Optional[str] = None

@dataclass
class SlsMetagenomicsPoolingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_metagenomicsPooling_in
    class_class_curie: ClassVar[str] = "neon:sls_metagenomicsPooling_in"
    class_name: ClassVar[str] = "sls_metagenomicsPooling_in"
    class_model_uri: ClassVar[URIRef] = NEON.SlsMetagenomicsPoolingIn

    compositeSampleCode: Optional[str] = None
    compositeSampleFate: Optional[str] = None
    compositeSampleID: Optional[str] = None
    toCompositeBarcodeList: Optional[str] = None
    toCompositeFateList: Optional[str] = None
    toCompositeSampleIDList: Optional[str] = None

@dataclass
class SlsSoilCoreCollectionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_soilCoreCollection_pub
    class_class_curie: ClassVar[str] = "neon:sls_soilCoreCollection_pub"
    class_name: ClassVar[str] = "sls_soilCoreCollection_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SlsSoilCoreCollectionPub

    coreCoordinateX: Optional[float] = None
    coreCoordinateY: Optional[float] = None
    geneticArchiveSample1Code: Optional[str] = None
    geneticArchiveSample1ID: Optional[str] = None
    geneticArchiveSample2Code: Optional[str] = None
    geneticArchiveSample2ID: Optional[str] = None
    geneticArchiveSample3Code: Optional[str] = None
    geneticArchiveSample3ID: Optional[str] = None
    geneticArchiveSample4Code: Optional[str] = None
    geneticArchiveSample4ID: Optional[str] = None
    geneticArchiveSample5Code: Optional[str] = None
    geneticArchiveSample5ID: Optional[str] = None
    geneticSampleCondition: Optional[str] = None
    litterDepth: Optional[float] = None
    sampleBottomDepth: Optional[float] = None
    sampleTopDepth: Optional[float] = None
    soilCoreCount: Optional[str] = None
    soilSamplingDevice: Optional[str] = None
    soilTemp: Optional[float] = None
    incubationMethod: Optional[str] = None
    sampleExtent: Optional[str] = None
    standingWaterDepth: Optional[float] = None
    incubationCondition: Optional[str] = None

@dataclass
class SlsSoilpHPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_soilpH_pub
    class_class_curie: ClassVar[str] = "neon:sls_soilpH_pub"
    class_name: ClassVar[str] = "sls_soilpH_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SlsSoilpHPub

    pHCaClVol: Optional[float] = None
    pHSampleCode: Optional[str] = None
    pHSampleID: Optional[str] = None
    pHSoilInCaClMass: Optional[float] = None
    pHSoilInWaterMass: Optional[float] = None
    pHWaterVol: Optional[float] = None
    soilInCaClpH: Optional[float] = None
    soilInWaterpH: Optional[float] = None
    caclpHRatio: Optional[float] = None
    pHDataQF: Optional[str] = None
    pHMeasuredBy: Optional[str] = None
    pHRemarks: Optional[str] = None
    waterpHRatio: Optional[float] = None

@dataclass
class SlsSoilMoisturePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_soilMoisture_pub
    class_class_curie: ClassVar[str] = "neon:sls_soilMoisture_pub"
    class_name: ClassVar[str] = "sls_soilMoisture_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SlsSoilMoisturePub

    freshMassBoatMass: Optional[float] = None
    moistureSampleCode: Optional[str] = None
    moistureSampleID: Optional[str] = None
    smDataQF: Optional[str] = None
    smMeasuredBy: Optional[str] = None
    smRemarks: Optional[str] = None
    soilMoisture: Optional[float] = None

@dataclass
class SlsBgcSubsamplingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_bgcSubsampling_pub
    class_class_curie: ClassVar[str] = "neon:sls_bgcSubsampling_pub"
    class_name: ClassVar[str] = "sls_bgcSubsampling_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SlsBgcSubsamplingPub

    bgcArchiveCode: Optional[str] = None
    bgcArchiveID: Optional[str] = None
    horizon: Optional[str] = None
    bgcDataQF: Optional[str] = None
    bgcRemarks: Optional[str] = None

@dataclass
class SlsMetagenomicsPoolingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_metagenomicsPooling_pub
    class_class_curie: ClassVar[str] = "neon:sls_metagenomicsPooling_pub"
    class_name: ClassVar[str] = "sls_metagenomicsPooling_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SlsMetagenomicsPoolingPub

    genomicsDataQF: Optional[str] = None
    genomicsPooledCodeList: Optional[str] = None
    genomicsPooledIDList: Optional[str] = None

@dataclass
class SwcFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swc_fieldData_in
    class_class_curie: ClassVar[str] = "neon:swc_fieldData_in"
    class_name: ClassVar[str] = "swc_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.SwcFieldDataIn

    filtSampleCode: Optional[str] = None
    filtSampleCond: Optional[str] = None
    filtSampleFate: Optional[str] = None
    filtSampleID: Optional[str] = None
    pcnSampleCode: Optional[str] = None
    pcnSampleCond: Optional[str] = None
    pcnSampleFate: Optional[str] = None
    pcnSampleID: Optional[str] = None
    rawSampleCode: Optional[str] = None
    rawSampleCond: Optional[str] = None
    rawSampleFate: Optional[str] = None
    rawSampleID: Optional[str] = None
    dicSampleCode: Optional[str] = None
    dicSampleCond: Optional[str] = None
    dicSampleFate: Optional[str] = None
    dicSampleID: Optional[str] = None
    filtSampleBottleSize: Optional[str] = None
    filtNutSampleBarcode: Optional[str] = None
    filtNutSampleClass: Optional[str] = None
    filtNutSampleCond: Optional[str] = None
    filtNutSampleFate: Optional[str] = None
    filtNutSampleID: Optional[str] = None
    gwwDICBubbleFree: Optional[str] = None
    rawNutSampleBarcode: Optional[str] = None
    rawNutSampleClass: Optional[str] = None
    rawNutSampleCond: Optional[str] = None
    rawNutSampleFate: Optional[str] = None
    rawNutSampleID: Optional[str] = None

@dataclass
class SwcDomainLabDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swc_domainLabData_in
    class_class_curie: ClassVar[str] = "neon:swc_domainLabData_in"
    class_name: ClassVar[str] = "swc_domainLabData_in"
    class_model_uri: ClassVar[URIRef] = NEON.SwcDomainLabDataIn

    pH4CheckValue: Optional[float] = None
    pH7CheckValue: Optional[float] = None
    pHMeterCalibration: Optional[str] = None
    domainSampleFate: Optional[str] = None

@dataclass
class WcExternalLabDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wc_externalLabData_in
    class_class_curie: ClassVar[str] = "neon:wc_externalLabData_in"
    class_name: ClassVar[str] = "wc_externalLabData_in"
    class_model_uri: ClassVar[URIRef] = NEON.WcExternalLabDataIn

    nitriteRunID: Optional[str] = None
    nh4RunID: Optional[str] = None
    OrthoPRunID: Optional[str] = None
    tnRunID: Optional[str] = None
    tdnRunID: Optional[str] = None
    dicRunID: Optional[str] = None
    docRunID: Optional[str] = None
    tocRunID: Optional[str] = None
    tpcnRunDate: Optional[Union[str, XSDTime]] = None
    uvBatchID: Optional[str] = None
    shipmentLateTest: Optional[float] = None
    nitrateNitriteRunID: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.tpcnRunDate is not None and not isinstance(self.tpcnRunDate, XSDTime):
            self.tpcnRunDate = XSDTime(self.tpcnRunDate)
        super().__post_init__(**kwargs)


class WcExternalLabSummaryDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wc_externalLabSummaryData_in
    class_class_curie: ClassVar[str] = "neon:wc_externalLabSummaryData_in"
    class_name: ClassVar[str] = "wc_externalLabSummaryData_in"
    class_model_uri: ClassVar[URIRef] = NEON.WcExternalLabSummaryDataIn


class WdpCollectionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_collection_pub
    class_class_curie: ClassVar[str] = "neon:wdp_collection_pub"
    class_name: ClassVar[str] = "wdp_collection_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WdpCollectionPub


class WdpCollectionChemPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_collectionChem_pub
    class_class_curie: ClassVar[str] = "neon:wdp_collectionChem_pub"
    class_name: ClassVar[str] = "wdp_collectionChem_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WdpCollectionChemPub


class WdpChemLabPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_chemLab_pub
    class_class_curie: ClassVar[str] = "neon:wdp_chemLab_pub"
    class_name: ClassVar[str] = "wdp_chemLab_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WdpChemLabPub


@dataclass
class WdpChemLabIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_chemLab_in
    class_class_curie: ClassVar[str] = "neon:wdp_chemLab_in"
    class_name: ClassVar[str] = "wdp_chemLab_in"
    class_model_uri: ClassVar[URIRef] = NEON.WdpChemLabIn

    labCondition: Optional[str] = None
    labConditionRemarks: Optional[str] = None
    pHUncertainty: Optional[float] = None
    precipAmmonium: Optional[float] = None
    precipAmmoniumFlag: Optional[str] = None
    precipAmmoniumUncertainty: Optional[float] = None
    precipBromide: Optional[float] = None
    precipBromideFlag: Optional[str] = None
    precipBromideUncertainty: Optional[float] = None
    precipCalcium: Optional[float] = None
    precipCalciumFlag: Optional[str] = None
    precipCalciumUncertainty: Optional[float] = None
    precipChloride: Optional[float] = None
    precipChlorideFlag: Optional[str] = None
    precipChlorideUncertainty: Optional[float] = None
    precipConductivity: Optional[float] = None
    precipConductivityUncertainty: Optional[float] = None
    precipMagnesium: Optional[float] = None
    precipMagnesiumFlag: Optional[str] = None
    precipMagnesiumUncertainty: Optional[float] = None
    precipNitrate: Optional[float] = None
    precipNitrateFlag: Optional[str] = None
    precipNitrateUncertainty: Optional[float] = None
    precipPhosphate: Optional[float] = None
    precipPhosphateFlag: Optional[str] = None
    precipPhosphateUncertainty: Optional[float] = None
    precipPotassium: Optional[float] = None
    precipPotassiumFlag: Optional[str] = None
    precipPotassiumUncertainty: Optional[float] = None
    precipSodium: Optional[float] = None
    precipSodiumFlag: Optional[str] = None
    precipSodiumUncertainty: Optional[float] = None
    precipSulfate: Optional[float] = None
    precipSulfateFlag: Optional[str] = None
    precipSulfateUncertainty: Optional[float] = None
    pHFlag: Optional[str] = None
    precipConductivityFlag: Optional[str] = None

@dataclass
class WdpCollectionIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_collection_in
    class_class_curie: ClassVar[str] = "neon:wdp_collection_in"
    class_name: ClassVar[str] = "wdp_collection_in"
    class_model_uri: ClassVar[URIRef] = NEON.WdpCollectionIn

    shippingCaseCode: Optional[str] = None

@dataclass
class WdpCollectionChemIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_collectionChem_in
    class_class_curie: ClassVar[str] = "neon:wdp_collectionChem_in"
    class_name: ClassVar[str] = "wdp_collectionChem_in"
    class_model_uri: ClassVar[URIRef] = NEON.WdpCollectionChemIn

    chemSubsampleBottleNumber: Optional[str] = None
    chemSubsampleBottleStartMass: Optional[float] = None
    chemSubsampleBottleEndMass: Optional[float] = None
    chemSubsampleMass: Optional[float] = None
    chemSubsampleCondition: Optional[str] = None
    chemSubsampleConditionRemarks: Optional[str] = None
    chemFunnelCode: Optional[str] = None
    chemTubeCode: Optional[str] = None
    extChemBottleCode: Optional[str] = None

@dataclass
class WdpCollectionIsoIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_collectionIso_in
    class_class_curie: ClassVar[str] = "neon:wdp_collectionIso_in"
    class_name: ClassVar[str] = "wdp_collectionIso_in"
    class_model_uri: ClassVar[URIRef] = NEON.WdpCollectionIsoIn

    isoSubsampleBottleNumber: Optional[str] = None
    isoSubsampleBottleStartMass: Optional[float] = None
    isoSubsampleBottleEndMass: Optional[float] = None
    isoSubsampleFate: Optional[str] = None
    extIsoBottleCode: Optional[str] = None
    isoFunnelCode: Optional[str] = None
    isoTubeCode: Optional[str] = None

@dataclass
class WdpCollectionIsoTestIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_collectionIsoTest_in
    class_class_curie: ClassVar[str] = "neon:wdp_collectionIsoTest_in"
    class_name: ClassVar[str] = "wdp_collectionIsoTest_in"
    class_model_uri: ClassVar[URIRef] = NEON.WdpCollectionIsoTestIn

    isoTestSubsampleFate: Optional[str] = None

@dataclass
class WdiCollectionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdi_collection_pub
    class_class_curie: ClassVar[str] = "neon:wdi_collection_pub"
    class_name: ClassVar[str] = "wdi_collection_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WdiCollectionPub

    equipmentProblems: Optional[str] = None
    equipmentProblemsCategory: Optional[str] = None
    equipmentProblemsRemarks: Optional[str] = None

@dataclass
class WdiCollectionIsoPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdi_collectionIso_pub
    class_class_curie: ClassVar[str] = "neon:wdi_collectionIso_pub"
    class_name: ClassVar[str] = "wdi_collectionIso_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WdiCollectionIsoPub

    isoSubsampleMass: Optional[float] = None
    isoSubsampleID: Optional[str] = None
    isoSubsampleBarcode: Optional[str] = None
    isoSubsampleCondition: Optional[str] = None
    isoSubsampleConditionRemarks: Optional[str] = None

@dataclass
class WdiCollectionIsoTestPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdi_collectionIsoTest_pub
    class_class_curie: ClassVar[str] = "neon:wdi_collectionIsoTest_pub"
    class_name: ClassVar[str] = "wdi_collectionIsoTest_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WdiCollectionIsoTestPub

    isoTestSubsampleVolume: Optional[float] = None

@dataclass
class WdiIsoPerSamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdi_isoPerSample_pub
    class_class_curie: ClassVar[str] = "neon:wdi_isoPerSample_pub"
    class_name: ClassVar[str] = "wdi_isoPerSample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WdiIsoPerSamplePub

    isoTestSubsampleID: Optional[str] = None
    isoTestSubsampleBarcode: Optional[str] = None

@dataclass
class AplClipHarvestIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apl_clipHarvest_in
    class_class_curie: ClassVar[str] = "neon:apl_clipHarvest_in"
    class_name: ClassVar[str] = "apl_clipHarvest_in"
    class_model_uri: ClassVar[URIRef] = NEON.AplClipHarvestIn

    streamAddCoordinateUncertainty: Optional[float] = None

@dataclass
class AplDomainLabIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apl_domainLab_in
    class_class_curie: ClassVar[str] = "neon:apl_domainLab_in"
    class_name: ClassVar[str] = "apl_domainLab_in"
    class_model_uri: ClassVar[URIRef] = NEON.AplDomainLabIn

    chemSubsampleFate: Optional[str] = None
    fieldIDFate: Optional[str] = None
    boatWetMassSum: Optional[float] = None

class ApcPointTransectIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_pointTransect_in
    class_class_curie: ClassVar[str] = "neon:apc_pointTransect_in"
    class_name: ClassVar[str] = "apc_pointTransect_in"
    class_model_uri: ClassVar[URIRef] = NEON.ApcPointTransectIn


@dataclass
class ApcPerTaxonIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_perTaxon_in
    class_class_curie: ClassVar[str] = "neon:apc_perTaxon_in"
    class_name: ClassVar[str] = "apc_perTaxon_in"
    class_model_uri: ClassVar[URIRef] = NEON.ApcPerTaxonIn

    aquaticPlantType: Optional[str] = None

class ApcVoucherIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_voucher_in
    class_class_curie: ClassVar[str] = "neon:apc_voucher_in"
    class_name: ClassVar[str] = "apc_voucher_in"
    class_model_uri: ClassVar[URIRef] = NEON.ApcVoucherIn


class ApcMorphospeciesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_morphospecies_in
    class_class_curie: ClassVar[str] = "neon:apc_morphospecies_in"
    class_name: ClassVar[str] = "apc_morphospecies_in"
    class_model_uri: ClassVar[URIRef] = NEON.ApcMorphospeciesIn


@dataclass
class ApcPointTransectPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_pointTransect_pub
    class_class_curie: ClassVar[str] = "neon:apc_pointTransect_pub"
    class_name: ClassVar[str] = "apc_pointTransect_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ApcPointTransectPub

    transectDistance: Optional[float] = None

class ApcPerTaxonPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_perTaxon_pub
    class_class_curie: ClassVar[str] = "neon:apc_perTaxon_pub"
    class_name: ClassVar[str] = "apc_perTaxon_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ApcPerTaxonPub


class ApcTaxonomyRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_taxonomyRaw_pub
    class_class_curie: ClassVar[str] = "neon:apc_taxonomyRaw_pub"
    class_name: ClassVar[str] = "apc_taxonomyRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ApcTaxonomyRawPub


class ApcTaxonomyProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_taxonomyProcessed_pub
    class_class_curie: ClassVar[str] = "neon:apc_taxonomyProcessed_pub"
    class_name: ClassVar[str] = "apc_taxonomyProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ApcTaxonomyProcessedPub


class ApcVoucherPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_voucher_pub
    class_class_curie: ClassVar[str] = "neon:apc_voucher_pub"
    class_name: ClassVar[str] = "apc_voucher_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ApcVoucherPub


class ApcMorphospeciesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_morphospecies_pub
    class_class_curie: ClassVar[str] = "neon:apc_morphospecies_pub"
    class_name: ClassVar[str] = "apc_morphospecies_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ApcMorphospeciesPub


class ApcVoucherTaxonomyRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_voucherTaxonomyRaw_pub
    class_class_curie: ClassVar[str] = "neon:apc_voucherTaxonomyRaw_pub"
    class_name: ClassVar[str] = "apc_voucherTaxonomyRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ApcVoucherTaxonomyRawPub


class ApcVoucherTaxonomyProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apc_voucherTaxonomyProcessed_pub
    class_class_curie: ClassVar[str] = "neon:apc_voucherTaxonomyProcessed_pub"
    class_name: ClassVar[str] = "apc_voucherTaxonomyProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ApcVoucherTaxonomyProcessedPub


class BetFielddataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_fielddata_in
    class_class_curie: ClassVar[str] = "neon:bet_fielddata_in"
    class_name: ClassVar[str] = "bet_fielddata_in"
    class_model_uri: ClassVar[URIRef] = NEON.BetFielddataIn


class BetSortingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_sorting_in
    class_class_curie: ClassVar[str] = "neon:bet_sorting_in"
    class_name: ClassVar[str] = "bet_sorting_in"
    class_model_uri: ClassVar[URIRef] = NEON.BetSortingIn


@dataclass
class BetIDandpinningIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_IDandpinning_in
    class_class_curie: ClassVar[str] = "neon:bet_IDandpinning_in"
    class_name: ClassVar[str] = "bet_IDandpinning_in"
    class_model_uri: ClassVar[URIRef] = NEON.BetIDandpinningIn

    photographedBy: Optional[str] = None
    photoView: Optional[str] = None

class BetArchivepoolingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_archivepooling_in
    class_class_curie: ClassVar[str] = "neon:bet_archivepooling_in"
    class_name: ClassVar[str] = "bet_archivepooling_in"
    class_model_uri: ClassVar[URIRef] = NEON.BetArchivepoolingIn


class BetExpertTaxonomistIDIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_expertTaxonomistID_in
    class_class_curie: ClassVar[str] = "neon:bet_expertTaxonomistID_in"
    class_name: ClassVar[str] = "bet_expertTaxonomistID_in"
    class_model_uri: ClassVar[URIRef] = NEON.BetExpertTaxonomistIDIn


@dataclass
class BetFielddataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_fielddata_pub
    class_class_curie: ClassVar[str] = "neon:bet_fielddata_pub"
    class_name: ClassVar[str] = "bet_fielddata_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetFielddataPub

    cupStatus: Optional[str] = None
    lidStatus: Optional[str] = None
    fluidLevel: Optional[str] = None

@dataclass
class BetSortingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_sorting_pub
    class_class_curie: ClassVar[str] = "neon:bet_sorting_pub"
    class_name: ClassVar[str] = "bet_sorting_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetSortingPub

    etOHChangeDate: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.etOHChangeDate is not None and not isinstance(self.etOHChangeDate, XSDTime):
            self.etOHChangeDate = XSDTime(self.etOHChangeDate)
        super().__post_init__(**kwargs)


class BetParataxonomistIDPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_parataxonomistID_pub
    class_class_curie: ClassVar[str] = "neon:bet_parataxonomistID_pub"
    class_name: ClassVar[str] = "bet_parataxonomistID_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetParataxonomistIDPub


@dataclass
class BetArchivepoolingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_archivepooling_pub
    class_class_curie: ClassVar[str] = "neon:bet_archivepooling_pub"
    class_name: ClassVar[str] = "bet_archivepooling_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetArchivepoolingPub

    archiveVialID: Optional[str] = None
    subsampleIDList: Optional[str] = None

class BetExpertTaxonomistIDProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_expertTaxonomistIDProcessed_pub
    class_class_curie: ClassVar[str] = "neon:bet_expertTaxonomistIDProcessed_pub"
    class_name: ClassVar[str] = "bet_expertTaxonomistIDProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetExpertTaxonomistIDProcessedPub


class BetExpertTaxonomistIDRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_expertTaxonomistIDRaw_pub
    class_class_curie: ClassVar[str] = "neon:bet_expertTaxonomistIDRaw_pub"
    class_name: ClassVar[str] = "bet_expertTaxonomistIDRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetExpertTaxonomistIDRawPub


@dataclass
class BrdPersonnelIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.brd_personnel_in
    class_class_curie: ClassVar[str] = "neon:brd_personnel_in"
    class_name: ClassVar[str] = "brd_personnel_in"
    class_model_uri: ClassVar[URIRef] = NEON.BrdPersonnelIn

    fullName: Optional[str] = None

class BrdReferencesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.brd_references_in
    class_class_curie: ClassVar[str] = "neon:brd_references_in"
    class_name: ClassVar[str] = "brd_references_in"
    class_model_uri: ClassVar[URIRef] = NEON.BrdReferencesIn


class BrdPerpointIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.brd_perpoint_in
    class_class_curie: ClassVar[str] = "neon:brd_perpoint_in"
    class_name: ClassVar[str] = "brd_perpoint_in"
    class_model_uri: ClassVar[URIRef] = NEON.BrdPerpointIn


@dataclass
class BrdCountdataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.brd_countdata_in
    class_class_curie: ClassVar[str] = "neon:brd_countdata_in"
    class_name: ClassVar[str] = "brd_countdata_in"
    class_model_uri: ClassVar[URIRef] = NEON.BrdCountdataIn

    taxonRaw: Optional[str] = None

@dataclass
class BrdPersonnelPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.brd_personnel_pub
    class_class_curie: ClassVar[str] = "neon:brd_personnel_pub"
    class_name: ClassVar[str] = "brd_personnel_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BrdPersonnelPub

    observerInstitutionName: Optional[str] = None
    technicianID: Optional[str] = None
    evaluationMethod: Optional[str] = None
    evaluationScore: Optional[str] = None

class BrdReferencesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.brd_references_pub
    class_class_curie: ClassVar[str] = "neon:brd_references_pub"
    class_name: ClassVar[str] = "brd_references_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BrdReferencesPub


@dataclass
class BrdPerpointPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.brd_perpoint_pub
    class_class_curie: ClassVar[str] = "neon:brd_perpoint_pub"
    class_name: ClassVar[str] = "brd_perpoint_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BrdPerpointPub

    startCloudCoverPercentage: Optional[str] = None
    endCloudCoverPercentage: Optional[str] = None
    startRH: Optional[str] = None
    endRH: Optional[str] = None
    observedHabitat: Optional[str] = None
    observedAirTemp: Optional[float] = None
    kmPerHourObservedWindSpeed: Optional[float] = None

@dataclass
class BrdCountdataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.brd_countdata_pub
    class_class_curie: ClassVar[str] = "neon:brd_countdata_pub"
    class_name: ClassVar[str] = "brd_countdata_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BrdCountdataPub

    pointCountMinute: Optional[str] = None
    observerDistance: Optional[float] = None
    detectionMethod: Optional[str] = None
    visualConfirmation: Optional[str] = None
    clusterCode: Optional[str] = None
    clusterSize: Optional[str] = None
    vernacularName: Optional[str] = None

class CdwFieldtallyIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cdw_fieldtally_in
    class_class_curie: ClassVar[str] = "neon:cdw_fieldtally_in"
    class_name: ClassVar[str] = "cdw_fieldtally_in"
    class_model_uri: ClassVar[URIRef] = NEON.CdwFieldtallyIn


@dataclass
class CdwFieldtallyPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cdw_fieldtally_pub
    class_class_curie: ClassVar[str] = "neon:cdw_fieldtally_pub"
    class_name: ClassVar[str] = "cdw_fieldtally_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CdwFieldtallyPub

    aForkMaxDiameter: Optional[float] = None
    aForkMinorDiameter: Optional[float] = None
    bForkMaxDiameter: Optional[float] = None
    bForkMinorDiameter: Optional[float] = None
    cForkMaxDiameter: Optional[float] = None
    cForkMinorDiameter: Optional[float] = None
    dForkMaxDiameter: Optional[float] = None
    dForkMinorDiameter: Optional[float] = None
    eForkMaxDiameter: Optional[float] = None
    eForkMinorDiameter: Optional[float] = None
    fForkMaxDiameter: Optional[float] = None
    fForkMinorDiameter: Optional[float] = None
    gForkMaxDiameter: Optional[float] = None
    gForkMinorDiameter: Optional[float] = None
    hForkMaxDiameter: Optional[float] = None
    hForkMinorDiameter: Optional[float] = None
    iForkMaxDiameter: Optional[float] = None
    iForkMinorDiameter: Optional[float] = None
    jForkMaxDiameter: Optional[float] = None
    jForkMinorDiameter: Optional[float] = None
    equivalentLogDiameter: Optional[float] = None
    lidsAzimuth: Optional[str] = None
    logLength: Optional[float] = None
    logMaxDiameter: Optional[float] = None
    logMinorDiameter: Optional[float] = None
    volumeFactor: Optional[str] = None

@dataclass
class HbpPerboutIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.hbp_perbout_in
    class_class_curie: ClassVar[str] = "neon:hbp_perbout_in"
    class_name: ClassVar[str] = "hbp_perbout_in"
    class_model_uri: ClassVar[URIRef] = NEON.HbpPerboutIn

    hbpType: Optional[str] = None
    subsamplesCreated: Optional[str] = None

class HbpMassdataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.hbp_massdata_in
    class_class_curie: ClassVar[str] = "neon:hbp_massdata_in"
    class_name: ClassVar[str] = "hbp_massdata_in"
    class_model_uri: ClassVar[URIRef] = NEON.HbpMassdataIn


@dataclass
class HbpPerboutPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.hbp_perbout_pub
    class_class_curie: ClassVar[str] = "neon:hbp_perbout_pub"
    class_name: ClassVar[str] = "hbp_perbout_pub"
    class_model_uri: ClassVar[URIRef] = NEON.HbpPerboutPub

    exclosure: Optional[str] = None
    slopeAspect: Optional[float] = None
    slopeGradient: Optional[float] = None
    clipArea: Optional[float] = None
    plotManagement: Optional[str] = None

@dataclass
class HbpMassdataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.hbp_massdata_pub
    class_class_curie: ClassVar[str] = "neon:hbp_massdata_pub"
    class_name: ClassVar[str] = "hbp_massdata_pub"
    class_model_uri: ClassVar[URIRef] = NEON.HbpMassdataPub

    herbGroup: Optional[str] = None
    subsampleDryMass: Optional[float] = None
    subsampleFreshMass: Optional[float] = None

@dataclass
class MosTrappingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_trapping_in
    class_class_curie: ClassVar[str] = "neon:mos_trapping_in"
    class_name: ClassVar[str] = "mos_trapping_in"
    class_model_uri: ClassVar[URIRef] = NEON.MosTrappingIn

    pdaDecimalLatitude: Optional[float] = None
    pdaDecimalLongitude: Optional[float] = None
    pdaAccuracy: Optional[float] = None
    pdaElevation: Optional[float] = None

class MosSortingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_sorting_in
    class_class_curie: ClassVar[str] = "neon:mos_sorting_in"
    class_name: ClassVar[str] = "mos_sorting_in"
    class_model_uri: ClassVar[URIRef] = NEON.MosSortingIn


class MosIdentificationIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_identification_in
    class_class_curie: ClassVar[str] = "neon:mos_identification_in"
    class_name: ClassVar[str] = "mos_identification_in"
    class_model_uri: ClassVar[URIRef] = NEON.MosIdentificationIn


class MosBarcodingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_barcoding_in
    class_class_curie: ClassVar[str] = "neon:mos_barcoding_in"
    class_name: ClassVar[str] = "mos_barcoding_in"
    class_model_uri: ClassVar[URIRef] = NEON.MosBarcodingIn


class MosPathogenpoolingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_pathogenpooling_in
    class_class_curie: ClassVar[str] = "neon:mos_pathogenpooling_in"
    class_name: ClassVar[str] = "mos_pathogenpooling_in"
    class_model_uri: ClassVar[URIRef] = NEON.MosPathogenpoolingIn


class MosArchivepoolingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_archivepooling_in
    class_class_curie: ClassVar[str] = "neon:mos_archivepooling_in"
    class_name: ClassVar[str] = "mos_archivepooling_in"
    class_model_uri: ClassVar[URIRef] = NEON.MosArchivepoolingIn


@dataclass
class MosPathogenresultsIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_pathogenresults_in
    class_class_curie: ClassVar[str] = "neon:mos_pathogenresults_in"
    class_name: ClassVar[str] = "mos_pathogenresults_in"
    class_model_uri: ClassVar[URIRef] = NEON.MosPathogenresultsIn

    sampleCompromised: Optional[str] = None
    testingVialIDFate: Optional[str] = None

@dataclass
class MosTrappingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_trapping_pub
    class_class_curie: ClassVar[str] = "neon:mos_trapping_pub"
    class_name: ClassVar[str] = "mos_trapping_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosTrappingPub

    sampleTiming: Optional[str] = None
    fanStatus: Optional[str] = None
    catchCupStatus: Optional[str] = None
    dryIceStatus: Optional[str] = None
    nightOrDay: Optional[str] = None
    trapHours: Optional[float] = None

@dataclass
class MosSortingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_sorting_pub
    class_class_curie: ClassVar[str] = "neon:mos_sorting_pub"
    class_name: ClassVar[str] = "mos_sorting_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosSortingPub

    totalWeight: Optional[float] = None
    subsampleWeight: Optional[float] = None
    bycatchWeight: Optional[float] = None

class MosExpertTaxonomistIDProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_expertTaxonomistIDProcessed_pub
    class_class_curie: ClassVar[str] = "neon:mos_expertTaxonomistIDProcessed_pub"
    class_name: ClassVar[str] = "mos_expertTaxonomistIDProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosExpertTaxonomistIDProcessedPub


@dataclass
class MosExpertTaxonomistIDRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_expertTaxonomistIDRaw_pub
    class_class_curie: ClassVar[str] = "neon:mos_expertTaxonomistIDRaw_pub"
    class_name: ClassVar[str] = "mos_expertTaxonomistIDRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosExpertTaxonomistIDRawPub

    individualIDList: Optional[str] = None

@dataclass
class MosArchivepoolingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_archivepooling_pub
    class_class_curie: ClassVar[str] = "neon:mos_archivepooling_pub"
    class_name: ClassVar[str] = "mos_archivepooling_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosArchivepoolingPub

    archiveVialIDList: Optional[str] = None
    archivedCount: Optional[str] = None
    archiveIDCode: Optional[str] = None

class MosBarcodingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_barcoding_pub
    class_class_curie: ClassVar[str] = "neon:mos_barcoding_pub"
    class_name: ClassVar[str] = "mos_barcoding_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosBarcodingPub


@dataclass
class MosPathogenpoolingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_pathogenpooling_pub
    class_class_curie: ClassVar[str] = "neon:mos_pathogenpooling_pub"
    class_name: ClassVar[str] = "mos_pathogenpooling_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosPathogenpoolingPub

    poolSize: Optional[str] = None

@dataclass
class MosPathogenresultsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_pathogenresults_pub
    class_class_curie: ClassVar[str] = "neon:mos_pathogenresults_pub"
    class_name: ClassVar[str] = "mos_pathogenresults_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosPathogenresultsPub

    testingVialID: Optional[str] = None
    testNumber: Optional[str] = None
    finalResult: Optional[str] = None
    locus: Optional[str] = None
    percentIdentity: Optional[str] = None
    sequenceDatabase: Optional[str] = None
    sequenceDatabaseID: Optional[str] = None
    extractDepleted: Optional[str] = None
    startCollectDate: Optional[Union[str, XSDTime]] = None
    endCollectDate: Optional[Union[str, XSDTime]] = None
    testingVialIDCode: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.startCollectDate is not None and not isinstance(self.startCollectDate, XSDTime):
            self.startCollectDate = XSDTime(self.startCollectDate)
        if self.endCollectDate is not None and not isinstance(self.endCollectDate, XSDTime):
            self.endCollectDate = XSDTime(self.endCollectDate)
        super().__post_init__(**kwargs)


@dataclass
class PhePerindividualIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.phe_perindividual_in
    class_class_curie: ClassVar[str] = "neon:phe_perindividual_in"
    class_name: ClassVar[str] = "phe_perindividual_in"
    class_model_uri: ClassVar[URIRef] = NEON.PhePerindividualIn

    addDate: Optional[Union[str, XSDTime]] = None
    dropPlant: Optional[str] = None
    logCount: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.addDate is not None and not isinstance(self.addDate, XSDTime):
            self.addDate = XSDTime(self.addDate)
        super().__post_init__(**kwargs)


class PheStatusintensityIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.phe_statusintensity_in
    class_class_curie: ClassVar[str] = "neon:phe_statusintensity_in"
    class_name: ClassVar[str] = "phe_statusintensity_in"
    class_model_uri: ClassVar[URIRef] = NEON.PheStatusintensityIn


@dataclass
class PhePerindividualperyearIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.phe_perindividualperyear_in
    class_class_curie: ClassVar[str] = "neon:phe_perindividualperyear_in"
    class_name: ClassVar[str] = "phe_perindividualperyear_in"
    class_model_uri: ClassVar[URIRef] = NEON.PhePerindividualperyearIn

    diseaseStatus: Optional[str] = None

@dataclass
class PhePerindividualPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.phe_perindividual_pub
    class_class_curie: ClassVar[str] = "neon:phe_perindividual_pub"
    class_name: ClassVar[str] = "phe_perindividual_pub"
    class_model_uri: ClassVar[URIRef] = NEON.PhePerindividualPub

    transectMeter: Optional[float] = None
    directionFromTransect: Optional[str] = None
    ninetyDegreeDistance: Optional[float] = None
    sampleCoordinateUncertainty: Optional[float] = None
    sampleElevation: Optional[float] = None
    sampleElevationUncertainty: Optional[float] = None
    sampleLatitude: Optional[float] = None
    sampleLongitude: Optional[float] = None
    subtypeSpecification: Optional[str] = None
    sampleGeodeticDatum: Optional[str] = None

@dataclass
class PhePerindividualperyearPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.phe_perindividualperyear_pub
    class_class_curie: ClassVar[str] = "neon:phe_perindividualperyear_pub"
    class_name: ClassVar[str] = "phe_perindividualperyear_pub"
    class_model_uri: ClassVar[URIRef] = NEON.PhePerindividualperyearPub

    patchOrIndividual: Optional[str] = None
    maxCanopyDiameter: Optional[float] = None
    ninetyCanopyDiameter: Optional[float] = None
    adultLeafLength: Optional[float] = None
    diseaseType: Optional[str] = None
    patchSize: Optional[float] = None

@dataclass
class PheStatusintensityPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.phe_statusintensity_pub
    class_class_curie: ClassVar[str] = "neon:phe_statusintensity_pub"
    class_name: ClassVar[str] = "phe_statusintensity_pub"
    class_model_uri: ClassVar[URIRef] = NEON.PheStatusintensityPub

    phenophaseName: Optional[str] = None
    phenophaseStatus: Optional[str] = None
    phenophaseIntensityDefinition: Optional[str] = None
    phenophaseIntensity: Optional[str] = None
    dayOfYear: Optional[str] = None
    editedDate: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.editedDate is not None and not isinstance(self.editedDate, XSDTime):
            self.editedDate = XSDTime(self.editedDate)
        super().__post_init__(**kwargs)


class RipAssessmentPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rip_assessment_pub
    class_class_curie: ClassVar[str] = "neon:rip_assessment_pub"
    class_name: ClassVar[str] = "rip_assessment_pub"
    class_model_uri: ClassVar[URIRef] = NEON.RipAssessmentPub


@dataclass
class RipFieldDataBankIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rip_fieldDataBank_in
    class_class_curie: ClassVar[str] = "neon:rip_fieldDataBank_in"
    class_name: ClassVar[str] = "rip_fieldDataBank_in"
    class_model_uri: ClassVar[URIRef] = NEON.RipFieldDataBankIn

    adjacentAreaLeftRemarks: Optional[str] = None
    adjacentAreaRightRemarks: Optional[str] = None
    agriculturePresence: Optional[str] = None
    bankLR: Optional[str] = None
    bareDirtCoverClass: Optional[str] = None
    bigTreeCoverClass: Optional[str] = None
    bigTreeType: Optional[str] = None
    boatRampPresence: Optional[str] = None
    buildingPresence: Optional[str] = None
    dominantBankAngle: Optional[str] = None
    dominantBankRevetment: Optional[str] = None
    dominantBankTexture: Optional[str] = None
    industryPresence: Optional[str] = None
    lawnsParksPresence: Optional[str] = None
    pavementPresence: Optional[str] = None
    riparianClass: Optional[str] = None
    riparianDominantVegetation: Optional[str] = None
    riparianSubclass: Optional[str] = None
    riparianSubsystem: Optional[str] = None
    riparianWaterDepth: Optional[float] = None
    roadPresence: Optional[str] = None
    shortHerbCoverClass: Optional[str] = None
    smallTreeCoverClass: Optional[str] = None
    smallTreeType: Optional[str] = None
    standingWaterCoverClass: Optional[str] = None
    subdominantBankAngle: Optional[str] = None
    subdominantBankRevetment: Optional[str] = None
    subdominantBankTexture: Optional[str] = None
    tallHerbCoverClass: Optional[str] = None
    tallHerbType: Optional[str] = None
    trashPresence: Optional[str] = None
    woodyShrubGroundCoverClass: Optional[str] = None
    woodyShrubSaplingCoverClass: Optional[str] = None
    woodyShrubSaplingType: Optional[str] = None
    boatToShoreDist: Optional[float] = None
    estVisibilityDist: Optional[str] = None
    bankUndercut: Optional[str] = None

@dataclass
class RipPercentCanopyCoverIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rip_percentCanopyCover_in
    class_class_curie: ClassVar[str] = "neon:rip_percentCanopyCover_in"
    class_name: ClassVar[str] = "rip_percentCanopyCover_in"
    class_model_uri: ClassVar[URIRef] = NEON.RipPercentCanopyCoverIn

    fulcrumChildID: Optional[str] = None
    fulcrumGrandchildID: Optional[str] = None

@dataclass
class RipPercentCompositionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rip_percentComposition_pub
    class_class_curie: ClassVar[str] = "neon:rip_percentComposition_pub"
    class_name: ClassVar[str] = "rip_percentComposition_pub"
    class_model_uri: ClassVar[URIRef] = NEON.RipPercentCompositionPub

    coveredDensiometerPoints: Optional[str] = None
    measurementDirection: Optional[str] = None
    totalDensiometerPoints: Optional[str] = None
    canopyCoverPercent: Optional[float] = None

@dataclass
class RptBloodtestingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rpt_bloodtesting_in
    class_class_curie: ClassVar[str] = "neon:rpt_bloodtesting_in"
    class_name: ClassVar[str] = "rpt_bloodtesting_in"
    class_model_uri: ClassVar[URIRef] = NEON.RptBloodtestingIn

    internalLabFate: Optional[str] = None

@dataclass
class RptBloodtestingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rpt_bloodtesting_pub
    class_class_curie: ClassVar[str] = "neon:rpt_bloodtesting_pub"
    class_name: ClassVar[str] = "rpt_bloodtesting_pub"
    class_model_uri: ClassVar[URIRef] = NEON.RptBloodtestingPub

    agWellOpticalDensity: Optional[float] = None
    cAgWellOpticalDensity: Optional[float] = None
    conjugateDilution: Optional[str] = None
    conjugateLot: Optional[str] = None
    diluentDilution: Optional[str] = None
    diluentLot: Optional[str] = None
    internalLabBarcode: Optional[str] = None
    negAbDilution: Optional[str] = None
    negAbLot: Optional[str] = None
    netOpticalDensity: Optional[float] = None
    plateLot: Optional[str] = None
    posAbDilution: Optional[str] = None
    posAbLot: Optional[str] = None
    rawTestResult: Optional[str] = None
    substrateLot: Optional[str] = None
    substrateTime: Optional[float] = None

class DepProfileHeaderPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dep_profileHeader_pub
    class_class_curie: ClassVar[str] = "neon:dep_profileHeader_pub"
    class_name: ClassVar[str] = "dep_profileHeader_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DepProfileHeaderPub


class DepProfileDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dep_profileData_pub
    class_class_curie: ClassVar[str] = "neon:dep_profileData_pub"
    class_name: ClassVar[str] = "dep_profileData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DepProfileDataPub


@dataclass
class DepProfileHeaderIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dep_profileHeader_in
    class_class_curie: ClassVar[str] = "neon:dep_profileHeader_in"
    class_name: ClassVar[str] = "dep_profileHeader_in"
    class_model_uri: ClassVar[URIRef] = NEON.DepProfileHeaderIn

    iceThickness: Optional[float] = None
    thermalStratification: Optional[str] = None
    estimatedMetalimnionDepths: Optional[str] = None
    lowerMetalimnionDepth: Optional[str] = None
    lowerMetalimnion2Depth: Optional[str] = None
    upperMetalimnionDepth: Optional[str] = None
    upperMetalimnion2Depth: Optional[str] = None
    snowThickness: Optional[float] = None

class DepProfileDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dep_profileData_in
    class_class_curie: ClassVar[str] = "neon:dep_profileData_in"
    class_name: ClassVar[str] = "dep_profileData_in"
    class_model_uri: ClassVar[URIRef] = NEON.DepProfileDataIn


class DepSecchiIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dep_secchi_in
    class_class_curie: ClassVar[str] = "neon:dep_secchi_in"
    class_name: ClassVar[str] = "dep_secchi_in"
    class_model_uri: ClassVar[URIRef] = NEON.DepSecchiIn


@dataclass
class DepSecchiPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dep_secchi_pub
    class_class_curie: ClassVar[str] = "neon:dep_secchi_pub"
    class_name: ClassVar[str] = "dep_secchi_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DepSecchiPub

    secchi1Depth: Optional[float] = None
    secchi2Depth: Optional[float] = None
    clearToBottom: Optional[str] = None
    secchiMeanDepth: Optional[float] = None
    euphoticDepth: Optional[float] = None

@dataclass
class MamPertrapnightIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_pertrapnight_in
    class_class_curie: ClassVar[str] = "neon:mam_pertrapnight_in"
    class_name: ClassVar[str] = "mam_pertrapnight_in"
    class_model_uri: ClassVar[URIRef] = NEON.MamPertrapnightIn

    daysOfTrapping: Optional[str] = None
    dnaBarcoded: Optional[str] = None
    bloodSampleFate: Optional[str] = None
    earSampleFate: Optional[str] = None
    fecalSampleFate: Optional[str] = None
    hairSampleFate: Optional[str] = None

class MamPerplotnightIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_perplotnight_in
    class_class_curie: ClassVar[str] = "neon:mam_perplotnight_in"
    class_name: ClassVar[str] = "mam_perplotnight_in"
    class_model_uri: ClassVar[URIRef] = NEON.MamPerplotnightIn


class TckCollectionIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_collection_in
    class_class_curie: ClassVar[str] = "neon:tck_collection_in"
    class_name: ClassVar[str] = "tck_collection_in"
    class_model_uri: ClassVar[URIRef] = NEON.TckCollectionIn


class TckIdentificationIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_identification_in
    class_class_curie: ClassVar[str] = "neon:tck_identification_in"
    class_name: ClassVar[str] = "tck_identification_in"
    class_model_uri: ClassVar[URIRef] = NEON.TckIdentificationIn


@dataclass
class TckPathogenresultsIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_pathogenresults_in
    class_class_curie: ClassVar[str] = "neon:tck_pathogenresults_in"
    class_name: ClassVar[str] = "tck_pathogenresults_in"
    class_model_uri: ClassVar[URIRef] = NEON.TckPathogenresultsIn

    testingIDFate: Optional[str] = None

class TckPathogenqaIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_pathogenqa_in
    class_class_curie: ClassVar[str] = "neon:tck_pathogenqa_in"
    class_name: ClassVar[str] = "tck_pathogenqa_in"
    class_model_uri: ClassVar[URIRef] = NEON.TckPathogenqaIn


@dataclass
class TckFielddataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_fielddata_pub
    class_class_curie: ClassVar[str] = "neon:tck_fielddata_pub"
    class_name: ClassVar[str] = "tck_fielddata_pub"
    class_model_uri: ClassVar[URIRef] = NEON.TckFielddataPub

    adultCount: Optional[str] = None
    larvaCount: Optional[str] = None
    nymphCount: Optional[str] = None

class TckTaxonomyRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_taxonomyRaw_pub
    class_class_curie: ClassVar[str] = "neon:tck_taxonomyRaw_pub"
    class_name: ClassVar[str] = "tck_taxonomyRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.TckTaxonomyRawPub


@dataclass
class TckTaxonomyProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_taxonomyProcessed_pub
    class_class_curie: ClassVar[str] = "neon:tck_taxonomyProcessed_pub"
    class_name: ClassVar[str] = "tck_taxonomyProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.TckTaxonomyProcessedPub

    sexOrAge: Optional[str] = None
    identificationProtocolVersion: Optional[str] = None

@dataclass
class TckPathogenPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_pathogen_pub
    class_class_curie: ClassVar[str] = "neon:tck_pathogen_pub"
    class_name: ClassVar[str] = "tck_pathogen_pub"
    class_model_uri: ClassVar[URIRef] = NEON.TckPathogenPub

    testingID: Optional[str] = None
    testResult: Optional[str] = None
    testPathogenName: Optional[str] = None
    testedBy: Optional[str] = None
    testingIDCode: Optional[str] = None

class TckPathogenqaPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_pathogenqa_pub
    class_class_curie: ClassVar[str] = "neon:tck_pathogenqa_pub"
    class_name: ClassVar[str] = "tck_pathogenqa_pub"
    class_model_uri: ClassVar[URIRef] = NEON.TckPathogenqaPub


@dataclass
class VstPerplotperyearPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.vst_perplotperyear_pub
    class_class_curie: ClassVar[str] = "neon:vst_perplotperyear_pub"
    class_name: ClassVar[str] = "vst_perplotperyear_pub"
    class_model_uri: ClassVar[URIRef] = NEON.VstPerplotperyearPub

    plotSize: Optional[float] = None
    easting: Optional[float] = None
    northing: Optional[float] = None
    utmZone: Optional[str] = None

class NstPerindividualPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.nst_perindividual_pub
    class_class_curie: ClassVar[str] = "neon:nst_perindividual_pub"
    class_name: ClassVar[str] = "nst_perindividual_pub"
    class_model_uri: ClassVar[URIRef] = NEON.NstPerindividualPub


@dataclass
class VstPerplotperyearIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.vst_perplotperyear_in
    class_class_curie: ClassVar[str] = "neon:vst_perplotperyear_in"
    class_name: ClassVar[str] = "vst_perplotperyear_in"
    class_model_uri: ClassVar[URIRef] = NEON.VstPerplotperyearIn

    cactiAbsentList: Optional[str] = None
    cactiPresent: Optional[str] = None
    fernsAbsentList: Optional[str] = None
    fernsPresent: Optional[str] = None
    lianasAbsentList: Optional[str] = None
    lianasPresent: Optional[str] = None
    nestedSubplotAreaLiana: Optional[str] = None
    nestedSubplotAreaOther: Optional[str] = None
    nestedSubplotAreaShrubSapling: Optional[str] = None
    ocotillosAbsentList: Optional[str] = None
    ocotillosPresent: Optional[str] = None
    palmsAbsentList: Optional[str] = None
    palmsPresent: Optional[str] = None
    shrubsAbsentList: Optional[str] = None
    shrubsPresent: Optional[str] = None
    totalSampledAreaLiana: Optional[float] = None
    totalSampledAreaOther: Optional[float] = None
    totalSampledAreaShrubSapling: Optional[float] = None
    totalSampledAreaTrees: Optional[float] = None
    treesAbsentList: Optional[str] = None
    treesPresent: Optional[str] = None
    xerophyllumAbsentList: Optional[str] = None
    xerophyllumPresent: Optional[str] = None
    yuccasAbsentList: Optional[str] = None
    yuccasPresent: Optional[str] = None
    dataCollected: Optional[str] = None

@dataclass
class VstMappingandtaggingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.vst_mappingandtagging_in
    class_class_curie: ClassVar[str] = "neon:vst_mappingandtagging_in"
    class_name: ClassVar[str] = "vst_mappingandtagging_in"
    class_model_uri: ClassVar[URIRef] = NEON.VstMappingandtaggingIn

    supportingStemTagID: Optional[str] = None
    vstBarcode: Optional[str] = None
    vstFate: Optional[str] = None
    vstID: Optional[str] = None

@dataclass
class VstApparentindividualIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.vst_apparentindividual_in
    class_class_curie: ClassVar[str] = "neon:vst_apparentindividual_in"
    class_name: ClassVar[str] = "vst_apparentindividual_in"
    class_model_uri: ClassVar[URIRef] = NEON.VstApparentindividualIn

    nullFieldValidation: Optional[float] = None
    vdApexBreakHeight: Optional[float] = None
    vdApexHeight: Optional[float] = None
    vdBaseBreakHeight: Optional[float] = None
    vdBaseHeight: Optional[float] = None
    initialBandStemDiameter: Optional[float] = None
    initialDendrometerGap: Optional[float] = None
    dendrometerHeight: Optional[float] = None
    tempStemID: Optional[str] = None
    measurementStrategy: Optional[str] = None
    changedMeasurementLocation: Optional[str] = None
    dendrometerInstallationDate: Optional[str] = None
    initalGapMeasurementDate: Optional[Union[str, XSDTime]] = None
    dendrometerGap: Optional[float] = None
    dendrometerCondition: Optional[str] = None
    bandStemDiameter: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.initalGapMeasurementDate is not None and not isinstance(self.initalGapMeasurementDate, XSDTime):
            self.initalGapMeasurementDate = XSDTime(self.initalGapMeasurementDate)
        super().__post_init__(**kwargs)


@dataclass
class VstNon-woodyIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON["vst_non-woody_in"]
    class_class_curie: ClassVar[str] = "neon:vst_non-woody_in"
    class_name: ClassVar[str] = "vst_non-woody_in"
    class_model_uri: ClassVar[URIRef] = NEON.VstNon-woodyIn

    branchCount: Optional[str] = None
    leafNumber: Optional[str] = None
    meanBasalDiameter: Optional[float] = None
    meanBladeLength: Optional[float] = None
    meanBranchLength: Optional[float] = None
    meanLeafLength: Optional[float] = None
    meanPetioleLength: Optional[float] = None
    newPadCount: Optional[str] = None
    oldPadCount: Optional[str] = None
    stemCount: Optional[str] = None
    padCountValidation: Optional[str] = None
    stemLength: Optional[float] = None

@dataclass
class VstShrubgroupIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.vst_shrubgroup_in
    class_class_curie: ClassVar[str] = "neon:vst_shrubgroup_in"
    class_name: ClassVar[str] = "vst_shrubgroup_in"
    class_model_uri: ClassVar[URIRef] = NEON.VstShrubgroupIn

    aGroupHeight: Optional[float] = None
    bGroupHeight: Optional[float] = None
    cGroupHeight: Optional[float] = None
    dGroupHeight: Optional[float] = None
    eGroupHeight: Optional[float] = None

class ZooFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_fieldData_in
    class_class_curie: ClassVar[str] = "neon:zoo_fieldData_in"
    class_name: ClassVar[str] = "zoo_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.ZooFieldDataIn


@dataclass
class ZooPerTaxonIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_perTaxon_in
    class_class_curie: ClassVar[str] = "neon:zoo_perTaxon_in"
    class_name: ClassVar[str] = "zoo_perTaxon_in"
    class_model_uri: ClassVar[URIRef] = NEON.ZooPerTaxonIn

    referencePhotoID: Optional[str] = None
    referencePhotoCode: Optional[str] = None

class ZooPerVialIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_perVial_in
    class_class_curie: ClassVar[str] = "neon:zoo_perVial_in"
    class_name: ClassVar[str] = "zoo_perVial_in"
    class_model_uri: ClassVar[URIRef] = NEON.ZooPerVialIn


class MmsMetagenomeSequencingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_metagenomeSequencing_in
    class_class_curie: ClassVar[str] = "neon:mms_metagenomeSequencing_in"
    class_name: ClassVar[str] = "mms_metagenomeSequencing_in"
    class_model_uri: ClassVar[URIRef] = NEON.MmsMetagenomeSequencingIn


class MmsMetagenomeDnaExtractionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_metagenomeDnaExtraction_pub
    class_class_curie: ClassVar[str] = "neon:mms_metagenomeDnaExtraction_pub"
    class_name: ClassVar[str] = "mms_metagenomeDnaExtraction_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsMetagenomeDnaExtractionPub


class MmsMetagenomeSequencingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_metagenomeSequencing_pub
    class_class_curie: ClassVar[str] = "neon:mms_metagenomeSequencing_pub"
    class_name: ClassVar[str] = "mms_metagenomeSequencing_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsMetagenomeSequencingPub


class NtrInternalLabPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_internalLab_pub
    class_class_curie: ClassVar[str] = "neon:ntr_internalLab_pub"
    class_name: ClassVar[str] = "ntr_internalLab_pub"
    class_model_uri: ClassVar[URIRef] = NEON.NtrInternalLabPub


class NtrInternalLabBlanksPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_internalLabBlanks_pub
    class_class_curie: ClassVar[str] = "neon:ntr_internalLabBlanks_pub"
    class_name: ClassVar[str] = "ntr_internalLabBlanks_pub"
    class_model_uri: ClassVar[URIRef] = NEON.NtrInternalLabBlanksPub


class NtrExternalLabPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_externalLab_pub
    class_class_curie: ClassVar[str] = "neon:ntr_externalLab_pub"
    class_name: ClassVar[str] = "ntr_externalLab_pub"
    class_model_uri: ClassVar[URIRef] = NEON.NtrExternalLabPub


class NtrExternalSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_externalSummary_pub
    class_class_curie: ClassVar[str] = "neon:ntr_externalSummary_pub"
    class_name: ClassVar[str] = "ntr_externalSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.NtrExternalSummaryPub


@dataclass
class NtrInternalLabIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_internalLab_in
    class_class_curie: ClassVar[str] = "neon:ntr_internalLab_in"
    class_name: ClassVar[str] = "ntr_internalLab_in"
    class_model_uri: ClassVar[URIRef] = NEON.NtrInternalLabIn

    nTransBoutType: Optional[str] = None
    incubationLength: Optional[float] = None
    incubationPairID: Optional[str] = None
    kclBatchNumber: Optional[str] = None
    kclVolume: Optional[float] = None
    soilFreshMass: Optional[float] = None

@dataclass
class NtrInternalLabBlanksIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_internalLabBlanks_in
    class_class_curie: ClassVar[str] = "neon:ntr_internalLabBlanks_in"
    class_name: ClassVar[str] = "ntr_internalLabBlanks_in"
    class_model_uri: ClassVar[URIRef] = NEON.NtrInternalLabBlanksIn

    extractionEndDate: Optional[Union[str, XSDTime]] = None
    kclBlank1Code: Optional[str] = None
    kclBlank1Fate: Optional[str] = None
    kclBlank1ID: Optional[str] = None
    kclBlank2Code: Optional[str] = None
    kclBlank2Fate: Optional[str] = None
    kclBlank2ID: Optional[str] = None
    kclBlank3Code: Optional[str] = None
    kclBlank3Fate: Optional[str] = None
    kclBlank3ID: Optional[str] = None
    kclReferenceCode: Optional[str] = None
    kclReferenceFate: Optional[str] = None
    kclReferenceID: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.extractionEndDate is not None and not isinstance(self.extractionEndDate, XSDTime):
            self.extractionEndDate = XSDTime(self.extractionEndDate)
        super().__post_init__(**kwargs)


@dataclass
class NtrExternalLabIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_externalLab_in
    class_class_curie: ClassVar[str] = "neon:ntr_externalLab_in"
    class_name: ClassVar[str] = "ntr_externalLab_in"
    class_model_uri: ClassVar[URIRef] = NEON.NtrExternalLabIn

    nitrateNitriteNRunID: Optional[str] = None
    ammoniumNAnalysisDate: Optional[Union[str, XSDTime]] = None
    ammoniumNAnalyzedBy: Optional[str] = None
    ammoniumNInstrument: Optional[str] = None
    ammoniumNMethod: Optional[str] = None
    ammoniumNQF: Optional[str] = None
    ammoniumNRemarks: Optional[str] = None
    ammoniumNRepNum: Optional[str] = None
    ammoniumNReviewedBy: Optional[str] = None
    ammoniumNRunID: Optional[str] = None
    kclAmmoniumNConc: Optional[float] = None
    kclNitrateNitriteNConc: Optional[float] = None
    kclSampleCode: Optional[str] = None
    kclSampleFate: Optional[str] = None
    kclSampleID: Optional[str] = None
    nitrateNitriteNAnalysisDate: Optional[Union[str, XSDTime]] = None
    nitrateNitriteNAnalyzedBy: Optional[str] = None
    nitrateNitriteNInstrument: Optional[str] = None
    nitrateNitriteNMethod: Optional[str] = None
    nitrateNitriteNQF: Optional[str] = None
    nitrateNitriteNRemarks: Optional[str] = None
    nitrateNitriteNRepNum: Optional[str] = None
    nitrateNitriteNReviewedBy: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.ammoniumNAnalysisDate is not None and not isinstance(self.ammoniumNAnalysisDate, XSDTime):
            self.ammoniumNAnalysisDate = XSDTime(self.ammoniumNAnalysisDate)
        if self.nitrateNitriteNAnalysisDate is not None and not isinstance(self.nitrateNitriteNAnalysisDate, XSDTime):
            self.nitrateNitriteNAnalysisDate = XSDTime(self.nitrateNitriteNAnalysisDate)
        super().__post_init__(**kwargs)


@dataclass
class NtrExternalBatchQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_externalBatchQA_in
    class_class_curie: ClassVar[str] = "neon:ntr_externalBatchQA_in"
    class_name: ClassVar[str] = "ntr_externalBatchQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.NtrExternalBatchQAIn

    analyteQF: Optional[str] = None

@dataclass
class NtrExternalSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ntr_externalSummary_in
    class_class_curie: ClassVar[str] = "neon:ntr_externalSummary_in"
    class_name: ClassVar[str] = "ntr_externalSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.NtrExternalSummaryIn

    lotID: Optional[str] = None

class DpmFieldPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dpm_field_pub
    class_class_curie: ClassVar[str] = "neon:dpm_field_pub"
    class_name: ClassVar[str] = "dpm_field_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DpmFieldPub


class DpmLabPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dpm_lab_pub
    class_class_curie: ClassVar[str] = "neon:dpm_lab_pub"
    class_name: ClassVar[str] = "dpm_lab_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DpmLabPub


class BetBOLDvoucherInfoPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_BOLDvoucherInfo_pub
    class_class_curie: ClassVar[str] = "neon:bet_BOLDvoucherInfo_pub"
    class_name: ClassVar[str] = "bet_BOLDvoucherInfo_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetBOLDvoucherInfoPub


class BetBOLDtaxonomyPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_BOLDtaxonomy_pub
    class_class_curie: ClassVar[str] = "neon:bet_BOLDtaxonomy_pub"
    class_name: ClassVar[str] = "bet_BOLDtaxonomy_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetBOLDtaxonomyPub


class BetBOLDspecimenDetailsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_BOLDspecimenDetails_pub
    class_class_curie: ClassVar[str] = "neon:bet_BOLDspecimenDetails_pub"
    class_name: ClassVar[str] = "bet_BOLDspecimenDetails_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetBOLDspecimenDetailsPub


class BetBOLDcollectionDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_BOLDcollectionData_pub
    class_class_curie: ClassVar[str] = "neon:bet_BOLDcollectionData_pub"
    class_name: ClassVar[str] = "bet_BOLDcollectionData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BetBOLDcollectionDataPub


@dataclass
class WpaFieldSuperParentIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wpa_fieldSuperParent_in
    class_class_curie: ClassVar[str] = "neon:wpa_fieldSuperParent_in"
    class_name: ClassVar[str] = "wpa_fieldSuperParent_in"
    class_model_uri: ClassVar[URIRef] = NEON.WpaFieldSuperParentIn

    pumpStartTime: Optional[Union[str, XSDTime]] = None
    totalWellDepth: Optional[float] = None
    volume3Wells: Optional[float] = None
    waterColumnHeight: Optional[float] = None
    wellRedeveloped: Optional[str] = None
    wellRedevelopedDate: Optional[Union[str, XSDTime]] = None
    maxAllowableDrawdown: Optional[float] = None
    measTotalWellDepth: Optional[float] = None
    pumpPlacementDepth: Optional[float] = None
    screenedIntervalDepth: Optional[float] = None
    wellDepthChanged: Optional[str] = None
    pumpPlacementDate: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.pumpStartTime is not None and not isinstance(self.pumpStartTime, XSDTime):
            self.pumpStartTime = XSDTime(self.pumpStartTime)
        if self.wellRedevelopedDate is not None and not isinstance(self.wellRedevelopedDate, XSDTime):
            self.wellRedevelopedDate = XSDTime(self.wellRedevelopedDate)
        if self.pumpPlacementDate is not None and not isinstance(self.pumpPlacementDate, XSDTime):
            self.pumpPlacementDate = XSDTime(self.pumpPlacementDate)
        super().__post_init__(**kwargs)


@dataclass
class WpaWellStabilizingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wpa_wellStabilizing_in
    class_class_curie: ClassVar[str] = "neon:wpa_wellStabilizing_in"
    class_name: ClassVar[str] = "wpa_wellStabilizing_in"
    class_model_uri: ClassVar[URIRef] = NEON.WpaWellStabilizingIn

    wellDischargeRate: Optional[float] = None
    groundwaterFieldDataQF: Optional[str] = None

class FshFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_fieldData_in
    class_class_curie: ClassVar[str] = "neon:fsh_fieldData_in"
    class_name: ClassVar[str] = "fsh_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.FshFieldDataIn


class FshPerPassIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_perPass_in
    class_class_curie: ClassVar[str] = "neon:fsh_perPass_in"
    class_name: ClassVar[str] = "fsh_perPass_in"
    class_model_uri: ClassVar[URIRef] = NEON.FshPerPassIn


class FshPerFishIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_perFish_in
    class_class_curie: ClassVar[str] = "neon:fsh_perFish_in"
    class_name: ClassVar[str] = "fsh_perFish_in"
    class_model_uri: ClassVar[URIRef] = NEON.FshPerFishIn


@dataclass
class FshNonTargetIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_nonTarget_in
    class_class_curie: ClassVar[str] = "neon:fsh_nonTarget_in"
    class_name: ClassVar[str] = "fsh_nonTarget_in"
    class_model_uri: ClassVar[URIRef] = NEON.FshNonTargetIn

    nonTargetSpecies: Optional[str] = None
    voucherSampleCollected: Optional[str] = None

class FshBulkCountIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_bulkCount_in
    class_class_curie: ClassVar[str] = "neon:fsh_bulkCount_in"
    class_name: ClassVar[str] = "fsh_bulkCount_in"
    class_model_uri: ClassVar[URIRef] = NEON.FshBulkCountIn


class FshMorphospeciesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_morphospecies_in
    class_class_curie: ClassVar[str] = "neon:fsh_morphospecies_in"
    class_name: ClassVar[str] = "fsh_morphospecies_in"
    class_model_uri: ClassVar[URIRef] = NEON.FshMorphospeciesIn


@dataclass
class FshFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:fsh_fieldData_pub"
    class_name: ClassVar[str] = "fsh_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshFieldDataPub

    cCollectedBy: Optional[str] = None
    fixedRandomReach: Optional[str] = None
    measuredReachLength: Optional[float] = None
    reachCondition: Optional[str] = None

@dataclass
class FshPerPassPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_perPass_pub
    class_class_curie: ClassVar[str] = "neon:fsh_perPass_pub"
    class_name: ClassVar[str] = "fsh_perPass_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshPerPassPub

    efTime: Optional[float] = None
    efTime2: Optional[float] = None
    finalDutyCycle: Optional[float] = None
    finalDutyCycle2: Optional[float] = None
    finalFrequency: Optional[float] = None
    finalFrequency2: Optional[float] = None
    finalVoltage: Optional[float] = None
    finalVoltage2: Optional[float] = None
    initialDutyCycle: Optional[float] = None
    initialDutyCycle2: Optional[float] = None
    initialFrequency: Optional[float] = None
    initialFrequency2: Optional[float] = None
    initialVoltage: Optional[float] = None
    initialVoltage2: Optional[float] = None
    netDeploymentTime: Optional[float] = None
    netEndTime: Optional[Union[str, XSDTime]] = None
    netIntegrity: Optional[str] = None
    netLength: Optional[float] = None
    netSetTime: Optional[Union[str, XSDTime]] = None
    reachID: Optional[str] = None
    settingsChanged: Optional[str] = None
    settingsChanged2: Optional[str] = None
    subdominantHabitatType: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.netEndTime is not None and not isinstance(self.netEndTime, XSDTime):
            self.netEndTime = XSDTime(self.netEndTime)
        if self.netSetTime is not None and not isinstance(self.netSetTime, XSDTime):
            self.netSetTime = XSDTime(self.netSetTime)
        super().__post_init__(**kwargs)


@dataclass
class FshPerFishPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_perFish_pub
    class_class_curie: ClassVar[str] = "neon:fsh_perFish_pub"
    class_name: ClassVar[str] = "fsh_perFish_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshPerFishPub

    delt: Optional[str] = None
    fishLifeStage: Optional[str] = None
    fishTotalLength: Optional[float] = None
    fishWeight: Optional[float] = None
    efInjury: Optional[str] = None
    efMortality: Optional[str] = None
    sampleTypeCollected: Optional[str] = None
    specimenNumber: Optional[str] = None

@dataclass
class FshBulkCountPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_bulkCount_pub
    class_class_curie: ClassVar[str] = "neon:fsh_bulkCount_pub"
    class_name: ClassVar[str] = "fsh_bulkCount_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshBulkCountPub

    actualOrEstimated: Optional[str] = None
    bulkFishCount: Optional[str] = None

class FshMorphospeciesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_morphospecies_pub
    class_class_curie: ClassVar[str] = "neon:fsh_morphospecies_pub"
    class_name: ClassVar[str] = "fsh_morphospecies_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshMorphospeciesPub


class AscFieldDataPointIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_fieldDataPoint_in
    class_class_curie: ClassVar[str] = "neon:asc_fieldDataPoint_in"
    class_name: ClassVar[str] = "asc_fieldDataPoint_in"
    class_model_uri: ClassVar[URIRef] = NEON.AscFieldDataPointIn


class AscFieldDataZoneIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_fieldDataZone_in
    class_class_curie: ClassVar[str] = "neon:asc_fieldDataZone_in"
    class_name: ClassVar[str] = "asc_fieldDataZone_in"
    class_model_uri: ClassVar[URIRef] = NEON.AscFieldDataZoneIn


@dataclass
class AscFieldDataStationIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_fieldDataStation_in
    class_class_curie: ClassVar[str] = "neon:asc_fieldDataStation_in"
    class_name: ClassVar[str] = "asc_fieldDataStation_in"
    class_model_uri: ClassVar[URIRef] = NEON.AscFieldDataStationIn

    carbonSedimentSampleFate: Optional[str] = None
    inorganicSedimentSampleFate: Optional[str] = None
    organicSedimentSampleFate: Optional[str] = None
    physicalSedimentSampleFate: Optional[str] = None
    sedimentSampleFate: Optional[str] = None

@dataclass
class AscExternalLabDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_externalLabData_in
    class_class_curie: ClassVar[str] = "neon:asc_externalLabData_in"
    class_name: ClassVar[str] = "asc_externalLabData_in"
    class_model_uri: ClassVar[URIRef] = NEON.AscExternalLabDataIn

    analyteConcText: Optional[str] = None
    projectID: Optional[str] = None

@dataclass
class AscExternalLabBatchQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_externalLabBatchQA_in
    class_class_curie: ClassVar[str] = "neon:asc_externalLabBatchQA_in"
    class_name: ClassVar[str] = "asc_externalLabBatchQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.AscExternalLabBatchQAIn

    qaType: Optional[str] = None
    analyteSampleValue: Optional[float] = None
    reagentSN: Optional[str] = None
    recovery: Optional[float] = None
    recoveryLimitLower: Optional[float] = None
    recoveryLimitUpper: Optional[float] = None
    relativePercentDifference: Optional[float] = None
    relativePercentLimit: Optional[float] = None

class AscExternalLabSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_externalLabSummary_in
    class_class_curie: ClassVar[str] = "neon:asc_externalLabSummary_in"
    class_name: ClassVar[str] = "asc_externalLabSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.AscExternalLabSummaryIn


@dataclass
class AscFieldDataPointPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_fieldDataPoint_pub
    class_class_curie: ClassVar[str] = "neon:asc_fieldDataPoint_pub"
    class_name: ClassVar[str] = "asc_fieldDataPoint_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AscFieldDataPointPub

    pointNumber: Optional[str] = None
    coreLength: Optional[float] = None
    observations: Optional[str] = None

@dataclass
class AscFieldDataZonePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_fieldDataZone_pub
    class_class_curie: ClassVar[str] = "neon:asc_fieldDataZone_pub"
    class_name: ClassVar[str] = "asc_fieldDataZone_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AscFieldDataZonePub

    downstreamCoordUncert: Optional[float] = None
    downstreamDecimalLatitude: Optional[float] = None
    downstreamDecimalLongitude: Optional[float] = None
    downstreamGeodeticDatum: Optional[str] = None
    pointSampleCount: Optional[str] = None
    upstreamCoordUncert: Optional[float] = None
    upstreamDecimalLatitude: Optional[float] = None
    upstreamDecimalLongitude: Optional[float] = None
    upstreamGeodeticDatum: Optional[str] = None
    zoneNumber: Optional[str] = None

@dataclass
class AscFieldDataStationPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_fieldDataStation_pub
    class_class_curie: ClassVar[str] = "neon:asc_fieldDataStation_pub"
    class_name: ClassVar[str] = "asc_fieldDataStation_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AscFieldDataStationPub

    carbonSedimentSampleID: Optional[str] = None
    carbonSedSampleCode: Optional[str] = None
    inorganicSedimentSampleID: Optional[str] = None
    inorgSedimentSampleBarcode: Optional[str] = None
    organicSedimentSampleID: Optional[str] = None
    orgSedimentSampleBarcode: Optional[str] = None
    physicalSedimentSampleID: Optional[str] = None
    physSedimentSampleBarcode: Optional[str] = None
    sedimentSampleBarcode: Optional[str] = None
    sedimentSampleID: Optional[str] = None
    zoneSampleCount: Optional[str] = None

@dataclass
class AspExternalLabDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asp_externalLabData_pub
    class_class_curie: ClassVar[str] = "neon:asp_externalLabData_pub"
    class_name: ClassVar[str] = "asp_externalLabData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AspExternalLabDataPub

    analyteSurrogate: Optional[str] = None
    cas: Optional[str] = None
    deptName: Optional[str] = None
    extendedQualifier1: Optional[str] = None
    extendedQualifier2: Optional[str] = None
    extendedQualifier3: Optional[str] = None
    extendedQualifier4: Optional[str] = None
    extendedQualifier5: Optional[str] = None
    externalQualifier: Optional[str] = None
    practicalQuantitationLimit: Optional[float] = None

@dataclass
class AscExternalLabSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asc_externalLabSummary_pub
    class_class_curie: ClassVar[str] = "neon:asc_externalLabSummary_pub"
    class_name: ClassVar[str] = "asc_externalLabSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AscExternalLabSummaryPub

    analytePercentSD: Optional[float] = None
    quantitationLimit: Optional[float] = None

@dataclass
class MgaGroupAbundancesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_groupAbundances_in
    class_class_curie: ClassVar[str] = "neon:mga_groupAbundances_in"
    class_name: ClassVar[str] = "mga_groupAbundances_in"
    class_model_uri: ClassVar[URIRef] = NEON.MgaGroupAbundancesIn

    rep1CopyNumber: Optional[float] = None
    rep1CqValue: Optional[float] = None
    rep1MeltingTemperature: Optional[float] = None
    rep2CopyNumber: Optional[float] = None
    rep2CqValue: Optional[float] = None
    rep2MeltingTemperature: Optional[float] = None
    rep3CopyNumber: Optional[float] = None
    rep3CqValue: Optional[float] = None
    rep3MeltingTemperature: Optional[float] = None
    rep4CopyNumber: Optional[float] = None
    rep4CqValue: Optional[float] = None
    rep5CopyNumber: Optional[float] = None
    rep5CqValue: Optional[float] = None
    targetTaxonCode: Optional[str] = None
    targetTaxonFate: Optional[str] = None
    targetTaxonID: Optional[str] = None

class MgaBatchResultsIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_batchResults_in
    class_class_curie: ClassVar[str] = "neon:mga_batchResults_in"
    class_name: ClassVar[str] = "mga_batchResults_in"
    class_model_uri: ClassVar[URIRef] = NEON.MgaBatchResultsIn


class MgaLabSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_labSummary_in
    class_class_curie: ClassVar[str] = "neon:mga_labSummary_in"
    class_name: ClassVar[str] = "mga_labSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.MgaLabSummaryIn


class MmgMarkerGeneSequencing16SIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_markerGeneSequencing_16S_in
    class_class_curie: ClassVar[str] = "neon:mmg_markerGeneSequencing_16S_in"
    class_name: ClassVar[str] = "mmg_markerGeneSequencing_16S_in"
    class_model_uri: ClassVar[URIRef] = NEON.MmgMarkerGeneSequencing16SIn


@dataclass
class MmgMarkerGeneSequencingITSIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_markerGeneSequencing_ITS_in
    class_class_curie: ClassVar[str] = "neon:mmg_markerGeneSequencing_ITS_in"
    class_name: ClassVar[str] = "mmg_markerGeneSequencing_ITS_in"
    class_model_uri: ClassVar[URIRef] = NEON.MmgMarkerGeneSequencingITSIn

    processedSeqFileNameCode: Optional[str] = None
    processedSeqFileNameFate: Optional[str] = None
    processedSeqFileNameID: Optional[str] = None

class MmgPcrAmplification16SIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_pcrAmplification_16S_in
    class_class_curie: ClassVar[str] = "neon:mmg_pcrAmplification_16S_in"
    class_name: ClassVar[str] = "mmg_pcrAmplification_16S_in"
    class_model_uri: ClassVar[URIRef] = NEON.MmgPcrAmplification16SIn


class MmgPcrAmplificationITSIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_pcrAmplification_ITS_in
    class_class_curie: ClassVar[str] = "neon:mmg_pcrAmplification_ITS_in"
    class_name: ClassVar[str] = "mmg_pcrAmplification_ITS_in"
    class_model_uri: ClassVar[URIRef] = NEON.MmgPcrAmplificationITSIn


class MmgSoilDnaExtractionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_soilDnaExtraction_pub
    class_class_curie: ClassVar[str] = "neon:mmg_soilDnaExtraction_pub"
    class_name: ClassVar[str] = "mmg_soilDnaExtraction_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSoilDnaExtractionPub


class MmgSoilPcrAmplification16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_soilPcrAmplification_16S_pub
    class_class_curie: ClassVar[str] = "neon:mmg_soilPcrAmplification_16S_pub"
    class_name: ClassVar[str] = "mmg_soilPcrAmplification_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSoilPcrAmplification16SPub


class MmgSoilPcrAmplificationITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_soilPcrAmplification_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mmg_soilPcrAmplification_ITS_pub"
    class_name: ClassVar[str] = "mmg_soilPcrAmplification_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSoilPcrAmplificationITSPub


class MmgSoilMarkerGeneSequencing16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_soilMarkerGeneSequencing_16S_pub
    class_class_curie: ClassVar[str] = "neon:mmg_soilMarkerGeneSequencing_16S_pub"
    class_name: ClassVar[str] = "mmg_soilMarkerGeneSequencing_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSoilMarkerGeneSequencing16SPub


class MmgSoilMarkerGeneSequencingITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_soilMarkerGeneSequencing_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mmg_soilMarkerGeneSequencing_ITS_pub"
    class_name: ClassVar[str] = "mmg_soilMarkerGeneSequencing_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSoilMarkerGeneSequencingITSPub


@dataclass
class CfcFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_fieldData_in
    class_class_curie: ClassVar[str] = "neon:cfc_fieldData_in"
    class_name: ClassVar[str] = "cfc_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcFieldDataIn

    vd1BaseHeight: Optional[float] = None
    vd1Sample: Optional[float] = None
    vd2BaseHeight: Optional[float] = None
    vd2Sample: Optional[float] = None
    vd3BaseHeight: Optional[float] = None
    vd3Sample: Optional[float] = None

@dataclass
class CfcLMAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_LMA_in
    class_class_curie: ClassVar[str] = "neon:cfc_LMA_in"
    class_name: ClassVar[str] = "cfc_LMA_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcLMAIn

    lmaSampleFate: Optional[str] = None

@dataclass
class CfcChemistrySubsamplingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chemistrySubsampling_in
    class_class_curie: ClassVar[str] = "neon:cfc_chemistrySubsampling_in"
    class_name: ClassVar[str] = "cfc_chemistrySubsampling_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChemistrySubsamplingIn

    bgcArchive: Optional[str] = None

@dataclass
class CfcChlorophyllIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chlorophyll_in
    class_class_curie: ClassVar[str] = "neon:cfc_chlorophyll_in"
    class_name: ClassVar[str] = "cfc_chlorophyll_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChlorophyllIn

    chlorophyllSampleFate: Optional[str] = None

class CfcElementsIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_elements_in
    class_class_curie: ClassVar[str] = "neon:cfc_elements_in"
    class_name: ClassVar[str] = "cfc_elements_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcElementsIn


class CfcChlorophyllParametersIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chlorophyllParameters_in
    class_class_curie: ClassVar[str] = "neon:cfc_chlorophyllParameters_in"
    class_name: ClassVar[str] = "cfc_chlorophyllParameters_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChlorophyllParametersIn


@dataclass
class CfcChlorophyllBatchQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chlorophyllBatchQA_in
    class_class_curie: ClassVar[str] = "neon:cfc_chlorophyllBatchQA_in"
    class_name: ClassVar[str] = "cfc_chlorophyllBatchQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChlorophyllBatchQAIn

    standardChlAConc: Optional[float] = None

@dataclass
class CfcElementsBatchQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_elementsBatchQA_in
    class_class_curie: ClassVar[str] = "neon:cfc_elementsBatchQA_in"
    class_name: ClassVar[str] = "cfc_elementsBatchQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcElementsBatchQAIn

    qaQF: Optional[str] = None
    knownBoronConc: Optional[float] = None
    knownCalciumConc: Optional[float] = None
    knownCopperConc: Optional[float] = None
    knownIronConc: Optional[float] = None
    knownMagnesiumConc: Optional[float] = None
    knownManganeseConc: Optional[float] = None
    knownPhosphorusConc: Optional[float] = None
    knownPotassiumConc: Optional[float] = None
    knownSulfurConc: Optional[float] = None
    knownZincConc: Optional[float] = None

class CfcChlorophyllSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chlorophyllSummary_in
    class_class_curie: ClassVar[str] = "neon:cfc_chlorophyllSummary_in"
    class_name: ClassVar[str] = "cfc_chlorophyllSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChlorophyllSummaryIn


class CfcElementsSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_elementsSummary_in
    class_class_curie: ClassVar[str] = "neon:cfc_elementsSummary_in"
    class_name: ClassVar[str] = "cfc_elementsSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.CfcElementsSummaryIn


@dataclass
class BryProductivityIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bry_productivity_in
    class_class_curie: ClassVar[str] = "neon:bry_productivity_in"
    class_name: ClassVar[str] = "bry_productivity_in"
    class_model_uri: ClassVar[URIRef] = NEON.BryProductivityIn

    bagCount: Optional[str] = None

@dataclass
class BryProductivityPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bry_productivity_pub
    class_class_curie: ClassVar[str] = "neon:bry_productivity_pub"
    class_name: ClassVar[str] = "bry_productivity_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BryProductivityPub

    storageHours: Optional[float] = None
    totalSampledArea: Optional[float] = None
    setNetCount: Optional[str] = None
    sampledNetCount: Optional[str] = None
    missingNetCount: Optional[str] = None
    setBy: Optional[str] = None
    setRemarks: Optional[str] = None
    collectRemarks: Optional[str] = None
    weighRemarks: Optional[str] = None
    growthInterval: Optional[str] = None
    bryType: Optional[str] = None

class FshBOLDvoucherInfoPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_BOLDvoucherInfo_pub
    class_class_curie: ClassVar[str] = "neon:fsh_BOLDvoucherInfo_pub"
    class_name: ClassVar[str] = "fsh_BOLDvoucherInfo_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshBOLDvoucherInfoPub


class FshBOLDtaxonomyPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_BOLDtaxonomy_pub
    class_class_curie: ClassVar[str] = "neon:fsh_BOLDtaxonomy_pub"
    class_name: ClassVar[str] = "fsh_BOLDtaxonomy_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshBOLDtaxonomyPub


class FshBOLDspecimenDetailsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_BOLDspecimenDetails_pub
    class_class_curie: ClassVar[str] = "neon:fsh_BOLDspecimenDetails_pub"
    class_name: ClassVar[str] = "fsh_BOLDspecimenDetails_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshBOLDspecimenDetailsPub


class FshBOLDcollectionDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_BOLDcollectionData_pub
    class_class_curie: ClassVar[str] = "neon:fsh_BOLDcollectionData_pub"
    class_name: ClassVar[str] = "fsh_BOLDcollectionData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FshBOLDcollectionDataPub


class BatFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bat_fieldData_in
    class_class_curie: ClassVar[str] = "neon:bat_fieldData_in"
    class_name: ClassVar[str] = "bat_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.BatFieldDataIn


@dataclass
class BatPointcollectionIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bat_pointcollection_in
    class_class_curie: ClassVar[str] = "neon:bat_pointcollection_in"
    class_name: ClassVar[str] = "bat_pointcollection_in"
    class_model_uri: ClassVar[URIRef] = NEON.BatPointcollectionIn

    photoID: Optional[str] = None
    uniqueID: Optional[str] = None

class BatSonarRecordIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bat_sonarRecord_in
    class_class_curie: ClassVar[str] = "neon:bat_sonarRecord_in"
    class_name: ClassVar[str] = "bat_sonarRecord_in"
    class_model_uri: ClassVar[URIRef] = NEON.BatSonarRecordIn


class BatResultsFileIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bat_resultsFile_in
    class_class_curie: ClassVar[str] = "neon:bat_resultsFile_in"
    class_name: ClassVar[str] = "bat_resultsFile_in"
    class_model_uri: ClassVar[URIRef] = NEON.BatResultsFileIn


class CdwDensitylogIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cdw_densitylog_in
    class_class_curie: ClassVar[str] = "neon:cdw_densitylog_in"
    class_name: ClassVar[str] = "cdw_densitylog_in"
    class_model_uri: ClassVar[URIRef] = NEON.CdwDensitylogIn


class CdwDensitydiskIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cdw_densitydisk_in
    class_class_curie: ClassVar[str] = "neon:cdw_densitydisk_in"
    class_name: ClassVar[str] = "cdw_densitydisk_in"
    class_model_uri: ClassVar[URIRef] = NEON.CdwDensitydiskIn


@dataclass
class CdwDensitylogPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cdw_densitylog_pub
    class_class_curie: ClassVar[str] = "neon:cdw_densitylog_pub"
    class_name: ClassVar[str] = "cdw_densitylog_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CdwDensitylogPub

    sizeCategory: Optional[str] = None
    vstTagID: Optional[str] = None
    branchBarkCover: Optional[str] = None
    branchesPresent: Optional[str] = None
    decayClass: Optional[str] = None
    leavesPresent: Optional[str] = None
    logBarkCover: Optional[str] = None
    logDistance: Optional[float] = None
    logHandBreakable: Optional[str] = None
    logHoldShape: Optional[str] = None
    logID: Optional[str] = None
    twigsPresent: Optional[str] = None
    logAzimuth: Optional[str] = None
    mappingMethod: Optional[str] = None
    sampleEasting: Optional[float] = None
    sampleNorthing: Optional[float] = None

@dataclass
class CdwDensitydiskPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cdw_densitydisk_pub
    class_class_curie: ClassVar[str] = "neon:cdw_densitydisk_pub"
    class_name: ClassVar[str] = "cdw_densitydisk_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CdwDensitydiskPub

    dryingHours: Optional[float] = None
    sampleBarcode: Optional[str] = None
    subsampleFreshMassRatio: Optional[float] = None
    aDiskHeight: Optional[float] = None
    bagNumber: Optional[str] = None
    bDiskHeight: Optional[float] = None
    bulkDensDisk: Optional[float] = None
    diameter: Optional[float] = None
    diskDryMass: Optional[float] = None
    diskFreshMass: Optional[float] = None
    diskID: Optional[str] = None
    maxDiskHeight: Optional[float] = None
    minDiskHeight: Optional[float] = None
    ninetyDiameter: Optional[float] = None
    sampleFreshMass: Optional[float] = None
    qaSample: Optional[str] = None

class BbcRootStableIsotopesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_rootStableIsotopes_pub
    class_class_curie: ClassVar[str] = "neon:bbc_rootStableIsotopes_pub"
    class_name: ClassVar[str] = "bbc_rootStableIsotopes_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BbcRootStableIsotopesPub


class BgcCNisoExternalSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bgc_CNiso_externalSummary_pub
    class_class_curie: ClassVar[str] = "neon:bgc_CNiso_externalSummary_pub"
    class_name: ClassVar[str] = "bgc_CNiso_externalSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BgcCNisoExternalSummaryPub


class BgcCNisoExternalAnalysisIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bgc_CNiso_externalAnalysis_in
    class_class_curie: ClassVar[str] = "neon:bgc_CNiso_externalAnalysis_in"
    class_name: ClassVar[str] = "bgc_CNiso_externalAnalysis_in"
    class_model_uri: ClassVar[URIRef] = NEON.BgcCNisoExternalAnalysisIn


class BgcCNisoExternalBatchQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bgc_CNiso_externalBatchQA_in
    class_class_curie: ClassVar[str] = "neon:bgc_CNiso_externalBatchQA_in"
    class_name: ClassVar[str] = "bgc_CNiso_externalBatchQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.BgcCNisoExternalBatchQAIn


class BgcCNisoExternalSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bgc_CNiso_externalSummary_in
    class_class_curie: ClassVar[str] = "neon:bgc_CNiso_externalSummary_in"
    class_name: ClassVar[str] = "bgc_CNiso_externalSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.BgcCNisoExternalSummaryIn


class CfcFoliarStableIsotopesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_foliarStableIsotopes_pub
    class_class_curie: ClassVar[str] = "neon:cfc_foliarStableIsotopes_pub"
    class_name: ClassVar[str] = "cfc_foliarStableIsotopes_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcFoliarStableIsotopesPub


@dataclass
class LtrLitterStableIsotopesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_litterStableIsotopes_pub
    class_class_curie: ClassVar[str] = "neon:ltr_litterStableIsotopes_pub"
    class_name: ClassVar[str] = "ltr_litterStableIsotopes_pub"
    class_model_uri: ClassVar[URIRef] = NEON.LtrLitterStableIsotopesPub

    d13C: Optional[float] = None

@dataclass
class SlsSoilStableIsotopesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_soilStableIsotopes_pub
    class_class_curie: ClassVar[str] = "neon:sls_soilStableIsotopes_pub"
    class_name: ClassVar[str] = "sls_soilStableIsotopes_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SlsSoilStableIsotopesPub

    cnIsotopeQF: Optional[str] = None
    d15N: Optional[float] = None
    isotopeAccuracyQF: Optional[str] = None
    organicd13C: Optional[float] = None

@dataclass
class BbcRootChemistryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bbc_rootChemistry_pub
    class_class_curie: ClassVar[str] = "neon:bbc_rootChemistry_pub"
    class_name: ClassVar[str] = "bbc_rootChemistry_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BbcRootChemistryPub

    poolSampleCode: Optional[str] = None
    poolSampleID: Optional[str] = None

@dataclass
class SlsSoilChemistryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sls_soilChemistry_pub
    class_class_curie: ClassVar[str] = "neon:sls_soilChemistry_pub"
    class_name: ClassVar[str] = "sls_soilChemistry_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SlsSoilChemistryPub

    acidTreatment: Optional[str] = None
    organicCPercent: Optional[float] = None

@dataclass
class LtrLitterCarbonNitrogenPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_litterCarbonNitrogen_pub
    class_class_curie: ClassVar[str] = "neon:ltr_litterCarbonNitrogen_pub"
    class_name: ClassVar[str] = "ltr_litterCarbonNitrogen_pub"
    class_model_uri: ClassVar[URIRef] = NEON.LtrLitterCarbonNitrogenPub

    co2Trapped: Optional[str] = None

class LtrLitterLigninPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_litterLignin_pub
    class_class_curie: ClassVar[str] = "neon:ltr_litterLignin_pub"
    class_name: ClassVar[str] = "ltr_litterLignin_pub"
    class_model_uri: ClassVar[URIRef] = NEON.LtrLitterLigninPub


class LigExternalSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.lig_externalSummary_pub
    class_class_curie: ClassVar[str] = "neon:lig_externalSummary_pub"
    class_name: ClassVar[str] = "lig_externalSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.LigExternalSummaryPub


@dataclass
class CfcFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:cfc_fieldData_pub"
    class_name: ClassVar[str] = "cfc_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcFieldDataPub

    clipID: Optional[str] = None
    clipCellNumber: Optional[str] = None
    clipLength: Optional[float] = None
    clipWidth: Optional[float] = None
    vstTag: Optional[str] = None
    percentCoverClip: Optional[float] = None
    subsample1Height: Optional[float] = None
    subsample2Height: Optional[float] = None
    subsample3Height: Optional[float] = None
    chlorophyllSampleCondition: Optional[str] = None

@dataclass
class CfcLMAPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_LMA_pub
    class_class_curie: ClassVar[str] = "neon:cfc_LMA_pub"
    class_name: ClassVar[str] = "cfc_LMA_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcLMAPub

    dryMassFraction: Optional[float] = None
    leafArea: Optional[float] = None
    leafMassPerArea: Optional[float] = None
    lmaSampleCode: Optional[str] = None
    lmaSampleCondition: Optional[str] = None
    lmaSampleID: Optional[str] = None
    percentGreen: Optional[str] = None
    scanDate: Optional[Union[str, XSDTime]] = None
    scannedBy: Optional[str] = None
    scannedLeafNumber: Optional[str] = None
    weighedBy: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.scanDate is not None and not isinstance(self.scanDate, XSDTime):
            self.scanDate = XSDTime(self.scanDate)
        super().__post_init__(**kwargs)


class CfcChemistrySubsamplingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chemistrySubsampling_pub
    class_class_curie: ClassVar[str] = "neon:cfc_chemistrySubsampling_pub"
    class_name: ClassVar[str] = "cfc_chemistrySubsampling_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChemistrySubsamplingPub


@dataclass
class CfcChlorophyllPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chlorophyll_pub
    class_class_curie: ClassVar[str] = "neon:cfc_chlorophyll_pub"
    class_name: ClassVar[str] = "cfc_chlorophyll_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChlorophyllPub

    extractionStartDate: Optional[Union[str, XSDTime]] = None
    receivedCondition: Optional[str] = None
    chlCarotWavelength1: Optional[float] = None
    chlCarotWavelength1Abs: Optional[float] = None
    chlCarotWavelength2: Optional[float] = None
    chlCarotWavelength2Abs: Optional[float] = None
    chlCarotWavelength3: Optional[float] = None
    chlCarotWavelength3Abs: Optional[float] = None
    chlCarotWavelength4: Optional[float] = None
    chlCarotWavelength4Abs: Optional[float] = None
    chlorophyllSampleCode: Optional[str] = None
    chlorophyllSampleID: Optional[str] = None
    extractCarotConc: Optional[float] = None
    extractChlAConc: Optional[float] = None
    extractChlBConc: Optional[float] = None
    extractionLength: Optional[float] = None
    handlingQF: Optional[str] = None
    relativeAccuracyScale: Optional[str] = None
    solventVolume: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.extractionStartDate is not None and not isinstance(self.extractionStartDate, XSDTime):
            self.extractionStartDate = XSDTime(self.extractionStartDate)
        super().__post_init__(**kwargs)


@dataclass
class CfcCarbonNitrogenPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_carbonNitrogen_pub
    class_class_curie: ClassVar[str] = "neon:cfc_carbonNitrogen_pub"
    class_name: ClassVar[str] = "cfc_carbonNitrogen_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcCarbonNitrogenPub

    carbonPercent: Optional[float] = None
    cnPercentQF: Optional[str] = None
    CNratio: Optional[float] = None
    nitrogenPercent: Optional[float] = None
    percentAccuracyQF: Optional[str] = None

@dataclass
class CfcElementsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_elements_pub
    class_class_curie: ClassVar[str] = "neon:cfc_elements_pub"
    class_name: ClassVar[str] = "cfc_elements_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcElementsPub

    digestBoronConc: Optional[float] = None
    digestCalciumConc: Optional[float] = None
    digestCopperConc: Optional[float] = None
    digestIronConc: Optional[float] = None
    digestMagnesiumConc: Optional[float] = None
    digestManganeseConc: Optional[float] = None
    digestPhosphorusConc: Optional[float] = None
    digestPotassiumConc: Optional[float] = None
    digestSulfurConc: Optional[float] = None
    digestVolume: Optional[float] = None
    digestZincConc: Optional[float] = None
    foliarBoronConc: Optional[float] = None
    foliarCalciumConc: Optional[float] = None
    foliarCopperConc: Optional[float] = None
    foliarIronConc: Optional[float] = None
    foliarMagnesiumConc: Optional[float] = None
    foliarManganeseConc: Optional[float] = None
    foliarPhosphorusConc: Optional[float] = None
    foliarPotassiumConc: Optional[float] = None
    foliarSulfurConc: Optional[float] = None
    foliarZincConc: Optional[float] = None

class CfcLigninPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_lignin_pub
    class_class_curie: ClassVar[str] = "neon:cfc_lignin_pub"
    class_name: ClassVar[str] = "cfc_lignin_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcLigninPub


@dataclass
class CfcChlorophyllParametersPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chlorophyllParameters_pub
    class_class_curie: ClassVar[str] = "neon:cfc_chlorophyllParameters_pub"
    class_name: ClassVar[str] = "cfc_chlorophyllParameters_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChlorophyllParametersPub

    chlCarotEquationInput: Optional[str] = None
    chlCarotExtinctionCoefficient: Optional[float] = None
    ecReference: Optional[str] = None

@dataclass
class CfcChlorophyllSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_chlorophyllSummary_pub
    class_class_curie: ClassVar[str] = "neon:cfc_chlorophyllSummary_pub"
    class_name: ClassVar[str] = "cfc_chlorophyllSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcChlorophyllSummaryPub

    analyteAbsoluteError: Optional[float] = None

class CfcElementsSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.cfc_elementsSummary_pub
    class_class_curie: ClassVar[str] = "neon:cfc_elementsSummary_pub"
    class_name: ClassVar[str] = "cfc_elementsSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CfcElementsSummaryPub


class MgaBenthicGroupAbundancesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_benthicGroupAbundances_pub
    class_class_curie: ClassVar[str] = "neon:mga_benthicGroupAbundances_pub"
    class_name: ClassVar[str] = "mga_benthicGroupAbundances_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgaBenthicGroupAbundancesPub


@dataclass
class MgaBatchResultsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_batchResults_pub
    class_class_curie: ClassVar[str] = "neon:mga_batchResults_pub"
    class_name: ClassVar[str] = "mga_batchResults_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgaBatchResultsPub

    calCurveIntercept: Optional[float] = None
    calCurveRsquared: Optional[float] = None
    calCurveSlope: Optional[float] = None
    linearDynamicRangeLower: Optional[float] = None
    linearDynamicRangeUpper: Optional[float] = None
    lodCqVar: Optional[float] = None
    negControl1Result: Optional[str] = None
    negControl2Result: Optional[str] = None
    negControl3Result: Optional[str] = None
    negControl4Result: Optional[str] = None
    negControl5Result: Optional[str] = None
    noTemplateControlCq: Optional[int] = None
    pcrEfficiency: Optional[float] = None
    pcrEfficiencyConfInt: Optional[float] = None
    standardDescription: Optional[str] = None

@dataclass
class MgaLabSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_labSummary_pub
    class_class_curie: ClassVar[str] = "neon:mga_labSummary_pub"
    class_name: ClassVar[str] = "mga_labSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgaLabSummaryPub

    ampliconLength: Optional[str] = None
    bufferComposition: Optional[str] = None
    bufferID: Optional[str] = None
    cqMethod: Optional[str] = None
    dNTPConcentration: Optional[float] = None
    detectionLimit: Optional[float] = None
    mgConcentration: Optional[float] = None
    multiplexStatus: Optional[str] = None
    polymeraseType: Optional[str] = None
    polymeraseUnitNumber: Optional[float] = None
    primerConcentration: Optional[float] = None
    primerSpecificity: Optional[float] = None
    probeConcentration: Optional[float] = None
    qPCRAnalysisProgram: Optional[str] = None
    qpcrDetectionMethod: Optional[str] = None
    qpcrMethod: Optional[str] = None
    reactionVolume: Optional[float] = None

class MgaSwGroupAbundancesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_swGroupAbundances_pub
    class_class_curie: ClassVar[str] = "neon:mga_swGroupAbundances_pub"
    class_name: ClassVar[str] = "mga_swGroupAbundances_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgaSwGroupAbundancesPub


class MccTaxonTableMetadata16SIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_taxonTableMetadata_16S_in
    class_class_curie: ClassVar[str] = "neon:mcc_taxonTableMetadata_16S_in"
    class_name: ClassVar[str] = "mcc_taxonTableMetadata_16S_in"
    class_model_uri: ClassVar[URIRef] = NEON.MccTaxonTableMetadata16SIn


class MccTaxonTableLabSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_taxonTableLabSummary_in
    class_class_curie: ClassVar[str] = "neon:mcc_taxonTableLabSummary_in"
    class_name: ClassVar[str] = "mcc_taxonTableLabSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.MccTaxonTableLabSummaryIn


@dataclass
class MccTaxonTableMetadataITSIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_taxonTableMetadata_ITS_in
    class_class_curie: ClassVar[str] = "neon:mcc_taxonTableMetadata_ITS_in"
    class_name: ClassVar[str] = "mcc_taxonTableMetadata_ITS_in"
    class_model_uri: ClassVar[URIRef] = NEON.MccTaxonTableMetadataITSIn

    completeTaxonomy: Optional[str] = None
    dnaSampleCodeDataFrame: Optional[str] = None
    dnaSampleIDDataFrame: Optional[str] = None
    domain: Optional[str] = None
    communitySubsampleCode: Optional[str] = None
    communitySubsampleFate: Optional[str] = None
    communitySubsampleID: Optional[str] = None

class MccSoilTaxonTableMetadata16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_soilTaxonTableMetadata_16S_pub
    class_class_curie: ClassVar[str] = "neon:mcc_soilTaxonTableMetadata_16S_pub"
    class_name: ClassVar[str] = "mcc_soilTaxonTableMetadata_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MccSoilTaxonTableMetadata16SPub


class MccSoilTaxonTableMetadataITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_soilTaxonTableMetadata_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mcc_soilTaxonTableMetadata_ITS_pub"
    class_name: ClassVar[str] = "mcc_soilTaxonTableMetadata_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MccSoilTaxonTableMetadataITSPub


@dataclass
class MccTaxonTableLabSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_taxonTableLabSummary_pub
    class_class_curie: ClassVar[str] = "neon:mcc_taxonTableLabSummary_pub"
    class_name: ClassVar[str] = "mcc_taxonTableLabSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MccTaxonTableLabSummaryPub

    alignmentMethod: Optional[str] = None
    analysisProgram: Optional[str] = None
    analysisProgramVersion: Optional[str] = None
    chimeraMethod: Optional[str] = None
    clusterMethod: Optional[str] = None
    clusterSimilarity: Optional[float] = None
    referenceDatabase: Optional[str] = None
    referenceDatabaseVersion: Optional[str] = None
    sequenceMatchMethod: Optional[str] = None
    sequenceMatchThresholdValue: Optional[float] = None
    sequenceMatchValueDescription: Optional[str] = None

@dataclass
class MgaSoilGroupAbundancesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_soilGroupAbundances_pub
    class_class_curie: ClassVar[str] = "neon:mga_soilGroupAbundances_pub"
    class_name: ClassVar[str] = "mga_soilGroupAbundances_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgaSoilGroupAbundancesPub

    inhibitorRemovalRequired: Optional[str] = None
    copyNumberStandardDeviation: Optional[float] = None
    meanCopyNumber: Optional[float] = None
    meanCqValue: Optional[float] = None

class MgaSoilBatchResultsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_soilBatchResults_pub
    class_class_curie: ClassVar[str] = "neon:mga_soilBatchResults_pub"
    class_name: ClassVar[str] = "mga_soilBatchResults_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgaSoilBatchResultsPub


class MgaSoilLabSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mga_soilLabSummary_pub
    class_class_curie: ClassVar[str] = "neon:mga_soilLabSummary_pub"
    class_name: ClassVar[str] = "mga_soilLabSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MgaSoilLabSummaryPub


class GeoMappedPointErrorsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_mappedPointErrors_pub
    class_class_curie: ClassVar[str] = "neon:geo_mappedPointErrors_pub"
    class_name: ClassVar[str] = "geo_mappedPointErrors_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoMappedPointErrorsPub


class GeoPebbleCountPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_pebbleCount_pub
    class_class_curie: ClassVar[str] = "neon:geo_pebbleCount_pub"
    class_name: ClassVar[str] = "geo_pebbleCount_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoPebbleCountPub


class GeoFeatureInfoPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_featureInfo_pub
    class_class_curie: ClassVar[str] = "neon:geo_featureInfo_pub"
    class_name: ClassVar[str] = "geo_featureInfo_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoFeatureInfoPub


class GeoTotalStationPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_totalStation_pub
    class_class_curie: ClassVar[str] = "neon:geo_totalStation_pub"
    class_name: ClassVar[str] = "geo_totalStation_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoTotalStationPub


class GeoMissingLinePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_missingLine_pub
    class_class_curie: ClassVar[str] = "neon:geo_missingLine_pub"
    class_name: ClassVar[str] = "geo_missingLine_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoMissingLinePub


class GeoSurveyFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_surveyFieldData_pub
    class_class_curie: ClassVar[str] = "neon:geo_surveyFieldData_pub"
    class_name: ClassVar[str] = "geo_surveyFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoSurveyFieldDataPub


class GeoResultsFilePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_resultsFile_pub
    class_class_curie: ClassVar[str] = "neon:geo_resultsFile_pub"
    class_name: ClassVar[str] = "geo_resultsFile_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoResultsFilePub


class GeoControlInfoPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_controlInfo_pub
    class_class_curie: ClassVar[str] = "neon:geo_controlInfo_pub"
    class_name: ClassVar[str] = "geo_controlInfo_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoControlInfoPub


class GeoPriorParametersPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_priorParameters_pub
    class_class_curie: ClassVar[str] = "neon:geo_priorParameters_pub"
    class_name: ClassVar[str] = "geo_priorParameters_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoPriorParametersPub


class GeoControlTypePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_controlType_pub
    class_class_curie: ClassVar[str] = "neon:geo_controlType_pub"
    class_name: ClassVar[str] = "geo_controlType_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoControlTypePub


@dataclass
class GeoMappedPointErrorsIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_mappedPointErrors_in
    class_class_curie: ClassVar[str] = "neon:geo_mappedPointErrors_in"
    class_name: ClassVar[str] = "geo_mappedPointErrors_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoMappedPointErrorsIn

    deletePoint: Optional[str] = None
    errorDescription: Optional[str] = None
    errorDescriptionRemarks: Optional[str] = None

@dataclass
class GeoPebbleCountIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_pebbleCount_in
    class_class_curie: ClassVar[str] = "neon:geo_pebbleCount_in"
    class_name: ClassVar[str] = "geo_pebbleCount_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoPebbleCountIn

    measurementLocation: Optional[str] = None
    pebbleCountNumber: Optional[int] = None
    pebbleSize: Optional[str] = None

@dataclass
class GeoFeatureInfoIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_featureInfo_in
    class_class_curie: ClassVar[str] = "neon:geo_featureInfo_in"
    class_name: ClassVar[str] = "geo_featureInfo_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoFeatureInfoIn

    bankfullDepth: Optional[float] = None
    bankfullWidth: Optional[float] = None
    featureID: Optional[str] = None
    featureType: Optional[str] = None
    floodproneHeight: Optional[float] = None
    pebbleCountsCollected: Optional[str] = None
    staffGaugeInstalled: Optional[str] = None
    staffGaugeMark: Optional[float] = None
    upsDwnsHabitatType: Optional[str] = None

@dataclass
class GeoTotalStationIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_totalStation_in
    class_class_curie: ClassVar[str] = "neon:geo_totalStation_in"
    class_name: ClassVar[str] = "geo_totalStation_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoTotalStationIn

    featuresSurveyed: Optional[str] = None
    featuresSurveyedOther: Optional[str] = None
    firstControlPointID: Optional[str] = None
    firstControlPointType: Optional[str] = None
    firstThalwegPoint: Optional[int] = None
    firstThalwegPointName: Optional[str] = None
    lastThalwegPoint: Optional[int] = None
    lastThalwegPointName: Optional[str] = None
    secondControlPointID: Optional[str] = None
    secondControlPointType: Optional[str] = None
    stDevH: Optional[float] = None
    stDevHADegrees: Optional[float] = None
    stDevHAMinutes: Optional[float] = None
    stDevHASeconds: Optional[float] = None
    stDevPos: Optional[float] = None
    thirdControlPointID: Optional[str] = None
    thirdControlPointType: Optional[str] = None
    totalStationLocation: Optional[str] = None

@dataclass
class GeoMissingLineIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_missingLine_in
    class_class_curie: ClassVar[str] = "neon:geo_missingLine_in"
    class_name: ClassVar[str] = "geo_missingLine_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoMissingLineIn

    attemptNumber: Optional[int] = None
    missingLinePoint1: Optional[str] = None
    missingLinePoint2: Optional[str] = None
    missingLineResultsdH: Optional[float] = None
    missingLineResultsHD: Optional[float] = None
    missingLineReultsStDev: Optional[float] = None

@dataclass
class GeoSurveyFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_surveyFieldData_in
    class_class_curie: ClassVar[str] = "neon:geo_surveyFieldData_in"
    class_name: ClassVar[str] = "geo_surveyFieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoSurveyFieldDataIn

    missingLineWorkflow: Optional[str] = None
    totalLWDCount: Optional[int] = None

class GeoResultsFileIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_resultsFile_in
    class_class_curie: ClassVar[str] = "neon:geo_resultsFile_in"
    class_name: ClassVar[str] = "geo_resultsFile_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoResultsFileIn


@dataclass
class GeoControlInfoIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_controlInfo_in
    class_class_curie: ClassVar[str] = "neon:geo_controlInfo_in"
    class_name: ClassVar[str] = "geo_controlInfo_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoControlInfoIn

    controlActivationState: Optional[int] = None
    segmentNumber: Optional[int] = None

@dataclass
class GeoPriorParametersIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_priorParameters_in
    class_class_curie: ClassVar[str] = "neon:geo_priorParameters_in"
    class_name: ClassVar[str] = "geo_priorParameters_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoPriorParametersIn

    priorActivationStage: Optional[float] = None
    priorActivationStageUnc: Optional[float] = None
    priorCoefficient: Optional[float] = None
    priorCoefficientUnc: Optional[float] = None
    priorExponent: Optional[float] = None
    priorExponentUnc: Optional[float] = None

@dataclass
class GeoControlTypeIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_controlType_in
    class_class_curie: ClassVar[str] = "neon:geo_controlType_in"
    class_name: ClassVar[str] = "geo_controlType_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoControlTypeIn

    channelSlope: Optional[float] = None
    channelSlopeUnc: Optional[float] = None
    hydraulicControlType: Optional[str] = None
    manningCoefficient: Optional[float] = None
    manningCoefficientUnc: Optional[float] = None
    orificeArea: Optional[float] = None
    orificeAreaUnc: Optional[float] = None
    parabolaHeight: Optional[float] = None
    parabolaHeightUnc: Optional[float] = None
    parabolaWidth: Optional[float] = None
    parabolaWidthUnc: Optional[float] = None
    rectangularWidth: Optional[float] = None
    rectangularWidthUnc: Optional[float] = None
    stricklerCoefficient: Optional[float] = None
    stricklerCoefficientUnc: Optional[float] = None
    triangularAngle: Optional[float] = None
    triangularAngleUnc: Optional[float] = None

@dataclass
class SdrcGaugeDischargeMeasPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdrc_gaugeDischargeMeas_pub
    class_class_curie: ClassVar[str] = "neon:sdrc_gaugeDischargeMeas_pub"
    class_name: ClassVar[str] = "sdrc_gaugeDischargeMeas_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdrcGaugeDischargeMeasPub

    gaugeHeightOffset: Optional[float] = None
    gaugeHeightUnc: Optional[float] = None
    includedInRatingCurve: Optional[str] = None
    L1DataQF: Optional[str] = None
    recalculatedL1QF: Optional[str] = None
    streamDischarge: Optional[float] = None
    streamDischargeUnc: Optional[float] = None

@dataclass
class SdrcPosteriorParametersPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdrc_posteriorParameters_pub
    class_class_curie: ClassVar[str] = "neon:sdrc_posteriorParameters_pub"
    class_name: ClassVar[str] = "sdrc_posteriorParameters_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdrcPosteriorParametersPub

    maxPostActivationStage: Optional[float] = None
    maxPostCoefficient: Optional[float] = None
    maxPostExponent: Optional[float] = None
    maxPostGamma1: Optional[float] = None
    maxPostGamma2: Optional[float] = None
    maxPostZeroFlowOffset: Optional[float] = None
    stdDevActivationStage: Optional[float] = None
    stdDevCoefficient: Optional[float] = None
    stdDevExponent: Optional[float] = None
    stdDevGamma1: Optional[float] = None
    stdDevGamma2: Optional[float] = None
    stdDevZeroFlowOffset: Optional[float] = None

@dataclass
class SdrcStageDischargeCurveInfoPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdrc_stageDischargeCurveInfo_pub
    class_class_curie: ClassVar[str] = "neon:sdrc_stageDischargeCurveInfo_pub"
    class_name: ClassVar[str] = "sdrc_stageDischargeCurveInfo_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdrcStageDischargeCurveInfoPub

    allEventID: Optional[str] = None
    maxQ: Optional[float] = None
    maxStage: Optional[float] = None
    minQ: Optional[float] = None
    minStage: Optional[float] = None
    waterYear: Optional[str] = None

@dataclass
class SdrcSampledParametersPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdrc_sampledParameters_pub
    class_class_curie: ClassVar[str] = "neon:sdrc_sampledParameters_pub"
    class_name: ClassVar[str] = "sdrc_sampledParameters_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdrcSampledParametersPub

    controlNumber: Optional[int] = None
    spagActivationStage: Optional[float] = None
    spagCoefficient: Optional[float] = None
    spagExponent: Optional[float] = None
    spagGamma1: Optional[float] = None
    spagGamma2: Optional[float] = None
    spagLogPost: Optional[float] = None
    spagZeroFlowOffset: Optional[float] = None
    parameterNumber: Optional[int] = None

@dataclass
class SdrcResultsResidualsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdrc_resultsResiduals_pub
    class_class_curie: ClassVar[str] = "neon:sdrc_resultsResiduals_pub"
    class_name: ClassVar[str] = "sdrc_resultsResiduals_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdrcResultsResidualsPub

    gaugeEventID: Optional[str] = None
    X1observed: Optional[float] = None
    X1true: Optional[float] = None
    Y1observed: Optional[float] = None
    Y1residual: Optional[float] = None
    Y1simulated: Optional[float] = None
    Y1stdresidual: Optional[float] = None
    Y1unbiased: Optional[float] = None
    curveEndDate: Optional[Union[str, XSDTime]] = None
    curveStartDate: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.curveEndDate is not None and not isinstance(self.curveEndDate, XSDTime):
            self.curveEndDate = XSDTime(self.curveEndDate)
        if self.curveStartDate is not None and not isinstance(self.curveStartDate, XSDTime):
            self.curveStartDate = XSDTime(self.curveStartDate)
        super().__post_init__(**kwargs)


class ZooDnaExtractionIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_dnaExtraction_in
    class_class_curie: ClassVar[str] = "neon:zoo_dnaExtraction_in"
    class_name: ClassVar[str] = "zoo_dnaExtraction_in"
    class_model_uri: ClassVar[URIRef] = NEON.ZooDnaExtractionIn


class ZooMarkerGeneSequencingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_markerGeneSequencing_in
    class_class_curie: ClassVar[str] = "neon:zoo_markerGeneSequencing_in"
    class_name: ClassVar[str] = "zoo_markerGeneSequencing_in"
    class_model_uri: ClassVar[URIRef] = NEON.ZooMarkerGeneSequencingIn


class ZooPcrAmplificationIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_pcrAmplification_in
    class_class_curie: ClassVar[str] = "neon:zoo_pcrAmplification_in"
    class_name: ClassVar[str] = "zoo_pcrAmplification_in"
    class_model_uri: ClassVar[URIRef] = NEON.ZooPcrAmplificationIn


class ZooRawDataFilesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_rawDataFiles_in
    class_class_curie: ClassVar[str] = "neon:zoo_rawDataFiles_in"
    class_name: ClassVar[str] = "zoo_rawDataFiles_in"
    class_model_uri: ClassVar[URIRef] = NEON.ZooRawDataFilesIn


class InvDnaExtractionIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_dnaExtraction_in
    class_class_curie: ClassVar[str] = "neon:inv_dnaExtraction_in"
    class_name: ClassVar[str] = "inv_dnaExtraction_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvDnaExtractionIn


class InvMarkerGeneSequencingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_markerGeneSequencing_in
    class_class_curie: ClassVar[str] = "neon:inv_markerGeneSequencing_in"
    class_name: ClassVar[str] = "inv_markerGeneSequencing_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvMarkerGeneSequencingIn


class InvPcrAmplificationIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_pcrAmplification_in
    class_class_curie: ClassVar[str] = "neon:inv_pcrAmplification_in"
    class_name: ClassVar[str] = "inv_pcrAmplification_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvPcrAmplificationIn


class InvRawDataFilesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_rawDataFiles_in
    class_class_curie: ClassVar[str] = "neon:inv_rawDataFiles_in"
    class_name: ClassVar[str] = "inv_rawDataFiles_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvRawDataFilesIn


class AmbFieldParentIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.amb_fieldParent_in
    class_class_curie: ClassVar[str] = "neon:amb_fieldParent_in"
    class_name: ClassVar[str] = "amb_fieldParent_in"
    class_model_uri: ClassVar[URIRef] = NEON.AmbFieldParentIn


@dataclass
class AmbFieldParentPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.amb_fieldParent_pub
    class_class_curie: ClassVar[str] = "neon:amb_fieldParent_pub"
    class_name: ClassVar[str] = "amb_fieldParent_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AmbFieldParentPub

    aquMicrobeType: Optional[str] = None
    aquMicrobeScrubArea: Optional[float] = None
    labSampleMedium: Optional[str] = None

class MmgBenthicDnaExtractionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_benthicDnaExtraction_pub
    class_class_curie: ClassVar[str] = "neon:mmg_benthicDnaExtraction_pub"
    class_name: ClassVar[str] = "mmg_benthicDnaExtraction_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgBenthicDnaExtractionPub


class MmgBenthicPcrAmplification16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_benthicPcrAmplification_16S_pub
    class_class_curie: ClassVar[str] = "neon:mmg_benthicPcrAmplification_16S_pub"
    class_name: ClassVar[str] = "mmg_benthicPcrAmplification_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgBenthicPcrAmplification16SPub


class MmgBenthicPcrAmplificationITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_benthicPcrAmplification_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mmg_benthicPcrAmplification_ITS_pub"
    class_name: ClassVar[str] = "mmg_benthicPcrAmplification_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgBenthicPcrAmplificationITSPub


class MmgBenthicMarkerGeneSequencing16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_benthicMarkerGeneSequencing_16S_pub
    class_class_curie: ClassVar[str] = "neon:mmg_benthicMarkerGeneSequencing_16S_pub"
    class_name: ClassVar[str] = "mmg_benthicMarkerGeneSequencing_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgBenthicMarkerGeneSequencing16SPub


class MmgBenthicMarkerGeneSequencingITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_benthicMarkerGeneSequencing_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mmg_benthicMarkerGeneSequencing_ITS_pub"
    class_name: ClassVar[str] = "mmg_benthicMarkerGeneSequencing_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgBenthicMarkerGeneSequencingITSPub


class AmcFieldSuperParentPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.amc_fieldSuperParent_pub
    class_class_curie: ClassVar[str] = "neon:amc_fieldSuperParent_pub"
    class_name: ClassVar[str] = "amc_fieldSuperParent_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AmcFieldSuperParentPub


class AmcFieldGeneticPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.amc_fieldGenetic_pub
    class_class_curie: ClassVar[str] = "neon:amc_fieldGenetic_pub"
    class_name: ClassVar[str] = "amc_fieldGenetic_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AmcFieldGeneticPub


class MmgSwDnaExtractionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_swDnaExtraction_pub
    class_class_curie: ClassVar[str] = "neon:mmg_swDnaExtraction_pub"
    class_name: ClassVar[str] = "mmg_swDnaExtraction_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSwDnaExtractionPub


class MmgSwPcrAmplification16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_swPcrAmplification_16S_pub
    class_class_curie: ClassVar[str] = "neon:mmg_swPcrAmplification_16S_pub"
    class_name: ClassVar[str] = "mmg_swPcrAmplification_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSwPcrAmplification16SPub


class MmgSwPcrAmplificationITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_swPcrAmplification_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mmg_swPcrAmplification_ITS_pub"
    class_name: ClassVar[str] = "mmg_swPcrAmplification_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSwPcrAmplificationITSPub


class MmgSwMarkerGeneSequencing16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_swMarkerGeneSequencing_16S_pub
    class_class_curie: ClassVar[str] = "neon:mmg_swMarkerGeneSequencing_16S_pub"
    class_name: ClassVar[str] = "mmg_swMarkerGeneSequencing_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSwMarkerGeneSequencing16SPub


class MmgSwMarkerGeneSequencingITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_swMarkerGeneSequencing_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mmg_swMarkerGeneSequencing_ITS_pub"
    class_name: ClassVar[str] = "mmg_swMarkerGeneSequencing_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSwMarkerGeneSequencingITSPub


class MamBOLDvoucherInfoPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_BOLDvoucherInfo_pub
    class_class_curie: ClassVar[str] = "neon:mam_BOLDvoucherInfo_pub"
    class_name: ClassVar[str] = "mam_BOLDvoucherInfo_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MamBOLDvoucherInfoPub


class MamBOLDtaxonomyPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_BOLDtaxonomy_pub
    class_class_curie: ClassVar[str] = "neon:mam_BOLDtaxonomy_pub"
    class_name: ClassVar[str] = "mam_BOLDtaxonomy_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MamBOLDtaxonomyPub


class MamBOLDspecimenDetailsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_BOLDspecimenDetails_pub
    class_class_curie: ClassVar[str] = "neon:mam_BOLDspecimenDetails_pub"
    class_name: ClassVar[str] = "mam_BOLDspecimenDetails_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MamBOLDspecimenDetailsPub


class MamBOLDcollectionDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_BOLDcollectionData_pub
    class_class_curie: ClassVar[str] = "neon:mam_BOLDcollectionData_pub"
    class_name: ClassVar[str] = "mam_BOLDcollectionData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MamBOLDcollectionDataPub


@dataclass
class ZooFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:zoo_fieldData_pub"
    class_name: ClassVar[str] = "zoo_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ZooFieldDataPub

    towsTrapsNumber: Optional[str] = None
    zooDepth1: Optional[float] = None
    zooDepth2: Optional[float] = None
    zooDepth3: Optional[float] = None
    towsTrapsVolume: Optional[float] = None

class ZooTaxonomyRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_taxonomyRaw_pub
    class_class_curie: ClassVar[str] = "neon:zoo_taxonomyRaw_pub"
    class_name: ClassVar[str] = "zoo_taxonomyRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ZooTaxonomyRawPub


@dataclass
class ZooTaxonomyProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_taxonomyProcessed_pub
    class_class_curie: ClassVar[str] = "neon:zoo_taxonomyProcessed_pub"
    class_name: ClassVar[str] = "zoo_taxonomyProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ZooTaxonomyProcessedPub

    subsampleType: Optional[str] = None
    notSubsampled: Optional[str] = None
    nauplii: Optional[str] = None
    zooMinimumLength: Optional[float] = None
    zooMaximumLength: Optional[float] = None
    zooMeanLength: Optional[float] = None
    zooWidth: Optional[float] = None
    zooSubsampleVolume: Optional[float] = None
    adjCountPerBottle: Optional[float] = None
    zooVolumePerBottle: Optional[float] = None

class ZooPerVialPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_perVial_pub
    class_class_curie: ClassVar[str] = "neon:zoo_perVial_pub"
    class_name: ClassVar[str] = "zoo_perVial_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ZooPerVialPub


class ZooDnaExtractionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_dnaExtraction_pub
    class_class_curie: ClassVar[str] = "neon:zoo_dnaExtraction_pub"
    class_name: ClassVar[str] = "zoo_dnaExtraction_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ZooDnaExtractionPub


class ZooPcrAmplificationPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_pcrAmplification_pub
    class_class_curie: ClassVar[str] = "neon:zoo_pcrAmplification_pub"
    class_name: ClassVar[str] = "zoo_pcrAmplification_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ZooPcrAmplificationPub


class ZooMarkerGeneSequencingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_markerGeneSequencing_pub
    class_class_curie: ClassVar[str] = "neon:zoo_markerGeneSequencing_pub"
    class_name: ClassVar[str] = "zoo_markerGeneSequencing_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ZooMarkerGeneSequencingPub


class InvFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:inv_fieldData_pub"
    class_name: ClassVar[str] = "inv_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvFieldDataPub


class InvDnaExtractionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_dnaExtraction_pub
    class_class_curie: ClassVar[str] = "neon:inv_dnaExtraction_pub"
    class_name: ClassVar[str] = "inv_dnaExtraction_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvDnaExtractionPub


class InvPcrAmplificationPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_pcrAmplification_pub
    class_class_curie: ClassVar[str] = "neon:inv_pcrAmplification_pub"
    class_name: ClassVar[str] = "inv_pcrAmplification_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvPcrAmplificationPub


class InvMarkerGeneSequencingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_markerGeneSequencing_pub
    class_class_curie: ClassVar[str] = "neon:inv_markerGeneSequencing_pub"
    class_name: ClassVar[str] = "inv_markerGeneSequencing_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvMarkerGeneSequencingPub


@dataclass
class InvFielddataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_fielddata_in
    class_class_curie: ClassVar[str] = "neon:inv_fielddata_in"
    class_name: ClassVar[str] = "inv_fielddata_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvFielddataIn

    ponarDepth: Optional[float] = None
    snagLength: Optional[float] = None
    snagDiameter: Optional[float] = None
    dnaSnagDiameter: Optional[float] = None
    dnaSnagLength: Optional[float] = None

@dataclass
class InvPersampleIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_persample_in
    class_class_curie: ClassVar[str] = "neon:inv_persample_in"
    class_name: ClassVar[str] = "inv_persample_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvPersampleIn

    chironomidVialFate: Optional[str] = None
    oligochaeteVialFate: Optional[str] = None

class InvPertaxonIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_pertaxon_in
    class_class_curie: ClassVar[str] = "neon:inv_pertaxon_in"
    class_name: ClassVar[str] = "inv_pertaxon_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvPertaxonIn


@dataclass
class InvPervialIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_pervial_in
    class_class_curie: ClassVar[str] = "neon:inv_pervial_in"
    class_name: ClassVar[str] = "inv_pervial_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvPervialIn

    referenceFate: Optional[str] = None

@dataclass
class SmeMicrobialBiomassIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sme_microbialBiomass_in
    class_class_curie: ClassVar[str] = "neon:sme_microbialBiomass_in"
    class_name: ClassVar[str] = "sme_microbialBiomass_in"
    class_model_uri: ClassVar[URIRef] = NEON.SmeMicrobialBiomassIn

    biomassFate: Optional[str] = None

class SmeBatchResultsIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sme_batchResults_in
    class_class_curie: ClassVar[str] = "neon:sme_batchResults_in"
    class_name: ClassVar[str] = "sme_batchResults_in"
    class_model_uri: ClassVar[URIRef] = NEON.SmeBatchResultsIn


@dataclass
class SmeLabSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sme_labSummary_in
    class_class_curie: ClassVar[str] = "neon:sme_labSummary_in"
    class_name: ClassVar[str] = "sme_labSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.SmeLabSummaryIn

    analyteAccuracyUnits: Optional[str] = None
    analyteKnownValueUnits: Optional[str] = None
    analyteStandardDeviationUnits: Optional[str] = None

class MmsBenthicMetagenomeDnaExtractionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_benthicMetagenomeDnaExtraction_pub
    class_class_curie: ClassVar[str] = "neon:mms_benthicMetagenomeDnaExtraction_pub"
    class_name: ClassVar[str] = "mms_benthicMetagenomeDnaExtraction_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsBenthicMetagenomeDnaExtractionPub


class MmsBenthicMetagenomeSequencingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_benthicMetagenomeSequencing_pub
    class_class_curie: ClassVar[str] = "neon:mms_benthicMetagenomeSequencing_pub"
    class_name: ClassVar[str] = "mms_benthicMetagenomeSequencing_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsBenthicMetagenomeSequencingPub


@dataclass
class MmsSwMetagenomeDnaExtractionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_swMetagenomeDnaExtraction_pub
    class_class_curie: ClassVar[str] = "neon:mms_swMetagenomeDnaExtraction_pub"
    class_name: ClassVar[str] = "mms_swMetagenomeDnaExtraction_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsSwMetagenomeDnaExtractionPub

    genomicsSampleCode: Optional[str] = None
    genomicsSampleID: Optional[str] = None

@dataclass
class MmsSwMetagenomeSequencingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_swMetagenomeSequencing_pub
    class_class_curie: ClassVar[str] = "neon:mms_swMetagenomeSequencing_pub"
    class_name: ClassVar[str] = "mms_swMetagenomeSequencing_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsSwMetagenomeSequencingPub

    investigation_type: Optional[str] = None
    sequencingProtocol: Optional[str] = None
    labPrepMethod: Optional[str] = None

@dataclass
class SmeMicrobialBiomassPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sme_microbialBiomass_pub
    class_class_curie: ClassVar[str] = "neon:sme_microbialBiomass_pub"
    class_name: ClassVar[str] = "sme_microbialBiomass_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SmeMicrobialBiomassPub

    biomassCode: Optional[str] = None
    biomassID: Optional[str] = None
    freshMass: Optional[float] = None
    lipid2OH10To0Concentration: Optional[float] = None
    lipid2OH12To0Concentration: Optional[float] = None
    lipid2OH14To0Concentration: Optional[float] = None
    lipid2OH16To0Concentration: Optional[float] = None
    lipid3OH12To0Concentration: Optional[float] = None
    lipid3OH14To0Concentration: Optional[float] = None
    aC15To0Concentration: Optional[float] = None
    c10To0Concentration: Optional[float] = None
    c11To0Concentration: Optional[float] = None
    c12To0Concentration: Optional[float] = None
    c13To0Concentration: Optional[float] = None
    c14To0Concentration: Optional[float] = None
    c14To1Concentration: Optional[float] = None
    c15To0Concentration: Optional[float] = None
    c15To1Concentration: Optional[float] = None
    c16To0Concentration: Optional[float] = None
    c17To0Concentration: Optional[float] = None
    c17To1Concentration: Optional[float] = None
    c18To0Concentration: Optional[float] = None
    c18To1n11Concentration: Optional[float] = None
    c18To3n3Concentration: Optional[float] = None
    c18To3n6Concentration: Optional[float] = None
    c19To0Concentration: Optional[float] = None
    c20To0Concentration: Optional[float] = None
    c20To1Concentration: Optional[float] = None
    c20To2Concentration: Optional[float] = None
    c20To3n3Concentration: Optional[float] = None
    c20To3n6Concentration: Optional[float] = None
    c20To4n6Concentration: Optional[float] = None
    c20To5n3Concentration: Optional[float] = None
    c21To0Concentration: Optional[float] = None
    c22To0Concentration: Optional[float] = None
    c22To1n9Concentration: Optional[float] = None
    c22To2Concentration: Optional[float] = None
    c23To0Concentration: Optional[float] = None
    c24To0Concentration: Optional[float] = None
    c24To1Concentration: Optional[float] = None
    c8To0Concentration: Optional[float] = None
    cis16To1n9Concentration: Optional[float] = None
    cis18To1n9Concentration: Optional[float] = None
    cis18To2n912Concentration: Optional[float] = None
    cyclo17To0Concentration: Optional[float] = None
    cyclo19To0Concentration: Optional[float] = None
    extractionEfficiency: Optional[float] = None
    freezeDryMass: Optional[float] = None
    i15To0Concentration: Optional[float] = None
    i16To0Concentration: Optional[float] = None
    i17To0Concentration: Optional[float] = None
    trans18To1n9Concentration: Optional[float] = None
    trans18To2n912Concentration: Optional[float] = None
    totalLipidConcentration: Optional[float] = None
    c16To1Cis11Concentration: Optional[float] = None
    c17To0AnteisoConcentration: Optional[float] = None
    c19To1Cis10Concentration: Optional[float] = None
    c22To6CisConcentration: Optional[float] = None
    i14To0Concentration: Optional[float] = None
    lipid10Methyl16To0Concentration: Optional[float] = None
    lipid10Methyl17To0Concentration: Optional[float] = None
    lipid10Methyl18To0Concentration: Optional[float] = None
    extractEffStdConc: Optional[float] = None
    analysisResultsQF: Optional[str] = None

@dataclass
class SmeBatchResultsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sme_batchResults_pub
    class_class_curie: ClassVar[str] = "neon:sme_batchResults_pub"
    class_name: ClassVar[str] = "sme_batchResults_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SmeBatchResultsPub

    lotNumber: Optional[str] = None
    extractEffStdID: Optional[str] = None
    extractEffStdUnits: Optional[str] = None
    analyteStandardQF: Optional[str] = None

@dataclass
class SmeLabSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sme_labSummary_pub
    class_class_curie: ClassVar[str] = "neon:sme_labSummary_pub"
    class_name: ClassVar[str] = "sme_labSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SmeLabSummaryPub

    analysisStandardID: Optional[str] = None
    lipidID: Optional[str] = None

class MccBenthicTaxonTableMetadata16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_benthicTaxonTableMetadata_16S_pub
    class_class_curie: ClassVar[str] = "neon:mcc_benthicTaxonTableMetadata_16S_pub"
    class_name: ClassVar[str] = "mcc_benthicTaxonTableMetadata_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MccBenthicTaxonTableMetadata16SPub


class MccBenthicTaxonTableMetadataITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_benthicTaxonTableMetadata_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mcc_benthicTaxonTableMetadata_ITS_pub"
    class_name: ClassVar[str] = "mcc_benthicTaxonTableMetadata_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MccBenthicTaxonTableMetadataITSPub


class MccSwTaxonTableMetadata16SPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_swTaxonTableMetadata_16S_pub
    class_class_curie: ClassVar[str] = "neon:mcc_swTaxonTableMetadata_16S_pub"
    class_name: ClassVar[str] = "mcc_swTaxonTableMetadata_16S_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MccSwTaxonTableMetadata16SPub


@dataclass
class MccSwTaxonTableMetadataITSPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mcc_swTaxonTableMetadata_ITS_pub
    class_class_curie: ClassVar[str] = "neon:mcc_swTaxonTableMetadata_ITS_pub"
    class_name: ClassVar[str] = "mcc_swTaxonTableMetadata_ITS_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MccSwTaxonTableMetadataITSPub

    targetTaxonGroup: Optional[str] = None

class DscFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dsc_fieldData_in
    class_class_curie: ClassVar[str] = "neon:dsc_fieldData_in"
    class_name: ClassVar[str] = "dsc_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.DscFieldDataIn


class DscIndividualFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dsc_individualFieldData_in
    class_class_curie: ClassVar[str] = "neon:dsc_individualFieldData_in"
    class_name: ClassVar[str] = "dsc_individualFieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.DscIndividualFieldDataIn


@dataclass
class DscFieldDataADCPIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dsc_fieldDataADCP_in
    class_class_curie: ClassVar[str] = "neon:dsc_fieldDataADCP_in"
    class_name: ClassVar[str] = "dsc_fieldDataADCP_in"
    class_model_uri: ClassVar[URIRef] = NEON.DscFieldDataADCPIn

    estimated95percentUC: Optional[float] = None
    timeZone: Optional[str] = None

@dataclass
class DscFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dsc_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:dsc_fieldData_pub"
    class_name: ClassVar[str] = "dsc_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DscFieldDataPub

    velocitySensorID: Optional[str] = None
    filterParamTime: Optional[float] = None
    stationEntryTest: Optional[str] = None
    waterEdge: Optional[str] = None
    averageVelocityUnits: Optional[str] = None
    averageVelocityUnitsQF: Optional[int] = None
    dischargeUnitsQF: Optional[int] = None
    flowCalcQF: Optional[str] = None
    flowCalculation: Optional[str] = None
    lowVelocityFinalQF: Optional[float] = None
    streamStageUnitsQF: Optional[int] = None
    tapeDistanceUnits: Optional[str] = None
    tapeDistanceUnitsQF: Optional[int] = None
    waterDepthUnits: Optional[str] = None
    waterDepthUnitsQF: Optional[int] = None

@dataclass
class DscIndividualFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dsc_individualFieldData_pub
    class_class_curie: ClassVar[str] = "neon:dsc_individualFieldData_pub"
    class_name: ClassVar[str] = "dsc_individualFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DscIndividualFieldDataPub

    averageVelocity: Optional[float] = None
    bedVelocity: Optional[float] = None
    edgeFactor: Optional[str] = None
    fourFifthDepthVelocity: Optional[float] = None
    lowVelocityQF: Optional[int] = None
    oneFifthDepthVelocity: Optional[float] = None
    sectionArea: Optional[float] = None
    sectionFlow: Optional[float] = None
    stationNumber: Optional[int] = None
    streamProfilingMethod: Optional[str] = None
    surfaceVelocity: Optional[float] = None
    tapeDistance: Optional[float] = None
    threeFifthDepthVelocity: Optional[float] = None
    twoFifthDepthVelocity: Optional[float] = None

@dataclass
class DscFieldDataADCPPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dsc_fieldDataADCP_pub
    class_class_curie: ClassVar[str] = "neon:dsc_fieldDataADCP_pub"
    class_name: ClassVar[str] = "dsc_fieldDataADCP_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DscFieldDataADCPPub

    streamStage: Optional[float] = None
    totalDischarge: Optional[float] = None
    totalDischargeUnits: Optional[str] = None
    streamStageUnits: Optional[str] = None
    adcpCompassCalibrated: Optional[str] = None
    adcpCompassError: Optional[float] = None
    loopMBT: Optional[str] = None
    magneticVariation: Optional[float] = None
    riverDepthMean: Optional[float] = None
    riverDischargeMeasDuration: Optional[float] = None
    riverVelocityMaximum: Optional[float] = None
    riverWidthMean: Optional[float] = None
    stationaryMBT: Optional[str] = None
    totalDischargeRU: Optional[float] = None
    velocityUnits: Optional[str] = None
    waterTemperature: Optional[float] = None
    widthUnits: Optional[str] = None
    windDirRelativeToFlow: Optional[str] = None
    windSpeedPrior: Optional[float] = None

@dataclass
class GwcFieldSuperParentPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gwc_fieldSuperParent_pub
    class_class_curie: ClassVar[str] = "neon:gwc_fieldSuperParent_pub"
    class_name: ClassVar[str] = "gwc_fieldSuperParent_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GwcFieldSuperParentPub

    adequateSampleVol: Optional[str] = None

@dataclass
class GwcFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gwc_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:gwc_fieldData_pub"
    class_name: ClassVar[str] = "gwc_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GwcFieldDataPub

    gwwAlkSampleBubbleFree: Optional[str] = None
    gwwAlkSampleHeadspace: Optional[str] = None
    gwwFiltBubbleFree: Optional[str] = None
    gwwFiltSampleHeadspace: Optional[str] = None

class GwcDomainLabDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gwc_domainLabData_pub
    class_class_curie: ClassVar[str] = "neon:gwc_domainLabData_pub"
    class_name: ClassVar[str] = "gwc_domainLabData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GwcDomainLabDataPub


class GwcExternalLabDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gwc_externalLabData_pub
    class_class_curie: ClassVar[str] = "neon:gwc_externalLabData_pub"
    class_name: ClassVar[str] = "gwc_externalLabData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GwcExternalLabDataPub


@dataclass
class SwcExternalLabSummaryDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swc_externalLabSummaryData_pub
    class_class_curie: ClassVar[str] = "neon:swc_externalLabSummaryData_pub"
    class_name: ClassVar[str] = "swc_externalLabSummaryData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SwcExternalLabSummaryDataPub

    methodModification: Optional[str] = None
    internalLabName: Optional[str] = None
    absorbancePrecision: Optional[str] = None
    precisionRepeatabilityUnits: Optional[str] = None

class SwcFieldSuperParentPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swc_fieldSuperParent_pub
    class_class_curie: ClassVar[str] = "neon:swc_fieldSuperParent_pub"
    class_name: ClassVar[str] = "swc_fieldSuperParent_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SwcFieldSuperParentPub


class SwcFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swc_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:swc_fieldData_pub"
    class_name: ClassVar[str] = "swc_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SwcFieldDataPub


@dataclass
class SwcDomainLabDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swc_domainLabData_pub
    class_class_curie: ClassVar[str] = "neon:swc_domainLabData_pub"
    class_name: ClassVar[str] = "swc_domainLabData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SwcDomainLabDataPub

    titrationLocation: Optional[str] = None
    initialSamplepH: Optional[float] = None
    initialSampleTemp: Optional[float] = None
    normality: Optional[str] = None
    methodType: Optional[str] = None
    titrationDate: Optional[Union[str, XSDTime]] = None
    alkMeqPerL: Optional[float] = None
    alkMgPerL: Optional[float] = None
    ancMeqPerL: Optional[float] = None
    ancMgPerL: Optional[float] = None
    domainSampleID: Optional[str] = None
    domainSampleCode: Optional[str] = None
    titrationDataString: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.titrationDate is not None and not isinstance(self.titrationDate, XSDTime):
            self.titrationDate = XSDTime(self.titrationDate)
        super().__post_init__(**kwargs)


@dataclass
class SwcExternalLabDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swc_externalLabData_pub
    class_class_curie: ClassVar[str] = "neon:swc_externalLabData_pub"
    class_name: ClassVar[str] = "swc_externalLabData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SwcExternalLabDataPub

    externalConductance: Optional[float] = None
    waterCarbonate: Optional[float] = None
    waterBicarbonate: Optional[float] = None
    externalANC: Optional[float] = None
    waterCalcium: Optional[float] = None
    waterMagnesium: Optional[float] = None
    waterSodium: Optional[float] = None
    waterPotassium: Optional[float] = None
    waterSulfate: Optional[float] = None
    waterChlorine: Optional[float] = None
    waterManganese: Optional[float] = None
    waterIron: Optional[float] = None
    waterBromine: Optional[float] = None
    waterFluorine: Optional[float] = None
    waterSilica: Optional[float] = None
    totalSuspendedSolids: Optional[float] = None
    totalSuspendedSolidsDryMass: Optional[float] = None
    totalDissolvedSolids: Optional[float] = None
    waterNitrateAndNitriteN: Optional[float] = None
    waterNitriteN: Optional[float] = None
    waterAmmoniumN: Optional[float] = None
    waterOrthophosphateP: Optional[float] = None
    waterTotalNitrogen: Optional[float] = None
    totalDissolvedNitrogen: Optional[float] = None
    dissolvedInorganicCarbon: Optional[float] = None
    dissolvedOrganicCarbon: Optional[float] = None
    waterTotalOrganicCarbon: Optional[float] = None
    waterTotalPhosphorus: Optional[float] = None
    totalDissolvedPhosphorus: Optional[float] = None
    totalParticulateCarbonMass: Optional[float] = None
    totalParticulateNitrogenMass: Optional[float] = None
    uvAbsorbance250: Optional[float] = None
    uvAbsorbance284: Optional[float] = None
    shipmentLateQF: Optional[float] = None

class PtxTaxonomyIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ptx_taxonomy_in
    class_class_curie: ClassVar[str] = "neon:ptx_taxonomy_in"
    class_name: ClassVar[str] = "ptx_taxonomy_in"
    class_model_uri: ClassVar[URIRef] = NEON.PtxTaxonomyIn


@dataclass
class PtxQualityCheckIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ptx_qualityCheck_in
    class_class_curie: ClassVar[str] = "neon:ptx_qualityCheck_in"
    class_name: ClassVar[str] = "ptx_qualityCheck_in"
    class_model_uri: ClassVar[URIRef] = NEON.PtxQualityCheckIn

    qcIdentifiedBy: Optional[str] = None
    qcIndividualCount: Optional[str] = None

@dataclass
class BatFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bat_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:bat_fieldData_pub"
    class_name: ClassVar[str] = "bat_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BatFieldDataPub

    sonarSystemModel: Optional[str] = None

@dataclass
class BatPointcollectionPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bat_pointcollection_pub
    class_class_curie: ClassVar[str] = "neon:bat_pointcollection_pub"
    class_name: ClassVar[str] = "bat_pointcollection_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BatPointcollectionPub

    waterDepth: Optional[float] = None
    substrate: Optional[str] = None
    gpsDatafile: Optional[str] = None
    bathymetryDataType: Optional[str] = None
    gpsAntennaHeight: Optional[float] = None
    gpsUsed: Optional[str] = None
    plantsPresent: Optional[str] = None
    pointCollectionDate: Optional[Union[str, XSDTime]] = None
    waypoint: Optional[str] = None
    waypointDescription: Optional[str] = None
    gpsAccuracy: Optional[float] = None
    gpsAccuracyUnits: Optional[str] = None
    gpsAccuracyValue: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.pointCollectionDate is not None and not isinstance(self.pointCollectionDate, XSDTime):
            self.pointCollectionDate = XSDTime(self.pointCollectionDate)
        super().__post_init__(**kwargs)


@dataclass
class BatSonarRecordPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bat_sonarRecord_pub
    class_class_curie: ClassVar[str] = "neon:bat_sonarRecord_pub"
    class_name: ClassVar[str] = "bat_sonarRecord_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BatSonarRecordPub

    sonarRecordingNumber: Optional[str] = None
    sonarRecordingStartTime: Optional[Union[str, XSDTime]] = None
    sonarRecordingStopTime: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.sonarRecordingStartTime is not None and not isinstance(self.sonarRecordingStartTime, XSDTime):
            self.sonarRecordingStartTime = XSDTime(self.sonarRecordingStartTime)
        if self.sonarRecordingStopTime is not None and not isinstance(self.sonarRecordingStopTime, XSDTime):
            self.sonarRecordingStopTime = XSDTime(self.sonarRecordingStopTime)
        super().__post_init__(**kwargs)


@dataclass
class BatResultsFilePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bat_resultsFile_pub
    class_class_curie: ClassVar[str] = "neon:bat_resultsFile_pub"
    class_name: ClassVar[str] = "bat_resultsFile_pub"
    class_model_uri: ClassVar[URIRef] = NEON.BatResultsFilePub

    dataFileName: Optional[str] = None
    dataFilePath: Optional[str] = None
    sopVersion: Optional[str] = None

class Div1m2DataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_1m2Data_in
    class_class_curie: ClassVar[str] = "neon:div_1m2Data_in"
    class_name: ClassVar[str] = "div_1m2Data_in"
    class_model_uri: ClassVar[URIRef] = NEON.Div1m2DataIn


class Div10m2Data100m2DataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_10m2Data100m2Data_in
    class_class_curie: ClassVar[str] = "neon:div_10m2Data100m2Data_in"
    class_name: ClassVar[str] = "div_10m2Data100m2Data_in"
    class_model_uri: ClassVar[URIRef] = NEON.Div10m2Data100m2DataIn


@dataclass
class DivMorphospeciesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_morphospecies_in
    class_class_curie: ClassVar[str] = "neon:div_morphospecies_in"
    class_name: ClassVar[str] = "div_morphospecies_in"
    class_model_uri: ClassVar[URIRef] = NEON.DivMorphospeciesIn

    morphospeciesCreatedDate: Optional[Union[str, XSDTime]] = None
    morphospeciesResolved: Optional[str] = None
    morphospeciesResolvedDate: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.morphospeciesCreatedDate is not None and not isinstance(self.morphospeciesCreatedDate, XSDTime):
            self.morphospeciesCreatedDate = XSDTime(self.morphospeciesCreatedDate)
        if self.morphospeciesResolvedDate is not None and not isinstance(self.morphospeciesResolvedDate, XSDTime):
            self.morphospeciesResolvedDate = XSDTime(self.morphospeciesResolvedDate)
        super().__post_init__(**kwargs)


class DivVoucherIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_voucher_in
    class_class_curie: ClassVar[str] = "neon:div_voucher_in"
    class_name: ClassVar[str] = "div_voucher_in"
    class_model_uri: ClassVar[URIRef] = NEON.DivVoucherIn


@dataclass
class DivGeneticarchiveIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_geneticarchive_in
    class_class_curie: ClassVar[str] = "neon:div_geneticarchive_in"
    class_name: ClassVar[str] = "div_geneticarchive_in"
    class_model_uri: ClassVar[URIRef] = NEON.DivGeneticarchiveIn

    untaggedPlantID: Optional[str] = None

@dataclass
class Div1m2DataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_1m2Data_pub
    class_class_curie: ClassVar[str] = "neon:div_1m2Data_pub"
    class_name: ClassVar[str] = "div_1m2Data_pub"
    class_model_uri: ClassVar[URIRef] = NEON.Div1m2DataPub

    percentCover: Optional[float] = None
    divDataType: Optional[str] = None
    otherVariablesPresent: Optional[str] = None
    otherVariables: Optional[str] = None
    heightPlantOver300cm: Optional[str] = None
    heightPlantSpecies: Optional[str] = None

@dataclass
class Div10m2Data100m2DataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_10m2Data100m2Data_pub
    class_class_curie: ClassVar[str] = "neon:div_10m2Data100m2Data_pub"
    class_name: ClassVar[str] = "div_10m2Data100m2Data_pub"
    class_model_uri: ClassVar[URIRef] = NEON.Div10m2Data100m2DataPub

    additionalSpecies: Optional[str] = None

@dataclass
class DivVoucherPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_voucher_pub
    class_class_curie: ClassVar[str] = "neon:div_voucher_pub"
    class_name: ClassVar[str] = "div_voucher_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DivVoucherPub

    plantDescription: Optional[str] = None
    voucherLifeStage: Optional[str] = None
    voucherLocality: Optional[str] = None

@dataclass
class DivGeneticarchivePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.div_geneticarchive_pub
    class_class_curie: ClassVar[str] = "neon:div_geneticarchive_pub"
    class_name: ClassVar[str] = "div_geneticarchive_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DivGeneticarchivePub

    plantCondition: Optional[str] = None

@dataclass
class AlgFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_fieldData_in
    class_class_curie: ClassVar[str] = "neon:alg_fieldData_in"
    class_name: ClassVar[str] = "alg_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.AlgFieldDataIn

    habitatType: Optional[str] = None
    sampleNumber: Optional[str] = None
    substratumSizeClass: Optional[str] = None
    algalSampleType: Optional[str] = None
    phytoDepth1: Optional[float] = None
    phytoDepth2: Optional[float] = None
    phytoDepth3: Optional[float] = None

@dataclass
class AlgDomainLabIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_domainLab_in
    class_class_curie: ClassVar[str] = "neon:alg_domainLab_in"
    class_name: ClassVar[str] = "alg_domainLab_in"
    class_model_uri: ClassVar[URIRef] = NEON.AlgDomainLabIn

    boatID: Optional[str] = None
    storageDays: Optional[float] = None
    filterNumber: Optional[str] = None
    plantBoatID: Optional[str] = None

class AlgBiovolumesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_biovolumes_in
    class_class_curie: ClassVar[str] = "neon:alg_biovolumes_in"
    class_name: ClassVar[str] = "alg_biovolumes_in"
    class_model_uri: ClassVar[URIRef] = NEON.AlgBiovolumesIn


@dataclass
class AlgLabBlankIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_labBlank_in
    class_class_curie: ClassVar[str] = "neon:alg_labBlank_in"
    class_name: ClassVar[str] = "alg_labBlank_in"
    class_model_uri: ClassVar[URIRef] = NEON.AlgLabBlankIn

    diBlankCode: Optional[str] = None
    diBlankFate: Optional[str] = None
    diBlankID: Optional[str] = None
    filterBlankRep1: Optional[str] = None
    filterBlankRep1Code: Optional[str] = None
    filterBlankRep1Fate: Optional[str] = None
    filterBlankRep1Volume: Optional[float] = None
    filterBlankRep2: Optional[str] = None
    filterBlankRep2Code: Optional[str] = None
    filterBlankRep2Fate: Optional[str] = None
    filterBlankRep2Volume: Optional[float] = None

@dataclass
class AgwGroundwaterFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.agw_groundwaterFieldData_in
    class_class_curie: ClassVar[str] = "neon:agw_groundwaterFieldData_in"
    class_name: ClassVar[str] = "agw_groundwaterFieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.AgwGroundwaterFieldDataIn

    liquidWaterPresence: Optional[str] = None
    topOfWellToGroundDist: Optional[float] = None
    topOfWellToRefusalDist: Optional[float] = None
    topOfWellToWaterDist: Optional[float] = None
    transducerLowered: Optional[str] = None
    wellPushedDownToThawLayer: Optional[str] = None

@dataclass
class AgwGroundwaterFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.agw_groundwaterFieldData_pub
    class_class_curie: ClassVar[str] = "neon:agw_groundwaterFieldData_pub"
    class_name: ClassVar[str] = "agw_groundwaterFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AgwGroundwaterFieldDataPub

    groundSurfToThawDist: Optional[float] = None
    groundSurfToWaterDist: Optional[float] = None
    thawProbeDepth1: Optional[float] = None
    thawProbeDepth10: Optional[float] = None
    thawProbeDepth2: Optional[float] = None
    thawProbeDepth3: Optional[float] = None
    thawProbeDepth4: Optional[float] = None
    thawProbeDepth5: Optional[float] = None
    thawProbeDepth6: Optional[float] = None
    thawProbeDepth7: Optional[float] = None
    thawProbeDepth8: Optional[float] = None
    thawProbeDepth9: Optional[float] = None
    thawProbeDepthAverage: Optional[float] = None
    thawProbeDepthStdDev: Optional[float] = None

class SdgFieldDataAirIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_fieldDataAir_in
    class_class_curie: ClassVar[str] = "neon:sdg_fieldDataAir_in"
    class_name: ClassVar[str] = "sdg_fieldDataAir_in"
    class_model_uri: ClassVar[URIRef] = NEON.SdgFieldDataAirIn


@dataclass
class SdgFieldDataProcIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_fieldDataProc_in
    class_class_curie: ClassVar[str] = "neon:sdg_fieldDataProc_in"
    class_name: ClassVar[str] = "sdg_fieldDataProc_in"
    class_model_uri: ClassVar[URIRef] = NEON.SdgFieldDataProcIn

    equilibratedAirSampleCond: Optional[str] = None
    equilibratedAirSampleFate: Optional[str] = None
    referenceAirSampleCond: Optional[str] = None
    referenceAirSampleFate: Optional[str] = None

@dataclass
class SdgFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_fieldData_in
    class_class_curie: ClassVar[str] = "neon:sdg_fieldData_in"
    class_name: ClassVar[str] = "sdg_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.SdgFieldDataIn

    waterSampleFate: Optional[str] = None

class SdgExternalLabSummaryDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_externalLabSummaryData_in
    class_class_curie: ClassVar[str] = "neon:sdg_externalLabSummaryData_in"
    class_name: ClassVar[str] = "sdg_externalLabSummaryData_in"
    class_model_uri: ClassVar[URIRef] = NEON.SdgExternalLabSummaryDataIn


class SdgExternalLabDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_externalLabData_in
    class_class_curie: ClassVar[str] = "neon:sdg_externalLabData_in"
    class_name: ClassVar[str] = "sdg_externalLabData_in"
    class_model_uri: ClassVar[URIRef] = NEON.SdgExternalLabDataIn


@dataclass
class SdgFieldSuperParentPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_fieldSuperParent_pub
    class_class_curie: ClassVar[str] = "neon:sdg_fieldSuperParent_pub"
    class_name: ClassVar[str] = "sdg_fieldSuperParent_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdgFieldSuperParentPub

    measurementDepth: Optional[float] = None

@dataclass
class SdgFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:sdg_fieldData_pub"
    class_name: ClassVar[str] = "sdg_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdgFieldDataPub

    sdgFieldDataQF: Optional[str] = None

@dataclass
class SdgFieldDataAirPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_fieldDataAir_pub
    class_class_curie: ClassVar[str] = "neon:sdg_fieldDataAir_pub"
    class_name: ClassVar[str] = "sdg_fieldDataAir_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdgFieldDataAirPub

    airVolumeSample: Optional[float] = None
    lowAirVolumeQF: Optional[int] = None
    sdgAirDataQF: Optional[str] = None

@dataclass
class SdgFieldDataProcPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_fieldDataProc_pub
    class_class_curie: ClassVar[str] = "neon:sdg_fieldDataProc_pub"
    class_name: ClassVar[str] = "sdg_fieldDataProc_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdgFieldDataProcPub

    equilibratedAirSampleID: Optional[str] = None
    referenceAirSampleID: Optional[str] = None
    storageWaterTemp: Optional[float] = None
    ptBarometricPressure: Optional[float] = None
    waterVolumeSyringe: Optional[float] = None
    gasVolumeSyringe: Optional[float] = None
    gasVolumeSample: Optional[float] = None
    lowGasVolumeQF: Optional[int] = None
    waterSampleID: Optional[str] = None
    equilibratedAirSampleCode: Optional[str] = None
    referenceAirSampleCode: Optional[str] = None
    sdgProcessDataQF: Optional[str] = None
    waterSampleCode: Optional[str] = None

@dataclass
class SdgExternalLabDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_externalLabData_pub
    class_class_curie: ClassVar[str] = "neon:sdg_externalLabData_pub"
    class_name: ClassVar[str] = "sdg_externalLabData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdgExternalLabDataPub

    internalSampleName: Optional[str] = None
    internalLabFileName: Optional[str] = None
    concentrationCH4: Optional[float] = None
    concentrationCO2: Optional[float] = None
    concentrationN2O: Optional[float] = None
    volumeGasAnalyzed: Optional[float] = None
    runDetectionLimitCH4: Optional[float] = None
    runDetectionLimitCO2: Optional[float] = None
    runDetectionLimitN2O: Optional[float] = None
    precisionCH4: Optional[float] = None
    precisionCO2: Optional[float] = None
    precisionN2O: Optional[float] = None
    gasStandardAccuracy: Optional[float] = None
    sdgExternalLabDataQF: Optional[str] = None

@dataclass
class SdgExternalLabSummaryDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sdg_externalLabSummaryData_pub
    class_class_curie: ClassVar[str] = "neon:sdg_externalLabSummaryData_pub"
    class_name: ClassVar[str] = "sdg_externalLabSummaryData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SdgExternalLabSummaryDataPub

    precision: Optional[float] = None
    measurementUncertainty: Optional[float] = None
    measurementUncertaintyUnits: Optional[str] = None
    methodDetectionLimitUnits: Optional[str] = None
    precisionUnits: Optional[str] = None

class ReaPlateauMeasurementFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_plateauMeasurementFieldData_in
    class_class_curie: ClassVar[str] = "neon:rea_plateauMeasurementFieldData_in"
    class_name: ClassVar[str] = "rea_plateauMeasurementFieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaPlateauMeasurementFieldDataIn


@dataclass
class ReaPlateauSampleFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_plateauSampleFieldData_in
    class_class_curie: ClassVar[str] = "neon:rea_plateauSampleFieldData_in"
    class_name: ClassVar[str] = "rea_plateauSampleFieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaPlateauSampleFieldDataIn

    saltTracerSampleFate: Optional[str] = None
    syringeFate: Optional[str] = None
    gasSampleCond: Optional[str] = None
    saltTracerSampleCond: Optional[str] = None
    syringeCond: Optional[str] = None

@dataclass
class ReaExternalLabDataSaltIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_externalLabDataSalt_in
    class_class_curie: ClassVar[str] = "neon:rea_externalLabDataSalt_in"
    class_name: ClassVar[str] = "rea_externalLabDataSalt_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaExternalLabDataSaltIn

    saltSampleCode: Optional[str] = None
    saltSampleFate: Optional[str] = None

@dataclass
class ReaConductivityFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_conductivityFieldData_in
    class_class_curie: ClassVar[str] = "neon:rea_conductivityFieldData_in"
    class_name: ClassVar[str] = "rea_conductivityFieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaConductivityFieldDataIn

    handheldDeviceID: Optional[str] = None

@dataclass
class ReaExternalLabDataGasIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_externalLabDataGas_in
    class_class_curie: ClassVar[str] = "neon:rea_externalLabDataGas_in"
    class_name: ClassVar[str] = "rea_externalLabDataGas_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaExternalLabDataGasIn

    externaLabFileName: Optional[str] = None
    gasBelowDetectionQF: Optional[int] = None
    gasSampleFate: Optional[str] = None
    vialID: Optional[str] = None

@dataclass
class ReaBackgroundFieldSaltDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_backgroundFieldSaltData_in
    class_class_curie: ClassVar[str] = "neon:rea_backgroundFieldSaltData_in"
    class_name: ClassVar[str] = "rea_backgroundFieldSaltData_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaBackgroundFieldSaltDataIn

    saltBackgroundSampleClass: Optional[str] = None
    saltBackgroundSampleFate: Optional[str] = None
    saltBackgroundSampleCond: Optional[str] = None

@dataclass
class ReaBackgroundFieldCondDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_backgroundFieldCondData_in
    class_class_curie: ClassVar[str] = "neon:rea_backgroundFieldCondData_in"
    class_name: ClassVar[str] = "rea_backgroundFieldCondData_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaBackgroundFieldCondDataIn

    hoboSampleFate: Optional[str] = None
    hoboSampleCond: Optional[str] = None
    hoboSampleClass: Optional[str] = None

class ReaWidthFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_widthFieldData_in
    class_class_curie: ClassVar[str] = "neon:rea_widthFieldData_in"
    class_name: ClassVar[str] = "rea_widthFieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaWidthFieldDataIn


@dataclass
class ReaFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_fieldData_in
    class_class_curie: ClassVar[str] = "neon:rea_fieldData_in"
    class_name: ClassVar[str] = "rea_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.ReaFieldDataIn

    injectateSampleFate: Optional[str] = None
    injectateSampleCond: Optional[str] = None
    injectateSampleClass: Optional[str] = None

class ReaBackgroundFieldSaltDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_backgroundFieldSaltData_pub
    class_class_curie: ClassVar[str] = "neon:rea_backgroundFieldSaltData_pub"
    class_name: ClassVar[str] = "rea_backgroundFieldSaltData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaBackgroundFieldSaltDataPub


class ReaBackgroundFieldCondDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_backgroundFieldCondData_pub
    class_class_curie: ClassVar[str] = "neon:rea_backgroundFieldCondData_pub"
    class_name: ClassVar[str] = "rea_backgroundFieldCondData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaBackgroundFieldCondDataPub


@dataclass
class ReaFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:rea_fieldData_pub"
    class_name: ClassVar[str] = "rea_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaFieldDataPub

    tracerAnalysisType: Optional[str] = None
    iceCover: Optional[str] = None
    streambedLeafCover: Optional[str] = None

class ReaPlateauMeasurementFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_plateauMeasurementFieldData_pub
    class_class_curie: ClassVar[str] = "neon:rea_plateauMeasurementFieldData_pub"
    class_name: ClassVar[str] = "rea_plateauMeasurementFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaPlateauMeasurementFieldDataPub


@dataclass
class ReaPlateauSampleFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_plateauSampleFieldData_pub
    class_class_curie: ClassVar[str] = "neon:rea_plateauSampleFieldData_pub"
    class_name: ClassVar[str] = "rea_plateauSampleFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaPlateauSampleFieldDataPub

    gasSampleCode: Optional[str] = None

@dataclass
class ReaWidthFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_widthFieldData_pub
    class_class_curie: ClassVar[str] = "neon:rea_widthFieldData_pub"
    class_name: ClassVar[str] = "rea_widthFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaWidthFieldDataPub

    wettedWidth: Optional[float] = None
    widthMeasurementNumber: Optional[str] = None
    wettedWidthDataQF: Optional[str] = None
    measuringMethod: Optional[str] = None

@dataclass
class ReaExternalLabDataGasPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_externalLabDataGas_pub
    class_class_curie: ClassVar[str] = "neon:rea_externalLabDataGas_pub"
    class_name: ClassVar[str] = "rea_externalLabDataGas_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaExternalLabDataGasPub

    certifiedStandardAccuracy: Optional[float] = None
    externalLabGasDataQF: Optional[str] = None
    gasSampleID: Optional[str] = None
    gasTracerConcentration: Optional[float] = None
    gasTracerType: Optional[str] = None
    gasVolumeAnalyzed: Optional[float] = None
    labStandardPrecision: Optional[float] = None
    runDetectionLimit: Optional[float] = None
    gasCheckStandardPercentDev: Optional[float] = None
    gasCheckStandardQF: Optional[int] = None

class ReaExternalLabDataSaltPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_externalLabDataSalt_pub
    class_class_curie: ClassVar[str] = "neon:rea_externalLabDataSalt_pub"
    class_name: ClassVar[str] = "rea_externalLabDataSalt_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaExternalLabDataSaltPub


class ReaConductivityFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.rea_conductivityFieldData_pub
    class_class_curie: ClassVar[str] = "neon:rea_conductivityFieldData_pub"
    class_name: ClassVar[str] = "rea_conductivityFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ReaConductivityFieldDataPub


@dataclass
class SbdBackgroundFieldSaltDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sbd_backgroundFieldSaltData_pub
    class_class_curie: ClassVar[str] = "neon:sbd_backgroundFieldSaltData_pub"
    class_name: ClassVar[str] = "sbd_backgroundFieldSaltData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SbdBackgroundFieldSaltDataPub

    sampleCollected: Optional[str] = None
    backgroundFieldSaltDataQF: Optional[str] = None
    saltBackgroundSampleCode: Optional[str] = None
    saltBackgroundSampleID: Optional[str] = None

@dataclass
class SbdBackgroundFieldCondDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sbd_backgroundFieldCondData_pub
    class_class_curie: ClassVar[str] = "neon:sbd_backgroundFieldCondData_pub"
    class_name: ClassVar[str] = "sbd_backgroundFieldCondData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SbdBackgroundFieldCondDataPub

    backgroundFieldCondDataQF: Optional[str] = None
    stationToInjectionDistance: Optional[float] = None

@dataclass
class SbdFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sbd_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:sbd_fieldData_pub"
    class_name: ClassVar[str] = "sbd_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SbdFieldDataPub

    betweenLoggersDist: Optional[float] = None
    carboyVolume: Optional[float] = None
    constantRateTracerMass: Optional[float] = None
    dripEndTime: Optional[Union[str, XSDTime]] = None
    dripRateStart: Optional[float] = None
    dripRateEnd: Optional[float] = None
    dripStartTime: Optional[Union[str, XSDTime]] = None
    injectateSampleCode: Optional[str] = None
    injectateSampleCollected: Optional[str] = None
    injectateSampleID: Optional[str] = None
    injectionType: Optional[str] = None
    loggersAtSensorSets: Optional[str] = None
    slugPourTime: Optional[Union[str, XSDTime]] = None
    slugTracerMass: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.dripEndTime is not None and not isinstance(self.dripEndTime, XSDTime):
            self.dripEndTime = XSDTime(self.dripEndTime)
        if self.dripStartTime is not None and not isinstance(self.dripStartTime, XSDTime):
            self.dripStartTime = XSDTime(self.dripStartTime)
        if self.slugPourTime is not None and not isinstance(self.slugPourTime, XSDTime):
            self.slugPourTime = XSDTime(self.slugPourTime)
        super().__post_init__(**kwargs)


@dataclass
class SbdPlateauMeasurementFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sbd_plateauMeasurementFieldData_pub
    class_class_curie: ClassVar[str] = "neon:sbd_plateauMeasurementFieldData_pub"
    class_name: ClassVar[str] = "sbd_plateauMeasurementFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SbdPlateauMeasurementFieldDataPub

    plateauFieldDataQF: Optional[str] = None
    specificConductanceRep1: Optional[float] = None
    specificConductanceRep2: Optional[float] = None
    specificConductanceRep3: Optional[float] = None
    specificConductanceRep4: Optional[float] = None
    specificConductanceRep5: Optional[float] = None

@dataclass
class SbdPlateauSampleFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sbd_plateauSampleFieldData_pub
    class_class_curie: ClassVar[str] = "neon:sbd_plateauSampleFieldData_pub"
    class_name: ClassVar[str] = "sbd_plateauSampleFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SbdPlateauSampleFieldDataPub

    replicateNumber: Optional[int] = None
    plateauSampleFieldDataQF: Optional[str] = None
    plateauCollectTime: Optional[Union[str, XSDTime]] = None
    saltTracerSampleCode: Optional[str] = None
    saltTracerSampleID: Optional[str] = None
    syringeID: Optional[str] = None
    syringeCode: Optional[str] = None
    incompleteExperimentQF: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.plateauCollectTime is not None and not isinstance(self.plateauCollectTime, XSDTime):
            self.plateauCollectTime = XSDTime(self.plateauCollectTime)
        super().__post_init__(**kwargs)


@dataclass
class SbdExternalLabDataSaltPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sbd_externalLabDataSalt_pub
    class_class_curie: ClassVar[str] = "neon:sbd_externalLabDataSalt_pub"
    class_name: ClassVar[str] = "sbd_externalLabDataSalt_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SbdExternalLabDataSaltPub

    externalLabSaltDataQF: Optional[str] = None
    finalConcentration: Optional[float] = None
    saltBelowDetectionQF: Optional[int] = None
    saltSampleID: Optional[str] = None
    saltCheckStandardPercentDev: Optional[float] = None
    saltCheckStandardQF: Optional[int] = None

@dataclass
class SbdConductivityFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sbd_conductivityFieldData_pub
    class_class_curie: ClassVar[str] = "neon:sbd_conductivityFieldData_pub"
    class_name: ClassVar[str] = "sbd_conductivityFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SbdConductivityFieldDataPub

    fullRangeSpCondLinear: Optional[float] = None
    fullRangeSpCondNonlinear: Optional[float] = None
    lowRangeSpCondLinear: Optional[float] = None
    lowRangeSpCondNonlinear: Optional[float] = None
    recorduid: Optional[str] = None
    dateTimeLogger: Optional[Union[str, XSDTime]] = None
    fullRangeHobo: Optional[float] = None
    hoboSampleCode: Optional[str] = None
    hoboSampleID: Optional[str] = None
    loggerDataQF: Optional[str] = None
    lowRangeHobo: Optional[float] = None
    measurementNumber: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.dateTimeLogger is not None and not isinstance(self.dateTimeLogger, XSDTime):
            self.dateTimeLogger = XSDTime(self.dateTimeLogger)
        super().__post_init__(**kwargs)


class GagFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gag_fieldData_in
    class_class_curie: ClassVar[str] = "neon:gag_fieldData_in"
    class_name: ClassVar[str] = "gag_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.GagFieldDataIn


@dataclass
class GagFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gag_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:gag_fieldData_pub"
    class_name: ClassVar[str] = "gag_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GagFieldDataPub

    endStageHeight: Optional[float] = None
    precipDescrip: Optional[str] = None
    previousRain: Optional[str] = None
    waterColorDescrip: Optional[str] = None
    riparianPhenologyDescrip: Optional[str] = None
    icePresent: Optional[str] = None
    beaufortScaleWind: Optional[str] = None
    algaePresence: Optional[str] = None
    leafLitterPresence: Optional[str] = None
    macrophytePresence: Optional[str] = None
    nominalCloudCover: Optional[str] = None
    oilsPresence: Optional[str] = None
    pollenPresence: Optional[str] = None
    trashPresent: Optional[str] = None
    waterClarityDescrip: Optional[str] = None
    woodyDebrisPresence: Optional[str] = None
    dscTempHydroCond: Optional[str] = None
    dscTempHydroCondLoc: Optional[str] = None
    gaugeTempHydroCond: Optional[str] = None
    gaugeTempHydroCondLoc: Optional[str] = None

@dataclass
class ScsShipmentCreationIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.scs_shipmentCreation_in
    class_class_curie: ClassVar[str] = "neon:scs_shipmentCreation_in"
    class_name: ClassVar[str] = "scs_shipmentCreation_in"
    class_model_uri: ClassVar[URIRef] = NEON.ScsShipmentCreationIn

    sampleVolume: Optional[float] = None
    shipDate: Optional[Union[str, XSDTime]] = None
    numVialsSampleID: Optional[str] = None
    senderID: Optional[str] = None
    containerID: Optional[str] = None
    containerMass: Optional[float] = None
    destinationFacility: Optional[str] = None
    filterVolume: Optional[float] = None
    holdingTime: Optional[Union[str, XSDTime]] = None
    quarantineStatus: Optional[str] = None
    sentTo: Optional[str] = None
    shipmentMethod: Optional[str] = None
    shipmentService: Optional[str] = None
    shippedFrom: Optional[str] = None
    trackingNumber: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.shipDate is not None and not isinstance(self.shipDate, XSDTime):
            self.shipDate = XSDTime(self.shipDate)
        if self.holdingTime is not None and not isinstance(self.holdingTime, XSDTime):
            self.holdingTime = XSDTime(self.holdingTime)
        super().__post_init__(**kwargs)


@dataclass
class ScsShipmentVerificationIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.scs_shipmentVerification_in
    class_class_curie: ClassVar[str] = "neon:scs_shipmentVerification_in"
    class_name: ClassVar[str] = "scs_shipmentVerification_in"
    class_model_uri: ClassVar[URIRef] = NEON.ScsShipmentVerificationIn

    shipmentReceivedDate: Optional[Union[str, XSDTime]] = None
    shipmentID: Optional[str] = None
    shipmentCondition: Optional[str] = None
    acceptedForAnalysis: Optional[str] = None
    sampleReceived: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.shipmentReceivedDate is not None and not isinstance(self.shipmentReceivedDate, XSDTime):
            self.shipmentReceivedDate = XSDTime(self.shipmentReceivedDate)
        super().__post_init__(**kwargs)


@dataclass
class ScsArchivedataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.scs_archivedata_in
    class_class_curie: ClassVar[str] = "neon:scs_archivedata_in"
    class_name: ClassVar[str] = "scs_archivedata_in"
    class_model_uri: ClassVar[URIRef] = NEON.ScsArchivedataIn

    archiveMedium: Optional[str] = None
    archiveGuid: Optional[str] = None
    archiveSampleClass: Optional[str] = None
    storageTemperature: Optional[str] = None

@dataclass
class AmcFieldCellCountsIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.amc_fieldCellCounts_in
    class_class_curie: ClassVar[str] = "neon:amc_fieldCellCounts_in"
    class_name: ClassVar[str] = "amc_fieldCellCounts_in"
    class_model_uri: ClassVar[URIRef] = NEON.AmcFieldCellCountsIn

    parentSampleFate: Optional[str] = None
    archiveFilteredSampleVolume: Optional[str] = None
    archiveSampleCode: Optional[str] = None
    archiveSampleCond: Optional[str] = None
    cellCountLabSampleMedium: Optional[str] = None
    cellCountPreservantVolume: Optional[float] = None
    cellCountSampleCond: Optional[str] = None
    cellCountSampleVolume: Optional[float] = None
    geneticFilteredSampleVolume: Optional[str] = None
    geneticLabSampleMedium: Optional[str] = None
    geneticSampleCond: Optional[str] = None
    archiveLabSampleMedium: Optional[str] = None

@dataclass
class AmcCellCountsIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.amc_cellCounts_in
    class_class_curie: ClassVar[str] = "neon:amc_cellCounts_in"
    class_name: ClassVar[str] = "amc_cellCounts_in"
    class_model_uri: ClassVar[URIRef] = NEON.AmcCellCountsIn

    cellCountSampleID: Optional[str] = None
    cellCountSampleFate: Optional[str] = None
    cellCountSampleCode: Optional[str] = None
    analysisMagnification: Optional[str] = None
    analysisVolume: Optional[float] = None
    batchReferenceCount: Optional[str] = None
    enumerationDifference: Optional[float] = None
    numberOfFieldsAnalyzed: Optional[str] = None
    rawMicrobialAbundance: Optional[str] = None
    totalCellCount: Optional[str] = None
    dilutionFactor: Optional[float] = None
    qcAnalyzedBy: Optional[str] = None

@dataclass
class AmcCellCountLabSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.amc_cellCountLabSummary_in
    class_class_curie: ClassVar[str] = "neon:amc_cellCountLabSummary_in"
    class_name: ClassVar[str] = "amc_cellCountLabSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.AmcCellCountLabSummaryIn

    enteredBy: Optional[str] = None
    cellCountMethod: Optional[str] = None
    countStandardDeviation: Optional[float] = None
    longTermEnumerationDifference: Optional[float] = None
    referenceImageCount: Optional[str] = None
    referenceImageID: Optional[str] = None
    enumerationDifferenceMax: Optional[float] = None
    enumerationDifferenceMean: Optional[float] = None
    enumerationDifferenceMin: Optional[float] = None

@dataclass
class LtrFielddataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_fielddata_in
    class_class_curie: ClassVar[str] = "neon:ltr_fielddata_in"
    class_name: ClassVar[str] = "ltr_fielddata_in"
    class_model_uri: ClassVar[URIRef] = NEON.LtrFielddataIn

    boutNumber: Optional[str] = None
    yearBoutBegan: Optional[int] = None

@dataclass
class LtrMassdataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_massdata_in
    class_class_curie: ClassVar[str] = "neon:ltr_massdata_in"
    class_name: ClassVar[str] = "ltr_massdata_in"
    class_model_uri: ClassVar[URIRef] = NEON.LtrMassdataIn

    biogeoSample: Optional[str] = None
    fieldSampleFate: Optional[str] = None
    massSampleFate: Optional[str] = None

class LtrPertrapIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_pertrap_in
    class_class_curie: ClassVar[str] = "neon:ltr_pertrap_in"
    class_name: ClassVar[str] = "ltr_pertrap_in"
    class_model_uri: ClassVar[URIRef] = NEON.LtrPertrapIn


@dataclass
class LtrChemistrySubsamplingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_chemistrySubsampling_in
    class_class_curie: ClassVar[str] = "neon:ltr_chemistrySubsampling_in"
    class_name: ClassVar[str] = "ltr_chemistrySubsampling_in"
    class_model_uri: ClassVar[URIRef] = NEON.LtrChemistrySubsamplingIn

    cnSampleFate: Optional[str] = None
    archiveSampleFate: Optional[str] = None
    massSampleFateList: Optional[str] = None
    massSampleMixtureFate: Optional[str] = None

@dataclass
class LtrFielddataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_fielddata_pub
    class_class_curie: ClassVar[str] = "neon:ltr_fielddata_pub"
    class_name: ClassVar[str] = "ltr_fielddata_pub"
    class_model_uri: ClassVar[URIRef] = NEON.LtrFielddataPub

    trapCondition: Optional[str] = None

@dataclass
class LtrMassdataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_massdata_pub
    class_class_curie: ClassVar[str] = "neon:ltr_massdata_pub"
    class_name: ClassVar[str] = "ltr_massdata_pub"
    class_model_uri: ClassVar[URIRef] = NEON.LtrMassdataPub

    weighDate: Optional[Union[str, XSDTime]] = None
    qaDryMass: Optional[str] = None
    ovenStartDate: Optional[Union[str, XSDTime]] = None
    ovenEndDate: Optional[Union[str, XSDTime]] = None
    fieldSampleBarcode: Optional[str] = None
    fieldSampleID: Optional[str] = None
    functionalGroup: Optional[str] = None
    massSampleBarcode: Optional[str] = None
    massSampleID: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.weighDate is not None and not isinstance(self.weighDate, XSDTime):
            self.weighDate = XSDTime(self.weighDate)
        if self.ovenStartDate is not None and not isinstance(self.ovenStartDate, XSDTime):
            self.ovenStartDate = XSDTime(self.ovenStartDate)
        if self.ovenEndDate is not None and not isinstance(self.ovenEndDate, XSDTime):
            self.ovenEndDate = XSDTime(self.ovenEndDate)
        super().__post_init__(**kwargs)


@dataclass
class LtrPertrapPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_pertrap_pub
    class_class_curie: ClassVar[str] = "neon:ltr_pertrap_pub"
    class_name: ClassVar[str] = "ltr_pertrap_pub"
    class_model_uri: ClassVar[URIRef] = NEON.LtrPertrapPub

    trapID: Optional[str] = None
    trapPlacement: Optional[str] = None
    trapSize: Optional[float] = None

@dataclass
class LtrChemistrySubsamplingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_chemistrySubsampling_pub
    class_class_curie: ClassVar[str] = "neon:ltr_chemistrySubsampling_pub"
    class_name: ClassVar[str] = "ltr_chemistrySubsampling_pub"
    class_model_uri: ClassVar[URIRef] = NEON.LtrChemistrySubsamplingPub

    cnSampleCode: Optional[str] = None
    cnSampleID: Optional[str] = None
    archiveSampleBarcode: Optional[str] = None
    archiveSampleID: Optional[str] = None
    massSampleBarcodeList: Optional[str] = None
    massSampleIDList: Optional[str] = None
    massSampleMixtureBarcode: Optional[str] = None
    massSampleMixtureID: Optional[str] = None
    toxicodendronPossible: Optional[str] = None

@dataclass
class InvDnaStandardIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_dnaStandard_in
    class_class_curie: ClassVar[str] = "neon:inv_dnaStandard_in"
    class_name: ClassVar[str] = "inv_dnaStandard_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvDnaStandardIn

    createdDate: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.createdDate is not None and not isinstance(self.createdDate, XSDTime):
            self.createdDate = XSDTime(self.createdDate)
        super().__post_init__(**kwargs)


@dataclass
class InvDnaStandardTaxonIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_dnaStandardTaxon_in
    class_class_curie: ClassVar[str] = "neon:inv_dnaStandardTaxon_in"
    class_name: ClassVar[str] = "inv_dnaStandardTaxon_in"
    class_model_uri: ClassVar[URIRef] = NEON.InvDnaStandardTaxonIn

    dnaStandardSampleFate: Optional[str] = None

class SpcBiogeochemPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_biogeochem_pub
    class_class_curie: ClassVar[str] = "neon:spc_biogeochem_pub"
    class_name: ClassVar[str] = "spc_biogeochem_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SpcBiogeochemPub


class SpcExternalLabSummaryPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_externalLabSummary_pub
    class_class_curie: ClassVar[str] = "neon:spc_externalLabSummary_pub"
    class_name: ClassVar[str] = "spc_externalLabSummary_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SpcExternalLabSummaryPub


@dataclass
class SpcPerplotIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_perplot_in
    class_class_curie: ClassVar[str] = "neon:spc_perplot_in"
    class_name: ClassVar[str] = "spc_perplot_in"
    class_model_uri: ClassVar[URIRef] = NEON.SpcPerplotIn

    sampleDistanceDeci: Optional[float] = None

@dataclass
class SpcPerbulksampleIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_perbulksample_in
    class_class_curie: ClassVar[str] = "neon:spc_perbulksample_in"
    class_name: ClassVar[str] = "spc_perbulksample_in"
    class_model_uri: ClassVar[URIRef] = NEON.SpcPerbulksampleIn

    bulkDensNrcsFate: Optional[str] = None
    bulkDensSampleID: Optional[str] = None

@dataclass
class SpcPerbiogeosampleIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_perbiogeosample_in
    class_class_curie: ClassVar[str] = "neon:spc_perbiogeosample_in"
    class_name: ClassVar[str] = "spc_perbiogeosample_in"
    class_model_uri: ClassVar[URIRef] = NEON.SpcPerbiogeosampleIn

    labProjID: Optional[str] = None
    biogeoTotWeight: Optional[float] = None
    biogeoTotWeight2To5: Optional[float] = None
    biogeoTotWeight5To20: Optional[float] = None
    biogeoTotWeight20To75: Optional[float] = None
    gypsum: Optional[float] = None
    caco3: Optional[float] = None
    caNh4d: Optional[float] = None
    kNh4d: Optional[float] = None
    mgNh4d: Optional[float] = None
    naNh4d: Optional[float] = None
    cecdNh4: Optional[float] = None
    alSatCecd33: Optional[float] = None
    baseSumCecd10: Optional[float] = None
    bsesatCecd10: Optional[float] = None
    ececCecd33: Optional[float] = None
    alKcl: Optional[float] = None
    feKcl: Optional[float] = None
    mnKcl: Optional[float] = None
    phCacl2: Optional[float] = None
    phH2o: Optional[float] = None
    ec12pre: Optional[float] = None
    bSatx: Optional[float] = None
    brSatx: Optional[float] = None
    caSatx: Optional[float] = None
    clSatx: Optional[float] = None
    co3Satx: Optional[float] = None
    ecSatp: Optional[float] = None
    flSatx: Optional[float] = None
    hco3Sx: Optional[float] = None
    kSatx: Optional[float] = None
    mgSatx: Optional[float] = None
    naSatx: Optional[float] = None
    no2Satx: Optional[float] = None
    no3Satx: Optional[float] = None
    pSatx: Optional[float] = None
    phSp: Optional[float] = None
    resist: Optional[float] = None
    so4Satx: Optional[float] = None
    cTot: Optional[float] = None
    nTot: Optional[float] = None
    sTot: Optional[float] = None
    eoc: Optional[float] = None
    analysisStartDate: Optional[Union[str, XSDTime]] = None
    archiveFate: Optional[str] = None
    caco3Conc: Optional[float] = None
    carbonTot: Optional[float] = None
    estimatedOC: Optional[float] = None
    gypsumConc: Optional[float] = None
    nitrogenTot: Optional[float] = None
    sulfurTot: Optional[float] = None
    waterSatx: Optional[float] = None
    biogeoNrcsFate: Optional[str] = None
    sandVeryCoarseContent: Optional[float] = None
    acidity: Optional[float] = None
    acidOxalateMethod: Optional[str] = None
    acidOxalateMethodPub: Optional[str] = None
    acidOxalateProcessedDate: Optional[Union[str, XSDTime]] = None
    airDryOvenDryMethod: Optional[str] = None
    airDryOvenDryMethodPub: Optional[str] = None
    airDryOvenDryProcessedDate: Optional[Union[str, XSDTime]] = None
    airDryOvenDryRatio: Optional[float] = None
    alCitDithionate: Optional[float] = None
    alOxalate: Optional[float] = None
    archiveCode: Optional[str] = None
    archiveRemarks: Optional[str] = None
    Bray1PExtractable: Optional[float] = None
    Bray1PMethod: Optional[str] = None
    Bray1PMethodPub: Optional[str] = None
    Bray1PProcessedDate: Optional[Union[str, XSDTime]] = None
    caco3Method: Optional[str] = None
    caco3MethodPub: Optional[str] = None
    caco3ProcessedDate: Optional[Union[str, XSDTime]] = None
    cecMethod: Optional[str] = None
    cecMethodPub: Optional[str] = None
    cecProcessedDate: Optional[Union[str, XSDTime]] = None
    citrateDithioMethod: Optional[str] = None
    citrateDithioMethodPub: Optional[str] = None
    citrateDithioProcessedDate: Optional[Union[str, XSDTime]] = None
    ctonRatio: Optional[float] = None
    ecMethod: Optional[str] = None
    ecMethodPub: Optional[str] = None
    ecProcessedDate: Optional[Union[str, XSDTime]] = None
    extractAcidityMethod: Optional[str] = None
    extractAcidityMethodPub: Optional[str] = None
    extractAcidityProcessedDate: Optional[Union[str, XSDTime]] = None
    feCitDithionate: Optional[float] = None
    feOxalate: Optional[float] = None
    gypsumMethod: Optional[str] = None
    gypsumMethodPub: Optional[str] = None
    gypsumProcessedDate: Optional[Union[str, XSDTime]] = None
    h2oReten15BarMethod: Optional[str] = None
    h2oReten15BarMethodPub: Optional[str] = None
    h2oReten15BarProcessedDate: Optional[Union[str, XSDTime]] = None
    KClExtractMethod: Optional[str] = None
    KClExtractMethodPub: Optional[str] = None
    KClExtractProcessedDate: Optional[Union[str, XSDTime]] = None
    MehlichIIIPMethod: Optional[str] = None
    MehlichIIIPMethodPub: Optional[str] = None
    MehlichIIIPProcessedDate: Optional[Union[str, XSDTime]] = None
    MehlichIIITotP: Optional[float] = None
    mnCitDithionate: Optional[float] = None
    mnOxalate: Optional[float] = None
    OlsenPExtractable: Optional[float] = None
    OlsenPMethod: Optional[str] = None
    OlsenPMethodPub: Optional[str] = None
    OlsenPProcessedDate: Optional[Union[str, XSDTime]] = None
    optDensityOxalate: Optional[float] = None
    pOxalate: Optional[float] = None
    processingRemarks: Optional[str] = None
    routinepHProcessedDate: Optional[Union[str, XSDTime]] = None
    routinepHMethod: Optional[str] = None
    routinepHMethodPub: Optional[str] = None
    satPasteMethod: Optional[str] = None
    satPasteMethodPub: Optional[str] = None
    satPasteProcessedDate: Optional[Union[str, XSDTime]] = None
    siliconCitrateDithionate: Optional[float] = None
    siOxalate: Optional[float] = None
    TotalNCSMethod: Optional[str] = None
    TotalNCSMethodPub: Optional[str] = None
    TotalNCSProcessedDate: Optional[Union[str, XSDTime]] = None
    waterRetention15Bar: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.analysisStartDate is not None and not isinstance(self.analysisStartDate, XSDTime):
            self.analysisStartDate = XSDTime(self.analysisStartDate)
        if self.acidOxalateProcessedDate is not None and not isinstance(self.acidOxalateProcessedDate, XSDTime):
            self.acidOxalateProcessedDate = XSDTime(self.acidOxalateProcessedDate)
        if self.airDryOvenDryProcessedDate is not None and not isinstance(self.airDryOvenDryProcessedDate, XSDTime):
            self.airDryOvenDryProcessedDate = XSDTime(self.airDryOvenDryProcessedDate)
        if self.Bray1PProcessedDate is not None and not isinstance(self.Bray1PProcessedDate, XSDTime):
            self.Bray1PProcessedDate = XSDTime(self.Bray1PProcessedDate)
        if self.caco3ProcessedDate is not None and not isinstance(self.caco3ProcessedDate, XSDTime):
            self.caco3ProcessedDate = XSDTime(self.caco3ProcessedDate)
        if self.cecProcessedDate is not None and not isinstance(self.cecProcessedDate, XSDTime):
            self.cecProcessedDate = XSDTime(self.cecProcessedDate)
        if self.citrateDithioProcessedDate is not None and not isinstance(self.citrateDithioProcessedDate, XSDTime):
            self.citrateDithioProcessedDate = XSDTime(self.citrateDithioProcessedDate)
        if self.ecProcessedDate is not None and not isinstance(self.ecProcessedDate, XSDTime):
            self.ecProcessedDate = XSDTime(self.ecProcessedDate)
        if self.extractAcidityProcessedDate is not None and not isinstance(self.extractAcidityProcessedDate, XSDTime):
            self.extractAcidityProcessedDate = XSDTime(self.extractAcidityProcessedDate)
        if self.gypsumProcessedDate is not None and not isinstance(self.gypsumProcessedDate, XSDTime):
            self.gypsumProcessedDate = XSDTime(self.gypsumProcessedDate)
        if self.h2oReten15BarProcessedDate is not None and not isinstance(self.h2oReten15BarProcessedDate, XSDTime):
            self.h2oReten15BarProcessedDate = XSDTime(self.h2oReten15BarProcessedDate)
        if self.KClExtractProcessedDate is not None and not isinstance(self.KClExtractProcessedDate, XSDTime):
            self.KClExtractProcessedDate = XSDTime(self.KClExtractProcessedDate)
        if self.MehlichIIIPProcessedDate is not None and not isinstance(self.MehlichIIIPProcessedDate, XSDTime):
            self.MehlichIIIPProcessedDate = XSDTime(self.MehlichIIIPProcessedDate)
        if self.OlsenPProcessedDate is not None and not isinstance(self.OlsenPProcessedDate, XSDTime):
            self.OlsenPProcessedDate = XSDTime(self.OlsenPProcessedDate)
        if self.routinepHProcessedDate is not None and not isinstance(self.routinepHProcessedDate, XSDTime):
            self.routinepHProcessedDate = XSDTime(self.routinepHProcessedDate)
        if self.satPasteProcessedDate is not None and not isinstance(self.satPasteProcessedDate, XSDTime):
            self.satPasteProcessedDate = XSDTime(self.satPasteProcessedDate)
        if self.TotalNCSProcessedDate is not None and not isinstance(self.TotalNCSProcessedDate, XSDTime):
            self.TotalNCSProcessedDate = XSDTime(self.TotalNCSProcessedDate)
        super().__post_init__(**kwargs)


@dataclass
class SpcExternalLabSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_externalLabSummary_in
    class_class_curie: ClassVar[str] = "neon:spc_externalLabSummary_in"
    class_name: ClassVar[str] = "spc_externalLabSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.SpcExternalLabSummaryIn

    methodDetectionLimit: Optional[float] = None
    analyteAccuracy: Optional[float] = None
    methodPub: Optional[str] = None

@dataclass
class SpcPerhorizonIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_perhorizon_in
    class_class_curie: ClassVar[str] = "neon:spc_perhorizon_in"
    class_name: ClassVar[str] = "spc_perhorizon_in"
    class_model_uri: ClassVar[URIRef] = NEON.SpcPerhorizonIn

    horizonTempName: Optional[str] = None
    pitFate: Optional[str] = None
    horizonFate: Optional[str] = None

@dataclass
class SpcPerplotPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_perplot_pub
    class_class_curie: ClassVar[str] = "neon:spc_perplot_pub"
    class_name: ClassVar[str] = "spc_perplot_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SpcPerplotPub

    pitDepth: Optional[float] = None
    recordedByA: Optional[str] = None
    soilProfileDescriberA: Optional[str] = None
    soilProfileDescriberInst: Optional[str] = None
    soilSeries: Optional[str] = None
    soilFamily: Optional[str] = None
    soilSubgroup: Optional[str] = None
    soilGreatGroup: Optional[str] = None
    soilSuborder: Optional[str] = None
    soilOrder: Optional[str] = None
    referenceCorner: Optional[str] = None
    sampleBearing: Optional[float] = None
    sampleDistance: Optional[float] = None
    sampleRelativeLocation: Optional[str] = None
    soilSamplingMethod: Optional[str] = None

@dataclass
class SpcPerhorizonPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_perhorizon_pub
    class_class_curie: ClassVar[str] = "neon:spc_perhorizon_pub"
    class_name: ClassVar[str] = "spc_perhorizon_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SpcPerhorizonPub

    pitID: Optional[str] = None
    horizonTopDepth: Optional[float] = None
    horizonBottomDepth: Optional[float] = None
    pitCode: Optional[str] = None

@dataclass
class SpcBulkdensityPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_bulkdensity_pub
    class_class_curie: ClassVar[str] = "neon:spc_bulkdensity_pub"
    class_name: ClassVar[str] = "spc_bulkdensity_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SpcBulkdensityPub

    bulkDensIDnrcs: Optional[str] = None
    bulkDensSampleType: Optional[str] = None
    bulkDensCenterDepth: Optional[float] = None
    bulkDensDiameter: Optional[float] = None
    bulkDensLength: Optional[float] = None
    bulkDensVolume: Optional[float] = None
    bulkDensTopDepth: Optional[float] = None
    bulkDensBottomDepth: Optional[float] = None
    bulkDensWetWeight: Optional[float] = None
    bulkDensDryWeight: Optional[float] = None
    bulkDensCoarseFragWeight: Optional[float] = None
    bulkDensCoarseFragDens: Optional[float] = None
    bulkDensCode: Optional[str] = None
    bulkDensFieldMoist: Optional[float] = None
    bulkDensMethod: Optional[str] = None
    bulkDensMethodPub: Optional[str] = None
    bulkDensOvenDry: Optional[float] = None
    bulkDensProcessedDate: Optional[Union[str, XSDTime]] = None
    bulkDensThirdBar: Optional[float] = None
    bulkDensWidth: Optional[float] = None
    fieldWaterContent: Optional[float] = None
    waterRetentionThirdBar: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.bulkDensProcessedDate is not None and not isinstance(self.bulkDensProcessedDate, XSDTime):
            self.bulkDensProcessedDate = XSDTime(self.bulkDensProcessedDate)
        super().__post_init__(**kwargs)


@dataclass
class SpcParticlesizePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.spc_particlesize_pub
    class_class_curie: ClassVar[str] = "neon:spc_particlesize_pub"
    class_name: ClassVar[str] = "spc_particlesize_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SpcParticlesizePub

    nrcsDescriptionID: Optional[str] = None
    horizonID: Optional[str] = None
    horizonName: Optional[str] = None
    biogeoIDnrcs: Optional[str] = None
    biogeoSampleType: Optional[str] = None
    biogeoTopDepth: Optional[float] = None
    biogeoBottomDepth: Optional[float] = None
    biogeoCenterDepth: Optional[float] = None
    coarseFrag2To5: Optional[float] = None
    coarseFrag5To20: Optional[float] = None
    biogeoCode: Optional[str] = None
    carbonateClay: Optional[float] = None
    clayFineContent: Optional[float] = None
    clayTotal: Optional[float] = None
    horizonCode: Optional[str] = None
    sandCoarseContent: Optional[float] = None
    sandFineContent: Optional[float] = None
    sandMediumContent: Optional[float] = None
    sandTotal: Optional[float] = None
    sandVeryFineContent: Optional[float] = None
    siltCoarseContent: Optional[float] = None
    siltFineContent: Optional[float] = None
    siltTotal: Optional[float] = None
    particleSizeDistProcessedDate: Optional[Union[str, XSDTime]] = None
    particleSizeDistMethod: Optional[str] = None
    particleSizeDistMethodPub: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.particleSizeDistProcessedDate is not None and not isinstance(self.particleSizeDistProcessedDate, XSDTime):
            self.particleSizeDistProcessedDate = XSDTime(self.particleSizeDistProcessedDate)
        super().__post_init__(**kwargs)


@dataclass
class MosBOLDvoucherInfoPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_BOLDvoucherInfo_pub
    class_class_curie: ClassVar[str] = "neon:mos_BOLDvoucherInfo_pub"
    class_name: ClassVar[str] = "mos_BOLDvoucherInfo_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosBOLDvoucherInfoPub

    institutionStoring: Optional[str] = None
    museumID: Optional[str] = None

@dataclass
class MosBOLDtaxonomyPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_BOLDtaxonomy_pub
    class_class_curie: ClassVar[str] = "neon:mos_BOLDtaxonomy_pub"
    class_name: ClassVar[str] = "mos_BOLDtaxonomy_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosBOLDtaxonomyPub

    identificationMethod: Optional[str] = None
    species: Optional[str] = None
    taxonomyNotes: Optional[str] = None

@dataclass
class MosBOLDspecimenDetailsPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_BOLDspecimenDetails_pub
    class_class_curie: ClassVar[str] = "neon:mos_BOLDspecimenDetails_pub"
    class_name: ClassVar[str] = "mos_BOLDspecimenDetails_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosBOLDspecimenDetailsPub

    extraInfo: Optional[str] = None
    notes: Optional[str] = None
    tissueDescriptor: Optional[str] = None

@dataclass
class MosBOLDcollectionDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_BOLDcollectionData_pub
    class_class_curie: ClassVar[str] = "neon:mos_BOLDcollectionData_pub"
    class_name: ClassVar[str] = "mos_BOLDcollectionData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MosBOLDcollectionDataPub

    samplingProtocol: Optional[str] = None
    collectionDateAccuracy: Optional[str] = None
    collectionEventID: Optional[str] = None
    collectionNotes: Optional[str] = None
    collectors: Optional[str] = None
    coordinateAccuracy: Optional[float] = None
    countryOcean: Optional[str] = None
    elevationPrecision: Optional[float] = None
    exactSite: Optional[str] = None
    gpsSource: Optional[str] = None
    habitat: Optional[str] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    region: Optional[str] = None
    sector: Optional[str] = None
    siteCode: Optional[str] = None
    stateProvince: Optional[str] = None

class GeoPebbleFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_pebbleFieldData_in
    class_class_curie: ClassVar[str] = "neon:geo_pebbleFieldData_in"
    class_name: ClassVar[str] = "geo_pebbleFieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.GeoPebbleFieldDataIn


class SimEventDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sim_eventData_in
    class_class_curie: ClassVar[str] = "neon:sim_eventData_in"
    class_name: ClassVar[str] = "sim_eventData_in"
    class_model_uri: ClassVar[URIRef] = NEON.SimEventDataIn


@dataclass
class SimEventDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.sim_eventData_pub
    class_class_curie: ClassVar[str] = "neon:sim_eventData_pub"
    class_name: ClassVar[str] = "sim_eventData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.SimEventDataPub

    biomassRemoval: Optional[str] = None
    eventType: Optional[str] = None
    fireSeverity: Optional[str] = None
    maxQuantity: Optional[float] = None
    maxStartDate: Optional[Union[str, XSDTime]] = None
    methodTypeChoice: Optional[str] = None
    minEndDate: Optional[Union[str, XSDTime]] = None
    minQuantity: Optional[float] = None
    name: Optional[str] = None
    otherScientificName: Optional[str] = None
    quantityUnit: Optional[str] = None
    reporterType: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.maxStartDate is not None and not isinstance(self.maxStartDate, XSDTime):
            self.maxStartDate = XSDTime(self.maxStartDate)
        if self.minEndDate is not None and not isinstance(self.minEndDate, XSDTime):
            self.minEndDate = XSDTime(self.minEndDate)
        super().__post_init__(**kwargs)


@dataclass
class BetBarcodingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_barcoding_in
    class_class_curie: ClassVar[str] = "neon:bet_barcoding_in"
    class_name: ClassVar[str] = "bet_barcoding_in"
    class_model_uri: ClassVar[URIRef] = NEON.BetBarcodingIn

    reproductiveCondition: Optional[str] = None
    samplingMethod: Optional[str] = None
    collectionCode: Optional[str] = None

class BetExpertTaxonomistQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.bet_expertTaxonomistQA_in
    class_class_curie: ClassVar[str] = "neon:bet_expertTaxonomistQA_in"
    class_name: ClassVar[str] = "bet_expertTaxonomistQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.BetExpertTaxonomistQAIn


@dataclass
class DpmExternalLabIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dpm_externalLab_in
    class_class_curie: ClassVar[str] = "neon:dpm_externalLab_in"
    class_name: ClassVar[str] = "dpm_externalLab_in"
    class_model_uri: ClassVar[URIRef] = NEON.DpmExternalLabIn

    filterLotID: Optional[str] = None
    filterWeighDate: Optional[Union[str, XSDTime]] = None
    filterWeightDelta: Optional[float] = None
    filterWeightPostDeploy: Optional[float] = None
    filterWeightPreDeploy: Optional[float] = None
    labAverageHumidity: Optional[float] = None
    labFilterCondition: Optional[str] = None
    labFilterConditionRemarks: Optional[str] = None
    labFilterDamage: Optional[str] = None
    labFilterDamageRemarks: Optional[str] = None
    labQARemarks: Optional[str] = None
    labRelativeHumidity: Optional[float] = None
    labTemp: Optional[float] = None
    archiveStartDate: Optional[Union[str, XSDTime]] = None
    archiveLocatorID: Optional[str] = None
    filterManufactureName: Optional[str] = None
    filterProductModel: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.filterWeighDate is not None and not isinstance(self.filterWeighDate, XSDTime):
            self.filterWeighDate = XSDTime(self.filterWeighDate)
        if self.archiveStartDate is not None and not isinstance(self.archiveStartDate, XSDTime):
            self.archiveStartDate = XSDTime(self.archiveStartDate)
        super().__post_init__(**kwargs)


@dataclass
class DpmFieldDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dpm_fieldData_in
    class_class_curie: ClassVar[str] = "neon:dpm_fieldData_in"
    class_name: ClassVar[str] = "dpm_fieldData_in"
    class_model_uri: ClassVar[URIRef] = NEON.DpmFieldDataIn

    aSetBy: Optional[str] = None
    bSetBy: Optional[str] = None
    fieldFilterCondition: Optional[str] = None
    fieldFilterConditionRemarks: Optional[str] = None
    fieldFilterDamage: Optional[str] = None
    fieldFilterDamageRemarks: Optional[str] = None
    filterID: Optional[str] = None
    filterWet: Optional[float] = None
    equipCondition: Optional[str] = None
    equipConditionDesc: Optional[str] = None
    filterCode: Optional[str] = None

@dataclass
class FshInvertBycatchIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsh_invertBycatch_in
    class_class_curie: ClassVar[str] = "neon:fsh_invertBycatch_in"
    class_name: ClassVar[str] = "fsh_invertBycatch_in"
    class_model_uri: ClassVar[URIRef] = NEON.FshInvertBycatchIn

    bulkMortality: Optional[str] = None
    passEndTime: Optional[Union[str, XSDTime]] = None
    passNumber: Optional[str] = None
    passStartTime: Optional[Union[str, XSDTime]] = None
    bulkInvertCount: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.passEndTime is not None and not isinstance(self.passEndTime, XSDTime):
            self.passEndTime = XSDTime(self.passEndTime)
        if self.passStartTime is not None and not isinstance(self.passStartTime, XSDTime):
            self.passStartTime = XSDTime(self.passStartTime)
        super().__post_init__(**kwargs)


class FspBoutMetadataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsp_boutMetadata_in
    class_class_curie: ClassVar[str] = "neon:fsp_boutMetadata_in"
    class_name: ClassVar[str] = "fsp_boutMetadata_in"
    class_model_uri: ClassVar[URIRef] = NEON.FspBoutMetadataIn


@dataclass
class FspSampleMetadataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsp_sampleMetadata_in
    class_class_curie: ClassVar[str] = "neon:fsp_sampleMetadata_in"
    class_name: ClassVar[str] = "fsp_sampleMetadata_in"
    class_model_uri: ClassVar[URIRef] = NEON.FspSampleMetadataIn

    individualFate: Optional[str] = None

@dataclass
class FspSpectralDataIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsp_spectralData_in
    class_class_curie: ClassVar[str] = "neon:fsp_spectralData_in"
    class_name: ClassVar[str] = "fsp_spectralData_in"
    class_model_uri: ClassVar[URIRef] = NEON.FspSpectralDataIn

    wavelength: Optional[float] = None
    reflectance: Optional[float] = None
    reflectanceCondition: Optional[str] = None
    spectralSampleCodeDataFrame: Optional[str] = None
    spectralSampleFate: Optional[str] = None
    spectralSampleIDDataFrame: Optional[str] = None

@dataclass
class GagStageADCPIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.gag_stageADCP_in
    class_class_curie: ClassVar[str] = "neon:gag_stageADCP_in"
    class_name: ClassVar[str] = "gag_stageADCP_in"
    class_model_uri: ClassVar[URIRef] = NEON.GagStageADCPIn

    initialStageHeight: Optional[float] = None
    transectID: Optional[str] = None

@dataclass
class LtrLigninIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_lignin_in
    class_class_curie: ClassVar[str] = "neon:ltr_lignin_in"
    class_name: ClassVar[str] = "ltr_lignin_in"
    class_model_uri: ClassVar[URIRef] = NEON.LtrLigninIn

    ligninSampleBarcode: Optional[str] = None
    ligninSampleFate: Optional[str] = None
    ligninSampleID: Optional[str] = None
    accuracyQF: Optional[str] = None
    measurementQF: Optional[str] = None

@dataclass
class LtrLigninBatchQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_ligninBatchQA_in
    class_class_curie: ClassVar[str] = "neon:ltr_ligninBatchQA_in"
    class_name: ClassVar[str] = "ltr_ligninBatchQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.LtrLigninBatchQAIn

    analysisEndDate: Optional[Union[str, XSDTime]] = None
    analyticalRepNumber: Optional[str] = None
    celluloseKnown: Optional[float] = None
    cellulosePercent: Optional[float] = None
    ligninKnown: Optional[float] = None
    ligninPercent: Optional[float] = None
    qaMaterialQF: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.analysisEndDate is not None and not isinstance(self.analysisEndDate, XSDTime):
            self.analysisEndDate = XSDTime(self.analysisEndDate)
        super().__post_init__(**kwargs)


@dataclass
class LtrLigninSummaryIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ltr_ligninSummary_in
    class_class_curie: ClassVar[str] = "neon:ltr_ligninSummary_in"
    class_name: ClassVar[str] = "ltr_ligninSummary_in"
    class_model_uri: ClassVar[URIRef] = NEON.LtrLigninSummaryIn

    analyteStandardDeviation: Optional[float] = None
    qaReferenceID: Optional[str] = None
    analyteKnownValue: Optional[float] = None
    analytePercentRecovery: Optional[float] = None
    analyteObservedValue: Optional[float] = None
    analyteMetricsCount: Optional[str] = None
    qaReportingEndDate: Optional[Union[str, XSDTime]] = None
    qaReportingStartDate: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.qaReportingEndDate is not None and not isinstance(self.qaReportingEndDate, XSDTime):
            self.qaReportingEndDate = XSDTime(self.qaReportingEndDate)
        if self.qaReportingStartDate is not None and not isinstance(self.qaReportingStartDate, XSDTime):
            self.qaReportingStartDate = XSDTime(self.qaReportingStartDate)
        super().__post_init__(**kwargs)


@dataclass
class MamBarcodingIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_barcoding_in
    class_class_curie: ClassVar[str] = "neon:mam_barcoding_in"
    class_name: ClassVar[str] = "mam_barcoding_in"
    class_model_uri: ClassVar[URIRef] = NEON.MamBarcodingIn

    specimenSource: Optional[str] = None
    archiveID: Optional[str] = None
    archiveLaboratoryName: Optional[str] = None
    archiveFacilityID: Optional[str] = None
    associatedSpecimens: Optional[str] = None
    associatedTaxa: Optional[str] = None
    externalURLs: Optional[str] = None
    sampleStatus: Optional[str] = None
    wellCoordinates: Optional[str] = None
    identifier: Optional[str] = None
    identifierEmail: Optional[str] = None
    identifierInstitution: Optional[str] = None
    reproduction: Optional[str] = None
    trappingDays: Optional[float] = None
    depth: Optional[float] = None
    depthPrecision: Optional[float] = None
    eventTime: Optional[str] = None
    netDepth: Optional[float] = None
    plateID: Optional[str] = None
    BOLDsequenceURL: Optional[str] = None
    BOLDtraceURL: Optional[str] = None
    NEONsequenceURL: Optional[str] = None
    NEONtraceURL: Optional[str] = None

@dataclass
class MamVoucherIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_voucher_in
    class_class_curie: ClassVar[str] = "neon:mam_voucher_in"
    class_name: ClassVar[str] = "mam_voucher_in"
    class_model_uri: ClassVar[URIRef] = NEON.MamVoucherIn

    fulcrumVersion: Optional[str] = None
    platformInfo: Optional[str] = None
    voucherSampleFate: Optional[str] = None
    tagFate: Optional[str] = None

@dataclass
class MicDnaExtractionIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mic_dnaExtraction_in
    class_class_curie: ClassVar[str] = "neon:mic_dnaExtraction_in"
    class_name: ClassVar[str] = "mic_dnaExtraction_in"
    class_model_uri: ClassVar[URIRef] = NEON.MicDnaExtractionIn

    subsampleID: Optional[str] = None
    sampleClass: Optional[str] = None
    geneticSampleFate: Optional[str] = None
    samplePercent: Optional[float] = None
    subsampleCode: Optional[str] = None
    subsampleFate: Optional[str] = None
    sequenceAnalysisType: Optional[str] = None

@dataclass
class MmgRawDataFilesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_rawDataFiles_in
    class_class_curie: ClassVar[str] = "neon:mmg_rawDataFiles_in"
    class_name: ClassVar[str] = "mmg_rawDataFiles_in"
    class_model_uri: ClassVar[URIRef] = NEON.MmgRawDataFilesIn

    archiveDataFileDescription: Optional[str] = None
    archiveDataFileName: Optional[str] = None
    archiveDataFilePath: Optional[str] = None
    archiveParentFolderName: Optional[str] = None

@dataclass
class MmsRawDataFilesIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_rawDataFiles_in
    class_class_curie: ClassVar[str] = "neon:mms_rawDataFiles_in"
    class_name: ClassVar[str] = "mms_rawDataFiles_in"
    class_model_uri: ClassVar[URIRef] = NEON.MmsRawDataFilesIn

    dnaSampleFate: Optional[str] = None
    parentFolderName: Optional[str] = None

@dataclass
class MosPathogenqaIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mos_pathogenqa_in
    class_class_curie: ClassVar[str] = "neon:mos_pathogenqa_in"
    class_name: ClassVar[str] = "mos_pathogenqa_in"
    class_model_uri: ClassVar[URIRef] = NEON.MosPathogenqaIn

    testedDate: Optional[Union[str, XSDTime]] = None
    controlType: Optional[str] = None
    criteriaMet: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.testedDate is not None and not isinstance(self.testedDate, XSDTime):
            self.testedDate = XSDTime(self.testedDate)
        super().__post_init__(**kwargs)


@dataclass
class PtxArchiveIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ptx_archive_in
    class_class_curie: ClassVar[str] = "neon:ptx_archive_in"
    class_name: ClassVar[str] = "ptx_archive_in"
    class_model_uri: ClassVar[URIRef] = NEON.PtxArchiveIn

    slideFate: Optional[str] = None
    freezeDriedFate: Optional[str] = None
    preservedFate: Optional[str] = None

@dataclass
class TckIdentificationQAIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.tck_identificationQA_in
    class_class_curie: ClassVar[str] = "neon:tck_identificationQA_in"
    class_name: ClassVar[str] = "tck_identificationQA_in"
    class_model_uri: ClassVar[URIRef] = NEON.TckIdentificationQAIn

    genusPTD: Optional[float] = None
    speciesPTD: Optional[float] = None
    PDE: Optional[float] = None

@dataclass
class WcExternalLabDataByAnalyteIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wc_externalLabDataByAnalyte_in
    class_class_curie: ClassVar[str] = "neon:wc_externalLabDataByAnalyte_in"
    class_name: ClassVar[str] = "wc_externalLabDataByAnalyte_in"
    class_model_uri: ClassVar[URIRef] = NEON.WcExternalLabDataByAnalyteIn

    stationID: Optional[str] = None
    coolerTemp: Optional[float] = None
    externalLabMetadata: Optional[str] = None
    shipmentWarmQF: Optional[float] = None
    uploadDate: Optional[Union[str, XSDTime]] = None
    analyteUnits: Optional[str] = None
    sampleFate: Optional[str] = None
    runID: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.uploadDate is not None and not isinstance(self.uploadDate, XSDTime):
            self.uploadDate = XSDTime(self.uploadDate)
        super().__post_init__(**kwargs)


@dataclass
class AlgBiomassPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_biomass_pub
    class_class_curie: ClassVar[str] = "neon:alg_biomass_pub"
    class_name: ClassVar[str] = "alg_biomass_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AlgBiomassPub

    fieldSampleVolume: Optional[float] = None
    alternateFieldSampleVolume: Optional[float] = None
    labSampleVolume: Optional[float] = None
    domainFilterVolume: Optional[float] = None
    preservativeType: Optional[str] = None
    preservativeVolume: Optional[float] = None
    plantDryMass: Optional[float] = None
    plantSurfaceArea: Optional[float] = None
    analysisType: Optional[str] = None
    originalFieldSampleVolume: Optional[float] = None
    plantAdjAshFreeDryMass: Optional[float] = None
    plantAshMassBoatMass: Optional[float] = None
    plantBoatMass: Optional[float] = None
    plantDryMassBoatMass: Optional[float] = None
    plantMassOnly: Optional[str] = None
    ashMassDataQF: Optional[str] = None

class AlgTaxonomyRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_taxonomyRaw_pub
    class_class_curie: ClassVar[str] = "neon:alg_taxonomyRaw_pub"
    class_name: ClassVar[str] = "alg_taxonomyRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AlgTaxonomyRawPub


class AlgTaxonomyProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_taxonomyProcessed_pub
    class_class_curie: ClassVar[str] = "neon:alg_taxonomyProcessed_pub"
    class_name: ClassVar[str] = "alg_taxonomyProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AlgTaxonomyProcessedPub


@dataclass
class AlgBiovolumesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_biovolumes_pub
    class_class_curie: ClassVar[str] = "neon:alg_biovolumes_pub"
    class_name: ClassVar[str] = "alg_biovolumes_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AlgBiovolumesPub

    labSpecificStartDate: Optional[Union[str, XSDTime]] = None
    labSpecificEndDate: Optional[Union[str, XSDTime]] = None
    biovolumeMean: Optional[float] = None
    biovolumeFormula: Optional[str] = None
    biovolumeSpecimenNumber: Optional[str] = None
    taxonAbbreviation: Optional[str] = None
    biovolumeSD: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.labSpecificStartDate is not None and not isinstance(self.labSpecificStartDate, XSDTime):
            self.labSpecificStartDate = XSDTime(self.labSpecificStartDate)
        if self.labSpecificEndDate is not None and not isinstance(self.labSpecificEndDate, XSDTime):
            self.labSpecificEndDate = XSDTime(self.labSpecificEndDate)
        super().__post_init__(**kwargs)


@dataclass
class AlgArchivePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.alg_archive_pub
    class_class_curie: ClassVar[str] = "neon:alg_archive_pub"
    class_name: ClassVar[str] = "alg_archive_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AlgArchivePub

    freezeDriedCode: Optional[str] = None
    freezeDriedID: Optional[str] = None
    preservedCode: Optional[str] = None
    preservedID: Optional[str] = None

@dataclass
class AplBiomassPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apl_biomass_pub
    class_class_curie: ClassVar[str] = "neon:apl_biomass_pub"
    class_name: ClassVar[str] = "apl_biomass_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AplBiomassPub

    processingDate: Optional[Union[str, XSDTime]] = None
    dryMass: Optional[float] = None
    wetMass: Optional[float] = None
    wetMassSubsample: Optional[float] = None
    boatMass: Optional[float] = None
    dryMassBoatMass: Optional[float] = None
    ashMassBoatMass: Optional[float] = None
    fieldID: Optional[str] = None
    benthicArea: Optional[float] = None
    adjDryMass: Optional[float] = None
    adjAshFreeDryMass: Optional[float] = None
    arealAdjDryMass: Optional[float] = None
    arealAdjAshFreeDryMass: Optional[float] = None
    chemSubsampleID: Optional[str] = None
    chemSubsampleBarcode: Optional[str] = None
    fieldIDCode: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.processingDate is not None and not isinstance(self.processingDate, XSDTime):
            self.processingDate = XSDTime(self.processingDate)
        super().__post_init__(**kwargs)


class AplTaxonomyRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apl_taxonomyRaw_pub
    class_class_curie: ClassVar[str] = "neon:apl_taxonomyRaw_pub"
    class_name: ClassVar[str] = "apl_taxonomyRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AplTaxonomyRawPub


@dataclass
class AplTaxonomyProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.apl_taxonomyProcessed_pub
    class_class_curie: ClassVar[str] = "neon:apl_taxonomyProcessed_pub"
    class_name: ClassVar[str] = "apl_taxonomyProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AplTaxonomyProcessedPub

    scientificNameAuthorship: Optional[str] = None
    testMethod: Optional[str] = None
    qcTaxonomyStatus: Optional[str] = None
    algalType: Optional[str] = None
    algalParameter: Optional[str] = None
    algalParameterValue: Optional[float] = None
    algalParameterUnit: Optional[str] = None
    variety: Optional[str] = None
    section: Optional[str] = None
    superdivision: Optional[str] = None
    division: Optional[str] = None
    subdivision: Optional[str] = None
    infradivision: Optional[str] = None
    parvdivision: Optional[str] = None
    subsection: Optional[str] = None
    subspecies: Optional[str] = None
    subvariety: Optional[str] = None
    subform: Optional[str] = None
    form: Optional[str] = None
    speciesGroup: Optional[str] = None
    perBottleSampleVolume: Optional[float] = None

@dataclass
class AsiExternalLabH2OIsotopesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asi_externalLabH2OIsotopes_pub
    class_class_curie: ClassVar[str] = "neon:asi_externalLabH2OIsotopes_pub"
    class_name: ClassVar[str] = "asi_externalLabH2OIsotopes_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AsiExternalLabH2OIsotopesPub

    receivedBy: Optional[str] = None
    receivedDate: Optional[Union[str, XSDTime]] = None
    d18OsdWater: Optional[float] = None
    d2HsdWater: Optional[float] = None
    instrumentSN: Optional[str] = None
    isotopeH2OExternalLabQF: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.receivedDate is not None and not isinstance(self.receivedDate, XSDTime):
            self.receivedDate = XSDTime(self.receivedDate)
        super().__post_init__(**kwargs)


@dataclass
class AsiFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asi_fieldData_pub
    class_class_curie: ClassVar[str] = "neon:asi_fieldData_pub"
    class_name: ClassVar[str] = "asi_fieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AsiFieldDataPub

    processedDateH2OIsotopes: Optional[Union[str, XSDTime]] = None
    processedDateFilters: Optional[Union[str, XSDTime]] = None
    sampleVolumeFilteredPOMRep1: Optional[float] = None
    sampleVolumeFilteredPOMRep2: Optional[float] = None
    isotopeH2OSampleID: Optional[str] = None
    isotopePOMSampleID: Optional[str] = None
    isotopePOMRep2SampleID: Optional[str] = None
    isotopeH2OSampleCode: Optional[str] = None
    isotopePOMRep2SampleCode: Optional[str] = None
    isotopePOMSampleCode: Optional[str] = None
    isotopeH2OSampleCond: Optional[str] = None
    isotopePOMSampleCond: Optional[str] = None
    isotopePOMRep2SampleCond: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.processedDateH2OIsotopes is not None and not isinstance(self.processedDateH2OIsotopes, XSDTime):
            self.processedDateH2OIsotopes = XSDTime(self.processedDateH2OIsotopes)
        if self.processedDateFilters is not None and not isinstance(self.processedDateFilters, XSDTime):
            self.processedDateFilters = XSDTime(self.processedDateFilters)
        super().__post_init__(**kwargs)


@dataclass
class AsiFieldSuperParentPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asi_fieldSuperParent_pub
    class_class_curie: ClassVar[str] = "neon:asi_fieldSuperParent_pub"
    class_name: ClassVar[str] = "asi_fieldSuperParent_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AsiFieldSuperParentPub

    waterTemp: Optional[float] = None
    aCollectedBy: Optional[str] = None
    bCollectedBy: Optional[str] = None
    altLocation: Optional[str] = None
    maxDepth: Optional[float] = None
    upperSegmentDepth: Optional[float] = None
    lowerSegmentDepth: Optional[float] = None
    wellWaterDepth: Optional[float] = None
    sampleDepth: Optional[float] = None
    sampleExtractionMethod: Optional[str] = None
    wellVolumePurged: Optional[float] = None
    samplerType: Optional[str] = None
    parentSampleID: Optional[str] = None
    lakeSampleDepth1: Optional[float] = None
    lakeSampleDepth2: Optional[float] = None
    sdgSamplingProtocolVersion: Optional[str] = None
    asiSamplingProtocolVersion: Optional[str] = None
    aquaticSiteType: Optional[str] = None
    parentSampleCode: Optional[str] = None
    fieldDataQF: Optional[str] = None
    samplingImpractical: Optional[str] = None
    additionalCoordUncertainty: Optional[float] = None
    amcSamplingProtocolVersion: Optional[str] = None
    swcSamplingProtocolVersion: Optional[str] = None

@dataclass
class AsiPOMExternalLabDataPerSamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.asi_POMExternalLabDataPerSample_pub
    class_class_curie: ClassVar[str] = "neon:asi_POMExternalLabDataPerSample_pub"
    class_name: ClassVar[str] = "asi_POMExternalLabDataPerSample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.AsiPOMExternalLabDataPerSamplePub

    sampleType: Optional[str] = None
    sampleVolumeFiltered: Optional[float] = None
    externalRemarks: Optional[str] = None
    analyte: Optional[str] = None
    method: Optional[str] = None
    analysisDate: Optional[Union[str, XSDTime]] = None
    analyzedBy: Optional[str] = None
    filterSize: Optional[float] = None
    plantAlgaeLabUnits: Optional[str] = None
    externalLabDataQF: Optional[str] = None
    batchID: Optional[str] = None
    analyteConcentration: Optional[float] = None
    percentFilterAnalyzed: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.analysisDate is not None and not isinstance(self.analysisDate, XSDTime):
            self.analysisDate = XSDTime(self.analysisDate)
        super().__post_init__(**kwargs)


@dataclass
class VstMappingandtaggingPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.vst_mappingandtagging_pub
    class_class_curie: ClassVar[str] = "neon:vst_mappingandtagging_pub"
    class_name: ClassVar[str] = "vst_mappingandtagging_pub"
    class_model_uri: ClassVar[URIRef] = NEON.VstMappingandtaggingPub

    pointID: Optional[str] = None
    cfcOnlyTag: Optional[str] = None
    previouslyTaggedAs: Optional[str] = None
    stemAzimuth: Optional[float] = None
    stemDistance: Optional[float] = None
    supportingStemIndividualID: Optional[str] = None
    recordType: Optional[str] = None

@dataclass
class FspBoutMetadataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsp_boutMetadata_pub
    class_class_curie: ClassVar[str] = "neon:fsp_boutMetadata_pub"
    class_name: ClassVar[str] = "fsp_boutMetadata_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FspBoutMetadataPub

    instrument: Optional[str] = None
    wavelengthIncrement: Optional[float] = None
    fieldSpectrometerSettings: Optional[str] = None
    foreopticConnection: Optional[str] = None
    foreopticType: Optional[str] = None
    lightSource: Optional[str] = None
    measurementQuantity: Optional[str] = None
    measurementUnits: Optional[str] = None

@dataclass
class FspSampleMetadataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsp_sampleMetadata_pub
    class_class_curie: ClassVar[str] = "neon:fsp_sampleMetadata_pub"
    class_name: ClassVar[str] = "fsp_sampleMetadata_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FspSampleMetadataPub

    measurementDate: Optional[Union[str, XSDTime]] = None
    cfcIndividual: Optional[str] = None
    leafAge: Optional[str] = None
    leafArrangement: Optional[str] = None
    leafExposure: Optional[str] = None
    leafSamplePosition: Optional[str] = None
    leafStatus: Optional[str] = None
    measurementVenue: Optional[str] = None
    targetStatus: Optional[str] = None
    targetType: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.measurementDate is not None and not isinstance(self.measurementDate, XSDTime):
            self.measurementDate = XSDTime(self.measurementDate)
        super().__post_init__(**kwargs)


@dataclass
class FspSpectralDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.fsp_spectralData_pub
    class_class_curie: ClassVar[str] = "neon:fsp_spectralData_pub"
    class_name: ClassVar[str] = "fsp_spectralData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.FspSpectralDataPub

    reviewedBy: Optional[str] = None
    downloadFileName: Optional[str] = None
    downloadFileUrl: Optional[str] = None
    software: Optional[str] = None
    spectralSampleCode: Optional[str] = None
    spectralSampleID: Optional[str] = None

@dataclass
class GeoPebbleFieldDataPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.geo_pebbleFieldData_pub
    class_class_curie: ClassVar[str] = "neon:geo_pebbleFieldData_pub"
    class_name: ClassVar[str] = "geo_pebbleFieldData_pub"
    class_model_uri: ClassVar[URIRef] = NEON.GeoPebbleFieldDataPub

    pebbleCountD16: Optional[str] = None
    pebbleCountD5: Optional[str] = None
    pebbleCountD50: Optional[str] = None
    pebbleCountD84: Optional[str] = None
    protocolActivity: Optional[str] = None

@dataclass
class InvDnaExtractionStandardPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_dnaExtractionStandard_pub
    class_class_curie: ClassVar[str] = "neon:inv_dnaExtractionStandard_pub"
    class_name: ClassVar[str] = "inv_dnaExtractionStandard_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvDnaExtractionStandardPub

    deprecatedVialID: Optional[str] = None
    geneticSampleID: Optional[str] = None
    geneticSampleCode: Optional[str] = None
    nucleicAcidConcentration: Optional[float] = None
    sampleMaterial: Optional[str] = None
    sampleMass: Optional[float] = None
    dnaPooledStatus: Optional[str] = None
    dnaProcessedBy: Optional[str] = None
    nucleicAcidQuantMethod: Optional[str] = None
    nucleicAcidPurity: Optional[float] = None
    standardCreationLocation: Optional[str] = None

@dataclass
class InvPcrAmplificationStandardPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_pcrAmplificationStandard_pub
    class_class_curie: ClassVar[str] = "neon:inv_pcrAmplificationStandard_pub"
    class_name: ClassVar[str] = "inv_pcrAmplificationStandard_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvPcrAmplificationStandardPub

    forwardPrimer: Optional[str] = None
    reversePrimer: Optional[str] = None
    targetGene: Optional[str] = None
    ampliconConcentration: Optional[float] = None
    ampliconPooledStatus: Optional[str] = None
    targetSubfragment: Optional[str] = None

@dataclass
class InvMarkerGeneSequencingStandardPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_markerGeneSequencingStandard_pub
    class_class_curie: ClassVar[str] = "neon:inv_markerGeneSequencingStandard_pub"
    class_name: ClassVar[str] = "inv_markerGeneSequencingStandard_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvMarkerGeneSequencingStandardPub

    testProtocolVersion: Optional[str] = None
    processedBy: Optional[str] = None
    linkerPrimerSequence: Optional[str] = None
    reverseLinkerPrimerSequence: Optional[str] = None
    sequencingMethod: Optional[str] = None
    sequencingConcentration: Optional[float] = None
    sampleTotalReadNumber: Optional[str] = None
    sampleFilteredReadNumber: Optional[str] = None
    maxFilteredReadLength: Optional[str] = None
    minFilteredReadLength: Optional[str] = None
    averageFilteredReadQuality: Optional[float] = None
    ambiguousBasesNumber: Optional[str] = None
    barcodeSequence: Optional[str] = None
    qaqcStatus: Optional[str] = None
    replicate: Optional[str] = None
    instrument_model: Optional[str] = None
    ncbiProjectID: Optional[str] = None
    illuminaAdapterKit: Optional[str] = None
    illuminaIndex1: Optional[str] = None
    illuminaIndex2: Optional[str] = None
    library_layout: Optional[str] = None
    library_selection: Optional[str] = None
    library_source: Optional[str] = None
    library_strategy: Optional[str] = None
    analysisCodeFileName: Optional[str] = None
    primerSetID: Optional[str] = None
    processedSeqFileName: Optional[str] = None

@dataclass
class InvDnaStandardTaxonPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_dnaStandardTaxon_pub
    class_class_curie: ClassVar[str] = "neon:inv_dnaStandardTaxon_pub"
    class_name: ClassVar[str] = "inv_dnaStandardTaxon_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvDnaStandardTaxonPub

    locationID: Optional[str] = None
    createdBy: Optional[str] = None
    dnaStandardSampleCode: Optional[str] = None
    dnaStandardSampleID: Optional[str] = None

class InvDnaRawDataFilesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_dnaRawDataFiles_pub
    class_class_curie: ClassVar[str] = "neon:inv_dnaRawDataFiles_pub"
    class_name: ClassVar[str] = "inv_dnaRawDataFiles_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvDnaRawDataFilesPub


class InvDnaRawDataFilesStandardPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_dnaRawDataFilesStandard_pub
    class_class_curie: ClassVar[str] = "neon:inv_dnaRawDataFilesStandard_pub"
    class_name: ClassVar[str] = "inv_dnaRawDataFilesStandard_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvDnaRawDataFilesStandardPub


@dataclass
class InvPersamplePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_persample_pub
    class_class_curie: ClassVar[str] = "neon:inv_persample_pub"
    class_name: ClassVar[str] = "inv_persample_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvPersamplePub

    sortDate: Optional[Union[str, XSDTime]] = None
    sortedBy: Optional[str] = None
    qcSortDate: Optional[Union[str, XSDTime]] = None
    primaryMatrix: Optional[str] = None
    preRinseVolume: Optional[float] = None
    postRinseVolume: Optional[float] = None
    qcSortedBy: Optional[str] = None
    qcPercentSimilarity: Optional[float] = None
    benchRemarks: Optional[str] = None
    qcSortingEfficacy: Optional[float] = None
    qcIterationCount: Optional[str] = None
    qcEnumerationDifference: Optional[float] = None
    qcTaxonomicDifference: Optional[float] = None
    chironomidVialCode: Optional[str] = None
    chironomidVialID: Optional[str] = None
    oligochaeteVialCode: Optional[str] = None
    oligochaeteVialID: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.sortDate is not None and not isinstance(self.sortDate, XSDTime):
            self.sortDate = XSDTime(self.sortDate)
        if self.qcSortDate is not None and not isinstance(self.qcSortDate, XSDTime):
            self.qcSortDate = XSDTime(self.qcSortDate)
        super().__post_init__(**kwargs)


@dataclass
class InvTaxonomyProcessedPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_taxonomyProcessed_pub
    class_class_curie: ClassVar[str] = "neon:inv_taxonomyProcessed_pub"
    class_name: ClassVar[str] = "inv_taxonomyProcessed_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvTaxonomyProcessedPub

    acceptedTaxonID: Optional[str] = None

@dataclass
class InvTaxonomyRawPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_taxonomyRaw_pub
    class_class_curie: ClassVar[str] = "neon:inv_taxonomyRaw_pub"
    class_name: ClassVar[str] = "inv_taxonomyRaw_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvTaxonomyRawPub

    targetTaxaPresent: Optional[str] = None
    individualCount: Optional[str] = None
    identifiedDate: Optional[Union[str, XSDTime]] = None
    identificationRemarks: Optional[str] = None
    kingdom: Optional[str] = None
    phylum: Optional[str] = None
    class: Optional[str] = None
    order: Optional[str] = None
    family: Optional[str] = None
    subfamily: Optional[str] = None
    genus: Optional[str] = None
    subgenus: Optional[str] = None
    specificEpithet: Optional[str] = None
    infraspecificEpithet: Optional[str] = None
    tribe: Optional[str] = None
    taxonDatabaseName: Optional[str] = None
    taxonDatabaseID: Optional[str] = None
    subsamplePercent: Optional[float] = None
    invertebrateLifeStage: Optional[str] = None
    sizeClass: Optional[str] = None
    immatureSpecimen: Optional[str] = None
    distinctTaxon: Optional[str] = None
    qcChecked: Optional[str] = None
    indeterminateSpecies: Optional[str] = None
    subphylum: Optional[str] = None
    subclass: Optional[str] = None
    infraclass: Optional[str] = None
    superorder: Optional[str] = None
    suborder: Optional[str] = None
    infraorder: Optional[str] = None
    superfamily: Optional[str] = None
    subtribe: Optional[str] = None
    estimatedTotalCount: Optional[float] = None
    subkingdom: Optional[str] = None
    infrakingdom: Optional[str] = None
    superclass: Optional[str] = None
    sampleCondition: Optional[str] = None
    superphylum: Optional[str] = None
    infraphylum: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.identifiedDate is not None and not isinstance(self.identifiedDate, XSDTime):
            self.identifiedDate = XSDTime(self.identifiedDate)
        super().__post_init__(**kwargs)


@dataclass
class InvPervialPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.inv_pervial_pub
    class_class_curie: ClassVar[str] = "neon:inv_pervial_pub"
    class_name: ClassVar[str] = "inv_pervial_pub"
    class_model_uri: ClassVar[URIRef] = NEON.InvPervialPub

    sampleID: Optional[str] = None
    slideID: Optional[str] = None
    referenceCount: Optional[str] = None
    referenceID: Optional[str] = None
    sampleCode: Optional[str] = None
    slideCode: Optional[str] = None
    referenceCode: Optional[str] = None

@dataclass
class MamPerplotnightPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_perplotnight_pub
    class_class_curie: ClassVar[str] = "neon:mam_perplotnight_pub"
    class_name: ClassVar[str] = "mam_perplotnight_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MamPerplotnightPub

    samplingProtocolVersion: Optional[str] = None

@dataclass
class MamPertrapnightPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_pertrapnight_pub
    class_class_curie: ClassVar[str] = "neon:mam_pertrapnight_pub"
    class_name: ClassVar[str] = "mam_pertrapnight_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MamPertrapnightPub

    nightuid: Optional[str] = None
    trapCoordinate: Optional[str] = None
    trapStatus: Optional[str] = None
    sex: Optional[str] = None
    lifeStage: Optional[str] = None
    testes: Optional[str] = None
    nipples: Optional[str] = None
    pregnancyStatus: Optional[str] = None
    vagina: Optional[str] = None
    hindfootLength: Optional[str] = None
    earLength: Optional[str] = None
    tailLength: Optional[str] = None
    totalLength: Optional[str] = None
    weight: Optional[str] = None
    replacedTag: Optional[str] = None
    recapture: Optional[str] = None
    fate: Optional[str] = None
    bloodSampleID: Optional[str] = None
    bloodSampleMethod: Optional[str] = None
    fecalSampleID: Optional[str] = None
    fecalSampleCondition: Optional[str] = None
    earSampleID: Optional[str] = None
    hairSampleID: Optional[str] = None
    nlcdClass: Optional[str] = None
    plotType: Optional[str] = None
    trapType: Optional[str] = None
    larvalTicksAttached: Optional[str] = None
    nymphalTicksAttached: Optional[str] = None
    adultTicksAttached: Optional[str] = None
    individualCode: Optional[str] = None
    bloodSampleBarcode: Optional[str] = None
    earSampleBarcode: Optional[str] = None
    fecalSampleBarcode: Optional[str] = None
    hairSampleBarcode: Optional[str] = None
    voucherSampleBarcode: Optional[str] = None
    hairSampleContents: Optional[str] = None

@dataclass
class MamVoucherPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mam_voucher_pub
    class_class_curie: ClassVar[str] = "neon:mam_voucher_pub"
    class_name: ClassVar[str] = "mam_voucher_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MamVoucherPub

    tagID: Optional[str] = None
    voucherSampleID: Optional[str] = None
    decimalLatitude: Optional[float] = None
    decimalLongitude: Optional[float] = None
    geodeticDatum: Optional[str] = None
    coordinateUncertainty: Optional[float] = None
    elevation: Optional[float] = None
    elevationUncertainty: Optional[float] = None
    morphospeciesID: Optional[str] = None
    identifiedBy: Optional[str] = None
    taxonIDRemarks: Optional[str] = None
    morphospeciesIDRemarks: Optional[str] = None
    altLongitude: Optional[float] = None
    altLatitude: Optional[float] = None
    collectedBy: Optional[str] = None
    altCoordinateUncertainty: Optional[float] = None
    altGeodeticDatum: Optional[str] = None
    nativeStatusCode: Optional[str] = None
    altCoordinateSource: Optional[str] = None
    altElevation: Optional[float] = None
    altElevationUncertainty: Optional[float] = None
    habitatDescription: Optional[str] = None
    tagCode: Optional[str] = None
    voucherSampleCode: Optional[str] = None

class MmgBenthicRawDataFilesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_benthicRawDataFiles_pub
    class_class_curie: ClassVar[str] = "neon:mmg_benthicRawDataFiles_pub"
    class_name: ClassVar[str] = "mmg_benthicRawDataFiles_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgBenthicRawDataFilesPub


class MmgSoilRawDataFilesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_soilRawDataFiles_pub
    class_class_curie: ClassVar[str] = "neon:mmg_soilRawDataFiles_pub"
    class_name: ClassVar[str] = "mmg_soilRawDataFiles_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSoilRawDataFilesPub


class MmgSwRawDataFilesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mmg_swRawDataFiles_pub
    class_class_curie: ClassVar[str] = "neon:mmg_swRawDataFiles_pub"
    class_name: ClassVar[str] = "mmg_swRawDataFiles_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmgSwRawDataFilesPub


class MmsBenthicRawDataFilesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_benthicRawDataFiles_pub
    class_class_curie: ClassVar[str] = "neon:mms_benthicRawDataFiles_pub"
    class_name: ClassVar[str] = "mms_benthicRawDataFiles_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsBenthicRawDataFilesPub


class MmsRawDataFilesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_rawDataFiles_pub
    class_class_curie: ClassVar[str] = "neon:mms_rawDataFiles_pub"
    class_name: ClassVar[str] = "mms_rawDataFiles_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsRawDataFilesPub


class MmsSwRawDataFilesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.mms_swRawDataFiles_pub
    class_class_curie: ClassVar[str] = "neon:mms_swRawDataFiles_pub"
    class_name: ClassVar[str] = "mms_swRawDataFiles_pub"
    class_model_uri: ClassVar[URIRef] = NEON.MmsSwRawDataFilesPub


@dataclass
class VstApparentindividualPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.vst_apparentindividual_pub
    class_class_curie: ClassVar[str] = "neon:vst_apparentindividual_pub"
    class_name: ClassVar[str] = "vst_apparentindividual_pub"
    class_model_uri: ClassVar[URIRef] = NEON.VstApparentindividualPub

    individualID: Optional[str] = None
    growthForm: Optional[str] = None
    canopyPosition: Optional[str] = None
    plantStatus: Optional[str] = None
    stemDiameter: Optional[float] = None
    measurementHeight: Optional[float] = None
    height: Optional[float] = None
    individualBarcode: Optional[str] = None
    tagStatus: Optional[str] = None
    basalStemDiameter: Optional[float] = None
    basalStemDiameterMsrmntHeight: Optional[float] = None
    baseCrownHeight: Optional[float] = None
    breakDiameter: Optional[float] = None
    breakHeight: Optional[float] = None
    maxBaseCrownDiameter: Optional[float] = None
    maxCrownDiameter: Optional[float] = None
    ninetyBaseCrownDiameter: Optional[float] = None
    ninetyCrownDiameter: Optional[float] = None
    shape: Optional[str] = None
    tempShrubStemID: Optional[str] = None

@dataclass
class VstShrubgroupPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.vst_shrubgroup_pub
    class_class_curie: ClassVar[str] = "neon:vst_shrubgroup_pub"
    class_name: ClassVar[str] = "vst_shrubgroup_pub"
    class_model_uri: ClassVar[URIRef] = NEON.VstShrubgroupPub

    plotID: Optional[str] = None
    identificationReferences: Optional[str] = None
    taxonID: Optional[str] = None
    identificationQualifier: Optional[str] = None
    measuredBy: Optional[str] = None
    recordedBy: Optional[str] = None
    eventID: Optional[str] = None
    scientificName: Optional[str] = None
    taxonRank: Optional[str] = None
    subplotID: Optional[str] = None
    canopyArea: Optional[float] = None
    deadPercent: Optional[float] = None
    groupID: Optional[str] = None
    livePercent: Optional[float] = None
    meanHeight: Optional[float] = None
    nestedSubplotID: Optional[str] = None
    volumePercent: Optional[float] = None

@dataclass
class ZooDnaRawDataFilesPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.zoo_dnaRawDataFiles_pub
    class_class_curie: ClassVar[str] = "neon:zoo_dnaRawDataFiles_pub"
    class_name: ClassVar[str] = "zoo_dnaRawDataFiles_pub"
    class_model_uri: ClassVar[URIRef] = NEON.ZooDnaRawDataFilesPub

    uid: Optional[str] = None
    domainID: Optional[str] = None
    remarks: Optional[str] = None
    setDate: Optional[Union[str, XSDTime]] = None
    collectDate: Optional[Union[str, XSDTime]] = None
    processedDate: Optional[Union[str, XSDTime]] = None
    laboratoryName: Optional[str] = None
    internalLabID: Optional[str] = None
    dnaSampleID: Optional[str] = None
    dnaSampleCode: Optional[str] = None
    sequencerRunID: Optional[str] = None
    rawDataFileName: Optional[str] = None
    rawDataFilePath: Optional[str] = None
    sequencingFacilityID: Optional[str] = None
    rawDataFileDescription: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.setDate is not None and not isinstance(self.setDate, XSDTime):
            self.setDate = XSDTime(self.setDate)
        if self.collectDate is not None and not isinstance(self.collectDate, XSDTime):
            self.collectDate = XSDTime(self.collectDate)
        if self.processedDate is not None and not isinstance(self.processedDate, XSDTime):
            self.processedDate = XSDTime(self.processedDate)
        super().__post_init__(**kwargs)


@dataclass
class CsdContinuousDischargePub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.csd_continuousDischarge_pub
    class_class_curie: ClassVar[str] = "neon:csd_continuousDischarge_pub"
    class_name: ClassVar[str] = "csd_continuousDischarge_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CsdContinuousDischargePub

    calibratedPressure: Optional[float] = None
    curveID: Optional[str] = None
    dischargeAlphaQF: Optional[int] = None
    dischargeBetaQF: Optional[int] = None
    dischargeConsistQF: Optional[int] = None
    dischargeFinalQF: Optional[int] = None
    dischargeFinalQFSciRvw: Optional[str] = None
    dischargeGapQF: Optional[int] = None
    dischargeNullQF: Optional[int] = None
    dischargePersistQF: Optional[int] = None
    dischargeRangeQF: Optional[int] = None
    dischargeSpikeQF: Optional[int] = None
    dischargeStepQF: Optional[int] = None
    dischargeSuspectCalQF: Optional[int] = None
    dischargeValidCalQF: Optional[int] = None
    equivalentStage: Optional[float] = None
    maxpostDischarge: Optional[float] = None
    nonSystematicUnc: Optional[float] = None
    stageUnc: Optional[float] = None
    systematicUnc: Optional[float] = None
    withParaUncQlower1Std: Optional[float] = None
    withParaUncQlower2Std: Optional[float] = None
    withParaUncQMean: Optional[float] = None
    withParaUncQMedian: Optional[float] = None
    withParaUncQStdDev: Optional[float] = None
    withParaUncQupper1Std: Optional[float] = None
    withParaUncQupper2Std: Optional[float] = None
    withRemnUncQlower1Std: Optional[float] = None
    withRemnUncQlower2Std: Optional[float] = None
    withRemnUncQMean: Optional[float] = None
    withRemnUncQMedian: Optional[float] = None
    withRemnUncQStdDev: Optional[float] = None
    withRemnUncQupper1Std: Optional[float] = None
    withRemnUncQUpper2Std: Optional[float] = None

@dataclass
class CsdPressureGaugeRelationshipPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.csd_pressureGaugeRelationship_pub
    class_class_curie: ClassVar[str] = "neon:csd_pressureGaugeRelationship_pub"
    class_name: ClassVar[str] = "csd_pressureGaugeRelationship_pub"
    class_model_uri: ClassVar[URIRef] = NEON.CsdPressureGaugeRelationshipPub

    siteID: Optional[str] = None
    dataQF: Optional[str] = None
    namedLocation: Optional[str] = None
    assetID: Optional[str] = None
    calCertificateFile: Optional[str] = None
    calculatedStage: Optional[float] = None
    calcWaterColumnHeight: Optional[float] = None
    calibratedPressMean: Optional[float] = None
    calibratedPressObsCount: Optional[float] = None
    calibratedPressStdDev: Optional[float] = None
    gaugeHeight: Optional[float] = None
    sensorStaffGaugeOffset: Optional[float] = None
    calibrationID: Optional[str] = None
    gaugeCollectDate: Optional[str] = None
    stationHorizontalID: Optional[str] = None

class WdpSensorPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_sensor_pub
    class_class_curie: ClassVar[str] = "neon:wdp_sensor_pub"
    class_name: ClassVar[str] = "wdp_sensor_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WdpSensorPub


class DpmSensorPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dpm_sensor_pub
    class_class_curie: ClassVar[str] = "neon:dpm_sensor_pub"
    class_name: ClassVar[str] = "dpm_sensor_pub"
    class_model_uri: ClassVar[URIRef] = NEON.DpmSensorPub


@dataclass
class WssDaily(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wss_daily
    class_class_curie: ClassVar[str] = "neon:wss_daily"
    class_name: ClassVar[str] = "wss_daily"
    class_model_uri: ClassVar[URIRef] = NEON.WssDaily

    date: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.date is not None and not isinstance(self.date, XSDTime):
            self.date = XSDTime(self.date)
        super().__post_init__(**kwargs)


class PARWS1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARWS_1min
    class_class_curie: ClassVar[str] = "neon:PARWS_1min"
    class_name: ClassVar[str] = "PARWS_1min"
    class_model_uri: ClassVar[URIRef] = NEON.PARWS1min


class PARWS5min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARWS_5min
    class_class_curie: ClassVar[str] = "neon:PARWS_5min"
    class_name: ClassVar[str] = "PARWS_5min"
    class_model_uri: ClassVar[URIRef] = NEON.PARWS5min


class PARWS30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARWS_30min
    class_class_curie: ClassVar[str] = "neon:PARWS_30min"
    class_name: ClassVar[str] = "PARWS_30min"
    class_model_uri: ClassVar[URIRef] = NEON.PARWS30min


@dataclass
class PARPAR1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARPAR_1min
    class_class_curie: ClassVar[str] = "neon:PARPAR_1min"
    class_name: ClassVar[str] = "PARPAR_1min"
    class_model_uri: ClassVar[URIRef] = NEON.PARPAR1min

    PARRangeQAQCRpt: Optional[str] = None
    PARPersistenceQAQCRpt: Optional[str] = None
    PARStepQAQCRpt: Optional[str] = None
    PARNullQAQCRpt: Optional[str] = None
    PARGapQAQCRpt: Optional[str] = None
    PARConsistencyQAQCRpt: Optional[str] = None
    PARSpikeQAQCRpt: Optional[str] = None
    PARAlphaQAQCRpt: Optional[str] = None
    PARBetaQAQCRpt: Optional[str] = None
    outPARRangeQAQCRpt: Optional[str] = None
    outPARPersistenceQAQCRpt: Optional[str] = None
    outPARStepQAQCRpt: Optional[str] = None
    outPARNullQAQCRpt: Optional[str] = None
    outPARGapQAQCRpt: Optional[str] = None
    outPARConsistencyQAQCRpt: Optional[str] = None
    outPARSpikeQAQCRpt: Optional[str] = None
    outPARAlphaQAQCRpt: Optional[str] = None
    outPARBetaQAQCRpt: Optional[str] = None
    PARValidCalQAQCRpt: Optional[str] = None
    outPARValidCalQAQCRpt: Optional[str] = None
    PARFinalQFSciRvw: Optional[str] = None

@dataclass
class PARPAR30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARPAR_30min
    class_class_curie: ClassVar[str] = "neon:PARPAR_30min"
    class_name: ClassVar[str] = "PARPAR_30min"
    class_model_uri: ClassVar[URIRef] = NEON.PARPAR30min

    PARMean: Optional[float] = None
    PARMinimum: Optional[float] = None
    PARMaximum: Optional[float] = None
    PARVariance: Optional[float] = None
    PARNumPts: Optional[float] = None
    PARExpUncert: Optional[float] = None
    PARStdErMean: Optional[float] = None
    PARRangeFailQM: Optional[float] = None
    PARRangePassQM: Optional[float] = None
    PARRangeNAQM: Optional[float] = None
    PARPersistenceFailQM: Optional[float] = None
    PARPersistencePassQM: Optional[float] = None
    PARPersistenceNAQM: Optional[float] = None
    PARStepFailQM: Optional[float] = None
    PARStepPassQM: Optional[float] = None
    PARStepNAQM: Optional[float] = None
    PARNullFailQM: Optional[float] = None
    PARNullPassQM: Optional[float] = None
    PARNullNAQM: Optional[float] = None
    PARGapFailQM: Optional[float] = None
    PARGapPassQM: Optional[float] = None
    PARGapNAQM: Optional[float] = None
    PARSpikeFailQM: Optional[float] = None
    PARSpikePassQM: Optional[float] = None
    PARSpikeNAQM: Optional[float] = None
    PARConsistencyFailQM: Optional[float] = None
    PARConsistencyPassQM: Optional[float] = None
    PARConsistencyNAQM: Optional[float] = None
    PARAlphaQM: Optional[float] = None
    PARBetaQM: Optional[float] = None
    PARFinalQF: Optional[str] = None
    outPARMean: Optional[float] = None
    outPARMinimum: Optional[float] = None
    outPARMaximum: Optional[float] = None
    outPARVariance: Optional[float] = None
    outPARNumPts: Optional[float] = None
    outPARExpUncert: Optional[float] = None
    outPARStdErMean: Optional[float] = None
    outPARRangeFailQM: Optional[float] = None
    outPARRangePassQM: Optional[float] = None
    outPARRangeNAQM: Optional[float] = None
    outPARPersistenceFailQM: Optional[float] = None
    outPARPersistencePassQM: Optional[float] = None
    outPARPersistenceNAQM: Optional[float] = None
    outPARStepFailQM: Optional[float] = None
    outPARStepPassQM: Optional[float] = None
    outPARStepNAQM: Optional[float] = None
    outPARNullFailQM: Optional[float] = None
    outPARNullPassQM: Optional[float] = None
    outPARNullNAQM: Optional[float] = None
    outPARGapFailQM: Optional[float] = None
    outPARGapPassQM: Optional[float] = None
    outPARGapNAQM: Optional[float] = None
    outPARSpikeFailQM: Optional[float] = None
    outPARSpikePassQM: Optional[float] = None
    outPARSpikeNAQM: Optional[float] = None
    outPARConsistencyFailQM: Optional[float] = None
    outPARConsistencyPassQM: Optional[float] = None
    outPARConsistencyNAQM: Optional[float] = None
    outPARAlphaQM: Optional[float] = None
    outPARBetaQM: Optional[float] = None
    outPARFinalQF: Optional[str] = None
    PARValidCalPassQM: Optional[float] = None
    PARValidCalNAQM: Optional[float] = None
    PARValidCalFailQM: Optional[float] = None
    outPARValidCalPassQM: Optional[float] = None
    outPARValidCalNAQM: Optional[float] = None
    outPARValidCalFailQM: Optional[float] = None
    outPARFinalQFSciRvw: Optional[str] = None

@dataclass
class PRIPRE5min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PRIPRE_5min
    class_class_curie: ClassVar[str] = "neon:PRIPRE_5min"
    class_name: ClassVar[str] = "PRIPRE_5min"
    class_model_uri: ClassVar[URIRef] = NEON.PRIPRE5min

    wire1StabilityPassQM: Optional[float] = None
    wire1StabilitySearchQM: Optional[float] = None
    wire1StabilityFailQM: Optional[float] = None
    wire2StabilityPassQM: Optional[float] = None
    wire2StabilitySearchQM: Optional[float] = None
    wire2StabilityFailQM: Optional[float] = None
    wire3StabilityPassQM: Optional[float] = None
    wire3StabilitySearchQM: Optional[float] = None
    wire3StabilityFailQM: Optional[float] = None
    priorDepthQF: Optional[str] = None
    unstableQF: Optional[str] = None
    lowDepthQF: Optional[str] = None
    exDeltaQF: Optional[str] = None
    missingWireInfoQF: Optional[str] = None
    gaugeNoiseQF: Optional[str] = None
    wireNoiseQF: Optional[str] = None
    overflowQF: Optional[str] = None
    heaterErrorQF: Optional[str] = None
    wire1StabilityNAQM: Optional[float] = None
    wire2StabilityNAQM: Optional[float] = None
    wire3StabilityNAQM: Optional[float] = None
    priPrecipValidCalQF: Optional[int] = None

@dataclass
class PRIPRE30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PRIPRE_30min
    class_class_curie: ClassVar[str] = "neon:PRIPRE_30min"
    class_name: ClassVar[str] = "PRIPRE_30min"
    class_model_uri: ClassVar[URIRef] = NEON.PRIPRE30min

    priPrecipBulk: Optional[float] = None
    priPrecipExpUncert: Optional[float] = None
    priPrecipNullQF: Optional[int] = None
    inletHeaters1QM: Optional[float] = None
    inletHeaters2QM: Optional[float] = None
    inletHeaters3QM: Optional[float] = None
    priPrecipFinalQF: Optional[str] = None
    priPrecipNumPts: Optional[float] = None
    inletHeatersNAQM: Optional[float] = None
    priPrecipFinalQFSciRvw: Optional[str] = None

@dataclass
class SECPRE1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SECPRE_1min
    class_class_curie: ClassVar[str] = "neon:SECPRE_1min"
    class_name: ClassVar[str] = "SECPRE_1min"
    class_model_uri: ClassVar[URIRef] = NEON.SECPRE1min

    secPrecipHeaterQAQCRpt: Optional[str] = None

@dataclass
class SECPRE30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SECPRE_30min
    class_class_curie: ClassVar[str] = "neon:SECPRE_30min"
    class_name: ClassVar[str] = "SECPRE_30min"
    class_model_uri: ClassVar[URIRef] = NEON.SECPRE30min

    secPrecipBulk: Optional[float] = None
    secPrecipExpUncert: Optional[float] = None
    secPrecipHeater0QM: Optional[float] = None
    secPrecipHeater1QM: Optional[float] = None
    secPrecipHeater2QM: Optional[float] = None
    secPrecipHeater3QM: Optional[float] = None
    secPrecipRangeQF: Optional[int] = None
    secPrecipSciRvwQF: Optional[str] = None
    secPrecipValidCalQF: Optional[int] = None

class SAAT1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SAAT_1min
    class_class_curie: ClassVar[str] = "neon:SAAT_1min"
    class_name: ClassVar[str] = "SAAT_1min"
    class_model_uri: ClassVar[URIRef] = NEON.SAAT1min


@dataclass
class SAAT30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SAAT_30min
    class_class_curie: ClassVar[str] = "neon:SAAT_30min"
    class_name: ClassVar[str] = "SAAT_30min"
    class_model_uri: ClassVar[URIRef] = NEON.SAAT30min

    tempSingleMean: Optional[float] = None
    tempSingleMinimum: Optional[float] = None
    tempSingleMaximum: Optional[float] = None
    tempSingleVariance: Optional[float] = None
    tempSingleNumPts: Optional[float] = None
    tempSingleExpUncert: Optional[float] = None
    tempSingleStdErMean: Optional[float] = None

@dataclass
class NSW15Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.NSW_15_minute
    class_class_curie: ClassVar[str] = "neon:NSW_15_minute"
    class_name: ClassVar[str] = "NSW_15_minute"
    class_model_uri: ClassVar[URIRef] = NEON.NSW15Minute

    surfWaterNitrateMean: Optional[float] = None
    surfWaterNitrateMinimum: Optional[float] = None
    surfWaterNitrateMaximum: Optional[float] = None
    surfWaterNitrateVariance: Optional[float] = None
    surfWaterNitrateNumPts: Optional[float] = None
    surfWaterNitrateExpUncert: Optional[float] = None
    surfWaterNitrateStdErMean: Optional[float] = None
    nitrateInternalHumidityPassQM: Optional[float] = None
    nitrateInternalHumidityFailQM: Optional[float] = None
    nitrateInternalHumidityNAQM: Optional[float] = None
    nitrateInternalHumidityQAQCRpt: Optional[str] = None
    nitrateLightDarkSpectralRatioPassQM: Optional[float] = None
    nitrateLightDarkSpectralRatioFailQM: Optional[float] = None
    nitrateLightDarkSpectralRatioNAQM: Optional[float] = None
    nitrateLightDarkSpectralRatioQAQCRpt: Optional[str] = None

class TSW5min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TSW_5min
    class_class_curie: ClassVar[str] = "neon:TSW_5min"
    class_name: ClassVar[str] = "TSW_5min"
    class_model_uri: ClassVar[URIRef] = NEON.TSW5min


@dataclass
class IRBT1Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.IRBT_1_minute
    class_class_curie: ClassVar[str] = "neon:IRBT_1_minute"
    class_name: ClassVar[str] = "IRBT_1_minute"
    class_model_uri: ClassVar[URIRef] = NEON.IRBT1Minute

    NANQAQCRpt: Optional[str] = None

class SRPP1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SRPP_1min
    class_class_curie: ClassVar[str] = "neon:SRPP_1min"
    class_name: ClassVar[str] = "SRPP_1min"
    class_model_uri: ClassVar[URIRef] = NEON.SRPP1min


@dataclass
class SRPP30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SRPP_30min
    class_class_curie: ClassVar[str] = "neon:SRPP_30min"
    class_name: ClassVar[str] = "SRPP_30min"
    class_model_uri: ClassVar[URIRef] = NEON.SRPP30min

    shortRadMean: Optional[float] = None
    shortRadMinimum: Optional[float] = None
    shortRadMaximum: Optional[float] = None
    shortRadVariance: Optional[float] = None
    shortRadNumPts: Optional[float] = None
    shortRadExpUncert: Optional[float] = None
    shortRadStdErMean: Optional[float] = None

class PARQL1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARQL_1min
    class_class_curie: ClassVar[str] = "neon:PARQL_1min"
    class_name: ClassVar[str] = "PARQL_1min"
    class_model_uri: ClassVar[URIRef] = NEON.PARQL1min


@dataclass
class SCO2C1Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SCO2C_1_minute
    class_class_curie: ClassVar[str] = "neon:SCO2C_1_minute"
    class_name: ClassVar[str] = "SCO2C_1_minute"
    class_model_uri: ClassVar[URIRef] = NEON.SCO2C1Minute

    warmUpInstallationQAQCRpt: Optional[str] = None
    sensorErrorStatusQAQCRpt: Optional[str] = None
    temperatureSCO2QAQCRpt: Optional[str] = None
    pressureRangeQAQCRpt: Optional[str] = None

@dataclass
class SHF1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SHF_1min
    class_class_curie: ClassVar[str] = "neon:SHF_1min"
    class_name: ClassVar[str] = "SHF_1min"
    class_model_uri: ClassVar[URIRef] = NEON.SHF1min

    SHFInSituCorFactor: Optional[float] = None

class ST1Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ST_1_minute
    class_class_curie: ClassVar[str] = "neon:ST_1_minute"
    class_name: ClassVar[str] = "ST_1_minute"
    class_model_uri: ClassVar[URIRef] = NEON.ST1Minute


@dataclass
class TAAT1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TAAT_1min
    class_class_curie: ClassVar[str] = "neon:TAAT_1min"
    class_name: ClassVar[str] = "TAAT_1min"
    class_model_uri: ClassVar[URIRef] = NEON.TAAT1min

    rangeQAQCRpt: Optional[str] = None
    persistenceQAQCRpt: Optional[str] = None
    stepQAQCRpt: Optional[str] = None
    nullQAQCRpt: Optional[str] = None
    gapQAQCRpt: Optional[str] = None
    consistencyQAQCRpt: Optional[str] = None
    spikeQAQCRpt: Optional[str] = None
    alphaQAQCRpt: Optional[str] = None
    betaQAQCRpt: Optional[str] = None
    flowQAQCRpt: Optional[str] = None
    tempAveQAQCRpt: Optional[str] = None
    validCalQAQCRpt: Optional[str] = None

class SLRNRB1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SLRNRB_1min
    class_class_curie: ClassVar[str] = "neon:SLRNRB_1min"
    class_name: ClassVar[str] = "SLRNRB_1min"
    class_model_uri: ClassVar[URIRef] = NEON.SLRNRB1min


@dataclass
class SLRNR1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SLRNR_1min
    class_class_curie: ClassVar[str] = "neon:SLRNR_1min"
    class_name: ClassVar[str] = "SLRNR_1min"
    class_model_uri: ClassVar[URIRef] = NEON.SLRNR1min

    heaterQAQCRpt: Optional[str] = None
    inSWRangeQAQCRpt: Optional[str] = None
    inSWPersistenceQAQCRpt: Optional[str] = None
    inSWStepQAQCRpt: Optional[str] = None
    inSWNullQAQCRpt: Optional[str] = None
    inSWGapQAQCRpt: Optional[str] = None
    inSWConsistencyQAQCRpt: Optional[str] = None
    inSWSpikeQAQCRpt: Optional[str] = None
    inSWAlphaQAQCRpt: Optional[str] = None
    inSWBetaQAQCRpt: Optional[str] = None
    outSWRangeQAQCRpt: Optional[str] = None
    outSWPersistenceQAQCRpt: Optional[str] = None
    outSWStepQAQCRpt: Optional[str] = None
    outSWNullQAQCRpt: Optional[str] = None
    outSWGapQAQCRpt: Optional[str] = None
    outSWConsistencyQAQCRpt: Optional[str] = None
    outSWSpikeQAQCRpt: Optional[str] = None
    outSWAlphaQAQCRpt: Optional[str] = None
    outSWBetaQAQCRpt: Optional[str] = None
    inLWRangeQAQCRpt: Optional[str] = None
    inLWPersistenceQAQCRpt: Optional[str] = None
    inLWStepQAQCRpt: Optional[str] = None
    inLWNullQAQCRpt: Optional[str] = None
    inLWGapQAQCRpt: Optional[str] = None
    inLWConsistencyQAQCRpt: Optional[str] = None
    inLWSpikeQAQCRpt: Optional[str] = None
    inLWAlphaQAQCRpt: Optional[str] = None
    inLWBetaQAQCRpt: Optional[str] = None
    outLWRangeQAQCRpt: Optional[str] = None
    outLWPersistenceQAQCRpt: Optional[str] = None
    outLWStepQAQCRpt: Optional[str] = None
    outLWNullQAQCRpt: Optional[str] = None
    outLWGapQAQCRpt: Optional[str] = None
    outLWConsistencyQAQCRpt: Optional[str] = None
    outLWSpikeQAQCRpt: Optional[str] = None
    outLWAlphaQAQCRpt: Optional[str] = None
    outLWBetaQAQCRpt: Optional[str] = None
    inLWValidCalQAQCRpt: Optional[str] = None
    inSWValidCalQAQCRpt: Optional[str] = None
    outLWValidCalQAQCRpt: Optional[str] = None
    outSWValidCalQAQCRpt: Optional[str] = None

@dataclass
class TSW30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TSW_30min
    class_class_curie: ClassVar[str] = "neon:TSW_30min"
    class_name: ClassVar[str] = "TSW_30min"
    class_model_uri: ClassVar[URIRef] = NEON.TSW30min

    surfWaterTempExpUncert: Optional[float] = None
    surfWaterTempMean: Optional[float] = None
    surfWaterTempMinimum: Optional[float] = None
    surfWaterTempMaximum: Optional[float] = None
    surfWaterTempVariance: Optional[float] = None
    surfWaterTempNumPts: Optional[float] = None
    surfWaterTempStdErMean: Optional[float] = None

@dataclass
class IRBT30Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.IRBT_30_minute
    class_class_curie: ClassVar[str] = "neon:IRBT_30_minute"
    class_name: ClassVar[str] = "IRBT_30_minute"
    class_model_uri: ClassVar[URIRef] = NEON.IRBT30Minute

    bioTempMean: Optional[float] = None
    bioTempMinimum: Optional[float] = None
    bioTempMaximum: Optional[float] = None
    bioTempVariance: Optional[float] = None
    bioTempNumPts: Optional[float] = None
    bioTempExpUncert: Optional[float] = None
    bioTempStdErMean: Optional[float] = None
    NANFailQM: Optional[float] = None
    NANPassQM: Optional[float] = None
    NANNAQM: Optional[float] = None

@dataclass
class PARQL30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARQL_30min
    class_class_curie: ClassVar[str] = "neon:PARQL_30min"
    class_name: ClassVar[str] = "PARQL_30min"
    class_model_uri: ClassVar[URIRef] = NEON.PARQL30min

    linePARMean: Optional[float] = None
    linePARMinimum: Optional[float] = None
    linePARMaximum: Optional[float] = None
    linePARVariance: Optional[float] = None
    linePARNumPts: Optional[float] = None
    linePARSkewness: Optional[float] = None
    linePARKurtosis: Optional[float] = None
    linePARExpUncert: Optional[float] = None
    linePARStdErMean: Optional[float] = None

@dataclass
class SCO2C30Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SCO2C_30_minute
    class_class_curie: ClassVar[str] = "neon:SCO2C_30_minute"
    class_name: ClassVar[str] = "SCO2C_30_minute"
    class_model_uri: ClassVar[URIRef] = NEON.SCO2C30Minute

    soilCO2concentrationMean: Optional[float] = None
    soilCO2concentrationMinimum: Optional[float] = None
    soilCO2concentrationMaximum: Optional[float] = None
    soilCO2concentrationVariance: Optional[float] = None
    soilCO2concentrationNumPts: Optional[float] = None
    soilCO2concentrationExpUncert: Optional[float] = None
    soilCO2concentrationStdErMean: Optional[float] = None
    warmUpInstallationFailQM: Optional[float] = None
    warmUpInstallationPassQM: Optional[float] = None
    warmUpInstallationNAQM: Optional[float] = None
    sensorErrorStatusFailQM: Optional[float] = None
    sensorErrorStatusPassQM: Optional[float] = None
    sensorErrorStatusNAQM: Optional[float] = None
    temperatureSCO2FailQM: Optional[float] = None
    temperatureSCO2PassQM: Optional[float] = None
    temperatureSCO2NAQM: Optional[float] = None
    pressureRangeFailQM: Optional[float] = None
    pressureRangePassQM: Optional[float] = None
    pressureRangeNAQM: Optional[float] = None
    soilCO2FinalQF: Optional[str] = None

@dataclass
class SHF30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SHF_30min
    class_class_curie: ClassVar[str] = "neon:SHF_30min"
    class_name: ClassVar[str] = "SHF_30min"
    class_model_uri: ClassVar[URIRef] = NEON.SHF30min

    SHFMean: Optional[float] = None
    SHFMinimum: Optional[float] = None
    SHFMaximum: Optional[float] = None
    SHFVariance: Optional[float] = None
    SHFNumPts: Optional[float] = None
    SHFExpUncert: Optional[float] = None
    SHFStdErMean: Optional[float] = None
    SHFCalHeaterQF: Optional[int] = None
    SHFCalPeriodFlag: Optional[float] = None
    SHFInSituCorQF: Optional[int] = None
    SHFCalHeaterOnMetric: Optional[float] = None
    SHFCalHeaterOffMetric: Optional[float] = None
    SHFCalHeaterFailQM: Optional[float] = None
    SHFCalHeaterPassQM: Optional[float] = None
    SHFCalHeaterNAQM: Optional[float] = None
    SHFCalPeriodOnMetric: Optional[float] = None
    SHFCalPeriodOffMetric: Optional[float] = None
    SHFInSituCorFailQM: Optional[float] = None
    SHFInSituCorPassQM: Optional[float] = None
    SHFInSituCorNAQM: Optional[float] = None

@dataclass
class ST30Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ST_30_minute
    class_class_curie: ClassVar[str] = "neon:ST_30_minute"
    class_name: ClassVar[str] = "ST_30_minute"
    class_model_uri: ClassVar[URIRef] = NEON.ST30Minute

    soilTempMean: Optional[float] = None
    soilTempMinimum: Optional[float] = None
    soilTempMaximum: Optional[float] = None
    soilTempVariance: Optional[float] = None
    soilTempNumPts: Optional[float] = None
    soilTempExpUncert: Optional[float] = None
    soilTempStdErMean: Optional[float] = None

@dataclass
class TAAT30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TAAT_30min
    class_class_curie: ClassVar[str] = "neon:TAAT_30min"
    class_name: ClassVar[str] = "TAAT_30min"
    class_model_uri: ClassVar[URIRef] = NEON.TAAT30min

    rangeFailQM: Optional[float] = None
    rangePassQM: Optional[float] = None
    rangeNAQM: Optional[float] = None
    persistenceFailQM: Optional[float] = None
    persistencePassQM: Optional[float] = None
    persistenceNAQM: Optional[float] = None
    stepFailQM: Optional[float] = None
    stepPassQM: Optional[float] = None
    stepNAQM: Optional[float] = None
    nullFailQM: Optional[float] = None
    nullPassQM: Optional[float] = None
    nullNAQM: Optional[float] = None
    gapFailQM: Optional[float] = None
    gapPassQM: Optional[float] = None
    gapNAQM: Optional[float] = None
    spikeFailQM: Optional[float] = None
    spikePassQM: Optional[float] = None
    spikeNAQM: Optional[float] = None
    consistencyFailQM: Optional[float] = None
    consistencyPassQM: Optional[float] = None
    consistencyNAQM: Optional[float] = None
    flowFailQM: Optional[float] = None
    flowPassQM: Optional[float] = None
    flowNAQM: Optional[float] = None
    alphaQM: Optional[float] = None
    betaQM: Optional[float] = None
    finalQF: Optional[str] = None
    tempTripleMean: Optional[float] = None
    tempTripleMinimum: Optional[float] = None
    tempTripleMaximum: Optional[float] = None
    tempTripleVariance: Optional[float] = None
    tempTripleNumPts: Optional[float] = None
    tempTripleExpUncert: Optional[float] = None
    tempTripleStdErMean: Optional[float] = None
    tempAve0QM: Optional[float] = None
    tempAve1QM: Optional[float] = None
    tempAve2QM: Optional[float] = None
    tempAve3QM: Optional[float] = None
    tempAve4QM: Optional[float] = None
    tempAve5QM: Optional[float] = None
    tempAve6QM: Optional[float] = None
    tempAve7QM: Optional[float] = None
    finalQFSciRvw: Optional[str] = None

class SLRNRB30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SLRNRB_30min
    class_class_curie: ClassVar[str] = "neon:SLRNRB_30min"
    class_name: ClassVar[str] = "SLRNRB_30min"
    class_model_uri: ClassVar[URIRef] = NEON.SLRNRB30min


@dataclass
class SLRNR30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SLRNR_30min
    class_class_curie: ClassVar[str] = "neon:SLRNR_30min"
    class_name: ClassVar[str] = "SLRNR_30min"
    class_model_uri: ClassVar[URIRef] = NEON.SLRNR30min

    heaterFailQM: Optional[float] = None
    heaterPassQM: Optional[float] = None
    heaterNAQM: Optional[float] = None
    inSWMean: Optional[float] = None
    inSWMinimum: Optional[float] = None
    inSWMaximum: Optional[float] = None
    inSWVariance: Optional[float] = None
    inSWNumPts: Optional[float] = None
    inSWExpUncert: Optional[float] = None
    inSWStdErMean: Optional[float] = None
    inSWRangeFailQM: Optional[float] = None
    inSWRangePassQM: Optional[float] = None
    inSWRangeNAQM: Optional[float] = None
    inSWPersistenceFailQM: Optional[float] = None
    inSWPersistencePassQM: Optional[float] = None
    inSWPersistenceNAQM: Optional[float] = None
    inSWStepFailQM: Optional[float] = None
    inSWStepPassQM: Optional[float] = None
    inSWStepNAQM: Optional[float] = None
    inSWNullFailQM: Optional[float] = None
    inSWNullPassQM: Optional[float] = None
    inSWNullNAQM: Optional[float] = None
    inSWGapFailQM: Optional[float] = None
    inSWGapPassQM: Optional[float] = None
    inSWGapNAQM: Optional[float] = None
    inSWSpikeFailQM: Optional[float] = None
    inSWSpikePassQM: Optional[float] = None
    inSWSpikeNAQM: Optional[float] = None
    inSWConsistencyFailQM: Optional[float] = None
    inSWConsistencyPassQM: Optional[float] = None
    inSWConsistencyNAQM: Optional[float] = None
    inSWAlphaQM: Optional[float] = None
    inSWBetaQM: Optional[float] = None
    inSWFinalQF: Optional[str] = None
    outSWMean: Optional[float] = None
    outSWMinimum: Optional[float] = None
    outSWMaximum: Optional[float] = None
    outSWVariance: Optional[float] = None
    outSWNumPts: Optional[float] = None
    outSWExpUncert: Optional[float] = None
    outSWStdErMean: Optional[float] = None
    outSWRangeFailQM: Optional[float] = None
    outSWRangePassQM: Optional[float] = None
    outSWRangeNAQM: Optional[float] = None
    outSWPersistenceFailQM: Optional[float] = None
    outSWPersistencePassQM: Optional[float] = None
    outSWPersistenceNAQM: Optional[float] = None
    outSWStepFailQM: Optional[float] = None
    outSWStepPassQM: Optional[float] = None
    outSWStepNAQM: Optional[float] = None
    outSWNullFailQM: Optional[float] = None
    outSWNullPassQM: Optional[float] = None
    outSWNullNAQM: Optional[float] = None
    outSWGapFailQM: Optional[float] = None
    outSWGapPassQM: Optional[float] = None
    outSWGapNAQM: Optional[float] = None
    outSWSpikeFailQM: Optional[float] = None
    outSWSpikePassQM: Optional[float] = None
    outSWSpikeNAQM: Optional[float] = None
    outSWConsistencyFailQM: Optional[float] = None
    outSWConsistencyPassQM: Optional[float] = None
    outSWConsistencyNAQM: Optional[float] = None
    outSWAlphaQM: Optional[float] = None
    outSWBetaQM: Optional[float] = None
    outSWFinalQF: Optional[str] = None
    inLWMean: Optional[float] = None
    inLWMinimum: Optional[float] = None
    inLWMaximum: Optional[float] = None
    inLWVariance: Optional[float] = None
    inLWNumPts: Optional[float] = None
    inLWExpUncert: Optional[float] = None
    inLWStdErMean: Optional[float] = None
    inLWRangeFailQM: Optional[float] = None
    inLWRangePassQM: Optional[float] = None
    inLWRangeNAQM: Optional[float] = None
    inLWPersistenceFailQM: Optional[float] = None
    inLWPersistencePassQM: Optional[float] = None
    inLWPersistenceNAQM: Optional[float] = None
    inLWStepFailQM: Optional[float] = None
    inLWStepPassQM: Optional[float] = None
    inLWStepNAQM: Optional[float] = None
    inLWNullFailQM: Optional[float] = None
    inLWNullPassQM: Optional[float] = None
    inLWNullNAQM: Optional[float] = None
    inLWGapFailQM: Optional[float] = None
    inLWGapPassQM: Optional[float] = None
    inLWGapNAQM: Optional[float] = None
    inLWSpikeFailQM: Optional[float] = None
    inLWSpikePassQM: Optional[float] = None
    inLWSpikeNAQM: Optional[float] = None
    inLWConsistencyFailQM: Optional[float] = None
    inLWConsistencyPassQM: Optional[float] = None
    inLWConsistencyNAQM: Optional[float] = None
    inLWAlphaQM: Optional[float] = None
    inLWBetaQM: Optional[float] = None
    inLWFinalQF: Optional[str] = None
    outLWMean: Optional[float] = None
    outLWMinimum: Optional[float] = None
    outLWMaximum: Optional[float] = None
    outLWVariance: Optional[float] = None
    outLWNumPts: Optional[float] = None
    outLWExpUncert: Optional[float] = None
    outLWStdErMean: Optional[float] = None
    outLWRangeFailQM: Optional[float] = None
    outLWRangePassQM: Optional[float] = None
    outLWRangeNAQM: Optional[float] = None
    outLWPersistenceFailQM: Optional[float] = None
    outLWPersistencePassQM: Optional[float] = None
    outLWPersistenceNAQM: Optional[float] = None
    outLWStepFailQM: Optional[float] = None
    outLWStepPassQM: Optional[float] = None
    outLWStepNAQM: Optional[float] = None
    outLWNullFailQM: Optional[float] = None
    outLWNullPassQM: Optional[float] = None
    outLWNullNAQM: Optional[float] = None
    outLWGapFailQM: Optional[float] = None
    outLWGapPassQM: Optional[float] = None
    outLWGapNAQM: Optional[float] = None
    outLWSpikeFailQM: Optional[float] = None
    outLWSpikePassQM: Optional[float] = None
    outLWSpikeNAQM: Optional[float] = None
    outLWConsistencyFailQM: Optional[float] = None
    outLWConsistencyPassQM: Optional[float] = None
    outLWConsistencyNAQM: Optional[float] = None
    outLWAlphaQM: Optional[float] = None
    outLWBetaQM: Optional[float] = None
    outLWFinalQF: Optional[str] = None
    inLWFinalQFSciRvw: Optional[str] = None
    inSWFinalQFSciRvw: Optional[str] = None
    outLWFinalQFSciRvw: Optional[str] = None
    outSWFinalQFSciRvw: Optional[str] = None
    inLWValidCalFailQM: Optional[float] = None
    inLWValidCalNAQM: Optional[float] = None
    inLWValidCalPassQM: Optional[float] = None
    inSWValidCalFailQM: Optional[float] = None
    inSWValidCalNAQM: Optional[float] = None
    inSWValidCalPassQM: Optional[float] = None
    outLWValidCalFailQM: Optional[float] = None
    outLWValidCalNAQM: Optional[float] = None
    outLWValidCalPassQM: Optional[float] = None
    outSWValidCalFailQM: Optional[float] = None
    outSWValidCalNAQM: Optional[float] = None
    outSWValidCalPassQM: Optional[float] = None

@dataclass
class 2DWSD2min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON["2DWSD_2min"]
    class_class_curie: ClassVar[str] = "neon:2DWSD_2min"
    class_name: ClassVar[str] = "2DWSD_2min"
    class_model_uri: ClassVar[URIRef] = NEON.2DWSD2min

    windSpeedRangeQAQCRpt: Optional[str] = None
    windSpeedPersistenceQAQCRpt: Optional[str] = None
    windSpeedStepQAQCRpt: Optional[str] = None
    windSpeedNullQAQCRpt: Optional[str] = None
    windSpeedGapQAQCRpt: Optional[str] = None
    windSpeedConsistencyQAQCRpt: Optional[str] = None
    windSpeedSpikeQAQCRpt: Optional[str] = None
    windSpeedAlphaQAQCRpt: Optional[str] = None
    windSpeedBetaQAQCRpt: Optional[str] = None
    windDirRangeQAQCRpt: Optional[str] = None
    windDirPersistenceQAQCRpt: Optional[str] = None
    windDirStepQAQCRpt: Optional[str] = None
    windDirNullQAQCRpt: Optional[str] = None
    windDirGapQAQCRpt: Optional[str] = None
    windDirConsistencyQAQCRpt: Optional[str] = None
    windDirSpikeQAQCRpt: Optional[str] = None
    windDirAlphaQAQCRpt: Optional[str] = None
    windDirBetaQAQCRpt: Optional[str] = None
    windDirDistortedFlowQAQCRpt: Optional[str] = None
    windSpeedSensorErrorQAQCRpt: Optional[str] = None
    windDirSensorErrorQAQCRpt: Optional[str] = None
    windDirValidCalQAQCRpt: Optional[str] = None
    windSpeedValidCalQAQCRpt: Optional[str] = None

@dataclass
class 2DWSD30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON["2DWSD_30min"]
    class_class_curie: ClassVar[str] = "neon:2DWSD_30min"
    class_name: ClassVar[str] = "2DWSD_30min"
    class_model_uri: ClassVar[URIRef] = NEON.2DWSD30min

    windSpeedMinimum: Optional[float] = None
    windSpeedMaximum: Optional[float] = None
    windSpeedVariance: Optional[float] = None
    windSpeedNumPts: Optional[float] = None
    windSpeedExpUncert: Optional[float] = None
    windSpeedStdErMean: Optional[float] = None
    windSpeedRangeFailQM: Optional[float] = None
    windSpeedRangePassQM: Optional[float] = None
    windSpeedRangeNAQM: Optional[float] = None
    windSpeedPersistenceFailQM: Optional[float] = None
    windSpeedPersistencePassQM: Optional[float] = None
    windSpeedPersistenceNAQM: Optional[float] = None
    windSpeedStepFailQM: Optional[float] = None
    windSpeedStepPassQM: Optional[float] = None
    windSpeedStepNAQM: Optional[float] = None
    windSpeedNullFailQM: Optional[float] = None
    windSpeedNullPassQM: Optional[float] = None
    windSpeedNullNAQM: Optional[float] = None
    windSpeedGapFailQM: Optional[float] = None
    windSpeedGapPassQM: Optional[float] = None
    windSpeedGapNAQM: Optional[float] = None
    windSpeedSpikeFailQM: Optional[float] = None
    windSpeedSpikePassQM: Optional[float] = None
    windSpeedSpikeNAQM: Optional[float] = None
    windSpeedConsistencyFailQM: Optional[float] = None
    windSpeedConsistencyPassQM: Optional[float] = None
    windSpeedConsistencyNAQM: Optional[float] = None
    windSpeedAlphaQM: Optional[float] = None
    windSpeedBetaQM: Optional[float] = None
    windSpeedFinalQF: Optional[str] = None
    windDirVariance: Optional[float] = None
    windDirNumPts: Optional[float] = None
    windDirExpUncert: Optional[float] = None
    windDirStdErMean: Optional[float] = None
    windDirRangeFailQM: Optional[float] = None
    windDirRangePassQM: Optional[float] = None
    windDirRangeNAQM: Optional[float] = None
    windDirPersistenceFailQM: Optional[float] = None
    windDirPersistencePassQM: Optional[float] = None
    windDirPersistenceNAQM: Optional[float] = None
    windDirStepFailQM: Optional[float] = None
    windDirStepPassQM: Optional[float] = None
    windDirStepNAQM: Optional[float] = None
    windDirNullFailQM: Optional[float] = None
    windDirNullPassQM: Optional[float] = None
    windDirNullNAQM: Optional[float] = None
    windDirGapFailQM: Optional[float] = None
    windDirGapPassQM: Optional[float] = None
    windDirGapNAQM: Optional[float] = None
    windDirSpikeFailQM: Optional[float] = None
    windDirSpikePassQM: Optional[float] = None
    windDirSpikeNAQM: Optional[float] = None
    windDirConsistencyFailQM: Optional[float] = None
    windDirConsistencyPassQM: Optional[float] = None
    windDirConsistencyNAQM: Optional[float] = None
    windDirAlphaQM: Optional[float] = None
    windDirBetaQM: Optional[float] = None
    windDirFinalQF: Optional[str] = None
    windDirDistortedFlowFailQM: Optional[float] = None
    windDirDistortedFlowPassQM: Optional[float] = None
    windDirDistortedFlowNAQM: Optional[float] = None
    windSpeedSensorErrorFailQM: Optional[float] = None
    windSpeedSensorErrorPassQM: Optional[float] = None
    windSpeedSensorErrorNAQM: Optional[float] = None
    windSpeedCalmWindQF: Optional[int] = None
    windDirSensorErrorFailQM: Optional[float] = None
    windDirSensorErrorPassQM: Optional[float] = None
    windDirSensorErrorNAQM: Optional[float] = None
    windDirCalmWindQF: Optional[int] = None
    windDirValidCalFailQM: Optional[float] = None
    windDirValidCalNAQM: Optional[float] = None
    windDirValidCalPassQM: Optional[float] = None
    windSpeedValidCalFailQM: Optional[float] = None
    windSpeedValidCalNAQM: Optional[float] = None
    windSpeedValidCalPassQM: Optional[float] = None
    windDirFinalQFSciRvw: Optional[str] = None
    windSpeedFinalQFSciRvw: Optional[str] = None

@dataclass
class WindSpeedDirBuoy(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.windSpeedDirBuoy
    class_class_curie: ClassVar[str] = "neon:windSpeedDirBuoy"
    class_name: ClassVar[str] = "windSpeedDirBuoy"
    class_model_uri: ClassVar[URIRef] = NEON.WindSpeedDirBuoy

    windSpeedMean: Optional[float] = None
    windDirMean: Optional[float] = None
    vectorAverageHeading: Optional[float] = None

@dataclass
class BP1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.BP_1min
    class_class_curie: ClassVar[str] = "neon:BP_1min"
    class_name: ClassVar[str] = "BP_1min"
    class_model_uri: ClassVar[URIRef] = NEON.BP1min

    staPresRangeQAQCRpt: Optional[str] = None
    staPresPersistenceQAQCRpt: Optional[str] = None
    staPresStepQAQCRpt: Optional[str] = None
    staPresNullQAQCRpt: Optional[str] = None
    staPresGapQAQCRpt: Optional[str] = None
    staPresConsistencyQAQCRpt: Optional[str] = None
    staPresSpikeQAQCRpt: Optional[str] = None
    staPresAlphaQAQCRpt: Optional[str] = None
    staPresBetaQAQCRpt: Optional[str] = None
    staPresValidCalQAQCRpt: Optional[str] = None

@dataclass
class BP30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.BP_30min
    class_class_curie: ClassVar[str] = "neon:BP_30min"
    class_name: ClassVar[str] = "BP_30min"
    class_model_uri: ClassVar[URIRef] = NEON.BP30min

    staPresMean: Optional[float] = None
    staPresMinimum: Optional[float] = None
    staPresMaximum: Optional[float] = None
    staPresVariance: Optional[float] = None
    staPresNumPts: Optional[float] = None
    staPresExpUncert: Optional[float] = None
    staPresStdErMean: Optional[float] = None
    staPresRangeFailQM: Optional[float] = None
    staPresRangePassQM: Optional[float] = None
    staPresRangeNAQM: Optional[float] = None
    staPresPersistenceFailQM: Optional[float] = None
    staPresPersistencePassQM: Optional[float] = None
    staPresPersistenceNAQM: Optional[float] = None
    staPresStepFailQM: Optional[float] = None
    staPresStepPassQM: Optional[float] = None
    staPresStepNAQM: Optional[float] = None
    staPresNullFailQM: Optional[float] = None
    staPresNullPassQM: Optional[float] = None
    staPresNullNAQM: Optional[float] = None
    staPresGapFailQM: Optional[float] = None
    staPresGapPassQM: Optional[float] = None
    staPresGapNAQM: Optional[float] = None
    staPresSpikeFailQM: Optional[float] = None
    staPresSpikePassQM: Optional[float] = None
    staPresSpikeNAQM: Optional[float] = None
    staPresConsistencyFailQM: Optional[float] = None
    staPresConsistencyPassQM: Optional[float] = None
    staPresConsistencyNAQM: Optional[float] = None
    staPresAlphaQM: Optional[float] = None
    staPresBetaQM: Optional[float] = None
    staPresFinalQF: Optional[str] = None
    corPres: Optional[float] = None
    corPresExpUncert: Optional[float] = None
    corPresFinalQF: Optional[str] = None
    corPresTempQF: Optional[str] = None
    corPresDewPtQF: Optional[str] = None
    staPresValidCalFailQM: Optional[float] = None
    staPresValidCalNAQM: Optional[float] = None
    staPresValidCalPassQM: Optional[float] = None
    corPresFinalQFSciRvw: Optional[str] = None
    staPresFinalQFSciRvw: Optional[str] = None

@dataclass
class SRDDP1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SRDDP_1min
    class_class_curie: ClassVar[str] = "neon:SRDDP_1min"
    class_name: ClassVar[str] = "SRDDP_1min"
    class_model_uri: ClassVar[URIRef] = NEON.SRDDP1min

    difRadRangeQAQCRpt: Optional[str] = None
    difRadPersistenceQAQCRpt: Optional[str] = None
    difRadStepQAQCRpt: Optional[str] = None
    difRadNullQAQCRpt: Optional[str] = None
    difRadGapQAQCRpt: Optional[str] = None
    difRadConsistencyQAQCRpt: Optional[str] = None
    difRadSpikeQAQCRpt: Optional[str] = None
    difRadAlphaQAQCRpt: Optional[str] = None
    difRadBetaQAQCRpt: Optional[str] = None
    dirRadRangeQAQCRpt: Optional[str] = None
    dirRadPersistenceQAQCRpt: Optional[str] = None
    dirRadStepQAQCRpt: Optional[str] = None
    dirRadNullQAQCRpt: Optional[str] = None
    dirRadGapQAQCRpt: Optional[str] = None
    dirRadConsistencyQAQCRpt: Optional[str] = None
    dirRadSpikeQAQCRpt: Optional[str] = None
    dirRadAlphaQAQCRpt: Optional[str] = None
    dirRadBetaQAQCRpt: Optional[str] = None
    gloRadRangeQAQCRpt: Optional[str] = None
    gloRadPersistenceQAQCRpt: Optional[str] = None
    gloRadStepQAQCRpt: Optional[str] = None
    gloRadNullQAQCRpt: Optional[str] = None
    gloRadGapQAQCRpt: Optional[str] = None
    gloRadConsistencyQAQCRpt: Optional[str] = None
    gloRadSpikeQAQCRpt: Optional[str] = None
    gloRadAlphaQAQCRpt: Optional[str] = None
    gloRadBetaQAQCRpt: Optional[str] = None
    dirRadDirectionalQAQCRpt: Optional[str] = None
    difRadValidCalQAQCRpt: Optional[str] = None
    dirRadValidCalQAQCRpt: Optional[str] = None
    gloRadValidCalQAQCRpt: Optional[str] = None

@dataclass
class SRDDP30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SRDDP_30min
    class_class_curie: ClassVar[str] = "neon:SRDDP_30min"
    class_name: ClassVar[str] = "SRDDP_30min"
    class_model_uri: ClassVar[URIRef] = NEON.SRDDP30min

    difRadMean: Optional[float] = None
    difRadMinimum: Optional[float] = None
    difRadMaximum: Optional[float] = None
    difRadVariance: Optional[float] = None
    difRadNumPts: Optional[float] = None
    difRadExpUncert: Optional[float] = None
    difRadStdErMean: Optional[float] = None
    difRadRangeFailQM: Optional[float] = None
    difRadRangePassQM: Optional[float] = None
    difRadRangeNAQM: Optional[float] = None
    difRadPersistenceFailQM: Optional[float] = None
    difRadPersistencePassQM: Optional[float] = None
    difRadPersistenceNAQM: Optional[float] = None
    difRadStepFailQM: Optional[float] = None
    difRadStepPassQM: Optional[float] = None
    difRadStepNAQM: Optional[float] = None
    difRadNullFailQM: Optional[float] = None
    difRadNullPassQM: Optional[float] = None
    difRadNullNAQM: Optional[float] = None
    difRadGapFailQM: Optional[float] = None
    difRadGapPassQM: Optional[float] = None
    difRadGapNAQM: Optional[float] = None
    difRadSpikeFailQM: Optional[float] = None
    difRadSpikePassQM: Optional[float] = None
    difRadSpikeNAQM: Optional[float] = None
    difRadConsistencyFailQM: Optional[float] = None
    difRadConsistencyPassQM: Optional[float] = None
    difRadConsistencyNAQM: Optional[float] = None
    difRadAlphaQM: Optional[float] = None
    difRadBetaQM: Optional[float] = None
    difRadFinalQF: Optional[str] = None
    dirRadMean: Optional[float] = None
    dirRadMinimum: Optional[float] = None
    dirRadMaximum: Optional[float] = None
    dirRadVariance: Optional[float] = None
    dirRadNumPts: Optional[float] = None
    dirRadExpUncert: Optional[float] = None
    dirRadStdErMean: Optional[float] = None
    dirRadRangeFailQM: Optional[float] = None
    dirRadRangePassQM: Optional[float] = None
    dirRadRangeNAQM: Optional[float] = None
    dirRadPersistenceFailQM: Optional[float] = None
    dirRadPersistencePassQM: Optional[float] = None
    dirRadPersistenceNAQM: Optional[float] = None
    dirRadStepFailQM: Optional[float] = None
    dirRadStepPassQM: Optional[float] = None
    dirRadStepNAQM: Optional[float] = None
    dirRadNullFailQM: Optional[float] = None
    dirRadNullPassQM: Optional[float] = None
    dirRadNullNAQM: Optional[float] = None
    dirRadGapFailQM: Optional[float] = None
    dirRadGapPassQM: Optional[float] = None
    dirRadGapNAQM: Optional[float] = None
    dirRadSpikeFailQM: Optional[float] = None
    dirRadSpikePassQM: Optional[float] = None
    dirRadSpikeNAQM: Optional[float] = None
    dirRadConsistencyFailQM: Optional[float] = None
    dirRadConsistencyPassQM: Optional[float] = None
    dirRadConsistencyNAQM: Optional[float] = None
    dirRadAlphaQM: Optional[float] = None
    dirRadBetaQM: Optional[float] = None
    dirRadFinalQF: Optional[str] = None
    gloRadMean: Optional[float] = None
    gloRadMinimum: Optional[float] = None
    gloRadMaximum: Optional[float] = None
    gloRadVariance: Optional[float] = None
    gloRadNumPts: Optional[float] = None
    gloRadExpUncert: Optional[float] = None
    gloRadStdErMean: Optional[float] = None
    gloRadRangeFailQM: Optional[float] = None
    gloRadRangePassQM: Optional[float] = None
    gloRadRangeNAQM: Optional[float] = None
    gloRadPersistenceFailQM: Optional[float] = None
    gloRadPersistencePassQM: Optional[float] = None
    gloRadPersistenceNAQM: Optional[float] = None
    gloRadStepFailQM: Optional[float] = None
    gloRadStepPassQM: Optional[float] = None
    gloRadStepNAQM: Optional[float] = None
    gloRadNullFailQM: Optional[float] = None
    gloRadNullPassQM: Optional[float] = None
    gloRadNullNAQM: Optional[float] = None
    gloRadGapFailQM: Optional[float] = None
    gloRadGapPassQM: Optional[float] = None
    gloRadGapNAQM: Optional[float] = None
    gloRadSpikeFailQM: Optional[float] = None
    gloRadSpikePassQM: Optional[float] = None
    gloRadSpikeNAQM: Optional[float] = None
    gloRadConsistencyFailQM: Optional[float] = None
    gloRadConsistencyPassQM: Optional[float] = None
    gloRadConsistencyNAQM: Optional[float] = None
    gloRadAlphaQM: Optional[float] = None
    gloRadBetaQM: Optional[float] = None
    gloRadFinalQF: Optional[str] = None
    sunPres: Optional[float] = None
    sunPresNumPts: Optional[float] = None
    dirRadDirectionalFailQM: Optional[float] = None
    dirRadDirectionalPassQM: Optional[float] = None
    dirRadDirectionalNAQM: Optional[float] = None
    difRadValidCalFailQM: Optional[float] = None
    difRadValidCalNAQM: Optional[float] = None
    difRadValidCalPassQM: Optional[float] = None
    dirRadValidCalFailQM: Optional[float] = None
    dirRadValidCalNAQM: Optional[float] = None
    dirRadValidCalPassQM: Optional[float] = None
    gloRadValidCalFailQM: Optional[float] = None
    gloRadValidCalNAQM: Optional[float] = None
    gloRadValidCalPassQM: Optional[float] = None
    difRadFinalQFSciRvw: Optional[str] = None
    dirRadFinalQFSciRvw: Optional[str] = None
    gloRadFinalQFSciRvw: Optional[str] = None

class RHbuoy1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.RHbuoy_1min
    class_class_curie: ClassVar[str] = "neon:RHbuoy_1min"
    class_name: ClassVar[str] = "RHbuoy_1min"
    class_model_uri: ClassVar[URIRef] = NEON.RHbuoy1min


class RHbuoy30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.RHbuoy_30min
    class_class_curie: ClassVar[str] = "neon:RHbuoy_30min"
    class_name: ClassVar[str] = "RHbuoy_30min"
    class_model_uri: ClassVar[URIRef] = NEON.RHbuoy30min


@dataclass
class RH1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.RH_1min
    class_class_curie: ClassVar[str] = "neon:RH_1min"
    class_name: ClassVar[str] = "RH_1min"
    class_model_uri: ClassVar[URIRef] = NEON.RH1min

    RHRangeQAQCRpt: Optional[str] = None
    RHPersistenceQAQCRpt: Optional[str] = None
    RHStepQAQCRpt: Optional[str] = None
    RHNullQAQCRpt: Optional[str] = None
    RHGapQAQCRpt: Optional[str] = None
    RHConsistencyQAQCRpt: Optional[str] = None
    RHSpikeQAQCRpt: Optional[str] = None
    RHAlphaQAQCRpt: Optional[str] = None
    RHBetaQAQCRpt: Optional[str] = None
    tempRHRangeQAQCRpt: Optional[str] = None
    tempRHPersistenceQAQCRpt: Optional[str] = None
    tempRHStepQAQCRpt: Optional[str] = None
    tempRHNullQAQCRpt: Optional[str] = None
    tempRHGapQAQCRpt: Optional[str] = None
    tempRHConsistencyQAQCRpt: Optional[str] = None
    tempRHSpikeQAQCRpt: Optional[str] = None
    tempRHAlphaQAQCRpt: Optional[str] = None
    tempRHBetaQAQCRpt: Optional[str] = None
    dewTempRangeQAQCRpt: Optional[str] = None
    dewTempPersistenceQAQCRpt: Optional[str] = None
    dewTempStepQAQCRpt: Optional[str] = None
    dewTempNullQAQCRpt: Optional[str] = None
    dewTempGapQAQCRpt: Optional[str] = None
    dewTempConsistencyQAQCRpt: Optional[str] = None
    dewTempSpikeQAQCRpt: Optional[str] = None
    dewTempAlphaQAQCRpt: Optional[str] = None
    dewTempBetaQAQCRpt: Optional[str] = None
    RHSensorErrorQAQCRpt: Optional[str] = None
    dewTempValidCalQAQCRpt: Optional[str] = None
    RHValidCalQAQCRpt: Optional[str] = None

@dataclass
class RH30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.RH_30min
    class_class_curie: ClassVar[str] = "neon:RH_30min"
    class_name: ClassVar[str] = "RH_30min"
    class_model_uri: ClassVar[URIRef] = NEON.RH30min

    RHMean: Optional[float] = None
    RHMinimum: Optional[float] = None
    RHMaximum: Optional[float] = None
    RHVariance: Optional[float] = None
    RHNumPts: Optional[float] = None
    RHExpUncert: Optional[float] = None
    RHStdErMean: Optional[float] = None
    RHRangeFailQM: Optional[float] = None
    RHRangePassQM: Optional[float] = None
    RHRangeNAQM: Optional[float] = None
    RHPersistenceFailQM: Optional[float] = None
    RHPersistencePassQM: Optional[float] = None
    RHPersistenceNAQM: Optional[float] = None
    RHStepFailQM: Optional[float] = None
    RHStepPassQM: Optional[float] = None
    RHStepNAQM: Optional[float] = None
    RHNullFailQM: Optional[float] = None
    RHNullPassQM: Optional[float] = None
    RHNullNAQM: Optional[float] = None
    RHGapFailQM: Optional[float] = None
    RHGapPassQM: Optional[float] = None
    RHGapNAQM: Optional[float] = None
    RHSpikeFailQM: Optional[float] = None
    RHSpikePassQM: Optional[float] = None
    RHSpikeNAQM: Optional[float] = None
    RHConsistencyFailQM: Optional[float] = None
    RHConsistencyPassQM: Optional[float] = None
    RHConsistencyNAQM: Optional[float] = None
    RHAlphaQM: Optional[float] = None
    RHBetaQM: Optional[float] = None
    RHFinalQF: Optional[str] = None
    tempRHMean: Optional[float] = None
    tempRHMinimum: Optional[float] = None
    tempRHMaximum: Optional[float] = None
    tempRHVariance: Optional[float] = None
    tempRHNumPts: Optional[float] = None
    tempRHExpUncert: Optional[float] = None
    tempRHStdErMean: Optional[float] = None
    tempRHRangeFailQM: Optional[float] = None
    tempRHRangePassQM: Optional[float] = None
    tempRHRangeNAQM: Optional[float] = None
    tempRHPersistenceFailQM: Optional[float] = None
    tempRHPersistencePassQM: Optional[float] = None
    tempRHPersistenceNAQM: Optional[float] = None
    tempRHStepFailQM: Optional[float] = None
    tempRHStepPassQM: Optional[float] = None
    tempRHStepNAQM: Optional[float] = None
    tempRHNullFailQM: Optional[float] = None
    tempRHNullPassQM: Optional[float] = None
    tempRHNullNAQM: Optional[float] = None
    tempRHGapFailQM: Optional[float] = None
    tempRHGapPassQM: Optional[float] = None
    tempRHGapNAQM: Optional[float] = None
    tempRHSpikeFailQM: Optional[float] = None
    tempRHSpikePassQM: Optional[float] = None
    tempRHSpikeNAQM: Optional[float] = None
    tempRHConsistencyFailQM: Optional[float] = None
    tempRHConsistencyPassQM: Optional[float] = None
    tempRHConsistencyNAQM: Optional[float] = None
    tempRHAlphaQM: Optional[float] = None
    tempRHBetaQM: Optional[float] = None
    tempRHFinalQF: Optional[str] = None
    dewTempMean: Optional[float] = None
    dewTempMinimum: Optional[float] = None
    dewTempMaximum: Optional[float] = None
    dewTempVariance: Optional[float] = None
    dewTempNumPts: Optional[float] = None
    dewTempExpUncert: Optional[float] = None
    dewTempStdErMean: Optional[float] = None
    dewTempRangeFailQM: Optional[float] = None
    dewTempRangePassQM: Optional[float] = None
    dewTempRangeNAQM: Optional[float] = None
    dewTempPersistenceFailQM: Optional[float] = None
    dewTempPersistencePassQM: Optional[float] = None
    dewTempPersistenceNAQM: Optional[float] = None
    dewTempStepFailQM: Optional[float] = None
    dewTempStepPassQM: Optional[float] = None
    dewTempStepNAQM: Optional[float] = None
    dewTempNullFailQM: Optional[float] = None
    dewTempNullPassQM: Optional[float] = None
    dewTempNullNAQM: Optional[float] = None
    dewTempGapFailQM: Optional[float] = None
    dewTempGapPassQM: Optional[float] = None
    dewTempGapNAQM: Optional[float] = None
    dewTempSpikeFailQM: Optional[float] = None
    dewTempSpikePassQM: Optional[float] = None
    dewTempSpikeNAQM: Optional[float] = None
    dewTempConsistencyFailQM: Optional[float] = None
    dewTempConsistencyPassQM: Optional[float] = None
    dewTempConsistencyNAQM: Optional[float] = None
    dewTempAlphaQM: Optional[float] = None
    dewTempBetaQM: Optional[float] = None
    dewTempFinalQF: Optional[str] = None
    RHSensorErrorFailQM: Optional[float] = None
    RHSensorErrorPassQM: Optional[float] = None
    RHSensorErrorNAQM: Optional[float] = None
    dewTempFinalQFSciRvw: Optional[str] = None
    RHFinalQFSciRvw: Optional[str] = None
    tempRHFinalQFSciRvw: Optional[str] = None
    dewTempValidCalFailQM: Optional[float] = None
    dewTempValidCalNAQM: Optional[float] = None
    dewTempValidCalPassQM: Optional[float] = None
    RHValidCalFailQM: Optional[float] = None
    RHValidCalNAQM: Optional[float] = None
    RHValidCalPassQM: Optional[float] = None
    tempRHValidCalFailQM: Optional[float] = None
    tempRHValidCalNAQM: Optional[float] = None
    tempRHValidCalPassQM: Optional[float] = None

class THRPRE1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.THRPRE_1min
    class_class_curie: ClassVar[str] = "neon:THRPRE_1min"
    class_name: ClassVar[str] = "THRPRE_1min"
    class_model_uri: ClassVar[URIRef] = NEON.THRPRE1min


@dataclass
class THRPRE30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.THRPRE_30min
    class_class_curie: ClassVar[str] = "neon:THRPRE_30min"
    class_name: ClassVar[str] = "THRPRE_30min"
    class_model_uri: ClassVar[URIRef] = NEON.THRPRE30min

    TFPrecipBulk: Optional[float] = None
    TFPrecipExpUncert: Optional[float] = None
    TFPrecipRangeQF: Optional[int] = None
    TFPrecipSciRvwQF: Optional[str] = None
    TFPrecipValidCalQF: Optional[int] = None

@dataclass
class SWS1Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SWS_1_minute
    class_class_curie: ClassVar[str] = "neon:SWS_1_minute"
    class_name: ClassVar[str] = "SWS_1_minute"
    class_model_uri: ClassVar[URIRef] = NEON.SWS1Minute

    VSWCRangeQAQCRpt: Optional[str] = None
    VSWCPersistenceQAQCRpt: Optional[str] = None
    VSWCStepQAQCRpt: Optional[str] = None
    VSWCNullQAQCRpt: Optional[str] = None
    VSWCGapQAQCRpt: Optional[str] = None
    VSWCConsistencyQAQCRpt: Optional[str] = None
    VSWCSpikeQAQCRpt: Optional[str] = None
    VSWCAlphaQAQCRpt: Optional[str] = None
    VSWCBetaQAQCRpt: Optional[str] = None
    VSICRangeQAQCRpt: Optional[str] = None
    VSICPersistenceQAQCRpt: Optional[str] = None
    VSICStepQAQCRpt: Optional[str] = None
    VSICNullQAQCRpt: Optional[str] = None
    VSICGapQAQCRpt: Optional[str] = None
    VSICConsistencyQAQCRpt: Optional[str] = None
    VSICSpikeQAQCRpt: Optional[str] = None
    VSICAlphaQAQCRpt: Optional[str] = None
    VSICBetaQAQCRpt: Optional[str] = None
    tempQAQCRpt: Optional[str] = None
    calQAQCRpt: Optional[str] = None
    VSICValidCalQAQCRpt: Optional[str] = None
    VSWCValidCalQAQCRpt: Optional[str] = None

@dataclass
class SWS30Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SWS_30_minute
    class_class_curie: ClassVar[str] = "neon:SWS_30_minute"
    class_name: ClassVar[str] = "SWS_30_minute"
    class_model_uri: ClassVar[URIRef] = NEON.SWS30Minute

    VSWCMean: Optional[float] = None
    VSWCMinimum: Optional[float] = None
    VSWCMaximum: Optional[float] = None
    VSWCVariance: Optional[float] = None
    VSWCNumPts: Optional[float] = None
    VSWCExpUncert: Optional[float] = None
    VSWCStdErMean: Optional[float] = None
    VSWCRangeFailQM: Optional[float] = None
    VSWCRangePassQM: Optional[float] = None
    VSWCRangeNAQM: Optional[float] = None
    VSWCPersistenceFailQM: Optional[float] = None
    VSWCPersistencePassQM: Optional[float] = None
    VSWCPersistenceNAQM: Optional[float] = None
    VSWCStepFailQM: Optional[float] = None
    VSWCStepPassQM: Optional[float] = None
    VSWCStepNAQM: Optional[float] = None
    VSWCNullFailQM: Optional[float] = None
    VSWCNullPassQM: Optional[float] = None
    VSWCNullNAQM: Optional[float] = None
    VSWCGapFailQM: Optional[float] = None
    VSWCGapPassQM: Optional[float] = None
    VSWCGapNAQM: Optional[float] = None
    VSWCSpikeFailQM: Optional[float] = None
    VSWCSpikePassQM: Optional[float] = None
    VSWCSpikeNAQM: Optional[float] = None
    VSWCConsistencyFailQM: Optional[float] = None
    VSWCConsistencyPassQM: Optional[float] = None
    VSWCConsistencyNAQM: Optional[float] = None
    VSWCAlphaQM: Optional[float] = None
    VSWCBetaQM: Optional[float] = None
    VSWCFinalQF: Optional[str] = None
    VSICMean: Optional[float] = None
    VSICMinimum: Optional[float] = None
    VSICMaximum: Optional[float] = None
    VSICVariance: Optional[float] = None
    VSICNumPts: Optional[float] = None
    VSICExpUncert: Optional[float] = None
    VSICStdErMean: Optional[float] = None
    VSICRangeFailQM: Optional[float] = None
    VSICRangePassQM: Optional[float] = None
    VSICRangeNAQM: Optional[float] = None
    VSICPersistenceFailQM: Optional[float] = None
    VSICPersistencePassQM: Optional[float] = None
    VSICPersistenceNAQM: Optional[float] = None
    VSICStepFailQM: Optional[float] = None
    VSICStepPassQM: Optional[float] = None
    VSICStepNAQM: Optional[float] = None
    VSICNullFailQM: Optional[float] = None
    VSICNullPassQM: Optional[float] = None
    VSICNullNAQM: Optional[float] = None
    VSICGapFailQM: Optional[float] = None
    VSICGapPassQM: Optional[float] = None
    VSICGapNAQM: Optional[float] = None
    VSICSpikeFailQM: Optional[float] = None
    VSICSpikePassQM: Optional[float] = None
    VSICSpikeNAQM: Optional[float] = None
    VSICConsistencyFailQM: Optional[float] = None
    VSICConsistencyPassQM: Optional[float] = None
    VSICConsistencyNAQM: Optional[float] = None
    VSICAlphaQM: Optional[float] = None
    VSICBetaQM: Optional[float] = None
    VSICFinalQF: Optional[str] = None
    tempFailQM: Optional[float] = None
    tempPassQM: Optional[float] = None
    tempNAQM: Optional[float] = None
    calDefaultQM: Optional[float] = None
    calNEONQM: Optional[float] = None
    calNAQM: Optional[float] = None
    VSICFinalQFSciRvw: Optional[str] = None
    VSICValidCalFailQM: Optional[float] = None
    VSICValidCalNAQM: Optional[float] = None
    VSICValidCalPassQM: Optional[float] = None
    VSWCFinalQFSciRvw: Optional[str] = None
    VSWCValidCalFailQM: Optional[float] = None
    VSWCValidCalNAQM: Optional[float] = None
    VSWCValidCalPassQM: Optional[float] = None

@dataclass
class WaterQuality(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.waterQuality
    class_class_curie: ClassVar[str] = "neon:waterQuality"
    class_name: ClassVar[str] = "waterQuality"
    class_model_uri: ClassVar[URIRef] = NEON.WaterQuality

    sensorVoltage: Optional[float] = None
    pHvoltage: Optional[float] = None
    blueGreenAlgaePhycocyanin: Optional[float] = None
    sondeSurfaceWaterPressure: Optional[float] = None
    chlorophyllRaw: Optional[float] = None
    blueGreenAlgaeRaw: Optional[float] = None
    fDOMRaw: Optional[float] = None
    turbidityRaw: Optional[float] = None
    wiperPosition: Optional[float] = None
    sondeValve: Optional[int] = None

@dataclass
class WaqInstantaneousPub(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.waq_instantaneous_pub
    class_class_curie: ClassVar[str] = "neon:waq_instantaneous_pub"
    class_name: ClassVar[str] = "waq_instantaneous_pub"
    class_model_uri: ClassVar[URIRef] = NEON.WaqInstantaneousPub

    specificConductance: Optional[float] = None
    startDate: Optional[Union[str, XSDTime]] = None
    endDate: Optional[Union[str, XSDTime]] = None
    dissolvedOxygen: Optional[float] = None
    dissolvedOxygenSaturation: Optional[float] = None
    pH: Optional[float] = None
    chlorophyll: Optional[float] = None
    fDOM: Optional[float] = None
    turbidity: Optional[float] = None
    sensorDepth: Optional[float] = None
    sensorDepthValidCalQF: Optional[int] = None
    specificConductanceValidCalQF: Optional[int] = None
    buoyNAFlag: Optional[int] = None
    chlorophyllAlphaQF: Optional[int] = None
    chlorophyllBetaQF: Optional[int] = None
    chlorophyllConsistQF: Optional[int] = None
    chlorophyllExpUncert: Optional[float] = None
    chlorophyllFinalQF: Optional[str] = None
    chlorophyllFinalQFSciRvw: Optional[str] = None
    chlorophyllGapQF: Optional[int] = None
    chlorophyllNullQF: Optional[int] = None
    chlorophyllPersistenceQF: Optional[int] = None
    chlorophyllRangeQF: Optional[int] = None
    chlorophyllSpikeQF: Optional[int] = None
    chlorophyllStepQF: Optional[int] = None
    chlorophyllValidCalQF: Optional[int] = None
    dissolvedOxygenAlphaQF: Optional[int] = None
    dissolvedOxygenBetaQF: Optional[int] = None
    dissolvedOxygenConsistQF: Optional[int] = None
    dissolvedOxygenExpUncert: Optional[float] = None
    dissolvedOxygenFinalQF: Optional[int] = None
    dissolvedOxygenFinalQFSciRvw: Optional[int] = None
    dissolvedOxygenGapQF: Optional[int] = None
    dissolvedOxygenNullQF: Optional[int] = None
    dissolvedOxygenPersistenceQF: Optional[int] = None
    dissolvedOxygenRangeQF: Optional[int] = None
    dissolvedOxygenSatAlphaQF: Optional[int] = None
    dissolvedOxygenSatBetaQF: Optional[int] = None
    dissolvedOxygenSatConsistQF: Optional[int] = None
    dissolvedOxygenSatExpUncert: Optional[float] = None
    dissolvedOxygenSatFinalQF: Optional[str] = None
    dissolvedOxygenSatFinalQFSciRvw: Optional[str] = None
    dissolvedOxygenSatGapQF: Optional[int] = None
    dissolvedOxygenSatNullQF: Optional[int] = None
    dissolvedOxygenSatPersistQF: Optional[int] = None
    dissolvedOxygenSatRangeQF: Optional[int] = None
    dissolvedOxygenSatSpikeQF: Optional[int] = None
    dissolvedOxygenSatStepQF: Optional[int] = None
    dissolvedOxygenSatValidCalQF: Optional[int] = None
    dissolvedOxygenSpikeQF: Optional[int] = None
    dissolvedOxygenStepQF: Optional[int] = None
    dissolvedOxygenValidCalQF: Optional[int] = None
    fDOMAbsQF: Optional[int] = None
    fDOMAlphaQF: Optional[int] = None
    fDOMBetaQF: Optional[int] = None
    fDOMConsistQF: Optional[int] = None
    fDOMExpUncert: Optional[float] = None
    fDOMFinalQF: Optional[str] = None
    fDOMFinalQFSciRvw: Optional[str] = None
    fDOMGapQF: Optional[int] = None
    fDOMNullQF: Optional[int] = None
    fDOMPersistenceQF: Optional[int] = None
    fDOMRangeQF: Optional[int] = None
    fDOMSpikeQF: Optional[int] = None
    fDOMStepQF: Optional[int] = None
    fDOMTempQF: Optional[int] = None
    fDOMValidCalQF: Optional[int] = None
    pHAlphaQF: Optional[int] = None
    pHBetaQF: Optional[int] = None
    pHConsistQF: Optional[int] = None
    pHExpUncert: Optional[float] = None
    pHFinalQF: Optional[str] = None
    pHFinalQFSciRvw: Optional[str] = None
    pHGapQF: Optional[int] = None
    pHNullQF: Optional[int] = None
    pHPersistenceQF: Optional[int] = None
    pHRangeQF: Optional[int] = None
    pHSpikeQF: Optional[int] = None
    pHStepQF: Optional[int] = None
    pHValidCalQF: Optional[int] = None
    sensorDepthExpUncert: Optional[float] = None
    sensorDepthFinalQFSciRvw: Optional[int] = None
    specificCondFinalQFSciRvw: Optional[str] = None
    specificConductanceAlphaQF: Optional[int] = None
    specificConductanceBetaQF: Optional[int] = None
    specificConductanceConsistQF: Optional[int] = None
    specificConductanceExpUncert: Optional[float] = None
    specificCondFinalQF: Optional[int] = None
    specificConductanceGapQF: Optional[int] = None
    specificConductanceNullQF: Optional[int] = None
    specificConductancePersistQF: Optional[int] = None
    specificConductanceRangeQF: Optional[int] = None
    specificConductanceSpikeQF: Optional[int] = None
    specificConductanceStepQF: Optional[int] = None
    turbidityAlphaQF: Optional[int] = None
    turbidityBetaQF: Optional[int] = None
    turbidityConsistQF: Optional[int] = None
    turbidityExpUncert: Optional[float] = None
    turbidityFinalQF: Optional[str] = None
    turbidityFinalQFSciRvw: Optional[str] = None
    turbidityGapQF: Optional[int] = None
    turbidityNullQF: Optional[int] = None
    turbidityPersistenceQF: Optional[int] = None
    turbidityRangeQF: Optional[int] = None
    turbiditySpikeQF: Optional[int] = None
    turbidityStepQF: Optional[int] = None
    turbidityValidCalQF: Optional[int] = None
    sensorDepthAlphaQF: Optional[int] = None
    sensorDepthBetaQF: Optional[int] = None
    sensorDepthConsistQF: Optional[int] = None
    sensorDepthGapQF: Optional[int] = None
    sensorDepthNullQF: Optional[int] = None
    sensorDepthPersistQF: Optional[int] = None
    sensorDepthRangeQF: Optional[int] = None
    spectrumCount: Optional[int] = None
    rawCalibratedfDOM: Optional[float] = None
    chlorophyllSuspectCalQF: Optional[int] = None
    dissolvedOxygenSuspectCalQF: Optional[int] = None
    dissOxygenSatSuspectCalQF: Optional[int] = None
    fDOMSuspectCalQF: Optional[int] = None
    pHSuspectCalQF: Optional[int] = None
    sensorDepthSuspectCalQF: Optional[int] = None
    specificCondSuspectCalQF: Optional[int] = None
    turbiditySuspectCalQF: Optional[int] = None
    sensorDepthFinalQF: Optional[int] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.startDate is not None and not isinstance(self.startDate, XSDTime):
            self.startDate = XSDTime(self.startDate)
        if self.endDate is not None and not isinstance(self.endDate, XSDTime):
            self.endDate = XSDTime(self.endDate)
        super().__post_init__(**kwargs)


class 2DWSD(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON["2DWSD"]
    class_class_curie: ClassVar[str] = "neon:2DWSD"
    class_name: ClassVar[str] = "2DWSD"
    class_model_uri: ClassVar[URIRef] = NEON.2DWSD


@dataclass
class 2DWSDL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON["2DWSD_L0prime"]
    class_class_curie: ClassVar[str] = "neon:2DWSD_L0prime"
    class_name: ClassVar[str] = "2DWSD_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.2DWSDL0prime

    uVectorComponent: Optional[float] = None
    vVectorComponent: Optional[float] = None
    soundSpeed: Optional[float] = None
    2dWindSensorStatus: Optional[int] = None

class BarPres(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.barPres
    class_class_curie: ClassVar[str] = "neon:barPres"
    class_name: ClassVar[str] = "barPres"
    class_model_uri: ClassVar[URIRef] = NEON.BarPres


class RH(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.RH
    class_class_curie: ClassVar[str] = "neon:RH"
    class_name: ClassVar[str] = "RH"
    class_model_uri: ClassVar[URIRef] = NEON.RH


@dataclass
class DpmSensorIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dpm_sensor_in
    class_class_curie: ClassVar[str] = "neon:dpm_sensor_in"
    class_name: ClassVar[str] = "dpm_sensor_in"
    class_model_uri: ClassVar[URIRef] = NEON.DpmSensorIn

    baroPressParticulateMass: Optional[float] = None
    flowRate: Optional[float] = None
    corrAirVolume: Optional[float] = None
    uncorrAirVolume: Optional[float] = None

@dataclass
class BarPresBuoy(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.barPresBuoy
    class_class_curie: ClassVar[str] = "neon:barPresBuoy"
    class_name: ClassVar[str] = "barPresBuoy"
    class_model_uri: ClassVar[URIRef] = NEON.BarPresBuoy

    rawBarometricPressure: Optional[float] = None
    sensorStatus: Optional[int] = None

class RHBuoy(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.RHBuoy
    class_class_curie: ClassVar[str] = "neon:RHBuoy"
    class_name: ClassVar[str] = "RHBuoy"
    class_model_uri: ClassVar[URIRef] = NEON.RHBuoy


@dataclass
class RHL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.RH_L0prime
    class_class_curie: ClassVar[str] = "neon:RH_L0prime"
    class_name: ClassVar[str] = "RH_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.RHL0prime

    sensorTemp: Optional[float] = None
    RH: Optional[float] = None
    dewPoint: Optional[float] = None
    RHStatus: Optional[float] = None
    qfHeat: Optional[int] = None

@dataclass
class IRBioTemp(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.IRBioTemp
    class_class_curie: ClassVar[str] = "neon:IRBioTemp"
    class_name: ClassVar[str] = "IRBioTemp"
    class_model_uri: ClassVar[URIRef] = NEON.IRBioTemp

    infraredThermopileOutput: Optional[float] = None

class SLRNR(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SLRNR
    class_class_curie: ClassVar[str] = "neon:SLRNR"
    class_name: ClassVar[str] = "SLRNR"
    class_model_uri: ClassVar[URIRef] = NEON.SLRNR


@dataclass
class NetRadBuoy(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.netRadBuoy
    class_class_curie: ClassVar[str] = "neon:netRadBuoy"
    class_name: ClassVar[str] = "netRadBuoy"
    class_model_uri: ClassVar[URIRef] = NEON.NetRadBuoy

    sensorResistance: Optional[float] = None
    inNetRadPyranometer: Optional[float] = None
    outNetRadPyranometer: Optional[float] = None
    inNetRadPyrgeometer: Optional[float] = None
    outNetRadPyrgeometer: Optional[float] = None

class SAAT(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SAAT
    class_class_curie: ClassVar[str] = "neon:SAAT"
    class_name: ClassVar[str] = "SAAT"
    class_model_uri: ClassVar[URIRef] = NEON.SAAT


class TAAT(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TAAT
    class_class_curie: ClassVar[str] = "neon:TAAT"
    class_name: ClassVar[str] = "TAAT"
    class_model_uri: ClassVar[URIRef] = NEON.TAAT


@dataclass
class Soni(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.soni
    class_class_curie: ClassVar[str] = "neon:soni"
    class_name: ClassVar[str] = "soni"
    class_model_uri: ClassVar[URIRef] = NEON.Soni

    tempTranTop: Optional[float] = None
    tempArmTop: Optional[float] = None
    tempArmBot: Optional[float] = None
    tempTranBot: Optional[float] = None
    diag16: Optional[int] = None

class SAATL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SAAT_L0prime
    class_class_curie: ClassVar[str] = "neon:SAAT_L0prime"
    class_name: ClassVar[str] = "SAAT_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.SAATL0prime


@dataclass
class SoniL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.soni_L0prime
    class_class_curie: ClassVar[str] = "neon:soni_L0prime"
    class_name: ClassVar[str] = "soni_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.SoniL0prime

    veloXaxs: Optional[float] = None
    veloYaxs: Optional[float] = None
    veloZaxs: Optional[float] = None
    veloSoni: Optional[float] = None
    tempSoni: Optional[str] = None
    qfSoniCode: Optional[str] = None
    voucherStatus: Optional[str] = None
    qfSoniSignalLow: Optional[int] = None
    qfSoniUnrs: Optional[int] = None
    qfSoniData: Optional[int] = None
    qfSoniTrig: Optional[int] = None
    qfSoniComm: Optional[int] = None
    qfSoniTemp: Optional[int] = None
    qfSoniSignalPoor: Optional[int] = None
    qfSoniSignalHigh: Optional[int] = None

@dataclass
class TAATL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TAAT_L0prime
    class_class_curie: ClassVar[str] = "neon:TAAT_L0prime"
    class_name: ClassVar[str] = "TAAT_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.TAATL0prime

    heaterFlag: Optional[int] = None
    turbineSpeed: Optional[float] = None

class PAR(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PAR
    class_class_curie: ClassVar[str] = "neon:PAR"
    class_name: ClassVar[str] = "PAR"
    class_model_uri: ClassVar[URIRef] = NEON.PAR


class PARWS(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARWS
    class_class_curie: ClassVar[str] = "neon:PARWS"
    class_name: ClassVar[str] = "PARWS"
    class_model_uri: ClassVar[URIRef] = NEON.PARWS


@dataclass
class UPAR(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.UPAR
    class_class_curie: ClassVar[str] = "neon:UPAR"
    class_name: ClassVar[str] = "UPAR"
    class_model_uri: ClassVar[URIRef] = NEON.UPAR

    inPAR: Optional[float] = None
    outPAR: Optional[float] = None

@dataclass
class PRE(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PRE
    class_class_curie: ClassVar[str] = "neon:PRE"
    class_name: ClassVar[str] = "PRE"
    class_model_uri: ClassVar[URIRef] = NEON.PRE

    secPrecipBucketTips: Optional[int] = None
    TFPrecipBucketTips: Optional[int] = None
    strainGauge1Stability: Optional[int] = None
    strainGauge1Temp: Optional[float] = None
    strainGauge1FreqRaw: Optional[float] = None
    strainGauge1Weight: Optional[float] = None
    totalGaugeWeight: Optional[float] = None
    totalPrecipDepth: Optional[float] = None
    inletTemp: Optional[float] = None
    internalTemp: Optional[float] = None
    precipAccumulationRate: Optional[float] = None
    strainGauge1FreqComp: Optional[float] = None
    orificeHeaterFlag: Optional[int] = None
    strainGauge2Stability: Optional[int] = None
    strainGauge3Stability: Optional[int] = None
    strainGauge2Temp: Optional[float] = None
    strainGauge3Temp: Optional[float] = None
    strainGauge2FreqRaw: Optional[float] = None
    strainGauge3FreqRaw: Optional[float] = None
    strainGauge2Weight: Optional[float] = None
    strainGauge3Weight: Optional[float] = None
    strainGauge2FreqComp: Optional[float] = None
    strainGauge3FreqComp: Optional[float] = None
    heaterMonitor: Optional[float] = None

@dataclass
class SRPP(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SRPP
    class_class_curie: ClassVar[str] = "neon:SRPP"
    class_name: ClassVar[str] = "SRPP"
    class_model_uri: ClassVar[URIRef] = NEON.SRPP

    pyranometerOutput: Optional[float] = None
    fanSpeed: Optional[float] = None
    heater1Flag: Optional[int] = None
    heater2Flag: Optional[int] = None

@dataclass
class TSW(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TSW
    class_class_curie: ClassVar[str] = "neon:TSW"
    class_name: ClassVar[str] = "TSW"
    class_model_uri: ClassVar[URIRef] = NEON.TSW

    PRTResistance: Optional[float] = None

@dataclass
class PARQL(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.PARQL
    class_class_curie: ClassVar[str] = "neon:PARQL"
    class_name: ClassVar[str] = "PARQL"
    class_model_uri: ClassVar[URIRef] = NEON.PARQL

    linePAR: Optional[float] = None

@dataclass
class SPH(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SPH
    class_class_curie: ClassVar[str] = "neon:SPH"
    class_name: ClassVar[str] = "SPH"
    class_model_uri: ClassVar[URIRef] = NEON.SPH

    spectralPhotometerK7: Optional[str] = None

@dataclass
class SwRad(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swRad
    class_class_curie: ClassVar[str] = "neon:swRad"
    class_name: ClassVar[str] = "swRad"
    class_model_uri: ClassVar[URIRef] = NEON.SwRad

    rawShortwaveRadiationGlobal: Optional[float] = None
    rawShortwaveRadiationDiffuse: Optional[float] = None
    sunPresence: Optional[int] = None

class AquTroll(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.aquTroll
    class_class_curie: ClassVar[str] = "neon:aquTroll"
    class_name: ClassVar[str] = "aquTroll"
    class_model_uri: ClassVar[URIRef] = NEON.AquTroll


@dataclass
class SwConTempPres(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.swConTempPres
    class_class_curie: ClassVar[str] = "neon:swConTempPres"
    class_name: ClassVar[str] = "swConTempPres"
    class_model_uri: ClassVar[URIRef] = NEON.SwConTempPres

    conductance: Optional[float] = None
    conductanceDataQualityID: Optional[float] = None
    groundwaterPressure: Optional[float] = None

@dataclass
class LevelTroll(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.levelTroll
    class_class_curie: ClassVar[str] = "neon:levelTroll"
    class_name: ClassVar[str] = "levelTroll"
    class_model_uri: ClassVar[URIRef] = NEON.LevelTroll

    batteryVoltage: Optional[float] = None
    tempDataQualityID: Optional[float] = None
    pressureDataQualityID: Optional[float] = None
    surfaceWaterTemperature: Optional[float] = None
    surfaceWaterPressure: Optional[float] = None

@dataclass
class TGW5Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TGW_5_minute
    class_class_curie: ClassVar[str] = "neon:TGW_5_minute"
    class_name: ClassVar[str] = "TGW_5_minute"
    class_model_uri: ClassVar[URIRef] = NEON.TGW5Minute

    groundwaterTemp: Optional[float] = None
    groundwaterTempRangeQF: Optional[int] = None
    groundwaterTempPersistenceQF: Optional[int] = None
    groundwaterTempStepQF: Optional[int] = None
    groundwaterTempNullQF: Optional[int] = None
    groundwaterTempGapQF: Optional[int] = None
    groundwaterTempConsistencyQF: Optional[int] = None
    groundwaterTempSpikeQF: Optional[int] = None

@dataclass
class SCGW30Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SCGW_30_minute
    class_class_curie: ClassVar[str] = "neon:SCGW_30_minute"
    class_name: ClassVar[str] = "SCGW_30_minute"
    class_model_uri: ClassVar[URIRef] = NEON.SCGW30Minute

    groundwaterSpecCondMean: Optional[float] = None
    groundwaterSpecCondMinimum: Optional[float] = None
    groundwaterSpecCondMaximum: Optional[float] = None
    groundwaterSpecCondVariance: Optional[float] = None
    groundwaterSpecCondNumPts: Optional[float] = None
    groundwaterSpecCondStdErMean: Optional[float] = None
    gWatSCondRangeFailQM: Optional[float] = None
    gWatSCondRangePassQM: Optional[float] = None
    gWatSCondRangeNAQM: Optional[float] = None
    gWatSCondPersistenceFailQM: Optional[float] = None
    gWatSCondPersistencePassQM: Optional[float] = None
    gWatSCondPersistenceNAQM: Optional[float] = None
    gWatSCondStepFailQM: Optional[float] = None
    gWatSCondStepPassQM: Optional[float] = None
    gWatSCondStepNAQM: Optional[float] = None
    gWatSCondNullFailQM: Optional[float] = None
    gWatSCondNullPassQM: Optional[float] = None
    gWatSCondNullNAQM: Optional[float] = None
    gWatSCondGapFailQM: Optional[float] = None
    gWatSCondGapPassQM: Optional[float] = None
    gWatSCondGapNAQM: Optional[float] = None
    gWatSCondSpikeFailQM: Optional[float] = None
    gWatSCondSpikePassQM: Optional[float] = None
    gWatSCondSpikeNAQM: Optional[float] = None
    gWatSCondConsistencyFailQM: Optional[float] = None
    gWatSCondConsistencyPassQM: Optional[float] = None
    gWatSCondConsistencyNAQM: Optional[float] = None
    gWatSCondAlphaQM: Optional[float] = None
    gWatSCondBetaQM: Optional[float] = None
    gWatSCondFinalQF: Optional[str] = None
    gWatSCondFinalQFSciRvw: Optional[str] = None

@dataclass
class EOG5Min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.EOG_5_min
    class_class_curie: ClassVar[str] = "neon:EOG_5_min"
    class_name: ClassVar[str] = "EOG_5_min"
    class_model_uri: ClassVar[URIRef] = NEON.EOG5Min

    groundwaterElev: Optional[float] = None
    groundwaterElevRangeQF: Optional[int] = None
    groundwaterElevPersistQF: Optional[int] = None
    groundwaterElevStepQF: Optional[int] = None
    groundwaterElevNullQF: Optional[int] = None
    groundwaterElevGapQF: Optional[int] = None
    groundwaterElevConsistQF: Optional[int] = None
    groundwaterElevSpikeQF: Optional[int] = None

@dataclass
class EOG30Min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.EOG_30_min
    class_class_curie: ClassVar[str] = "neon:EOG_30_min"
    class_name: ClassVar[str] = "EOG_30_min"
    class_model_uri: ClassVar[URIRef] = NEON.EOG30Min

    groundwaterElevExpUncert: Optional[float] = None
    groundwaterElevMean: Optional[float] = None
    groundwaterElevMinimum: Optional[float] = None
    groundwaterElevMaximum: Optional[float] = None
    groundwaterElevVariance: Optional[float] = None
    groundwaterElevNumPts: Optional[float] = None
    groundwaterElevStdErMean: Optional[float] = None
    gWatElevRangeFailQM: Optional[float] = None
    gWatElevRangePassQM: Optional[float] = None
    gWatElevRangeNAQM: Optional[float] = None
    gWatElevPersistenceFailQM: Optional[float] = None
    gWatElevPersistencePassQM: Optional[float] = None
    gWatElevPersistenceNAQM: Optional[float] = None
    gWatElevStepFailQM: Optional[float] = None
    gWatElevStepPassQM: Optional[float] = None
    gWatElevStepNAQM: Optional[float] = None
    gWatElevNullFailQM: Optional[float] = None
    gWatElevNullPassQM: Optional[float] = None
    gWatElevNullNAQM: Optional[float] = None
    gWatElevGapFailQM: Optional[float] = None
    gWatElevGapPassQM: Optional[float] = None
    gWatElevGapNAQM: Optional[float] = None
    gWatElevSpikeFailQM: Optional[float] = None
    gWatElevSpikePassQM: Optional[float] = None
    gWatElevSpikeNAQM: Optional[float] = None
    gWatElevConsistencyFailQM: Optional[float] = None
    gWatElevConsistencyPassQM: Optional[float] = None
    gWatElevConsistencyNAQM: Optional[float] = None
    gWatElevAlphaQM: Optional[float] = None
    gWatElevBetaQM: Optional[float] = None
    gWatElevFinalQF: Optional[str] = None
    gWatElevFinalQFSciRvw: Optional[str] = None

@dataclass
class TGW30Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TGW_30_minute
    class_class_curie: ClassVar[str] = "neon:TGW_30_minute"
    class_name: ClassVar[str] = "TGW_30_minute"
    class_model_uri: ClassVar[URIRef] = NEON.TGW30Minute

    groundwaterTempExpUncert: Optional[float] = None
    groundwaterTempMean: Optional[float] = None
    groundwaterTempMinimum: Optional[float] = None
    groundwaterTempMaximum: Optional[float] = None
    groundwaterTempVariance: Optional[float] = None
    groundwaterTempNumPts: Optional[float] = None
    groundwaterTempStdErMean: Optional[float] = None
    gWatTempRangeFailQM: Optional[float] = None
    gWatTempRangePassQM: Optional[float] = None
    gWatTempRangeNAQM: Optional[float] = None
    gWatTempPersistenceFailQM: Optional[float] = None
    gWatTempPersistencePassQM: Optional[float] = None
    gWatTempPersistenceNAQM: Optional[float] = None
    gWatTempStepFailQM: Optional[float] = None
    gWatTempStepPassQM: Optional[float] = None
    gWatTempStepNAQM: Optional[float] = None
    gWatTempNullFailQM: Optional[float] = None
    gWatTempNullPassQM: Optional[float] = None
    gWatTempNullNAQM: Optional[float] = None
    gWatTempGapFailQM: Optional[float] = None
    gWatTempGapPassQM: Optional[float] = None
    gWatTempGapNAQM: Optional[float] = None
    gWatTempSpikeFailQM: Optional[float] = None
    gWatTempSpikePassQM: Optional[float] = None
    gWatTempSpikeNAQM: Optional[float] = None
    gWatTempConsistencyFailQM: Optional[float] = None
    gWatTempConsistencyPassQM: Optional[float] = None
    gWatTempConsistencyNAQM: Optional[float] = None
    gWatTempAlphaQM: Optional[float] = None
    gWatTempBetaQM: Optional[float] = None
    gWatTempFinalQF: Optional[str] = None
    gWatTempFinalQFSciRvw: Optional[str] = None

class EOS5Min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.EOS_5_min
    class_class_curie: ClassVar[str] = "neon:EOS_5_min"
    class_name: ClassVar[str] = "EOS_5_min"
    class_model_uri: ClassVar[URIRef] = NEON.EOS5Min


@dataclass
class EOS30Min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.EOS_30_min
    class_class_curie: ClassVar[str] = "neon:EOS_30_min"
    class_name: ClassVar[str] = "EOS_30_min"
    class_model_uri: ClassVar[URIRef] = NEON.EOS30Min

    surfacewaterElevMean: Optional[float] = None
    surfacewaterElevMinimum: Optional[float] = None
    surfacewaterElevMaximum: Optional[float] = None
    surfacewaterElevVariance: Optional[float] = None
    surfacewaterElevNumPts: Optional[float] = None
    surfacewaterElevExpUncert: Optional[float] = None
    surfacewaterElevStdErMean: Optional[float] = None
    sWatElevRangeFailQM: Optional[float] = None
    sWatElevRangePassQM: Optional[float] = None
    sWatElevRangeNAQM: Optional[float] = None
    sWatElevPersistenceFailQM: Optional[float] = None
    sWatElevPersistencePassQM: Optional[float] = None
    sWatElevPersistenceNAQM: Optional[float] = None
    sWatElevStepFailQM: Optional[float] = None
    sWatElevStepPassQM: Optional[float] = None
    sWatElevStepNAQM: Optional[float] = None
    sWatElevNullFailQM: Optional[float] = None
    sWatElevNullPassQM: Optional[float] = None
    sWatElevNullNAQM: Optional[float] = None
    sWatElevGapFailQM: Optional[float] = None
    sWatElevGapPassQM: Optional[float] = None
    sWatElevGapNAQM: Optional[float] = None
    sWatElevSpikeFailQM: Optional[float] = None
    sWatElevSpikePassQM: Optional[float] = None
    sWatElevSpikeNAQM: Optional[float] = None
    sWatElevConsistencyFailQM: Optional[float] = None
    sWatElevConsistencyPassQM: Optional[float] = None
    sWatElevConsistencyNAQM: Optional[float] = None
    sWatElevAlphaQM: Optional[float] = None
    sWatElevBetaQM: Optional[float] = None
    sWatElevFinalQF: Optional[str] = None
    tempRHValidCalQAQCRpt: Optional[str] = None
    sWatElevFinalQFSciRvw: Optional[str] = None

class Dpsd30Minutes(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dpsd_30_minutes
    class_class_curie: ClassVar[str] = "neon:dpsd_30_minutes"
    class_name: ClassVar[str] = "dpsd_30_minutes"
    class_model_uri: ClassVar[URIRef] = NEON.Dpsd30Minutes


@dataclass
class Dpsd60Minutes(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.dpsd_60_minutes
    class_class_curie: ClassVar[str] = "neon:dpsd_60_minutes"
    class_name: ClassVar[str] = "dpsd_60_minutes"
    class_model_uri: ClassVar[URIRef] = NEON.Dpsd60Minutes

    PM15Median: Optional[float] = None
    PM15Minimum: Optional[float] = None
    PM15Maximum: Optional[float] = None
    PM15NumPts: Optional[float] = None
    PM15MAD: Optional[float] = None
    PM15rangeFailQM: Optional[float] = None
    PM15rangePassQM: Optional[float] = None
    PM15rangeNAQM: Optional[float] = None
    PM15persistenceFailQM: Optional[float] = None
    PM15persistencePassQM: Optional[float] = None
    PM15persistenceNAQM: Optional[float] = None
    PM15stepFailQM: Optional[float] = None
    PM15stepPassQM: Optional[float] = None
    PM15stepNAQM: Optional[float] = None
    PM15nullFailQM: Optional[float] = None
    PM15nullPassQM: Optional[float] = None
    PM15nullNAQM: Optional[float] = None
    PM15gapFailQM: Optional[float] = None
    PM15gapPassQM: Optional[float] = None
    PM15gapNAQM: Optional[float] = None
    PM15spikeFailQM: Optional[float] = None
    PM15spikePassQM: Optional[float] = None
    PM15spikeNAQM: Optional[float] = None
    PM15consistencyFailQM: Optional[float] = None
    PM15consistencyPassQM: Optional[float] = None
    PM15consistencyNAQM: Optional[float] = None
    PM15alphaQM: Optional[float] = None
    PM15betaQM: Optional[float] = None
    PM15finalQF: Optional[str] = None
    PM10Median: Optional[float] = None
    PM10Minimum: Optional[float] = None
    PM10Maximum: Optional[float] = None
    PM10NumPts: Optional[float] = None
    PM10MAD: Optional[float] = None
    PM10rangeFailQM: Optional[float] = None
    PM10rangePassQM: Optional[float] = None
    PM10rangeNAQM: Optional[float] = None
    PM10persistenceFailQM: Optional[float] = None
    PM10persistencePassQM: Optional[float] = None
    PM10persistenceNAQM: Optional[float] = None
    PM10stepFailQM: Optional[float] = None
    PM10stepPassQM: Optional[float] = None
    PM10stepNAQM: Optional[float] = None
    PM10nullFailQM: Optional[float] = None
    PM10nullPassQM: Optional[float] = None
    PM10nullNAQM: Optional[float] = None
    PM10gapFailQM: Optional[float] = None
    PM10gapPassQM: Optional[float] = None
    PM10gapNAQM: Optional[float] = None
    PM10spikeFailQM: Optional[float] = None
    PM10spikePassQM: Optional[float] = None
    PM10spikeNAQM: Optional[float] = None
    PM10consistencyFailQM: Optional[float] = None
    PM10consistencyPassQM: Optional[float] = None
    PM10consistencyNAQM: Optional[float] = None
    PM10alphaQM: Optional[float] = None
    PM10betaQM: Optional[float] = None
    PM10finalQF: Optional[str] = None
    PM4Median: Optional[float] = None
    PM4Minimum: Optional[float] = None
    PM4Maximum: Optional[float] = None
    PM4NumPts: Optional[float] = None
    PM4MAD: Optional[float] = None
    PM4rangeFailQM: Optional[float] = None
    PM4rangePassQM: Optional[float] = None
    PM4rangeNAQM: Optional[float] = None
    PM4persistenceFailQM: Optional[float] = None
    PM4persistencePassQM: Optional[float] = None
    PM4persistenceNAQM: Optional[float] = None
    PM4stepFailQM: Optional[float] = None
    PM4stepPassQM: Optional[float] = None
    PM4stepNAQM: Optional[float] = None
    PM4nullFailQM: Optional[float] = None
    PM4nullPassQM: Optional[float] = None
    PM4nullNAQM: Optional[float] = None
    PM4gapFailQM: Optional[float] = None
    PM4gapPassQM: Optional[float] = None
    PM4gapNAQM: Optional[float] = None
    PM4spikeFailQM: Optional[float] = None
    PM4spikePassQM: Optional[float] = None
    PM4spikeNAQM: Optional[float] = None
    PM4consistencyFailQM: Optional[float] = None
    PM4consistencyPassQM: Optional[float] = None
    PM4consistencyNAQM: Optional[float] = None
    PM4alphaQM: Optional[float] = None
    PM4betaQM: Optional[float] = None
    PM4finalQF: Optional[str] = None
    PM2.5Median: Optional[float] = None
    PM2.5Minimum: Optional[float] = None
    PM2.5Maximum: Optional[float] = None
    PM2.5NumPts: Optional[float] = None
    PM2.5MAD: Optional[float] = None
    PM2.5rangeFailQM: Optional[float] = None
    PM2.5rangePassQM: Optional[float] = None
    PM2.5rangeNAQM: Optional[float] = None
    PM2.5persistenceFailQM: Optional[float] = None
    PM2.5persistencePassQM: Optional[float] = None
    PM2.5persistenceNAQM: Optional[float] = None
    PM2.5stepFailQM: Optional[float] = None
    PM2.5stepPassQM: Optional[float] = None
    PM2.5stepNAQM: Optional[float] = None
    PM2.5nullFailQM: Optional[float] = None
    PM2.5nullPassQM: Optional[float] = None
    PM2.5nullNAQM: Optional[float] = None
    PM2.5gapFailQM: Optional[float] = None
    PM2.5gapPassQM: Optional[float] = None
    PM2.5gapNAQM: Optional[float] = None
    PM2.5spikeFailQM: Optional[float] = None
    PM2.5spikePassQM: Optional[float] = None
    PM2.5spikeNAQM: Optional[float] = None
    PM2.5consistencyFailQM: Optional[float] = None
    PM2.5consistencyPassQM: Optional[float] = None
    PM2.5consistencyNAQM: Optional[float] = None
    PM2.5alphaQM: Optional[float] = None
    PM2.5betaQM: Optional[float] = None
    PM2.5finalQF: Optional[str] = None
    PM1Median: Optional[float] = None
    PM1Minimum: Optional[float] = None
    PM1Maximum: Optional[float] = None
    PM1NumPts: Optional[float] = None
    PM1MAD: Optional[float] = None
    PM1rangeFailQM: Optional[float] = None
    PM1rangePassQM: Optional[float] = None
    PM1rangeNAQM: Optional[float] = None
    PM1persistenceFailQM: Optional[float] = None
    PM1persistencePassQM: Optional[float] = None
    PM1persistenceNAQM: Optional[float] = None
    PM1stepFailQM: Optional[float] = None
    PM1stepPassQM: Optional[float] = None
    PM1stepNAQM: Optional[float] = None
    PM1nullFailQM: Optional[float] = None
    PM1nullPassQM: Optional[float] = None
    PM1nullNAQM: Optional[float] = None
    PM1gapFailQM: Optional[float] = None
    PM1gapPassQM: Optional[float] = None
    PM1gapNAQM: Optional[float] = None
    PM1spikeFailQM: Optional[float] = None
    PM1spikePassQM: Optional[float] = None
    PM1spikeNAQM: Optional[float] = None
    PM1consistencyFailQM: Optional[float] = None
    PM1consistencyPassQM: Optional[float] = None
    PM1consistencyNAQM: Optional[float] = None
    PM1alphaQM: Optional[float] = None
    PM1betaQM: Optional[float] = None
    PM1finalQF: Optional[str] = None
    PM15sub50RHMedian: Optional[float] = None
    PM15sub50RHMinimum: Optional[float] = None
    PM15sub50RHMaximum: Optional[float] = None
    PM15sub50RHNumPts: Optional[float] = None
    PM15sub50RHMAD: Optional[float] = None
    PM15sub50RHrangeFailQM: Optional[float] = None
    PM15sub50RHrangePassQM: Optional[float] = None
    PM15sub50RHrangeNAQM: Optional[float] = None
    PM15sub50RHpersistenceFailQM: Optional[float] = None
    PM15sub50RHpersistencePassQM: Optional[float] = None
    PM15sub50RHpersistenceNAQM: Optional[float] = None
    PM15sub50RHstepFailQM: Optional[float] = None
    PM15sub50RHstepPassQM: Optional[float] = None
    PM15sub50RHstepNAQM: Optional[float] = None
    PM15sub50RHnullFailQM: Optional[float] = None
    PM15sub50RHnullPassQM: Optional[float] = None
    PM15sub50RHnullNAQM: Optional[float] = None
    PM15sub50RHgapFailQM: Optional[float] = None
    PM15sub50RHgapPassQM: Optional[float] = None
    PM15sub50RHgapNAQM: Optional[float] = None
    PM15sub50RHspikeFailQM: Optional[float] = None
    PM15sub50RHspikePassQM: Optional[float] = None
    PM15sub50RHspikeNAQM: Optional[float] = None
    PM15sub50RHconsistencyFailQM: Optional[float] = None
    PM15sub50RHconsistencyPassQM: Optional[float] = None
    PM15sub50RHconsistencyNAQM: Optional[float] = None
    PM15sub50RHalphaQM: Optional[float] = None
    PM15sub50RHbetaQM: Optional[float] = None
    PM15sub50RHfinalQF: Optional[str] = None
    PM10sub50RHMedian: Optional[float] = None
    PM10sub50RHMinimum: Optional[float] = None
    PM10sub50RHMaximum: Optional[float] = None
    PM10sub50RHNumPts: Optional[float] = None
    PM10sub50RHMAD: Optional[float] = None
    PM10sub50RHrangeFailQM: Optional[float] = None
    PM10sub50RHrangePassQM: Optional[float] = None
    PM10sub50RHrangeNAQM: Optional[float] = None
    PM10sub50RHpersistenceFailQM: Optional[float] = None
    PM10sub50RHpersistencePassQM: Optional[float] = None
    PM10sub50RHpersistenceNAQM: Optional[float] = None
    PM10sub50RHstepFailQM: Optional[float] = None
    PM10sub50RHstepPassQM: Optional[float] = None
    PM10sub50RHstepNAQM: Optional[float] = None
    PM10sub50RHnullFailQM: Optional[float] = None
    PM10sub50RHnullPassQM: Optional[float] = None
    PM10sub50RHnullNAQM: Optional[float] = None
    PM10sub50RHgapFailQM: Optional[float] = None
    PM10sub50RHgapPassQM: Optional[float] = None
    PM10sub50RHgapNAQM: Optional[float] = None
    PM10sub50RHspikeFailQM: Optional[float] = None
    PM10sub50RHspikePassQM: Optional[float] = None
    PM10sub50RHspikeNAQM: Optional[float] = None
    PM10sub50RHconsistencyFailQM: Optional[float] = None
    PM10sub50RHconsistencyPassQM: Optional[float] = None
    PM10sub50RHconsistencyNAQM: Optional[float] = None
    PM10sub50RHalphaQM: Optional[float] = None
    PM10sub50RHbetaQM: Optional[float] = None
    PM10sub50RHfinalQF: Optional[str] = None
    PM4sub50RHMedian: Optional[float] = None
    PM4sub50RHMinimum: Optional[float] = None
    PM4sub50RHMaximum: Optional[float] = None
    PM4sub50RHNumPts: Optional[float] = None
    PM4sub50RHMAD: Optional[float] = None
    PM4sub50RHrangeFailQM: Optional[float] = None
    PM4sub50RHrangePassQM: Optional[float] = None
    PM4sub50RHrangeNAQM: Optional[float] = None
    PM4sub50RHpersistenceFailQM: Optional[float] = None
    PM4sub50RHpersistencePassQM: Optional[float] = None
    PM4sub50RHpersistenceNAQM: Optional[float] = None
    PM4sub50RHstepFailQM: Optional[float] = None
    PM4sub50RHstepPassQM: Optional[float] = None
    PM4sub50RHstepNAQM: Optional[float] = None
    PM4sub50RHnullFailQM: Optional[float] = None
    PM4sub50RHnullPassQM: Optional[float] = None
    PM4sub50RHnullNAQM: Optional[float] = None
    PM4sub50RHgapFailQM: Optional[float] = None
    PM4sub50RHgapPassQM: Optional[float] = None
    PM4sub50RHgapNAQM: Optional[float] = None
    PM4sub50RHspikeFailQM: Optional[float] = None
    PM4sub50RHspikePassQM: Optional[float] = None
    PM4sub50RHspikeNAQM: Optional[float] = None
    PM4sub50RHconsistencyFailQM: Optional[float] = None
    PM4sub50RHconsistencyPassQM: Optional[float] = None
    PM4sub50RHconsistencyNAQM: Optional[float] = None
    PM4sub50RHalphaQM: Optional[float] = None
    PM4sub50RHbetaQM: Optional[float] = None
    PM4sub50RHfinalQF: Optional[str] = None
    PM2.5sub50RHMedian: Optional[float] = None
    PM2.5sub50RHMinimum: Optional[float] = None
    PM2.5sub50RHMaximum: Optional[float] = None
    PM2.5sub50RHNumPts: Optional[float] = None
    PM2.5sub50RHMAD: Optional[float] = None
    PM2.5sub50RHrangeFailQM: Optional[float] = None
    PM2.5sub50RHrangePassQM: Optional[float] = None
    PM2.5sub50RHrangeNAQM: Optional[float] = None
    PM2.5sub50RHpersistenceFailQM: Optional[float] = None
    PM2.5sub50RHpersistencePassQM: Optional[float] = None
    PM2.5sub50RHpersistenceNAQM: Optional[float] = None
    PM2.5sub50RHstepFailQM: Optional[float] = None
    PM2.5sub50RHstepPassQM: Optional[float] = None
    PM2.5sub50RHstepNAQM: Optional[float] = None
    PM2.5sub50RHnullFailQM: Optional[float] = None
    PM2.5sub50RHnullPassQM: Optional[float] = None
    PM2.5sub50RHnullNAQM: Optional[float] = None
    PM2.5sub50RHgapFailQM: Optional[float] = None
    PM2.5sub50RHgapPassQM: Optional[float] = None
    PM2.5sub50RHgapNAQM: Optional[float] = None
    PM2.5sub50RHspikeFailQM: Optional[float] = None
    PM2.5sub50RHspikePassQM: Optional[float] = None
    PM2.5sub50RHspikeNAQM: Optional[float] = None
    PM2.5sub50RHconsistencyFailQM: Optional[float] = None
    PM2.5sub50RHconsistencyPassQM: Optional[float] = None
    PM2.5sub50RHconsistencyNAQM: Optional[float] = None
    PM2.5sub50RHalphaQM: Optional[float] = None
    PM2.5sub50RHbetaQM: Optional[float] = None
    PM2.5sub50RHfinalQF: Optional[str] = None
    PM1sub50RHMedian: Optional[float] = None
    PM1sub50RHMinimum: Optional[float] = None
    PM1sub50RHMaximum: Optional[float] = None
    PM1sub50RHNumPts: Optional[float] = None
    PM1sub50RHMAD: Optional[float] = None
    PM1sub50RHrangeFailQM: Optional[float] = None
    PM1sub50RHrangePassQM: Optional[float] = None
    PM1sub50RHrangeNAQM: Optional[float] = None
    PM1sub50RHpersistenceFailQM: Optional[float] = None
    PM1sub50RHpersistencePassQM: Optional[float] = None
    PM1sub50RHpersistenceNAQM: Optional[float] = None
    PM1sub50RHstepFailQM: Optional[float] = None
    PM1sub50RHstepPassQM: Optional[float] = None
    PM1sub50RHstepNAQM: Optional[float] = None
    PM1sub50RHnullFailQM: Optional[float] = None
    PM1sub50RHnullPassQM: Optional[float] = None
    PM1sub50RHnullNAQM: Optional[float] = None
    PM1sub50RHgapFailQM: Optional[float] = None
    PM1sub50RHgapPassQM: Optional[float] = None
    PM1sub50RHgapNAQM: Optional[float] = None
    PM1sub50RHspikeFailQM: Optional[float] = None
    PM1sub50RHspikePassQM: Optional[float] = None
    PM1sub50RHspikeNAQM: Optional[float] = None
    PM1sub50RHconsistencyFailQM: Optional[float] = None
    PM1sub50RHconsistencyPassQM: Optional[float] = None
    PM1sub50RHconsistencyNAQM: Optional[float] = None
    PM1sub50RHalphaQM: Optional[float] = None
    PM1sub50RHbetaQM: Optional[float] = None
    PM1sub50RHfinalQF: Optional[str] = None
    sensorFlowRateFailQM: Optional[float] = None
    sensorFlowRatePassQM: Optional[float] = None
    sensorFlowRateNAQM: Optional[float] = None
    assemblyFlowRateFailQM: Optional[float] = None
    assemblyFlowRatePassQM: Optional[float] = None
    assemblyFlowRateNAQM: Optional[float] = None
    measurementValidityFailQM: Optional[float] = None
    measurementValidityPassQM: Optional[float] = None
    measurementValidityNAQM: Optional[float] = None
    validCalFailQM: Optional[float] = None
    validCalNAQM: Optional[float] = None
    validCalPassQM: Optional[float] = None
    PM15finalQFSciRvw: Optional[str] = None
    PM10finalQFSciRvw: Optional[str] = None
    PM10sub50RHfinalQFSciRvw: Optional[str] = None
    PM15sub50RHfinalQFSciRvw: Optional[str] = None
    PM1finalQFSciRvw: Optional[str] = None
    PM1sub50RHfinalQFSciRvw: Optional[str] = None
    PM2.5finalQFSciRvw: Optional[str] = None
    PM2.5sub50RHfinalQFSciRvw: Optional[str] = None
    PM4finalQFSciRvw: Optional[str] = None
    PM4sub50RHfinalQFSciRvw: Optional[str] = None

@dataclass
class UPAR1min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.uPAR_1min
    class_class_curie: ClassVar[str] = "neon:uPAR_1min"
    class_name: ClassVar[str] = "uPAR_1min"
    class_model_uri: ClassVar[URIRef] = NEON.UPAR1min

    outuPARAlphaQAQCRpt: Optional[str] = None
    outuPARBetaQAQCRpt: Optional[str] = None
    outuPARConsistencyQAQCRpt: Optional[str] = None
    outuPARGapQAQCRpt: Optional[str] = None
    outuPARNullQAQCRpt: Optional[str] = None
    outuPARPersistenceQAQCRpt: Optional[str] = None
    outuPARRangeQAQCRpt: Optional[str] = None
    outuPARSpikeQAQCRpt: Optional[str] = None
    outuPARStepQAQCRpt: Optional[str] = None
    outuPARValidCalQAQCRpt: Optional[str] = None
    uPARAlphaQAQCRpt: Optional[str] = None
    uPARBetaQAQCRpt: Optional[str] = None
    uPARConsistencyQAQCRpt: Optional[str] = None
    uPARGapQAQCRpt: Optional[str] = None
    uPARNullQAQCRpt: Optional[str] = None
    uPARPersistenceQAQCRpt: Optional[str] = None
    uPARRangeQAQCRpt: Optional[str] = None
    uPARSpikeQAQCRpt: Optional[str] = None
    uPARStepQAQCRpt: Optional[str] = None
    uPARValidCalQAQCRpt: Optional[str] = None

@dataclass
class UPAR30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.uPAR_30min
    class_class_curie: ClassVar[str] = "neon:uPAR_30min"
    class_name: ClassVar[str] = "uPAR_30min"
    class_model_uri: ClassVar[URIRef] = NEON.UPAR30min

    outuPARAlphaQM: Optional[float] = None
    outuPARBetaQM: Optional[float] = None
    outuPARConsistencyFailQM: Optional[float] = None
    outuPARConsistencyNAQM: Optional[float] = None
    outuPARConsistencyPassQM: Optional[float] = None
    outuPARExpUncert: Optional[float] = None
    outuPARFinalQF: Optional[str] = None
    outuPARGapFailQM: Optional[float] = None
    outuPARGapNAQM: Optional[float] = None
    outuPARGapPassQM: Optional[float] = None
    outuPARMaximum: Optional[float] = None
    outuPARMean: Optional[float] = None
    outuPARMinimum: Optional[float] = None
    outuPARNullFailQM: Optional[float] = None
    outuPARNullNAQM: Optional[float] = None
    outuPARNullPassQM: Optional[float] = None
    outuPARNumPts: Optional[int] = None
    outuPARPersistenceFailQM: Optional[float] = None
    outuPARPersistenceNAQM: Optional[float] = None
    outuPARPersistencePassQM: Optional[float] = None
    outuPARRangeFailQM: Optional[float] = None
    outuPARRangeNAQM: Optional[float] = None
    outuPARRangePassQM: Optional[float] = None
    outuPARSpikeFailQM: Optional[float] = None
    outuPARSpikeNAQM: Optional[float] = None
    outuPARSpikePassQM: Optional[float] = None
    outuPARStdErMean: Optional[float] = None
    outuPARStepFailQM: Optional[float] = None
    outuPARStepNAQM: Optional[float] = None
    outuPARStepPassQM: Optional[float] = None
    outuPARValidCalFailQM: Optional[float] = None
    outuPARValidCalNAQM: Optional[float] = None
    outuPARValidCalPassQM: Optional[float] = None
    outuPARVariance: Optional[float] = None
    uPARAlphaQM: Optional[float] = None
    uPARBetaQM: Optional[float] = None
    uPARConsistencyFailQM: Optional[float] = None
    uPARConsistencyNAQM: Optional[float] = None
    uPARConsistencyPassQM: Optional[float] = None
    uPARExpUncert: Optional[float] = None
    uPARFinalQF: Optional[str] = None
    uPARGapFailQM: Optional[float] = None
    uPARGapNAQM: Optional[float] = None
    uPARGapPassQM: Optional[float] = None
    uPARMaximum: Optional[float] = None
    uPARMean: Optional[float] = None
    uPARMinimum: Optional[float] = None
    uPARNullFailQM: Optional[float] = None
    uPARNullNAQM: Optional[float] = None
    uPARNullPassQM: Optional[float] = None
    uPARNumPts: Optional[int] = None
    uPARPersistenceFailQM: Optional[float] = None
    uPARPersistenceNAQM: Optional[float] = None
    uPARPersistencePassQM: Optional[float] = None
    uPARRangeFailQM: Optional[float] = None
    uPARRangeNAQM: Optional[float] = None
    uPARRangePassQM: Optional[float] = None
    uPARSpikeFailQM: Optional[float] = None
    uPARSpikeNAQM: Optional[float] = None
    uPARSpikePassQM: Optional[float] = None
    uPARStdErMean: Optional[float] = None
    uPARStepFailQM: Optional[float] = None
    uPARStepNAQM: Optional[float] = None
    uPARStepPassQM: Optional[float] = None
    uPARValidCalFailQM: Optional[float] = None
    uPARValidCalNAQM: Optional[float] = None
    uPARValidCalPassQM: Optional[float] = None
    uPARVariance: Optional[float] = None
    outuPARFinalQFSciRvw: Optional[str] = None
    uPARFinalQFSciRvw: Optional[str] = None

@dataclass
class WSDBuoy2min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.WSDBuoy_2min
    class_class_curie: ClassVar[str] = "neon:WSDBuoy_2min"
    class_name: ClassVar[str] = "WSDBuoy_2min"
    class_model_uri: ClassVar[URIRef] = NEON.WSDBuoy2min

    buoyCompGapQAQCRpt: Optional[str] = None
    buoyCompNullQAQCRpt: Optional[str] = None
    buoyCompPersistenceQAQCRpt: Optional[str] = None
    buoyCompRangeQAQCRpt: Optional[str] = None
    buoyCompSpikeQAQCRpt: Optional[str] = None
    buoyCompStepQAQCRpt: Optional[str] = None
    buoyWindDirAlphaQAQCRpt: Optional[str] = None
    buoyWindDirBetaQAQCRpt: Optional[str] = None
    buoyWindDirCalmWindQAQCRpt: Optional[str] = None
    buoyWindDirConsistencyQAQCRpt: Optional[str] = None
    buoyWindDirDeadZoneQAQCRpt: Optional[str] = None
    buoyWindDirGapQAQCRpt: Optional[str] = None
    buoyWindDirNullQAQCRpt: Optional[str] = None
    buoyWindDirPersistenceQAQCRpt: Optional[str] = None
    buoyWindDirRangeQAQCRpt: Optional[str] = None
    buoyWindDirSpikeQAQCRpt: Optional[str] = None
    buoyWindDirStepQAQCRpt: Optional[str] = None
    buoyWindDirValidCalQAQCRpt: Optional[str] = None
    buoyWindSpeedAlphaQAQCRpt: Optional[str] = None
    buoyWindSpeedBetaQAQCRpt: Optional[str] = None
    buoyWindSpeedConsistencyQAQCRpt: Optional[str] = None
    buoyWindSpeedGapQAQCRpt: Optional[str] = None
    buoyWindSpeedNullQAQCRpt: Optional[str] = None
    buoyWindSpeedPersistenceQAQCRpt: Optional[str] = None
    buoyWindSpeedRangeQAQCRpt: Optional[str] = None
    buoyWindSpeedSpikeQAQCRpt: Optional[str] = None
    buoyWindSpeedStepQAQCRpt: Optional[str] = None
    buoyWindSpeedValidCalQAQCRpt: Optional[str] = None

@dataclass
class WSDBuoy30min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.WSDBuoy_30min
    class_class_curie: ClassVar[str] = "neon:WSDBuoy_30min"
    class_name: ClassVar[str] = "WSDBuoy_30min"
    class_model_uri: ClassVar[URIRef] = NEON.WSDBuoy30min

    buoyCompGapFailQM: Optional[float] = None
    buoyCompGapNAQM: Optional[float] = None
    buoyCompGapPassQM: Optional[float] = None
    buoyCompNullFailQM: Optional[float] = None
    buoyCompNullNAQM: Optional[float] = None
    buoyCompNullPassQM: Optional[float] = None
    buoyCompPersistenceFailQM: Optional[float] = None
    buoyCompPersistenceNAQM: Optional[float] = None
    buoyCompPersistencePassQM: Optional[float] = None
    buoyCompRangeFailQM: Optional[float] = None
    buoyCompRangeNAQM: Optional[float] = None
    buoyCompRangePassQM: Optional[float] = None
    buoyCompSpikeFailQM: Optional[float] = None
    buoyCompSpikeNAQM: Optional[float] = None
    buoyCompSpikePassQM: Optional[float] = None
    buoyCompStepFailQM: Optional[float] = None
    buoyCompStepNAQM: Optional[float] = None
    buoyCompStepPassQM: Optional[float] = None
    buoyWindDirAlphaQM: Optional[float] = None
    buoyWindDirBetaQM: Optional[float] = None
    buoyWindDirCalmWindFailQM: Optional[float] = None
    buoyWindDirCalmWindNAQM: Optional[float] = None
    buoyWindDirCalmWindPassQM: Optional[float] = None
    buoyWindDirConsistencyFailQM: Optional[float] = None
    buoyWindDirConsistencyNAQM: Optional[float] = None
    buoyWindDirConsistencyPassQM: Optional[float] = None
    buoyWindDirDeadZoneFailQM: Optional[float] = None
    buoyWindDirDeadZoneNAQM: Optional[float] = None
    buoyWindDirDeadZonePassQM: Optional[float] = None
    buoyWindDirExpUncert: Optional[float] = None
    buoyWindDirFinalQF: Optional[str] = None
    buoyWindDirFinalQFSciRvw: Optional[str] = None
    buoyWindDirGapFailQM: Optional[float] = None
    buoyWindDirGapNAQM: Optional[float] = None
    buoyWindDirGapPassQM: Optional[float] = None
    buoyWindDirMean: Optional[float] = None
    buoyWindDirNullFailQM: Optional[float] = None
    buoyWindDirNullNAQM: Optional[float] = None
    buoyWindDirNullPassQM: Optional[float] = None
    buoyWindDirNumPts: Optional[float] = None
    buoyWindDirPersistenceFailQM: Optional[float] = None
    buoyWindDirPersistenceNAQM: Optional[float] = None
    buoyWindDirPersistencePassQM: Optional[float] = None
    buoyWindDirRangeFailQM: Optional[float] = None
    buoyWindDirRangeNAQM: Optional[float] = None
    buoyWindDirRangePassQM: Optional[float] = None
    buoyWindDirSpikeFailQM: Optional[float] = None
    buoyWindDirSpikeNAQM: Optional[float] = None
    buoyWindDirSpikePassQM: Optional[float] = None
    buoyWindDirStdErMean: Optional[float] = None
    buoyWindDirStepFailQM: Optional[float] = None
    buoyWindDirStepNAQM: Optional[float] = None
    buoyWindDirStepPassQM: Optional[float] = None
    buoyWindDirValidCalFailQM: Optional[float] = None
    buoyWindDirValidCalNAQM: Optional[float] = None
    buoyWindDirValidCalPassQM: Optional[float] = None
    buoyWindDirVariance: Optional[float] = None
    buoyWindSpeedAlphaQM: Optional[float] = None
    buoyWindSpeedBetaQM: Optional[float] = None
    buoyWindSpeedConsistencyFailQM: Optional[float] = None
    buoyWindSpeedConsistencyNAQM: Optional[float] = None
    buoyWindSpeedConsistencyPassQM: Optional[float] = None
    buoyWindSpeedExpUncert: Optional[float] = None
    buoyWindSpeedFinalQF: Optional[str] = None
    buoyWindSpeedFinalQFSciRvw: Optional[str] = None
    buoyWindSpeedGapFailQM: Optional[float] = None
    buoyWindSpeedGapNAQM: Optional[float] = None
    buoyWindSpeedGapPassQM: Optional[float] = None
    buoyWindSpeedMaximum: Optional[float] = None
    buoyWindSpeedMean: Optional[float] = None
    buoyWindSpeedMinimum: Optional[float] = None
    buoyWindSpeedNullFailQM: Optional[float] = None
    buoyWindSpeedNullNAQM: Optional[float] = None
    buoyWindSpeedNullPassQM: Optional[float] = None
    buoyWindSpeedNumPts: Optional[float] = None
    buoyWindSpeedPersistenceFailQM: Optional[float] = None
    buoyWindSpeedPersistenceNAQM: Optional[float] = None
    buoyWindSpeedPersistencePassQM: Optional[float] = None
    buoyWindSpeedRangeFailQM: Optional[float] = None
    buoyWindSpeedRangeNAQM: Optional[float] = None
    buoyWindSpeedRangePassQM: Optional[float] = None
    buoyWindSpeedSpikeFailQM: Optional[float] = None
    buoyWindSpeedSpikeNAQM: Optional[float] = None
    buoyWindSpeedSpikePassQM: Optional[float] = None
    buoyWindSpeedStdErMean: Optional[float] = None
    buoyWindSpeedStepFailQM: Optional[float] = None
    buoyWindSpeedStepNAQM: Optional[float] = None
    buoyWindSpeedStepPassQM: Optional[float] = None
    buoyWindSpeedValidCalFailQM: Optional[float] = None
    buoyWindSpeedValidCalNAQM: Optional[float] = None
    buoyWindSpeedValidCalPassQM: Optional[float] = None
    buoyWindSpeedVariance: Optional[float] = None

@dataclass
class TSD30Min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TSD_30_min
    class_class_curie: ClassVar[str] = "neon:TSD_30_min"
    class_name: ClassVar[str] = "TSD_30_min"
    class_model_uri: ClassVar[URIRef] = NEON.TSD30Min

    tsdWaterTempAlphaQM: Optional[float] = None
    tsdWaterTempBetaQM: Optional[float] = None
    tsdWaterTempConsistencyFailQM: Optional[float] = None
    tsdWaterTempConsistencyNAQM: Optional[float] = None
    tsdWaterTempConsistencyPassQM: Optional[float] = None
    tsdWaterTempFinalQF: Optional[str] = None
    tsdWaterTempGapFailQM: Optional[float] = None
    tsdWaterTempGapNAQM: Optional[float] = None
    tsdWaterTempGapPassQM: Optional[float] = None
    tsdWaterTempMaximum: Optional[float] = None
    tsdWaterTempMean: Optional[float] = None
    tsdWaterTempMinimum: Optional[float] = None
    tsdWaterTempNullFailQM: Optional[float] = None
    tsdWaterTempNullNAQM: Optional[float] = None
    tsdWaterTempNullPassQM: Optional[float] = None
    tsdWaterTempNumPts: Optional[str] = None
    tsdWaterTempRangeFailQM: Optional[float] = None
    tsdWaterTempRangeNAQM: Optional[float] = None
    tsdWaterTempRangePassQM: Optional[float] = None
    tsdWaterTempSpikeFailQM: Optional[float] = None
    tsdWaterTempSpikeNAQM: Optional[float] = None
    tsdWaterTempSpikePassQM: Optional[float] = None
    tsdWaterTempStdErMean: Optional[float] = None
    tsdWaterTempStepFailQM: Optional[float] = None
    tsdWaterTempStepNAQM: Optional[float] = None
    tsdWaterTempStepPassQM: Optional[float] = None
    tsdWaterTempValidCalFailQM: Optional[float] = None
    tsdWaterTempValidCalNAQM: Optional[float] = None
    tsdWaterTempValidCalPassQM: Optional[float] = None
    tsdWaterTempVariance: Optional[float] = None
    tsdWaterTempFinalQFSciRvw: Optional[str] = None

@dataclass
class TSD1Min(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.TSD_1_min
    class_class_curie: ClassVar[str] = "neon:TSD_1_min"
    class_name: ClassVar[str] = "TSD_1_min"
    class_model_uri: ClassVar[URIRef] = NEON.TSD1Min

    startDateTime: Optional[Union[str, XSDTime]] = None
    thermistorDepth: Optional[float] = None
    tsdWaterTemp: Optional[float] = None
    tsdWaterTempConsistQF: Optional[int] = None
    tsdWaterTempExpUncert: Optional[float] = None
    tsdWaterTempGapQF: Optional[int] = None
    tsdWaterTempNullQF: Optional[int] = None
    tsdWaterTempRangeQF: Optional[int] = None
    tsdWaterTempSpikeQF: Optional[int] = None
    tsdWaterTempStepQF: Optional[int] = None
    tsdWaterTempValidCalQF: Optional[int] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.startDateTime is not None and not isinstance(self.startDateTime, XSDTime):
            self.startDateTime = XSDTime(self.startDateTime)
        super().__post_init__(**kwargs)


@dataclass
class SCGW5Minute(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SCGW_5_minute
    class_class_curie: ClassVar[str] = "neon:SCGW_5_minute"
    class_name: ClassVar[str] = "SCGW_5_minute"
    class_model_uri: ClassVar[URIRef] = NEON.SCGW5Minute

    endDateTime: Optional[Union[str, XSDTime]] = None
    groundwaterSpecCond: Optional[float] = None
    groundwaterSpecCondExpUncert: Optional[float] = None
    groundwaterSpecCondRangeQF: Optional[int] = None
    groundwaterSpecCondPersistQF: Optional[int] = None
    groundwaterSpecCondStepQF: Optional[int] = None
    groundwaterSpecCondNullQF: Optional[int] = None
    groundwaterSpecCondGapQF: Optional[int] = None
    groundwaterSpecCondConsistQF: Optional[int] = None
    groundwaterSpecCondSpikeQF: Optional[int] = None
    validCalQF: Optional[int] = None
    sciRvwQF: Optional[str] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.endDateTime is not None and not isinstance(self.endDateTime, XSDTime):
            self.endDateTime = XSDTime(self.endDateTime)
        super().__post_init__(**kwargs)


@dataclass
class ST(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.ST
    class_class_curie: ClassVar[str] = "neon:ST"
    class_name: ClassVar[str] = "ST"
    class_model_uri: ClassVar[URIRef] = NEON.ST

    soilPRTResistance: Optional[float] = None

@dataclass
class SCO2C(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SCO2C
    class_class_curie: ClassVar[str] = "neon:SCO2C"
    class_name: ClassVar[str] = "SCO2C"
    class_model_uri: ClassVar[URIRef] = NEON.SCO2C

    rawCO2: Optional[float] = None
    headspaceTemp: Optional[float] = None
    errorStatus: Optional[float] = None

class Phenocam(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.phenocam
    class_class_curie: ClassVar[str] = "neon:phenocam"
    class_name: ClassVar[str] = "phenocam"
    class_model_uri: ClassVar[URIRef] = NEON.Phenocam


class Snowcam(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.snowcam
    class_class_curie: ClassVar[str] = "neon:snowcam"
    class_name: ClassVar[str] = "snowcam"
    class_model_uri: ClassVar[URIRef] = NEON.Snowcam


@dataclass
class AquGaugePhotos(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.aqu_gauge_photos
    class_class_curie: ClassVar[str] = "neon:aqu_gauge_photos"
    class_name: ClassVar[str] = "aqu_gauge_photos"
    class_model_uri: ClassVar[URIRef] = NEON.AquGaugePhotos

    rawIRImage: Optional[str] = None
    rawRGBImage: Optional[str] = None
    IRmetadata: Optional[str] = None
    RGBmetadata: Optional[str] = None

@dataclass
class SHF(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SHF
    class_class_curie: ClassVar[str] = "neon:SHF"
    class_name: ClassVar[str] = "SHF"
    class_model_uri: ClassVar[URIRef] = NEON.SHF

    SHFVoltage: Optional[float] = None
    SHFCalHeaterFlag: Optional[float] = None
    curVoltage: Optional[float] = None

@dataclass
class WdpSensorIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wdp_sensor_in
    class_class_curie: ClassVar[str] = "neon:wdp_sensor_in"
    class_name: ClassVar[str] = "wdp_sensor_in"
    class_model_uri: ClassVar[URIRef] = NEON.WdpSensorIn

    chamberTemperature: Optional[float] = None
    powerStatus: Optional[float] = None
    lidStatusWetDep: Optional[float] = None

class SoniAmrs(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.soniAmrs
    class_class_curie: ClassVar[str] = "neon:soniAmrs"
    class_name: ClassVar[str] = "soniAmrs"
    class_model_uri: ClassVar[URIRef] = NEON.SoniAmrs


class Irga(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irga
    class_class_curie: ClassVar[str] = "neon:irga"
    class_name: ClassVar[str] = "irga"
    class_model_uri: ClassVar[URIRef] = NEON.Irga


@dataclass
class SoniAmrsL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.soniAmrs_L0prime
    class_class_curie: ClassVar[str] = "neon:soniAmrs_L0prime"
    class_name: ClassVar[str] = "soniAmrs_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.SoniAmrsL0prime

    acceXaxs: Optional[float] = None
    acceYaxs: Optional[float] = None
    acceZaxs: Optional[float] = None
    acceXaxsFree: Optional[float] = None
    acceYaxsFree: Optional[float] = None
    acceZaxsFree: Optional[float] = None
    omegYaxs: Optional[float] = None
    omegXaxs: Optional[float] = None
    omegZaxs: Optional[float] = None
    thetYaxs: Optional[float] = None
    thetXaxs: Optional[float] = None
    thetZaxs: Optional[float] = None
    diag32: Optional[int] = None
    qfAmrsVal: Optional[int] = None
    qfAmrsFilt: Optional[int] = None
    qfAmrsVelo: Optional[int] = None
    qfAmrsRng: Optional[int] = None

@dataclass
class IrgaL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irga_L0prime
    class_class_curie: ClassVar[str] = "neon:irga_L0prime"
    class_name: ClassVar[str] = "irga_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaL0prime

    idx: Optional[int] = None
    diag: Optional[int] = None
    tempBloc: Optional[float] = None
    tempCellIn: Optional[float] = None
    tempCellOut: Optional[float] = None
    presAtmBox: Optional[float] = None
    presGageCell: Optional[float] = None
    pwrH2OSamp: Optional[float] = None
    pwrH2ORef: Optional[float] = None
    rhoMoleH2O: Optional[float] = None
    pwrCO2Samp: Optional[float] = None
    pwrCO2Ref: Optional[float] = None
    rhoMoleCO2: Optional[float] = None
    diag2: Optional[int] = None
    poteCool: Optional[float] = None
    ssiCO2: Optional[float] = None
    ssiH2O: Optional[float] = None
    tempMean: Optional[str] = None
    presSum: Optional[str] = None
    qfIrgaHead: Optional[int] = None
    qfIrgaTempOut: Optional[int] = None
    qfIrgaTempIn: Optional[int] = None
    qfIrgaAux: Optional[int] = None
    qfIrgaPres: Optional[int] = None
    qfIrgaChop: Optional[int] = None
    qfIrgaDetc: Optional[int] = None
    qfIrgaPll: Optional[int] = None
    qfIrgaSync: Optional[int] = None
    qfIrgaAgc: Optional[int] = None

@dataclass
class DPSD(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.DPSD
    class_class_curie: ClassVar[str] = "neon:DPSD"
    class_name: ClassVar[str] = "DPSD"
    class_model_uri: ClassVar[URIRef] = NEON.DPSD

    particulateMass1.0: Optional[float] = None
    particulateMass2.5: Optional[float] = None
    particulateMass4.0: Optional[float] = None
    particulateMass10: Optional[float] = None
    particulateMass15: Optional[float] = None
    pressureFM: Optional[float] = None
    tempFM: Optional[float] = None
    flowRateVolFM: Optional[float] = None
    flowRateMassFM: Optional[float] = None

class IrgaMfcSamp(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaMfcSamp
    class_class_curie: ClassVar[str] = "neon:irgaMfcSamp"
    class_name: ClassVar[str] = "irgaMfcSamp"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaMfcSamp


class IrgaMfcVali(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaMfcVali
    class_class_curie: ClassVar[str] = "neon:irgaMfcVali"
    class_name: ClassVar[str] = "irgaMfcVali"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaMfcVali


class IrgaPresTrap(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPresTrap
    class_class_curie: ClassVar[str] = "neon:irgaPresTrap"
    class_name: ClassVar[str] = "irgaPresTrap"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPresTrap


class ProfMfcSamp(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profMfcSamp
    class_class_curie: ClassVar[str] = "neon:profMfcSamp"
    class_name: ClassVar[str] = "profMfcSamp"
    class_model_uri: ClassVar[URIRef] = NEON.ProfMfcSamp


class ProfMfcVali(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profMfcVali
    class_class_curie: ClassVar[str] = "neon:profMfcVali"
    class_name: ClassVar[str] = "profMfcVali"
    class_model_uri: ClassVar[URIRef] = NEON.ProfMfcVali


class ProfMfm(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profMfm
    class_class_curie: ClassVar[str] = "neon:profMfm"
    class_name: ClassVar[str] = "profMfm"
    class_model_uri: ClassVar[URIRef] = NEON.ProfMfm


class IrgaMfcSampL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaMfcSamp_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaMfcSamp_L0prime"
    class_name: ClassVar[str] = "irgaMfcSamp_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaMfcSampL0prime


class IrgaMfcValiL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaMfcVali_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaMfcVali_L0prime"
    class_name: ClassVar[str] = "irgaMfcVali_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaMfcValiL0prime


class IrgaPresTrapL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPresTrap_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaPresTrap_L0prime"
    class_name: ClassVar[str] = "irgaPresTrap_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPresTrapL0prime


class ProfMfcSampL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profMfcSamp_L0prime
    class_class_curie: ClassVar[str] = "neon:profMfcSamp_L0prime"
    class_name: ClassVar[str] = "profMfcSamp_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfMfcSampL0prime


@dataclass
class ProfMfcValiL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profMfcVali_L0prime
    class_class_curie: ClassVar[str] = "neon:profMfcVali_L0prime"
    class_name: ClassVar[str] = "profMfcVali_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfMfcValiL0prime

    frtSet0: Optional[float] = None
    qfFrt0: Optional[int] = None

@dataclass
class ProfMfmL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profMfm_L0prime
    class_class_curie: ClassVar[str] = "neon:profMfm_L0prime"
    class_name: ClassVar[str] = "profMfm_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfMfmL0prime

    presAtm: Optional[float] = None
    temp: Optional[float] = None
    frt: Optional[float] = None
    frt0: Optional[float] = None

@dataclass
class SWS(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.SWS
    class_class_curie: ClassVar[str] = "neon:SWS"
    class_name: ClassVar[str] = "SWS"
    class_model_uri: ClassVar[URIRef] = NEON.SWS

    rawVSWC0: Optional[float] = None
    rawVSIC0: Optional[float] = None
    rawVSWC1: Optional[float] = None
    rawVSIC1: Optional[float] = None
    rawVSWC2: Optional[float] = None
    rawVSIC2: Optional[float] = None
    rawVSWC3: Optional[float] = None
    rawVSIC3: Optional[float] = None
    rawVSWC4: Optional[float] = None
    rawVSIC4: Optional[float] = None
    rawVSWC5: Optional[float] = None
    rawVSIC5: Optional[float] = None
    rawVSWC6: Optional[float] = None
    rawVSIC6: Optional[float] = None
    rawVSWC7: Optional[float] = None
    rawVSIC7: Optional[float] = None

class ProfIrga(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profIrga
    class_class_curie: ClassVar[str] = "neon:profIrga"
    class_name: ClassVar[str] = "profIrga"
    class_model_uri: ClassVar[URIRef] = NEON.ProfIrga


@dataclass
class ProfIrgaL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profIrga_L0prime
    class_class_curie: ClassVar[str] = "neon:profIrga_L0prime"
    class_name: ClassVar[str] = "profIrga_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfIrgaL0prime

    asrpH2O: Optional[float] = None
    asrpCO2: Optional[float] = None
    fwMoleH2O: Optional[float] = None
    tempCell: Optional[float] = None
    presCell: Optional[float] = None

@dataclass
class CO2IsoL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.CO2Iso_L0prime
    class_class_curie: ClassVar[str] = "neon:CO2Iso_L0prime"
    class_name: ClassVar[str] = "CO2Iso_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.CO2IsoL0prime

    idGas: Optional[int] = None

@dataclass
class H2OIsoL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.H2OIso_L0prime
    class_class_curie: ClassVar[str] = "neon:H2OIso_L0prime"
    class_name: ClassVar[str] = "H2OIso_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.H2OIsoL0prime

    fdMoleH2O: Optional[float] = None
    qfSensStatus: Optional[int] = None
    qfStusN2: Optional[int] = None
    qfLowRtioMoleWetH2O: Optional[int] = None

@dataclass
class CO2Iso(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.CO2Iso
    class_class_curie: ClassVar[str] = "neon:CO2Iso"
    class_name: ClassVar[str] = "CO2Iso"
    class_model_uri: ClassVar[URIRef] = NEON.CO2Iso

    valvSol: Optional[float] = None
    specID: Optional[float] = None
    fwMoleCO2: Optional[float] = None
    fwMole12CO2: Optional[float] = None
    fwMole13CO2: Optional[float] = None
    2Mind13CO2: Optional[float] = None
    30Secd13CO2: Optional[float] = None
    5Mind13CO2: Optional[float] = None
    percentFwMoleH2O: Optional[float] = None
    2MinCO2IsoRatio: Optional[float] = None
    30SecCO2IsoRatio: Optional[float] = None
    5MinCO2IsoRatio: Optional[float] = None
    CO2IsoRatio: Optional[float] = None
    fdMoleCH4: Optional[float] = None
    fwMoleHPCH4: Optional[float] = None
    fdMoleHPCH4: Optional[float] = None
    peakHeigH2O: Optional[float] = None
    spliFitCH4: Optional[float] = None
    peakHeig12C: Optional[float] = None
    peakHeig13C: Optional[float] = None

class IrgaGasCyl(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaGasCyl
    class_class_curie: ClassVar[str] = "neon:irgaGasCyl"
    class_name: ClassVar[str] = "irgaGasCyl"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaGasCyl


class ProfGasCyl(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profGasCyl
    class_class_curie: ClassVar[str] = "neon:profGasCyl"
    class_name: ClassVar[str] = "profGasCyl"
    class_model_uri: ClassVar[URIRef] = NEON.ProfGasCyl


class ProfGasCylL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profGasCyl_L0prime
    class_class_curie: ClassVar[str] = "neon:profGasCyl_L0prime"
    class_name: ClassVar[str] = "profGasCyl_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfGasCylL0prime


class ProfGasCylL1prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profGasCyl_L1prime
    class_class_curie: ClassVar[str] = "neon:profGasCyl_L1prime"
    class_name: ClassVar[str] = "profGasCyl_L1prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfGasCylL1prime


@dataclass
class ProfGasCylL2prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profGasCyl_L2prime
    class_class_curie: ClassVar[str] = "neon:profGasCyl_L2prime"
    class_name: ClassVar[str] = "profGasCyl_L2prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfGasCylL2prime

    fdMoleCO2: Optional[float] = None
    fdMole12CO2: Optional[float] = None
    fdMole13CO2: Optional[float] = None
    d13CO2: Optional[float] = None

class IrgaPresValiRegIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPresValiRegIn
    class_class_curie: ClassVar[str] = "neon:irgaPresValiRegIn"
    class_name: ClassVar[str] = "irgaPresValiRegIn"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPresValiRegIn


class IrgaPresValiRegOut(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPresValiRegOut
    class_class_curie: ClassVar[str] = "neon:irgaPresValiRegOut"
    class_name: ClassVar[str] = "irgaPresValiRegOut"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPresValiRegOut


class IrgaPresValiLine(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPresValiLine
    class_class_curie: ClassVar[str] = "neon:irgaPresValiLine"
    class_name: ClassVar[str] = "irgaPresValiLine"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPresValiLine


class ProfPresInlet(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profPresInlet
    class_class_curie: ClassVar[str] = "neon:profPresInlet"
    class_name: ClassVar[str] = "profPresInlet"
    class_model_uri: ClassVar[URIRef] = NEON.ProfPresInlet


class ProfPresValiRegDel(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profPresValiRegDel
    class_class_curie: ClassVar[str] = "neon:profPresValiRegDel"
    class_name: ClassVar[str] = "profPresValiRegDel"
    class_model_uri: ClassVar[URIRef] = NEON.ProfPresValiRegDel


class ProfPresValiRegTank(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profPresValiRegTank
    class_class_curie: ClassVar[str] = "neon:profPresValiRegTank"
    class_name: ClassVar[str] = "profPresValiRegTank"
    class_model_uri: ClassVar[URIRef] = NEON.ProfPresValiRegTank


class IrgaPresValiRegInL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPresValiRegIn_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaPresValiRegIn_L0prime"
    class_name: ClassVar[str] = "irgaPresValiRegIn_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPresValiRegInL0prime


class IrgaPresValiLineL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPresValiLine_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaPresValiLine_L0prime"
    class_name: ClassVar[str] = "irgaPresValiLine_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPresValiLineL0prime


class ProfPresInletL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profPresInlet_L0prime
    class_class_curie: ClassVar[str] = "neon:profPresInlet_L0prime"
    class_name: ClassVar[str] = "profPresInlet_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfPresInletL0prime


class ProfPresValiRegDelL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profPresValiRegDel_L0prime
    class_class_curie: ClassVar[str] = "neon:profPresValiRegDel_L0prime"
    class_name: ClassVar[str] = "profPresValiRegDel_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfPresValiRegDelL0prime


@dataclass
class ProfPresValiRegTankL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profPresValiRegTank_L0prime
    class_class_curie: ClassVar[str] = "neon:profPresValiRegTank_L0prime"
    class_name: ClassVar[str] = "profPresValiRegTank_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfPresValiRegTankL0prime

    presGage: Optional[float] = None

class IrgaSndLeak(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaSndLeak
    class_class_curie: ClassVar[str] = "neon:irgaSndLeak"
    class_name: ClassVar[str] = "irgaSndLeak"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaSndLeak


@dataclass
class IrgaSndLeakHeatL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaSndLeakHeat_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaSndLeakHeat_L0prime"
    class_name: ClassVar[str] = "irgaSndLeakHeat_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaSndLeakHeatL0prime

    qfTrapIn: Optional[int] = None
    qfTrapOut: Optional[int] = None
    qfLeak: Optional[int] = None
    qfHeatSoni: Optional[int] = None
    qfHeatTube: Optional[int] = None
    qfHeatCap: Optional[int] = None
    qfHeatVali: Optional[int] = None

class IrgaSndValiNema(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaSndValiNema
    class_class_curie: ClassVar[str] = "neon:irgaSndValiNema"
    class_name: ClassVar[str] = "irgaSndValiNema"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaSndValiNema


class IrgaSndValiHut(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaSndValiHut
    class_class_curie: ClassVar[str] = "neon:irgaSndValiHut"
    class_name: ClassVar[str] = "irgaSndValiHut"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaSndValiHut


class IrgaSndValiNemaL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaSndValiNema_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaSndValiNema_L0prime"
    class_name: ClassVar[str] = "irgaSndValiNema_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaSndValiNemaL0prime


class IrgaSndValiHutL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaSndValiHut_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaSndValiHut_L0prime"
    class_name: ClassVar[str] = "irgaSndValiHut_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaSndValiHutL0prime


@dataclass
class IrgaSndValiNemaL1prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaSndValiNema_L1prime
    class_class_curie: ClassVar[str] = "neon:irgaSndValiNema_L1prime"
    class_name: ClassVar[str] = "irgaSndValiNema_L1prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaSndValiNemaL1prime

    qfGas1: Optional[int] = None
    qfGas2: Optional[int] = None
    qfGas3: Optional[int] = None
    qfGas4: Optional[int] = None
    qfGas5: Optional[int] = None

@dataclass
class Nitrate(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.nitrate
    class_class_curie: ClassVar[str] = "neon:nitrate"
    class_name: ClassVar[str] = "nitrate"
    class_model_uri: ClassVar[URIRef] = NEON.Nitrate

    rawNitrateSingleCompressedStream: Optional[str] = None

@dataclass
class H2OIso(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.H2OIso
    class_class_curie: ClassVar[str] = "neon:H2OIso"
    class_name: ClassVar[str] = "H2OIso"
    class_model_uri: ClassVar[URIRef] = NEON.H2OIso

    instStat: Optional[int] = None
    presCavi: Optional[float] = None
    tempCavi: Optional[float] = None
    tempDas: Optional[float] = None
    tempEtal: Optional[float] = None
    tempWarmBox: Optional[float] = None
    posiMPV: Optional[float] = None
    valvOutl: Optional[float] = None
    fwMoleCH4: Optional[float] = None
    valvMask: Optional[float] = None
    ppmvFwMoleH2O: Optional[float] = None
    N2Flag: Optional[float] = None
    baseShift: Optional[float] = None
    slopShift: Optional[float] = None
    resiRMS: Optional[float] = None
    d18OWater: Optional[float] = None
    d2HWater: Optional[float] = None

class HutEnv(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.hutEnv
    class_class_curie: ClassVar[str] = "neon:hutEnv"
    class_name: ClassVar[str] = "hutEnv"
    class_model_uri: ClassVar[URIRef] = NEON.HutEnv


@dataclass
class HutEnvL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.hutEnv_L0prime
    class_class_curie: ClassVar[str] = "neon:hutEnv_L0prime"
    class_name: ClassVar[str] = "hutEnv_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.HutEnvL0prime

    tempHut: Optional[float] = None
    RHHut: Optional[float] = None
    baroPresHut: Optional[float] = None
    H2OMixRatioHut: Optional[float] = None
    qfTemp: Optional[str] = None
    qfRh: Optional[int] = None

class ProfPumpSmp(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profPumpSmp
    class_class_curie: ClassVar[str] = "neon:profPumpSmp"
    class_name: ClassVar[str] = "profPumpSmp"
    class_model_uri: ClassVar[URIRef] = NEON.ProfPumpSmp


class IrgaPump(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPump
    class_class_curie: ClassVar[str] = "neon:irgaPump"
    class_name: ClassVar[str] = "irgaPump"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPump


class IrgaPumpL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.irgaPump_L0prime
    class_class_curie: ClassVar[str] = "neon:irgaPump_L0prime"
    class_name: ClassVar[str] = "irgaPump_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.IrgaPumpL0prime


@dataclass
class ProfPumpSmpL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profPumpSmp_L0prime
    class_class_curie: ClassVar[str] = "neon:profPumpSmp_L0prime"
    class_name: ClassVar[str] = "profPumpSmp_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfPumpSmpL0prime

    pumpVoltage: Optional[float] = None

class ProfSndVapor(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profSndVapor
    class_class_curie: ClassVar[str] = "neon:profSndVapor"
    class_name: ClassVar[str] = "profSndVapor"
    class_model_uri: ClassVar[URIRef] = NEON.ProfSndVapor


@dataclass
class ProfSndL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profSnd_L0prime
    class_class_curie: ClassVar[str] = "neon:profSnd_L0prime"
    class_name: ClassVar[str] = "profSnd_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfSndL0prime

    valvStat1: Optional[int] = None
    typeGas: Optional[str] = None
    typeGasCrdH2O: Optional[int] = None
    lvlIrga: Optional[int] = None
    lvlCrdCO2: Optional[int] = None
    lvlCrdH2O: Optional[int] = None
    injNum: Optional[str] = None
    typeH2o: Optional[str] = None

@dataclass
class ProfSnd(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profSnd
    class_class_curie: ClassVar[str] = "neon:profSnd"
    class_name: ClassVar[str] = "profSnd"
    class_model_uri: ClassVar[URIRef] = NEON.ProfSnd

    valvCmd5: Optional[int] = None
    valvCmd6: Optional[int] = None
    valvCmd7: Optional[int] = None
    valvCmd8: Optional[int] = None

class ProfSndAux(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profSndAux
    class_class_curie: ClassVar[str] = "neon:profSndAux"
    class_name: ClassVar[str] = "profSndAux"
    class_model_uri: ClassVar[URIRef] = NEON.ProfSndAux


@dataclass
class ProfSndAuxL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profSndAux_L0prime
    class_class_curie: ClassVar[str] = "neon:profSndAux_L0prime"
    class_name: ClassVar[str] = "profSndAux_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfSndAuxL0prime

    valvCmd1: Optional[int] = None
    valvCmd2: Optional[int] = None
    valvCmd3: Optional[int] = None
    valvCmd4: Optional[int] = None
    measTypeCrdH2O: Optional[int] = None
    measTypeCrdCO2: Optional[int] = None
    qfValvIrga: Optional[int] = None
    measTypeIrga: Optional[int] = None

class ProfTray45Vial(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profTray45Vial
    class_class_curie: ClassVar[str] = "neon:profTray45Vial"
    class_name: ClassVar[str] = "profTray45Vial"
    class_model_uri: ClassVar[URIRef] = NEON.ProfTray45Vial


class ProfTray90Vial(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profTray90Vial
    class_class_curie: ClassVar[str] = "neon:profTray90Vial"
    class_name: ClassVar[str] = "profTray90Vial"
    class_model_uri: ClassVar[URIRef] = NEON.ProfTray90Vial


class ProfRefeH2oValiL0prime(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.profRefeH2oVali_L0prime
    class_class_curie: ClassVar[str] = "neon:profRefeH2oVali_L0prime"
    class_name: ClassVar[str] = "profRefeH2oVali_L0prime"
    class_model_uri: ClassVar[URIRef] = NEON.ProfRefeH2oValiL0prime


@dataclass
class H2oIsoCVAL(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.h2oIsoCVAL
    class_class_curie: ClassVar[str] = "neon:h2oIsoCVAL"
    class_name: ClassVar[str] = "h2oIsoCVAL"
    class_model_uri: ClassVar[URIRef] = NEON.H2oIsoCVAL

    d2HWaterLow: Optional[float] = None
    d18OWaterLow: Optional[float] = None
    d2HWaterMed: Optional[float] = None
    d18OWaterMed: Optional[float] = None
    d2HWaterHigh: Optional[float] = None
    d18OWaterHigh: Optional[float] = None
    d18OWaterHighArchive: Optional[float] = None
    d18OWaterLowArchive: Optional[float] = None
    d18OWaterMedArchive: Optional[float] = None
    d2HWaterHighArchive: Optional[float] = None
    d2HWaterLowArchive: Optional[float] = None
    d2HWaterMedArchive: Optional[float] = None

@dataclass
class WaterTempDepthBuoy(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.waterTempDepthBuoy
    class_class_curie: ClassVar[str] = "neon:waterTempDepthBuoy"
    class_name: ClassVar[str] = "waterTempDepthBuoy"
    class_model_uri: ClassVar[URIRef] = NEON.WaterTempDepthBuoy

    depth0WaterTemp: Optional[float] = None
    depth1WaterTemp: Optional[float] = None
    depth2WaterTemp: Optional[float] = None
    depth3WaterTemp: Optional[float] = None
    depth4WaterTemp: Optional[float] = None
    depth5WaterTemp: Optional[float] = None
    depth6WaterTemp: Optional[float] = None
    depth7WaterTemp: Optional[float] = None
    depth8WaterTemp: Optional[float] = None
    depth9WaterTemp: Optional[float] = None
    depth10WaterTemp: Optional[float] = None

@dataclass
class WssMonthly(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wss_monthly
    class_class_curie: ClassVar[str] = "neon:wss_monthly"
    class_name: ClassVar[str] = "wss_monthly"
    class_model_uri: ClassVar[URIRef] = NEON.WssMonthly

    yearMonth: Optional[Union[str, XSDTime]] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.yearMonth is not None and not isinstance(self.yearMonth, XSDTime):
            self.yearMonth = XSDTime(self.yearMonth)
        super().__post_init__(**kwargs)


@dataclass
class WssYearly(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.wss_yearly
    class_class_curie: ClassVar[str] = "neon:wss_yearly"
    class_name: ClassVar[str] = "wss_yearly"
    class_model_uri: ClassVar[URIRef] = NEON.WssYearly

    year: Optional[Union[str, XSDTime]] = None
    corPresQF: Optional[str] = None
    dewTempQF: Optional[str] = None
    precipQF: Optional[str] = None
    RHQF: Optional[str] = None
    shortRadQF: Optional[str] = None
    staPresQF: Optional[str] = None
    tempTripleQF: Optional[str] = None
    windSpeedQF: Optional[str] = None
    wssCorPres: Optional[float] = None
    wssDewTempMaximum: Optional[float] = None
    wssDewTempMean: Optional[float] = None
    wssDewTempMinimum: Optional[float] = None
    wssDewTempStdErMean: Optional[float] = None
    wssDewTempVariance: Optional[float] = None
    wssPrecipTotal: Optional[float] = None
    wssRHMaximum: Optional[float] = None
    wssRHMean: Optional[float] = None
    wssRHMinimum: Optional[float] = None
    wssRHStdErMean: Optional[float] = None
    wssRHVariance: Optional[float] = None
    wssShortRadMaximum: Optional[float] = None
    wssShortRadMean: Optional[float] = None
    wssShortRadMinimum: Optional[float] = None
    wssShortRadStdErMean: Optional[float] = None
    wssShortRadVariance: Optional[float] = None
    wssStaPresMaximum: Optional[float] = None
    wssStaPresMean: Optional[float] = None
    wssStaPresMinimum: Optional[float] = None
    wssStaPresStdErMean: Optional[float] = None
    wssStaPresVariance: Optional[float] = None
    wssTempTripleMaximum: Optional[float] = None
    wssTempTripleMean: Optional[float] = None
    wssTempTripleMinimum: Optional[float] = None
    wssTempTripleStdErMean: Optional[float] = None
    wssTempTripleVariance: Optional[float] = None
    wssWindSpeedMaximum: Optional[float] = None
    wssWindSpeedMean: Optional[float] = None
    wssWindSpeedMinimum: Optional[float] = None
    wssWindSpeedStdErMean: Optional[float] = None
    wssWindSpeedVariance: Optional[float] = None
    wssDewTempNumPts: Optional[float] = None
    wssRHNumPts: Optional[float] = None
    wssShortRadNumPts: Optional[float] = None
    wssStaPresNumPts: Optional[float] = None
    wssTempTripleNumPts: Optional[float] = None
    wssWindSpeedNumPts: Optional[float] = None

    def __post_init__(self, **kwargs: Dict[str, Any]):
        if self.year is not None and not isinstance(self.year, XSDTime):
            self.year = XSDTime(self.year)
        super().__post_init__(**kwargs)


@dataclass
class SmtIn(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = NEON.smt_in
    class_class_curie: ClassVar[str] = "neon:smt_in"
    class_name: ClassVar[str] = "smt_in"
    class_model_uri: ClassVar[URIRef] = NEON.SmtIn

    rawSoilTemp: Optional[float] = None
    rawSoilMoisture: Optional[float] = None
    rawSoilBulkRelPerm: Optional[float] = None
    rawSoilElectricCond: Optional[float] = None
    rawSoilPoreWaterEC: Optional[float] = None


# Slots
class slots:
    pass

slots.uid = Slot(uri=NEON.uid, name="uid", curie=NEON.curie('uid'),
                      model_uri=NEON.uid, domain=None, range=Optional[str])

slots.domainID = Slot(uri=NEON.domainID, name="domainID", curie=NEON.curie('domainID'),
                      model_uri=NEON.domainID, domain=None, range=Optional[str])

slots.siteID = Slot(uri=NEON.siteID, name="siteID", curie=NEON.curie('siteID'),
                      model_uri=NEON.siteID, domain=None, range=Optional[str])

slots.plotID = Slot(uri=NEON.plotID, name="plotID", curie=NEON.curie('plotID'),
                      model_uri=NEON.plotID, domain=None, range=Optional[str])

slots.date = Slot(uri=NEON.date, name="date", curie=NEON.curie('date'),
                      model_uri=NEON.date, domain=None, range=Optional[Union[str, XSDTime]])

slots.samplingProtocol = Slot(uri=NEON.samplingProtocol, name="samplingProtocol", curie=NEON.curie('samplingProtocol'),
                      model_uri=NEON.samplingProtocol, domain=None, range=Optional[str])

slots.identificationReferences = Slot(uri=NEON.identificationReferences, name="identificationReferences", curie=NEON.curie('identificationReferences'),
                      model_uri=NEON.identificationReferences, domain=None, range=Optional[str])

slots.remarks = Slot(uri=NEON.remarks, name="remarks", curie=NEON.curie('remarks'),
                      model_uri=NEON.remarks, domain=None, range=Optional[str])

slots.nightuid = Slot(uri=NEON.nightuid, name="nightuid", curie=NEON.curie('nightuid'),
                      model_uri=NEON.nightuid, domain=None, range=Optional[str])

slots.trapCoordinate = Slot(uri=NEON.trapCoordinate, name="trapCoordinate", curie=NEON.curie('trapCoordinate'),
                      model_uri=NEON.trapCoordinate, domain=None, range=Optional[str])

slots.trapStatus = Slot(uri=NEON.trapStatus, name="trapStatus", curie=NEON.curie('trapStatus'),
                      model_uri=NEON.trapStatus, domain=None, range=Optional[str])

slots.taxonID = Slot(uri=NEON.taxonID, name="taxonID", curie=NEON.curie('taxonID'),
                      model_uri=NEON.taxonID, domain=None, range=Optional[str])

slots.identificationQualifier = Slot(uri=NEON.identificationQualifier, name="identificationQualifier", curie=NEON.curie('identificationQualifier'),
                      model_uri=NEON.identificationQualifier, domain=None, range=Optional[str])

slots.sex = Slot(uri=NEON.sex, name="sex", curie=NEON.curie('sex'),
                      model_uri=NEON.sex, domain=None, range=Optional[str])

slots.lifeStage = Slot(uri=NEON.lifeStage, name="lifeStage", curie=NEON.curie('lifeStage'),
                      model_uri=NEON.lifeStage, domain=None, range=Optional[str])

slots.testes = Slot(uri=NEON.testes, name="testes", curie=NEON.curie('testes'),
                      model_uri=NEON.testes, domain=None, range=Optional[str])

slots.nipples = Slot(uri=NEON.nipples, name="nipples", curie=NEON.curie('nipples'),
                      model_uri=NEON.nipples, domain=None, range=Optional[str])

slots.pregnancyStatus = Slot(uri=NEON.pregnancyStatus, name="pregnancyStatus", curie=NEON.curie('pregnancyStatus'),
                      model_uri=NEON.pregnancyStatus, domain=None, range=Optional[str])

slots.vagina = Slot(uri=NEON.vagina, name="vagina", curie=NEON.curie('vagina'),
                      model_uri=NEON.vagina, domain=None, range=Optional[str])

slots.hindfootLength = Slot(uri=NEON.hindfootLength, name="hindfootLength", curie=NEON.curie('hindfootLength'),
                      model_uri=NEON.hindfootLength, domain=None, range=Optional[str])

slots.earLength = Slot(uri=NEON.earLength, name="earLength", curie=NEON.curie('earLength'),
                      model_uri=NEON.earLength, domain=None, range=Optional[str])

slots.tailLength = Slot(uri=NEON.tailLength, name="tailLength", curie=NEON.curie('tailLength'),
                      model_uri=NEON.tailLength, domain=None, range=Optional[str])

slots.totalLength = Slot(uri=NEON.totalLength, name="totalLength", curie=NEON.curie('totalLength'),
                      model_uri=NEON.totalLength, domain=None, range=Optional[str])

slots.weight = Slot(uri=NEON.weight, name="weight", curie=NEON.curie('weight'),
                      model_uri=NEON.weight, domain=None, range=Optional[str])

slots.tagID = Slot(uri=NEON.tagID, name="tagID", curie=NEON.curie('tagID'),
                      model_uri=NEON.tagID, domain=None, range=Optional[str])

slots.replacedTag = Slot(uri=NEON.replacedTag, name="replacedTag", curie=NEON.curie('replacedTag'),
                      model_uri=NEON.replacedTag, domain=None, range=Optional[str])

slots.recapture = Slot(uri=NEON.recapture, name="recapture", curie=NEON.curie('recapture'),
                      model_uri=NEON.recapture, domain=None, range=Optional[str])

slots.fate = Slot(uri=NEON.fate, name="fate", curie=NEON.curie('fate'),
                      model_uri=NEON.fate, domain=None, range=Optional[str])

slots.bloodSampleID = Slot(uri=NEON.bloodSampleID, name="bloodSampleID", curie=NEON.curie('bloodSampleID'),
                      model_uri=NEON.bloodSampleID, domain=None, range=Optional[str])

slots.bloodSampleMethod = Slot(uri=NEON.bloodSampleMethod, name="bloodSampleMethod", curie=NEON.curie('bloodSampleMethod'),
                      model_uri=NEON.bloodSampleMethod, domain=None, range=Optional[str])

slots.fecalSampleID = Slot(uri=NEON.fecalSampleID, name="fecalSampleID", curie=NEON.curie('fecalSampleID'),
                      model_uri=NEON.fecalSampleID, domain=None, range=Optional[str])

slots.fecalSampleCondition = Slot(uri=NEON.fecalSampleCondition, name="fecalSampleCondition", curie=NEON.curie('fecalSampleCondition'),
                      model_uri=NEON.fecalSampleCondition, domain=None, range=Optional[str])

slots.earSampleID = Slot(uri=NEON.earSampleID, name="earSampleID", curie=NEON.curie('earSampleID'),
                      model_uri=NEON.earSampleID, domain=None, range=Optional[str])

slots.hairSampleID = Slot(uri=NEON.hairSampleID, name="hairSampleID", curie=NEON.curie('hairSampleID'),
                      model_uri=NEON.hairSampleID, domain=None, range=Optional[str])

slots.whiskerSampleID = Slot(uri=NEON.whiskerSampleID, name="whiskerSampleID", curie=NEON.curie('whiskerSampleID'),
                      model_uri=NEON.whiskerSampleID, domain=None, range=Optional[str])

slots.voucherSampleID = Slot(uri=NEON.voucherSampleID, name="voucherSampleID", curie=NEON.curie('voucherSampleID'),
                      model_uri=NEON.voucherSampleID, domain=None, range=Optional[str])

slots.measuredBy = Slot(uri=NEON.measuredBy, name="measuredBy", curie=NEON.curie('measuredBy'),
                      model_uri=NEON.measuredBy, domain=None, range=Optional[str])

slots.recordedBy = Slot(uri=NEON.recordedBy, name="recordedBy", curie=NEON.curie('recordedBy'),
                      model_uri=NEON.recordedBy, domain=None, range=Optional[str])

slots.eventID = Slot(uri=NEON.eventID, name="eventID", curie=NEON.curie('eventID'),
                      model_uri=NEON.eventID, domain=None, range=Optional[str])

slots.night = Slot(uri=NEON.night, name="night", curie=NEON.curie('night'),
                      model_uri=NEON.night, domain=None, range=Optional[str])

slots.setTraps = Slot(uri=NEON.setTraps, name="setTraps", curie=NEON.curie('setTraps'),
                      model_uri=NEON.setTraps, domain=None, range=Optional[str])

slots.disturbedTraps = Slot(uri=NEON.disturbedTraps, name="disturbedTraps", curie=NEON.curie('disturbedTraps'),
                      model_uri=NEON.disturbedTraps, domain=None, range=Optional[str])

slots.samplingEffort = Slot(uri=NEON.samplingEffort, name="samplingEffort", curie=NEON.curie('samplingEffort'),
                      model_uri=NEON.samplingEffort, domain=None, range=Optional[str])

slots.duplicateNightQF = Slot(uri=NEON.duplicateNightQF, name="duplicateNightQF", curie=NEON.curie('duplicateNightQF'),
                      model_uri=NEON.duplicateNightQF, domain=None, range=Optional[int])

slots.missingRecordsPerBoutQF = Slot(uri=NEON.missingRecordsPerBoutQF, name="missingRecordsPerBoutQF", curie=NEON.curie('missingRecordsPerBoutQF'),
                      model_uri=NEON.missingRecordsPerBoutQF, domain=None, range=Optional[int])

slots.duplicateTrapCoordinateQF = Slot(uri=NEON.duplicateTrapCoordinateQF, name="duplicateTrapCoordinateQF", curie=NEON.curie('duplicateTrapCoordinateQF'),
                      model_uri=NEON.duplicateTrapCoordinateQF, domain=None, range=Optional[int])

slots.individualID = Slot(uri=NEON.individualID, name="individualID", curie=NEON.curie('individualID'),
                      model_uri=NEON.individualID, domain=None, range=Optional[str])

slots.nlcdClass = Slot(uri=NEON.nlcdClass, name="nlcdClass", curie=NEON.curie('nlcdClass'),
                      model_uri=NEON.nlcdClass, domain=None, range=Optional[str])

slots.decimalLatitude = Slot(uri=NEON.decimalLatitude, name="decimalLatitude", curie=NEON.curie('decimalLatitude'),
                      model_uri=NEON.decimalLatitude, domain=None, range=Optional[float])

slots.decimalLongitude = Slot(uri=NEON.decimalLongitude, name="decimalLongitude", curie=NEON.curie('decimalLongitude'),
                      model_uri=NEON.decimalLongitude, domain=None, range=Optional[float])

slots.geodeticDatum = Slot(uri=NEON.geodeticDatum, name="geodeticDatum", curie=NEON.curie('geodeticDatum'),
                      model_uri=NEON.geodeticDatum, domain=None, range=Optional[str])

slots.coordinateUncertainty = Slot(uri=NEON.coordinateUncertainty, name="coordinateUncertainty", curie=NEON.curie('coordinateUncertainty'),
                      model_uri=NEON.coordinateUncertainty, domain=None, range=Optional[float])

slots.elevation = Slot(uri=NEON.elevation, name="elevation", curie=NEON.curie('elevation'),
                      model_uri=NEON.elevation, domain=None, range=Optional[float])

slots.elevationUncertainty = Slot(uri=NEON.elevationUncertainty, name="elevationUncertainty", curie=NEON.curie('elevationUncertainty'),
                      model_uri=NEON.elevationUncertainty, domain=None, range=Optional[float])

slots.scientificName = Slot(uri=NEON.scientificName, name="scientificName", curie=NEON.curie('scientificName'),
                      model_uri=NEON.scientificName, domain=None, range=Optional[str])

slots.taxonRank = Slot(uri=NEON.taxonRank, name="taxonRank", curie=NEON.curie('taxonRank'),
                      model_uri=NEON.taxonRank, domain=None, range=Optional[str])

slots.identificationStatus = Slot(uri=NEON.identificationStatus, name="identificationStatus", curie=NEON.curie('identificationStatus'),
                      model_uri=NEON.identificationStatus, domain=None, range=Optional[str])

slots.reproductiveCondition = Slot(uri=NEON.reproductiveCondition, name="reproductiveCondition", curie=NEON.curie('reproductiveCondition'),
                      model_uri=NEON.reproductiveCondition, domain=None, range=Optional[str])

slots.consistencyTagIDSexQF = Slot(uri=NEON.consistencyTagIDSexQF, name="consistencyTagIDSexQF", curie=NEON.curie('consistencyTagIDSexQF'),
                      model_uri=NEON.consistencyTagIDSexQF, domain=None, range=Optional[int])

slots.consistencyTagIDTaxonIDQF = Slot(uri=NEON.consistencyTagIDTaxonIDQF, name="consistencyTagIDTaxonIDQF", curie=NEON.curie('consistencyTagIDTaxonIDQF'),
                      model_uri=NEON.consistencyTagIDTaxonIDQF, domain=None, range=Optional[int])

slots.consistencyTagIDLifeStageQF = Slot(uri=NEON.consistencyTagIDLifeStageQF, name="consistencyTagIDLifeStageQF", curie=NEON.curie('consistencyTagIDLifeStageQF'),
                      model_uri=NEON.consistencyTagIDLifeStageQF, domain=None, range=Optional[int])

slots.orderTagIDRecaptureQF = Slot(uri=NEON.orderTagIDRecaptureQF, name="orderTagIDRecaptureQF", curie=NEON.curie('orderTagIDRecaptureQF'),
                      model_uri=NEON.orderTagIDRecaptureQF, domain=None, range=Optional[int])

slots.orderTagIDLifeStageQF = Slot(uri=NEON.orderTagIDLifeStageQF, name="orderTagIDLifeStageQF", curie=NEON.curie('orderTagIDLifeStageQF'),
                      model_uri=NEON.orderTagIDLifeStageQF, domain=None, range=Optional[int])

slots.trapID = Slot(uri=NEON.trapID, name="trapID", curie=NEON.curie('trapID'),
                      model_uri=NEON.trapID, domain=None, range=Optional[str])

slots.enteredBy = Slot(uri=NEON.enteredBy, name="enteredBy", curie=NEON.curie('enteredBy'),
                      model_uri=NEON.enteredBy, domain=None, range=Optional[str])

slots.boutNumber = Slot(uri=NEON.boutNumber, name="boutNumber", curie=NEON.curie('boutNumber'),
                      model_uri=NEON.boutNumber, domain=None, range=Optional[str])

slots.sampleID = Slot(uri=NEON.sampleID, name="sampleID", curie=NEON.curie('sampleID'),
                      model_uri=NEON.sampleID, domain=None, range=Optional[str])

slots.setDate = Slot(uri=NEON.setDate, name="setDate", curie=NEON.curie('setDate'),
                      model_uri=NEON.setDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.collectDate = Slot(uri=NEON.collectDate, name="collectDate", curie=NEON.curie('collectDate'),
                      model_uri=NEON.collectDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.cupStatus = Slot(uri=NEON.cupStatus, name="cupStatus", curie=NEON.curie('cupStatus'),
                      model_uri=NEON.cupStatus, domain=None, range=Optional[str])

slots.lidStatus = Slot(uri=NEON.lidStatus, name="lidStatus", curie=NEON.curie('lidStatus'),
                      model_uri=NEON.lidStatus, domain=None, range=Optional[str])

slots.fluidLevel = Slot(uri=NEON.fluidLevel, name="fluidLevel", curie=NEON.curie('fluidLevel'),
                      model_uri=NEON.fluidLevel, domain=None, range=Optional[str])

slots.trapReset = Slot(uri=NEON.trapReset, name="trapReset", curie=NEON.curie('trapReset'),
                      model_uri=NEON.trapReset, domain=None, range=Optional[str])

slots.processingDate = Slot(uri=NEON.processingDate, name="processingDate", curie=NEON.curie('processingDate'),
                      model_uri=NEON.processingDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.associatedSampleID = Slot(uri=NEON.associatedSampleID, name="associatedSampleID", curie=NEON.curie('associatedSampleID'),
                      model_uri=NEON.associatedSampleID, domain=None, range=Optional[str])

slots.etOHChangeDate = Slot(uri=NEON.etOHChangeDate, name="etOHChangeDate", curie=NEON.curie('etOHChangeDate'),
                      model_uri=NEON.etOHChangeDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.targetTaxaPresent = Slot(uri=NEON.targetTaxaPresent, name="targetTaxaPresent", curie=NEON.curie('targetTaxaPresent'),
                      model_uri=NEON.targetTaxaPresent, domain=None, range=Optional[str])

slots.sampleType = Slot(uri=NEON.sampleType, name="sampleType", curie=NEON.curie('sampleType'),
                      model_uri=NEON.sampleType, domain=None, range=Optional[str])

slots.individualCount = Slot(uri=NEON.individualCount, name="individualCount", curie=NEON.curie('individualCount'),
                      model_uri=NEON.individualCount, domain=None, range=Optional[str])

slots.acceptedTaxonID = Slot(uri=NEON.acceptedTaxonID, name="acceptedTaxonID", curie=NEON.curie('acceptedTaxonID'),
                      model_uri=NEON.acceptedTaxonID, domain=None, range=Optional[str])

slots.morphospeciesID = Slot(uri=NEON.morphospeciesID, name="morphospeciesID", curie=NEON.curie('morphospeciesID'),
                      model_uri=NEON.morphospeciesID, domain=None, range=Optional[str])

slots.identifiedBy = Slot(uri=NEON.identifiedBy, name="identifiedBy", curie=NEON.curie('identifiedBy'),
                      model_uri=NEON.identifiedBy, domain=None, range=Optional[str])

slots.identifiedDate = Slot(uri=NEON.identifiedDate, name="identifiedDate", curie=NEON.curie('identifiedDate'),
                      model_uri=NEON.identifiedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.specimenSource = Slot(uri=NEON.specimenSource, name="specimenSource", curie=NEON.curie('specimenSource'),
                      model_uri=NEON.specimenSource, domain=None, range=Optional[str])

slots.daysOfTrapping = Slot(uri=NEON.daysOfTrapping, name="daysOfTrapping", curie=NEON.curie('daysOfTrapping'),
                      model_uri=NEON.daysOfTrapping, domain=None, range=Optional[str])

slots.duplicateCollectionEventQF = Slot(uri=NEON.duplicateCollectionEventQF, name="duplicateCollectionEventQF", curie=NEON.curie('duplicateCollectionEventQF'),
                      model_uri=NEON.duplicateCollectionEventQF, domain=None, range=Optional[int])

slots.compareSetCollectDateQF = Slot(uri=NEON.compareSetCollectDateQF, name="compareSetCollectDateQF", curie=NEON.curie('compareSetCollectDateQF'),
                      model_uri=NEON.compareSetCollectDateQF, domain=None, range=Optional[int])

slots.scientificNameAuthorship = Slot(uri=NEON.scientificNameAuthorship, name="scientificNameAuthorship", curie=NEON.curie('scientificNameAuthorship'),
                      model_uri=NEON.scientificNameAuthorship, domain=None, range=Optional[str])

slots.duplicateSampleIDQF = Slot(uri=NEON.duplicateSampleIDQF, name="duplicateSampleIDQF", curie=NEON.curie('duplicateSampleIDQF'),
                      model_uri=NEON.duplicateSampleIDQF, domain=None, range=Optional[int])

slots.duplicateIndividualIDQF = Slot(uri=NEON.duplicateIndividualIDQF, name="duplicateIndividualIDQF", curie=NEON.curie('duplicateIndividualIDQF'),
                      model_uri=NEON.duplicateIndividualIDQF, domain=None, range=Optional[int])

slots.addDate = Slot(uri=NEON.addDate, name="addDate", curie=NEON.curie('addDate'),
                      model_uri=NEON.addDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.transectMeter = Slot(uri=NEON.transectMeter, name="transectMeter", curie=NEON.curie('transectMeter'),
                      model_uri=NEON.transectMeter, domain=None, range=Optional[float])

slots.directionFromTransect = Slot(uri=NEON.directionFromTransect, name="directionFromTransect", curie=NEON.curie('directionFromTransect'),
                      model_uri=NEON.directionFromTransect, domain=None, range=Optional[str])

slots.ninetyDegreeDistance = Slot(uri=NEON.ninetyDegreeDistance, name="ninetyDegreeDistance", curie=NEON.curie('ninetyDegreeDistance'),
                      model_uri=NEON.ninetyDegreeDistance, domain=None, range=Optional[float])

slots.growthForm = Slot(uri=NEON.growthForm, name="growthForm", curie=NEON.curie('growthForm'),
                      model_uri=NEON.growthForm, domain=None, range=Optional[str])

slots.phenophaseName = Slot(uri=NEON.phenophaseName, name="phenophaseName", curie=NEON.curie('phenophaseName'),
                      model_uri=NEON.phenophaseName, domain=None, range=Optional[str])

slots.phenophaseStatus = Slot(uri=NEON.phenophaseStatus, name="phenophaseStatus", curie=NEON.curie('phenophaseStatus'),
                      model_uri=NEON.phenophaseStatus, domain=None, range=Optional[str])

slots.phenophaseIntensityDefinition = Slot(uri=NEON.phenophaseIntensityDefinition, name="phenophaseIntensityDefinition", curie=NEON.curie('phenophaseIntensityDefinition'),
                      model_uri=NEON.phenophaseIntensityDefinition, domain=None, range=Optional[str])

slots.phenophaseIntensity = Slot(uri=NEON.phenophaseIntensity, name="phenophaseIntensity", curie=NEON.curie('phenophaseIntensity'),
                      model_uri=NEON.phenophaseIntensity, domain=None, range=Optional[str])

slots.dropPlant = Slot(uri=NEON.dropPlant, name="dropPlant", curie=NEON.curie('dropPlant'),
                      model_uri=NEON.dropPlant, domain=None, range=Optional[str])

slots.patchOrIndividual = Slot(uri=NEON.patchOrIndividual, name="patchOrIndividual", curie=NEON.curie('patchOrIndividual'),
                      model_uri=NEON.patchOrIndividual, domain=None, range=Optional[str])

slots.canopyPosition = Slot(uri=NEON.canopyPosition, name="canopyPosition", curie=NEON.curie('canopyPosition'),
                      model_uri=NEON.canopyPosition, domain=None, range=Optional[str])

slots.plantStatus = Slot(uri=NEON.plantStatus, name="plantStatus", curie=NEON.curie('plantStatus'),
                      model_uri=NEON.plantStatus, domain=None, range=Optional[str])

slots.stemDiameter = Slot(uri=NEON.stemDiameter, name="stemDiameter", curie=NEON.curie('stemDiameter'),
                      model_uri=NEON.stemDiameter, domain=None, range=Optional[float])

slots.measurementHeight = Slot(uri=NEON.measurementHeight, name="measurementHeight", curie=NEON.curie('measurementHeight'),
                      model_uri=NEON.measurementHeight, domain=None, range=Optional[float])

slots.maxCanopyDiameter = Slot(uri=NEON.maxCanopyDiameter, name="maxCanopyDiameter", curie=NEON.curie('maxCanopyDiameter'),
                      model_uri=NEON.maxCanopyDiameter, domain=None, range=Optional[float])

slots.ninetyCanopyDiameter = Slot(uri=NEON.ninetyCanopyDiameter, name="ninetyCanopyDiameter", curie=NEON.curie('ninetyCanopyDiameter'),
                      model_uri=NEON.ninetyCanopyDiameter, domain=None, range=Optional[float])

slots.percentCover = Slot(uri=NEON.percentCover, name="percentCover", curie=NEON.curie('percentCover'),
                      model_uri=NEON.percentCover, domain=None, range=Optional[float])

slots.height = Slot(uri=NEON.height, name="height", curie=NEON.curie('height'),
                      model_uri=NEON.height, domain=None, range=Optional[float])

slots.adultLeafLength = Slot(uri=NEON.adultLeafLength, name="adultLeafLength", curie=NEON.curie('adultLeafLength'),
                      model_uri=NEON.adultLeafLength, domain=None, range=Optional[float])

slots.diseaseStatus = Slot(uri=NEON.diseaseStatus, name="diseaseStatus", curie=NEON.curie('diseaseStatus'),
                      model_uri=NEON.diseaseStatus, domain=None, range=Optional[str])

slots.diseaseType = Slot(uri=NEON.diseaseType, name="diseaseType", curie=NEON.curie('diseaseType'),
                      model_uri=NEON.diseaseType, domain=None, range=Optional[str])

slots.dropDate = Slot(uri=NEON.dropDate, name="dropDate", curie=NEON.curie('dropDate'),
                      model_uri=NEON.dropDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.duplicateIndividualYearQF = Slot(uri=NEON.duplicateIndividualYearQF, name="duplicateIndividualYearQF", curie=NEON.curie('duplicateIndividualYearQF'),
                      model_uri=NEON.duplicateIndividualYearQF, domain=None, range=Optional[int])

slots.missingRecordsIndividPerYearQF = Slot(uri=NEON.missingRecordsIndividPerYearQF, name="missingRecordsIndividPerYearQF", curie=NEON.curie('missingRecordsIndividPerYearQF'),
                      model_uri=NEON.missingRecordsIndividPerYearQF, domain=None, range=Optional[int])

slots.dayOfYear = Slot(uri=NEON.dayOfYear, name="dayOfYear", curie=NEON.curie('dayOfYear'),
                      model_uri=NEON.dayOfYear, domain=None, range=Optional[str])

slots.duplicateIndividualDayStatusQF = Slot(uri=NEON.duplicateIndividualDayStatusQF, name="duplicateIndividualDayStatusQF", curie=NEON.curie('duplicateIndividualDayStatusQF'),
                      model_uri=NEON.duplicateIndividualDayStatusQF, domain=None, range=Optional[int])

slots.startSamplingProtocol = Slot(uri=NEON.startSamplingProtocol, name="startSamplingProtocol", curie=NEON.curie('startSamplingProtocol'),
                      model_uri=NEON.startSamplingProtocol, domain=None, range=Optional[str])

slots.endSamplingProtocol = Slot(uri=NEON.endSamplingProtocol, name="endSamplingProtocol", curie=NEON.curie('endSamplingProtocol'),
                      model_uri=NEON.endSamplingProtocol, domain=None, range=Optional[str])

slots.phenophaseDefinition = Slot(uri=NEON.phenophaseDefinition, name="phenophaseDefinition", curie=NEON.curie('phenophaseDefinition'),
                      model_uri=NEON.phenophaseDefinition, domain=None, range=Optional[str])

slots.intensityQuestion = Slot(uri=NEON.intensityQuestion, name="intensityQuestion", curie=NEON.curie('intensityQuestion'),
                      model_uri=NEON.intensityQuestion, domain=None, range=Optional[str])

slots.subplotID = Slot(uri=NEON.subplotID, name="subplotID", curie=NEON.curie('subplotID'),
                      model_uri=NEON.subplotID, domain=None, range=Optional[str])

slots.divDataType = Slot(uri=NEON.divDataType, name="divDataType", curie=NEON.curie('divDataType'),
                      model_uri=NEON.divDataType, domain=None, range=Optional[str])

slots.otherVariablesPresent = Slot(uri=NEON.otherVariablesPresent, name="otherVariablesPresent", curie=NEON.curie('otherVariablesPresent'),
                      model_uri=NEON.otherVariablesPresent, domain=None, range=Optional[str])

slots.taxonIDRemarks = Slot(uri=NEON.taxonIDRemarks, name="taxonIDRemarks", curie=NEON.curie('taxonIDRemarks'),
                      model_uri=NEON.taxonIDRemarks, domain=None, range=Optional[str])

slots.otherVariables = Slot(uri=NEON.otherVariables, name="otherVariables", curie=NEON.curie('otherVariables'),
                      model_uri=NEON.otherVariables, domain=None, range=Optional[str])

slots.heightPlantOver300cm = Slot(uri=NEON.heightPlantOver300cm, name="heightPlantOver300cm", curie=NEON.curie('heightPlantOver300cm'),
                      model_uri=NEON.heightPlantOver300cm, domain=None, range=Optional[str])

slots.heightPlantSpecies = Slot(uri=NEON.heightPlantSpecies, name="heightPlantSpecies", curie=NEON.curie('heightPlantSpecies'),
                      model_uri=NEON.heightPlantSpecies, domain=None, range=Optional[str])

slots.morphospeciesIDRemarks = Slot(uri=NEON.morphospeciesIDRemarks, name="morphospeciesIDRemarks", curie=NEON.curie('morphospeciesIDRemarks'),
                      model_uri=NEON.morphospeciesIDRemarks, domain=None, range=Optional[str])

slots.duplicateTaxonIDBoutPer1m2QF = Slot(uri=NEON.duplicateTaxonIDBoutPer1m2QF, name="duplicateTaxonIDBoutPer1m2QF", curie=NEON.curie('duplicateTaxonIDBoutPer1m2QF'),
                      model_uri=NEON.duplicateTaxonIDBoutPer1m2QF, domain=None, range=Optional[int])

slots.missingRecords1m2QF = Slot(uri=NEON.missingRecords1m2QF, name="missingRecords1m2QF", curie=NEON.curie('missingRecords1m2QF'),
                      model_uri=NEON.missingRecords1m2QF, domain=None, range=Optional[int])

slots.duplicateVariablesBout1m2QF = Slot(uri=NEON.duplicateVariablesBout1m2QF, name="duplicateVariablesBout1m2QF", curie=NEON.curie('duplicateVariablesBout1m2QF'),
                      model_uri=NEON.duplicateVariablesBout1m2QF, domain=None, range=Optional[int])

slots.missingRecords10m2QF = Slot(uri=NEON.missingRecords10m2QF, name="missingRecords10m2QF", curie=NEON.curie('missingRecords10m2QF'),
                      model_uri=NEON.missingRecords10m2QF, domain=None, range=Optional[int])

slots.duplicateTaxonIDPerBout10m2QF = Slot(uri=NEON.duplicateTaxonIDPerBout10m2QF, name="duplicateTaxonIDPerBout10m2QF", curie=NEON.curie('duplicateTaxonIDPerBout10m2QF'),
                      model_uri=NEON.duplicateTaxonIDPerBout10m2QF, domain=None, range=Optional[int])

slots.missingRecords100m2QF = Slot(uri=NEON.missingRecords100m2QF, name="missingRecords100m2QF", curie=NEON.curie('missingRecords100m2QF'),
                      model_uri=NEON.missingRecords100m2QF, domain=None, range=Optional[int])

slots.duplicateTaxonIDPerBout100m2QF = Slot(uri=NEON.duplicateTaxonIDPerBout100m2QF, name="duplicateTaxonIDPerBout100m2QF", curie=NEON.curie('duplicateTaxonIDPerBout100m2QF'),
                      model_uri=NEON.duplicateTaxonIDPerBout100m2QF, domain=None, range=Optional[int])

slots.clipID = Slot(uri=NEON.clipID, name="clipID", curie=NEON.curie('clipID'),
                      model_uri=NEON.clipID, domain=None, range=Optional[str])

slots.exclosure = Slot(uri=NEON.exclosure, name="exclosure", curie=NEON.curie('exclosure'),
                      model_uri=NEON.exclosure, domain=None, range=Optional[str])

slots.herbGroup = Slot(uri=NEON.herbGroup, name="herbGroup", curie=NEON.curie('herbGroup'),
                      model_uri=NEON.herbGroup, domain=None, range=Optional[str])

slots.bagCount = Slot(uri=NEON.bagCount, name="bagCount", curie=NEON.curie('bagCount'),
                      model_uri=NEON.bagCount, domain=None, range=Optional[str])

slots.ovenInDate = Slot(uri=NEON.ovenInDate, name="ovenInDate", curie=NEON.curie('ovenInDate'),
                      model_uri=NEON.ovenInDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.ovenOutDate = Slot(uri=NEON.ovenOutDate, name="ovenOutDate", curie=NEON.curie('ovenOutDate'),
                      model_uri=NEON.ovenOutDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.weighDate = Slot(uri=NEON.weighDate, name="weighDate", curie=NEON.curie('weighDate'),
                      model_uri=NEON.weighDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.qaDryMass = Slot(uri=NEON.qaDryMass, name="qaDryMass", curie=NEON.curie('qaDryMass'),
                      model_uri=NEON.qaDryMass, domain=None, range=Optional[str])

slots.dryMass = Slot(uri=NEON.dryMass, name="dryMass", curie=NEON.curie('dryMass'),
                      model_uri=NEON.dryMass, domain=None, range=Optional[float])

slots.subsampleID = Slot(uri=NEON.subsampleID, name="subsampleID", curie=NEON.curie('subsampleID'),
                      model_uri=NEON.subsampleID, domain=None, range=Optional[str])

slots.subsampleType = Slot(uri=NEON.subsampleType, name="subsampleType", curie=NEON.curie('subsampleType'),
                      model_uri=NEON.subsampleType, domain=None, range=Optional[str])

slots.plotType = Slot(uri=NEON.plotType, name="plotType", curie=NEON.curie('plotType'),
                      model_uri=NEON.plotType, domain=None, range=Optional[str])

slots.plotSize = Slot(uri=NEON.plotSize, name="plotSize", curie=NEON.curie('plotSize'),
                      model_uri=NEON.plotSize, domain=None, range=Optional[float])

slots.easting = Slot(uri=NEON.easting, name="easting", curie=NEON.curie('easting'),
                      model_uri=NEON.easting, domain=None, range=Optional[float])

slots.northing = Slot(uri=NEON.northing, name="northing", curie=NEON.curie('northing'),
                      model_uri=NEON.northing, domain=None, range=Optional[float])

slots.utmZone = Slot(uri=NEON.utmZone, name="utmZone", curie=NEON.curie('utmZone'),
                      model_uri=NEON.utmZone, domain=None, range=Optional[str])

slots.slopeAspect = Slot(uri=NEON.slopeAspect, name="slopeAspect", curie=NEON.curie('slopeAspect'),
                      model_uri=NEON.slopeAspect, domain=None, range=Optional[float])

slots.slopeGradient = Slot(uri=NEON.slopeGradient, name="slopeGradient", curie=NEON.curie('slopeGradient'),
                      model_uri=NEON.slopeGradient, domain=None, range=Optional[float])

slots.storageHours = Slot(uri=NEON.storageHours, name="storageHours", curie=NEON.curie('storageHours'),
                      model_uri=NEON.storageHours, domain=None, range=Optional[float])

slots.dryingHours = Slot(uri=NEON.dryingHours, name="dryingHours", curie=NEON.curie('dryingHours'),
                      model_uri=NEON.dryingHours, domain=None, range=Optional[float])

slots.duplicateClipQF = Slot(uri=NEON.duplicateClipQF, name="duplicateClipQF", curie=NEON.curie('duplicateClipQF'),
                      model_uri=NEON.duplicateClipQF, domain=None, range=Optional[int])

slots.multipleClipQF = Slot(uri=NEON.multipleClipQF, name="multipleClipQF", curie=NEON.curie('multipleClipQF'),
                      model_uri=NEON.multipleClipQF, domain=None, range=Optional[int])

slots.exclosureQF = Slot(uri=NEON.exclosureQF, name="exclosureQF", curie=NEON.curie('exclosureQF'),
                      model_uri=NEON.exclosureQF, domain=None, range=Optional[int])

slots.duplicateMassQF = Slot(uri=NEON.duplicateMassQF, name="duplicateMassQF", curie=NEON.curie('duplicateMassQF'),
                      model_uri=NEON.duplicateMassQF, domain=None, range=Optional[int])

slots.missingRecordsMassQF = Slot(uri=NEON.missingRecordsMassQF, name="missingRecordsMassQF", curie=NEON.curie('missingRecordsMassQF'),
                      model_uri=NEON.missingRecordsMassQF, domain=None, range=Optional[int])

slots.subsampleDate = Slot(uri=NEON.subsampleDate, name="subsampleDate", curie=NEON.curie('subsampleDate'),
                      model_uri=NEON.subsampleDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.duplicateProcessQF = Slot(uri=NEON.duplicateProcessQF, name="duplicateProcessQF", curie=NEON.curie('duplicateProcessQF'),
                      model_uri=NEON.duplicateProcessQF, domain=None, range=Optional[int])

slots.missingRecordsProcessQF = Slot(uri=NEON.missingRecordsProcessQF, name="missingRecordsProcessQF", curie=NEON.curie('missingRecordsProcessQF'),
                      model_uri=NEON.missingRecordsProcessQF, domain=None, range=Optional[int])

slots.clipCellNumber = Slot(uri=NEON.clipCellNumber, name="clipCellNumber", curie=NEON.curie('clipCellNumber'),
                      model_uri=NEON.clipCellNumber, domain=None, range=Optional[str])

slots.almucantarRadiance = Slot(uri=NEON.almucantarRadiance, name="almucantarRadiance", curie=NEON.curie('almucantarRadiance'),
                      model_uri=NEON.almucantarRadiance, domain=None, range=Optional[float])

slots.rawPrincipalPlaneRadiance = Slot(uri=NEON.rawPrincipalPlaneRadiance, name="rawPrincipalPlaneRadiance", curie=NEON.curie('rawPrincipalPlaneRadiance'),
                      model_uri=NEON.rawPrincipalPlaneRadiance, domain=None, range=Optional[float])

slots.PARMean = Slot(uri=NEON.PARMean, name="PARMean", curie=NEON.curie('PARMean'),
                      model_uri=NEON.PARMean, domain=None, range=Optional[float])

slots.PARMinimum = Slot(uri=NEON.PARMinimum, name="PARMinimum", curie=NEON.curie('PARMinimum'),
                      model_uri=NEON.PARMinimum, domain=None, range=Optional[float])

slots.PARMaximum = Slot(uri=NEON.PARMaximum, name="PARMaximum", curie=NEON.curie('PARMaximum'),
                      model_uri=NEON.PARMaximum, domain=None, range=Optional[float])

slots.PARVariance = Slot(uri=NEON.PARVariance, name="PARVariance", curie=NEON.curie('PARVariance'),
                      model_uri=NEON.PARVariance, domain=None, range=Optional[float])

slots.PARNumPts = Slot(uri=NEON.PARNumPts, name="PARNumPts", curie=NEON.curie('PARNumPts'),
                      model_uri=NEON.PARNumPts, domain=None, range=Optional[float])

slots.PARExpUncert = Slot(uri=NEON.PARExpUncert, name="PARExpUncert", curie=NEON.curie('PARExpUncert'),
                      model_uri=NEON.PARExpUncert, domain=None, range=Optional[float])

slots.PARStdErMean = Slot(uri=NEON.PARStdErMean, name="PARStdErMean", curie=NEON.curie('PARStdErMean'),
                      model_uri=NEON.PARStdErMean, domain=None, range=Optional[float])

slots.PARRangeQAQCRpt = Slot(uri=NEON.PARRangeQAQCRpt, name="PARRangeQAQCRpt", curie=NEON.curie('PARRangeQAQCRpt'),
                      model_uri=NEON.PARRangeQAQCRpt, domain=None, range=Optional[str])

slots.PARPersistenceQAQCRpt = Slot(uri=NEON.PARPersistenceQAQCRpt, name="PARPersistenceQAQCRpt", curie=NEON.curie('PARPersistenceQAQCRpt'),
                      model_uri=NEON.PARPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.PARStepQAQCRpt = Slot(uri=NEON.PARStepQAQCRpt, name="PARStepQAQCRpt", curie=NEON.curie('PARStepQAQCRpt'),
                      model_uri=NEON.PARStepQAQCRpt, domain=None, range=Optional[str])

slots.PARNullQAQCRpt = Slot(uri=NEON.PARNullQAQCRpt, name="PARNullQAQCRpt", curie=NEON.curie('PARNullQAQCRpt'),
                      model_uri=NEON.PARNullQAQCRpt, domain=None, range=Optional[str])

slots.PARGapQAQCRpt = Slot(uri=NEON.PARGapQAQCRpt, name="PARGapQAQCRpt", curie=NEON.curie('PARGapQAQCRpt'),
                      model_uri=NEON.PARGapQAQCRpt, domain=None, range=Optional[str])

slots.PARConsistencyQAQCRpt = Slot(uri=NEON.PARConsistencyQAQCRpt, name="PARConsistencyQAQCRpt", curie=NEON.curie('PARConsistencyQAQCRpt'),
                      model_uri=NEON.PARConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.PARSpikeQAQCRpt = Slot(uri=NEON.PARSpikeQAQCRpt, name="PARSpikeQAQCRpt", curie=NEON.curie('PARSpikeQAQCRpt'),
                      model_uri=NEON.PARSpikeQAQCRpt, domain=None, range=Optional[str])

slots.PARAlphaQAQCRpt = Slot(uri=NEON.PARAlphaQAQCRpt, name="PARAlphaQAQCRpt", curie=NEON.curie('PARAlphaQAQCRpt'),
                      model_uri=NEON.PARAlphaQAQCRpt, domain=None, range=Optional[str])

slots.PARBetaQAQCRpt = Slot(uri=NEON.PARBetaQAQCRpt, name="PARBetaQAQCRpt", curie=NEON.curie('PARBetaQAQCRpt'),
                      model_uri=NEON.PARBetaQAQCRpt, domain=None, range=Optional[str])

slots.PARRangeFailQM = Slot(uri=NEON.PARRangeFailQM, name="PARRangeFailQM", curie=NEON.curie('PARRangeFailQM'),
                      model_uri=NEON.PARRangeFailQM, domain=None, range=Optional[float])

slots.PARRangePassQM = Slot(uri=NEON.PARRangePassQM, name="PARRangePassQM", curie=NEON.curie('PARRangePassQM'),
                      model_uri=NEON.PARRangePassQM, domain=None, range=Optional[float])

slots.PARRangeNAQM = Slot(uri=NEON.PARRangeNAQM, name="PARRangeNAQM", curie=NEON.curie('PARRangeNAQM'),
                      model_uri=NEON.PARRangeNAQM, domain=None, range=Optional[float])

slots.PARPersistenceFailQM = Slot(uri=NEON.PARPersistenceFailQM, name="PARPersistenceFailQM", curie=NEON.curie('PARPersistenceFailQM'),
                      model_uri=NEON.PARPersistenceFailQM, domain=None, range=Optional[float])

slots.PARPersistencePassQM = Slot(uri=NEON.PARPersistencePassQM, name="PARPersistencePassQM", curie=NEON.curie('PARPersistencePassQM'),
                      model_uri=NEON.PARPersistencePassQM, domain=None, range=Optional[float])

slots.PARPersistenceNAQM = Slot(uri=NEON.PARPersistenceNAQM, name="PARPersistenceNAQM", curie=NEON.curie('PARPersistenceNAQM'),
                      model_uri=NEON.PARPersistenceNAQM, domain=None, range=Optional[float])

slots.PARStepFailQM = Slot(uri=NEON.PARStepFailQM, name="PARStepFailQM", curie=NEON.curie('PARStepFailQM'),
                      model_uri=NEON.PARStepFailQM, domain=None, range=Optional[float])

slots.PARStepPassQM = Slot(uri=NEON.PARStepPassQM, name="PARStepPassQM", curie=NEON.curie('PARStepPassQM'),
                      model_uri=NEON.PARStepPassQM, domain=None, range=Optional[float])

slots.PARStepNAQM = Slot(uri=NEON.PARStepNAQM, name="PARStepNAQM", curie=NEON.curie('PARStepNAQM'),
                      model_uri=NEON.PARStepNAQM, domain=None, range=Optional[float])

slots.PARNullFailQM = Slot(uri=NEON.PARNullFailQM, name="PARNullFailQM", curie=NEON.curie('PARNullFailQM'),
                      model_uri=NEON.PARNullFailQM, domain=None, range=Optional[float])

slots.PARNullPassQM = Slot(uri=NEON.PARNullPassQM, name="PARNullPassQM", curie=NEON.curie('PARNullPassQM'),
                      model_uri=NEON.PARNullPassQM, domain=None, range=Optional[float])

slots.PARNullNAQM = Slot(uri=NEON.PARNullNAQM, name="PARNullNAQM", curie=NEON.curie('PARNullNAQM'),
                      model_uri=NEON.PARNullNAQM, domain=None, range=Optional[float])

slots.PARGapFailQM = Slot(uri=NEON.PARGapFailQM, name="PARGapFailQM", curie=NEON.curie('PARGapFailQM'),
                      model_uri=NEON.PARGapFailQM, domain=None, range=Optional[float])

slots.PARGapPassQM = Slot(uri=NEON.PARGapPassQM, name="PARGapPassQM", curie=NEON.curie('PARGapPassQM'),
                      model_uri=NEON.PARGapPassQM, domain=None, range=Optional[float])

slots.PARGapNAQM = Slot(uri=NEON.PARGapNAQM, name="PARGapNAQM", curie=NEON.curie('PARGapNAQM'),
                      model_uri=NEON.PARGapNAQM, domain=None, range=Optional[float])

slots.PARSpikeFailQM = Slot(uri=NEON.PARSpikeFailQM, name="PARSpikeFailQM", curie=NEON.curie('PARSpikeFailQM'),
                      model_uri=NEON.PARSpikeFailQM, domain=None, range=Optional[float])

slots.PARSpikePassQM = Slot(uri=NEON.PARSpikePassQM, name="PARSpikePassQM", curie=NEON.curie('PARSpikePassQM'),
                      model_uri=NEON.PARSpikePassQM, domain=None, range=Optional[float])

slots.PARSpikeNAQM = Slot(uri=NEON.PARSpikeNAQM, name="PARSpikeNAQM", curie=NEON.curie('PARSpikeNAQM'),
                      model_uri=NEON.PARSpikeNAQM, domain=None, range=Optional[float])

slots.PARConsistencyFailQM = Slot(uri=NEON.PARConsistencyFailQM, name="PARConsistencyFailQM", curie=NEON.curie('PARConsistencyFailQM'),
                      model_uri=NEON.PARConsistencyFailQM, domain=None, range=Optional[float])

slots.PARConsistencyPassQM = Slot(uri=NEON.PARConsistencyPassQM, name="PARConsistencyPassQM", curie=NEON.curie('PARConsistencyPassQM'),
                      model_uri=NEON.PARConsistencyPassQM, domain=None, range=Optional[float])

slots.PARConsistencyNAQM = Slot(uri=NEON.PARConsistencyNAQM, name="PARConsistencyNAQM", curie=NEON.curie('PARConsistencyNAQM'),
                      model_uri=NEON.PARConsistencyNAQM, domain=None, range=Optional[float])

slots.PARAlphaQM = Slot(uri=NEON.PARAlphaQM, name="PARAlphaQM", curie=NEON.curie('PARAlphaQM'),
                      model_uri=NEON.PARAlphaQM, domain=None, range=Optional[float])

slots.PARBetaQM = Slot(uri=NEON.PARBetaQM, name="PARBetaQM", curie=NEON.curie('PARBetaQM'),
                      model_uri=NEON.PARBetaQM, domain=None, range=Optional[float])

slots.PARFinalQF = Slot(uri=NEON.PARFinalQF, name="PARFinalQF", curie=NEON.curie('PARFinalQF'),
                      model_uri=NEON.PARFinalQF, domain=None, range=Optional[str])

slots.outPARMean = Slot(uri=NEON.outPARMean, name="outPARMean", curie=NEON.curie('outPARMean'),
                      model_uri=NEON.outPARMean, domain=None, range=Optional[float])

slots.outPARMinimum = Slot(uri=NEON.outPARMinimum, name="outPARMinimum", curie=NEON.curie('outPARMinimum'),
                      model_uri=NEON.outPARMinimum, domain=None, range=Optional[float])

slots.outPARMaximum = Slot(uri=NEON.outPARMaximum, name="outPARMaximum", curie=NEON.curie('outPARMaximum'),
                      model_uri=NEON.outPARMaximum, domain=None, range=Optional[float])

slots.outPARVariance = Slot(uri=NEON.outPARVariance, name="outPARVariance", curie=NEON.curie('outPARVariance'),
                      model_uri=NEON.outPARVariance, domain=None, range=Optional[float])

slots.outPARNumPts = Slot(uri=NEON.outPARNumPts, name="outPARNumPts", curie=NEON.curie('outPARNumPts'),
                      model_uri=NEON.outPARNumPts, domain=None, range=Optional[float])

slots.outPARExpUncert = Slot(uri=NEON.outPARExpUncert, name="outPARExpUncert", curie=NEON.curie('outPARExpUncert'),
                      model_uri=NEON.outPARExpUncert, domain=None, range=Optional[float])

slots.outPARStdErMean = Slot(uri=NEON.outPARStdErMean, name="outPARStdErMean", curie=NEON.curie('outPARStdErMean'),
                      model_uri=NEON.outPARStdErMean, domain=None, range=Optional[float])

slots.outPARRangeQAQCRpt = Slot(uri=NEON.outPARRangeQAQCRpt, name="outPARRangeQAQCRpt", curie=NEON.curie('outPARRangeQAQCRpt'),
                      model_uri=NEON.outPARRangeQAQCRpt, domain=None, range=Optional[str])

slots.outPARPersistenceQAQCRpt = Slot(uri=NEON.outPARPersistenceQAQCRpt, name="outPARPersistenceQAQCRpt", curie=NEON.curie('outPARPersistenceQAQCRpt'),
                      model_uri=NEON.outPARPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.outPARStepQAQCRpt = Slot(uri=NEON.outPARStepQAQCRpt, name="outPARStepQAQCRpt", curie=NEON.curie('outPARStepQAQCRpt'),
                      model_uri=NEON.outPARStepQAQCRpt, domain=None, range=Optional[str])

slots.outPARNullQAQCRpt = Slot(uri=NEON.outPARNullQAQCRpt, name="outPARNullQAQCRpt", curie=NEON.curie('outPARNullQAQCRpt'),
                      model_uri=NEON.outPARNullQAQCRpt, domain=None, range=Optional[str])

slots.outPARGapQAQCRpt = Slot(uri=NEON.outPARGapQAQCRpt, name="outPARGapQAQCRpt", curie=NEON.curie('outPARGapQAQCRpt'),
                      model_uri=NEON.outPARGapQAQCRpt, domain=None, range=Optional[str])

slots.outPARConsistencyQAQCRpt = Slot(uri=NEON.outPARConsistencyQAQCRpt, name="outPARConsistencyQAQCRpt", curie=NEON.curie('outPARConsistencyQAQCRpt'),
                      model_uri=NEON.outPARConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.outPARSpikeQAQCRpt = Slot(uri=NEON.outPARSpikeQAQCRpt, name="outPARSpikeQAQCRpt", curie=NEON.curie('outPARSpikeQAQCRpt'),
                      model_uri=NEON.outPARSpikeQAQCRpt, domain=None, range=Optional[str])

slots.outPARAlphaQAQCRpt = Slot(uri=NEON.outPARAlphaQAQCRpt, name="outPARAlphaQAQCRpt", curie=NEON.curie('outPARAlphaQAQCRpt'),
                      model_uri=NEON.outPARAlphaQAQCRpt, domain=None, range=Optional[str])

slots.outPARBetaQAQCRpt = Slot(uri=NEON.outPARBetaQAQCRpt, name="outPARBetaQAQCRpt", curie=NEON.curie('outPARBetaQAQCRpt'),
                      model_uri=NEON.outPARBetaQAQCRpt, domain=None, range=Optional[str])

slots.outPARRangeFailQM = Slot(uri=NEON.outPARRangeFailQM, name="outPARRangeFailQM", curie=NEON.curie('outPARRangeFailQM'),
                      model_uri=NEON.outPARRangeFailQM, domain=None, range=Optional[float])

slots.outPARRangePassQM = Slot(uri=NEON.outPARRangePassQM, name="outPARRangePassQM", curie=NEON.curie('outPARRangePassQM'),
                      model_uri=NEON.outPARRangePassQM, domain=None, range=Optional[float])

slots.outPARRangeNAQM = Slot(uri=NEON.outPARRangeNAQM, name="outPARRangeNAQM", curie=NEON.curie('outPARRangeNAQM'),
                      model_uri=NEON.outPARRangeNAQM, domain=None, range=Optional[float])

slots.outPARPersistenceFailQM = Slot(uri=NEON.outPARPersistenceFailQM, name="outPARPersistenceFailQM", curie=NEON.curie('outPARPersistenceFailQM'),
                      model_uri=NEON.outPARPersistenceFailQM, domain=None, range=Optional[float])

slots.outPARPersistencePassQM = Slot(uri=NEON.outPARPersistencePassQM, name="outPARPersistencePassQM", curie=NEON.curie('outPARPersistencePassQM'),
                      model_uri=NEON.outPARPersistencePassQM, domain=None, range=Optional[float])

slots.outPARPersistenceNAQM = Slot(uri=NEON.outPARPersistenceNAQM, name="outPARPersistenceNAQM", curie=NEON.curie('outPARPersistenceNAQM'),
                      model_uri=NEON.outPARPersistenceNAQM, domain=None, range=Optional[float])

slots.outPARStepFailQM = Slot(uri=NEON.outPARStepFailQM, name="outPARStepFailQM", curie=NEON.curie('outPARStepFailQM'),
                      model_uri=NEON.outPARStepFailQM, domain=None, range=Optional[float])

slots.outPARStepPassQM = Slot(uri=NEON.outPARStepPassQM, name="outPARStepPassQM", curie=NEON.curie('outPARStepPassQM'),
                      model_uri=NEON.outPARStepPassQM, domain=None, range=Optional[float])

slots.outPARStepNAQM = Slot(uri=NEON.outPARStepNAQM, name="outPARStepNAQM", curie=NEON.curie('outPARStepNAQM'),
                      model_uri=NEON.outPARStepNAQM, domain=None, range=Optional[float])

slots.outPARNullFailQM = Slot(uri=NEON.outPARNullFailQM, name="outPARNullFailQM", curie=NEON.curie('outPARNullFailQM'),
                      model_uri=NEON.outPARNullFailQM, domain=None, range=Optional[float])

slots.outPARNullPassQM = Slot(uri=NEON.outPARNullPassQM, name="outPARNullPassQM", curie=NEON.curie('outPARNullPassQM'),
                      model_uri=NEON.outPARNullPassQM, domain=None, range=Optional[float])

slots.outPARNullNAQM = Slot(uri=NEON.outPARNullNAQM, name="outPARNullNAQM", curie=NEON.curie('outPARNullNAQM'),
                      model_uri=NEON.outPARNullNAQM, domain=None, range=Optional[float])

slots.outPARGapFailQM = Slot(uri=NEON.outPARGapFailQM, name="outPARGapFailQM", curie=NEON.curie('outPARGapFailQM'),
                      model_uri=NEON.outPARGapFailQM, domain=None, range=Optional[float])

slots.outPARGapPassQM = Slot(uri=NEON.outPARGapPassQM, name="outPARGapPassQM", curie=NEON.curie('outPARGapPassQM'),
                      model_uri=NEON.outPARGapPassQM, domain=None, range=Optional[float])

slots.outPARGapNAQM = Slot(uri=NEON.outPARGapNAQM, name="outPARGapNAQM", curie=NEON.curie('outPARGapNAQM'),
                      model_uri=NEON.outPARGapNAQM, domain=None, range=Optional[float])

slots.outPARSpikeFailQM = Slot(uri=NEON.outPARSpikeFailQM, name="outPARSpikeFailQM", curie=NEON.curie('outPARSpikeFailQM'),
                      model_uri=NEON.outPARSpikeFailQM, domain=None, range=Optional[float])

slots.outPARSpikePassQM = Slot(uri=NEON.outPARSpikePassQM, name="outPARSpikePassQM", curie=NEON.curie('outPARSpikePassQM'),
                      model_uri=NEON.outPARSpikePassQM, domain=None, range=Optional[float])

slots.outPARSpikeNAQM = Slot(uri=NEON.outPARSpikeNAQM, name="outPARSpikeNAQM", curie=NEON.curie('outPARSpikeNAQM'),
                      model_uri=NEON.outPARSpikeNAQM, domain=None, range=Optional[float])

slots.outPARConsistencyFailQM = Slot(uri=NEON.outPARConsistencyFailQM, name="outPARConsistencyFailQM", curie=NEON.curie('outPARConsistencyFailQM'),
                      model_uri=NEON.outPARConsistencyFailQM, domain=None, range=Optional[float])

slots.outPARConsistencyPassQM = Slot(uri=NEON.outPARConsistencyPassQM, name="outPARConsistencyPassQM", curie=NEON.curie('outPARConsistencyPassQM'),
                      model_uri=NEON.outPARConsistencyPassQM, domain=None, range=Optional[float])

slots.outPARConsistencyNAQM = Slot(uri=NEON.outPARConsistencyNAQM, name="outPARConsistencyNAQM", curie=NEON.curie('outPARConsistencyNAQM'),
                      model_uri=NEON.outPARConsistencyNAQM, domain=None, range=Optional[float])

slots.outPARAlphaQM = Slot(uri=NEON.outPARAlphaQM, name="outPARAlphaQM", curie=NEON.curie('outPARAlphaQM'),
                      model_uri=NEON.outPARAlphaQM, domain=None, range=Optional[float])

slots.outPARBetaQM = Slot(uri=NEON.outPARBetaQM, name="outPARBetaQM", curie=NEON.curie('outPARBetaQM'),
                      model_uri=NEON.outPARBetaQM, domain=None, range=Optional[float])

slots.outPARFinalQF = Slot(uri=NEON.outPARFinalQF, name="outPARFinalQF", curie=NEON.curie('outPARFinalQF'),
                      model_uri=NEON.outPARFinalQF, domain=None, range=Optional[str])

slots.priPrecipBulk = Slot(uri=NEON.priPrecipBulk, name="priPrecipBulk", curie=NEON.curie('priPrecipBulk'),
                      model_uri=NEON.priPrecipBulk, domain=None, range=Optional[float])

slots.priPrecipExpUncert = Slot(uri=NEON.priPrecipExpUncert, name="priPrecipExpUncert", curie=NEON.curie('priPrecipExpUncert'),
                      model_uri=NEON.priPrecipExpUncert, domain=None, range=Optional[float])

slots.priPrecipStabilityQF = Slot(uri=NEON.priPrecipStabilityQF, name="priPrecipStabilityQF", curie=NEON.curie('priPrecipStabilityQF'),
                      model_uri=NEON.priPrecipStabilityQF, domain=None, range=Optional[str])

slots.priPrecipHeaterQF = Slot(uri=NEON.priPrecipHeaterQF, name="priPrecipHeaterQF", curie=NEON.curie('priPrecipHeaterQF'),
                      model_uri=NEON.priPrecipHeaterQF, domain=None, range=Optional[str])

slots.priPrecipAveragingQF = Slot(uri=NEON.priPrecipAveragingQF, name="priPrecipAveragingQF", curie=NEON.curie('priPrecipAveragingQF'),
                      model_uri=NEON.priPrecipAveragingQF, domain=None, range=Optional[str])

slots.priPrecipAveraging2QF = Slot(uri=NEON.priPrecipAveraging2QF, name="priPrecipAveraging2QF", curie=NEON.curie('priPrecipAveraging2QF'),
                      model_uri=NEON.priPrecipAveraging2QF, domain=None, range=Optional[str])

slots.priPrecipRangeQF = Slot(uri=NEON.priPrecipRangeQF, name="priPrecipRangeQF", curie=NEON.curie('priPrecipRangeQF'),
                      model_uri=NEON.priPrecipRangeQF, domain=None, range=Optional[str])

slots.priPrecipNullQF = Slot(uri=NEON.priPrecipNullQF, name="priPrecipNullQF", curie=NEON.curie('priPrecipNullQF'),
                      model_uri=NEON.priPrecipNullQF, domain=None, range=Optional[int])

slots.secPrecipBulk = Slot(uri=NEON.secPrecipBulk, name="secPrecipBulk", curie=NEON.curie('secPrecipBulk'),
                      model_uri=NEON.secPrecipBulk, domain=None, range=Optional[float])

slots.secPrecipExpUncert = Slot(uri=NEON.secPrecipExpUncert, name="secPrecipExpUncert", curie=NEON.curie('secPrecipExpUncert'),
                      model_uri=NEON.secPrecipExpUncert, domain=None, range=Optional[float])

slots.secPrecipHeaterQAQCRpt = Slot(uri=NEON.secPrecipHeaterQAQCRpt, name="secPrecipHeaterQAQCRpt", curie=NEON.curie('secPrecipHeaterQAQCRpt'),
                      model_uri=NEON.secPrecipHeaterQAQCRpt, domain=None, range=Optional[str])

slots.secPrecipHeater0QM = Slot(uri=NEON.secPrecipHeater0QM, name="secPrecipHeater0QM", curie=NEON.curie('secPrecipHeater0QM'),
                      model_uri=NEON.secPrecipHeater0QM, domain=None, range=Optional[float])

slots.secPrecipHeater1QM = Slot(uri=NEON.secPrecipHeater1QM, name="secPrecipHeater1QM", curie=NEON.curie('secPrecipHeater1QM'),
                      model_uri=NEON.secPrecipHeater1QM, domain=None, range=Optional[float])

slots.secPrecipHeater2QM = Slot(uri=NEON.secPrecipHeater2QM, name="secPrecipHeater2QM", curie=NEON.curie('secPrecipHeater2QM'),
                      model_uri=NEON.secPrecipHeater2QM, domain=None, range=Optional[float])

slots.secPrecipHeater3QM = Slot(uri=NEON.secPrecipHeater3QM, name="secPrecipHeater3QM", curie=NEON.curie('secPrecipHeater3QM'),
                      model_uri=NEON.secPrecipHeater3QM, domain=None, range=Optional[float])

slots.tempSingleMean = Slot(uri=NEON.tempSingleMean, name="tempSingleMean", curie=NEON.curie('tempSingleMean'),
                      model_uri=NEON.tempSingleMean, domain=None, range=Optional[float])

slots.tempSingleMinimum = Slot(uri=NEON.tempSingleMinimum, name="tempSingleMinimum", curie=NEON.curie('tempSingleMinimum'),
                      model_uri=NEON.tempSingleMinimum, domain=None, range=Optional[float])

slots.tempSingleMaximum = Slot(uri=NEON.tempSingleMaximum, name="tempSingleMaximum", curie=NEON.curie('tempSingleMaximum'),
                      model_uri=NEON.tempSingleMaximum, domain=None, range=Optional[float])

slots.tempSingleVariance = Slot(uri=NEON.tempSingleVariance, name="tempSingleVariance", curie=NEON.curie('tempSingleVariance'),
                      model_uri=NEON.tempSingleVariance, domain=None, range=Optional[float])

slots.tempSingleNumPts = Slot(uri=NEON.tempSingleNumPts, name="tempSingleNumPts", curie=NEON.curie('tempSingleNumPts'),
                      model_uri=NEON.tempSingleNumPts, domain=None, range=Optional[float])

slots.tempSingleExpUncert = Slot(uri=NEON.tempSingleExpUncert, name="tempSingleExpUncert", curie=NEON.curie('tempSingleExpUncert'),
                      model_uri=NEON.tempSingleExpUncert, domain=None, range=Optional[float])

slots.tempSingleStdErMean = Slot(uri=NEON.tempSingleStdErMean, name="tempSingleStdErMean", curie=NEON.curie('tempSingleStdErMean'),
                      model_uri=NEON.tempSingleStdErMean, domain=None, range=Optional[float])

slots.rangeQAQCRpt = Slot(uri=NEON.rangeQAQCRpt, name="rangeQAQCRpt", curie=NEON.curie('rangeQAQCRpt'),
                      model_uri=NEON.rangeQAQCRpt, domain=None, range=Optional[str])

slots.persistenceQAQCRpt = Slot(uri=NEON.persistenceQAQCRpt, name="persistenceQAQCRpt", curie=NEON.curie('persistenceQAQCRpt'),
                      model_uri=NEON.persistenceQAQCRpt, domain=None, range=Optional[str])

slots.stepQAQCRpt = Slot(uri=NEON.stepQAQCRpt, name="stepQAQCRpt", curie=NEON.curie('stepQAQCRpt'),
                      model_uri=NEON.stepQAQCRpt, domain=None, range=Optional[str])

slots.nullQAQCRpt = Slot(uri=NEON.nullQAQCRpt, name="nullQAQCRpt", curie=NEON.curie('nullQAQCRpt'),
                      model_uri=NEON.nullQAQCRpt, domain=None, range=Optional[str])

slots.gapQAQCRpt = Slot(uri=NEON.gapQAQCRpt, name="gapQAQCRpt", curie=NEON.curie('gapQAQCRpt'),
                      model_uri=NEON.gapQAQCRpt, domain=None, range=Optional[str])

slots.consistencyQAQCRpt = Slot(uri=NEON.consistencyQAQCRpt, name="consistencyQAQCRpt", curie=NEON.curie('consistencyQAQCRpt'),
                      model_uri=NEON.consistencyQAQCRpt, domain=None, range=Optional[str])

slots.spikeQAQCRpt = Slot(uri=NEON.spikeQAQCRpt, name="spikeQAQCRpt", curie=NEON.curie('spikeQAQCRpt'),
                      model_uri=NEON.spikeQAQCRpt, domain=None, range=Optional[str])

slots.alphaQAQCRpt = Slot(uri=NEON.alphaQAQCRpt, name="alphaQAQCRpt", curie=NEON.curie('alphaQAQCRpt'),
                      model_uri=NEON.alphaQAQCRpt, domain=None, range=Optional[str])

slots.betaQAQCRpt = Slot(uri=NEON.betaQAQCRpt, name="betaQAQCRpt", curie=NEON.curie('betaQAQCRpt'),
                      model_uri=NEON.betaQAQCRpt, domain=None, range=Optional[str])

slots.flowQAQCRpt = Slot(uri=NEON.flowQAQCRpt, name="flowQAQCRpt", curie=NEON.curie('flowQAQCRpt'),
                      model_uri=NEON.flowQAQCRpt, domain=None, range=Optional[str])

slots.heaterQAQCRpt = Slot(uri=NEON.heaterQAQCRpt, name="heaterQAQCRpt", curie=NEON.curie('heaterQAQCRpt'),
                      model_uri=NEON.heaterQAQCRpt, domain=None, range=Optional[str])

slots.rangeFailQM = Slot(uri=NEON.rangeFailQM, name="rangeFailQM", curie=NEON.curie('rangeFailQM'),
                      model_uri=NEON.rangeFailQM, domain=None, range=Optional[float])

slots.rangePassQM = Slot(uri=NEON.rangePassQM, name="rangePassQM", curie=NEON.curie('rangePassQM'),
                      model_uri=NEON.rangePassQM, domain=None, range=Optional[float])

slots.rangeNAQM = Slot(uri=NEON.rangeNAQM, name="rangeNAQM", curie=NEON.curie('rangeNAQM'),
                      model_uri=NEON.rangeNAQM, domain=None, range=Optional[float])

slots.persistenceFailQM = Slot(uri=NEON.persistenceFailQM, name="persistenceFailQM", curie=NEON.curie('persistenceFailQM'),
                      model_uri=NEON.persistenceFailQM, domain=None, range=Optional[float])

slots.persistencePassQM = Slot(uri=NEON.persistencePassQM, name="persistencePassQM", curie=NEON.curie('persistencePassQM'),
                      model_uri=NEON.persistencePassQM, domain=None, range=Optional[float])

slots.persistenceNAQM = Slot(uri=NEON.persistenceNAQM, name="persistenceNAQM", curie=NEON.curie('persistenceNAQM'),
                      model_uri=NEON.persistenceNAQM, domain=None, range=Optional[float])

slots.stepFailQM = Slot(uri=NEON.stepFailQM, name="stepFailQM", curie=NEON.curie('stepFailQM'),
                      model_uri=NEON.stepFailQM, domain=None, range=Optional[float])

slots.stepPassQM = Slot(uri=NEON.stepPassQM, name="stepPassQM", curie=NEON.curie('stepPassQM'),
                      model_uri=NEON.stepPassQM, domain=None, range=Optional[float])

slots.stepNAQM = Slot(uri=NEON.stepNAQM, name="stepNAQM", curie=NEON.curie('stepNAQM'),
                      model_uri=NEON.stepNAQM, domain=None, range=Optional[float])

slots.nullFailQM = Slot(uri=NEON.nullFailQM, name="nullFailQM", curie=NEON.curie('nullFailQM'),
                      model_uri=NEON.nullFailQM, domain=None, range=Optional[float])

slots.nullPassQM = Slot(uri=NEON.nullPassQM, name="nullPassQM", curie=NEON.curie('nullPassQM'),
                      model_uri=NEON.nullPassQM, domain=None, range=Optional[float])

slots.nullNAQM = Slot(uri=NEON.nullNAQM, name="nullNAQM", curie=NEON.curie('nullNAQM'),
                      model_uri=NEON.nullNAQM, domain=None, range=Optional[float])

slots.gapFailQM = Slot(uri=NEON.gapFailQM, name="gapFailQM", curie=NEON.curie('gapFailQM'),
                      model_uri=NEON.gapFailQM, domain=None, range=Optional[float])

slots.gapPassQM = Slot(uri=NEON.gapPassQM, name="gapPassQM", curie=NEON.curie('gapPassQM'),
                      model_uri=NEON.gapPassQM, domain=None, range=Optional[float])

slots.gapNAQM = Slot(uri=NEON.gapNAQM, name="gapNAQM", curie=NEON.curie('gapNAQM'),
                      model_uri=NEON.gapNAQM, domain=None, range=Optional[float])

slots.spikeFailQM = Slot(uri=NEON.spikeFailQM, name="spikeFailQM", curie=NEON.curie('spikeFailQM'),
                      model_uri=NEON.spikeFailQM, domain=None, range=Optional[float])

slots.spikePassQM = Slot(uri=NEON.spikePassQM, name="spikePassQM", curie=NEON.curie('spikePassQM'),
                      model_uri=NEON.spikePassQM, domain=None, range=Optional[float])

slots.spikeNAQM = Slot(uri=NEON.spikeNAQM, name="spikeNAQM", curie=NEON.curie('spikeNAQM'),
                      model_uri=NEON.spikeNAQM, domain=None, range=Optional[float])

slots.consistencyFailQM = Slot(uri=NEON.consistencyFailQM, name="consistencyFailQM", curie=NEON.curie('consistencyFailQM'),
                      model_uri=NEON.consistencyFailQM, domain=None, range=Optional[float])

slots.consistencyPassQM = Slot(uri=NEON.consistencyPassQM, name="consistencyPassQM", curie=NEON.curie('consistencyPassQM'),
                      model_uri=NEON.consistencyPassQM, domain=None, range=Optional[float])

slots.consistencyNAQM = Slot(uri=NEON.consistencyNAQM, name="consistencyNAQM", curie=NEON.curie('consistencyNAQM'),
                      model_uri=NEON.consistencyNAQM, domain=None, range=Optional[float])

slots.flowFailQM = Slot(uri=NEON.flowFailQM, name="flowFailQM", curie=NEON.curie('flowFailQM'),
                      model_uri=NEON.flowFailQM, domain=None, range=Optional[float])

slots.flowPassQM = Slot(uri=NEON.flowPassQM, name="flowPassQM", curie=NEON.curie('flowPassQM'),
                      model_uri=NEON.flowPassQM, domain=None, range=Optional[float])

slots.flowNAQM = Slot(uri=NEON.flowNAQM, name="flowNAQM", curie=NEON.curie('flowNAQM'),
                      model_uri=NEON.flowNAQM, domain=None, range=Optional[float])

slots.heaterFailQM = Slot(uri=NEON.heaterFailQM, name="heaterFailQM", curie=NEON.curie('heaterFailQM'),
                      model_uri=NEON.heaterFailQM, domain=None, range=Optional[float])

slots.heaterPassQM = Slot(uri=NEON.heaterPassQM, name="heaterPassQM", curie=NEON.curie('heaterPassQM'),
                      model_uri=NEON.heaterPassQM, domain=None, range=Optional[float])

slots.heaterNAQM = Slot(uri=NEON.heaterNAQM, name="heaterNAQM", curie=NEON.curie('heaterNAQM'),
                      model_uri=NEON.heaterNAQM, domain=None, range=Optional[float])

slots.alphaQM = Slot(uri=NEON.alphaQM, name="alphaQM", curie=NEON.curie('alphaQM'),
                      model_uri=NEON.alphaQM, domain=None, range=Optional[float])

slots.betaQM = Slot(uri=NEON.betaQM, name="betaQM", curie=NEON.curie('betaQM'),
                      model_uri=NEON.betaQM, domain=None, range=Optional[float])

slots.finalQF = Slot(uri=NEON.finalQF, name="finalQF", curie=NEON.curie('finalQF'),
                      model_uri=NEON.finalQF, domain=None, range=Optional[str])

slots.tempTripleMean = Slot(uri=NEON.tempTripleMean, name="tempTripleMean", curie=NEON.curie('tempTripleMean'),
                      model_uri=NEON.tempTripleMean, domain=None, range=Optional[float])

slots.tempTripleMinimum = Slot(uri=NEON.tempTripleMinimum, name="tempTripleMinimum", curie=NEON.curie('tempTripleMinimum'),
                      model_uri=NEON.tempTripleMinimum, domain=None, range=Optional[float])

slots.tempTripleMaximum = Slot(uri=NEON.tempTripleMaximum, name="tempTripleMaximum", curie=NEON.curie('tempTripleMaximum'),
                      model_uri=NEON.tempTripleMaximum, domain=None, range=Optional[float])

slots.tempTripleVariance = Slot(uri=NEON.tempTripleVariance, name="tempTripleVariance", curie=NEON.curie('tempTripleVariance'),
                      model_uri=NEON.tempTripleVariance, domain=None, range=Optional[float])

slots.tempTripleNumPts = Slot(uri=NEON.tempTripleNumPts, name="tempTripleNumPts", curie=NEON.curie('tempTripleNumPts'),
                      model_uri=NEON.tempTripleNumPts, domain=None, range=Optional[float])

slots.tempTripleExpUncert = Slot(uri=NEON.tempTripleExpUncert, name="tempTripleExpUncert", curie=NEON.curie('tempTripleExpUncert'),
                      model_uri=NEON.tempTripleExpUncert, domain=None, range=Optional[float])

slots.tempTripleStdErMean = Slot(uri=NEON.tempTripleStdErMean, name="tempTripleStdErMean", curie=NEON.curie('tempTripleStdErMean'),
                      model_uri=NEON.tempTripleStdErMean, domain=None, range=Optional[float])

slots.tempAveQAQCRpt = Slot(uri=NEON.tempAveQAQCRpt, name="tempAveQAQCRpt", curie=NEON.curie('tempAveQAQCRpt'),
                      model_uri=NEON.tempAveQAQCRpt, domain=None, range=Optional[str])

slots.tempAve0QM = Slot(uri=NEON.tempAve0QM, name="tempAve0QM", curie=NEON.curie('tempAve0QM'),
                      model_uri=NEON.tempAve0QM, domain=None, range=Optional[float])

slots.tempAve1QM = Slot(uri=NEON.tempAve1QM, name="tempAve1QM", curie=NEON.curie('tempAve1QM'),
                      model_uri=NEON.tempAve1QM, domain=None, range=Optional[float])

slots.tempAve2QM = Slot(uri=NEON.tempAve2QM, name="tempAve2QM", curie=NEON.curie('tempAve2QM'),
                      model_uri=NEON.tempAve2QM, domain=None, range=Optional[float])

slots.tempAve3QM = Slot(uri=NEON.tempAve3QM, name="tempAve3QM", curie=NEON.curie('tempAve3QM'),
                      model_uri=NEON.tempAve3QM, domain=None, range=Optional[float])

slots.tempAve4QM = Slot(uri=NEON.tempAve4QM, name="tempAve4QM", curie=NEON.curie('tempAve4QM'),
                      model_uri=NEON.tempAve4QM, domain=None, range=Optional[float])

slots.tempAve5QM = Slot(uri=NEON.tempAve5QM, name="tempAve5QM", curie=NEON.curie('tempAve5QM'),
                      model_uri=NEON.tempAve5QM, domain=None, range=Optional[float])

slots.tempAve6QM = Slot(uri=NEON.tempAve6QM, name="tempAve6QM", curie=NEON.curie('tempAve6QM'),
                      model_uri=NEON.tempAve6QM, domain=None, range=Optional[float])

slots.tempAve7QM = Slot(uri=NEON.tempAve7QM, name="tempAve7QM", curie=NEON.curie('tempAve7QM'),
                      model_uri=NEON.tempAve7QM, domain=None, range=Optional[float])

slots.linePARMean = Slot(uri=NEON.linePARMean, name="linePARMean", curie=NEON.curie('linePARMean'),
                      model_uri=NEON.linePARMean, domain=None, range=Optional[float])

slots.linePARMinimum = Slot(uri=NEON.linePARMinimum, name="linePARMinimum", curie=NEON.curie('linePARMinimum'),
                      model_uri=NEON.linePARMinimum, domain=None, range=Optional[float])

slots.linePARMaximum = Slot(uri=NEON.linePARMaximum, name="linePARMaximum", curie=NEON.curie('linePARMaximum'),
                      model_uri=NEON.linePARMaximum, domain=None, range=Optional[float])

slots.linePARVariance = Slot(uri=NEON.linePARVariance, name="linePARVariance", curie=NEON.curie('linePARVariance'),
                      model_uri=NEON.linePARVariance, domain=None, range=Optional[float])

slots.linePARNumPts = Slot(uri=NEON.linePARNumPts, name="linePARNumPts", curie=NEON.curie('linePARNumPts'),
                      model_uri=NEON.linePARNumPts, domain=None, range=Optional[float])

slots.linePARSkewness = Slot(uri=NEON.linePARSkewness, name="linePARSkewness", curie=NEON.curie('linePARSkewness'),
                      model_uri=NEON.linePARSkewness, domain=None, range=Optional[float])

slots.linePARKurtosis = Slot(uri=NEON.linePARKurtosis, name="linePARKurtosis", curie=NEON.curie('linePARKurtosis'),
                      model_uri=NEON.linePARKurtosis, domain=None, range=Optional[float])

slots.linePARExpUncert = Slot(uri=NEON.linePARExpUncert, name="linePARExpUncert", curie=NEON.curie('linePARExpUncert'),
                      model_uri=NEON.linePARExpUncert, domain=None, range=Optional[float])

slots.linePARStdErMean = Slot(uri=NEON.linePARStdErMean, name="linePARStdErMean", curie=NEON.curie('linePARStdErMean'),
                      model_uri=NEON.linePARStdErMean, domain=None, range=Optional[float])

slots.windSpeedMean = Slot(uri=NEON.windSpeedMean, name="windSpeedMean", curie=NEON.curie('windSpeedMean'),
                      model_uri=NEON.windSpeedMean, domain=None, range=Optional[float])

slots.windSpeedMinimum = Slot(uri=NEON.windSpeedMinimum, name="windSpeedMinimum", curie=NEON.curie('windSpeedMinimum'),
                      model_uri=NEON.windSpeedMinimum, domain=None, range=Optional[float])

slots.windSpeedMaximum = Slot(uri=NEON.windSpeedMaximum, name="windSpeedMaximum", curie=NEON.curie('windSpeedMaximum'),
                      model_uri=NEON.windSpeedMaximum, domain=None, range=Optional[float])

slots.windSpeedVariance = Slot(uri=NEON.windSpeedVariance, name="windSpeedVariance", curie=NEON.curie('windSpeedVariance'),
                      model_uri=NEON.windSpeedVariance, domain=None, range=Optional[float])

slots.windSpeedNumPts = Slot(uri=NEON.windSpeedNumPts, name="windSpeedNumPts", curie=NEON.curie('windSpeedNumPts'),
                      model_uri=NEON.windSpeedNumPts, domain=None, range=Optional[float])

slots.windSpeedExpUncert = Slot(uri=NEON.windSpeedExpUncert, name="windSpeedExpUncert", curie=NEON.curie('windSpeedExpUncert'),
                      model_uri=NEON.windSpeedExpUncert, domain=None, range=Optional[float])

slots.windSpeedStdErMean = Slot(uri=NEON.windSpeedStdErMean, name="windSpeedStdErMean", curie=NEON.curie('windSpeedStdErMean'),
                      model_uri=NEON.windSpeedStdErMean, domain=None, range=Optional[float])

slots.windSpeedRangeQAQCRpt = Slot(uri=NEON.windSpeedRangeQAQCRpt, name="windSpeedRangeQAQCRpt", curie=NEON.curie('windSpeedRangeQAQCRpt'),
                      model_uri=NEON.windSpeedRangeQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedPersistenceQAQCRpt = Slot(uri=NEON.windSpeedPersistenceQAQCRpt, name="windSpeedPersistenceQAQCRpt", curie=NEON.curie('windSpeedPersistenceQAQCRpt'),
                      model_uri=NEON.windSpeedPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedStepQAQCRpt = Slot(uri=NEON.windSpeedStepQAQCRpt, name="windSpeedStepQAQCRpt", curie=NEON.curie('windSpeedStepQAQCRpt'),
                      model_uri=NEON.windSpeedStepQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedNullQAQCRpt = Slot(uri=NEON.windSpeedNullQAQCRpt, name="windSpeedNullQAQCRpt", curie=NEON.curie('windSpeedNullQAQCRpt'),
                      model_uri=NEON.windSpeedNullQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedGapQAQCRpt = Slot(uri=NEON.windSpeedGapQAQCRpt, name="windSpeedGapQAQCRpt", curie=NEON.curie('windSpeedGapQAQCRpt'),
                      model_uri=NEON.windSpeedGapQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedConsistencyQAQCRpt = Slot(uri=NEON.windSpeedConsistencyQAQCRpt, name="windSpeedConsistencyQAQCRpt", curie=NEON.curie('windSpeedConsistencyQAQCRpt'),
                      model_uri=NEON.windSpeedConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedSpikeQAQCRpt = Slot(uri=NEON.windSpeedSpikeQAQCRpt, name="windSpeedSpikeQAQCRpt", curie=NEON.curie('windSpeedSpikeQAQCRpt'),
                      model_uri=NEON.windSpeedSpikeQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedAlphaQAQCRpt = Slot(uri=NEON.windSpeedAlphaQAQCRpt, name="windSpeedAlphaQAQCRpt", curie=NEON.curie('windSpeedAlphaQAQCRpt'),
                      model_uri=NEON.windSpeedAlphaQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedBetaQAQCRpt = Slot(uri=NEON.windSpeedBetaQAQCRpt, name="windSpeedBetaQAQCRpt", curie=NEON.curie('windSpeedBetaQAQCRpt'),
                      model_uri=NEON.windSpeedBetaQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedRangeFailQM = Slot(uri=NEON.windSpeedRangeFailQM, name="windSpeedRangeFailQM", curie=NEON.curie('windSpeedRangeFailQM'),
                      model_uri=NEON.windSpeedRangeFailQM, domain=None, range=Optional[float])

slots.windSpeedRangePassQM = Slot(uri=NEON.windSpeedRangePassQM, name="windSpeedRangePassQM", curie=NEON.curie('windSpeedRangePassQM'),
                      model_uri=NEON.windSpeedRangePassQM, domain=None, range=Optional[float])

slots.windSpeedRangeNAQM = Slot(uri=NEON.windSpeedRangeNAQM, name="windSpeedRangeNAQM", curie=NEON.curie('windSpeedRangeNAQM'),
                      model_uri=NEON.windSpeedRangeNAQM, domain=None, range=Optional[float])

slots.windSpeedPersistenceFailQM = Slot(uri=NEON.windSpeedPersistenceFailQM, name="windSpeedPersistenceFailQM", curie=NEON.curie('windSpeedPersistenceFailQM'),
                      model_uri=NEON.windSpeedPersistenceFailQM, domain=None, range=Optional[float])

slots.windSpeedPersistencePassQM = Slot(uri=NEON.windSpeedPersistencePassQM, name="windSpeedPersistencePassQM", curie=NEON.curie('windSpeedPersistencePassQM'),
                      model_uri=NEON.windSpeedPersistencePassQM, domain=None, range=Optional[float])

slots.windSpeedPersistenceNAQM = Slot(uri=NEON.windSpeedPersistenceNAQM, name="windSpeedPersistenceNAQM", curie=NEON.curie('windSpeedPersistenceNAQM'),
                      model_uri=NEON.windSpeedPersistenceNAQM, domain=None, range=Optional[float])

slots.windSpeedStepFailQM = Slot(uri=NEON.windSpeedStepFailQM, name="windSpeedStepFailQM", curie=NEON.curie('windSpeedStepFailQM'),
                      model_uri=NEON.windSpeedStepFailQM, domain=None, range=Optional[float])

slots.windSpeedStepPassQM = Slot(uri=NEON.windSpeedStepPassQM, name="windSpeedStepPassQM", curie=NEON.curie('windSpeedStepPassQM'),
                      model_uri=NEON.windSpeedStepPassQM, domain=None, range=Optional[float])

slots.windSpeedStepNAQM = Slot(uri=NEON.windSpeedStepNAQM, name="windSpeedStepNAQM", curie=NEON.curie('windSpeedStepNAQM'),
                      model_uri=NEON.windSpeedStepNAQM, domain=None, range=Optional[float])

slots.windSpeedNullFailQM = Slot(uri=NEON.windSpeedNullFailQM, name="windSpeedNullFailQM", curie=NEON.curie('windSpeedNullFailQM'),
                      model_uri=NEON.windSpeedNullFailQM, domain=None, range=Optional[float])

slots.windSpeedNullPassQM = Slot(uri=NEON.windSpeedNullPassQM, name="windSpeedNullPassQM", curie=NEON.curie('windSpeedNullPassQM'),
                      model_uri=NEON.windSpeedNullPassQM, domain=None, range=Optional[float])

slots.windSpeedNullNAQM = Slot(uri=NEON.windSpeedNullNAQM, name="windSpeedNullNAQM", curie=NEON.curie('windSpeedNullNAQM'),
                      model_uri=NEON.windSpeedNullNAQM, domain=None, range=Optional[float])

slots.windSpeedGapFailQM = Slot(uri=NEON.windSpeedGapFailQM, name="windSpeedGapFailQM", curie=NEON.curie('windSpeedGapFailQM'),
                      model_uri=NEON.windSpeedGapFailQM, domain=None, range=Optional[float])

slots.windSpeedGapPassQM = Slot(uri=NEON.windSpeedGapPassQM, name="windSpeedGapPassQM", curie=NEON.curie('windSpeedGapPassQM'),
                      model_uri=NEON.windSpeedGapPassQM, domain=None, range=Optional[float])

slots.windSpeedGapNAQM = Slot(uri=NEON.windSpeedGapNAQM, name="windSpeedGapNAQM", curie=NEON.curie('windSpeedGapNAQM'),
                      model_uri=NEON.windSpeedGapNAQM, domain=None, range=Optional[float])

slots.windSpeedSpikeFailQM = Slot(uri=NEON.windSpeedSpikeFailQM, name="windSpeedSpikeFailQM", curie=NEON.curie('windSpeedSpikeFailQM'),
                      model_uri=NEON.windSpeedSpikeFailQM, domain=None, range=Optional[float])

slots.windSpeedSpikePassQM = Slot(uri=NEON.windSpeedSpikePassQM, name="windSpeedSpikePassQM", curie=NEON.curie('windSpeedSpikePassQM'),
                      model_uri=NEON.windSpeedSpikePassQM, domain=None, range=Optional[float])

slots.windSpeedSpikeNAQM = Slot(uri=NEON.windSpeedSpikeNAQM, name="windSpeedSpikeNAQM", curie=NEON.curie('windSpeedSpikeNAQM'),
                      model_uri=NEON.windSpeedSpikeNAQM, domain=None, range=Optional[float])

slots.windSpeedConsistencyFailQM = Slot(uri=NEON.windSpeedConsistencyFailQM, name="windSpeedConsistencyFailQM", curie=NEON.curie('windSpeedConsistencyFailQM'),
                      model_uri=NEON.windSpeedConsistencyFailQM, domain=None, range=Optional[float])

slots.windSpeedConsistencyPassQM = Slot(uri=NEON.windSpeedConsistencyPassQM, name="windSpeedConsistencyPassQM", curie=NEON.curie('windSpeedConsistencyPassQM'),
                      model_uri=NEON.windSpeedConsistencyPassQM, domain=None, range=Optional[float])

slots.windSpeedConsistencyNAQM = Slot(uri=NEON.windSpeedConsistencyNAQM, name="windSpeedConsistencyNAQM", curie=NEON.curie('windSpeedConsistencyNAQM'),
                      model_uri=NEON.windSpeedConsistencyNAQM, domain=None, range=Optional[float])

slots.windSpeedAlphaQM = Slot(uri=NEON.windSpeedAlphaQM, name="windSpeedAlphaQM", curie=NEON.curie('windSpeedAlphaQM'),
                      model_uri=NEON.windSpeedAlphaQM, domain=None, range=Optional[float])

slots.windSpeedBetaQM = Slot(uri=NEON.windSpeedBetaQM, name="windSpeedBetaQM", curie=NEON.curie('windSpeedBetaQM'),
                      model_uri=NEON.windSpeedBetaQM, domain=None, range=Optional[float])

slots.windSpeedFinalQF = Slot(uri=NEON.windSpeedFinalQF, name="windSpeedFinalQF", curie=NEON.curie('windSpeedFinalQF'),
                      model_uri=NEON.windSpeedFinalQF, domain=None, range=Optional[str])

slots.windDirMean = Slot(uri=NEON.windDirMean, name="windDirMean", curie=NEON.curie('windDirMean'),
                      model_uri=NEON.windDirMean, domain=None, range=Optional[float])

slots.windDirVariance = Slot(uri=NEON.windDirVariance, name="windDirVariance", curie=NEON.curie('windDirVariance'),
                      model_uri=NEON.windDirVariance, domain=None, range=Optional[float])

slots.windDirNumPts = Slot(uri=NEON.windDirNumPts, name="windDirNumPts", curie=NEON.curie('windDirNumPts'),
                      model_uri=NEON.windDirNumPts, domain=None, range=Optional[float])

slots.windDirExpUncert = Slot(uri=NEON.windDirExpUncert, name="windDirExpUncert", curie=NEON.curie('windDirExpUncert'),
                      model_uri=NEON.windDirExpUncert, domain=None, range=Optional[float])

slots.windDirStdErMean = Slot(uri=NEON.windDirStdErMean, name="windDirStdErMean", curie=NEON.curie('windDirStdErMean'),
                      model_uri=NEON.windDirStdErMean, domain=None, range=Optional[float])

slots.windDirRangeQAQCRpt = Slot(uri=NEON.windDirRangeQAQCRpt, name="windDirRangeQAQCRpt", curie=NEON.curie('windDirRangeQAQCRpt'),
                      model_uri=NEON.windDirRangeQAQCRpt, domain=None, range=Optional[str])

slots.windDirPersistenceQAQCRpt = Slot(uri=NEON.windDirPersistenceQAQCRpt, name="windDirPersistenceQAQCRpt", curie=NEON.curie('windDirPersistenceQAQCRpt'),
                      model_uri=NEON.windDirPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.windDirStepQAQCRpt = Slot(uri=NEON.windDirStepQAQCRpt, name="windDirStepQAQCRpt", curie=NEON.curie('windDirStepQAQCRpt'),
                      model_uri=NEON.windDirStepQAQCRpt, domain=None, range=Optional[str])

slots.windDirNullQAQCRpt = Slot(uri=NEON.windDirNullQAQCRpt, name="windDirNullQAQCRpt", curie=NEON.curie('windDirNullQAQCRpt'),
                      model_uri=NEON.windDirNullQAQCRpt, domain=None, range=Optional[str])

slots.windDirGapQAQCRpt = Slot(uri=NEON.windDirGapQAQCRpt, name="windDirGapQAQCRpt", curie=NEON.curie('windDirGapQAQCRpt'),
                      model_uri=NEON.windDirGapQAQCRpt, domain=None, range=Optional[str])

slots.windDirConsistencyQAQCRpt = Slot(uri=NEON.windDirConsistencyQAQCRpt, name="windDirConsistencyQAQCRpt", curie=NEON.curie('windDirConsistencyQAQCRpt'),
                      model_uri=NEON.windDirConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.windDirSpikeQAQCRpt = Slot(uri=NEON.windDirSpikeQAQCRpt, name="windDirSpikeQAQCRpt", curie=NEON.curie('windDirSpikeQAQCRpt'),
                      model_uri=NEON.windDirSpikeQAQCRpt, domain=None, range=Optional[str])

slots.windDirAlphaQAQCRpt = Slot(uri=NEON.windDirAlphaQAQCRpt, name="windDirAlphaQAQCRpt", curie=NEON.curie('windDirAlphaQAQCRpt'),
                      model_uri=NEON.windDirAlphaQAQCRpt, domain=None, range=Optional[str])

slots.windDirBetaQAQCRpt = Slot(uri=NEON.windDirBetaQAQCRpt, name="windDirBetaQAQCRpt", curie=NEON.curie('windDirBetaQAQCRpt'),
                      model_uri=NEON.windDirBetaQAQCRpt, domain=None, range=Optional[str])

slots.windDirRangeFailQM = Slot(uri=NEON.windDirRangeFailQM, name="windDirRangeFailQM", curie=NEON.curie('windDirRangeFailQM'),
                      model_uri=NEON.windDirRangeFailQM, domain=None, range=Optional[float])

slots.windDirRangePassQM = Slot(uri=NEON.windDirRangePassQM, name="windDirRangePassQM", curie=NEON.curie('windDirRangePassQM'),
                      model_uri=NEON.windDirRangePassQM, domain=None, range=Optional[float])

slots.windDirRangeNAQM = Slot(uri=NEON.windDirRangeNAQM, name="windDirRangeNAQM", curie=NEON.curie('windDirRangeNAQM'),
                      model_uri=NEON.windDirRangeNAQM, domain=None, range=Optional[float])

slots.windDirPersistenceFailQM = Slot(uri=NEON.windDirPersistenceFailQM, name="windDirPersistenceFailQM", curie=NEON.curie('windDirPersistenceFailQM'),
                      model_uri=NEON.windDirPersistenceFailQM, domain=None, range=Optional[float])

slots.windDirPersistencePassQM = Slot(uri=NEON.windDirPersistencePassQM, name="windDirPersistencePassQM", curie=NEON.curie('windDirPersistencePassQM'),
                      model_uri=NEON.windDirPersistencePassQM, domain=None, range=Optional[float])

slots.windDirPersistenceNAQM = Slot(uri=NEON.windDirPersistenceNAQM, name="windDirPersistenceNAQM", curie=NEON.curie('windDirPersistenceNAQM'),
                      model_uri=NEON.windDirPersistenceNAQM, domain=None, range=Optional[float])

slots.windDirStepFailQM = Slot(uri=NEON.windDirStepFailQM, name="windDirStepFailQM", curie=NEON.curie('windDirStepFailQM'),
                      model_uri=NEON.windDirStepFailQM, domain=None, range=Optional[float])

slots.windDirStepPassQM = Slot(uri=NEON.windDirStepPassQM, name="windDirStepPassQM", curie=NEON.curie('windDirStepPassQM'),
                      model_uri=NEON.windDirStepPassQM, domain=None, range=Optional[float])

slots.windDirStepNAQM = Slot(uri=NEON.windDirStepNAQM, name="windDirStepNAQM", curie=NEON.curie('windDirStepNAQM'),
                      model_uri=NEON.windDirStepNAQM, domain=None, range=Optional[float])

slots.windDirNullFailQM = Slot(uri=NEON.windDirNullFailQM, name="windDirNullFailQM", curie=NEON.curie('windDirNullFailQM'),
                      model_uri=NEON.windDirNullFailQM, domain=None, range=Optional[float])

slots.windDirNullPassQM = Slot(uri=NEON.windDirNullPassQM, name="windDirNullPassQM", curie=NEON.curie('windDirNullPassQM'),
                      model_uri=NEON.windDirNullPassQM, domain=None, range=Optional[float])

slots.windDirNullNAQM = Slot(uri=NEON.windDirNullNAQM, name="windDirNullNAQM", curie=NEON.curie('windDirNullNAQM'),
                      model_uri=NEON.windDirNullNAQM, domain=None, range=Optional[float])

slots.windDirGapFailQM = Slot(uri=NEON.windDirGapFailQM, name="windDirGapFailQM", curie=NEON.curie('windDirGapFailQM'),
                      model_uri=NEON.windDirGapFailQM, domain=None, range=Optional[float])

slots.windDirGapPassQM = Slot(uri=NEON.windDirGapPassQM, name="windDirGapPassQM", curie=NEON.curie('windDirGapPassQM'),
                      model_uri=NEON.windDirGapPassQM, domain=None, range=Optional[float])

slots.windDirGapNAQM = Slot(uri=NEON.windDirGapNAQM, name="windDirGapNAQM", curie=NEON.curie('windDirGapNAQM'),
                      model_uri=NEON.windDirGapNAQM, domain=None, range=Optional[float])

slots.windDirSpikeFailQM = Slot(uri=NEON.windDirSpikeFailQM, name="windDirSpikeFailQM", curie=NEON.curie('windDirSpikeFailQM'),
                      model_uri=NEON.windDirSpikeFailQM, domain=None, range=Optional[float])

slots.windDirSpikePassQM = Slot(uri=NEON.windDirSpikePassQM, name="windDirSpikePassQM", curie=NEON.curie('windDirSpikePassQM'),
                      model_uri=NEON.windDirSpikePassQM, domain=None, range=Optional[float])

slots.windDirSpikeNAQM = Slot(uri=NEON.windDirSpikeNAQM, name="windDirSpikeNAQM", curie=NEON.curie('windDirSpikeNAQM'),
                      model_uri=NEON.windDirSpikeNAQM, domain=None, range=Optional[float])

slots.windDirConsistencyFailQM = Slot(uri=NEON.windDirConsistencyFailQM, name="windDirConsistencyFailQM", curie=NEON.curie('windDirConsistencyFailQM'),
                      model_uri=NEON.windDirConsistencyFailQM, domain=None, range=Optional[float])

slots.windDirConsistencyPassQM = Slot(uri=NEON.windDirConsistencyPassQM, name="windDirConsistencyPassQM", curie=NEON.curie('windDirConsistencyPassQM'),
                      model_uri=NEON.windDirConsistencyPassQM, domain=None, range=Optional[float])

slots.windDirConsistencyNAQM = Slot(uri=NEON.windDirConsistencyNAQM, name="windDirConsistencyNAQM", curie=NEON.curie('windDirConsistencyNAQM'),
                      model_uri=NEON.windDirConsistencyNAQM, domain=None, range=Optional[float])

slots.windDirAlphaQM = Slot(uri=NEON.windDirAlphaQM, name="windDirAlphaQM", curie=NEON.curie('windDirAlphaQM'),
                      model_uri=NEON.windDirAlphaQM, domain=None, range=Optional[float])

slots.windDirBetaQM = Slot(uri=NEON.windDirBetaQM, name="windDirBetaQM", curie=NEON.curie('windDirBetaQM'),
                      model_uri=NEON.windDirBetaQM, domain=None, range=Optional[float])

slots.windDirFinalQF = Slot(uri=NEON.windDirFinalQF, name="windDirFinalQF", curie=NEON.curie('windDirFinalQF'),
                      model_uri=NEON.windDirFinalQF, domain=None, range=Optional[str])

slots.staPresMean = Slot(uri=NEON.staPresMean, name="staPresMean", curie=NEON.curie('staPresMean'),
                      model_uri=NEON.staPresMean, domain=None, range=Optional[float])

slots.staPresMinimum = Slot(uri=NEON.staPresMinimum, name="staPresMinimum", curie=NEON.curie('staPresMinimum'),
                      model_uri=NEON.staPresMinimum, domain=None, range=Optional[float])

slots.staPresMaximum = Slot(uri=NEON.staPresMaximum, name="staPresMaximum", curie=NEON.curie('staPresMaximum'),
                      model_uri=NEON.staPresMaximum, domain=None, range=Optional[float])

slots.staPresVariance = Slot(uri=NEON.staPresVariance, name="staPresVariance", curie=NEON.curie('staPresVariance'),
                      model_uri=NEON.staPresVariance, domain=None, range=Optional[float])

slots.staPresNumPts = Slot(uri=NEON.staPresNumPts, name="staPresNumPts", curie=NEON.curie('staPresNumPts'),
                      model_uri=NEON.staPresNumPts, domain=None, range=Optional[float])

slots.staPresExpUncert = Slot(uri=NEON.staPresExpUncert, name="staPresExpUncert", curie=NEON.curie('staPresExpUncert'),
                      model_uri=NEON.staPresExpUncert, domain=None, range=Optional[float])

slots.staPresStdErMean = Slot(uri=NEON.staPresStdErMean, name="staPresStdErMean", curie=NEON.curie('staPresStdErMean'),
                      model_uri=NEON.staPresStdErMean, domain=None, range=Optional[float])

slots.staPresRangeQAQCRpt = Slot(uri=NEON.staPresRangeQAQCRpt, name="staPresRangeQAQCRpt", curie=NEON.curie('staPresRangeQAQCRpt'),
                      model_uri=NEON.staPresRangeQAQCRpt, domain=None, range=Optional[str])

slots.staPresPersistenceQAQCRpt = Slot(uri=NEON.staPresPersistenceQAQCRpt, name="staPresPersistenceQAQCRpt", curie=NEON.curie('staPresPersistenceQAQCRpt'),
                      model_uri=NEON.staPresPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.staPresStepQAQCRpt = Slot(uri=NEON.staPresStepQAQCRpt, name="staPresStepQAQCRpt", curie=NEON.curie('staPresStepQAQCRpt'),
                      model_uri=NEON.staPresStepQAQCRpt, domain=None, range=Optional[str])

slots.staPresNullQAQCRpt = Slot(uri=NEON.staPresNullQAQCRpt, name="staPresNullQAQCRpt", curie=NEON.curie('staPresNullQAQCRpt'),
                      model_uri=NEON.staPresNullQAQCRpt, domain=None, range=Optional[str])

slots.staPresGapQAQCRpt = Slot(uri=NEON.staPresGapQAQCRpt, name="staPresGapQAQCRpt", curie=NEON.curie('staPresGapQAQCRpt'),
                      model_uri=NEON.staPresGapQAQCRpt, domain=None, range=Optional[str])

slots.staPresConsistencyQAQCRpt = Slot(uri=NEON.staPresConsistencyQAQCRpt, name="staPresConsistencyQAQCRpt", curie=NEON.curie('staPresConsistencyQAQCRpt'),
                      model_uri=NEON.staPresConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.staPresSpikeQAQCRpt = Slot(uri=NEON.staPresSpikeQAQCRpt, name="staPresSpikeQAQCRpt", curie=NEON.curie('staPresSpikeQAQCRpt'),
                      model_uri=NEON.staPresSpikeQAQCRpt, domain=None, range=Optional[str])

slots.staPresAlphaQAQCRpt = Slot(uri=NEON.staPresAlphaQAQCRpt, name="staPresAlphaQAQCRpt", curie=NEON.curie('staPresAlphaQAQCRpt'),
                      model_uri=NEON.staPresAlphaQAQCRpt, domain=None, range=Optional[str])

slots.staPresBetaQAQCRpt = Slot(uri=NEON.staPresBetaQAQCRpt, name="staPresBetaQAQCRpt", curie=NEON.curie('staPresBetaQAQCRpt'),
                      model_uri=NEON.staPresBetaQAQCRpt, domain=None, range=Optional[str])

slots.staPresRangeFailQM = Slot(uri=NEON.staPresRangeFailQM, name="staPresRangeFailQM", curie=NEON.curie('staPresRangeFailQM'),
                      model_uri=NEON.staPresRangeFailQM, domain=None, range=Optional[float])

slots.staPresRangePassQM = Slot(uri=NEON.staPresRangePassQM, name="staPresRangePassQM", curie=NEON.curie('staPresRangePassQM'),
                      model_uri=NEON.staPresRangePassQM, domain=None, range=Optional[float])

slots.staPresRangeNAQM = Slot(uri=NEON.staPresRangeNAQM, name="staPresRangeNAQM", curie=NEON.curie('staPresRangeNAQM'),
                      model_uri=NEON.staPresRangeNAQM, domain=None, range=Optional[float])

slots.staPresPersistenceFailQM = Slot(uri=NEON.staPresPersistenceFailQM, name="staPresPersistenceFailQM", curie=NEON.curie('staPresPersistenceFailQM'),
                      model_uri=NEON.staPresPersistenceFailQM, domain=None, range=Optional[float])

slots.staPresPersistencePassQM = Slot(uri=NEON.staPresPersistencePassQM, name="staPresPersistencePassQM", curie=NEON.curie('staPresPersistencePassQM'),
                      model_uri=NEON.staPresPersistencePassQM, domain=None, range=Optional[float])

slots.staPresPersistenceNAQM = Slot(uri=NEON.staPresPersistenceNAQM, name="staPresPersistenceNAQM", curie=NEON.curie('staPresPersistenceNAQM'),
                      model_uri=NEON.staPresPersistenceNAQM, domain=None, range=Optional[float])

slots.staPresStepFailQM = Slot(uri=NEON.staPresStepFailQM, name="staPresStepFailQM", curie=NEON.curie('staPresStepFailQM'),
                      model_uri=NEON.staPresStepFailQM, domain=None, range=Optional[float])

slots.staPresStepPassQM = Slot(uri=NEON.staPresStepPassQM, name="staPresStepPassQM", curie=NEON.curie('staPresStepPassQM'),
                      model_uri=NEON.staPresStepPassQM, domain=None, range=Optional[float])

slots.staPresStepNAQM = Slot(uri=NEON.staPresStepNAQM, name="staPresStepNAQM", curie=NEON.curie('staPresStepNAQM'),
                      model_uri=NEON.staPresStepNAQM, domain=None, range=Optional[float])

slots.staPresNullFailQM = Slot(uri=NEON.staPresNullFailQM, name="staPresNullFailQM", curie=NEON.curie('staPresNullFailQM'),
                      model_uri=NEON.staPresNullFailQM, domain=None, range=Optional[float])

slots.staPresNullPassQM = Slot(uri=NEON.staPresNullPassQM, name="staPresNullPassQM", curie=NEON.curie('staPresNullPassQM'),
                      model_uri=NEON.staPresNullPassQM, domain=None, range=Optional[float])

slots.staPresNullNAQM = Slot(uri=NEON.staPresNullNAQM, name="staPresNullNAQM", curie=NEON.curie('staPresNullNAQM'),
                      model_uri=NEON.staPresNullNAQM, domain=None, range=Optional[float])

slots.staPresGapFailQM = Slot(uri=NEON.staPresGapFailQM, name="staPresGapFailQM", curie=NEON.curie('staPresGapFailQM'),
                      model_uri=NEON.staPresGapFailQM, domain=None, range=Optional[float])

slots.staPresGapPassQM = Slot(uri=NEON.staPresGapPassQM, name="staPresGapPassQM", curie=NEON.curie('staPresGapPassQM'),
                      model_uri=NEON.staPresGapPassQM, domain=None, range=Optional[float])

slots.staPresGapNAQM = Slot(uri=NEON.staPresGapNAQM, name="staPresGapNAQM", curie=NEON.curie('staPresGapNAQM'),
                      model_uri=NEON.staPresGapNAQM, domain=None, range=Optional[float])

slots.staPresSpikeFailQM = Slot(uri=NEON.staPresSpikeFailQM, name="staPresSpikeFailQM", curie=NEON.curie('staPresSpikeFailQM'),
                      model_uri=NEON.staPresSpikeFailQM, domain=None, range=Optional[float])

slots.staPresSpikePassQM = Slot(uri=NEON.staPresSpikePassQM, name="staPresSpikePassQM", curie=NEON.curie('staPresSpikePassQM'),
                      model_uri=NEON.staPresSpikePassQM, domain=None, range=Optional[float])

slots.staPresSpikeNAQM = Slot(uri=NEON.staPresSpikeNAQM, name="staPresSpikeNAQM", curie=NEON.curie('staPresSpikeNAQM'),
                      model_uri=NEON.staPresSpikeNAQM, domain=None, range=Optional[float])

slots.staPresConsistencyFailQM = Slot(uri=NEON.staPresConsistencyFailQM, name="staPresConsistencyFailQM", curie=NEON.curie('staPresConsistencyFailQM'),
                      model_uri=NEON.staPresConsistencyFailQM, domain=None, range=Optional[float])

slots.staPresConsistencyPassQM = Slot(uri=NEON.staPresConsistencyPassQM, name="staPresConsistencyPassQM", curie=NEON.curie('staPresConsistencyPassQM'),
                      model_uri=NEON.staPresConsistencyPassQM, domain=None, range=Optional[float])

slots.staPresConsistencyNAQM = Slot(uri=NEON.staPresConsistencyNAQM, name="staPresConsistencyNAQM", curie=NEON.curie('staPresConsistencyNAQM'),
                      model_uri=NEON.staPresConsistencyNAQM, domain=None, range=Optional[float])

slots.staPresAlphaQM = Slot(uri=NEON.staPresAlphaQM, name="staPresAlphaQM", curie=NEON.curie('staPresAlphaQM'),
                      model_uri=NEON.staPresAlphaQM, domain=None, range=Optional[float])

slots.staPresBetaQM = Slot(uri=NEON.staPresBetaQM, name="staPresBetaQM", curie=NEON.curie('staPresBetaQM'),
                      model_uri=NEON.staPresBetaQM, domain=None, range=Optional[float])

slots.staPresFinalQF = Slot(uri=NEON.staPresFinalQF, name="staPresFinalQF", curie=NEON.curie('staPresFinalQF'),
                      model_uri=NEON.staPresFinalQF, domain=None, range=Optional[str])

slots.corPres = Slot(uri=NEON.corPres, name="corPres", curie=NEON.curie('corPres'),
                      model_uri=NEON.corPres, domain=None, range=Optional[float])

slots.corPresMinimum = Slot(uri=NEON.corPresMinimum, name="corPresMinimum", curie=NEON.curie('corPresMinimum'),
                      model_uri=NEON.corPresMinimum, domain=None, range=Optional[float])

slots.corPresMaximum = Slot(uri=NEON.corPresMaximum, name="corPresMaximum", curie=NEON.curie('corPresMaximum'),
                      model_uri=NEON.corPresMaximum, domain=None, range=Optional[float])

slots.corPresVariance = Slot(uri=NEON.corPresVariance, name="corPresVariance", curie=NEON.curie('corPresVariance'),
                      model_uri=NEON.corPresVariance, domain=None, range=Optional[float])

slots.corPresNumPts = Slot(uri=NEON.corPresNumPts, name="corPresNumPts", curie=NEON.curie('corPresNumPts'),
                      model_uri=NEON.corPresNumPts, domain=None, range=Optional[float])

slots.corPresExpUncert = Slot(uri=NEON.corPresExpUncert, name="corPresExpUncert", curie=NEON.curie('corPresExpUncert'),
                      model_uri=NEON.corPresExpUncert, domain=None, range=Optional[float])

slots.corPresStdErMean = Slot(uri=NEON.corPresStdErMean, name="corPresStdErMean", curie=NEON.curie('corPresStdErMean'),
                      model_uri=NEON.corPresStdErMean, domain=None, range=Optional[float])

slots.corPresRangeQAQCRpt = Slot(uri=NEON.corPresRangeQAQCRpt, name="corPresRangeQAQCRpt", curie=NEON.curie('corPresRangeQAQCRpt'),
                      model_uri=NEON.corPresRangeQAQCRpt, domain=None, range=Optional[str])

slots.corPresPersistenceQAQCRpt = Slot(uri=NEON.corPresPersistenceQAQCRpt, name="corPresPersistenceQAQCRpt", curie=NEON.curie('corPresPersistenceQAQCRpt'),
                      model_uri=NEON.corPresPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.corPresStepQAQCRpt = Slot(uri=NEON.corPresStepQAQCRpt, name="corPresStepQAQCRpt", curie=NEON.curie('corPresStepQAQCRpt'),
                      model_uri=NEON.corPresStepQAQCRpt, domain=None, range=Optional[str])

slots.corPresNullQAQCRpt = Slot(uri=NEON.corPresNullQAQCRpt, name="corPresNullQAQCRpt", curie=NEON.curie('corPresNullQAQCRpt'),
                      model_uri=NEON.corPresNullQAQCRpt, domain=None, range=Optional[str])

slots.corPresGapQAQCRpt = Slot(uri=NEON.corPresGapQAQCRpt, name="corPresGapQAQCRpt", curie=NEON.curie('corPresGapQAQCRpt'),
                      model_uri=NEON.corPresGapQAQCRpt, domain=None, range=Optional[str])

slots.corPresConsistencyQAQCRpt = Slot(uri=NEON.corPresConsistencyQAQCRpt, name="corPresConsistencyQAQCRpt", curie=NEON.curie('corPresConsistencyQAQCRpt'),
                      model_uri=NEON.corPresConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.corPresSpikeQAQCRpt = Slot(uri=NEON.corPresSpikeQAQCRpt, name="corPresSpikeQAQCRpt", curie=NEON.curie('corPresSpikeQAQCRpt'),
                      model_uri=NEON.corPresSpikeQAQCRpt, domain=None, range=Optional[str])

slots.corPresAlphaQAQCRpt = Slot(uri=NEON.corPresAlphaQAQCRpt, name="corPresAlphaQAQCRpt", curie=NEON.curie('corPresAlphaQAQCRpt'),
                      model_uri=NEON.corPresAlphaQAQCRpt, domain=None, range=Optional[str])

slots.corPresBetaQAQCRpt = Slot(uri=NEON.corPresBetaQAQCRpt, name="corPresBetaQAQCRpt", curie=NEON.curie('corPresBetaQAQCRpt'),
                      model_uri=NEON.corPresBetaQAQCRpt, domain=None, range=Optional[str])

slots.corPresRangeFailQM = Slot(uri=NEON.corPresRangeFailQM, name="corPresRangeFailQM", curie=NEON.curie('corPresRangeFailQM'),
                      model_uri=NEON.corPresRangeFailQM, domain=None, range=Optional[float])

slots.corPresRangePassQM = Slot(uri=NEON.corPresRangePassQM, name="corPresRangePassQM", curie=NEON.curie('corPresRangePassQM'),
                      model_uri=NEON.corPresRangePassQM, domain=None, range=Optional[float])

slots.corPresRangeNAQM = Slot(uri=NEON.corPresRangeNAQM, name="corPresRangeNAQM", curie=NEON.curie('corPresRangeNAQM'),
                      model_uri=NEON.corPresRangeNAQM, domain=None, range=Optional[float])

slots.corPresPersistenceFailQM = Slot(uri=NEON.corPresPersistenceFailQM, name="corPresPersistenceFailQM", curie=NEON.curie('corPresPersistenceFailQM'),
                      model_uri=NEON.corPresPersistenceFailQM, domain=None, range=Optional[float])

slots.corPresPersistencePassQM = Slot(uri=NEON.corPresPersistencePassQM, name="corPresPersistencePassQM", curie=NEON.curie('corPresPersistencePassQM'),
                      model_uri=NEON.corPresPersistencePassQM, domain=None, range=Optional[float])

slots.corPresPersistenceNAQM = Slot(uri=NEON.corPresPersistenceNAQM, name="corPresPersistenceNAQM", curie=NEON.curie('corPresPersistenceNAQM'),
                      model_uri=NEON.corPresPersistenceNAQM, domain=None, range=Optional[float])

slots.corPresStepFailQM = Slot(uri=NEON.corPresStepFailQM, name="corPresStepFailQM", curie=NEON.curie('corPresStepFailQM'),
                      model_uri=NEON.corPresStepFailQM, domain=None, range=Optional[float])

slots.corPresStepPassQM = Slot(uri=NEON.corPresStepPassQM, name="corPresStepPassQM", curie=NEON.curie('corPresStepPassQM'),
                      model_uri=NEON.corPresStepPassQM, domain=None, range=Optional[float])

slots.corPresStepNAQM = Slot(uri=NEON.corPresStepNAQM, name="corPresStepNAQM", curie=NEON.curie('corPresStepNAQM'),
                      model_uri=NEON.corPresStepNAQM, domain=None, range=Optional[float])

slots.corPresNullFailQM = Slot(uri=NEON.corPresNullFailQM, name="corPresNullFailQM", curie=NEON.curie('corPresNullFailQM'),
                      model_uri=NEON.corPresNullFailQM, domain=None, range=Optional[float])

slots.corPresNullPassQM = Slot(uri=NEON.corPresNullPassQM, name="corPresNullPassQM", curie=NEON.curie('corPresNullPassQM'),
                      model_uri=NEON.corPresNullPassQM, domain=None, range=Optional[float])

slots.corPresNullNAQM = Slot(uri=NEON.corPresNullNAQM, name="corPresNullNAQM", curie=NEON.curie('corPresNullNAQM'),
                      model_uri=NEON.corPresNullNAQM, domain=None, range=Optional[float])

slots.corPresGapFailQM = Slot(uri=NEON.corPresGapFailQM, name="corPresGapFailQM", curie=NEON.curie('corPresGapFailQM'),
                      model_uri=NEON.corPresGapFailQM, domain=None, range=Optional[float])

slots.corPresGapPassQM = Slot(uri=NEON.corPresGapPassQM, name="corPresGapPassQM", curie=NEON.curie('corPresGapPassQM'),
                      model_uri=NEON.corPresGapPassQM, domain=None, range=Optional[float])

slots.corPresGapNAQM = Slot(uri=NEON.corPresGapNAQM, name="corPresGapNAQM", curie=NEON.curie('corPresGapNAQM'),
                      model_uri=NEON.corPresGapNAQM, domain=None, range=Optional[float])

slots.corPresSpikeFailQM = Slot(uri=NEON.corPresSpikeFailQM, name="corPresSpikeFailQM", curie=NEON.curie('corPresSpikeFailQM'),
                      model_uri=NEON.corPresSpikeFailQM, domain=None, range=Optional[float])

slots.corPresSpikePassQM = Slot(uri=NEON.corPresSpikePassQM, name="corPresSpikePassQM", curie=NEON.curie('corPresSpikePassQM'),
                      model_uri=NEON.corPresSpikePassQM, domain=None, range=Optional[float])

slots.corPresSpikeNAQM = Slot(uri=NEON.corPresSpikeNAQM, name="corPresSpikeNAQM", curie=NEON.curie('corPresSpikeNAQM'),
                      model_uri=NEON.corPresSpikeNAQM, domain=None, range=Optional[float])

slots.corPresConsistencyFailQM = Slot(uri=NEON.corPresConsistencyFailQM, name="corPresConsistencyFailQM", curie=NEON.curie('corPresConsistencyFailQM'),
                      model_uri=NEON.corPresConsistencyFailQM, domain=None, range=Optional[float])

slots.corPresConsistencyPassQM = Slot(uri=NEON.corPresConsistencyPassQM, name="corPresConsistencyPassQM", curie=NEON.curie('corPresConsistencyPassQM'),
                      model_uri=NEON.corPresConsistencyPassQM, domain=None, range=Optional[float])

slots.corPresConsistencyNAQM = Slot(uri=NEON.corPresConsistencyNAQM, name="corPresConsistencyNAQM", curie=NEON.curie('corPresConsistencyNAQM'),
                      model_uri=NEON.corPresConsistencyNAQM, domain=None, range=Optional[float])

slots.corPresAlphaQM = Slot(uri=NEON.corPresAlphaQM, name="corPresAlphaQM", curie=NEON.curie('corPresAlphaQM'),
                      model_uri=NEON.corPresAlphaQM, domain=None, range=Optional[float])

slots.corPresBetaQM = Slot(uri=NEON.corPresBetaQM, name="corPresBetaQM", curie=NEON.curie('corPresBetaQM'),
                      model_uri=NEON.corPresBetaQM, domain=None, range=Optional[float])

slots.corPresFinalQF = Slot(uri=NEON.corPresFinalQF, name="corPresFinalQF", curie=NEON.curie('corPresFinalQF'),
                      model_uri=NEON.corPresFinalQF, domain=None, range=Optional[str])

slots.difRadMean = Slot(uri=NEON.difRadMean, name="difRadMean", curie=NEON.curie('difRadMean'),
                      model_uri=NEON.difRadMean, domain=None, range=Optional[float])

slots.difRadMinimum = Slot(uri=NEON.difRadMinimum, name="difRadMinimum", curie=NEON.curie('difRadMinimum'),
                      model_uri=NEON.difRadMinimum, domain=None, range=Optional[float])

slots.difRadMaximum = Slot(uri=NEON.difRadMaximum, name="difRadMaximum", curie=NEON.curie('difRadMaximum'),
                      model_uri=NEON.difRadMaximum, domain=None, range=Optional[float])

slots.difRadVariance = Slot(uri=NEON.difRadVariance, name="difRadVariance", curie=NEON.curie('difRadVariance'),
                      model_uri=NEON.difRadVariance, domain=None, range=Optional[float])

slots.difRadNumPts = Slot(uri=NEON.difRadNumPts, name="difRadNumPts", curie=NEON.curie('difRadNumPts'),
                      model_uri=NEON.difRadNumPts, domain=None, range=Optional[float])

slots.difRadExpUncert = Slot(uri=NEON.difRadExpUncert, name="difRadExpUncert", curie=NEON.curie('difRadExpUncert'),
                      model_uri=NEON.difRadExpUncert, domain=None, range=Optional[float])

slots.difRadStdErMean = Slot(uri=NEON.difRadStdErMean, name="difRadStdErMean", curie=NEON.curie('difRadStdErMean'),
                      model_uri=NEON.difRadStdErMean, domain=None, range=Optional[float])

slots.difRadRangeQAQCRpt = Slot(uri=NEON.difRadRangeQAQCRpt, name="difRadRangeQAQCRpt", curie=NEON.curie('difRadRangeQAQCRpt'),
                      model_uri=NEON.difRadRangeQAQCRpt, domain=None, range=Optional[str])

slots.difRadPersistenceQAQCRpt = Slot(uri=NEON.difRadPersistenceQAQCRpt, name="difRadPersistenceQAQCRpt", curie=NEON.curie('difRadPersistenceQAQCRpt'),
                      model_uri=NEON.difRadPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.difRadStepQAQCRpt = Slot(uri=NEON.difRadStepQAQCRpt, name="difRadStepQAQCRpt", curie=NEON.curie('difRadStepQAQCRpt'),
                      model_uri=NEON.difRadStepQAQCRpt, domain=None, range=Optional[str])

slots.difRadNullQAQCRpt = Slot(uri=NEON.difRadNullQAQCRpt, name="difRadNullQAQCRpt", curie=NEON.curie('difRadNullQAQCRpt'),
                      model_uri=NEON.difRadNullQAQCRpt, domain=None, range=Optional[str])

slots.difRadGapQAQCRpt = Slot(uri=NEON.difRadGapQAQCRpt, name="difRadGapQAQCRpt", curie=NEON.curie('difRadGapQAQCRpt'),
                      model_uri=NEON.difRadGapQAQCRpt, domain=None, range=Optional[str])

slots.difRadConsistencyQAQCRpt = Slot(uri=NEON.difRadConsistencyQAQCRpt, name="difRadConsistencyQAQCRpt", curie=NEON.curie('difRadConsistencyQAQCRpt'),
                      model_uri=NEON.difRadConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.difRadSpikeQAQCRpt = Slot(uri=NEON.difRadSpikeQAQCRpt, name="difRadSpikeQAQCRpt", curie=NEON.curie('difRadSpikeQAQCRpt'),
                      model_uri=NEON.difRadSpikeQAQCRpt, domain=None, range=Optional[str])

slots.difRadAlphaQAQCRpt = Slot(uri=NEON.difRadAlphaQAQCRpt, name="difRadAlphaQAQCRpt", curie=NEON.curie('difRadAlphaQAQCRpt'),
                      model_uri=NEON.difRadAlphaQAQCRpt, domain=None, range=Optional[str])

slots.difRadBetaQAQCRpt = Slot(uri=NEON.difRadBetaQAQCRpt, name="difRadBetaQAQCRpt", curie=NEON.curie('difRadBetaQAQCRpt'),
                      model_uri=NEON.difRadBetaQAQCRpt, domain=None, range=Optional[str])

slots.difRadRangeFailQM = Slot(uri=NEON.difRadRangeFailQM, name="difRadRangeFailQM", curie=NEON.curie('difRadRangeFailQM'),
                      model_uri=NEON.difRadRangeFailQM, domain=None, range=Optional[float])

slots.difRadRangePassQM = Slot(uri=NEON.difRadRangePassQM, name="difRadRangePassQM", curie=NEON.curie('difRadRangePassQM'),
                      model_uri=NEON.difRadRangePassQM, domain=None, range=Optional[float])

slots.difRadRangeNAQM = Slot(uri=NEON.difRadRangeNAQM, name="difRadRangeNAQM", curie=NEON.curie('difRadRangeNAQM'),
                      model_uri=NEON.difRadRangeNAQM, domain=None, range=Optional[float])

slots.difRadPersistenceFailQM = Slot(uri=NEON.difRadPersistenceFailQM, name="difRadPersistenceFailQM", curie=NEON.curie('difRadPersistenceFailQM'),
                      model_uri=NEON.difRadPersistenceFailQM, domain=None, range=Optional[float])

slots.difRadPersistencePassQM = Slot(uri=NEON.difRadPersistencePassQM, name="difRadPersistencePassQM", curie=NEON.curie('difRadPersistencePassQM'),
                      model_uri=NEON.difRadPersistencePassQM, domain=None, range=Optional[float])

slots.difRadPersistenceNAQM = Slot(uri=NEON.difRadPersistenceNAQM, name="difRadPersistenceNAQM", curie=NEON.curie('difRadPersistenceNAQM'),
                      model_uri=NEON.difRadPersistenceNAQM, domain=None, range=Optional[float])

slots.difRadStepFailQM = Slot(uri=NEON.difRadStepFailQM, name="difRadStepFailQM", curie=NEON.curie('difRadStepFailQM'),
                      model_uri=NEON.difRadStepFailQM, domain=None, range=Optional[float])

slots.difRadStepPassQM = Slot(uri=NEON.difRadStepPassQM, name="difRadStepPassQM", curie=NEON.curie('difRadStepPassQM'),
                      model_uri=NEON.difRadStepPassQM, domain=None, range=Optional[float])

slots.difRadStepNAQM = Slot(uri=NEON.difRadStepNAQM, name="difRadStepNAQM", curie=NEON.curie('difRadStepNAQM'),
                      model_uri=NEON.difRadStepNAQM, domain=None, range=Optional[float])

slots.difRadNullFailQM = Slot(uri=NEON.difRadNullFailQM, name="difRadNullFailQM", curie=NEON.curie('difRadNullFailQM'),
                      model_uri=NEON.difRadNullFailQM, domain=None, range=Optional[float])

slots.difRadNullPassQM = Slot(uri=NEON.difRadNullPassQM, name="difRadNullPassQM", curie=NEON.curie('difRadNullPassQM'),
                      model_uri=NEON.difRadNullPassQM, domain=None, range=Optional[float])

slots.difRadNullNAQM = Slot(uri=NEON.difRadNullNAQM, name="difRadNullNAQM", curie=NEON.curie('difRadNullNAQM'),
                      model_uri=NEON.difRadNullNAQM, domain=None, range=Optional[float])

slots.difRadGapFailQM = Slot(uri=NEON.difRadGapFailQM, name="difRadGapFailQM", curie=NEON.curie('difRadGapFailQM'),
                      model_uri=NEON.difRadGapFailQM, domain=None, range=Optional[float])

slots.difRadGapPassQM = Slot(uri=NEON.difRadGapPassQM, name="difRadGapPassQM", curie=NEON.curie('difRadGapPassQM'),
                      model_uri=NEON.difRadGapPassQM, domain=None, range=Optional[float])

slots.difRadGapNAQM = Slot(uri=NEON.difRadGapNAQM, name="difRadGapNAQM", curie=NEON.curie('difRadGapNAQM'),
                      model_uri=NEON.difRadGapNAQM, domain=None, range=Optional[float])

slots.difRadSpikeFailQM = Slot(uri=NEON.difRadSpikeFailQM, name="difRadSpikeFailQM", curie=NEON.curie('difRadSpikeFailQM'),
                      model_uri=NEON.difRadSpikeFailQM, domain=None, range=Optional[float])

slots.difRadSpikePassQM = Slot(uri=NEON.difRadSpikePassQM, name="difRadSpikePassQM", curie=NEON.curie('difRadSpikePassQM'),
                      model_uri=NEON.difRadSpikePassQM, domain=None, range=Optional[float])

slots.difRadSpikeNAQM = Slot(uri=NEON.difRadSpikeNAQM, name="difRadSpikeNAQM", curie=NEON.curie('difRadSpikeNAQM'),
                      model_uri=NEON.difRadSpikeNAQM, domain=None, range=Optional[float])

slots.difRadConsistencyFailQM = Slot(uri=NEON.difRadConsistencyFailQM, name="difRadConsistencyFailQM", curie=NEON.curie('difRadConsistencyFailQM'),
                      model_uri=NEON.difRadConsistencyFailQM, domain=None, range=Optional[float])

slots.difRadConsistencyPassQM = Slot(uri=NEON.difRadConsistencyPassQM, name="difRadConsistencyPassQM", curie=NEON.curie('difRadConsistencyPassQM'),
                      model_uri=NEON.difRadConsistencyPassQM, domain=None, range=Optional[float])

slots.difRadConsistencyNAQM = Slot(uri=NEON.difRadConsistencyNAQM, name="difRadConsistencyNAQM", curie=NEON.curie('difRadConsistencyNAQM'),
                      model_uri=NEON.difRadConsistencyNAQM, domain=None, range=Optional[float])

slots.difRadAlphaQM = Slot(uri=NEON.difRadAlphaQM, name="difRadAlphaQM", curie=NEON.curie('difRadAlphaQM'),
                      model_uri=NEON.difRadAlphaQM, domain=None, range=Optional[float])

slots.difRadBetaQM = Slot(uri=NEON.difRadBetaQM, name="difRadBetaQM", curie=NEON.curie('difRadBetaQM'),
                      model_uri=NEON.difRadBetaQM, domain=None, range=Optional[float])

slots.difRadFinalQF = Slot(uri=NEON.difRadFinalQF, name="difRadFinalQF", curie=NEON.curie('difRadFinalQF'),
                      model_uri=NEON.difRadFinalQF, domain=None, range=Optional[str])

slots.dirRadMean = Slot(uri=NEON.dirRadMean, name="dirRadMean", curie=NEON.curie('dirRadMean'),
                      model_uri=NEON.dirRadMean, domain=None, range=Optional[float])

slots.dirRadMinimum = Slot(uri=NEON.dirRadMinimum, name="dirRadMinimum", curie=NEON.curie('dirRadMinimum'),
                      model_uri=NEON.dirRadMinimum, domain=None, range=Optional[float])

slots.dirRadMaximum = Slot(uri=NEON.dirRadMaximum, name="dirRadMaximum", curie=NEON.curie('dirRadMaximum'),
                      model_uri=NEON.dirRadMaximum, domain=None, range=Optional[float])

slots.dirRadVariance = Slot(uri=NEON.dirRadVariance, name="dirRadVariance", curie=NEON.curie('dirRadVariance'),
                      model_uri=NEON.dirRadVariance, domain=None, range=Optional[float])

slots.dirRadNumPts = Slot(uri=NEON.dirRadNumPts, name="dirRadNumPts", curie=NEON.curie('dirRadNumPts'),
                      model_uri=NEON.dirRadNumPts, domain=None, range=Optional[float])

slots.dirRadExpUncert = Slot(uri=NEON.dirRadExpUncert, name="dirRadExpUncert", curie=NEON.curie('dirRadExpUncert'),
                      model_uri=NEON.dirRadExpUncert, domain=None, range=Optional[float])

slots.dirRadStdErMean = Slot(uri=NEON.dirRadStdErMean, name="dirRadStdErMean", curie=NEON.curie('dirRadStdErMean'),
                      model_uri=NEON.dirRadStdErMean, domain=None, range=Optional[float])

slots.dirRadRangeQAQCRpt = Slot(uri=NEON.dirRadRangeQAQCRpt, name="dirRadRangeQAQCRpt", curie=NEON.curie('dirRadRangeQAQCRpt'),
                      model_uri=NEON.dirRadRangeQAQCRpt, domain=None, range=Optional[str])

slots.dirRadPersistenceQAQCRpt = Slot(uri=NEON.dirRadPersistenceQAQCRpt, name="dirRadPersistenceQAQCRpt", curie=NEON.curie('dirRadPersistenceQAQCRpt'),
                      model_uri=NEON.dirRadPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.dirRadStepQAQCRpt = Slot(uri=NEON.dirRadStepQAQCRpt, name="dirRadStepQAQCRpt", curie=NEON.curie('dirRadStepQAQCRpt'),
                      model_uri=NEON.dirRadStepQAQCRpt, domain=None, range=Optional[str])

slots.dirRadNullQAQCRpt = Slot(uri=NEON.dirRadNullQAQCRpt, name="dirRadNullQAQCRpt", curie=NEON.curie('dirRadNullQAQCRpt'),
                      model_uri=NEON.dirRadNullQAQCRpt, domain=None, range=Optional[str])

slots.dirRadGapQAQCRpt = Slot(uri=NEON.dirRadGapQAQCRpt, name="dirRadGapQAQCRpt", curie=NEON.curie('dirRadGapQAQCRpt'),
                      model_uri=NEON.dirRadGapQAQCRpt, domain=None, range=Optional[str])

slots.dirRadConsistencyQAQCRpt = Slot(uri=NEON.dirRadConsistencyQAQCRpt, name="dirRadConsistencyQAQCRpt", curie=NEON.curie('dirRadConsistencyQAQCRpt'),
                      model_uri=NEON.dirRadConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.dirRadSpikeQAQCRpt = Slot(uri=NEON.dirRadSpikeQAQCRpt, name="dirRadSpikeQAQCRpt", curie=NEON.curie('dirRadSpikeQAQCRpt'),
                      model_uri=NEON.dirRadSpikeQAQCRpt, domain=None, range=Optional[str])

slots.dirRadAlphaQAQCRpt = Slot(uri=NEON.dirRadAlphaQAQCRpt, name="dirRadAlphaQAQCRpt", curie=NEON.curie('dirRadAlphaQAQCRpt'),
                      model_uri=NEON.dirRadAlphaQAQCRpt, domain=None, range=Optional[str])

slots.dirRadBetaQAQCRpt = Slot(uri=NEON.dirRadBetaQAQCRpt, name="dirRadBetaQAQCRpt", curie=NEON.curie('dirRadBetaQAQCRpt'),
                      model_uri=NEON.dirRadBetaQAQCRpt, domain=None, range=Optional[str])

slots.dirRadRangeFailQM = Slot(uri=NEON.dirRadRangeFailQM, name="dirRadRangeFailQM", curie=NEON.curie('dirRadRangeFailQM'),
                      model_uri=NEON.dirRadRangeFailQM, domain=None, range=Optional[float])

slots.dirRadRangePassQM = Slot(uri=NEON.dirRadRangePassQM, name="dirRadRangePassQM", curie=NEON.curie('dirRadRangePassQM'),
                      model_uri=NEON.dirRadRangePassQM, domain=None, range=Optional[float])

slots.dirRadRangeNAQM = Slot(uri=NEON.dirRadRangeNAQM, name="dirRadRangeNAQM", curie=NEON.curie('dirRadRangeNAQM'),
                      model_uri=NEON.dirRadRangeNAQM, domain=None, range=Optional[float])

slots.dirRadPersistenceFailQM = Slot(uri=NEON.dirRadPersistenceFailQM, name="dirRadPersistenceFailQM", curie=NEON.curie('dirRadPersistenceFailQM'),
                      model_uri=NEON.dirRadPersistenceFailQM, domain=None, range=Optional[float])

slots.dirRadPersistencePassQM = Slot(uri=NEON.dirRadPersistencePassQM, name="dirRadPersistencePassQM", curie=NEON.curie('dirRadPersistencePassQM'),
                      model_uri=NEON.dirRadPersistencePassQM, domain=None, range=Optional[float])

slots.dirRadPersistenceNAQM = Slot(uri=NEON.dirRadPersistenceNAQM, name="dirRadPersistenceNAQM", curie=NEON.curie('dirRadPersistenceNAQM'),
                      model_uri=NEON.dirRadPersistenceNAQM, domain=None, range=Optional[float])

slots.dirRadStepFailQM = Slot(uri=NEON.dirRadStepFailQM, name="dirRadStepFailQM", curie=NEON.curie('dirRadStepFailQM'),
                      model_uri=NEON.dirRadStepFailQM, domain=None, range=Optional[float])

slots.dirRadStepPassQM = Slot(uri=NEON.dirRadStepPassQM, name="dirRadStepPassQM", curie=NEON.curie('dirRadStepPassQM'),
                      model_uri=NEON.dirRadStepPassQM, domain=None, range=Optional[float])

slots.dirRadStepNAQM = Slot(uri=NEON.dirRadStepNAQM, name="dirRadStepNAQM", curie=NEON.curie('dirRadStepNAQM'),
                      model_uri=NEON.dirRadStepNAQM, domain=None, range=Optional[float])

slots.dirRadNullFailQM = Slot(uri=NEON.dirRadNullFailQM, name="dirRadNullFailQM", curie=NEON.curie('dirRadNullFailQM'),
                      model_uri=NEON.dirRadNullFailQM, domain=None, range=Optional[float])

slots.dirRadNullPassQM = Slot(uri=NEON.dirRadNullPassQM, name="dirRadNullPassQM", curie=NEON.curie('dirRadNullPassQM'),
                      model_uri=NEON.dirRadNullPassQM, domain=None, range=Optional[float])

slots.dirRadNullNAQM = Slot(uri=NEON.dirRadNullNAQM, name="dirRadNullNAQM", curie=NEON.curie('dirRadNullNAQM'),
                      model_uri=NEON.dirRadNullNAQM, domain=None, range=Optional[float])

slots.dirRadGapFailQM = Slot(uri=NEON.dirRadGapFailQM, name="dirRadGapFailQM", curie=NEON.curie('dirRadGapFailQM'),
                      model_uri=NEON.dirRadGapFailQM, domain=None, range=Optional[float])

slots.dirRadGapPassQM = Slot(uri=NEON.dirRadGapPassQM, name="dirRadGapPassQM", curie=NEON.curie('dirRadGapPassQM'),
                      model_uri=NEON.dirRadGapPassQM, domain=None, range=Optional[float])

slots.dirRadGapNAQM = Slot(uri=NEON.dirRadGapNAQM, name="dirRadGapNAQM", curie=NEON.curie('dirRadGapNAQM'),
                      model_uri=NEON.dirRadGapNAQM, domain=None, range=Optional[float])

slots.dirRadSpikeFailQM = Slot(uri=NEON.dirRadSpikeFailQM, name="dirRadSpikeFailQM", curie=NEON.curie('dirRadSpikeFailQM'),
                      model_uri=NEON.dirRadSpikeFailQM, domain=None, range=Optional[float])

slots.dirRadSpikePassQM = Slot(uri=NEON.dirRadSpikePassQM, name="dirRadSpikePassQM", curie=NEON.curie('dirRadSpikePassQM'),
                      model_uri=NEON.dirRadSpikePassQM, domain=None, range=Optional[float])

slots.dirRadSpikeNAQM = Slot(uri=NEON.dirRadSpikeNAQM, name="dirRadSpikeNAQM", curie=NEON.curie('dirRadSpikeNAQM'),
                      model_uri=NEON.dirRadSpikeNAQM, domain=None, range=Optional[float])

slots.dirRadConsistencyFailQM = Slot(uri=NEON.dirRadConsistencyFailQM, name="dirRadConsistencyFailQM", curie=NEON.curie('dirRadConsistencyFailQM'),
                      model_uri=NEON.dirRadConsistencyFailQM, domain=None, range=Optional[float])

slots.dirRadConsistencyPassQM = Slot(uri=NEON.dirRadConsistencyPassQM, name="dirRadConsistencyPassQM", curie=NEON.curie('dirRadConsistencyPassQM'),
                      model_uri=NEON.dirRadConsistencyPassQM, domain=None, range=Optional[float])

slots.dirRadConsistencyNAQM = Slot(uri=NEON.dirRadConsistencyNAQM, name="dirRadConsistencyNAQM", curie=NEON.curie('dirRadConsistencyNAQM'),
                      model_uri=NEON.dirRadConsistencyNAQM, domain=None, range=Optional[float])

slots.dirRadAlphaQM = Slot(uri=NEON.dirRadAlphaQM, name="dirRadAlphaQM", curie=NEON.curie('dirRadAlphaQM'),
                      model_uri=NEON.dirRadAlphaQM, domain=None, range=Optional[float])

slots.dirRadBetaQM = Slot(uri=NEON.dirRadBetaQM, name="dirRadBetaQM", curie=NEON.curie('dirRadBetaQM'),
                      model_uri=NEON.dirRadBetaQM, domain=None, range=Optional[float])

slots.dirRadFinalQF = Slot(uri=NEON.dirRadFinalQF, name="dirRadFinalQF", curie=NEON.curie('dirRadFinalQF'),
                      model_uri=NEON.dirRadFinalQF, domain=None, range=Optional[str])

slots.gloRadMean = Slot(uri=NEON.gloRadMean, name="gloRadMean", curie=NEON.curie('gloRadMean'),
                      model_uri=NEON.gloRadMean, domain=None, range=Optional[float])

slots.gloRadMinimum = Slot(uri=NEON.gloRadMinimum, name="gloRadMinimum", curie=NEON.curie('gloRadMinimum'),
                      model_uri=NEON.gloRadMinimum, domain=None, range=Optional[float])

slots.gloRadMaximum = Slot(uri=NEON.gloRadMaximum, name="gloRadMaximum", curie=NEON.curie('gloRadMaximum'),
                      model_uri=NEON.gloRadMaximum, domain=None, range=Optional[float])

slots.gloRadVariance = Slot(uri=NEON.gloRadVariance, name="gloRadVariance", curie=NEON.curie('gloRadVariance'),
                      model_uri=NEON.gloRadVariance, domain=None, range=Optional[float])

slots.gloRadNumPts = Slot(uri=NEON.gloRadNumPts, name="gloRadNumPts", curie=NEON.curie('gloRadNumPts'),
                      model_uri=NEON.gloRadNumPts, domain=None, range=Optional[float])

slots.gloRadExpUncert = Slot(uri=NEON.gloRadExpUncert, name="gloRadExpUncert", curie=NEON.curie('gloRadExpUncert'),
                      model_uri=NEON.gloRadExpUncert, domain=None, range=Optional[float])

slots.gloRadStdErMean = Slot(uri=NEON.gloRadStdErMean, name="gloRadStdErMean", curie=NEON.curie('gloRadStdErMean'),
                      model_uri=NEON.gloRadStdErMean, domain=None, range=Optional[float])

slots.gloRadRangeQAQCRpt = Slot(uri=NEON.gloRadRangeQAQCRpt, name="gloRadRangeQAQCRpt", curie=NEON.curie('gloRadRangeQAQCRpt'),
                      model_uri=NEON.gloRadRangeQAQCRpt, domain=None, range=Optional[str])

slots.gloRadPersistenceQAQCRpt = Slot(uri=NEON.gloRadPersistenceQAQCRpt, name="gloRadPersistenceQAQCRpt", curie=NEON.curie('gloRadPersistenceQAQCRpt'),
                      model_uri=NEON.gloRadPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.gloRadStepQAQCRpt = Slot(uri=NEON.gloRadStepQAQCRpt, name="gloRadStepQAQCRpt", curie=NEON.curie('gloRadStepQAQCRpt'),
                      model_uri=NEON.gloRadStepQAQCRpt, domain=None, range=Optional[str])

slots.gloRadNullQAQCRpt = Slot(uri=NEON.gloRadNullQAQCRpt, name="gloRadNullQAQCRpt", curie=NEON.curie('gloRadNullQAQCRpt'),
                      model_uri=NEON.gloRadNullQAQCRpt, domain=None, range=Optional[str])

slots.gloRadGapQAQCRpt = Slot(uri=NEON.gloRadGapQAQCRpt, name="gloRadGapQAQCRpt", curie=NEON.curie('gloRadGapQAQCRpt'),
                      model_uri=NEON.gloRadGapQAQCRpt, domain=None, range=Optional[str])

slots.gloRadConsistencyQAQCRpt = Slot(uri=NEON.gloRadConsistencyQAQCRpt, name="gloRadConsistencyQAQCRpt", curie=NEON.curie('gloRadConsistencyQAQCRpt'),
                      model_uri=NEON.gloRadConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.gloRadSpikeQAQCRpt = Slot(uri=NEON.gloRadSpikeQAQCRpt, name="gloRadSpikeQAQCRpt", curie=NEON.curie('gloRadSpikeQAQCRpt'),
                      model_uri=NEON.gloRadSpikeQAQCRpt, domain=None, range=Optional[str])

slots.gloRadAlphaQAQCRpt = Slot(uri=NEON.gloRadAlphaQAQCRpt, name="gloRadAlphaQAQCRpt", curie=NEON.curie('gloRadAlphaQAQCRpt'),
                      model_uri=NEON.gloRadAlphaQAQCRpt, domain=None, range=Optional[str])

slots.gloRadBetaQAQCRpt = Slot(uri=NEON.gloRadBetaQAQCRpt, name="gloRadBetaQAQCRpt", curie=NEON.curie('gloRadBetaQAQCRpt'),
                      model_uri=NEON.gloRadBetaQAQCRpt, domain=None, range=Optional[str])

slots.gloRadRangeFailQM = Slot(uri=NEON.gloRadRangeFailQM, name="gloRadRangeFailQM", curie=NEON.curie('gloRadRangeFailQM'),
                      model_uri=NEON.gloRadRangeFailQM, domain=None, range=Optional[float])

slots.gloRadRangePassQM = Slot(uri=NEON.gloRadRangePassQM, name="gloRadRangePassQM", curie=NEON.curie('gloRadRangePassQM'),
                      model_uri=NEON.gloRadRangePassQM, domain=None, range=Optional[float])

slots.gloRadRangeNAQM = Slot(uri=NEON.gloRadRangeNAQM, name="gloRadRangeNAQM", curie=NEON.curie('gloRadRangeNAQM'),
                      model_uri=NEON.gloRadRangeNAQM, domain=None, range=Optional[float])

slots.gloRadPersistenceFailQM = Slot(uri=NEON.gloRadPersistenceFailQM, name="gloRadPersistenceFailQM", curie=NEON.curie('gloRadPersistenceFailQM'),
                      model_uri=NEON.gloRadPersistenceFailQM, domain=None, range=Optional[float])

slots.gloRadPersistencePassQM = Slot(uri=NEON.gloRadPersistencePassQM, name="gloRadPersistencePassQM", curie=NEON.curie('gloRadPersistencePassQM'),
                      model_uri=NEON.gloRadPersistencePassQM, domain=None, range=Optional[float])

slots.gloRadPersistenceNAQM = Slot(uri=NEON.gloRadPersistenceNAQM, name="gloRadPersistenceNAQM", curie=NEON.curie('gloRadPersistenceNAQM'),
                      model_uri=NEON.gloRadPersistenceNAQM, domain=None, range=Optional[float])

slots.gloRadStepFailQM = Slot(uri=NEON.gloRadStepFailQM, name="gloRadStepFailQM", curie=NEON.curie('gloRadStepFailQM'),
                      model_uri=NEON.gloRadStepFailQM, domain=None, range=Optional[float])

slots.gloRadStepPassQM = Slot(uri=NEON.gloRadStepPassQM, name="gloRadStepPassQM", curie=NEON.curie('gloRadStepPassQM'),
                      model_uri=NEON.gloRadStepPassQM, domain=None, range=Optional[float])

slots.gloRadStepNAQM = Slot(uri=NEON.gloRadStepNAQM, name="gloRadStepNAQM", curie=NEON.curie('gloRadStepNAQM'),
                      model_uri=NEON.gloRadStepNAQM, domain=None, range=Optional[float])

slots.gloRadNullFailQM = Slot(uri=NEON.gloRadNullFailQM, name="gloRadNullFailQM", curie=NEON.curie('gloRadNullFailQM'),
                      model_uri=NEON.gloRadNullFailQM, domain=None, range=Optional[float])

slots.gloRadNullPassQM = Slot(uri=NEON.gloRadNullPassQM, name="gloRadNullPassQM", curie=NEON.curie('gloRadNullPassQM'),
                      model_uri=NEON.gloRadNullPassQM, domain=None, range=Optional[float])

slots.gloRadNullNAQM = Slot(uri=NEON.gloRadNullNAQM, name="gloRadNullNAQM", curie=NEON.curie('gloRadNullNAQM'),
                      model_uri=NEON.gloRadNullNAQM, domain=None, range=Optional[float])

slots.gloRadGapFailQM = Slot(uri=NEON.gloRadGapFailQM, name="gloRadGapFailQM", curie=NEON.curie('gloRadGapFailQM'),
                      model_uri=NEON.gloRadGapFailQM, domain=None, range=Optional[float])

slots.gloRadGapPassQM = Slot(uri=NEON.gloRadGapPassQM, name="gloRadGapPassQM", curie=NEON.curie('gloRadGapPassQM'),
                      model_uri=NEON.gloRadGapPassQM, domain=None, range=Optional[float])

slots.gloRadGapNAQM = Slot(uri=NEON.gloRadGapNAQM, name="gloRadGapNAQM", curie=NEON.curie('gloRadGapNAQM'),
                      model_uri=NEON.gloRadGapNAQM, domain=None, range=Optional[float])

slots.gloRadSpikeFailQM = Slot(uri=NEON.gloRadSpikeFailQM, name="gloRadSpikeFailQM", curie=NEON.curie('gloRadSpikeFailQM'),
                      model_uri=NEON.gloRadSpikeFailQM, domain=None, range=Optional[float])

slots.gloRadSpikePassQM = Slot(uri=NEON.gloRadSpikePassQM, name="gloRadSpikePassQM", curie=NEON.curie('gloRadSpikePassQM'),
                      model_uri=NEON.gloRadSpikePassQM, domain=None, range=Optional[float])

slots.gloRadSpikeNAQM = Slot(uri=NEON.gloRadSpikeNAQM, name="gloRadSpikeNAQM", curie=NEON.curie('gloRadSpikeNAQM'),
                      model_uri=NEON.gloRadSpikeNAQM, domain=None, range=Optional[float])

slots.gloRadConsistencyFailQM = Slot(uri=NEON.gloRadConsistencyFailQM, name="gloRadConsistencyFailQM", curie=NEON.curie('gloRadConsistencyFailQM'),
                      model_uri=NEON.gloRadConsistencyFailQM, domain=None, range=Optional[float])

slots.gloRadConsistencyPassQM = Slot(uri=NEON.gloRadConsistencyPassQM, name="gloRadConsistencyPassQM", curie=NEON.curie('gloRadConsistencyPassQM'),
                      model_uri=NEON.gloRadConsistencyPassQM, domain=None, range=Optional[float])

slots.gloRadConsistencyNAQM = Slot(uri=NEON.gloRadConsistencyNAQM, name="gloRadConsistencyNAQM", curie=NEON.curie('gloRadConsistencyNAQM'),
                      model_uri=NEON.gloRadConsistencyNAQM, domain=None, range=Optional[float])

slots.gloRadAlphaQM = Slot(uri=NEON.gloRadAlphaQM, name="gloRadAlphaQM", curie=NEON.curie('gloRadAlphaQM'),
                      model_uri=NEON.gloRadAlphaQM, domain=None, range=Optional[float])

slots.gloRadBetaQM = Slot(uri=NEON.gloRadBetaQM, name="gloRadBetaQM", curie=NEON.curie('gloRadBetaQM'),
                      model_uri=NEON.gloRadBetaQM, domain=None, range=Optional[float])

slots.gloRadFinalQF = Slot(uri=NEON.gloRadFinalQF, name="gloRadFinalQF", curie=NEON.curie('gloRadFinalQF'),
                      model_uri=NEON.gloRadFinalQF, domain=None, range=Optional[str])

slots.sunPres = Slot(uri=NEON.sunPres, name="sunPres", curie=NEON.curie('sunPres'),
                      model_uri=NEON.sunPres, domain=None, range=Optional[float])

slots.sunPresNumPts = Slot(uri=NEON.sunPresNumPts, name="sunPresNumPts", curie=NEON.curie('sunPresNumPts'),
                      model_uri=NEON.sunPresNumPts, domain=None, range=Optional[float])

slots.RHMean = Slot(uri=NEON.RHMean, name="RHMean", curie=NEON.curie('RHMean'),
                      model_uri=NEON.RHMean, domain=None, range=Optional[float])

slots.RHMinimum = Slot(uri=NEON.RHMinimum, name="RHMinimum", curie=NEON.curie('RHMinimum'),
                      model_uri=NEON.RHMinimum, domain=None, range=Optional[float])

slots.RHMaximum = Slot(uri=NEON.RHMaximum, name="RHMaximum", curie=NEON.curie('RHMaximum'),
                      model_uri=NEON.RHMaximum, domain=None, range=Optional[float])

slots.RHVariance = Slot(uri=NEON.RHVariance, name="RHVariance", curie=NEON.curie('RHVariance'),
                      model_uri=NEON.RHVariance, domain=None, range=Optional[float])

slots.RHNumPts = Slot(uri=NEON.RHNumPts, name="RHNumPts", curie=NEON.curie('RHNumPts'),
                      model_uri=NEON.RHNumPts, domain=None, range=Optional[float])

slots.RHExpUncert = Slot(uri=NEON.RHExpUncert, name="RHExpUncert", curie=NEON.curie('RHExpUncert'),
                      model_uri=NEON.RHExpUncert, domain=None, range=Optional[float])

slots.RHStdErMean = Slot(uri=NEON.RHStdErMean, name="RHStdErMean", curie=NEON.curie('RHStdErMean'),
                      model_uri=NEON.RHStdErMean, domain=None, range=Optional[float])

slots.RHRangeQAQCRpt = Slot(uri=NEON.RHRangeQAQCRpt, name="RHRangeQAQCRpt", curie=NEON.curie('RHRangeQAQCRpt'),
                      model_uri=NEON.RHRangeQAQCRpt, domain=None, range=Optional[str])

slots.RHPersistenceQAQCRpt = Slot(uri=NEON.RHPersistenceQAQCRpt, name="RHPersistenceQAQCRpt", curie=NEON.curie('RHPersistenceQAQCRpt'),
                      model_uri=NEON.RHPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.RHStepQAQCRpt = Slot(uri=NEON.RHStepQAQCRpt, name="RHStepQAQCRpt", curie=NEON.curie('RHStepQAQCRpt'),
                      model_uri=NEON.RHStepQAQCRpt, domain=None, range=Optional[str])

slots.RHNullQAQCRpt = Slot(uri=NEON.RHNullQAQCRpt, name="RHNullQAQCRpt", curie=NEON.curie('RHNullQAQCRpt'),
                      model_uri=NEON.RHNullQAQCRpt, domain=None, range=Optional[str])

slots.RHGapQAQCRpt = Slot(uri=NEON.RHGapQAQCRpt, name="RHGapQAQCRpt", curie=NEON.curie('RHGapQAQCRpt'),
                      model_uri=NEON.RHGapQAQCRpt, domain=None, range=Optional[str])

slots.RHConsistencyQAQCRpt = Slot(uri=NEON.RHConsistencyQAQCRpt, name="RHConsistencyQAQCRpt", curie=NEON.curie('RHConsistencyQAQCRpt'),
                      model_uri=NEON.RHConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.RHSpikeQAQCRpt = Slot(uri=NEON.RHSpikeQAQCRpt, name="RHSpikeQAQCRpt", curie=NEON.curie('RHSpikeQAQCRpt'),
                      model_uri=NEON.RHSpikeQAQCRpt, domain=None, range=Optional[str])

slots.RHAlphaQAQCRpt = Slot(uri=NEON.RHAlphaQAQCRpt, name="RHAlphaQAQCRpt", curie=NEON.curie('RHAlphaQAQCRpt'),
                      model_uri=NEON.RHAlphaQAQCRpt, domain=None, range=Optional[str])

slots.RHBetaQAQCRpt = Slot(uri=NEON.RHBetaQAQCRpt, name="RHBetaQAQCRpt", curie=NEON.curie('RHBetaQAQCRpt'),
                      model_uri=NEON.RHBetaQAQCRpt, domain=None, range=Optional[str])

slots.RHRangeFailQM = Slot(uri=NEON.RHRangeFailQM, name="RHRangeFailQM", curie=NEON.curie('RHRangeFailQM'),
                      model_uri=NEON.RHRangeFailQM, domain=None, range=Optional[float])

slots.RHRangePassQM = Slot(uri=NEON.RHRangePassQM, name="RHRangePassQM", curie=NEON.curie('RHRangePassQM'),
                      model_uri=NEON.RHRangePassQM, domain=None, range=Optional[float])

slots.RHRangeNAQM = Slot(uri=NEON.RHRangeNAQM, name="RHRangeNAQM", curie=NEON.curie('RHRangeNAQM'),
                      model_uri=NEON.RHRangeNAQM, domain=None, range=Optional[float])

slots.RHPersistenceFailQM = Slot(uri=NEON.RHPersistenceFailQM, name="RHPersistenceFailQM", curie=NEON.curie('RHPersistenceFailQM'),
                      model_uri=NEON.RHPersistenceFailQM, domain=None, range=Optional[float])

slots.RHPersistencePassQM = Slot(uri=NEON.RHPersistencePassQM, name="RHPersistencePassQM", curie=NEON.curie('RHPersistencePassQM'),
                      model_uri=NEON.RHPersistencePassQM, domain=None, range=Optional[float])

slots.RHPersistenceNAQM = Slot(uri=NEON.RHPersistenceNAQM, name="RHPersistenceNAQM", curie=NEON.curie('RHPersistenceNAQM'),
                      model_uri=NEON.RHPersistenceNAQM, domain=None, range=Optional[float])

slots.RHStepFailQM = Slot(uri=NEON.RHStepFailQM, name="RHStepFailQM", curie=NEON.curie('RHStepFailQM'),
                      model_uri=NEON.RHStepFailQM, domain=None, range=Optional[float])

slots.RHStepPassQM = Slot(uri=NEON.RHStepPassQM, name="RHStepPassQM", curie=NEON.curie('RHStepPassQM'),
                      model_uri=NEON.RHStepPassQM, domain=None, range=Optional[float])

slots.RHStepNAQM = Slot(uri=NEON.RHStepNAQM, name="RHStepNAQM", curie=NEON.curie('RHStepNAQM'),
                      model_uri=NEON.RHStepNAQM, domain=None, range=Optional[float])

slots.RHNullFailQM = Slot(uri=NEON.RHNullFailQM, name="RHNullFailQM", curie=NEON.curie('RHNullFailQM'),
                      model_uri=NEON.RHNullFailQM, domain=None, range=Optional[float])

slots.RHNullPassQM = Slot(uri=NEON.RHNullPassQM, name="RHNullPassQM", curie=NEON.curie('RHNullPassQM'),
                      model_uri=NEON.RHNullPassQM, domain=None, range=Optional[float])

slots.RHNullNAQM = Slot(uri=NEON.RHNullNAQM, name="RHNullNAQM", curie=NEON.curie('RHNullNAQM'),
                      model_uri=NEON.RHNullNAQM, domain=None, range=Optional[float])

slots.RHGapFailQM = Slot(uri=NEON.RHGapFailQM, name="RHGapFailQM", curie=NEON.curie('RHGapFailQM'),
                      model_uri=NEON.RHGapFailQM, domain=None, range=Optional[float])

slots.RHGapPassQM = Slot(uri=NEON.RHGapPassQM, name="RHGapPassQM", curie=NEON.curie('RHGapPassQM'),
                      model_uri=NEON.RHGapPassQM, domain=None, range=Optional[float])

slots.RHGapNAQM = Slot(uri=NEON.RHGapNAQM, name="RHGapNAQM", curie=NEON.curie('RHGapNAQM'),
                      model_uri=NEON.RHGapNAQM, domain=None, range=Optional[float])

slots.RHSpikeFailQM = Slot(uri=NEON.RHSpikeFailQM, name="RHSpikeFailQM", curie=NEON.curie('RHSpikeFailQM'),
                      model_uri=NEON.RHSpikeFailQM, domain=None, range=Optional[float])

slots.RHSpikePassQM = Slot(uri=NEON.RHSpikePassQM, name="RHSpikePassQM", curie=NEON.curie('RHSpikePassQM'),
                      model_uri=NEON.RHSpikePassQM, domain=None, range=Optional[float])

slots.RHSpikeNAQM = Slot(uri=NEON.RHSpikeNAQM, name="RHSpikeNAQM", curie=NEON.curie('RHSpikeNAQM'),
                      model_uri=NEON.RHSpikeNAQM, domain=None, range=Optional[float])

slots.RHConsistencyFailQM = Slot(uri=NEON.RHConsistencyFailQM, name="RHConsistencyFailQM", curie=NEON.curie('RHConsistencyFailQM'),
                      model_uri=NEON.RHConsistencyFailQM, domain=None, range=Optional[float])

slots.RHConsistencyPassQM = Slot(uri=NEON.RHConsistencyPassQM, name="RHConsistencyPassQM", curie=NEON.curie('RHConsistencyPassQM'),
                      model_uri=NEON.RHConsistencyPassQM, domain=None, range=Optional[float])

slots.RHConsistencyNAQM = Slot(uri=NEON.RHConsistencyNAQM, name="RHConsistencyNAQM", curie=NEON.curie('RHConsistencyNAQM'),
                      model_uri=NEON.RHConsistencyNAQM, domain=None, range=Optional[float])

slots.RHAlphaQM = Slot(uri=NEON.RHAlphaQM, name="RHAlphaQM", curie=NEON.curie('RHAlphaQM'),
                      model_uri=NEON.RHAlphaQM, domain=None, range=Optional[float])

slots.RHBetaQM = Slot(uri=NEON.RHBetaQM, name="RHBetaQM", curie=NEON.curie('RHBetaQM'),
                      model_uri=NEON.RHBetaQM, domain=None, range=Optional[float])

slots.RHFinalQF = Slot(uri=NEON.RHFinalQF, name="RHFinalQF", curie=NEON.curie('RHFinalQF'),
                      model_uri=NEON.RHFinalQF, domain=None, range=Optional[str])

slots.tempRHMean = Slot(uri=NEON.tempRHMean, name="tempRHMean", curie=NEON.curie('tempRHMean'),
                      model_uri=NEON.tempRHMean, domain=None, range=Optional[float])

slots.tempRHMinimum = Slot(uri=NEON.tempRHMinimum, name="tempRHMinimum", curie=NEON.curie('tempRHMinimum'),
                      model_uri=NEON.tempRHMinimum, domain=None, range=Optional[float])

slots.tempRHMaximum = Slot(uri=NEON.tempRHMaximum, name="tempRHMaximum", curie=NEON.curie('tempRHMaximum'),
                      model_uri=NEON.tempRHMaximum, domain=None, range=Optional[float])

slots.tempRHVariance = Slot(uri=NEON.tempRHVariance, name="tempRHVariance", curie=NEON.curie('tempRHVariance'),
                      model_uri=NEON.tempRHVariance, domain=None, range=Optional[float])

slots.tempRHNumPts = Slot(uri=NEON.tempRHNumPts, name="tempRHNumPts", curie=NEON.curie('tempRHNumPts'),
                      model_uri=NEON.tempRHNumPts, domain=None, range=Optional[float])

slots.tempRHExpUncert = Slot(uri=NEON.tempRHExpUncert, name="tempRHExpUncert", curie=NEON.curie('tempRHExpUncert'),
                      model_uri=NEON.tempRHExpUncert, domain=None, range=Optional[float])

slots.tempRHStdErMean = Slot(uri=NEON.tempRHStdErMean, name="tempRHStdErMean", curie=NEON.curie('tempRHStdErMean'),
                      model_uri=NEON.tempRHStdErMean, domain=None, range=Optional[float])

slots.tempRHRangeQAQCRpt = Slot(uri=NEON.tempRHRangeQAQCRpt, name="tempRHRangeQAQCRpt", curie=NEON.curie('tempRHRangeQAQCRpt'),
                      model_uri=NEON.tempRHRangeQAQCRpt, domain=None, range=Optional[str])

slots.tempRHPersistenceQAQCRpt = Slot(uri=NEON.tempRHPersistenceQAQCRpt, name="tempRHPersistenceQAQCRpt", curie=NEON.curie('tempRHPersistenceQAQCRpt'),
                      model_uri=NEON.tempRHPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.tempRHStepQAQCRpt = Slot(uri=NEON.tempRHStepQAQCRpt, name="tempRHStepQAQCRpt", curie=NEON.curie('tempRHStepQAQCRpt'),
                      model_uri=NEON.tempRHStepQAQCRpt, domain=None, range=Optional[str])

slots.tempRHNullQAQCRpt = Slot(uri=NEON.tempRHNullQAQCRpt, name="tempRHNullQAQCRpt", curie=NEON.curie('tempRHNullQAQCRpt'),
                      model_uri=NEON.tempRHNullQAQCRpt, domain=None, range=Optional[str])

slots.tempRHGapQAQCRpt = Slot(uri=NEON.tempRHGapQAQCRpt, name="tempRHGapQAQCRpt", curie=NEON.curie('tempRHGapQAQCRpt'),
                      model_uri=NEON.tempRHGapQAQCRpt, domain=None, range=Optional[str])

slots.tempRHConsistencyQAQCRpt = Slot(uri=NEON.tempRHConsistencyQAQCRpt, name="tempRHConsistencyQAQCRpt", curie=NEON.curie('tempRHConsistencyQAQCRpt'),
                      model_uri=NEON.tempRHConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.tempRHSpikeQAQCRpt = Slot(uri=NEON.tempRHSpikeQAQCRpt, name="tempRHSpikeQAQCRpt", curie=NEON.curie('tempRHSpikeQAQCRpt'),
                      model_uri=NEON.tempRHSpikeQAQCRpt, domain=None, range=Optional[str])

slots.tempRHAlphaQAQCRpt = Slot(uri=NEON.tempRHAlphaQAQCRpt, name="tempRHAlphaQAQCRpt", curie=NEON.curie('tempRHAlphaQAQCRpt'),
                      model_uri=NEON.tempRHAlphaQAQCRpt, domain=None, range=Optional[str])

slots.tempRHBetaQAQCRpt = Slot(uri=NEON.tempRHBetaQAQCRpt, name="tempRHBetaQAQCRpt", curie=NEON.curie('tempRHBetaQAQCRpt'),
                      model_uri=NEON.tempRHBetaQAQCRpt, domain=None, range=Optional[str])

slots.tempRHRangeFailQM = Slot(uri=NEON.tempRHRangeFailQM, name="tempRHRangeFailQM", curie=NEON.curie('tempRHRangeFailQM'),
                      model_uri=NEON.tempRHRangeFailQM, domain=None, range=Optional[float])

slots.tempRHRangePassQM = Slot(uri=NEON.tempRHRangePassQM, name="tempRHRangePassQM", curie=NEON.curie('tempRHRangePassQM'),
                      model_uri=NEON.tempRHRangePassQM, domain=None, range=Optional[float])

slots.tempRHRangeNAQM = Slot(uri=NEON.tempRHRangeNAQM, name="tempRHRangeNAQM", curie=NEON.curie('tempRHRangeNAQM'),
                      model_uri=NEON.tempRHRangeNAQM, domain=None, range=Optional[float])

slots.tempRHPersistenceFailQM = Slot(uri=NEON.tempRHPersistenceFailQM, name="tempRHPersistenceFailQM", curie=NEON.curie('tempRHPersistenceFailQM'),
                      model_uri=NEON.tempRHPersistenceFailQM, domain=None, range=Optional[float])

slots.tempRHPersistencePassQM = Slot(uri=NEON.tempRHPersistencePassQM, name="tempRHPersistencePassQM", curie=NEON.curie('tempRHPersistencePassQM'),
                      model_uri=NEON.tempRHPersistencePassQM, domain=None, range=Optional[float])

slots.tempRHPersistenceNAQM = Slot(uri=NEON.tempRHPersistenceNAQM, name="tempRHPersistenceNAQM", curie=NEON.curie('tempRHPersistenceNAQM'),
                      model_uri=NEON.tempRHPersistenceNAQM, domain=None, range=Optional[float])

slots.tempRHStepFailQM = Slot(uri=NEON.tempRHStepFailQM, name="tempRHStepFailQM", curie=NEON.curie('tempRHStepFailQM'),
                      model_uri=NEON.tempRHStepFailQM, domain=None, range=Optional[float])

slots.tempRHStepPassQM = Slot(uri=NEON.tempRHStepPassQM, name="tempRHStepPassQM", curie=NEON.curie('tempRHStepPassQM'),
                      model_uri=NEON.tempRHStepPassQM, domain=None, range=Optional[float])

slots.tempRHStepNAQM = Slot(uri=NEON.tempRHStepNAQM, name="tempRHStepNAQM", curie=NEON.curie('tempRHStepNAQM'),
                      model_uri=NEON.tempRHStepNAQM, domain=None, range=Optional[float])

slots.tempRHNullFailQM = Slot(uri=NEON.tempRHNullFailQM, name="tempRHNullFailQM", curie=NEON.curie('tempRHNullFailQM'),
                      model_uri=NEON.tempRHNullFailQM, domain=None, range=Optional[float])

slots.tempRHNullPassQM = Slot(uri=NEON.tempRHNullPassQM, name="tempRHNullPassQM", curie=NEON.curie('tempRHNullPassQM'),
                      model_uri=NEON.tempRHNullPassQM, domain=None, range=Optional[float])

slots.tempRHNullNAQM = Slot(uri=NEON.tempRHNullNAQM, name="tempRHNullNAQM", curie=NEON.curie('tempRHNullNAQM'),
                      model_uri=NEON.tempRHNullNAQM, domain=None, range=Optional[float])

slots.tempRHGapFailQM = Slot(uri=NEON.tempRHGapFailQM, name="tempRHGapFailQM", curie=NEON.curie('tempRHGapFailQM'),
                      model_uri=NEON.tempRHGapFailQM, domain=None, range=Optional[float])

slots.tempRHGapPassQM = Slot(uri=NEON.tempRHGapPassQM, name="tempRHGapPassQM", curie=NEON.curie('tempRHGapPassQM'),
                      model_uri=NEON.tempRHGapPassQM, domain=None, range=Optional[float])

slots.tempRHGapNAQM = Slot(uri=NEON.tempRHGapNAQM, name="tempRHGapNAQM", curie=NEON.curie('tempRHGapNAQM'),
                      model_uri=NEON.tempRHGapNAQM, domain=None, range=Optional[float])

slots.tempRHSpikeFailQM = Slot(uri=NEON.tempRHSpikeFailQM, name="tempRHSpikeFailQM", curie=NEON.curie('tempRHSpikeFailQM'),
                      model_uri=NEON.tempRHSpikeFailQM, domain=None, range=Optional[float])

slots.tempRHSpikePassQM = Slot(uri=NEON.tempRHSpikePassQM, name="tempRHSpikePassQM", curie=NEON.curie('tempRHSpikePassQM'),
                      model_uri=NEON.tempRHSpikePassQM, domain=None, range=Optional[float])

slots.tempRHSpikeNAQM = Slot(uri=NEON.tempRHSpikeNAQM, name="tempRHSpikeNAQM", curie=NEON.curie('tempRHSpikeNAQM'),
                      model_uri=NEON.tempRHSpikeNAQM, domain=None, range=Optional[float])

slots.tempRHConsistencyFailQM = Slot(uri=NEON.tempRHConsistencyFailQM, name="tempRHConsistencyFailQM", curie=NEON.curie('tempRHConsistencyFailQM'),
                      model_uri=NEON.tempRHConsistencyFailQM, domain=None, range=Optional[float])

slots.tempRHConsistencyPassQM = Slot(uri=NEON.tempRHConsistencyPassQM, name="tempRHConsistencyPassQM", curie=NEON.curie('tempRHConsistencyPassQM'),
                      model_uri=NEON.tempRHConsistencyPassQM, domain=None, range=Optional[float])

slots.tempRHConsistencyNAQM = Slot(uri=NEON.tempRHConsistencyNAQM, name="tempRHConsistencyNAQM", curie=NEON.curie('tempRHConsistencyNAQM'),
                      model_uri=NEON.tempRHConsistencyNAQM, domain=None, range=Optional[float])

slots.tempRHAlphaQM = Slot(uri=NEON.tempRHAlphaQM, name="tempRHAlphaQM", curie=NEON.curie('tempRHAlphaQM'),
                      model_uri=NEON.tempRHAlphaQM, domain=None, range=Optional[float])

slots.tempRHBetaQM = Slot(uri=NEON.tempRHBetaQM, name="tempRHBetaQM", curie=NEON.curie('tempRHBetaQM'),
                      model_uri=NEON.tempRHBetaQM, domain=None, range=Optional[float])

slots.tempRHFinalQF = Slot(uri=NEON.tempRHFinalQF, name="tempRHFinalQF", curie=NEON.curie('tempRHFinalQF'),
                      model_uri=NEON.tempRHFinalQF, domain=None, range=Optional[str])

slots.dewTempMean = Slot(uri=NEON.dewTempMean, name="dewTempMean", curie=NEON.curie('dewTempMean'),
                      model_uri=NEON.dewTempMean, domain=None, range=Optional[float])

slots.dewTempMinimum = Slot(uri=NEON.dewTempMinimum, name="dewTempMinimum", curie=NEON.curie('dewTempMinimum'),
                      model_uri=NEON.dewTempMinimum, domain=None, range=Optional[float])

slots.dewTempMaximum = Slot(uri=NEON.dewTempMaximum, name="dewTempMaximum", curie=NEON.curie('dewTempMaximum'),
                      model_uri=NEON.dewTempMaximum, domain=None, range=Optional[float])

slots.dewTempVariance = Slot(uri=NEON.dewTempVariance, name="dewTempVariance", curie=NEON.curie('dewTempVariance'),
                      model_uri=NEON.dewTempVariance, domain=None, range=Optional[float])

slots.dewTempNumPts = Slot(uri=NEON.dewTempNumPts, name="dewTempNumPts", curie=NEON.curie('dewTempNumPts'),
                      model_uri=NEON.dewTempNumPts, domain=None, range=Optional[float])

slots.dewTempExpUncert = Slot(uri=NEON.dewTempExpUncert, name="dewTempExpUncert", curie=NEON.curie('dewTempExpUncert'),
                      model_uri=NEON.dewTempExpUncert, domain=None, range=Optional[float])

slots.dewTempStdErMean = Slot(uri=NEON.dewTempStdErMean, name="dewTempStdErMean", curie=NEON.curie('dewTempStdErMean'),
                      model_uri=NEON.dewTempStdErMean, domain=None, range=Optional[float])

slots.dewTempRangeQAQCRpt = Slot(uri=NEON.dewTempRangeQAQCRpt, name="dewTempRangeQAQCRpt", curie=NEON.curie('dewTempRangeQAQCRpt'),
                      model_uri=NEON.dewTempRangeQAQCRpt, domain=None, range=Optional[str])

slots.dewTempPersistenceQAQCRpt = Slot(uri=NEON.dewTempPersistenceQAQCRpt, name="dewTempPersistenceQAQCRpt", curie=NEON.curie('dewTempPersistenceQAQCRpt'),
                      model_uri=NEON.dewTempPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.dewTempStepQAQCRpt = Slot(uri=NEON.dewTempStepQAQCRpt, name="dewTempStepQAQCRpt", curie=NEON.curie('dewTempStepQAQCRpt'),
                      model_uri=NEON.dewTempStepQAQCRpt, domain=None, range=Optional[str])

slots.dewTempNullQAQCRpt = Slot(uri=NEON.dewTempNullQAQCRpt, name="dewTempNullQAQCRpt", curie=NEON.curie('dewTempNullQAQCRpt'),
                      model_uri=NEON.dewTempNullQAQCRpt, domain=None, range=Optional[str])

slots.dewTempGapQAQCRpt = Slot(uri=NEON.dewTempGapQAQCRpt, name="dewTempGapQAQCRpt", curie=NEON.curie('dewTempGapQAQCRpt'),
                      model_uri=NEON.dewTempGapQAQCRpt, domain=None, range=Optional[str])

slots.dewTempConsistencyQAQCRpt = Slot(uri=NEON.dewTempConsistencyQAQCRpt, name="dewTempConsistencyQAQCRpt", curie=NEON.curie('dewTempConsistencyQAQCRpt'),
                      model_uri=NEON.dewTempConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.dewTempSpikeQAQCRpt = Slot(uri=NEON.dewTempSpikeQAQCRpt, name="dewTempSpikeQAQCRpt", curie=NEON.curie('dewTempSpikeQAQCRpt'),
                      model_uri=NEON.dewTempSpikeQAQCRpt, domain=None, range=Optional[str])

slots.dewTempAlphaQAQCRpt = Slot(uri=NEON.dewTempAlphaQAQCRpt, name="dewTempAlphaQAQCRpt", curie=NEON.curie('dewTempAlphaQAQCRpt'),
                      model_uri=NEON.dewTempAlphaQAQCRpt, domain=None, range=Optional[str])

slots.dewTempBetaQAQCRpt = Slot(uri=NEON.dewTempBetaQAQCRpt, name="dewTempBetaQAQCRpt", curie=NEON.curie('dewTempBetaQAQCRpt'),
                      model_uri=NEON.dewTempBetaQAQCRpt, domain=None, range=Optional[str])

slots.dewTempRangeFailQM = Slot(uri=NEON.dewTempRangeFailQM, name="dewTempRangeFailQM", curie=NEON.curie('dewTempRangeFailQM'),
                      model_uri=NEON.dewTempRangeFailQM, domain=None, range=Optional[float])

slots.dewTempRangePassQM = Slot(uri=NEON.dewTempRangePassQM, name="dewTempRangePassQM", curie=NEON.curie('dewTempRangePassQM'),
                      model_uri=NEON.dewTempRangePassQM, domain=None, range=Optional[float])

slots.dewTempRangeNAQM = Slot(uri=NEON.dewTempRangeNAQM, name="dewTempRangeNAQM", curie=NEON.curie('dewTempRangeNAQM'),
                      model_uri=NEON.dewTempRangeNAQM, domain=None, range=Optional[float])

slots.dewTempPersistenceFailQM = Slot(uri=NEON.dewTempPersistenceFailQM, name="dewTempPersistenceFailQM", curie=NEON.curie('dewTempPersistenceFailQM'),
                      model_uri=NEON.dewTempPersistenceFailQM, domain=None, range=Optional[float])

slots.dewTempPersistencePassQM = Slot(uri=NEON.dewTempPersistencePassQM, name="dewTempPersistencePassQM", curie=NEON.curie('dewTempPersistencePassQM'),
                      model_uri=NEON.dewTempPersistencePassQM, domain=None, range=Optional[float])

slots.dewTempPersistenceNAQM = Slot(uri=NEON.dewTempPersistenceNAQM, name="dewTempPersistenceNAQM", curie=NEON.curie('dewTempPersistenceNAQM'),
                      model_uri=NEON.dewTempPersistenceNAQM, domain=None, range=Optional[float])

slots.dewTempStepFailQM = Slot(uri=NEON.dewTempStepFailQM, name="dewTempStepFailQM", curie=NEON.curie('dewTempStepFailQM'),
                      model_uri=NEON.dewTempStepFailQM, domain=None, range=Optional[float])

slots.dewTempStepPassQM = Slot(uri=NEON.dewTempStepPassQM, name="dewTempStepPassQM", curie=NEON.curie('dewTempStepPassQM'),
                      model_uri=NEON.dewTempStepPassQM, domain=None, range=Optional[float])

slots.dewTempStepNAQM = Slot(uri=NEON.dewTempStepNAQM, name="dewTempStepNAQM", curie=NEON.curie('dewTempStepNAQM'),
                      model_uri=NEON.dewTempStepNAQM, domain=None, range=Optional[float])

slots.dewTempNullFailQM = Slot(uri=NEON.dewTempNullFailQM, name="dewTempNullFailQM", curie=NEON.curie('dewTempNullFailQM'),
                      model_uri=NEON.dewTempNullFailQM, domain=None, range=Optional[float])

slots.dewTempNullPassQM = Slot(uri=NEON.dewTempNullPassQM, name="dewTempNullPassQM", curie=NEON.curie('dewTempNullPassQM'),
                      model_uri=NEON.dewTempNullPassQM, domain=None, range=Optional[float])

slots.dewTempNullNAQM = Slot(uri=NEON.dewTempNullNAQM, name="dewTempNullNAQM", curie=NEON.curie('dewTempNullNAQM'),
                      model_uri=NEON.dewTempNullNAQM, domain=None, range=Optional[float])

slots.dewTempGapFailQM = Slot(uri=NEON.dewTempGapFailQM, name="dewTempGapFailQM", curie=NEON.curie('dewTempGapFailQM'),
                      model_uri=NEON.dewTempGapFailQM, domain=None, range=Optional[float])

slots.dewTempGapPassQM = Slot(uri=NEON.dewTempGapPassQM, name="dewTempGapPassQM", curie=NEON.curie('dewTempGapPassQM'),
                      model_uri=NEON.dewTempGapPassQM, domain=None, range=Optional[float])

slots.dewTempGapNAQM = Slot(uri=NEON.dewTempGapNAQM, name="dewTempGapNAQM", curie=NEON.curie('dewTempGapNAQM'),
                      model_uri=NEON.dewTempGapNAQM, domain=None, range=Optional[float])

slots.dewTempSpikeFailQM = Slot(uri=NEON.dewTempSpikeFailQM, name="dewTempSpikeFailQM", curie=NEON.curie('dewTempSpikeFailQM'),
                      model_uri=NEON.dewTempSpikeFailQM, domain=None, range=Optional[float])

slots.dewTempSpikePassQM = Slot(uri=NEON.dewTempSpikePassQM, name="dewTempSpikePassQM", curie=NEON.curie('dewTempSpikePassQM'),
                      model_uri=NEON.dewTempSpikePassQM, domain=None, range=Optional[float])

slots.dewTempSpikeNAQM = Slot(uri=NEON.dewTempSpikeNAQM, name="dewTempSpikeNAQM", curie=NEON.curie('dewTempSpikeNAQM'),
                      model_uri=NEON.dewTempSpikeNAQM, domain=None, range=Optional[float])

slots.dewTempConsistencyFailQM = Slot(uri=NEON.dewTempConsistencyFailQM, name="dewTempConsistencyFailQM", curie=NEON.curie('dewTempConsistencyFailQM'),
                      model_uri=NEON.dewTempConsistencyFailQM, domain=None, range=Optional[float])

slots.dewTempConsistencyPassQM = Slot(uri=NEON.dewTempConsistencyPassQM, name="dewTempConsistencyPassQM", curie=NEON.curie('dewTempConsistencyPassQM'),
                      model_uri=NEON.dewTempConsistencyPassQM, domain=None, range=Optional[float])

slots.dewTempConsistencyNAQM = Slot(uri=NEON.dewTempConsistencyNAQM, name="dewTempConsistencyNAQM", curie=NEON.curie('dewTempConsistencyNAQM'),
                      model_uri=NEON.dewTempConsistencyNAQM, domain=None, range=Optional[float])

slots.dewTempAlphaQM = Slot(uri=NEON.dewTempAlphaQM, name="dewTempAlphaQM", curie=NEON.curie('dewTempAlphaQM'),
                      model_uri=NEON.dewTempAlphaQM, domain=None, range=Optional[float])

slots.dewTempBetaQM = Slot(uri=NEON.dewTempBetaQM, name="dewTempBetaQM", curie=NEON.curie('dewTempBetaQM'),
                      model_uri=NEON.dewTempBetaQM, domain=None, range=Optional[float])

slots.dewTempFinalQF = Slot(uri=NEON.dewTempFinalQF, name="dewTempFinalQF", curie=NEON.curie('dewTempFinalQF'),
                      model_uri=NEON.dewTempFinalQF, domain=None, range=Optional[str])

slots.inSWMean = Slot(uri=NEON.inSWMean, name="inSWMean", curie=NEON.curie('inSWMean'),
                      model_uri=NEON.inSWMean, domain=None, range=Optional[float])

slots.inSWMinimum = Slot(uri=NEON.inSWMinimum, name="inSWMinimum", curie=NEON.curie('inSWMinimum'),
                      model_uri=NEON.inSWMinimum, domain=None, range=Optional[float])

slots.inSWMaximum = Slot(uri=NEON.inSWMaximum, name="inSWMaximum", curie=NEON.curie('inSWMaximum'),
                      model_uri=NEON.inSWMaximum, domain=None, range=Optional[float])

slots.inSWVariance = Slot(uri=NEON.inSWVariance, name="inSWVariance", curie=NEON.curie('inSWVariance'),
                      model_uri=NEON.inSWVariance, domain=None, range=Optional[float])

slots.inSWNumPts = Slot(uri=NEON.inSWNumPts, name="inSWNumPts", curie=NEON.curie('inSWNumPts'),
                      model_uri=NEON.inSWNumPts, domain=None, range=Optional[float])

slots.inSWExpUncert = Slot(uri=NEON.inSWExpUncert, name="inSWExpUncert", curie=NEON.curie('inSWExpUncert'),
                      model_uri=NEON.inSWExpUncert, domain=None, range=Optional[float])

slots.inSWStdErMean = Slot(uri=NEON.inSWStdErMean, name="inSWStdErMean", curie=NEON.curie('inSWStdErMean'),
                      model_uri=NEON.inSWStdErMean, domain=None, range=Optional[float])

slots.inSWRangeQAQCRpt = Slot(uri=NEON.inSWRangeQAQCRpt, name="inSWRangeQAQCRpt", curie=NEON.curie('inSWRangeQAQCRpt'),
                      model_uri=NEON.inSWRangeQAQCRpt, domain=None, range=Optional[str])

slots.inSWPersistenceQAQCRpt = Slot(uri=NEON.inSWPersistenceQAQCRpt, name="inSWPersistenceQAQCRpt", curie=NEON.curie('inSWPersistenceQAQCRpt'),
                      model_uri=NEON.inSWPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.inSWStepQAQCRpt = Slot(uri=NEON.inSWStepQAQCRpt, name="inSWStepQAQCRpt", curie=NEON.curie('inSWStepQAQCRpt'),
                      model_uri=NEON.inSWStepQAQCRpt, domain=None, range=Optional[str])

slots.inSWNullQAQCRpt = Slot(uri=NEON.inSWNullQAQCRpt, name="inSWNullQAQCRpt", curie=NEON.curie('inSWNullQAQCRpt'),
                      model_uri=NEON.inSWNullQAQCRpt, domain=None, range=Optional[str])

slots.inSWGapQAQCRpt = Slot(uri=NEON.inSWGapQAQCRpt, name="inSWGapQAQCRpt", curie=NEON.curie('inSWGapQAQCRpt'),
                      model_uri=NEON.inSWGapQAQCRpt, domain=None, range=Optional[str])

slots.inSWConsistencyQAQCRpt = Slot(uri=NEON.inSWConsistencyQAQCRpt, name="inSWConsistencyQAQCRpt", curie=NEON.curie('inSWConsistencyQAQCRpt'),
                      model_uri=NEON.inSWConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.inSWSpikeQAQCRpt = Slot(uri=NEON.inSWSpikeQAQCRpt, name="inSWSpikeQAQCRpt", curie=NEON.curie('inSWSpikeQAQCRpt'),
                      model_uri=NEON.inSWSpikeQAQCRpt, domain=None, range=Optional[str])

slots.inSWAlphaQAQCRpt = Slot(uri=NEON.inSWAlphaQAQCRpt, name="inSWAlphaQAQCRpt", curie=NEON.curie('inSWAlphaQAQCRpt'),
                      model_uri=NEON.inSWAlphaQAQCRpt, domain=None, range=Optional[str])

slots.inSWBetaQAQCRpt = Slot(uri=NEON.inSWBetaQAQCRpt, name="inSWBetaQAQCRpt", curie=NEON.curie('inSWBetaQAQCRpt'),
                      model_uri=NEON.inSWBetaQAQCRpt, domain=None, range=Optional[str])

slots.inSWRangeFailQM = Slot(uri=NEON.inSWRangeFailQM, name="inSWRangeFailQM", curie=NEON.curie('inSWRangeFailQM'),
                      model_uri=NEON.inSWRangeFailQM, domain=None, range=Optional[float])

slots.inSWRangePassQM = Slot(uri=NEON.inSWRangePassQM, name="inSWRangePassQM", curie=NEON.curie('inSWRangePassQM'),
                      model_uri=NEON.inSWRangePassQM, domain=None, range=Optional[float])

slots.inSWRangeNAQM = Slot(uri=NEON.inSWRangeNAQM, name="inSWRangeNAQM", curie=NEON.curie('inSWRangeNAQM'),
                      model_uri=NEON.inSWRangeNAQM, domain=None, range=Optional[float])

slots.inSWPersistenceFailQM = Slot(uri=NEON.inSWPersistenceFailQM, name="inSWPersistenceFailQM", curie=NEON.curie('inSWPersistenceFailQM'),
                      model_uri=NEON.inSWPersistenceFailQM, domain=None, range=Optional[float])

slots.inSWPersistencePassQM = Slot(uri=NEON.inSWPersistencePassQM, name="inSWPersistencePassQM", curie=NEON.curie('inSWPersistencePassQM'),
                      model_uri=NEON.inSWPersistencePassQM, domain=None, range=Optional[float])

slots.inSWPersistenceNAQM = Slot(uri=NEON.inSWPersistenceNAQM, name="inSWPersistenceNAQM", curie=NEON.curie('inSWPersistenceNAQM'),
                      model_uri=NEON.inSWPersistenceNAQM, domain=None, range=Optional[float])

slots.inSWStepFailQM = Slot(uri=NEON.inSWStepFailQM, name="inSWStepFailQM", curie=NEON.curie('inSWStepFailQM'),
                      model_uri=NEON.inSWStepFailQM, domain=None, range=Optional[float])

slots.inSWStepPassQM = Slot(uri=NEON.inSWStepPassQM, name="inSWStepPassQM", curie=NEON.curie('inSWStepPassQM'),
                      model_uri=NEON.inSWStepPassQM, domain=None, range=Optional[float])

slots.inSWStepNAQM = Slot(uri=NEON.inSWStepNAQM, name="inSWStepNAQM", curie=NEON.curie('inSWStepNAQM'),
                      model_uri=NEON.inSWStepNAQM, domain=None, range=Optional[float])

slots.inSWNullFailQM = Slot(uri=NEON.inSWNullFailQM, name="inSWNullFailQM", curie=NEON.curie('inSWNullFailQM'),
                      model_uri=NEON.inSWNullFailQM, domain=None, range=Optional[float])

slots.inSWNullPassQM = Slot(uri=NEON.inSWNullPassQM, name="inSWNullPassQM", curie=NEON.curie('inSWNullPassQM'),
                      model_uri=NEON.inSWNullPassQM, domain=None, range=Optional[float])

slots.inSWNullNAQM = Slot(uri=NEON.inSWNullNAQM, name="inSWNullNAQM", curie=NEON.curie('inSWNullNAQM'),
                      model_uri=NEON.inSWNullNAQM, domain=None, range=Optional[float])

slots.inSWGapFailQM = Slot(uri=NEON.inSWGapFailQM, name="inSWGapFailQM", curie=NEON.curie('inSWGapFailQM'),
                      model_uri=NEON.inSWGapFailQM, domain=None, range=Optional[float])

slots.inSWGapPassQM = Slot(uri=NEON.inSWGapPassQM, name="inSWGapPassQM", curie=NEON.curie('inSWGapPassQM'),
                      model_uri=NEON.inSWGapPassQM, domain=None, range=Optional[float])

slots.inSWGapNAQM = Slot(uri=NEON.inSWGapNAQM, name="inSWGapNAQM", curie=NEON.curie('inSWGapNAQM'),
                      model_uri=NEON.inSWGapNAQM, domain=None, range=Optional[float])

slots.inSWSpikeFailQM = Slot(uri=NEON.inSWSpikeFailQM, name="inSWSpikeFailQM", curie=NEON.curie('inSWSpikeFailQM'),
                      model_uri=NEON.inSWSpikeFailQM, domain=None, range=Optional[float])

slots.inSWSpikePassQM = Slot(uri=NEON.inSWSpikePassQM, name="inSWSpikePassQM", curie=NEON.curie('inSWSpikePassQM'),
                      model_uri=NEON.inSWSpikePassQM, domain=None, range=Optional[float])

slots.inSWSpikeNAQM = Slot(uri=NEON.inSWSpikeNAQM, name="inSWSpikeNAQM", curie=NEON.curie('inSWSpikeNAQM'),
                      model_uri=NEON.inSWSpikeNAQM, domain=None, range=Optional[float])

slots.inSWConsistencyFailQM = Slot(uri=NEON.inSWConsistencyFailQM, name="inSWConsistencyFailQM", curie=NEON.curie('inSWConsistencyFailQM'),
                      model_uri=NEON.inSWConsistencyFailQM, domain=None, range=Optional[float])

slots.inSWConsistencyPassQM = Slot(uri=NEON.inSWConsistencyPassQM, name="inSWConsistencyPassQM", curie=NEON.curie('inSWConsistencyPassQM'),
                      model_uri=NEON.inSWConsistencyPassQM, domain=None, range=Optional[float])

slots.inSWConsistencyNAQM = Slot(uri=NEON.inSWConsistencyNAQM, name="inSWConsistencyNAQM", curie=NEON.curie('inSWConsistencyNAQM'),
                      model_uri=NEON.inSWConsistencyNAQM, domain=None, range=Optional[float])

slots.inSWAlphaQM = Slot(uri=NEON.inSWAlphaQM, name="inSWAlphaQM", curie=NEON.curie('inSWAlphaQM'),
                      model_uri=NEON.inSWAlphaQM, domain=None, range=Optional[float])

slots.inSWBetaQM = Slot(uri=NEON.inSWBetaQM, name="inSWBetaQM", curie=NEON.curie('inSWBetaQM'),
                      model_uri=NEON.inSWBetaQM, domain=None, range=Optional[float])

slots.inSWFinalQF = Slot(uri=NEON.inSWFinalQF, name="inSWFinalQF", curie=NEON.curie('inSWFinalQF'),
                      model_uri=NEON.inSWFinalQF, domain=None, range=Optional[str])

slots.outSWMean = Slot(uri=NEON.outSWMean, name="outSWMean", curie=NEON.curie('outSWMean'),
                      model_uri=NEON.outSWMean, domain=None, range=Optional[float])

slots.outSWMinimum = Slot(uri=NEON.outSWMinimum, name="outSWMinimum", curie=NEON.curie('outSWMinimum'),
                      model_uri=NEON.outSWMinimum, domain=None, range=Optional[float])

slots.outSWMaximum = Slot(uri=NEON.outSWMaximum, name="outSWMaximum", curie=NEON.curie('outSWMaximum'),
                      model_uri=NEON.outSWMaximum, domain=None, range=Optional[float])

slots.outSWVariance = Slot(uri=NEON.outSWVariance, name="outSWVariance", curie=NEON.curie('outSWVariance'),
                      model_uri=NEON.outSWVariance, domain=None, range=Optional[float])

slots.outSWNumPts = Slot(uri=NEON.outSWNumPts, name="outSWNumPts", curie=NEON.curie('outSWNumPts'),
                      model_uri=NEON.outSWNumPts, domain=None, range=Optional[float])

slots.outSWExpUncert = Slot(uri=NEON.outSWExpUncert, name="outSWExpUncert", curie=NEON.curie('outSWExpUncert'),
                      model_uri=NEON.outSWExpUncert, domain=None, range=Optional[float])

slots.outSWStdErMean = Slot(uri=NEON.outSWStdErMean, name="outSWStdErMean", curie=NEON.curie('outSWStdErMean'),
                      model_uri=NEON.outSWStdErMean, domain=None, range=Optional[float])

slots.outSWRangeQAQCRpt = Slot(uri=NEON.outSWRangeQAQCRpt, name="outSWRangeQAQCRpt", curie=NEON.curie('outSWRangeQAQCRpt'),
                      model_uri=NEON.outSWRangeQAQCRpt, domain=None, range=Optional[str])

slots.outSWPersistenceQAQCRpt = Slot(uri=NEON.outSWPersistenceQAQCRpt, name="outSWPersistenceQAQCRpt", curie=NEON.curie('outSWPersistenceQAQCRpt'),
                      model_uri=NEON.outSWPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.outSWStepQAQCRpt = Slot(uri=NEON.outSWStepQAQCRpt, name="outSWStepQAQCRpt", curie=NEON.curie('outSWStepQAQCRpt'),
                      model_uri=NEON.outSWStepQAQCRpt, domain=None, range=Optional[str])

slots.outSWNullQAQCRpt = Slot(uri=NEON.outSWNullQAQCRpt, name="outSWNullQAQCRpt", curie=NEON.curie('outSWNullQAQCRpt'),
                      model_uri=NEON.outSWNullQAQCRpt, domain=None, range=Optional[str])

slots.outSWGapQAQCRpt = Slot(uri=NEON.outSWGapQAQCRpt, name="outSWGapQAQCRpt", curie=NEON.curie('outSWGapQAQCRpt'),
                      model_uri=NEON.outSWGapQAQCRpt, domain=None, range=Optional[str])

slots.outSWConsistencyQAQCRpt = Slot(uri=NEON.outSWConsistencyQAQCRpt, name="outSWConsistencyQAQCRpt", curie=NEON.curie('outSWConsistencyQAQCRpt'),
                      model_uri=NEON.outSWConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.outSWSpikeQAQCRpt = Slot(uri=NEON.outSWSpikeQAQCRpt, name="outSWSpikeQAQCRpt", curie=NEON.curie('outSWSpikeQAQCRpt'),
                      model_uri=NEON.outSWSpikeQAQCRpt, domain=None, range=Optional[str])

slots.outSWAlphaQAQCRpt = Slot(uri=NEON.outSWAlphaQAQCRpt, name="outSWAlphaQAQCRpt", curie=NEON.curie('outSWAlphaQAQCRpt'),
                      model_uri=NEON.outSWAlphaQAQCRpt, domain=None, range=Optional[str])

slots.outSWBetaQAQCRpt = Slot(uri=NEON.outSWBetaQAQCRpt, name="outSWBetaQAQCRpt", curie=NEON.curie('outSWBetaQAQCRpt'),
                      model_uri=NEON.outSWBetaQAQCRpt, domain=None, range=Optional[str])

slots.outSWRangeFailQM = Slot(uri=NEON.outSWRangeFailQM, name="outSWRangeFailQM", curie=NEON.curie('outSWRangeFailQM'),
                      model_uri=NEON.outSWRangeFailQM, domain=None, range=Optional[float])

slots.outSWRangePassQM = Slot(uri=NEON.outSWRangePassQM, name="outSWRangePassQM", curie=NEON.curie('outSWRangePassQM'),
                      model_uri=NEON.outSWRangePassQM, domain=None, range=Optional[float])

slots.outSWRangeNAQM = Slot(uri=NEON.outSWRangeNAQM, name="outSWRangeNAQM", curie=NEON.curie('outSWRangeNAQM'),
                      model_uri=NEON.outSWRangeNAQM, domain=None, range=Optional[float])

slots.outSWPersistenceFailQM = Slot(uri=NEON.outSWPersistenceFailQM, name="outSWPersistenceFailQM", curie=NEON.curie('outSWPersistenceFailQM'),
                      model_uri=NEON.outSWPersistenceFailQM, domain=None, range=Optional[float])

slots.outSWPersistencePassQM = Slot(uri=NEON.outSWPersistencePassQM, name="outSWPersistencePassQM", curie=NEON.curie('outSWPersistencePassQM'),
                      model_uri=NEON.outSWPersistencePassQM, domain=None, range=Optional[float])

slots.outSWPersistenceNAQM = Slot(uri=NEON.outSWPersistenceNAQM, name="outSWPersistenceNAQM", curie=NEON.curie('outSWPersistenceNAQM'),
                      model_uri=NEON.outSWPersistenceNAQM, domain=None, range=Optional[float])

slots.outSWStepFailQM = Slot(uri=NEON.outSWStepFailQM, name="outSWStepFailQM", curie=NEON.curie('outSWStepFailQM'),
                      model_uri=NEON.outSWStepFailQM, domain=None, range=Optional[float])

slots.outSWStepPassQM = Slot(uri=NEON.outSWStepPassQM, name="outSWStepPassQM", curie=NEON.curie('outSWStepPassQM'),
                      model_uri=NEON.outSWStepPassQM, domain=None, range=Optional[float])

slots.outSWStepNAQM = Slot(uri=NEON.outSWStepNAQM, name="outSWStepNAQM", curie=NEON.curie('outSWStepNAQM'),
                      model_uri=NEON.outSWStepNAQM, domain=None, range=Optional[float])

slots.outSWNullFailQM = Slot(uri=NEON.outSWNullFailQM, name="outSWNullFailQM", curie=NEON.curie('outSWNullFailQM'),
                      model_uri=NEON.outSWNullFailQM, domain=None, range=Optional[float])

slots.outSWNullPassQM = Slot(uri=NEON.outSWNullPassQM, name="outSWNullPassQM", curie=NEON.curie('outSWNullPassQM'),
                      model_uri=NEON.outSWNullPassQM, domain=None, range=Optional[float])

slots.outSWNullNAQM = Slot(uri=NEON.outSWNullNAQM, name="outSWNullNAQM", curie=NEON.curie('outSWNullNAQM'),
                      model_uri=NEON.outSWNullNAQM, domain=None, range=Optional[float])

slots.outSWGapFailQM = Slot(uri=NEON.outSWGapFailQM, name="outSWGapFailQM", curie=NEON.curie('outSWGapFailQM'),
                      model_uri=NEON.outSWGapFailQM, domain=None, range=Optional[float])

slots.outSWGapPassQM = Slot(uri=NEON.outSWGapPassQM, name="outSWGapPassQM", curie=NEON.curie('outSWGapPassQM'),
                      model_uri=NEON.outSWGapPassQM, domain=None, range=Optional[float])

slots.outSWGapNAQM = Slot(uri=NEON.outSWGapNAQM, name="outSWGapNAQM", curie=NEON.curie('outSWGapNAQM'),
                      model_uri=NEON.outSWGapNAQM, domain=None, range=Optional[float])

slots.outSWSpikeFailQM = Slot(uri=NEON.outSWSpikeFailQM, name="outSWSpikeFailQM", curie=NEON.curie('outSWSpikeFailQM'),
                      model_uri=NEON.outSWSpikeFailQM, domain=None, range=Optional[float])

slots.outSWSpikePassQM = Slot(uri=NEON.outSWSpikePassQM, name="outSWSpikePassQM", curie=NEON.curie('outSWSpikePassQM'),
                      model_uri=NEON.outSWSpikePassQM, domain=None, range=Optional[float])

slots.outSWSpikeNAQM = Slot(uri=NEON.outSWSpikeNAQM, name="outSWSpikeNAQM", curie=NEON.curie('outSWSpikeNAQM'),
                      model_uri=NEON.outSWSpikeNAQM, domain=None, range=Optional[float])

slots.outSWConsistencyFailQM = Slot(uri=NEON.outSWConsistencyFailQM, name="outSWConsistencyFailQM", curie=NEON.curie('outSWConsistencyFailQM'),
                      model_uri=NEON.outSWConsistencyFailQM, domain=None, range=Optional[float])

slots.outSWConsistencyPassQM = Slot(uri=NEON.outSWConsistencyPassQM, name="outSWConsistencyPassQM", curie=NEON.curie('outSWConsistencyPassQM'),
                      model_uri=NEON.outSWConsistencyPassQM, domain=None, range=Optional[float])

slots.outSWConsistencyNAQM = Slot(uri=NEON.outSWConsistencyNAQM, name="outSWConsistencyNAQM", curie=NEON.curie('outSWConsistencyNAQM'),
                      model_uri=NEON.outSWConsistencyNAQM, domain=None, range=Optional[float])

slots.outSWAlphaQM = Slot(uri=NEON.outSWAlphaQM, name="outSWAlphaQM", curie=NEON.curie('outSWAlphaQM'),
                      model_uri=NEON.outSWAlphaQM, domain=None, range=Optional[float])

slots.outSWBetaQM = Slot(uri=NEON.outSWBetaQM, name="outSWBetaQM", curie=NEON.curie('outSWBetaQM'),
                      model_uri=NEON.outSWBetaQM, domain=None, range=Optional[float])

slots.outSWFinalQF = Slot(uri=NEON.outSWFinalQF, name="outSWFinalQF", curie=NEON.curie('outSWFinalQF'),
                      model_uri=NEON.outSWFinalQF, domain=None, range=Optional[str])

slots.inLWMean = Slot(uri=NEON.inLWMean, name="inLWMean", curie=NEON.curie('inLWMean'),
                      model_uri=NEON.inLWMean, domain=None, range=Optional[float])

slots.inLWMinimum = Slot(uri=NEON.inLWMinimum, name="inLWMinimum", curie=NEON.curie('inLWMinimum'),
                      model_uri=NEON.inLWMinimum, domain=None, range=Optional[float])

slots.inLWMaximum = Slot(uri=NEON.inLWMaximum, name="inLWMaximum", curie=NEON.curie('inLWMaximum'),
                      model_uri=NEON.inLWMaximum, domain=None, range=Optional[float])

slots.inLWVariance = Slot(uri=NEON.inLWVariance, name="inLWVariance", curie=NEON.curie('inLWVariance'),
                      model_uri=NEON.inLWVariance, domain=None, range=Optional[float])

slots.inLWNumPts = Slot(uri=NEON.inLWNumPts, name="inLWNumPts", curie=NEON.curie('inLWNumPts'),
                      model_uri=NEON.inLWNumPts, domain=None, range=Optional[float])

slots.inLWExpUncert = Slot(uri=NEON.inLWExpUncert, name="inLWExpUncert", curie=NEON.curie('inLWExpUncert'),
                      model_uri=NEON.inLWExpUncert, domain=None, range=Optional[float])

slots.inLWStdErMean = Slot(uri=NEON.inLWStdErMean, name="inLWStdErMean", curie=NEON.curie('inLWStdErMean'),
                      model_uri=NEON.inLWStdErMean, domain=None, range=Optional[float])

slots.inLWRangeQAQCRpt = Slot(uri=NEON.inLWRangeQAQCRpt, name="inLWRangeQAQCRpt", curie=NEON.curie('inLWRangeQAQCRpt'),
                      model_uri=NEON.inLWRangeQAQCRpt, domain=None, range=Optional[str])

slots.inLWPersistenceQAQCRpt = Slot(uri=NEON.inLWPersistenceQAQCRpt, name="inLWPersistenceQAQCRpt", curie=NEON.curie('inLWPersistenceQAQCRpt'),
                      model_uri=NEON.inLWPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.inLWStepQAQCRpt = Slot(uri=NEON.inLWStepQAQCRpt, name="inLWStepQAQCRpt", curie=NEON.curie('inLWStepQAQCRpt'),
                      model_uri=NEON.inLWStepQAQCRpt, domain=None, range=Optional[str])

slots.inLWNullQAQCRpt = Slot(uri=NEON.inLWNullQAQCRpt, name="inLWNullQAQCRpt", curie=NEON.curie('inLWNullQAQCRpt'),
                      model_uri=NEON.inLWNullQAQCRpt, domain=None, range=Optional[str])

slots.inLWGapQAQCRpt = Slot(uri=NEON.inLWGapQAQCRpt, name="inLWGapQAQCRpt", curie=NEON.curie('inLWGapQAQCRpt'),
                      model_uri=NEON.inLWGapQAQCRpt, domain=None, range=Optional[str])

slots.inLWConsistencyQAQCRpt = Slot(uri=NEON.inLWConsistencyQAQCRpt, name="inLWConsistencyQAQCRpt", curie=NEON.curie('inLWConsistencyQAQCRpt'),
                      model_uri=NEON.inLWConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.inLWSpikeQAQCRpt = Slot(uri=NEON.inLWSpikeQAQCRpt, name="inLWSpikeQAQCRpt", curie=NEON.curie('inLWSpikeQAQCRpt'),
                      model_uri=NEON.inLWSpikeQAQCRpt, domain=None, range=Optional[str])

slots.inLWAlphaQAQCRpt = Slot(uri=NEON.inLWAlphaQAQCRpt, name="inLWAlphaQAQCRpt", curie=NEON.curie('inLWAlphaQAQCRpt'),
                      model_uri=NEON.inLWAlphaQAQCRpt, domain=None, range=Optional[str])

slots.inLWBetaQAQCRpt = Slot(uri=NEON.inLWBetaQAQCRpt, name="inLWBetaQAQCRpt", curie=NEON.curie('inLWBetaQAQCRpt'),
                      model_uri=NEON.inLWBetaQAQCRpt, domain=None, range=Optional[str])

slots.inLWRangeFailQM = Slot(uri=NEON.inLWRangeFailQM, name="inLWRangeFailQM", curie=NEON.curie('inLWRangeFailQM'),
                      model_uri=NEON.inLWRangeFailQM, domain=None, range=Optional[float])

slots.inLWRangePassQM = Slot(uri=NEON.inLWRangePassQM, name="inLWRangePassQM", curie=NEON.curie('inLWRangePassQM'),
                      model_uri=NEON.inLWRangePassQM, domain=None, range=Optional[float])

slots.inLWRangeNAQM = Slot(uri=NEON.inLWRangeNAQM, name="inLWRangeNAQM", curie=NEON.curie('inLWRangeNAQM'),
                      model_uri=NEON.inLWRangeNAQM, domain=None, range=Optional[float])

slots.inLWPersistenceFailQM = Slot(uri=NEON.inLWPersistenceFailQM, name="inLWPersistenceFailQM", curie=NEON.curie('inLWPersistenceFailQM'),
                      model_uri=NEON.inLWPersistenceFailQM, domain=None, range=Optional[float])

slots.inLWPersistencePassQM = Slot(uri=NEON.inLWPersistencePassQM, name="inLWPersistencePassQM", curie=NEON.curie('inLWPersistencePassQM'),
                      model_uri=NEON.inLWPersistencePassQM, domain=None, range=Optional[float])

slots.inLWPersistenceNAQM = Slot(uri=NEON.inLWPersistenceNAQM, name="inLWPersistenceNAQM", curie=NEON.curie('inLWPersistenceNAQM'),
                      model_uri=NEON.inLWPersistenceNAQM, domain=None, range=Optional[float])

slots.inLWStepFailQM = Slot(uri=NEON.inLWStepFailQM, name="inLWStepFailQM", curie=NEON.curie('inLWStepFailQM'),
                      model_uri=NEON.inLWStepFailQM, domain=None, range=Optional[float])

slots.inLWStepPassQM = Slot(uri=NEON.inLWStepPassQM, name="inLWStepPassQM", curie=NEON.curie('inLWStepPassQM'),
                      model_uri=NEON.inLWStepPassQM, domain=None, range=Optional[float])

slots.inLWStepNAQM = Slot(uri=NEON.inLWStepNAQM, name="inLWStepNAQM", curie=NEON.curie('inLWStepNAQM'),
                      model_uri=NEON.inLWStepNAQM, domain=None, range=Optional[float])

slots.inLWNullFailQM = Slot(uri=NEON.inLWNullFailQM, name="inLWNullFailQM", curie=NEON.curie('inLWNullFailQM'),
                      model_uri=NEON.inLWNullFailQM, domain=None, range=Optional[float])

slots.inLWNullPassQM = Slot(uri=NEON.inLWNullPassQM, name="inLWNullPassQM", curie=NEON.curie('inLWNullPassQM'),
                      model_uri=NEON.inLWNullPassQM, domain=None, range=Optional[float])

slots.inLWNullNAQM = Slot(uri=NEON.inLWNullNAQM, name="inLWNullNAQM", curie=NEON.curie('inLWNullNAQM'),
                      model_uri=NEON.inLWNullNAQM, domain=None, range=Optional[float])

slots.inLWGapFailQM = Slot(uri=NEON.inLWGapFailQM, name="inLWGapFailQM", curie=NEON.curie('inLWGapFailQM'),
                      model_uri=NEON.inLWGapFailQM, domain=None, range=Optional[float])

slots.inLWGapPassQM = Slot(uri=NEON.inLWGapPassQM, name="inLWGapPassQM", curie=NEON.curie('inLWGapPassQM'),
                      model_uri=NEON.inLWGapPassQM, domain=None, range=Optional[float])

slots.inLWGapNAQM = Slot(uri=NEON.inLWGapNAQM, name="inLWGapNAQM", curie=NEON.curie('inLWGapNAQM'),
                      model_uri=NEON.inLWGapNAQM, domain=None, range=Optional[float])

slots.inLWSpikeFailQM = Slot(uri=NEON.inLWSpikeFailQM, name="inLWSpikeFailQM", curie=NEON.curie('inLWSpikeFailQM'),
                      model_uri=NEON.inLWSpikeFailQM, domain=None, range=Optional[float])

slots.inLWSpikePassQM = Slot(uri=NEON.inLWSpikePassQM, name="inLWSpikePassQM", curie=NEON.curie('inLWSpikePassQM'),
                      model_uri=NEON.inLWSpikePassQM, domain=None, range=Optional[float])

slots.inLWSpikeNAQM = Slot(uri=NEON.inLWSpikeNAQM, name="inLWSpikeNAQM", curie=NEON.curie('inLWSpikeNAQM'),
                      model_uri=NEON.inLWSpikeNAQM, domain=None, range=Optional[float])

slots.inLWConsistencyFailQM = Slot(uri=NEON.inLWConsistencyFailQM, name="inLWConsistencyFailQM", curie=NEON.curie('inLWConsistencyFailQM'),
                      model_uri=NEON.inLWConsistencyFailQM, domain=None, range=Optional[float])

slots.inLWConsistencyPassQM = Slot(uri=NEON.inLWConsistencyPassQM, name="inLWConsistencyPassQM", curie=NEON.curie('inLWConsistencyPassQM'),
                      model_uri=NEON.inLWConsistencyPassQM, domain=None, range=Optional[float])

slots.inLWConsistencyNAQM = Slot(uri=NEON.inLWConsistencyNAQM, name="inLWConsistencyNAQM", curie=NEON.curie('inLWConsistencyNAQM'),
                      model_uri=NEON.inLWConsistencyNAQM, domain=None, range=Optional[float])

slots.inLWAlphaQM = Slot(uri=NEON.inLWAlphaQM, name="inLWAlphaQM", curie=NEON.curie('inLWAlphaQM'),
                      model_uri=NEON.inLWAlphaQM, domain=None, range=Optional[float])

slots.inLWBetaQM = Slot(uri=NEON.inLWBetaQM, name="inLWBetaQM", curie=NEON.curie('inLWBetaQM'),
                      model_uri=NEON.inLWBetaQM, domain=None, range=Optional[float])

slots.inLWFinalQF = Slot(uri=NEON.inLWFinalQF, name="inLWFinalQF", curie=NEON.curie('inLWFinalQF'),
                      model_uri=NEON.inLWFinalQF, domain=None, range=Optional[str])

slots.outLWMean = Slot(uri=NEON.outLWMean, name="outLWMean", curie=NEON.curie('outLWMean'),
                      model_uri=NEON.outLWMean, domain=None, range=Optional[float])

slots.outLWMinimum = Slot(uri=NEON.outLWMinimum, name="outLWMinimum", curie=NEON.curie('outLWMinimum'),
                      model_uri=NEON.outLWMinimum, domain=None, range=Optional[float])

slots.outLWMaximum = Slot(uri=NEON.outLWMaximum, name="outLWMaximum", curie=NEON.curie('outLWMaximum'),
                      model_uri=NEON.outLWMaximum, domain=None, range=Optional[float])

slots.outLWVariance = Slot(uri=NEON.outLWVariance, name="outLWVariance", curie=NEON.curie('outLWVariance'),
                      model_uri=NEON.outLWVariance, domain=None, range=Optional[float])

slots.outLWNumPts = Slot(uri=NEON.outLWNumPts, name="outLWNumPts", curie=NEON.curie('outLWNumPts'),
                      model_uri=NEON.outLWNumPts, domain=None, range=Optional[float])

slots.outLWExpUncert = Slot(uri=NEON.outLWExpUncert, name="outLWExpUncert", curie=NEON.curie('outLWExpUncert'),
                      model_uri=NEON.outLWExpUncert, domain=None, range=Optional[float])

slots.outLWStdErMean = Slot(uri=NEON.outLWStdErMean, name="outLWStdErMean", curie=NEON.curie('outLWStdErMean'),
                      model_uri=NEON.outLWStdErMean, domain=None, range=Optional[float])

slots.outLWRangeQAQCRpt = Slot(uri=NEON.outLWRangeQAQCRpt, name="outLWRangeQAQCRpt", curie=NEON.curie('outLWRangeQAQCRpt'),
                      model_uri=NEON.outLWRangeQAQCRpt, domain=None, range=Optional[str])

slots.outLWPersistenceQAQCRpt = Slot(uri=NEON.outLWPersistenceQAQCRpt, name="outLWPersistenceQAQCRpt", curie=NEON.curie('outLWPersistenceQAQCRpt'),
                      model_uri=NEON.outLWPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.outLWStepQAQCRpt = Slot(uri=NEON.outLWStepQAQCRpt, name="outLWStepQAQCRpt", curie=NEON.curie('outLWStepQAQCRpt'),
                      model_uri=NEON.outLWStepQAQCRpt, domain=None, range=Optional[str])

slots.outLWNullQAQCRpt = Slot(uri=NEON.outLWNullQAQCRpt, name="outLWNullQAQCRpt", curie=NEON.curie('outLWNullQAQCRpt'),
                      model_uri=NEON.outLWNullQAQCRpt, domain=None, range=Optional[str])

slots.outLWGapQAQCRpt = Slot(uri=NEON.outLWGapQAQCRpt, name="outLWGapQAQCRpt", curie=NEON.curie('outLWGapQAQCRpt'),
                      model_uri=NEON.outLWGapQAQCRpt, domain=None, range=Optional[str])

slots.outLWConsistencyQAQCRpt = Slot(uri=NEON.outLWConsistencyQAQCRpt, name="outLWConsistencyQAQCRpt", curie=NEON.curie('outLWConsistencyQAQCRpt'),
                      model_uri=NEON.outLWConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.outLWSpikeQAQCRpt = Slot(uri=NEON.outLWSpikeQAQCRpt, name="outLWSpikeQAQCRpt", curie=NEON.curie('outLWSpikeQAQCRpt'),
                      model_uri=NEON.outLWSpikeQAQCRpt, domain=None, range=Optional[str])

slots.outLWAlphaQAQCRpt = Slot(uri=NEON.outLWAlphaQAQCRpt, name="outLWAlphaQAQCRpt", curie=NEON.curie('outLWAlphaQAQCRpt'),
                      model_uri=NEON.outLWAlphaQAQCRpt, domain=None, range=Optional[str])

slots.outLWBetaQAQCRpt = Slot(uri=NEON.outLWBetaQAQCRpt, name="outLWBetaQAQCRpt", curie=NEON.curie('outLWBetaQAQCRpt'),
                      model_uri=NEON.outLWBetaQAQCRpt, domain=None, range=Optional[str])

slots.outLWRangeFailQM = Slot(uri=NEON.outLWRangeFailQM, name="outLWRangeFailQM", curie=NEON.curie('outLWRangeFailQM'),
                      model_uri=NEON.outLWRangeFailQM, domain=None, range=Optional[float])

slots.outLWRangePassQM = Slot(uri=NEON.outLWRangePassQM, name="outLWRangePassQM", curie=NEON.curie('outLWRangePassQM'),
                      model_uri=NEON.outLWRangePassQM, domain=None, range=Optional[float])

slots.outLWRangeNAQM = Slot(uri=NEON.outLWRangeNAQM, name="outLWRangeNAQM", curie=NEON.curie('outLWRangeNAQM'),
                      model_uri=NEON.outLWRangeNAQM, domain=None, range=Optional[float])

slots.outLWPersistenceFailQM = Slot(uri=NEON.outLWPersistenceFailQM, name="outLWPersistenceFailQM", curie=NEON.curie('outLWPersistenceFailQM'),
                      model_uri=NEON.outLWPersistenceFailQM, domain=None, range=Optional[float])

slots.outLWPersistencePassQM = Slot(uri=NEON.outLWPersistencePassQM, name="outLWPersistencePassQM", curie=NEON.curie('outLWPersistencePassQM'),
                      model_uri=NEON.outLWPersistencePassQM, domain=None, range=Optional[float])

slots.outLWPersistenceNAQM = Slot(uri=NEON.outLWPersistenceNAQM, name="outLWPersistenceNAQM", curie=NEON.curie('outLWPersistenceNAQM'),
                      model_uri=NEON.outLWPersistenceNAQM, domain=None, range=Optional[float])

slots.outLWStepFailQM = Slot(uri=NEON.outLWStepFailQM, name="outLWStepFailQM", curie=NEON.curie('outLWStepFailQM'),
                      model_uri=NEON.outLWStepFailQM, domain=None, range=Optional[float])

slots.outLWStepPassQM = Slot(uri=NEON.outLWStepPassQM, name="outLWStepPassQM", curie=NEON.curie('outLWStepPassQM'),
                      model_uri=NEON.outLWStepPassQM, domain=None, range=Optional[float])

slots.outLWStepNAQM = Slot(uri=NEON.outLWStepNAQM, name="outLWStepNAQM", curie=NEON.curie('outLWStepNAQM'),
                      model_uri=NEON.outLWStepNAQM, domain=None, range=Optional[float])

slots.outLWNullFailQM = Slot(uri=NEON.outLWNullFailQM, name="outLWNullFailQM", curie=NEON.curie('outLWNullFailQM'),
                      model_uri=NEON.outLWNullFailQM, domain=None, range=Optional[float])

slots.outLWNullPassQM = Slot(uri=NEON.outLWNullPassQM, name="outLWNullPassQM", curie=NEON.curie('outLWNullPassQM'),
                      model_uri=NEON.outLWNullPassQM, domain=None, range=Optional[float])

slots.outLWNullNAQM = Slot(uri=NEON.outLWNullNAQM, name="outLWNullNAQM", curie=NEON.curie('outLWNullNAQM'),
                      model_uri=NEON.outLWNullNAQM, domain=None, range=Optional[float])

slots.outLWGapFailQM = Slot(uri=NEON.outLWGapFailQM, name="outLWGapFailQM", curie=NEON.curie('outLWGapFailQM'),
                      model_uri=NEON.outLWGapFailQM, domain=None, range=Optional[float])

slots.outLWGapPassQM = Slot(uri=NEON.outLWGapPassQM, name="outLWGapPassQM", curie=NEON.curie('outLWGapPassQM'),
                      model_uri=NEON.outLWGapPassQM, domain=None, range=Optional[float])

slots.outLWGapNAQM = Slot(uri=NEON.outLWGapNAQM, name="outLWGapNAQM", curie=NEON.curie('outLWGapNAQM'),
                      model_uri=NEON.outLWGapNAQM, domain=None, range=Optional[float])

slots.outLWSpikeFailQM = Slot(uri=NEON.outLWSpikeFailQM, name="outLWSpikeFailQM", curie=NEON.curie('outLWSpikeFailQM'),
                      model_uri=NEON.outLWSpikeFailQM, domain=None, range=Optional[float])

slots.outLWSpikePassQM = Slot(uri=NEON.outLWSpikePassQM, name="outLWSpikePassQM", curie=NEON.curie('outLWSpikePassQM'),
                      model_uri=NEON.outLWSpikePassQM, domain=None, range=Optional[float])

slots.outLWSpikeNAQM = Slot(uri=NEON.outLWSpikeNAQM, name="outLWSpikeNAQM", curie=NEON.curie('outLWSpikeNAQM'),
                      model_uri=NEON.outLWSpikeNAQM, domain=None, range=Optional[float])

slots.outLWConsistencyFailQM = Slot(uri=NEON.outLWConsistencyFailQM, name="outLWConsistencyFailQM", curie=NEON.curie('outLWConsistencyFailQM'),
                      model_uri=NEON.outLWConsistencyFailQM, domain=None, range=Optional[float])

slots.outLWConsistencyPassQM = Slot(uri=NEON.outLWConsistencyPassQM, name="outLWConsistencyPassQM", curie=NEON.curie('outLWConsistencyPassQM'),
                      model_uri=NEON.outLWConsistencyPassQM, domain=None, range=Optional[float])

slots.outLWConsistencyNAQM = Slot(uri=NEON.outLWConsistencyNAQM, name="outLWConsistencyNAQM", curie=NEON.curie('outLWConsistencyNAQM'),
                      model_uri=NEON.outLWConsistencyNAQM, domain=None, range=Optional[float])

slots.outLWAlphaQM = Slot(uri=NEON.outLWAlphaQM, name="outLWAlphaQM", curie=NEON.curie('outLWAlphaQM'),
                      model_uri=NEON.outLWAlphaQM, domain=None, range=Optional[float])

slots.outLWBetaQM = Slot(uri=NEON.outLWBetaQM, name="outLWBetaQM", curie=NEON.curie('outLWBetaQM'),
                      model_uri=NEON.outLWBetaQM, domain=None, range=Optional[float])

slots.outLWFinalQF = Slot(uri=NEON.outLWFinalQF, name="outLWFinalQF", curie=NEON.curie('outLWFinalQF'),
                      model_uri=NEON.outLWFinalQF, domain=None, range=Optional[str])

slots.soilTempMean = Slot(uri=NEON.soilTempMean, name="soilTempMean", curie=NEON.curie('soilTempMean'),
                      model_uri=NEON.soilTempMean, domain=None, range=Optional[float])

slots.soilTempMinimum = Slot(uri=NEON.soilTempMinimum, name="soilTempMinimum", curie=NEON.curie('soilTempMinimum'),
                      model_uri=NEON.soilTempMinimum, domain=None, range=Optional[float])

slots.soilTempMaximum = Slot(uri=NEON.soilTempMaximum, name="soilTempMaximum", curie=NEON.curie('soilTempMaximum'),
                      model_uri=NEON.soilTempMaximum, domain=None, range=Optional[float])

slots.soilTempVariance = Slot(uri=NEON.soilTempVariance, name="soilTempVariance", curie=NEON.curie('soilTempVariance'),
                      model_uri=NEON.soilTempVariance, domain=None, range=Optional[float])

slots.soilTempNumPts = Slot(uri=NEON.soilTempNumPts, name="soilTempNumPts", curie=NEON.curie('soilTempNumPts'),
                      model_uri=NEON.soilTempNumPts, domain=None, range=Optional[float])

slots.soilTempExpUncert = Slot(uri=NEON.soilTempExpUncert, name="soilTempExpUncert", curie=NEON.curie('soilTempExpUncert'),
                      model_uri=NEON.soilTempExpUncert, domain=None, range=Optional[float])

slots.soilTempStdErMean = Slot(uri=NEON.soilTempStdErMean, name="soilTempStdErMean", curie=NEON.curie('soilTempStdErMean'),
                      model_uri=NEON.soilTempStdErMean, domain=None, range=Optional[float])

slots.shortRadMean = Slot(uri=NEON.shortRadMean, name="shortRadMean", curie=NEON.curie('shortRadMean'),
                      model_uri=NEON.shortRadMean, domain=None, range=Optional[float])

slots.shortRadMinimum = Slot(uri=NEON.shortRadMinimum, name="shortRadMinimum", curie=NEON.curie('shortRadMinimum'),
                      model_uri=NEON.shortRadMinimum, domain=None, range=Optional[float])

slots.shortRadMaximum = Slot(uri=NEON.shortRadMaximum, name="shortRadMaximum", curie=NEON.curie('shortRadMaximum'),
                      model_uri=NEON.shortRadMaximum, domain=None, range=Optional[float])

slots.shortRadVariance = Slot(uri=NEON.shortRadVariance, name="shortRadVariance", curie=NEON.curie('shortRadVariance'),
                      model_uri=NEON.shortRadVariance, domain=None, range=Optional[float])

slots.shortRadNumPts = Slot(uri=NEON.shortRadNumPts, name="shortRadNumPts", curie=NEON.curie('shortRadNumPts'),
                      model_uri=NEON.shortRadNumPts, domain=None, range=Optional[float])

slots.shortRadExpUncert = Slot(uri=NEON.shortRadExpUncert, name="shortRadExpUncert", curie=NEON.curie('shortRadExpUncert'),
                      model_uri=NEON.shortRadExpUncert, domain=None, range=Optional[float])

slots.shortRadStdErMean = Slot(uri=NEON.shortRadStdErMean, name="shortRadStdErMean", curie=NEON.curie('shortRadStdErMean'),
                      model_uri=NEON.shortRadStdErMean, domain=None, range=Optional[float])

slots.secPrecipRangeQF = Slot(uri=NEON.secPrecipRangeQF, name="secPrecipRangeQF", curie=NEON.curie('secPrecipRangeQF'),
                      model_uri=NEON.secPrecipRangeQF, domain=None, range=Optional[int])

slots.bioTempMean = Slot(uri=NEON.bioTempMean, name="bioTempMean", curie=NEON.curie('bioTempMean'),
                      model_uri=NEON.bioTempMean, domain=None, range=Optional[float])

slots.bioTempMinimum = Slot(uri=NEON.bioTempMinimum, name="bioTempMinimum", curie=NEON.curie('bioTempMinimum'),
                      model_uri=NEON.bioTempMinimum, domain=None, range=Optional[float])

slots.bioTempMaximum = Slot(uri=NEON.bioTempMaximum, name="bioTempMaximum", curie=NEON.curie('bioTempMaximum'),
                      model_uri=NEON.bioTempMaximum, domain=None, range=Optional[float])

slots.bioTempVariance = Slot(uri=NEON.bioTempVariance, name="bioTempVariance", curie=NEON.curie('bioTempVariance'),
                      model_uri=NEON.bioTempVariance, domain=None, range=Optional[float])

slots.bioTempNumPts = Slot(uri=NEON.bioTempNumPts, name="bioTempNumPts", curie=NEON.curie('bioTempNumPts'),
                      model_uri=NEON.bioTempNumPts, domain=None, range=Optional[float])

slots.bioTempExpUncert = Slot(uri=NEON.bioTempExpUncert, name="bioTempExpUncert", curie=NEON.curie('bioTempExpUncert'),
                      model_uri=NEON.bioTempExpUncert, domain=None, range=Optional[float])

slots.bioTempStdErMean = Slot(uri=NEON.bioTempStdErMean, name="bioTempStdErMean", curie=NEON.curie('bioTempStdErMean'),
                      model_uri=NEON.bioTempStdErMean, domain=None, range=Optional[float])

slots.NANQAQCRpt = Slot(uri=NEON.NANQAQCRpt, name="NANQAQCRpt", curie=NEON.curie('NANQAQCRpt'),
                      model_uri=NEON.NANQAQCRpt, domain=None, range=Optional[str])

slots.NANFailQM = Slot(uri=NEON.NANFailQM, name="NANFailQM", curie=NEON.curie('NANFailQM'),
                      model_uri=NEON.NANFailQM, domain=None, range=Optional[float])

slots.NANPassQM = Slot(uri=NEON.NANPassQM, name="NANPassQM", curie=NEON.curie('NANPassQM'),
                      model_uri=NEON.NANPassQM, domain=None, range=Optional[float])

slots.NANNAQM = Slot(uri=NEON.NANNAQM, name="NANNAQM", curie=NEON.curie('NANNAQM'),
                      model_uri=NEON.NANNAQM, domain=None, range=Optional[float])

slots.RHSensorErrorFailQM = Slot(uri=NEON.RHSensorErrorFailQM, name="RHSensorErrorFailQM", curie=NEON.curie('RHSensorErrorFailQM'),
                      model_uri=NEON.RHSensorErrorFailQM, domain=None, range=Optional[float])

slots.RHSensorErrorPassQM = Slot(uri=NEON.RHSensorErrorPassQM, name="RHSensorErrorPassQM", curie=NEON.curie('RHSensorErrorPassQM'),
                      model_uri=NEON.RHSensorErrorPassQM, domain=None, range=Optional[float])

slots.RHSensorErrorNAQM = Slot(uri=NEON.RHSensorErrorNAQM, name="RHSensorErrorNAQM", curie=NEON.curie('RHSensorErrorNAQM'),
                      model_uri=NEON.RHSensorErrorNAQM, domain=None, range=Optional[float])

slots.surfacePres = Slot(uri=NEON.surfacePres, name="surfacePres", curie=NEON.curie('surfacePres'),
                      model_uri=NEON.surfacePres, domain=None, range=Optional[float])

slots.surfacePresExpUncert = Slot(uri=NEON.surfacePresExpUncert, name="surfacePresExpUncert", curie=NEON.curie('surfacePresExpUncert'),
                      model_uri=NEON.surfacePresExpUncert, domain=None, range=Optional[float])

slots.surfacePresFinalQF = Slot(uri=NEON.surfacePresFinalQF, name="surfacePresFinalQF", curie=NEON.curie('surfacePresFinalQF'),
                      model_uri=NEON.surfacePresFinalQF, domain=None, range=Optional[str])

slots.TFPrecipBulk = Slot(uri=NEON.TFPrecipBulk, name="TFPrecipBulk", curie=NEON.curie('TFPrecipBulk'),
                      model_uri=NEON.TFPrecipBulk, domain=None, range=Optional[float])

slots.TFPrecipExpUncert = Slot(uri=NEON.TFPrecipExpUncert, name="TFPrecipExpUncert", curie=NEON.curie('TFPrecipExpUncert'),
                      model_uri=NEON.TFPrecipExpUncert, domain=None, range=Optional[float])

slots.TFPrecipRangeQF = Slot(uri=NEON.TFPrecipRangeQF, name="TFPrecipRangeQF", curie=NEON.curie('TFPrecipRangeQF'),
                      model_uri=NEON.TFPrecipRangeQF, domain=None, range=Optional[int])

slots.VSWCMean = Slot(uri=NEON.VSWCMean, name="VSWCMean", curie=NEON.curie('VSWCMean'),
                      model_uri=NEON.VSWCMean, domain=None, range=Optional[float])

slots.VSWCMinimum = Slot(uri=NEON.VSWCMinimum, name="VSWCMinimum", curie=NEON.curie('VSWCMinimum'),
                      model_uri=NEON.VSWCMinimum, domain=None, range=Optional[float])

slots.VSWCMaximum = Slot(uri=NEON.VSWCMaximum, name="VSWCMaximum", curie=NEON.curie('VSWCMaximum'),
                      model_uri=NEON.VSWCMaximum, domain=None, range=Optional[float])

slots.VSWCVariance = Slot(uri=NEON.VSWCVariance, name="VSWCVariance", curie=NEON.curie('VSWCVariance'),
                      model_uri=NEON.VSWCVariance, domain=None, range=Optional[float])

slots.VSWCNumPts = Slot(uri=NEON.VSWCNumPts, name="VSWCNumPts", curie=NEON.curie('VSWCNumPts'),
                      model_uri=NEON.VSWCNumPts, domain=None, range=Optional[float])

slots.VSWCExpUncert = Slot(uri=NEON.VSWCExpUncert, name="VSWCExpUncert", curie=NEON.curie('VSWCExpUncert'),
                      model_uri=NEON.VSWCExpUncert, domain=None, range=Optional[float])

slots.VSWCStdErMean = Slot(uri=NEON.VSWCStdErMean, name="VSWCStdErMean", curie=NEON.curie('VSWCStdErMean'),
                      model_uri=NEON.VSWCStdErMean, domain=None, range=Optional[float])

slots.VSWCRangeQAQCRpt = Slot(uri=NEON.VSWCRangeQAQCRpt, name="VSWCRangeQAQCRpt", curie=NEON.curie('VSWCRangeQAQCRpt'),
                      model_uri=NEON.VSWCRangeQAQCRpt, domain=None, range=Optional[str])

slots.VSWCPersistenceQAQCRpt = Slot(uri=NEON.VSWCPersistenceQAQCRpt, name="VSWCPersistenceQAQCRpt", curie=NEON.curie('VSWCPersistenceQAQCRpt'),
                      model_uri=NEON.VSWCPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.VSWCStepQAQCRpt = Slot(uri=NEON.VSWCStepQAQCRpt, name="VSWCStepQAQCRpt", curie=NEON.curie('VSWCStepQAQCRpt'),
                      model_uri=NEON.VSWCStepQAQCRpt, domain=None, range=Optional[str])

slots.VSWCNullQAQCRpt = Slot(uri=NEON.VSWCNullQAQCRpt, name="VSWCNullQAQCRpt", curie=NEON.curie('VSWCNullQAQCRpt'),
                      model_uri=NEON.VSWCNullQAQCRpt, domain=None, range=Optional[str])

slots.VSWCGapQAQCRpt = Slot(uri=NEON.VSWCGapQAQCRpt, name="VSWCGapQAQCRpt", curie=NEON.curie('VSWCGapQAQCRpt'),
                      model_uri=NEON.VSWCGapQAQCRpt, domain=None, range=Optional[str])

slots.VSWCConsistencyQAQCRpt = Slot(uri=NEON.VSWCConsistencyQAQCRpt, name="VSWCConsistencyQAQCRpt", curie=NEON.curie('VSWCConsistencyQAQCRpt'),
                      model_uri=NEON.VSWCConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.VSWCSpikeQAQCRpt = Slot(uri=NEON.VSWCSpikeQAQCRpt, name="VSWCSpikeQAQCRpt", curie=NEON.curie('VSWCSpikeQAQCRpt'),
                      model_uri=NEON.VSWCSpikeQAQCRpt, domain=None, range=Optional[str])

slots.VSWCAlphaQAQCRpt = Slot(uri=NEON.VSWCAlphaQAQCRpt, name="VSWCAlphaQAQCRpt", curie=NEON.curie('VSWCAlphaQAQCRpt'),
                      model_uri=NEON.VSWCAlphaQAQCRpt, domain=None, range=Optional[str])

slots.VSWCBetaQAQCRpt = Slot(uri=NEON.VSWCBetaQAQCRpt, name="VSWCBetaQAQCRpt", curie=NEON.curie('VSWCBetaQAQCRpt'),
                      model_uri=NEON.VSWCBetaQAQCRpt, domain=None, range=Optional[str])

slots.VSWCRangeFailQM = Slot(uri=NEON.VSWCRangeFailQM, name="VSWCRangeFailQM", curie=NEON.curie('VSWCRangeFailQM'),
                      model_uri=NEON.VSWCRangeFailQM, domain=None, range=Optional[float])

slots.VSWCRangePassQM = Slot(uri=NEON.VSWCRangePassQM, name="VSWCRangePassQM", curie=NEON.curie('VSWCRangePassQM'),
                      model_uri=NEON.VSWCRangePassQM, domain=None, range=Optional[float])

slots.VSWCRangeNAQM = Slot(uri=NEON.VSWCRangeNAQM, name="VSWCRangeNAQM", curie=NEON.curie('VSWCRangeNAQM'),
                      model_uri=NEON.VSWCRangeNAQM, domain=None, range=Optional[float])

slots.VSWCPersistenceFailQM = Slot(uri=NEON.VSWCPersistenceFailQM, name="VSWCPersistenceFailQM", curie=NEON.curie('VSWCPersistenceFailQM'),
                      model_uri=NEON.VSWCPersistenceFailQM, domain=None, range=Optional[float])

slots.VSWCPersistencePassQM = Slot(uri=NEON.VSWCPersistencePassQM, name="VSWCPersistencePassQM", curie=NEON.curie('VSWCPersistencePassQM'),
                      model_uri=NEON.VSWCPersistencePassQM, domain=None, range=Optional[float])

slots.VSWCPersistenceNAQM = Slot(uri=NEON.VSWCPersistenceNAQM, name="VSWCPersistenceNAQM", curie=NEON.curie('VSWCPersistenceNAQM'),
                      model_uri=NEON.VSWCPersistenceNAQM, domain=None, range=Optional[float])

slots.VSWCStepFailQM = Slot(uri=NEON.VSWCStepFailQM, name="VSWCStepFailQM", curie=NEON.curie('VSWCStepFailQM'),
                      model_uri=NEON.VSWCStepFailQM, domain=None, range=Optional[float])

slots.VSWCStepPassQM = Slot(uri=NEON.VSWCStepPassQM, name="VSWCStepPassQM", curie=NEON.curie('VSWCStepPassQM'),
                      model_uri=NEON.VSWCStepPassQM, domain=None, range=Optional[float])

slots.VSWCStepNAQM = Slot(uri=NEON.VSWCStepNAQM, name="VSWCStepNAQM", curie=NEON.curie('VSWCStepNAQM'),
                      model_uri=NEON.VSWCStepNAQM, domain=None, range=Optional[float])

slots.VSWCNullFailQM = Slot(uri=NEON.VSWCNullFailQM, name="VSWCNullFailQM", curie=NEON.curie('VSWCNullFailQM'),
                      model_uri=NEON.VSWCNullFailQM, domain=None, range=Optional[float])

slots.VSWCNullPassQM = Slot(uri=NEON.VSWCNullPassQM, name="VSWCNullPassQM", curie=NEON.curie('VSWCNullPassQM'),
                      model_uri=NEON.VSWCNullPassQM, domain=None, range=Optional[float])

slots.VSWCNullNAQM = Slot(uri=NEON.VSWCNullNAQM, name="VSWCNullNAQM", curie=NEON.curie('VSWCNullNAQM'),
                      model_uri=NEON.VSWCNullNAQM, domain=None, range=Optional[float])

slots.VSWCGapFailQM = Slot(uri=NEON.VSWCGapFailQM, name="VSWCGapFailQM", curie=NEON.curie('VSWCGapFailQM'),
                      model_uri=NEON.VSWCGapFailQM, domain=None, range=Optional[float])

slots.VSWCGapPassQM = Slot(uri=NEON.VSWCGapPassQM, name="VSWCGapPassQM", curie=NEON.curie('VSWCGapPassQM'),
                      model_uri=NEON.VSWCGapPassQM, domain=None, range=Optional[float])

slots.VSWCGapNAQM = Slot(uri=NEON.VSWCGapNAQM, name="VSWCGapNAQM", curie=NEON.curie('VSWCGapNAQM'),
                      model_uri=NEON.VSWCGapNAQM, domain=None, range=Optional[float])

slots.VSWCSpikeFailQM = Slot(uri=NEON.VSWCSpikeFailQM, name="VSWCSpikeFailQM", curie=NEON.curie('VSWCSpikeFailQM'),
                      model_uri=NEON.VSWCSpikeFailQM, domain=None, range=Optional[float])

slots.VSWCSpikePassQM = Slot(uri=NEON.VSWCSpikePassQM, name="VSWCSpikePassQM", curie=NEON.curie('VSWCSpikePassQM'),
                      model_uri=NEON.VSWCSpikePassQM, domain=None, range=Optional[float])

slots.VSWCSpikeNAQM = Slot(uri=NEON.VSWCSpikeNAQM, name="VSWCSpikeNAQM", curie=NEON.curie('VSWCSpikeNAQM'),
                      model_uri=NEON.VSWCSpikeNAQM, domain=None, range=Optional[float])

slots.VSWCConsistencyFailQM = Slot(uri=NEON.VSWCConsistencyFailQM, name="VSWCConsistencyFailQM", curie=NEON.curie('VSWCConsistencyFailQM'),
                      model_uri=NEON.VSWCConsistencyFailQM, domain=None, range=Optional[float])

slots.VSWCConsistencyPassQM = Slot(uri=NEON.VSWCConsistencyPassQM, name="VSWCConsistencyPassQM", curie=NEON.curie('VSWCConsistencyPassQM'),
                      model_uri=NEON.VSWCConsistencyPassQM, domain=None, range=Optional[float])

slots.VSWCConsistencyNAQM = Slot(uri=NEON.VSWCConsistencyNAQM, name="VSWCConsistencyNAQM", curie=NEON.curie('VSWCConsistencyNAQM'),
                      model_uri=NEON.VSWCConsistencyNAQM, domain=None, range=Optional[float])

slots.VSWCAlphaQM = Slot(uri=NEON.VSWCAlphaQM, name="VSWCAlphaQM", curie=NEON.curie('VSWCAlphaQM'),
                      model_uri=NEON.VSWCAlphaQM, domain=None, range=Optional[float])

slots.VSWCBetaQM = Slot(uri=NEON.VSWCBetaQM, name="VSWCBetaQM", curie=NEON.curie('VSWCBetaQM'),
                      model_uri=NEON.VSWCBetaQM, domain=None, range=Optional[float])

slots.VSWCFinalQF = Slot(uri=NEON.VSWCFinalQF, name="VSWCFinalQF", curie=NEON.curie('VSWCFinalQF'),
                      model_uri=NEON.VSWCFinalQF, domain=None, range=Optional[str])

slots.VSICMean = Slot(uri=NEON.VSICMean, name="VSICMean", curie=NEON.curie('VSICMean'),
                      model_uri=NEON.VSICMean, domain=None, range=Optional[float])

slots.VSICMinimum = Slot(uri=NEON.VSICMinimum, name="VSICMinimum", curie=NEON.curie('VSICMinimum'),
                      model_uri=NEON.VSICMinimum, domain=None, range=Optional[float])

slots.VSICMaximum = Slot(uri=NEON.VSICMaximum, name="VSICMaximum", curie=NEON.curie('VSICMaximum'),
                      model_uri=NEON.VSICMaximum, domain=None, range=Optional[float])

slots.VSICVariance = Slot(uri=NEON.VSICVariance, name="VSICVariance", curie=NEON.curie('VSICVariance'),
                      model_uri=NEON.VSICVariance, domain=None, range=Optional[float])

slots.VSICNumPts = Slot(uri=NEON.VSICNumPts, name="VSICNumPts", curie=NEON.curie('VSICNumPts'),
                      model_uri=NEON.VSICNumPts, domain=None, range=Optional[float])

slots.VSICExpUncert = Slot(uri=NEON.VSICExpUncert, name="VSICExpUncert", curie=NEON.curie('VSICExpUncert'),
                      model_uri=NEON.VSICExpUncert, domain=None, range=Optional[float])

slots.VSICStdErMean = Slot(uri=NEON.VSICStdErMean, name="VSICStdErMean", curie=NEON.curie('VSICStdErMean'),
                      model_uri=NEON.VSICStdErMean, domain=None, range=Optional[float])

slots.VSICRangeQAQCRpt = Slot(uri=NEON.VSICRangeQAQCRpt, name="VSICRangeQAQCRpt", curie=NEON.curie('VSICRangeQAQCRpt'),
                      model_uri=NEON.VSICRangeQAQCRpt, domain=None, range=Optional[str])

slots.VSICPersistenceQAQCRpt = Slot(uri=NEON.VSICPersistenceQAQCRpt, name="VSICPersistenceQAQCRpt", curie=NEON.curie('VSICPersistenceQAQCRpt'),
                      model_uri=NEON.VSICPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.VSICStepQAQCRpt = Slot(uri=NEON.VSICStepQAQCRpt, name="VSICStepQAQCRpt", curie=NEON.curie('VSICStepQAQCRpt'),
                      model_uri=NEON.VSICStepQAQCRpt, domain=None, range=Optional[str])

slots.VSICNullQAQCRpt = Slot(uri=NEON.VSICNullQAQCRpt, name="VSICNullQAQCRpt", curie=NEON.curie('VSICNullQAQCRpt'),
                      model_uri=NEON.VSICNullQAQCRpt, domain=None, range=Optional[str])

slots.VSICGapQAQCRpt = Slot(uri=NEON.VSICGapQAQCRpt, name="VSICGapQAQCRpt", curie=NEON.curie('VSICGapQAQCRpt'),
                      model_uri=NEON.VSICGapQAQCRpt, domain=None, range=Optional[str])

slots.VSICConsistencyQAQCRpt = Slot(uri=NEON.VSICConsistencyQAQCRpt, name="VSICConsistencyQAQCRpt", curie=NEON.curie('VSICConsistencyQAQCRpt'),
                      model_uri=NEON.VSICConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.VSICSpikeQAQCRpt = Slot(uri=NEON.VSICSpikeQAQCRpt, name="VSICSpikeQAQCRpt", curie=NEON.curie('VSICSpikeQAQCRpt'),
                      model_uri=NEON.VSICSpikeQAQCRpt, domain=None, range=Optional[str])

slots.VSICAlphaQAQCRpt = Slot(uri=NEON.VSICAlphaQAQCRpt, name="VSICAlphaQAQCRpt", curie=NEON.curie('VSICAlphaQAQCRpt'),
                      model_uri=NEON.VSICAlphaQAQCRpt, domain=None, range=Optional[str])

slots.VSICBetaQAQCRpt = Slot(uri=NEON.VSICBetaQAQCRpt, name="VSICBetaQAQCRpt", curie=NEON.curie('VSICBetaQAQCRpt'),
                      model_uri=NEON.VSICBetaQAQCRpt, domain=None, range=Optional[str])

slots.VSICRangeFailQM = Slot(uri=NEON.VSICRangeFailQM, name="VSICRangeFailQM", curie=NEON.curie('VSICRangeFailQM'),
                      model_uri=NEON.VSICRangeFailQM, domain=None, range=Optional[float])

slots.VSICRangePassQM = Slot(uri=NEON.VSICRangePassQM, name="VSICRangePassQM", curie=NEON.curie('VSICRangePassQM'),
                      model_uri=NEON.VSICRangePassQM, domain=None, range=Optional[float])

slots.VSICRangeNAQM = Slot(uri=NEON.VSICRangeNAQM, name="VSICRangeNAQM", curie=NEON.curie('VSICRangeNAQM'),
                      model_uri=NEON.VSICRangeNAQM, domain=None, range=Optional[float])

slots.VSICPersistenceFailQM = Slot(uri=NEON.VSICPersistenceFailQM, name="VSICPersistenceFailQM", curie=NEON.curie('VSICPersistenceFailQM'),
                      model_uri=NEON.VSICPersistenceFailQM, domain=None, range=Optional[float])

slots.VSICPersistencePassQM = Slot(uri=NEON.VSICPersistencePassQM, name="VSICPersistencePassQM", curie=NEON.curie('VSICPersistencePassQM'),
                      model_uri=NEON.VSICPersistencePassQM, domain=None, range=Optional[float])

slots.VSICPersistenceNAQM = Slot(uri=NEON.VSICPersistenceNAQM, name="VSICPersistenceNAQM", curie=NEON.curie('VSICPersistenceNAQM'),
                      model_uri=NEON.VSICPersistenceNAQM, domain=None, range=Optional[float])

slots.VSICStepFailQM = Slot(uri=NEON.VSICStepFailQM, name="VSICStepFailQM", curie=NEON.curie('VSICStepFailQM'),
                      model_uri=NEON.VSICStepFailQM, domain=None, range=Optional[float])

slots.VSICStepPassQM = Slot(uri=NEON.VSICStepPassQM, name="VSICStepPassQM", curie=NEON.curie('VSICStepPassQM'),
                      model_uri=NEON.VSICStepPassQM, domain=None, range=Optional[float])

slots.VSICStepNAQM = Slot(uri=NEON.VSICStepNAQM, name="VSICStepNAQM", curie=NEON.curie('VSICStepNAQM'),
                      model_uri=NEON.VSICStepNAQM, domain=None, range=Optional[float])

slots.VSICNullFailQM = Slot(uri=NEON.VSICNullFailQM, name="VSICNullFailQM", curie=NEON.curie('VSICNullFailQM'),
                      model_uri=NEON.VSICNullFailQM, domain=None, range=Optional[float])

slots.VSICNullPassQM = Slot(uri=NEON.VSICNullPassQM, name="VSICNullPassQM", curie=NEON.curie('VSICNullPassQM'),
                      model_uri=NEON.VSICNullPassQM, domain=None, range=Optional[float])

slots.VSICNullNAQM = Slot(uri=NEON.VSICNullNAQM, name="VSICNullNAQM", curie=NEON.curie('VSICNullNAQM'),
                      model_uri=NEON.VSICNullNAQM, domain=None, range=Optional[float])

slots.VSICGapFailQM = Slot(uri=NEON.VSICGapFailQM, name="VSICGapFailQM", curie=NEON.curie('VSICGapFailQM'),
                      model_uri=NEON.VSICGapFailQM, domain=None, range=Optional[float])

slots.VSICGapPassQM = Slot(uri=NEON.VSICGapPassQM, name="VSICGapPassQM", curie=NEON.curie('VSICGapPassQM'),
                      model_uri=NEON.VSICGapPassQM, domain=None, range=Optional[float])

slots.VSICGapNAQM = Slot(uri=NEON.VSICGapNAQM, name="VSICGapNAQM", curie=NEON.curie('VSICGapNAQM'),
                      model_uri=NEON.VSICGapNAQM, domain=None, range=Optional[float])

slots.VSICSpikeFailQM = Slot(uri=NEON.VSICSpikeFailQM, name="VSICSpikeFailQM", curie=NEON.curie('VSICSpikeFailQM'),
                      model_uri=NEON.VSICSpikeFailQM, domain=None, range=Optional[float])

slots.VSICSpikePassQM = Slot(uri=NEON.VSICSpikePassQM, name="VSICSpikePassQM", curie=NEON.curie('VSICSpikePassQM'),
                      model_uri=NEON.VSICSpikePassQM, domain=None, range=Optional[float])

slots.VSICSpikeNAQM = Slot(uri=NEON.VSICSpikeNAQM, name="VSICSpikeNAQM", curie=NEON.curie('VSICSpikeNAQM'),
                      model_uri=NEON.VSICSpikeNAQM, domain=None, range=Optional[float])

slots.VSICConsistencyFailQM = Slot(uri=NEON.VSICConsistencyFailQM, name="VSICConsistencyFailQM", curie=NEON.curie('VSICConsistencyFailQM'),
                      model_uri=NEON.VSICConsistencyFailQM, domain=None, range=Optional[float])

slots.VSICConsistencyPassQM = Slot(uri=NEON.VSICConsistencyPassQM, name="VSICConsistencyPassQM", curie=NEON.curie('VSICConsistencyPassQM'),
                      model_uri=NEON.VSICConsistencyPassQM, domain=None, range=Optional[float])

slots.VSICConsistencyNAQM = Slot(uri=NEON.VSICConsistencyNAQM, name="VSICConsistencyNAQM", curie=NEON.curie('VSICConsistencyNAQM'),
                      model_uri=NEON.VSICConsistencyNAQM, domain=None, range=Optional[float])

slots.VSICAlphaQM = Slot(uri=NEON.VSICAlphaQM, name="VSICAlphaQM", curie=NEON.curie('VSICAlphaQM'),
                      model_uri=NEON.VSICAlphaQM, domain=None, range=Optional[float])

slots.VSICBetaQM = Slot(uri=NEON.VSICBetaQM, name="VSICBetaQM", curie=NEON.curie('VSICBetaQM'),
                      model_uri=NEON.VSICBetaQM, domain=None, range=Optional[float])

slots.VSICFinalQF = Slot(uri=NEON.VSICFinalQF, name="VSICFinalQF", curie=NEON.curie('VSICFinalQF'),
                      model_uri=NEON.VSICFinalQF, domain=None, range=Optional[str])

slots.tempQAQCRpt = Slot(uri=NEON.tempQAQCRpt, name="tempQAQCRpt", curie=NEON.curie('tempQAQCRpt'),
                      model_uri=NEON.tempQAQCRpt, domain=None, range=Optional[str])

slots.tempFailQM = Slot(uri=NEON.tempFailQM, name="tempFailQM", curie=NEON.curie('tempFailQM'),
                      model_uri=NEON.tempFailQM, domain=None, range=Optional[float])

slots.tempPassQM = Slot(uri=NEON.tempPassQM, name="tempPassQM", curie=NEON.curie('tempPassQM'),
                      model_uri=NEON.tempPassQM, domain=None, range=Optional[float])

slots.tempNA = Slot(uri=NEON.tempNA, name="tempNA", curie=NEON.curie('tempNA'),
                      model_uri=NEON.tempNA, domain=None, range=Optional[float])

slots.tempNAQM = Slot(uri=NEON.tempNAQM, name="tempNAQM", curie=NEON.curie('tempNAQM'),
                      model_uri=NEON.tempNAQM, domain=None, range=Optional[float])

slots.stationID = Slot(uri=NEON.stationID, name="stationID", curie=NEON.curie('stationID'),
                      model_uri=NEON.stationID, domain=None, range=Optional[str])

slots.processedDate = Slot(uri=NEON.processedDate, name="processedDate", curie=NEON.curie('processedDate'),
                      model_uri=NEON.processedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.waterTemp = Slot(uri=NEON.waterTemp, name="waterTemp", curie=NEON.curie('waterTemp'),
                      model_uri=NEON.waterTemp, domain=None, range=Optional[float])

slots.specificConductance = Slot(uri=NEON.specificConductance, name="specificConductance", curie=NEON.curie('specificConductance'),
                      model_uri=NEON.specificConductance, domain=None, range=Optional[float])

slots.sampleVolumeFiltered = Slot(uri=NEON.sampleVolumeFiltered, name="sampleVolumeFiltered", curie=NEON.curie('sampleVolumeFiltered'),
                      model_uri=NEON.sampleVolumeFiltered, domain=None, range=Optional[float])

slots.aCollectedBy = Slot(uri=NEON.aCollectedBy, name="aCollectedBy", curie=NEON.curie('aCollectedBy'),
                      model_uri=NEON.aCollectedBy, domain=None, range=Optional[str])

slots.bCollectedBy = Slot(uri=NEON.bCollectedBy, name="bCollectedBy", curie=NEON.curie('bCollectedBy'),
                      model_uri=NEON.bCollectedBy, domain=None, range=Optional[str])

slots.altLocation = Slot(uri=NEON.altLocation, name="altLocation", curie=NEON.curie('altLocation'),
                      model_uri=NEON.altLocation, domain=None, range=Optional[str])

slots.altLongitude = Slot(uri=NEON.altLongitude, name="altLongitude", curie=NEON.curie('altLongitude'),
                      model_uri=NEON.altLongitude, domain=None, range=Optional[float])

slots.altLatitude = Slot(uri=NEON.altLatitude, name="altLatitude", curie=NEON.curie('altLatitude'),
                      model_uri=NEON.altLatitude, domain=None, range=Optional[float])

slots.titrationLocation = Slot(uri=NEON.titrationLocation, name="titrationLocation", curie=NEON.curie('titrationLocation'),
                      model_uri=NEON.titrationLocation, domain=None, range=Optional[str])

slots.pH4CheckValue = Slot(uri=NEON.pH4CheckValue, name="pH4CheckValue", curie=NEON.curie('pH4CheckValue'),
                      model_uri=NEON.pH4CheckValue, domain=None, range=Optional[float])

slots.pH7CheckValue = Slot(uri=NEON.pH7CheckValue, name="pH7CheckValue", curie=NEON.curie('pH7CheckValue'),
                      model_uri=NEON.pH7CheckValue, domain=None, range=Optional[float])

slots.pHMeterCalibration = Slot(uri=NEON.pHMeterCalibration, name="pHMeterCalibration", curie=NEON.curie('pHMeterCalibration'),
                      model_uri=NEON.pHMeterCalibration, domain=None, range=Optional[str])

slots.initialSamplepH = Slot(uri=NEON.initialSamplepH, name="initialSamplepH", curie=NEON.curie('initialSamplepH'),
                      model_uri=NEON.initialSamplepH, domain=None, range=Optional[float])

slots.initialSampleTemp = Slot(uri=NEON.initialSampleTemp, name="initialSampleTemp", curie=NEON.curie('initialSampleTemp'),
                      model_uri=NEON.initialSampleTemp, domain=None, range=Optional[float])

slots.normality = Slot(uri=NEON.normality, name="normality", curie=NEON.curie('normality'),
                      model_uri=NEON.normality, domain=None, range=Optional[str])

slots.sampleVolume = Slot(uri=NEON.sampleVolume, name="sampleVolume", curie=NEON.curie('sampleVolume'),
                      model_uri=NEON.sampleVolume, domain=None, range=Optional[float])

slots.methodType = Slot(uri=NEON.methodType, name="methodType", curie=NEON.curie('methodType'),
                      model_uri=NEON.methodType, domain=None, range=Optional[str])

slots.maxDepth = Slot(uri=NEON.maxDepth, name="maxDepth", curie=NEON.curie('maxDepth'),
                      model_uri=NEON.maxDepth, domain=None, range=Optional[float])

slots.upperSegmentDepth = Slot(uri=NEON.upperSegmentDepth, name="upperSegmentDepth", curie=NEON.curie('upperSegmentDepth'),
                      model_uri=NEON.upperSegmentDepth, domain=None, range=Optional[float])

slots.lowerSegmentDepth = Slot(uri=NEON.lowerSegmentDepth, name="lowerSegmentDepth", curie=NEON.curie('lowerSegmentDepth'),
                      model_uri=NEON.lowerSegmentDepth, domain=None, range=Optional[float])

slots.titrationDate = Slot(uri=NEON.titrationDate, name="titrationDate", curie=NEON.curie('titrationDate'),
                      model_uri=NEON.titrationDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.titrationData = Slot(uri=NEON.titrationData, name="titrationData", curie=NEON.curie('titrationData'),
                      model_uri=NEON.titrationData, domain=None, range=Optional[str])

slots.startDate = Slot(uri=NEON.startDate, name="startDate", curie=NEON.curie('startDate'),
                      model_uri=NEON.startDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.endDate = Slot(uri=NEON.endDate, name="endDate", curie=NEON.curie('endDate'),
                      model_uri=NEON.endDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.initialStageHeight = Slot(uri=NEON.initialStageHeight, name="initialStageHeight", curie=NEON.curie('initialStageHeight'),
                      model_uri=NEON.initialStageHeight, domain=None, range=Optional[float])

slots.endStageHeight = Slot(uri=NEON.endStageHeight, name="endStageHeight", curie=NEON.curie('endStageHeight'),
                      model_uri=NEON.endStageHeight, domain=None, range=Optional[float])

slots.windDescrip = Slot(uri=NEON.windDescrip, name="windDescrip", curie=NEON.curie('windDescrip'),
                      model_uri=NEON.windDescrip, domain=None, range=Optional[str])

slots.cloudCoverPercentage = Slot(uri=NEON.cloudCoverPercentage, name="cloudCoverPercentage", curie=NEON.curie('cloudCoverPercentage'),
                      model_uri=NEON.cloudCoverPercentage, domain=None, range=Optional[float])

slots.precipDescrip = Slot(uri=NEON.precipDescrip, name="precipDescrip", curie=NEON.curie('precipDescrip'),
                      model_uri=NEON.precipDescrip, domain=None, range=Optional[str])

slots.previousRain = Slot(uri=NEON.previousRain, name="previousRain", curie=NEON.curie('previousRain'),
                      model_uri=NEON.previousRain, domain=None, range=Optional[str])

slots.previousRainEvidence = Slot(uri=NEON.previousRainEvidence, name="previousRainEvidence", curie=NEON.curie('previousRainEvidence'),
                      model_uri=NEON.previousRainEvidence, domain=None, range=Optional[str])

slots.airTemperature = Slot(uri=NEON.airTemperature, name="airTemperature", curie=NEON.curie('airTemperature'),
                      model_uri=NEON.airTemperature, domain=None, range=Optional[float])

slots.waterColorDescrip = Slot(uri=NEON.waterColorDescrip, name="waterColorDescrip", curie=NEON.curie('waterColorDescrip'),
                      model_uri=NEON.waterColorDescrip, domain=None, range=Optional[str])

slots.riparianPhenologyDescrip = Slot(uri=NEON.riparianPhenologyDescrip, name="riparianPhenologyDescrip", curie=NEON.curie('riparianPhenologyDescrip'),
                      model_uri=NEON.riparianPhenologyDescrip, domain=None, range=Optional[str])

slots.algaeRemarks = Slot(uri=NEON.algaeRemarks, name="algaeRemarks", curie=NEON.curie('algaeRemarks'),
                      model_uri=NEON.algaeRemarks, domain=None, range=Optional[str])

slots.macrophytesRemarks = Slot(uri=NEON.macrophytesRemarks, name="macrophytesRemarks", curie=NEON.curie('macrophytesRemarks'),
                      model_uri=NEON.macrophytesRemarks, domain=None, range=Optional[str])

slots.leafLitterRemarks = Slot(uri=NEON.leafLitterRemarks, name="leafLitterRemarks", curie=NEON.curie('leafLitterRemarks'),
                      model_uri=NEON.leafLitterRemarks, domain=None, range=Optional[str])

slots.woodyDebrisRemarks = Slot(uri=NEON.woodyDebrisRemarks, name="woodyDebrisRemarks", curie=NEON.curie('woodyDebrisRemarks'),
                      model_uri=NEON.woodyDebrisRemarks, domain=None, range=Optional[str])

slots.oilsRemarks = Slot(uri=NEON.oilsRemarks, name="oilsRemarks", curie=NEON.curie('oilsRemarks'),
                      model_uri=NEON.oilsRemarks, domain=None, range=Optional[str])

slots.trashRemarks = Slot(uri=NEON.trashRemarks, name="trashRemarks", curie=NEON.curie('trashRemarks'),
                      model_uri=NEON.trashRemarks, domain=None, range=Optional[str])

slots.aRecordedBy = Slot(uri=NEON.aRecordedBy, name="aRecordedBy", curie=NEON.curie('aRecordedBy'),
                      model_uri=NEON.aRecordedBy, domain=None, range=Optional[str])

slots.bRecordedBy = Slot(uri=NEON.bRecordedBy, name="bRecordedBy", curie=NEON.curie('bRecordedBy'),
                      model_uri=NEON.bRecordedBy, domain=None, range=Optional[str])

slots.samplingProtocolVersion = Slot(uri=NEON.samplingProtocolVersion, name="samplingProtocolVersion", curie=NEON.curie('samplingProtocolVersion'),
                      model_uri=NEON.samplingProtocolVersion, domain=None, range=Optional[str])

slots.alkMeqPerL = Slot(uri=NEON.alkMeqPerL, name="alkMeqPerL", curie=NEON.curie('alkMeqPerL'),
                      model_uri=NEON.alkMeqPerL, domain=None, range=Optional[float])

slots.alkMgPerL = Slot(uri=NEON.alkMgPerL, name="alkMgPerL", curie=NEON.curie('alkMgPerL'),
                      model_uri=NEON.alkMgPerL, domain=None, range=Optional[float])

slots.ancMeqPerL = Slot(uri=NEON.ancMeqPerL, name="ancMeqPerL", curie=NEON.curie('ancMeqPerL'),
                      model_uri=NEON.ancMeqPerL, domain=None, range=Optional[float])

slots.ancMgPerL = Slot(uri=NEON.ancMgPerL, name="ancMgPerL", curie=NEON.curie('ancMgPerL'),
                      model_uri=NEON.ancMgPerL, domain=None, range=Optional[float])

slots.tpcnVolumeFiltered = Slot(uri=NEON.tpcnVolumeFiltered, name="tpcnVolumeFiltered", curie=NEON.curie('tpcnVolumeFiltered'),
                      model_uri=NEON.tpcnVolumeFiltered, domain=None, range=Optional[float])

slots.duplicateRecordQF = Slot(uri=NEON.duplicateRecordQF, name="duplicateRecordQF", curie=NEON.curie('duplicateRecordQF'),
                      model_uri=NEON.duplicateRecordQF, domain=None, range=Optional[int])

slots.exceedProcessTimeQF = Slot(uri=NEON.exceedProcessTimeQF, name="exceedProcessTimeQF", curie=NEON.curie('exceedProcessTimeQF'),
                      model_uri=NEON.exceedProcessTimeQF, domain=None, range=Optional[int])

slots.exceed72hrTitrationQF = Slot(uri=NEON.exceed72hrTitrationQF, name="exceed72hrTitrationQF", curie=NEON.curie('exceed72hrTitrationQF'),
                      model_uri=NEON.exceed72hrTitrationQF, domain=None, range=Optional[int])

slots.alkRangeTestQF = Slot(uri=NEON.alkRangeTestQF, name="alkRangeTestQF", curie=NEON.curie('alkRangeTestQF'),
                      model_uri=NEON.alkRangeTestQF, domain=None, range=Optional[int])

slots.ancRangeTestQF = Slot(uri=NEON.ancRangeTestQF, name="ancRangeTestQF", curie=NEON.curie('ancRangeTestQF'),
                      model_uri=NEON.ancRangeTestQF, domain=None, range=Optional[int])

slots.exceed24hrTitrationQF = Slot(uri=NEON.exceed24hrTitrationQF, name="exceed24hrTitrationQF", curie=NEON.curie('exceed24hrTitrationQF'),
                      model_uri=NEON.exceed24hrTitrationQF, domain=None, range=Optional[int])

slots.dissolvedOxygen = Slot(uri=NEON.dissolvedOxygen, name="dissolvedOxygen", curie=NEON.curie('dissolvedOxygen'),
                      model_uri=NEON.dissolvedOxygen, domain=None, range=Optional[float])

slots.RHSensorErrorQAQCRpt = Slot(uri=NEON.RHSensorErrorQAQCRpt, name="RHSensorErrorQAQCRpt", curie=NEON.curie('RHSensorErrorQAQCRpt'),
                      model_uri=NEON.RHSensorErrorQAQCRpt, domain=None, range=Optional[str])

slots.pitID = Slot(uri=NEON.pitID, name="pitID", curie=NEON.curie('pitID'),
                      model_uri=NEON.pitID, domain=None, range=Optional[str])

slots.pitDepth = Slot(uri=NEON.pitDepth, name="pitDepth", curie=NEON.curie('pitDepth'),
                      model_uri=NEON.pitDepth, domain=None, range=Optional[float])

slots.recordedByA = Slot(uri=NEON.recordedByA, name="recordedByA", curie=NEON.curie('recordedByA'),
                      model_uri=NEON.recordedByA, domain=None, range=Optional[str])

slots.recordedByB = Slot(uri=NEON.recordedByB, name="recordedByB", curie=NEON.curie('recordedByB'),
                      model_uri=NEON.recordedByB, domain=None, range=Optional[str])

slots.recordedByC = Slot(uri=NEON.recordedByC, name="recordedByC", curie=NEON.curie('recordedByC'),
                      model_uri=NEON.recordedByC, domain=None, range=Optional[str])

slots.recordedByD = Slot(uri=NEON.recordedByD, name="recordedByD", curie=NEON.curie('recordedByD'),
                      model_uri=NEON.recordedByD, domain=None, range=Optional[str])

slots.recordedByE = Slot(uri=NEON.recordedByE, name="recordedByE", curie=NEON.curie('recordedByE'),
                      model_uri=NEON.recordedByE, domain=None, range=Optional[str])

slots.rootsCollectedByA = Slot(uri=NEON.rootsCollectedByA, name="rootsCollectedByA", curie=NEON.curie('rootsCollectedByA'),
                      model_uri=NEON.rootsCollectedByA, domain=None, range=Optional[str])

slots.rootsCollectedByB = Slot(uri=NEON.rootsCollectedByB, name="rootsCollectedByB", curie=NEON.curie('rootsCollectedByB'),
                      model_uri=NEON.rootsCollectedByB, domain=None, range=Optional[str])

slots.rootsCollectedByC = Slot(uri=NEON.rootsCollectedByC, name="rootsCollectedByC", curie=NEON.curie('rootsCollectedByC'),
                      model_uri=NEON.rootsCollectedByC, domain=None, range=Optional[str])

slots.rootsCollectedByD = Slot(uri=NEON.rootsCollectedByD, name="rootsCollectedByD", curie=NEON.curie('rootsCollectedByD'),
                      model_uri=NEON.rootsCollectedByD, domain=None, range=Optional[str])

slots.safetyPersonnelA = Slot(uri=NEON.safetyPersonnelA, name="safetyPersonnelA", curie=NEON.curie('safetyPersonnelA'),
                      model_uri=NEON.safetyPersonnelA, domain=None, range=Optional[str])

slots.safetyPersonnelB = Slot(uri=NEON.safetyPersonnelB, name="safetyPersonnelB", curie=NEON.curie('safetyPersonnelB'),
                      model_uri=NEON.safetyPersonnelB, domain=None, range=Optional[str])

slots.safetyPersonnelC = Slot(uri=NEON.safetyPersonnelC, name="safetyPersonnelC", curie=NEON.curie('safetyPersonnelC'),
                      model_uri=NEON.safetyPersonnelC, domain=None, range=Optional[str])

slots.fccConstructionSupervisorA = Slot(uri=NEON.fccConstructionSupervisorA, name="fccConstructionSupervisorA", curie=NEON.curie('fccConstructionSupervisorA'),
                      model_uri=NEON.fccConstructionSupervisorA, domain=None, range=Optional[str])

slots.fccConstructionSupervisorB = Slot(uri=NEON.fccConstructionSupervisorB, name="fccConstructionSupervisorB", curie=NEON.curie('fccConstructionSupervisorB'),
                      model_uri=NEON.fccConstructionSupervisorB, domain=None, range=Optional[str])

slots.fccConstructionSupervisorC = Slot(uri=NEON.fccConstructionSupervisorC, name="fccConstructionSupervisorC", curie=NEON.curie('fccConstructionSupervisorC'),
                      model_uri=NEON.fccConstructionSupervisorC, domain=None, range=Optional[str])

slots.fccConstructionContractor = Slot(uri=NEON.fccConstructionContractor, name="fccConstructionContractor", curie=NEON.curie('fccConstructionContractor'),
                      model_uri=NEON.fccConstructionContractor, domain=None, range=Optional[str])

slots.soilProfileDescriberA = Slot(uri=NEON.soilProfileDescriberA, name="soilProfileDescriberA", curie=NEON.curie('soilProfileDescriberA'),
                      model_uri=NEON.soilProfileDescriberA, domain=None, range=Optional[str])

slots.soilProfileDescriberB = Slot(uri=NEON.soilProfileDescriberB, name="soilProfileDescriberB", curie=NEON.curie('soilProfileDescriberB'),
                      model_uri=NEON.soilProfileDescriberB, domain=None, range=Optional[str])

slots.soilProfileDescriberC = Slot(uri=NEON.soilProfileDescriberC, name="soilProfileDescriberC", curie=NEON.curie('soilProfileDescriberC'),
                      model_uri=NEON.soilProfileDescriberC, domain=None, range=Optional[str])

slots.soilProfileDescriberD = Slot(uri=NEON.soilProfileDescriberD, name="soilProfileDescriberD", curie=NEON.curie('soilProfileDescriberD'),
                      model_uri=NEON.soilProfileDescriberD, domain=None, range=Optional[str])

slots.soilProfileDescriberE = Slot(uri=NEON.soilProfileDescriberE, name="soilProfileDescriberE", curie=NEON.curie('soilProfileDescriberE'),
                      model_uri=NEON.soilProfileDescriberE, domain=None, range=Optional[str])

slots.soilProfileDescriberF = Slot(uri=NEON.soilProfileDescriberF, name="soilProfileDescriberF", curie=NEON.curie('soilProfileDescriberF'),
                      model_uri=NEON.soilProfileDescriberF, domain=None, range=Optional[str])

slots.soilProfileDescriberInst = Slot(uri=NEON.soilProfileDescriberInst, name="soilProfileDescriberInst", curie=NEON.curie('soilProfileDescriberInst'),
                      model_uri=NEON.soilProfileDescriberInst, domain=None, range=Optional[str])

slots.nrcsDescriptionID = Slot(uri=NEON.nrcsDescriptionID, name="nrcsDescriptionID", curie=NEON.curie('nrcsDescriptionID'),
                      model_uri=NEON.nrcsDescriptionID, domain=None, range=Optional[str])

slots.soilSeries = Slot(uri=NEON.soilSeries, name="soilSeries", curie=NEON.curie('soilSeries'),
                      model_uri=NEON.soilSeries, domain=None, range=Optional[str])

slots.soilFamily = Slot(uri=NEON.soilFamily, name="soilFamily", curie=NEON.curie('soilFamily'),
                      model_uri=NEON.soilFamily, domain=None, range=Optional[str])

slots.soilSubgroup = Slot(uri=NEON.soilSubgroup, name="soilSubgroup", curie=NEON.curie('soilSubgroup'),
                      model_uri=NEON.soilSubgroup, domain=None, range=Optional[str])

slots.soilGreatGroup = Slot(uri=NEON.soilGreatGroup, name="soilGreatGroup", curie=NEON.curie('soilGreatGroup'),
                      model_uri=NEON.soilGreatGroup, domain=None, range=Optional[str])

slots.soilSuborder = Slot(uri=NEON.soilSuborder, name="soilSuborder", curie=NEON.curie('soilSuborder'),
                      model_uri=NEON.soilSuborder, domain=None, range=Optional[str])

slots.soilOrder = Slot(uri=NEON.soilOrder, name="soilOrder", curie=NEON.curie('soilOrder'),
                      model_uri=NEON.soilOrder, domain=None, range=Optional[str])

slots.horizonID = Slot(uri=NEON.horizonID, name="horizonID", curie=NEON.curie('horizonID'),
                      model_uri=NEON.horizonID, domain=None, range=Optional[str])

slots.horizonTempName = Slot(uri=NEON.horizonTempName, name="horizonTempName", curie=NEON.curie('horizonTempName'),
                      model_uri=NEON.horizonTempName, domain=None, range=Optional[str])

slots.horizonName = Slot(uri=NEON.horizonName, name="horizonName", curie=NEON.curie('horizonName'),
                      model_uri=NEON.horizonName, domain=None, range=Optional[str])

slots.horizonTopDepth = Slot(uri=NEON.horizonTopDepth, name="horizonTopDepth", curie=NEON.curie('horizonTopDepth'),
                      model_uri=NEON.horizonTopDepth, domain=None, range=Optional[float])

slots.horizonBottomDepth = Slot(uri=NEON.horizonBottomDepth, name="horizonBottomDepth", curie=NEON.curie('horizonBottomDepth'),
                      model_uri=NEON.horizonBottomDepth, domain=None, range=Optional[float])

slots.laboratoryName = Slot(uri=NEON.laboratoryName, name="laboratoryName", curie=NEON.curie('laboratoryName'),
                      model_uri=NEON.laboratoryName, domain=None, range=Optional[str])

slots.labProjID = Slot(uri=NEON.labProjID, name="labProjID", curie=NEON.curie('labProjID'),
                      model_uri=NEON.labProjID, domain=None, range=Optional[str])

slots.bulkDensID = Slot(uri=NEON.bulkDensID, name="bulkDensID", curie=NEON.curie('bulkDensID'),
                      model_uri=NEON.bulkDensID, domain=None, range=Optional[str])

slots.bulkDensIDnrcs = Slot(uri=NEON.bulkDensIDnrcs, name="bulkDensIDnrcs", curie=NEON.curie('bulkDensIDnrcs'),
                      model_uri=NEON.bulkDensIDnrcs, domain=None, range=Optional[str])

slots.bulkDensHorizonProportion = Slot(uri=NEON.bulkDensHorizonProportion, name="bulkDensHorizonProportion", curie=NEON.curie('bulkDensHorizonProportion'),
                      model_uri=NEON.bulkDensHorizonProportion, domain=None, range=Optional[float])

slots.bulkDensSampleType = Slot(uri=NEON.bulkDensSampleType, name="bulkDensSampleType", curie=NEON.curie('bulkDensSampleType'),
                      model_uri=NEON.bulkDensSampleType, domain=None, range=Optional[str])

slots.bulkDensCenterDepth = Slot(uri=NEON.bulkDensCenterDepth, name="bulkDensCenterDepth", curie=NEON.curie('bulkDensCenterDepth'),
                      model_uri=NEON.bulkDensCenterDepth, domain=None, range=Optional[float])

slots.bulkDensDiameter = Slot(uri=NEON.bulkDensDiameter, name="bulkDensDiameter", curie=NEON.curie('bulkDensDiameter'),
                      model_uri=NEON.bulkDensDiameter, domain=None, range=Optional[float])

slots.bulkDensLength = Slot(uri=NEON.bulkDensLength, name="bulkDensLength", curie=NEON.curie('bulkDensLength'),
                      model_uri=NEON.bulkDensLength, domain=None, range=Optional[float])

slots.bulkDensVolume = Slot(uri=NEON.bulkDensVolume, name="bulkDensVolume", curie=NEON.curie('bulkDensVolume'),
                      model_uri=NEON.bulkDensVolume, domain=None, range=Optional[float])

slots.bulkDensTopDepth = Slot(uri=NEON.bulkDensTopDepth, name="bulkDensTopDepth", curie=NEON.curie('bulkDensTopDepth'),
                      model_uri=NEON.bulkDensTopDepth, domain=None, range=Optional[float])

slots.bulkDensBottomDepth = Slot(uri=NEON.bulkDensBottomDepth, name="bulkDensBottomDepth", curie=NEON.curie('bulkDensBottomDepth'),
                      model_uri=NEON.bulkDensBottomDepth, domain=None, range=Optional[float])

slots.bulkDensOrientation = Slot(uri=NEON.bulkDensOrientation, name="bulkDensOrientation", curie=NEON.curie('bulkDensOrientation'),
                      model_uri=NEON.bulkDensOrientation, domain=None, range=Optional[str])

slots.bulkDensWetWeight = Slot(uri=NEON.bulkDensWetWeight, name="bulkDensWetWeight", curie=NEON.curie('bulkDensWetWeight'),
                      model_uri=NEON.bulkDensWetWeight, domain=None, range=Optional[float])

slots.bulkDensDryWeight = Slot(uri=NEON.bulkDensDryWeight, name="bulkDensDryWeight", curie=NEON.curie('bulkDensDryWeight'),
                      model_uri=NEON.bulkDensDryWeight, domain=None, range=Optional[float])

slots.bulkDensCoarseFragWeight = Slot(uri=NEON.bulkDensCoarseFragWeight, name="bulkDensCoarseFragWeight", curie=NEON.curie('bulkDensCoarseFragWeight'),
                      model_uri=NEON.bulkDensCoarseFragWeight, domain=None, range=Optional[float])

slots.bulkDensCoarseFragDens = Slot(uri=NEON.bulkDensCoarseFragDens, name="bulkDensCoarseFragDens", curie=NEON.curie('bulkDensCoarseFragDens'),
                      model_uri=NEON.bulkDensCoarseFragDens, domain=None, range=Optional[float])

slots.bulkDensCoarseFragDensMeas = Slot(uri=NEON.bulkDensCoarseFragDensMeas, name="bulkDensCoarseFragDensMeas", curie=NEON.curie('bulkDensCoarseFragDensMeas'),
                      model_uri=NEON.bulkDensCoarseFragDensMeas, domain=None, range=Optional[str])

slots.bulkDensExclCoarseFrag = Slot(uri=NEON.bulkDensExclCoarseFrag, name="bulkDensExclCoarseFrag", curie=NEON.curie('bulkDensExclCoarseFrag'),
                      model_uri=NEON.bulkDensExclCoarseFrag, domain=None, range=Optional[float])

slots.bulkDensInclCoarseFrag = Slot(uri=NEON.bulkDensInclCoarseFrag, name="bulkDensInclCoarseFrag", curie=NEON.curie('bulkDensInclCoarseFrag'),
                      model_uri=NEON.bulkDensInclCoarseFrag, domain=None, range=Optional[float])

slots.coarseFragWeight = Slot(uri=NEON.coarseFragWeight, name="coarseFragWeight", curie=NEON.curie('coarseFragWeight'),
                      model_uri=NEON.coarseFragWeight, domain=None, range=Optional[float])

slots.coarseFragVolume = Slot(uri=NEON.coarseFragVolume, name="coarseFragVolume", curie=NEON.curie('coarseFragVolume'),
                      model_uri=NEON.coarseFragVolume, domain=None, range=Optional[float])

slots.biogeoID = Slot(uri=NEON.biogeoID, name="biogeoID", curie=NEON.curie('biogeoID'),
                      model_uri=NEON.biogeoID, domain=None, range=Optional[str])

slots.biogeoIDnrcs = Slot(uri=NEON.biogeoIDnrcs, name="biogeoIDnrcs", curie=NEON.curie('biogeoIDnrcs'),
                      model_uri=NEON.biogeoIDnrcs, domain=None, range=Optional[str])

slots.biogeoHorizonProportion = Slot(uri=NEON.biogeoHorizonProportion, name="biogeoHorizonProportion", curie=NEON.curie('biogeoHorizonProportion'),
                      model_uri=NEON.biogeoHorizonProportion, domain=None, range=Optional[float])

slots.biogeoSampleType = Slot(uri=NEON.biogeoSampleType, name="biogeoSampleType", curie=NEON.curie('biogeoSampleType'),
                      model_uri=NEON.biogeoSampleType, domain=None, range=Optional[str])

slots.biogeoTopDepth = Slot(uri=NEON.biogeoTopDepth, name="biogeoTopDepth", curie=NEON.curie('biogeoTopDepth'),
                      model_uri=NEON.biogeoTopDepth, domain=None, range=Optional[float])

slots.biogeoBottomDepth = Slot(uri=NEON.biogeoBottomDepth, name="biogeoBottomDepth", curie=NEON.curie('biogeoBottomDepth'),
                      model_uri=NEON.biogeoBottomDepth, domain=None, range=Optional[float])

slots.biogeoCenterDepth = Slot(uri=NEON.biogeoCenterDepth, name="biogeoCenterDepth", curie=NEON.curie('biogeoCenterDepth'),
                      model_uri=NEON.biogeoCenterDepth, domain=None, range=Optional[float])

slots.biogeoTotWeight = Slot(uri=NEON.biogeoTotWeight, name="biogeoTotWeight", curie=NEON.curie('biogeoTotWeight'),
                      model_uri=NEON.biogeoTotWeight, domain=None, range=Optional[float])

slots.biogeoTotWeight2To5 = Slot(uri=NEON.biogeoTotWeight2To5, name="biogeoTotWeight2To5", curie=NEON.curie('biogeoTotWeight2To5'),
                      model_uri=NEON.biogeoTotWeight2To5, domain=None, range=Optional[float])

slots.biogeoTotWeight5To20 = Slot(uri=NEON.biogeoTotWeight5To20, name="biogeoTotWeight5To20", curie=NEON.curie('biogeoTotWeight5To20'),
                      model_uri=NEON.biogeoTotWeight5To20, domain=None, range=Optional[float])

slots.biogeoTotWeight20To75 = Slot(uri=NEON.biogeoTotWeight20To75, name="biogeoTotWeight20To75", curie=NEON.curie('biogeoTotWeight20To75'),
                      model_uri=NEON.biogeoTotWeight20To75, domain=None, range=Optional[float])

slots.airDryOvenDry = Slot(uri=NEON.airDryOvenDry, name="airDryOvenDry", curie=NEON.curie('airDryOvenDry'),
                      model_uri=NEON.airDryOvenDry, domain=None, range=Optional[float])

slots.gypsum = Slot(uri=NEON.gypsum, name="gypsum", curie=NEON.curie('gypsum'),
                      model_uri=NEON.gypsum, domain=None, range=Optional[float])

slots.caco3 = Slot(uri=NEON.caco3, name="caco3", curie=NEON.curie('caco3'),
                      model_uri=NEON.caco3, domain=None, range=Optional[float])

slots.caNh4d = Slot(uri=NEON.caNh4d, name="caNh4d", curie=NEON.curie('caNh4d'),
                      model_uri=NEON.caNh4d, domain=None, range=Optional[float])

slots.kNh4d = Slot(uri=NEON.kNh4d, name="kNh4d", curie=NEON.curie('kNh4d'),
                      model_uri=NEON.kNh4d, domain=None, range=Optional[float])

slots.mgNh4d = Slot(uri=NEON.mgNh4d, name="mgNh4d", curie=NEON.curie('mgNh4d'),
                      model_uri=NEON.mgNh4d, domain=None, range=Optional[float])

slots.naNh4d = Slot(uri=NEON.naNh4d, name="naNh4d", curie=NEON.curie('naNh4d'),
                      model_uri=NEON.naNh4d, domain=None, range=Optional[float])

slots.cecdNh4 = Slot(uri=NEON.cecdNh4, name="cecdNh4", curie=NEON.curie('cecdNh4'),
                      model_uri=NEON.cecdNh4, domain=None, range=Optional[float])

slots.alSatCecd33 = Slot(uri=NEON.alSatCecd33, name="alSatCecd33", curie=NEON.curie('alSatCecd33'),
                      model_uri=NEON.alSatCecd33, domain=None, range=Optional[float])

slots.baseSumCecd10 = Slot(uri=NEON.baseSumCecd10, name="baseSumCecd10", curie=NEON.curie('baseSumCecd10'),
                      model_uri=NEON.baseSumCecd10, domain=None, range=Optional[float])

slots.bsesatCecd10 = Slot(uri=NEON.bsesatCecd10, name="bsesatCecd10", curie=NEON.curie('bsesatCecd10'),
                      model_uri=NEON.bsesatCecd10, domain=None, range=Optional[float])

slots.ececCecd33 = Slot(uri=NEON.ececCecd33, name="ececCecd33", curie=NEON.curie('ececCecd33'),
                      model_uri=NEON.ececCecd33, domain=None, range=Optional[float])

slots.alKcl = Slot(uri=NEON.alKcl, name="alKcl", curie=NEON.curie('alKcl'),
                      model_uri=NEON.alKcl, domain=None, range=Optional[float])

slots.feKcl = Slot(uri=NEON.feKcl, name="feKcl", curie=NEON.curie('feKcl'),
                      model_uri=NEON.feKcl, domain=None, range=Optional[float])

slots.mnKcl = Slot(uri=NEON.mnKcl, name="mnKcl", curie=NEON.curie('mnKcl'),
                      model_uri=NEON.mnKcl, domain=None, range=Optional[float])

slots.alMjelm = Slot(uri=NEON.alMjelm, name="alMjelm", curie=NEON.curie('alMjelm'),
                      model_uri=NEON.alMjelm, domain=None, range=Optional[float])

slots.caMjelm = Slot(uri=NEON.caMjelm, name="caMjelm", curie=NEON.curie('caMjelm'),
                      model_uri=NEON.caMjelm, domain=None, range=Optional[float])

slots.feMjelm = Slot(uri=NEON.feMjelm, name="feMjelm", curie=NEON.curie('feMjelm'),
                      model_uri=NEON.feMjelm, domain=None, range=Optional[float])

slots.kMjelm = Slot(uri=NEON.kMjelm, name="kMjelm", curie=NEON.curie('kMjelm'),
                      model_uri=NEON.kMjelm, domain=None, range=Optional[float])

slots.mgMjelm = Slot(uri=NEON.mgMjelm, name="mgMjelm", curie=NEON.curie('mgMjelm'),
                      model_uri=NEON.mgMjelm, domain=None, range=Optional[float])

slots.mnMjelm = Slot(uri=NEON.mnMjelm, name="mnMjelm", curie=NEON.curie('mnMjelm'),
                      model_uri=NEON.mnMjelm, domain=None, range=Optional[float])

slots.naMjelm = Slot(uri=NEON.naMjelm, name="naMjelm", curie=NEON.curie('naMjelm'),
                      model_uri=NEON.naMjelm, domain=None, range=Optional[float])

slots.pMjelm = Slot(uri=NEON.pMjelm, name="pMjelm", curie=NEON.curie('pMjelm'),
                      model_uri=NEON.pMjelm, domain=None, range=Optional[float])

slots.siMjelm = Slot(uri=NEON.siMjelm, name="siMjelm", curie=NEON.curie('siMjelm'),
                      model_uri=NEON.siMjelm, domain=None, range=Optional[float])

slots.srMjelm = Slot(uri=NEON.srMjelm, name="srMjelm", curie=NEON.curie('srMjelm'),
                      model_uri=NEON.srMjelm, domain=None, range=Optional[float])

slots.tiMjelm = Slot(uri=NEON.tiMjelm, name="tiMjelm", curie=NEON.curie('tiMjelm'),
                      model_uri=NEON.tiMjelm, domain=None, range=Optional[float])

slots.zrMjelm = Slot(uri=NEON.zrMjelm, name="zrMjelm", curie=NEON.curie('zrMjelm'),
                      model_uri=NEON.zrMjelm, domain=None, range=Optional[float])

slots.phCacl2 = Slot(uri=NEON.phCacl2, name="phCacl2", curie=NEON.curie('phCacl2'),
                      model_uri=NEON.phCacl2, domain=None, range=Optional[float])

slots.phH2o = Slot(uri=NEON.phH2o, name="phH2o", curie=NEON.curie('phH2o'),
                      model_uri=NEON.phH2o, domain=None, range=Optional[float])

slots.ec12pre = Slot(uri=NEON.ec12pre, name="ec12pre", curie=NEON.curie('ec12pre'),
                      model_uri=NEON.ec12pre, domain=None, range=Optional[float])

slots.bSatx = Slot(uri=NEON.bSatx, name="bSatx", curie=NEON.curie('bSatx'),
                      model_uri=NEON.bSatx, domain=None, range=Optional[float])

slots.brSatx = Slot(uri=NEON.brSatx, name="brSatx", curie=NEON.curie('brSatx'),
                      model_uri=NEON.brSatx, domain=None, range=Optional[float])

slots.caSatx = Slot(uri=NEON.caSatx, name="caSatx", curie=NEON.curie('caSatx'),
                      model_uri=NEON.caSatx, domain=None, range=Optional[float])

slots.clSatx = Slot(uri=NEON.clSatx, name="clSatx", curie=NEON.curie('clSatx'),
                      model_uri=NEON.clSatx, domain=None, range=Optional[float])

slots.co3Satx = Slot(uri=NEON.co3Satx, name="co3Satx", curie=NEON.curie('co3Satx'),
                      model_uri=NEON.co3Satx, domain=None, range=Optional[float])

slots.ecSatp = Slot(uri=NEON.ecSatp, name="ecSatp", curie=NEON.curie('ecSatp'),
                      model_uri=NEON.ecSatp, domain=None, range=Optional[float])

slots.flSatx = Slot(uri=NEON.flSatx, name="flSatx", curie=NEON.curie('flSatx'),
                      model_uri=NEON.flSatx, domain=None, range=Optional[float])

slots.h2oSatx = Slot(uri=NEON.h2oSatx, name="h2oSatx", curie=NEON.curie('h2oSatx'),
                      model_uri=NEON.h2oSatx, domain=None, range=Optional[float])

slots.hco3Sx = Slot(uri=NEON.hco3Sx, name="hco3Sx", curie=NEON.curie('hco3Sx'),
                      model_uri=NEON.hco3Sx, domain=None, range=Optional[float])

slots.kSatx = Slot(uri=NEON.kSatx, name="kSatx", curie=NEON.curie('kSatx'),
                      model_uri=NEON.kSatx, domain=None, range=Optional[float])

slots.mgSatx = Slot(uri=NEON.mgSatx, name="mgSatx", curie=NEON.curie('mgSatx'),
                      model_uri=NEON.mgSatx, domain=None, range=Optional[float])

slots.naSatx = Slot(uri=NEON.naSatx, name="naSatx", curie=NEON.curie('naSatx'),
                      model_uri=NEON.naSatx, domain=None, range=Optional[float])

slots.no2Satx = Slot(uri=NEON.no2Satx, name="no2Satx", curie=NEON.curie('no2Satx'),
                      model_uri=NEON.no2Satx, domain=None, range=Optional[float])

slots.no3Satx = Slot(uri=NEON.no3Satx, name="no3Satx", curie=NEON.curie('no3Satx'),
                      model_uri=NEON.no3Satx, domain=None, range=Optional[float])

slots.pSatx = Slot(uri=NEON.pSatx, name="pSatx", curie=NEON.curie('pSatx'),
                      model_uri=NEON.pSatx, domain=None, range=Optional[float])

slots.phSp = Slot(uri=NEON.phSp, name="phSp", curie=NEON.curie('phSp'),
                      model_uri=NEON.phSp, domain=None, range=Optional[float])

slots.resist = Slot(uri=NEON.resist, name="resist", curie=NEON.curie('resist'),
                      model_uri=NEON.resist, domain=None, range=Optional[float])

slots.so4Satx = Slot(uri=NEON.so4Satx, name="so4Satx", curie=NEON.curie('so4Satx'),
                      model_uri=NEON.so4Satx, domain=None, range=Optional[float])

slots.cTot = Slot(uri=NEON.cTot, name="cTot", curie=NEON.curie('cTot'),
                      model_uri=NEON.cTot, domain=None, range=Optional[float])

slots.nTot = Slot(uri=NEON.nTot, name="nTot", curie=NEON.curie('nTot'),
                      model_uri=NEON.nTot, domain=None, range=Optional[float])

slots.sTot = Slot(uri=NEON.sTot, name="sTot", curie=NEON.curie('sTot'),
                      model_uri=NEON.sTot, domain=None, range=Optional[float])

slots.eoc = Slot(uri=NEON.eoc, name="eoc", curie=NEON.curie('eoc'),
                      model_uri=NEON.eoc, domain=None, range=Optional[float])

slots.sandTot = Slot(uri=NEON.sandTot, name="sandTot", curie=NEON.curie('sandTot'),
                      model_uri=NEON.sandTot, domain=None, range=Optional[float])

slots.siltTot = Slot(uri=NEON.siltTot, name="siltTot", curie=NEON.curie('siltTot'),
                      model_uri=NEON.siltTot, domain=None, range=Optional[float])

slots.clayTot = Slot(uri=NEON.clayTot, name="clayTot", curie=NEON.curie('clayTot'),
                      model_uri=NEON.clayTot, domain=None, range=Optional[float])

slots.clayFine = Slot(uri=NEON.clayFine, name="clayFine", curie=NEON.curie('clayFine'),
                      model_uri=NEON.clayFine, domain=None, range=Optional[float])

slots.co3Clay = Slot(uri=NEON.co3Clay, name="co3Clay", curie=NEON.curie('co3Clay'),
                      model_uri=NEON.co3Clay, domain=None, range=Optional[float])

slots.siltFine = Slot(uri=NEON.siltFine, name="siltFine", curie=NEON.curie('siltFine'),
                      model_uri=NEON.siltFine, domain=None, range=Optional[float])

slots.siltCoarse = Slot(uri=NEON.siltCoarse, name="siltCoarse", curie=NEON.curie('siltCoarse'),
                      model_uri=NEON.siltCoarse, domain=None, range=Optional[float])

slots.sandCoarse = Slot(uri=NEON.sandCoarse, name="sandCoarse", curie=NEON.curie('sandCoarse'),
                      model_uri=NEON.sandCoarse, domain=None, range=Optional[float])

slots.sandFine = Slot(uri=NEON.sandFine, name="sandFine", curie=NEON.curie('sandFine'),
                      model_uri=NEON.sandFine, domain=None, range=Optional[float])

slots.sandMedium = Slot(uri=NEON.sandMedium, name="sandMedium", curie=NEON.curie('sandMedium'),
                      model_uri=NEON.sandMedium, domain=None, range=Optional[float])

slots.sandVeryCoarse = Slot(uri=NEON.sandVeryCoarse, name="sandVeryCoarse", curie=NEON.curie('sandVeryCoarse'),
                      model_uri=NEON.sandVeryCoarse, domain=None, range=Optional[float])

slots.sandVeryFine = Slot(uri=NEON.sandVeryFine, name="sandVeryFine", curie=NEON.curie('sandVeryFine'),
                      model_uri=NEON.sandVeryFine, domain=None, range=Optional[float])

slots.coarseFrag2To5 = Slot(uri=NEON.coarseFrag2To5, name="coarseFrag2To5", curie=NEON.curie('coarseFrag2To5'),
                      model_uri=NEON.coarseFrag2To5, domain=None, range=Optional[float])

slots.coarseFrag5To20 = Slot(uri=NEON.coarseFrag5To20, name="coarseFrag5To20", curie=NEON.curie('coarseFrag5To20'),
                      model_uri=NEON.coarseFrag5To20, domain=None, range=Optional[float])

slots.archiveID = Slot(uri=NEON.archiveID, name="archiveID", curie=NEON.curie('archiveID'),
                      model_uri=NEON.archiveID, domain=None, range=Optional[str])

slots.archiveTopDepth = Slot(uri=NEON.archiveTopDepth, name="archiveTopDepth", curie=NEON.curie('archiveTopDepth'),
                      model_uri=NEON.archiveTopDepth, domain=None, range=Optional[float])

slots.archiveBottomDepth = Slot(uri=NEON.archiveBottomDepth, name="archiveBottomDepth", curie=NEON.curie('archiveBottomDepth'),
                      model_uri=NEON.archiveBottomDepth, domain=None, range=Optional[float])

slots.windDirMinimum = Slot(uri=NEON.windDirMinimum, name="windDirMinimum", curie=NEON.curie('windDirMinimum'),
                      model_uri=NEON.windDirMinimum, domain=None, range=Optional[float])

slots.windDirMaximum = Slot(uri=NEON.windDirMaximum, name="windDirMaximum", curie=NEON.curie('windDirMaximum'),
                      model_uri=NEON.windDirMaximum, domain=None, range=Optional[float])

slots.windSpeedCalmQAQCRpt = Slot(uri=NEON.windSpeedCalmQAQCRpt, name="windSpeedCalmQAQCRpt", curie=NEON.curie('windSpeedCalmQAQCRpt'),
                      model_uri=NEON.windSpeedCalmQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedCalmFailQM = Slot(uri=NEON.windSpeedCalmFailQM, name="windSpeedCalmFailQM", curie=NEON.curie('windSpeedCalmFailQM'),
                      model_uri=NEON.windSpeedCalmFailQM, domain=None, range=Optional[float])

slots.windSpeedCalmPassQM = Slot(uri=NEON.windSpeedCalmPassQM, name="windSpeedCalmPassQM", curie=NEON.curie('windSpeedCalmPassQM'),
                      model_uri=NEON.windSpeedCalmPassQM, domain=None, range=Optional[float])

slots.windSpeedCalmNAQM = Slot(uri=NEON.windSpeedCalmNAQM, name="windSpeedCalmNAQM", curie=NEON.curie('windSpeedCalmNAQM'),
                      model_uri=NEON.windSpeedCalmNAQM, domain=None, range=Optional[float])

slots.windDirDistortedFlowQAQCRpt = Slot(uri=NEON.windDirDistortedFlowQAQCRpt, name="windDirDistortedFlowQAQCRpt", curie=NEON.curie('windDirDistortedFlowQAQCRpt'),
                      model_uri=NEON.windDirDistortedFlowQAQCRpt, domain=None, range=Optional[str])

slots.windDirDistortedFlowFailQM = Slot(uri=NEON.windDirDistortedFlowFailQM, name="windDirDistortedFlowFailQM", curie=NEON.curie('windDirDistortedFlowFailQM'),
                      model_uri=NEON.windDirDistortedFlowFailQM, domain=None, range=Optional[float])

slots.windDirDistortedFlowPassQM = Slot(uri=NEON.windDirDistortedFlowPassQM, name="windDirDistortedFlowPassQM", curie=NEON.curie('windDirDistortedFlowPassQM'),
                      model_uri=NEON.windDirDistortedFlowPassQM, domain=None, range=Optional[float])

slots.windDirDistortedFlowNAQM = Slot(uri=NEON.windDirDistortedFlowNAQM, name="windDirDistortedFlowNAQM", curie=NEON.curie('windDirDistortedFlowNAQM'),
                      model_uri=NEON.windDirDistortedFlowNAQM, domain=None, range=Optional[float])

slots.dirRadDirectionalQAQCRpt = Slot(uri=NEON.dirRadDirectionalQAQCRpt, name="dirRadDirectionalQAQCRpt", curie=NEON.curie('dirRadDirectionalQAQCRpt'),
                      model_uri=NEON.dirRadDirectionalQAQCRpt, domain=None, range=Optional[str])

slots.dirRadDirectionalFailQM = Slot(uri=NEON.dirRadDirectionalFailQM, name="dirRadDirectionalFailQM", curie=NEON.curie('dirRadDirectionalFailQM'),
                      model_uri=NEON.dirRadDirectionalFailQM, domain=None, range=Optional[float])

slots.dirRadDirectionalPassQM = Slot(uri=NEON.dirRadDirectionalPassQM, name="dirRadDirectionalPassQM", curie=NEON.curie('dirRadDirectionalPassQM'),
                      model_uri=NEON.dirRadDirectionalPassQM, domain=None, range=Optional[float])

slots.dirRadDirectionalNAQM = Slot(uri=NEON.dirRadDirectionalNAQM, name="dirRadDirectionalNAQM", curie=NEON.curie('dirRadDirectionalNAQM'),
                      model_uri=NEON.dirRadDirectionalNAQM, domain=None, range=Optional[float])

slots.uVectorComponent = Slot(uri=NEON.uVectorComponent, name="uVectorComponent", curie=NEON.curie('uVectorComponent'),
                      model_uri=NEON.uVectorComponent, domain=None, range=Optional[float])

slots.vVectorComponent = Slot(uri=NEON.vVectorComponent, name="vVectorComponent", curie=NEON.curie('vVectorComponent'),
                      model_uri=NEON.vVectorComponent, domain=None, range=Optional[float])

slots.soundSpeed = Slot(uri=NEON.soundSpeed, name="soundSpeed", curie=NEON.curie('soundSpeed'),
                      model_uri=NEON.soundSpeed, domain=None, range=Optional[float])

slots.sensorTemp = Slot(uri=NEON.sensorTemp, name="sensorTemp", curie=NEON.curie('sensorTemp'),
                      model_uri=NEON.sensorTemp, domain=None, range=Optional[float])

slots.2dWindSensorStatus = Slot(uri=NEON['2dWindSensorStatus'], name="2dWindSensorStatus", curie=NEON.curie('2dWindSensorStatus'),
                      model_uri=NEON['2dWindSensorStatus'], domain=None, range=Optional[int])

slots.rawBarometricPressure = Slot(uri=NEON.rawBarometricPressure, name="rawBarometricPressure", curie=NEON.curie('rawBarometricPressure'),
                      model_uri=NEON.rawBarometricPressure, domain=None, range=Optional[float])

slots.sensorStatus = Slot(uri=NEON.sensorStatus, name="sensorStatus", curie=NEON.curie('sensorStatus'),
                      model_uri=NEON.sensorStatus, domain=None, range=Optional[int])

slots.infraredThermopileOutput = Slot(uri=NEON.infraredThermopileOutput, name="infraredThermopileOutput", curie=NEON.curie('infraredThermopileOutput'),
                      model_uri=NEON.infraredThermopileOutput, domain=None, range=Optional[float])

slots.sensorResistance = Slot(uri=NEON.sensorResistance, name="sensorResistance", curie=NEON.curie('sensorResistance'),
                      model_uri=NEON.sensorResistance, domain=None, range=Optional[float])

slots.inNetRadPyranometer = Slot(uri=NEON.inNetRadPyranometer, name="inNetRadPyranometer", curie=NEON.curie('inNetRadPyranometer'),
                      model_uri=NEON.inNetRadPyranometer, domain=None, range=Optional[float])

slots.outNetRadPyranometer = Slot(uri=NEON.outNetRadPyranometer, name="outNetRadPyranometer", curie=NEON.curie('outNetRadPyranometer'),
                      model_uri=NEON.outNetRadPyranometer, domain=None, range=Optional[float])

slots.inNetRadPyrgeometer = Slot(uri=NEON.inNetRadPyrgeometer, name="inNetRadPyrgeometer", curie=NEON.curie('inNetRadPyrgeometer'),
                      model_uri=NEON.inNetRadPyrgeometer, domain=None, range=Optional[float])

slots.outNetRadPyrgeometer = Slot(uri=NEON.outNetRadPyrgeometer, name="outNetRadPyrgeometer", curie=NEON.curie('outNetRadPyrgeometer'),
                      model_uri=NEON.outNetRadPyrgeometer, domain=None, range=Optional[float])

slots.heaterFlag = Slot(uri=NEON.heaterFlag, name="heaterFlag", curie=NEON.curie('heaterFlag'),
                      model_uri=NEON.heaterFlag, domain=None, range=Optional[int])

slots.inPAR = Slot(uri=NEON.inPAR, name="inPAR", curie=NEON.curie('inPAR'),
                      model_uri=NEON.inPAR, domain=None, range=Optional[float])

slots.outPAR = Slot(uri=NEON.outPAR, name="outPAR", curie=NEON.curie('outPAR'),
                      model_uri=NEON.outPAR, domain=None, range=Optional[float])

slots.secPrecipBucketTips = Slot(uri=NEON.secPrecipBucketTips, name="secPrecipBucketTips", curie=NEON.curie('secPrecipBucketTips'),
                      model_uri=NEON.secPrecipBucketTips, domain=None, range=Optional[int])

slots.heaterVoltage = Slot(uri=NEON.heaterVoltage, name="heaterVoltage", curie=NEON.curie('heaterVoltage'),
                      model_uri=NEON.heaterVoltage, domain=None, range=Optional[float])

slots.pyranometerOutput = Slot(uri=NEON.pyranometerOutput, name="pyranometerOutput", curie=NEON.curie('pyranometerOutput'),
                      model_uri=NEON.pyranometerOutput, domain=None, range=Optional[float])

slots.PRTResistance = Slot(uri=NEON.PRTResistance, name="PRTResistance", curie=NEON.curie('PRTResistance'),
                      model_uri=NEON.PRTResistance, domain=None, range=Optional[float])

slots.fanSpeed = Slot(uri=NEON.fanSpeed, name="fanSpeed", curie=NEON.curie('fanSpeed'),
                      model_uri=NEON.fanSpeed, domain=None, range=Optional[float])

slots.heater1Flag = Slot(uri=NEON.heater1Flag, name="heater1Flag", curie=NEON.curie('heater1Flag'),
                      model_uri=NEON.heater1Flag, domain=None, range=Optional[int])

slots.heater2Flag = Slot(uri=NEON.heater2Flag, name="heater2Flag", curie=NEON.curie('heater2Flag'),
                      model_uri=NEON.heater2Flag, domain=None, range=Optional[int])

slots.linePAR = Slot(uri=NEON.linePAR, name="linePAR", curie=NEON.curie('linePAR'),
                      model_uri=NEON.linePAR, domain=None, range=Optional[float])

slots.turbineSpeed = Slot(uri=NEON.turbineSpeed, name="turbineSpeed", curie=NEON.curie('turbineSpeed'),
                      model_uri=NEON.turbineSpeed, domain=None, range=Optional[float])

slots.spectralPhotometerK7 = Slot(uri=NEON.spectralPhotometerK7, name="spectralPhotometerK7", curie=NEON.curie('spectralPhotometerK7'),
                      model_uri=NEON.spectralPhotometerK7, domain=None, range=Optional[str])

slots.rawShortwaveRadiationGlobal = Slot(uri=NEON.rawShortwaveRadiationGlobal, name="rawShortwaveRadiationGlobal", curie=NEON.curie('rawShortwaveRadiationGlobal'),
                      model_uri=NEON.rawShortwaveRadiationGlobal, domain=None, range=Optional[float])

slots.rawShortwaveRadiationDiffuse = Slot(uri=NEON.rawShortwaveRadiationDiffuse, name="rawShortwaveRadiationDiffuse", curie=NEON.curie('rawShortwaveRadiationDiffuse'),
                      model_uri=NEON.rawShortwaveRadiationDiffuse, domain=None, range=Optional[float])

slots.sunPresence = Slot(uri=NEON.sunPresence, name="sunPresence", curie=NEON.curie('sunPresence'),
                      model_uri=NEON.sunPresence, domain=None, range=Optional[int])

slots.pitNamedLocation = Slot(uri=NEON.pitNamedLocation, name="pitNamedLocation", curie=NEON.curie('pitNamedLocation'),
                      model_uri=NEON.pitNamedLocation, domain=None, range=Optional[str])

slots.bulkDensLT2mm = Slot(uri=NEON.bulkDensLT2mm, name="bulkDensLT2mm", curie=NEON.curie('bulkDensLT2mm'),
                      model_uri=NEON.bulkDensLT2mm, domain=None, range=Optional[float])

slots.porosity = Slot(uri=NEON.porosity, name="porosity", curie=NEON.curie('porosity'),
                      model_uri=NEON.porosity, domain=None, range=Optional[float])

slots.bulkDensLT2mmQF = Slot(uri=NEON.bulkDensLT2mmQF, name="bulkDensLT2mmQF", curie=NEON.curie('bulkDensLT2mmQF'),
                      model_uri=NEON.bulkDensLT2mmQF, domain=None, range=Optional[str])

slots.porosityQF = Slot(uri=NEON.porosityQF, name="porosityQF", curie=NEON.curie('porosityQF'),
                      model_uri=NEON.porosityQF, domain=None, range=Optional[str])

slots.textureQF = Slot(uri=NEON.textureQF, name="textureQF", curie=NEON.curie('textureQF'),
                      model_uri=NEON.textureQF, domain=None, range=Optional[str])

slots.sandQF = Slot(uri=NEON.sandQF, name="sandQF", curie=NEON.curie('sandQF'),
                      model_uri=NEON.sandQF, domain=None, range=Optional[str])

slots.siltQF = Slot(uri=NEON.siltQF, name="siltQF", curie=NEON.curie('siltQF'),
                      model_uri=NEON.siltQF, domain=None, range=Optional[str])

slots.archiveLaboratoryName = Slot(uri=NEON.archiveLaboratoryName, name="archiveLaboratoryName", curie=NEON.curie('archiveLaboratoryName'),
                      model_uri=NEON.archiveLaboratoryName, domain=None, range=Optional[str])

slots.windSpeedSensorErrorQAQCRpt = Slot(uri=NEON.windSpeedSensorErrorQAQCRpt, name="windSpeedSensorErrorQAQCRpt", curie=NEON.curie('windSpeedSensorErrorQAQCRpt'),
                      model_uri=NEON.windSpeedSensorErrorQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedSensorErrorFailQM = Slot(uri=NEON.windSpeedSensorErrorFailQM, name="windSpeedSensorErrorFailQM", curie=NEON.curie('windSpeedSensorErrorFailQM'),
                      model_uri=NEON.windSpeedSensorErrorFailQM, domain=None, range=Optional[float])

slots.windSpeedSensorErrorPassQM = Slot(uri=NEON.windSpeedSensorErrorPassQM, name="windSpeedSensorErrorPassQM", curie=NEON.curie('windSpeedSensorErrorPassQM'),
                      model_uri=NEON.windSpeedSensorErrorPassQM, domain=None, range=Optional[float])

slots.windSpeedSensorErrorNAQM = Slot(uri=NEON.windSpeedSensorErrorNAQM, name="windSpeedSensorErrorNAQM", curie=NEON.curie('windSpeedSensorErrorNAQM'),
                      model_uri=NEON.windSpeedSensorErrorNAQM, domain=None, range=Optional[float])

slots.windSpeedCalmWindQF = Slot(uri=NEON.windSpeedCalmWindQF, name="windSpeedCalmWindQF", curie=NEON.curie('windSpeedCalmWindQF'),
                      model_uri=NEON.windSpeedCalmWindQF, domain=None, range=Optional[int])

slots.windDirSensorErrorQAQCRpt = Slot(uri=NEON.windDirSensorErrorQAQCRpt, name="windDirSensorErrorQAQCRpt", curie=NEON.curie('windDirSensorErrorQAQCRpt'),
                      model_uri=NEON.windDirSensorErrorQAQCRpt, domain=None, range=Optional[str])

slots.windDirSensorErrorFailQM = Slot(uri=NEON.windDirSensorErrorFailQM, name="windDirSensorErrorFailQM", curie=NEON.curie('windDirSensorErrorFailQM'),
                      model_uri=NEON.windDirSensorErrorFailQM, domain=None, range=Optional[float])

slots.windDirSensorErrorPassQM = Slot(uri=NEON.windDirSensorErrorPassQM, name="windDirSensorErrorPassQM", curie=NEON.curie('windDirSensorErrorPassQM'),
                      model_uri=NEON.windDirSensorErrorPassQM, domain=None, range=Optional[float])

slots.windDirSensorErrorNAQM = Slot(uri=NEON.windDirSensorErrorNAQM, name="windDirSensorErrorNAQM", curie=NEON.curie('windDirSensorErrorNAQM'),
                      model_uri=NEON.windDirSensorErrorNAQM, domain=None, range=Optional[float])

slots.windDirCalmWindQF = Slot(uri=NEON.windDirCalmWindQF, name="windDirCalmWindQF", curie=NEON.curie('windDirCalmWindQF'),
                      model_uri=NEON.windDirCalmWindQF, domain=None, range=Optional[int])

slots.domainSampleID = Slot(uri=NEON.domainSampleID, name="domainSampleID", curie=NEON.curie('domainSampleID'),
                      model_uri=NEON.domainSampleID, domain=None, range=Optional[str])

slots.RH = Slot(uri=NEON.RH, name="RH", curie=NEON.curie('RH'),
                      model_uri=NEON.RH, domain=None, range=Optional[float])

slots.dewPoint = Slot(uri=NEON.dewPoint, name="dewPoint", curie=NEON.curie('dewPoint'),
                      model_uri=NEON.dewPoint, domain=None, range=Optional[float])

slots.RHStatus = Slot(uri=NEON.RHStatus, name="RHStatus", curie=NEON.curie('RHStatus'),
                      model_uri=NEON.RHStatus, domain=None, range=Optional[float])

slots.dissolvedOxygenSaturation = Slot(uri=NEON.dissolvedOxygenSaturation, name="dissolvedOxygenSaturation", curie=NEON.curie('dissolvedOxygenSaturation'),
                      model_uri=NEON.dissolvedOxygenSaturation, domain=None, range=Optional[float])

slots.collectedBy = Slot(uri=NEON.collectedBy, name="collectedBy", curie=NEON.curie('collectedBy'),
                      model_uri=NEON.collectedBy, domain=None, range=Optional[str])

slots.streamStage = Slot(uri=NEON.streamStage, name="streamStage", curie=NEON.curie('streamStage'),
                      model_uri=NEON.streamStage, domain=None, range=Optional[float])

slots.handheldDeviceID = Slot(uri=NEON.handheldDeviceID, name="handheldDeviceID", curie=NEON.curie('handheldDeviceID'),
                      model_uri=NEON.handheldDeviceID, domain=None, range=Optional[str])

slots.velocitySensorID = Slot(uri=NEON.velocitySensorID, name="velocitySensorID", curie=NEON.curie('velocitySensorID'),
                      model_uri=NEON.velocitySensorID, domain=None, range=Optional[str])

slots.filterParamTime = Slot(uri=NEON.filterParamTime, name="filterParamTime", curie=NEON.curie('filterParamTime'),
                      model_uri=NEON.filterParamTime, domain=None, range=Optional[float])

slots.stationEntryTest = Slot(uri=NEON.stationEntryTest, name="stationEntryTest", curie=NEON.curie('stationEntryTest'),
                      model_uri=NEON.stationEntryTest, domain=None, range=Optional[str])

slots.waterEdge = Slot(uri=NEON.waterEdge, name="waterEdge", curie=NEON.curie('waterEdge'),
                      model_uri=NEON.waterEdge, domain=None, range=Optional[str])

slots.totalDischarge = Slot(uri=NEON.totalDischarge, name="totalDischarge", curie=NEON.curie('totalDischarge'),
                      model_uri=NEON.totalDischarge, domain=None, range=Optional[float])

slots.totalDischargeUnits = Slot(uri=NEON.totalDischargeUnits, name="totalDischargeUnits", curie=NEON.curie('totalDischargeUnits'),
                      model_uri=NEON.totalDischargeUnits, domain=None, range=Optional[str])

slots.rawDischargeFile = Slot(uri=NEON.rawDischargeFile, name="rawDischargeFile", curie=NEON.curie('rawDischargeFile'),
                      model_uri=NEON.rawDischargeFile, domain=None, range=Optional[str])

slots.conductance = Slot(uri=NEON.conductance, name="conductance", curie=NEON.curie('conductance'),
                      model_uri=NEON.conductance, domain=None, range=Optional[float])

slots.batteryVoltage = Slot(uri=NEON.batteryVoltage, name="batteryVoltage", curie=NEON.curie('batteryVoltage'),
                      model_uri=NEON.batteryVoltage, domain=None, range=Optional[float])

slots.conductanceDataQualityID = Slot(uri=NEON.conductanceDataQualityID, name="conductanceDataQualityID", curie=NEON.curie('conductanceDataQualityID'),
                      model_uri=NEON.conductanceDataQualityID, domain=None, range=Optional[float])

slots.groundwaterTemp = Slot(uri=NEON.groundwaterTemp, name="groundwaterTemp", curie=NEON.curie('groundwaterTemp'),
                      model_uri=NEON.groundwaterTemp, domain=None, range=Optional[float])

slots.tempDataQualityID = Slot(uri=NEON.tempDataQualityID, name="tempDataQualityID", curie=NEON.curie('tempDataQualityID'),
                      model_uri=NEON.tempDataQualityID, domain=None, range=Optional[float])

slots.groundwaterPressure = Slot(uri=NEON.groundwaterPressure, name="groundwaterPressure", curie=NEON.curie('groundwaterPressure'),
                      model_uri=NEON.groundwaterPressure, domain=None, range=Optional[float])

slots.pressureDataQualityID = Slot(uri=NEON.pressureDataQualityID, name="pressureDataQualityID", curie=NEON.curie('pressureDataQualityID'),
                      model_uri=NEON.pressureDataQualityID, domain=None, range=Optional[float])

slots.surfaceWaterTemperature = Slot(uri=NEON.surfaceWaterTemperature, name="surfaceWaterTemperature", curie=NEON.curie('surfaceWaterTemperature'),
                      model_uri=NEON.surfaceWaterTemperature, domain=None, range=Optional[float])

slots.surfaceWaterPressure = Slot(uri=NEON.surfaceWaterPressure, name="surfaceWaterPressure", curie=NEON.curie('surfaceWaterPressure'),
                      model_uri=NEON.surfaceWaterPressure, domain=None, range=Optional[float])

slots.nitrate = Slot(uri=NEON.nitrate, name="nitrate", curie=NEON.curie('nitrate'),
                      model_uri=NEON.nitrate, domain=None, range=Optional[float])

slots.nitrogenInNitrate = Slot(uri=NEON.nitrogenInNitrate, name="nitrogenInNitrate", curie=NEON.curie('nitrogenInNitrate'),
                      model_uri=NEON.nitrogenInNitrate, domain=None, range=Optional[float])

slots.abs254nm = Slot(uri=NEON.abs254nm, name="abs254nm", curie=NEON.curie('abs254nm'),
                      model_uri=NEON.abs254nm, domain=None, range=Optional[float])

slots.abs350nm = Slot(uri=NEON.abs350nm, name="abs350nm", curie=NEON.curie('abs350nm'),
                      model_uri=NEON.abs350nm, domain=None, range=Optional[float])

slots.bromideTrace = Slot(uri=NEON.bromideTrace, name="bromideTrace", curie=NEON.curie('bromideTrace'),
                      model_uri=NEON.bromideTrace, domain=None, range=Optional[str])

slots.correctionMethod = Slot(uri=NEON.correctionMethod, name="correctionMethod", curie=NEON.curie('correctionMethod'),
                      model_uri=NEON.correctionMethod, domain=None, range=Optional[float])

slots.spectrometerBackgroundSignal = Slot(uri=NEON.spectrometerBackgroundSignal, name="spectrometerBackgroundSignal", curie=NEON.curie('spectrometerBackgroundSignal'),
                      model_uri=NEON.spectrometerBackgroundSignal, domain=None, range=Optional[float])

slots.integrationTimeFactor = Slot(uri=NEON.integrationTimeFactor, name="integrationTimeFactor", curie=NEON.curie('integrationTimeFactor'),
                      model_uri=NEON.integrationTimeFactor, domain=None, range=Optional[float])

slots.spectrometerSignalAt189.29nm = Slot(uri=NEON['spectrometerSignalAt189.29nm'], name="spectrometerSignalAt189.29nm", curie=NEON.curie('spectrometerSignalAt189.29nm'),
                      model_uri=NEON['spectrometerSignalAt189.29nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt190.08nm = Slot(uri=NEON['spectrometerSignalAt190.08nm'], name="spectrometerSignalAt190.08nm", curie=NEON.curie('spectrometerSignalAt190.08nm'),
                      model_uri=NEON['spectrometerSignalAt190.08nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt190.87nm = Slot(uri=NEON['spectrometerSignalAt190.87nm'], name="spectrometerSignalAt190.87nm", curie=NEON.curie('spectrometerSignalAt190.87nm'),
                      model_uri=NEON['spectrometerSignalAt190.87nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt191.67nm = Slot(uri=NEON['spectrometerSignalAt191.67nm'], name="spectrometerSignalAt191.67nm", curie=NEON.curie('spectrometerSignalAt191.67nm'),
                      model_uri=NEON['spectrometerSignalAt191.67nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt192.46nm = Slot(uri=NEON['spectrometerSignalAt192.46nm'], name="spectrometerSignalAt192.46nm", curie=NEON.curie('spectrometerSignalAt192.46nm'),
                      model_uri=NEON['spectrometerSignalAt192.46nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt193.26nm = Slot(uri=NEON['spectrometerSignalAt193.26nm'], name="spectrometerSignalAt193.26nm", curie=NEON.curie('spectrometerSignalAt193.26nm'),
                      model_uri=NEON['spectrometerSignalAt193.26nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt194.05nm = Slot(uri=NEON['spectrometerSignalAt194.05nm'], name="spectrometerSignalAt194.05nm", curie=NEON.curie('spectrometerSignalAt194.05nm'),
                      model_uri=NEON['spectrometerSignalAt194.05nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt194.85nm = Slot(uri=NEON['spectrometerSignalAt194.85nm'], name="spectrometerSignalAt194.85nm", curie=NEON.curie('spectrometerSignalAt194.85nm'),
                      model_uri=NEON['spectrometerSignalAt194.85nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt195.64nm = Slot(uri=NEON['spectrometerSignalAt195.64nm'], name="spectrometerSignalAt195.64nm", curie=NEON.curie('spectrometerSignalAt195.64nm'),
                      model_uri=NEON['spectrometerSignalAt195.64nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt196.44nm = Slot(uri=NEON['spectrometerSignalAt196.44nm'], name="spectrometerSignalAt196.44nm", curie=NEON.curie('spectrometerSignalAt196.44nm'),
                      model_uri=NEON['spectrometerSignalAt196.44nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt197.23nm = Slot(uri=NEON['spectrometerSignalAt197.23nm'], name="spectrometerSignalAt197.23nm", curie=NEON.curie('spectrometerSignalAt197.23nm'),
                      model_uri=NEON['spectrometerSignalAt197.23nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt198.03nm = Slot(uri=NEON['spectrometerSignalAt198.03nm'], name="spectrometerSignalAt198.03nm", curie=NEON.curie('spectrometerSignalAt198.03nm'),
                      model_uri=NEON['spectrometerSignalAt198.03nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt198.83nm = Slot(uri=NEON['spectrometerSignalAt198.83nm'], name="spectrometerSignalAt198.83nm", curie=NEON.curie('spectrometerSignalAt198.83nm'),
                      model_uri=NEON['spectrometerSignalAt198.83nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt199.62nm = Slot(uri=NEON['spectrometerSignalAt199.62nm'], name="spectrometerSignalAt199.62nm", curie=NEON.curie('spectrometerSignalAt199.62nm'),
                      model_uri=NEON['spectrometerSignalAt199.62nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt200.42nm = Slot(uri=NEON['spectrometerSignalAt200.42nm'], name="spectrometerSignalAt200.42nm", curie=NEON.curie('spectrometerSignalAt200.42nm'),
                      model_uri=NEON['spectrometerSignalAt200.42nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt201.22nm = Slot(uri=NEON['spectrometerSignalAt201.22nm'], name="spectrometerSignalAt201.22nm", curie=NEON.curie('spectrometerSignalAt201.22nm'),
                      model_uri=NEON['spectrometerSignalAt201.22nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt202.02nm = Slot(uri=NEON['spectrometerSignalAt202.02nm'], name="spectrometerSignalAt202.02nm", curie=NEON.curie('spectrometerSignalAt202.02nm'),
                      model_uri=NEON['spectrometerSignalAt202.02nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt202.81nm = Slot(uri=NEON['spectrometerSignalAt202.81nm'], name="spectrometerSignalAt202.81nm", curie=NEON.curie('spectrometerSignalAt202.81nm'),
                      model_uri=NEON['spectrometerSignalAt202.81nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt203.61nm = Slot(uri=NEON['spectrometerSignalAt203.61nm'], name="spectrometerSignalAt203.61nm", curie=NEON.curie('spectrometerSignalAt203.61nm'),
                      model_uri=NEON['spectrometerSignalAt203.61nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt204.41nm = Slot(uri=NEON['spectrometerSignalAt204.41nm'], name="spectrometerSignalAt204.41nm", curie=NEON.curie('spectrometerSignalAt204.41nm'),
                      model_uri=NEON['spectrometerSignalAt204.41nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt205.21nm = Slot(uri=NEON['spectrometerSignalAt205.21nm'], name="spectrometerSignalAt205.21nm", curie=NEON.curie('spectrometerSignalAt205.21nm'),
                      model_uri=NEON['spectrometerSignalAt205.21nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt206.01nm = Slot(uri=NEON['spectrometerSignalAt206.01nm'], name="spectrometerSignalAt206.01nm", curie=NEON.curie('spectrometerSignalAt206.01nm'),
                      model_uri=NEON['spectrometerSignalAt206.01nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt206.81nm = Slot(uri=NEON['spectrometerSignalAt206.81nm'], name="spectrometerSignalAt206.81nm", curie=NEON.curie('spectrometerSignalAt206.81nm'),
                      model_uri=NEON['spectrometerSignalAt206.81nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt207.61nm = Slot(uri=NEON['spectrometerSignalAt207.61nm'], name="spectrometerSignalAt207.61nm", curie=NEON.curie('spectrometerSignalAt207.61nm'),
                      model_uri=NEON['spectrometerSignalAt207.61nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt208.41nm = Slot(uri=NEON['spectrometerSignalAt208.41nm'], name="spectrometerSignalAt208.41nm", curie=NEON.curie('spectrometerSignalAt208.41nm'),
                      model_uri=NEON['spectrometerSignalAt208.41nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt209.21nm = Slot(uri=NEON['spectrometerSignalAt209.21nm'], name="spectrometerSignalAt209.21nm", curie=NEON.curie('spectrometerSignalAt209.21nm'),
                      model_uri=NEON['spectrometerSignalAt209.21nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt210.01nm = Slot(uri=NEON['spectrometerSignalAt210.01nm'], name="spectrometerSignalAt210.01nm", curie=NEON.curie('spectrometerSignalAt210.01nm'),
                      model_uri=NEON['spectrometerSignalAt210.01nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt210.81nm = Slot(uri=NEON['spectrometerSignalAt210.81nm'], name="spectrometerSignalAt210.81nm", curie=NEON.curie('spectrometerSignalAt210.81nm'),
                      model_uri=NEON['spectrometerSignalAt210.81nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt211.61nm = Slot(uri=NEON['spectrometerSignalAt211.61nm'], name="spectrometerSignalAt211.61nm", curie=NEON.curie('spectrometerSignalAt211.61nm'),
                      model_uri=NEON['spectrometerSignalAt211.61nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt212.41nm = Slot(uri=NEON['spectrometerSignalAt212.41nm'], name="spectrometerSignalAt212.41nm", curie=NEON.curie('spectrometerSignalAt212.41nm'),
                      model_uri=NEON['spectrometerSignalAt212.41nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt213.21nm = Slot(uri=NEON['spectrometerSignalAt213.21nm'], name="spectrometerSignalAt213.21nm", curie=NEON.curie('spectrometerSignalAt213.21nm'),
                      model_uri=NEON['spectrometerSignalAt213.21nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt214.01nm = Slot(uri=NEON['spectrometerSignalAt214.01nm'], name="spectrometerSignalAt214.01nm", curie=NEON.curie('spectrometerSignalAt214.01nm'),
                      model_uri=NEON['spectrometerSignalAt214.01nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt214.82nm = Slot(uri=NEON['spectrometerSignalAt214.82nm'], name="spectrometerSignalAt214.82nm", curie=NEON.curie('spectrometerSignalAt214.82nm'),
                      model_uri=NEON['spectrometerSignalAt214.82nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt215.62nm = Slot(uri=NEON['spectrometerSignalAt215.62nm'], name="spectrometerSignalAt215.62nm", curie=NEON.curie('spectrometerSignalAt215.62nm'),
                      model_uri=NEON['spectrometerSignalAt215.62nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt216.42nm = Slot(uri=NEON['spectrometerSignalAt216.42nm'], name="spectrometerSignalAt216.42nm", curie=NEON.curie('spectrometerSignalAt216.42nm'),
                      model_uri=NEON['spectrometerSignalAt216.42nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt217.22nm = Slot(uri=NEON['spectrometerSignalAt217.22nm'], name="spectrometerSignalAt217.22nm", curie=NEON.curie('spectrometerSignalAt217.22nm'),
                      model_uri=NEON['spectrometerSignalAt217.22nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt218.03nm = Slot(uri=NEON['spectrometerSignalAt218.03nm'], name="spectrometerSignalAt218.03nm", curie=NEON.curie('spectrometerSignalAt218.03nm'),
                      model_uri=NEON['spectrometerSignalAt218.03nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt218.83nm = Slot(uri=NEON['spectrometerSignalAt218.83nm'], name="spectrometerSignalAt218.83nm", curie=NEON.curie('spectrometerSignalAt218.83nm'),
                      model_uri=NEON['spectrometerSignalAt218.83nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt219.63nm = Slot(uri=NEON['spectrometerSignalAt219.63nm'], name="spectrometerSignalAt219.63nm", curie=NEON.curie('spectrometerSignalAt219.63nm'),
                      model_uri=NEON['spectrometerSignalAt219.63nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt220.43nm = Slot(uri=NEON['spectrometerSignalAt220.43nm'], name="spectrometerSignalAt220.43nm", curie=NEON.curie('spectrometerSignalAt220.43nm'),
                      model_uri=NEON['spectrometerSignalAt220.43nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt221.24nm = Slot(uri=NEON['spectrometerSignalAt221.24nm'], name="spectrometerSignalAt221.24nm", curie=NEON.curie('spectrometerSignalAt221.24nm'),
                      model_uri=NEON['spectrometerSignalAt221.24nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt222.04nm = Slot(uri=NEON['spectrometerSignalAt222.04nm'], name="spectrometerSignalAt222.04nm", curie=NEON.curie('spectrometerSignalAt222.04nm'),
                      model_uri=NEON['spectrometerSignalAt222.04nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt222.85nm = Slot(uri=NEON['spectrometerSignalAt222.85nm'], name="spectrometerSignalAt222.85nm", curie=NEON.curie('spectrometerSignalAt222.85nm'),
                      model_uri=NEON['spectrometerSignalAt222.85nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt223.65nm = Slot(uri=NEON['spectrometerSignalAt223.65nm'], name="spectrometerSignalAt223.65nm", curie=NEON.curie('spectrometerSignalAt223.65nm'),
                      model_uri=NEON['spectrometerSignalAt223.65nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt224.46nm = Slot(uri=NEON['spectrometerSignalAt224.46nm'], name="spectrometerSignalAt224.46nm", curie=NEON.curie('spectrometerSignalAt224.46nm'),
                      model_uri=NEON['spectrometerSignalAt224.46nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt225.26nm = Slot(uri=NEON['spectrometerSignalAt225.26nm'], name="spectrometerSignalAt225.26nm", curie=NEON.curie('spectrometerSignalAt225.26nm'),
                      model_uri=NEON['spectrometerSignalAt225.26nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt226.06nm = Slot(uri=NEON['spectrometerSignalAt226.06nm'], name="spectrometerSignalAt226.06nm", curie=NEON.curie('spectrometerSignalAt226.06nm'),
                      model_uri=NEON['spectrometerSignalAt226.06nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt226.87nm = Slot(uri=NEON['spectrometerSignalAt226.87nm'], name="spectrometerSignalAt226.87nm", curie=NEON.curie('spectrometerSignalAt226.87nm'),
                      model_uri=NEON['spectrometerSignalAt226.87nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt227.68nm = Slot(uri=NEON['spectrometerSignalAt227.68nm'], name="spectrometerSignalAt227.68nm", curie=NEON.curie('spectrometerSignalAt227.68nm'),
                      model_uri=NEON['spectrometerSignalAt227.68nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt228.48nm = Slot(uri=NEON['spectrometerSignalAt228.48nm'], name="spectrometerSignalAt228.48nm", curie=NEON.curie('spectrometerSignalAt228.48nm'),
                      model_uri=NEON['spectrometerSignalAt228.48nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt229.29nm = Slot(uri=NEON['spectrometerSignalAt229.29nm'], name="spectrometerSignalAt229.29nm", curie=NEON.curie('spectrometerSignalAt229.29nm'),
                      model_uri=NEON['spectrometerSignalAt229.29nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt230.09nm = Slot(uri=NEON['spectrometerSignalAt230.09nm'], name="spectrometerSignalAt230.09nm", curie=NEON.curie('spectrometerSignalAt230.09nm'),
                      model_uri=NEON['spectrometerSignalAt230.09nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt230.9nm = Slot(uri=NEON['spectrometerSignalAt230.9nm'], name="spectrometerSignalAt230.9nm", curie=NEON.curie('spectrometerSignalAt230.9nm'),
                      model_uri=NEON['spectrometerSignalAt230.9nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt231.71nm = Slot(uri=NEON['spectrometerSignalAt231.71nm'], name="spectrometerSignalAt231.71nm", curie=NEON.curie('spectrometerSignalAt231.71nm'),
                      model_uri=NEON['spectrometerSignalAt231.71nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt232.51nm = Slot(uri=NEON['spectrometerSignalAt232.51nm'], name="spectrometerSignalAt232.51nm", curie=NEON.curie('spectrometerSignalAt232.51nm'),
                      model_uri=NEON['spectrometerSignalAt232.51nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt233.32nm = Slot(uri=NEON['spectrometerSignalAt233.32nm'], name="spectrometerSignalAt233.32nm", curie=NEON.curie('spectrometerSignalAt233.32nm'),
                      model_uri=NEON['spectrometerSignalAt233.32nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt234.13nm = Slot(uri=NEON['spectrometerSignalAt234.13nm'], name="spectrometerSignalAt234.13nm", curie=NEON.curie('spectrometerSignalAt234.13nm'),
                      model_uri=NEON['spectrometerSignalAt234.13nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt234.93nm = Slot(uri=NEON['spectrometerSignalAt234.93nm'], name="spectrometerSignalAt234.93nm", curie=NEON.curie('spectrometerSignalAt234.93nm'),
                      model_uri=NEON['spectrometerSignalAt234.93nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt235.74nm = Slot(uri=NEON['spectrometerSignalAt235.74nm'], name="spectrometerSignalAt235.74nm", curie=NEON.curie('spectrometerSignalAt235.74nm'),
                      model_uri=NEON['spectrometerSignalAt235.74nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt236.55nm = Slot(uri=NEON['spectrometerSignalAt236.55nm'], name="spectrometerSignalAt236.55nm", curie=NEON.curie('spectrometerSignalAt236.55nm'),
                      model_uri=NEON['spectrometerSignalAt236.55nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt237.36nm = Slot(uri=NEON['spectrometerSignalAt237.36nm'], name="spectrometerSignalAt237.36nm", curie=NEON.curie('spectrometerSignalAt237.36nm'),
                      model_uri=NEON['spectrometerSignalAt237.36nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt238.16nm = Slot(uri=NEON['spectrometerSignalAt238.16nm'], name="spectrometerSignalAt238.16nm", curie=NEON.curie('spectrometerSignalAt238.16nm'),
                      model_uri=NEON['spectrometerSignalAt238.16nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt238.97nm = Slot(uri=NEON['spectrometerSignalAt238.97nm'], name="spectrometerSignalAt238.97nm", curie=NEON.curie('spectrometerSignalAt238.97nm'),
                      model_uri=NEON['spectrometerSignalAt238.97nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt239.78nm = Slot(uri=NEON['spectrometerSignalAt239.78nm'], name="spectrometerSignalAt239.78nm", curie=NEON.curie('spectrometerSignalAt239.78nm'),
                      model_uri=NEON['spectrometerSignalAt239.78nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt240.59nm = Slot(uri=NEON['spectrometerSignalAt240.59nm'], name="spectrometerSignalAt240.59nm", curie=NEON.curie('spectrometerSignalAt240.59nm'),
                      model_uri=NEON['spectrometerSignalAt240.59nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt241.4nm = Slot(uri=NEON['spectrometerSignalAt241.4nm'], name="spectrometerSignalAt241.4nm", curie=NEON.curie('spectrometerSignalAt241.4nm'),
                      model_uri=NEON['spectrometerSignalAt241.4nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt242.21nm = Slot(uri=NEON['spectrometerSignalAt242.21nm'], name="spectrometerSignalAt242.21nm", curie=NEON.curie('spectrometerSignalAt242.21nm'),
                      model_uri=NEON['spectrometerSignalAt242.21nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt243.01nm = Slot(uri=NEON['spectrometerSignalAt243.01nm'], name="spectrometerSignalAt243.01nm", curie=NEON.curie('spectrometerSignalAt243.01nm'),
                      model_uri=NEON['spectrometerSignalAt243.01nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt243.82nm = Slot(uri=NEON['spectrometerSignalAt243.82nm'], name="spectrometerSignalAt243.82nm", curie=NEON.curie('spectrometerSignalAt243.82nm'),
                      model_uri=NEON['spectrometerSignalAt243.82nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt244.63nm = Slot(uri=NEON['spectrometerSignalAt244.63nm'], name="spectrometerSignalAt244.63nm", curie=NEON.curie('spectrometerSignalAt244.63nm'),
                      model_uri=NEON['spectrometerSignalAt244.63nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt245.44nm = Slot(uri=NEON['spectrometerSignalAt245.44nm'], name="spectrometerSignalAt245.44nm", curie=NEON.curie('spectrometerSignalAt245.44nm'),
                      model_uri=NEON['spectrometerSignalAt245.44nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt246.25nm = Slot(uri=NEON['spectrometerSignalAt246.25nm'], name="spectrometerSignalAt246.25nm", curie=NEON.curie('spectrometerSignalAt246.25nm'),
                      model_uri=NEON['spectrometerSignalAt246.25nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt247.06nm = Slot(uri=NEON['spectrometerSignalAt247.06nm'], name="spectrometerSignalAt247.06nm", curie=NEON.curie('spectrometerSignalAt247.06nm'),
                      model_uri=NEON['spectrometerSignalAt247.06nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt247.87nm = Slot(uri=NEON['spectrometerSignalAt247.87nm'], name="spectrometerSignalAt247.87nm", curie=NEON.curie('spectrometerSignalAt247.87nm'),
                      model_uri=NEON['spectrometerSignalAt247.87nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt248.68nm = Slot(uri=NEON['spectrometerSignalAt248.68nm'], name="spectrometerSignalAt248.68nm", curie=NEON.curie('spectrometerSignalAt248.68nm'),
                      model_uri=NEON['spectrometerSignalAt248.68nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt249.49nm = Slot(uri=NEON['spectrometerSignalAt249.49nm'], name="spectrometerSignalAt249.49nm", curie=NEON.curie('spectrometerSignalAt249.49nm'),
                      model_uri=NEON['spectrometerSignalAt249.49nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt250.3nm = Slot(uri=NEON['spectrometerSignalAt250.3nm'], name="spectrometerSignalAt250.3nm", curie=NEON.curie('spectrometerSignalAt250.3nm'),
                      model_uri=NEON['spectrometerSignalAt250.3nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt251.11nm = Slot(uri=NEON['spectrometerSignalAt251.11nm'], name="spectrometerSignalAt251.11nm", curie=NEON.curie('spectrometerSignalAt251.11nm'),
                      model_uri=NEON['spectrometerSignalAt251.11nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt251.92nm = Slot(uri=NEON['spectrometerSignalAt251.92nm'], name="spectrometerSignalAt251.92nm", curie=NEON.curie('spectrometerSignalAt251.92nm'),
                      model_uri=NEON['spectrometerSignalAt251.92nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt252.73nm = Slot(uri=NEON['spectrometerSignalAt252.73nm'], name="spectrometerSignalAt252.73nm", curie=NEON.curie('spectrometerSignalAt252.73nm'),
                      model_uri=NEON['spectrometerSignalAt252.73nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt253.55nm = Slot(uri=NEON['spectrometerSignalAt253.55nm'], name="spectrometerSignalAt253.55nm", curie=NEON.curie('spectrometerSignalAt253.55nm'),
                      model_uri=NEON['spectrometerSignalAt253.55nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt254.36nm = Slot(uri=NEON['spectrometerSignalAt254.36nm'], name="spectrometerSignalAt254.36nm", curie=NEON.curie('spectrometerSignalAt254.36nm'),
                      model_uri=NEON['spectrometerSignalAt254.36nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt255.17nm = Slot(uri=NEON['spectrometerSignalAt255.17nm'], name="spectrometerSignalAt255.17nm", curie=NEON.curie('spectrometerSignalAt255.17nm'),
                      model_uri=NEON['spectrometerSignalAt255.17nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt255.98nm = Slot(uri=NEON['spectrometerSignalAt255.98nm'], name="spectrometerSignalAt255.98nm", curie=NEON.curie('spectrometerSignalAt255.98nm'),
                      model_uri=NEON['spectrometerSignalAt255.98nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt256.79nm = Slot(uri=NEON['spectrometerSignalAt256.79nm'], name="spectrometerSignalAt256.79nm", curie=NEON.curie('spectrometerSignalAt256.79nm'),
                      model_uri=NEON['spectrometerSignalAt256.79nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt257.6nm = Slot(uri=NEON['spectrometerSignalAt257.6nm'], name="spectrometerSignalAt257.6nm", curie=NEON.curie('spectrometerSignalAt257.6nm'),
                      model_uri=NEON['spectrometerSignalAt257.6nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt258.41nm = Slot(uri=NEON['spectrometerSignalAt258.41nm'], name="spectrometerSignalAt258.41nm", curie=NEON.curie('spectrometerSignalAt258.41nm'),
                      model_uri=NEON['spectrometerSignalAt258.41nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt259.23nm = Slot(uri=NEON['spectrometerSignalAt259.23nm'], name="spectrometerSignalAt259.23nm", curie=NEON.curie('spectrometerSignalAt259.23nm'),
                      model_uri=NEON['spectrometerSignalAt259.23nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt260.04nm = Slot(uri=NEON['spectrometerSignalAt260.04nm'], name="spectrometerSignalAt260.04nm", curie=NEON.curie('spectrometerSignalAt260.04nm'),
                      model_uri=NEON['spectrometerSignalAt260.04nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt260.85nm = Slot(uri=NEON['spectrometerSignalAt260.85nm'], name="spectrometerSignalAt260.85nm", curie=NEON.curie('spectrometerSignalAt260.85nm'),
                      model_uri=NEON['spectrometerSignalAt260.85nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt261.66nm = Slot(uri=NEON['spectrometerSignalAt261.66nm'], name="spectrometerSignalAt261.66nm", curie=NEON.curie('spectrometerSignalAt261.66nm'),
                      model_uri=NEON['spectrometerSignalAt261.66nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt262.48nm = Slot(uri=NEON['spectrometerSignalAt262.48nm'], name="spectrometerSignalAt262.48nm", curie=NEON.curie('spectrometerSignalAt262.48nm'),
                      model_uri=NEON['spectrometerSignalAt262.48nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt263.29nm = Slot(uri=NEON['spectrometerSignalAt263.29nm'], name="spectrometerSignalAt263.29nm", curie=NEON.curie('spectrometerSignalAt263.29nm'),
                      model_uri=NEON['spectrometerSignalAt263.29nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt264.1nm = Slot(uri=NEON['spectrometerSignalAt264.1nm'], name="spectrometerSignalAt264.1nm", curie=NEON.curie('spectrometerSignalAt264.1nm'),
                      model_uri=NEON['spectrometerSignalAt264.1nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt264.91nm = Slot(uri=NEON['spectrometerSignalAt264.91nm'], name="spectrometerSignalAt264.91nm", curie=NEON.curie('spectrometerSignalAt264.91nm'),
                      model_uri=NEON['spectrometerSignalAt264.91nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt265.73nm = Slot(uri=NEON['spectrometerSignalAt265.73nm'], name="spectrometerSignalAt265.73nm", curie=NEON.curie('spectrometerSignalAt265.73nm'),
                      model_uri=NEON['spectrometerSignalAt265.73nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt266.54nm = Slot(uri=NEON['spectrometerSignalAt266.54nm'], name="spectrometerSignalAt266.54nm", curie=NEON.curie('spectrometerSignalAt266.54nm'),
                      model_uri=NEON['spectrometerSignalAt266.54nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt267.35nm = Slot(uri=NEON['spectrometerSignalAt267.35nm'], name="spectrometerSignalAt267.35nm", curie=NEON.curie('spectrometerSignalAt267.35nm'),
                      model_uri=NEON['spectrometerSignalAt267.35nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt268.17nm = Slot(uri=NEON['spectrometerSignalAt268.17nm'], name="spectrometerSignalAt268.17nm", curie=NEON.curie('spectrometerSignalAt268.17nm'),
                      model_uri=NEON['spectrometerSignalAt268.17nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt268.98nm = Slot(uri=NEON['spectrometerSignalAt268.98nm'], name="spectrometerSignalAt268.98nm", curie=NEON.curie('spectrometerSignalAt268.98nm'),
                      model_uri=NEON['spectrometerSignalAt268.98nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt269.79nm = Slot(uri=NEON['spectrometerSignalAt269.79nm'], name="spectrometerSignalAt269.79nm", curie=NEON.curie('spectrometerSignalAt269.79nm'),
                      model_uri=NEON['spectrometerSignalAt269.79nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt270.61nm = Slot(uri=NEON['spectrometerSignalAt270.61nm'], name="spectrometerSignalAt270.61nm", curie=NEON.curie('spectrometerSignalAt270.61nm'),
                      model_uri=NEON['spectrometerSignalAt270.61nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt271.42nm = Slot(uri=NEON['spectrometerSignalAt271.42nm'], name="spectrometerSignalAt271.42nm", curie=NEON.curie('spectrometerSignalAt271.42nm'),
                      model_uri=NEON['spectrometerSignalAt271.42nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt272.23nm = Slot(uri=NEON['spectrometerSignalAt272.23nm'], name="spectrometerSignalAt272.23nm", curie=NEON.curie('spectrometerSignalAt272.23nm'),
                      model_uri=NEON['spectrometerSignalAt272.23nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt273.05nm = Slot(uri=NEON['spectrometerSignalAt273.05nm'], name="spectrometerSignalAt273.05nm", curie=NEON.curie('spectrometerSignalAt273.05nm'),
                      model_uri=NEON['spectrometerSignalAt273.05nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt273.86nm = Slot(uri=NEON['spectrometerSignalAt273.86nm'], name="spectrometerSignalAt273.86nm", curie=NEON.curie('spectrometerSignalAt273.86nm'),
                      model_uri=NEON['spectrometerSignalAt273.86nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt274.68nm = Slot(uri=NEON['spectrometerSignalAt274.68nm'], name="spectrometerSignalAt274.68nm", curie=NEON.curie('spectrometerSignalAt274.68nm'),
                      model_uri=NEON['spectrometerSignalAt274.68nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt275.49nm = Slot(uri=NEON['spectrometerSignalAt275.49nm'], name="spectrometerSignalAt275.49nm", curie=NEON.curie('spectrometerSignalAt275.49nm'),
                      model_uri=NEON['spectrometerSignalAt275.49nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt276.31nm = Slot(uri=NEON['spectrometerSignalAt276.31nm'], name="spectrometerSignalAt276.31nm", curie=NEON.curie('spectrometerSignalAt276.31nm'),
                      model_uri=NEON['spectrometerSignalAt276.31nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt277.12nm = Slot(uri=NEON['spectrometerSignalAt277.12nm'], name="spectrometerSignalAt277.12nm", curie=NEON.curie('spectrometerSignalAt277.12nm'),
                      model_uri=NEON['spectrometerSignalAt277.12nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt277.93nm = Slot(uri=NEON['spectrometerSignalAt277.93nm'], name="spectrometerSignalAt277.93nm", curie=NEON.curie('spectrometerSignalAt277.93nm'),
                      model_uri=NEON['spectrometerSignalAt277.93nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt278.75nm = Slot(uri=NEON['spectrometerSignalAt278.75nm'], name="spectrometerSignalAt278.75nm", curie=NEON.curie('spectrometerSignalAt278.75nm'),
                      model_uri=NEON['spectrometerSignalAt278.75nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt279.56nm = Slot(uri=NEON['spectrometerSignalAt279.56nm'], name="spectrometerSignalAt279.56nm", curie=NEON.curie('spectrometerSignalAt279.56nm'),
                      model_uri=NEON['spectrometerSignalAt279.56nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt280.38nm = Slot(uri=NEON['spectrometerSignalAt280.38nm'], name="spectrometerSignalAt280.38nm", curie=NEON.curie('spectrometerSignalAt280.38nm'),
                      model_uri=NEON['spectrometerSignalAt280.38nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt281.19nm = Slot(uri=NEON['spectrometerSignalAt281.19nm'], name="spectrometerSignalAt281.19nm", curie=NEON.curie('spectrometerSignalAt281.19nm'),
                      model_uri=NEON['spectrometerSignalAt281.19nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt282.01nm = Slot(uri=NEON['spectrometerSignalAt282.01nm'], name="spectrometerSignalAt282.01nm", curie=NEON.curie('spectrometerSignalAt282.01nm'),
                      model_uri=NEON['spectrometerSignalAt282.01nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt282.82nm = Slot(uri=NEON['spectrometerSignalAt282.82nm'], name="spectrometerSignalAt282.82nm", curie=NEON.curie('spectrometerSignalAt282.82nm'),
                      model_uri=NEON['spectrometerSignalAt282.82nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt283.64nm = Slot(uri=NEON['spectrometerSignalAt283.64nm'], name="spectrometerSignalAt283.64nm", curie=NEON.curie('spectrometerSignalAt283.64nm'),
                      model_uri=NEON['spectrometerSignalAt283.64nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt284.45nm = Slot(uri=NEON['spectrometerSignalAt284.45nm'], name="spectrometerSignalAt284.45nm", curie=NEON.curie('spectrometerSignalAt284.45nm'),
                      model_uri=NEON['spectrometerSignalAt284.45nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt285.27nm = Slot(uri=NEON['spectrometerSignalAt285.27nm'], name="spectrometerSignalAt285.27nm", curie=NEON.curie('spectrometerSignalAt285.27nm'),
                      model_uri=NEON['spectrometerSignalAt285.27nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt286.08nm = Slot(uri=NEON['spectrometerSignalAt286.08nm'], name="spectrometerSignalAt286.08nm", curie=NEON.curie('spectrometerSignalAt286.08nm'),
                      model_uri=NEON['spectrometerSignalAt286.08nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt286.9nm = Slot(uri=NEON['spectrometerSignalAt286.9nm'], name="spectrometerSignalAt286.9nm", curie=NEON.curie('spectrometerSignalAt286.9nm'),
                      model_uri=NEON['spectrometerSignalAt286.9nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt287.71nm = Slot(uri=NEON['spectrometerSignalAt287.71nm'], name="spectrometerSignalAt287.71nm", curie=NEON.curie('spectrometerSignalAt287.71nm'),
                      model_uri=NEON['spectrometerSignalAt287.71nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt288.53nm = Slot(uri=NEON['spectrometerSignalAt288.53nm'], name="spectrometerSignalAt288.53nm", curie=NEON.curie('spectrometerSignalAt288.53nm'),
                      model_uri=NEON['spectrometerSignalAt288.53nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt289.35nm = Slot(uri=NEON['spectrometerSignalAt289.35nm'], name="spectrometerSignalAt289.35nm", curie=NEON.curie('spectrometerSignalAt289.35nm'),
                      model_uri=NEON['spectrometerSignalAt289.35nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt290.16nm = Slot(uri=NEON['spectrometerSignalAt290.16nm'], name="spectrometerSignalAt290.16nm", curie=NEON.curie('spectrometerSignalAt290.16nm'),
                      model_uri=NEON['spectrometerSignalAt290.16nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt290.98nm = Slot(uri=NEON['spectrometerSignalAt290.98nm'], name="spectrometerSignalAt290.98nm", curie=NEON.curie('spectrometerSignalAt290.98nm'),
                      model_uri=NEON['spectrometerSignalAt290.98nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt291.79nm = Slot(uri=NEON['spectrometerSignalAt291.79nm'], name="spectrometerSignalAt291.79nm", curie=NEON.curie('spectrometerSignalAt291.79nm'),
                      model_uri=NEON['spectrometerSignalAt291.79nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt292.61nm = Slot(uri=NEON['spectrometerSignalAt292.61nm'], name="spectrometerSignalAt292.61nm", curie=NEON.curie('spectrometerSignalAt292.61nm'),
                      model_uri=NEON['spectrometerSignalAt292.61nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt293.42nm = Slot(uri=NEON['spectrometerSignalAt293.42nm'], name="spectrometerSignalAt293.42nm", curie=NEON.curie('spectrometerSignalAt293.42nm'),
                      model_uri=NEON['spectrometerSignalAt293.42nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt294.24nm = Slot(uri=NEON['spectrometerSignalAt294.24nm'], name="spectrometerSignalAt294.24nm", curie=NEON.curie('spectrometerSignalAt294.24nm'),
                      model_uri=NEON['spectrometerSignalAt294.24nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt295.06nm = Slot(uri=NEON['spectrometerSignalAt295.06nm'], name="spectrometerSignalAt295.06nm", curie=NEON.curie('spectrometerSignalAt295.06nm'),
                      model_uri=NEON['spectrometerSignalAt295.06nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt295.87nm = Slot(uri=NEON['spectrometerSignalAt295.87nm'], name="spectrometerSignalAt295.87nm", curie=NEON.curie('spectrometerSignalAt295.87nm'),
                      model_uri=NEON['spectrometerSignalAt295.87nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt296.69nm = Slot(uri=NEON['spectrometerSignalAt296.69nm'], name="spectrometerSignalAt296.69nm", curie=NEON.curie('spectrometerSignalAt296.69nm'),
                      model_uri=NEON['spectrometerSignalAt296.69nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt297.51nm = Slot(uri=NEON['spectrometerSignalAt297.51nm'], name="spectrometerSignalAt297.51nm", curie=NEON.curie('spectrometerSignalAt297.51nm'),
                      model_uri=NEON['spectrometerSignalAt297.51nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt298.32nm = Slot(uri=NEON['spectrometerSignalAt298.32nm'], name="spectrometerSignalAt298.32nm", curie=NEON.curie('spectrometerSignalAt298.32nm'),
                      model_uri=NEON['spectrometerSignalAt298.32nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt299.14nm = Slot(uri=NEON['spectrometerSignalAt299.14nm'], name="spectrometerSignalAt299.14nm", curie=NEON.curie('spectrometerSignalAt299.14nm'),
                      model_uri=NEON['spectrometerSignalAt299.14nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt299.95nm = Slot(uri=NEON['spectrometerSignalAt299.95nm'], name="spectrometerSignalAt299.95nm", curie=NEON.curie('spectrometerSignalAt299.95nm'),
                      model_uri=NEON['spectrometerSignalAt299.95nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt300.77nm = Slot(uri=NEON['spectrometerSignalAt300.77nm'], name="spectrometerSignalAt300.77nm", curie=NEON.curie('spectrometerSignalAt300.77nm'),
                      model_uri=NEON['spectrometerSignalAt300.77nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt301.59nm = Slot(uri=NEON['spectrometerSignalAt301.59nm'], name="spectrometerSignalAt301.59nm", curie=NEON.curie('spectrometerSignalAt301.59nm'),
                      model_uri=NEON['spectrometerSignalAt301.59nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt302.4nm = Slot(uri=NEON['spectrometerSignalAt302.4nm'], name="spectrometerSignalAt302.4nm", curie=NEON.curie('spectrometerSignalAt302.4nm'),
                      model_uri=NEON['spectrometerSignalAt302.4nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt303.22nm = Slot(uri=NEON['spectrometerSignalAt303.22nm'], name="spectrometerSignalAt303.22nm", curie=NEON.curie('spectrometerSignalAt303.22nm'),
                      model_uri=NEON['spectrometerSignalAt303.22nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt304.04nm = Slot(uri=NEON['spectrometerSignalAt304.04nm'], name="spectrometerSignalAt304.04nm", curie=NEON.curie('spectrometerSignalAt304.04nm'),
                      model_uri=NEON['spectrometerSignalAt304.04nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt304.85nm = Slot(uri=NEON['spectrometerSignalAt304.85nm'], name="spectrometerSignalAt304.85nm", curie=NEON.curie('spectrometerSignalAt304.85nm'),
                      model_uri=NEON['spectrometerSignalAt304.85nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt305.67nm = Slot(uri=NEON['spectrometerSignalAt305.67nm'], name="spectrometerSignalAt305.67nm", curie=NEON.curie('spectrometerSignalAt305.67nm'),
                      model_uri=NEON['spectrometerSignalAt305.67nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt306.49nm = Slot(uri=NEON['spectrometerSignalAt306.49nm'], name="spectrometerSignalAt306.49nm", curie=NEON.curie('spectrometerSignalAt306.49nm'),
                      model_uri=NEON['spectrometerSignalAt306.49nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt307.3nm = Slot(uri=NEON['spectrometerSignalAt307.3nm'], name="spectrometerSignalAt307.3nm", curie=NEON.curie('spectrometerSignalAt307.3nm'),
                      model_uri=NEON['spectrometerSignalAt307.3nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt308.12nm = Slot(uri=NEON['spectrometerSignalAt308.12nm'], name="spectrometerSignalAt308.12nm", curie=NEON.curie('spectrometerSignalAt308.12nm'),
                      model_uri=NEON['spectrometerSignalAt308.12nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt308.93nm = Slot(uri=NEON['spectrometerSignalAt308.93nm'], name="spectrometerSignalAt308.93nm", curie=NEON.curie('spectrometerSignalAt308.93nm'),
                      model_uri=NEON['spectrometerSignalAt308.93nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt309.75nm = Slot(uri=NEON['spectrometerSignalAt309.75nm'], name="spectrometerSignalAt309.75nm", curie=NEON.curie('spectrometerSignalAt309.75nm'),
                      model_uri=NEON['spectrometerSignalAt309.75nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt310.57nm = Slot(uri=NEON['spectrometerSignalAt310.57nm'], name="spectrometerSignalAt310.57nm", curie=NEON.curie('spectrometerSignalAt310.57nm'),
                      model_uri=NEON['spectrometerSignalAt310.57nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt311.38nm = Slot(uri=NEON['spectrometerSignalAt311.38nm'], name="spectrometerSignalAt311.38nm", curie=NEON.curie('spectrometerSignalAt311.38nm'),
                      model_uri=NEON['spectrometerSignalAt311.38nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt312.2nm = Slot(uri=NEON['spectrometerSignalAt312.2nm'], name="spectrometerSignalAt312.2nm", curie=NEON.curie('spectrometerSignalAt312.2nm'),
                      model_uri=NEON['spectrometerSignalAt312.2nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt313.02nm = Slot(uri=NEON['spectrometerSignalAt313.02nm'], name="spectrometerSignalAt313.02nm", curie=NEON.curie('spectrometerSignalAt313.02nm'),
                      model_uri=NEON['spectrometerSignalAt313.02nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt313.83nm = Slot(uri=NEON['spectrometerSignalAt313.83nm'], name="spectrometerSignalAt313.83nm", curie=NEON.curie('spectrometerSignalAt313.83nm'),
                      model_uri=NEON['spectrometerSignalAt313.83nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt314.65nm = Slot(uri=NEON['spectrometerSignalAt314.65nm'], name="spectrometerSignalAt314.65nm", curie=NEON.curie('spectrometerSignalAt314.65nm'),
                      model_uri=NEON['spectrometerSignalAt314.65nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt315.47nm = Slot(uri=NEON['spectrometerSignalAt315.47nm'], name="spectrometerSignalAt315.47nm", curie=NEON.curie('spectrometerSignalAt315.47nm'),
                      model_uri=NEON['spectrometerSignalAt315.47nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt316.28nm = Slot(uri=NEON['spectrometerSignalAt316.28nm'], name="spectrometerSignalAt316.28nm", curie=NEON.curie('spectrometerSignalAt316.28nm'),
                      model_uri=NEON['spectrometerSignalAt316.28nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt317.1nm = Slot(uri=NEON['spectrometerSignalAt317.1nm'], name="spectrometerSignalAt317.1nm", curie=NEON.curie('spectrometerSignalAt317.1nm'),
                      model_uri=NEON['spectrometerSignalAt317.1nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt317.92nm = Slot(uri=NEON['spectrometerSignalAt317.92nm'], name="spectrometerSignalAt317.92nm", curie=NEON.curie('spectrometerSignalAt317.92nm'),
                      model_uri=NEON['spectrometerSignalAt317.92nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt318.73nm = Slot(uri=NEON['spectrometerSignalAt318.73nm'], name="spectrometerSignalAt318.73nm", curie=NEON.curie('spectrometerSignalAt318.73nm'),
                      model_uri=NEON['spectrometerSignalAt318.73nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt319.55nm = Slot(uri=NEON['spectrometerSignalAt319.55nm'], name="spectrometerSignalAt319.55nm", curie=NEON.curie('spectrometerSignalAt319.55nm'),
                      model_uri=NEON['spectrometerSignalAt319.55nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt320.37nm = Slot(uri=NEON['spectrometerSignalAt320.37nm'], name="spectrometerSignalAt320.37nm", curie=NEON.curie('spectrometerSignalAt320.37nm'),
                      model_uri=NEON['spectrometerSignalAt320.37nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt321.18nm = Slot(uri=NEON['spectrometerSignalAt321.18nm'], name="spectrometerSignalAt321.18nm", curie=NEON.curie('spectrometerSignalAt321.18nm'),
                      model_uri=NEON['spectrometerSignalAt321.18nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt322nm = Slot(uri=NEON.spectrometerSignalAt322nm, name="spectrometerSignalAt322nm", curie=NEON.curie('spectrometerSignalAt322nm'),
                      model_uri=NEON.spectrometerSignalAt322nm, domain=None, range=Optional[float])

slots.spectrometerSignalAt322.82nm = Slot(uri=NEON['spectrometerSignalAt322.82nm'], name="spectrometerSignalAt322.82nm", curie=NEON.curie('spectrometerSignalAt322.82nm'),
                      model_uri=NEON['spectrometerSignalAt322.82nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt323.63nm = Slot(uri=NEON['spectrometerSignalAt323.63nm'], name="spectrometerSignalAt323.63nm", curie=NEON.curie('spectrometerSignalAt323.63nm'),
                      model_uri=NEON['spectrometerSignalAt323.63nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt324.45nm = Slot(uri=NEON['spectrometerSignalAt324.45nm'], name="spectrometerSignalAt324.45nm", curie=NEON.curie('spectrometerSignalAt324.45nm'),
                      model_uri=NEON['spectrometerSignalAt324.45nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt325.27nm = Slot(uri=NEON['spectrometerSignalAt325.27nm'], name="spectrometerSignalAt325.27nm", curie=NEON.curie('spectrometerSignalAt325.27nm'),
                      model_uri=NEON['spectrometerSignalAt325.27nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt326.08nm = Slot(uri=NEON['spectrometerSignalAt326.08nm'], name="spectrometerSignalAt326.08nm", curie=NEON.curie('spectrometerSignalAt326.08nm'),
                      model_uri=NEON['spectrometerSignalAt326.08nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt326.9nm = Slot(uri=NEON['spectrometerSignalAt326.9nm'], name="spectrometerSignalAt326.9nm", curie=NEON.curie('spectrometerSignalAt326.9nm'),
                      model_uri=NEON['spectrometerSignalAt326.9nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt327.72nm = Slot(uri=NEON['spectrometerSignalAt327.72nm'], name="spectrometerSignalAt327.72nm", curie=NEON.curie('spectrometerSignalAt327.72nm'),
                      model_uri=NEON['spectrometerSignalAt327.72nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt328.53nm = Slot(uri=NEON['spectrometerSignalAt328.53nm'], name="spectrometerSignalAt328.53nm", curie=NEON.curie('spectrometerSignalAt328.53nm'),
                      model_uri=NEON['spectrometerSignalAt328.53nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt329.35nm = Slot(uri=NEON['spectrometerSignalAt329.35nm'], name="spectrometerSignalAt329.35nm", curie=NEON.curie('spectrometerSignalAt329.35nm'),
                      model_uri=NEON['spectrometerSignalAt329.35nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt330.17nm = Slot(uri=NEON['spectrometerSignalAt330.17nm'], name="spectrometerSignalAt330.17nm", curie=NEON.curie('spectrometerSignalAt330.17nm'),
                      model_uri=NEON['spectrometerSignalAt330.17nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt330.98nm = Slot(uri=NEON['spectrometerSignalAt330.98nm'], name="spectrometerSignalAt330.98nm", curie=NEON.curie('spectrometerSignalAt330.98nm'),
                      model_uri=NEON['spectrometerSignalAt330.98nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt331.8nm = Slot(uri=NEON['spectrometerSignalAt331.8nm'], name="spectrometerSignalAt331.8nm", curie=NEON.curie('spectrometerSignalAt331.8nm'),
                      model_uri=NEON['spectrometerSignalAt331.8nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt332.62nm = Slot(uri=NEON['spectrometerSignalAt332.62nm'], name="spectrometerSignalAt332.62nm", curie=NEON.curie('spectrometerSignalAt332.62nm'),
                      model_uri=NEON['spectrometerSignalAt332.62nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt333.43nm = Slot(uri=NEON['spectrometerSignalAt333.43nm'], name="spectrometerSignalAt333.43nm", curie=NEON.curie('spectrometerSignalAt333.43nm'),
                      model_uri=NEON['spectrometerSignalAt333.43nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt334.25nm = Slot(uri=NEON['spectrometerSignalAt334.25nm'], name="spectrometerSignalAt334.25nm", curie=NEON.curie('spectrometerSignalAt334.25nm'),
                      model_uri=NEON['spectrometerSignalAt334.25nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt335.06nm = Slot(uri=NEON['spectrometerSignalAt335.06nm'], name="spectrometerSignalAt335.06nm", curie=NEON.curie('spectrometerSignalAt335.06nm'),
                      model_uri=NEON['spectrometerSignalAt335.06nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt335.88nm = Slot(uri=NEON['spectrometerSignalAt335.88nm'], name="spectrometerSignalAt335.88nm", curie=NEON.curie('spectrometerSignalAt335.88nm'),
                      model_uri=NEON['spectrometerSignalAt335.88nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt336.7nm = Slot(uri=NEON['spectrometerSignalAt336.7nm'], name="spectrometerSignalAt336.7nm", curie=NEON.curie('spectrometerSignalAt336.7nm'),
                      model_uri=NEON['spectrometerSignalAt336.7nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt337.51nm = Slot(uri=NEON['spectrometerSignalAt337.51nm'], name="spectrometerSignalAt337.51nm", curie=NEON.curie('spectrometerSignalAt337.51nm'),
                      model_uri=NEON['spectrometerSignalAt337.51nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt338.33nm = Slot(uri=NEON['spectrometerSignalAt338.33nm'], name="spectrometerSignalAt338.33nm", curie=NEON.curie('spectrometerSignalAt338.33nm'),
                      model_uri=NEON['spectrometerSignalAt338.33nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt339.14nm = Slot(uri=NEON['spectrometerSignalAt339.14nm'], name="spectrometerSignalAt339.14nm", curie=NEON.curie('spectrometerSignalAt339.14nm'),
                      model_uri=NEON['spectrometerSignalAt339.14nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt339.96nm = Slot(uri=NEON['spectrometerSignalAt339.96nm'], name="spectrometerSignalAt339.96nm", curie=NEON.curie('spectrometerSignalAt339.96nm'),
                      model_uri=NEON['spectrometerSignalAt339.96nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt340.78nm = Slot(uri=NEON['spectrometerSignalAt340.78nm'], name="spectrometerSignalAt340.78nm", curie=NEON.curie('spectrometerSignalAt340.78nm'),
                      model_uri=NEON['spectrometerSignalAt340.78nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt341.59nm = Slot(uri=NEON['spectrometerSignalAt341.59nm'], name="spectrometerSignalAt341.59nm", curie=NEON.curie('spectrometerSignalAt341.59nm'),
                      model_uri=NEON['spectrometerSignalAt341.59nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt342.41nm = Slot(uri=NEON['spectrometerSignalAt342.41nm'], name="spectrometerSignalAt342.41nm", curie=NEON.curie('spectrometerSignalAt342.41nm'),
                      model_uri=NEON['spectrometerSignalAt342.41nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt343.22nm = Slot(uri=NEON['spectrometerSignalAt343.22nm'], name="spectrometerSignalAt343.22nm", curie=NEON.curie('spectrometerSignalAt343.22nm'),
                      model_uri=NEON['spectrometerSignalAt343.22nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt344.04nm = Slot(uri=NEON['spectrometerSignalAt344.04nm'], name="spectrometerSignalAt344.04nm", curie=NEON.curie('spectrometerSignalAt344.04nm'),
                      model_uri=NEON['spectrometerSignalAt344.04nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt344.85nm = Slot(uri=NEON['spectrometerSignalAt344.85nm'], name="spectrometerSignalAt344.85nm", curie=NEON.curie('spectrometerSignalAt344.85nm'),
                      model_uri=NEON['spectrometerSignalAt344.85nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt345.67nm = Slot(uri=NEON['spectrometerSignalAt345.67nm'], name="spectrometerSignalAt345.67nm", curie=NEON.curie('spectrometerSignalAt345.67nm'),
                      model_uri=NEON['spectrometerSignalAt345.67nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt346.48nm = Slot(uri=NEON['spectrometerSignalAt346.48nm'], name="spectrometerSignalAt346.48nm", curie=NEON.curie('spectrometerSignalAt346.48nm'),
                      model_uri=NEON['spectrometerSignalAt346.48nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt347.3nm = Slot(uri=NEON['spectrometerSignalAt347.3nm'], name="spectrometerSignalAt347.3nm", curie=NEON.curie('spectrometerSignalAt347.3nm'),
                      model_uri=NEON['spectrometerSignalAt347.3nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt348.12nm = Slot(uri=NEON['spectrometerSignalAt348.12nm'], name="spectrometerSignalAt348.12nm", curie=NEON.curie('spectrometerSignalAt348.12nm'),
                      model_uri=NEON['spectrometerSignalAt348.12nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt348.93nm = Slot(uri=NEON['spectrometerSignalAt348.93nm'], name="spectrometerSignalAt348.93nm", curie=NEON.curie('spectrometerSignalAt348.93nm'),
                      model_uri=NEON['spectrometerSignalAt348.93nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt349.75nm = Slot(uri=NEON['spectrometerSignalAt349.75nm'], name="spectrometerSignalAt349.75nm", curie=NEON.curie('spectrometerSignalAt349.75nm'),
                      model_uri=NEON['spectrometerSignalAt349.75nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt350.56nm = Slot(uri=NEON['spectrometerSignalAt350.56nm'], name="spectrometerSignalAt350.56nm", curie=NEON.curie('spectrometerSignalAt350.56nm'),
                      model_uri=NEON['spectrometerSignalAt350.56nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt351.38nm = Slot(uri=NEON['spectrometerSignalAt351.38nm'], name="spectrometerSignalAt351.38nm", curie=NEON.curie('spectrometerSignalAt351.38nm'),
                      model_uri=NEON['spectrometerSignalAt351.38nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt352.19nm = Slot(uri=NEON['spectrometerSignalAt352.19nm'], name="spectrometerSignalAt352.19nm", curie=NEON.curie('spectrometerSignalAt352.19nm'),
                      model_uri=NEON['spectrometerSignalAt352.19nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt353.01nm = Slot(uri=NEON['spectrometerSignalAt353.01nm'], name="spectrometerSignalAt353.01nm", curie=NEON.curie('spectrometerSignalAt353.01nm'),
                      model_uri=NEON['spectrometerSignalAt353.01nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt353.82nm = Slot(uri=NEON['spectrometerSignalAt353.82nm'], name="spectrometerSignalAt353.82nm", curie=NEON.curie('spectrometerSignalAt353.82nm'),
                      model_uri=NEON['spectrometerSignalAt353.82nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt354.63nm = Slot(uri=NEON['spectrometerSignalAt354.63nm'], name="spectrometerSignalAt354.63nm", curie=NEON.curie('spectrometerSignalAt354.63nm'),
                      model_uri=NEON['spectrometerSignalAt354.63nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt355.45nm = Slot(uri=NEON['spectrometerSignalAt355.45nm'], name="spectrometerSignalAt355.45nm", curie=NEON.curie('spectrometerSignalAt355.45nm'),
                      model_uri=NEON['spectrometerSignalAt355.45nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt356.26nm = Slot(uri=NEON['spectrometerSignalAt356.26nm'], name="spectrometerSignalAt356.26nm", curie=NEON.curie('spectrometerSignalAt356.26nm'),
                      model_uri=NEON['spectrometerSignalAt356.26nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt357.08nm = Slot(uri=NEON['spectrometerSignalAt357.08nm'], name="spectrometerSignalAt357.08nm", curie=NEON.curie('spectrometerSignalAt357.08nm'),
                      model_uri=NEON['spectrometerSignalAt357.08nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt357.89nm = Slot(uri=NEON['spectrometerSignalAt357.89nm'], name="spectrometerSignalAt357.89nm", curie=NEON.curie('spectrometerSignalAt357.89nm'),
                      model_uri=NEON['spectrometerSignalAt357.89nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt358.71nm = Slot(uri=NEON['spectrometerSignalAt358.71nm'], name="spectrometerSignalAt358.71nm", curie=NEON.curie('spectrometerSignalAt358.71nm'),
                      model_uri=NEON['spectrometerSignalAt358.71nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt359.52nm = Slot(uri=NEON['spectrometerSignalAt359.52nm'], name="spectrometerSignalAt359.52nm", curie=NEON.curie('spectrometerSignalAt359.52nm'),
                      model_uri=NEON['spectrometerSignalAt359.52nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt360.33nm = Slot(uri=NEON['spectrometerSignalAt360.33nm'], name="spectrometerSignalAt360.33nm", curie=NEON.curie('spectrometerSignalAt360.33nm'),
                      model_uri=NEON['spectrometerSignalAt360.33nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt361.15nm = Slot(uri=NEON['spectrometerSignalAt361.15nm'], name="spectrometerSignalAt361.15nm", curie=NEON.curie('spectrometerSignalAt361.15nm'),
                      model_uri=NEON['spectrometerSignalAt361.15nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt361.96nm = Slot(uri=NEON['spectrometerSignalAt361.96nm'], name="spectrometerSignalAt361.96nm", curie=NEON.curie('spectrometerSignalAt361.96nm'),
                      model_uri=NEON['spectrometerSignalAt361.96nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt362.78nm = Slot(uri=NEON['spectrometerSignalAt362.78nm'], name="spectrometerSignalAt362.78nm", curie=NEON.curie('spectrometerSignalAt362.78nm'),
                      model_uri=NEON['spectrometerSignalAt362.78nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt363.59nm = Slot(uri=NEON['spectrometerSignalAt363.59nm'], name="spectrometerSignalAt363.59nm", curie=NEON.curie('spectrometerSignalAt363.59nm'),
                      model_uri=NEON['spectrometerSignalAt363.59nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt364.4nm = Slot(uri=NEON['spectrometerSignalAt364.4nm'], name="spectrometerSignalAt364.4nm", curie=NEON.curie('spectrometerSignalAt364.4nm'),
                      model_uri=NEON['spectrometerSignalAt364.4nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt365.22nm = Slot(uri=NEON['spectrometerSignalAt365.22nm'], name="spectrometerSignalAt365.22nm", curie=NEON.curie('spectrometerSignalAt365.22nm'),
                      model_uri=NEON['spectrometerSignalAt365.22nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt366.03nm = Slot(uri=NEON['spectrometerSignalAt366.03nm'], name="spectrometerSignalAt366.03nm", curie=NEON.curie('spectrometerSignalAt366.03nm'),
                      model_uri=NEON['spectrometerSignalAt366.03nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt366.84nm = Slot(uri=NEON['spectrometerSignalAt366.84nm'], name="spectrometerSignalAt366.84nm", curie=NEON.curie('spectrometerSignalAt366.84nm'),
                      model_uri=NEON['spectrometerSignalAt366.84nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt367.65nm = Slot(uri=NEON['spectrometerSignalAt367.65nm'], name="spectrometerSignalAt367.65nm", curie=NEON.curie('spectrometerSignalAt367.65nm'),
                      model_uri=NEON['spectrometerSignalAt367.65nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt368.47nm = Slot(uri=NEON['spectrometerSignalAt368.47nm'], name="spectrometerSignalAt368.47nm", curie=NEON.curie('spectrometerSignalAt368.47nm'),
                      model_uri=NEON['spectrometerSignalAt368.47nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt369.28nm = Slot(uri=NEON['spectrometerSignalAt369.28nm'], name="spectrometerSignalAt369.28nm", curie=NEON.curie('spectrometerSignalAt369.28nm'),
                      model_uri=NEON['spectrometerSignalAt369.28nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt370.09nm = Slot(uri=NEON['spectrometerSignalAt370.09nm'], name="spectrometerSignalAt370.09nm", curie=NEON.curie('spectrometerSignalAt370.09nm'),
                      model_uri=NEON['spectrometerSignalAt370.09nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt370.91nm = Slot(uri=NEON['spectrometerSignalAt370.91nm'], name="spectrometerSignalAt370.91nm", curie=NEON.curie('spectrometerSignalAt370.91nm'),
                      model_uri=NEON['spectrometerSignalAt370.91nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt371.72nm = Slot(uri=NEON['spectrometerSignalAt371.72nm'], name="spectrometerSignalAt371.72nm", curie=NEON.curie('spectrometerSignalAt371.72nm'),
                      model_uri=NEON['spectrometerSignalAt371.72nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt372.53nm = Slot(uri=NEON['spectrometerSignalAt372.53nm'], name="spectrometerSignalAt372.53nm", curie=NEON.curie('spectrometerSignalAt372.53nm'),
                      model_uri=NEON['spectrometerSignalAt372.53nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt373.34nm = Slot(uri=NEON['spectrometerSignalAt373.34nm'], name="spectrometerSignalAt373.34nm", curie=NEON.curie('spectrometerSignalAt373.34nm'),
                      model_uri=NEON['spectrometerSignalAt373.34nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt374.15nm = Slot(uri=NEON['spectrometerSignalAt374.15nm'], name="spectrometerSignalAt374.15nm", curie=NEON.curie('spectrometerSignalAt374.15nm'),
                      model_uri=NEON['spectrometerSignalAt374.15nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt374.97nm = Slot(uri=NEON['spectrometerSignalAt374.97nm'], name="spectrometerSignalAt374.97nm", curie=NEON.curie('spectrometerSignalAt374.97nm'),
                      model_uri=NEON['spectrometerSignalAt374.97nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt375.78nm = Slot(uri=NEON['spectrometerSignalAt375.78nm'], name="spectrometerSignalAt375.78nm", curie=NEON.curie('spectrometerSignalAt375.78nm'),
                      model_uri=NEON['spectrometerSignalAt375.78nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt376.59nm = Slot(uri=NEON['spectrometerSignalAt376.59nm'], name="spectrometerSignalAt376.59nm", curie=NEON.curie('spectrometerSignalAt376.59nm'),
                      model_uri=NEON['spectrometerSignalAt376.59nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt377.4nm = Slot(uri=NEON['spectrometerSignalAt377.4nm'], name="spectrometerSignalAt377.4nm", curie=NEON.curie('spectrometerSignalAt377.4nm'),
                      model_uri=NEON['spectrometerSignalAt377.4nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt378.21nm = Slot(uri=NEON['spectrometerSignalAt378.21nm'], name="spectrometerSignalAt378.21nm", curie=NEON.curie('spectrometerSignalAt378.21nm'),
                      model_uri=NEON['spectrometerSignalAt378.21nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt379.02nm = Slot(uri=NEON['spectrometerSignalAt379.02nm'], name="spectrometerSignalAt379.02nm", curie=NEON.curie('spectrometerSignalAt379.02nm'),
                      model_uri=NEON['spectrometerSignalAt379.02nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt379.83nm = Slot(uri=NEON['spectrometerSignalAt379.83nm'], name="spectrometerSignalAt379.83nm", curie=NEON.curie('spectrometerSignalAt379.83nm'),
                      model_uri=NEON['spectrometerSignalAt379.83nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt380.64nm = Slot(uri=NEON['spectrometerSignalAt380.64nm'], name="spectrometerSignalAt380.64nm", curie=NEON.curie('spectrometerSignalAt380.64nm'),
                      model_uri=NEON['spectrometerSignalAt380.64nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt381.45nm = Slot(uri=NEON['spectrometerSignalAt381.45nm'], name="spectrometerSignalAt381.45nm", curie=NEON.curie('spectrometerSignalAt381.45nm'),
                      model_uri=NEON['spectrometerSignalAt381.45nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt382.27nm = Slot(uri=NEON['spectrometerSignalAt382.27nm'], name="spectrometerSignalAt382.27nm", curie=NEON.curie('spectrometerSignalAt382.27nm'),
                      model_uri=NEON['spectrometerSignalAt382.27nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt383.08nm = Slot(uri=NEON['spectrometerSignalAt383.08nm'], name="spectrometerSignalAt383.08nm", curie=NEON.curie('spectrometerSignalAt383.08nm'),
                      model_uri=NEON['spectrometerSignalAt383.08nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt383.89nm = Slot(uri=NEON['spectrometerSignalAt383.89nm'], name="spectrometerSignalAt383.89nm", curie=NEON.curie('spectrometerSignalAt383.89nm'),
                      model_uri=NEON['spectrometerSignalAt383.89nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt384.7nm = Slot(uri=NEON['spectrometerSignalAt384.7nm'], name="spectrometerSignalAt384.7nm", curie=NEON.curie('spectrometerSignalAt384.7nm'),
                      model_uri=NEON['spectrometerSignalAt384.7nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt385.51nm = Slot(uri=NEON['spectrometerSignalAt385.51nm'], name="spectrometerSignalAt385.51nm", curie=NEON.curie('spectrometerSignalAt385.51nm'),
                      model_uri=NEON['spectrometerSignalAt385.51nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt386.32nm = Slot(uri=NEON['spectrometerSignalAt386.32nm'], name="spectrometerSignalAt386.32nm", curie=NEON.curie('spectrometerSignalAt386.32nm'),
                      model_uri=NEON['spectrometerSignalAt386.32nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt387.13nm = Slot(uri=NEON['spectrometerSignalAt387.13nm'], name="spectrometerSignalAt387.13nm", curie=NEON.curie('spectrometerSignalAt387.13nm'),
                      model_uri=NEON['spectrometerSignalAt387.13nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt387.93nm = Slot(uri=NEON['spectrometerSignalAt387.93nm'], name="spectrometerSignalAt387.93nm", curie=NEON.curie('spectrometerSignalAt387.93nm'),
                      model_uri=NEON['spectrometerSignalAt387.93nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt388.74nm = Slot(uri=NEON['spectrometerSignalAt388.74nm'], name="spectrometerSignalAt388.74nm", curie=NEON.curie('spectrometerSignalAt388.74nm'),
                      model_uri=NEON['spectrometerSignalAt388.74nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt389.55nm = Slot(uri=NEON['spectrometerSignalAt389.55nm'], name="spectrometerSignalAt389.55nm", curie=NEON.curie('spectrometerSignalAt389.55nm'),
                      model_uri=NEON['spectrometerSignalAt389.55nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt390.36nm = Slot(uri=NEON['spectrometerSignalAt390.36nm'], name="spectrometerSignalAt390.36nm", curie=NEON.curie('spectrometerSignalAt390.36nm'),
                      model_uri=NEON['spectrometerSignalAt390.36nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt391.17nm = Slot(uri=NEON['spectrometerSignalAt391.17nm'], name="spectrometerSignalAt391.17nm", curie=NEON.curie('spectrometerSignalAt391.17nm'),
                      model_uri=NEON['spectrometerSignalAt391.17nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt391.98nm = Slot(uri=NEON['spectrometerSignalAt391.98nm'], name="spectrometerSignalAt391.98nm", curie=NEON.curie('spectrometerSignalAt391.98nm'),
                      model_uri=NEON['spectrometerSignalAt391.98nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt392.79nm = Slot(uri=NEON['spectrometerSignalAt392.79nm'], name="spectrometerSignalAt392.79nm", curie=NEON.curie('spectrometerSignalAt392.79nm'),
                      model_uri=NEON['spectrometerSignalAt392.79nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt393.6nm = Slot(uri=NEON['spectrometerSignalAt393.6nm'], name="spectrometerSignalAt393.6nm", curie=NEON.curie('spectrometerSignalAt393.6nm'),
                      model_uri=NEON['spectrometerSignalAt393.6nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt394.4nm = Slot(uri=NEON['spectrometerSignalAt394.4nm'], name="spectrometerSignalAt394.4nm", curie=NEON.curie('spectrometerSignalAt394.4nm'),
                      model_uri=NEON['spectrometerSignalAt394.4nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt395.21nm = Slot(uri=NEON['spectrometerSignalAt395.21nm'], name="spectrometerSignalAt395.21nm", curie=NEON.curie('spectrometerSignalAt395.21nm'),
                      model_uri=NEON['spectrometerSignalAt395.21nm'], domain=None, range=Optional[float])

slots.spectrometerSignalAt396.02nm = Slot(uri=NEON['spectrometerSignalAt396.02nm'], name="spectrometerSignalAt396.02nm", curie=NEON.curie('spectrometerSignalAt396.02nm'),
                      model_uri=NEON['spectrometerSignalAt396.02nm'], domain=None, range=Optional[float])

slots.spectrometerTemp = Slot(uri=NEON.spectrometerTemp, name="spectrometerTemp", curie=NEON.curie('spectrometerTemp'),
                      model_uri=NEON.spectrometerTemp, domain=None, range=Optional[float])

slots.lampTemp = Slot(uri=NEON.lampTemp, name="lampTemp", curie=NEON.curie('lampTemp'),
                      model_uri=NEON.lampTemp, domain=None, range=Optional[float])

slots.lampUseTime = Slot(uri=NEON.lampUseTime, name="lampUseTime", curie=NEON.curie('lampUseTime'),
                      model_uri=NEON.lampUseTime, domain=None, range=Optional[float])

slots.sensorVoltage = Slot(uri=NEON.sensorVoltage, name="sensorVoltage", curie=NEON.curie('sensorVoltage'),
                      model_uri=NEON.sensorVoltage, domain=None, range=Optional[float])

slots.lampVoltage = Slot(uri=NEON.lampVoltage, name="lampVoltage", curie=NEON.curie('lampVoltage'),
                      model_uri=NEON.lampVoltage, domain=None, range=Optional[float])

slots.spectrometerVoltage = Slot(uri=NEON.spectrometerVoltage, name="spectrometerVoltage", curie=NEON.curie('spectrometerVoltage'),
                      model_uri=NEON.spectrometerVoltage, domain=None, range=Optional[float])

slots.sensorCurrent = Slot(uri=NEON.sensorCurrent, name="sensorCurrent", curie=NEON.curie('sensorCurrent'),
                      model_uri=NEON.sensorCurrent, domain=None, range=Optional[float])

slots.fitParameter1 = Slot(uri=NEON.fitParameter1, name="fitParameter1", curie=NEON.curie('fitParameter1'),
                      model_uri=NEON.fitParameter1, domain=None, range=Optional[float])

slots.fitParameter2 = Slot(uri=NEON.fitParameter2, name="fitParameter2", curie=NEON.curie('fitParameter2'),
                      model_uri=NEON.fitParameter2, domain=None, range=Optional[float])

slots.fitParameter3 = Slot(uri=NEON.fitParameter3, name="fitParameter3", curie=NEON.curie('fitParameter3'),
                      model_uri=NEON.fitParameter3, domain=None, range=Optional[float])

slots.fitParameter4 = Slot(uri=NEON.fitParameter4, name="fitParameter4", curie=NEON.curie('fitParameter4'),
                      model_uri=NEON.fitParameter4, domain=None, range=Optional[float])

slots.fitError = Slot(uri=NEON.fitError, name="fitError", curie=NEON.curie('fitError'),
                      model_uri=NEON.fitError, domain=None, range=Optional[float])

slots.checkSum = Slot(uri=NEON.checkSum, name="checkSum", curie=NEON.curie('checkSum'),
                      model_uri=NEON.checkSum, domain=None, range=Optional[float])

slots.pH = Slot(uri=NEON.pH, name="pH", curie=NEON.curie('pH'),
                      model_uri=NEON.pH, domain=None, range=Optional[float])

slots.pHvoltage = Slot(uri=NEON.pHvoltage, name="pHvoltage", curie=NEON.curie('pHvoltage'),
                      model_uri=NEON.pHvoltage, domain=None, range=Optional[float])

slots.blueGreenAlgaePhycocyanin = Slot(uri=NEON.blueGreenAlgaePhycocyanin, name="blueGreenAlgaePhycocyanin", curie=NEON.curie('blueGreenAlgaePhycocyanin'),
                      model_uri=NEON.blueGreenAlgaePhycocyanin, domain=None, range=Optional[float])

slots.chlorophyll = Slot(uri=NEON.chlorophyll, name="chlorophyll", curie=NEON.curie('chlorophyll'),
                      model_uri=NEON.chlorophyll, domain=None, range=Optional[float])

slots.fDOM = Slot(uri=NEON.fDOM, name="fDOM", curie=NEON.curie('fDOM'),
                      model_uri=NEON.fDOM, domain=None, range=Optional[float])

slots.turbidity = Slot(uri=NEON.turbidity, name="turbidity", curie=NEON.curie('turbidity'),
                      model_uri=NEON.turbidity, domain=None, range=Optional[float])

slots.sondeSurfaceWaterPressure = Slot(uri=NEON.sondeSurfaceWaterPressure, name="sondeSurfaceWaterPressure", curie=NEON.curie('sondeSurfaceWaterPressure'),
                      model_uri=NEON.sondeSurfaceWaterPressure, domain=None, range=Optional[float])

slots.sensorDepth = Slot(uri=NEON.sensorDepth, name="sensorDepth", curie=NEON.curie('sensorDepth'),
                      model_uri=NEON.sensorDepth, domain=None, range=Optional[float])

slots.sondeFaultCode = Slot(uri=NEON.sondeFaultCode, name="sondeFaultCode", curie=NEON.curie('sondeFaultCode'),
                      model_uri=NEON.sondeFaultCode, domain=None, range=Optional[float])

slots.chlorophyllRaw = Slot(uri=NEON.chlorophyllRaw, name="chlorophyllRaw", curie=NEON.curie('chlorophyllRaw'),
                      model_uri=NEON.chlorophyllRaw, domain=None, range=Optional[float])

slots.blueGreenAlgaeRaw = Slot(uri=NEON.blueGreenAlgaeRaw, name="blueGreenAlgaeRaw", curie=NEON.curie('blueGreenAlgaeRaw'),
                      model_uri=NEON.blueGreenAlgaeRaw, domain=None, range=Optional[float])

slots.fDOMRaw = Slot(uri=NEON.fDOMRaw, name="fDOMRaw", curie=NEON.curie('fDOMRaw'),
                      model_uri=NEON.fDOMRaw, domain=None, range=Optional[float])

slots.turbidityRaw = Slot(uri=NEON.turbidityRaw, name="turbidityRaw", curie=NEON.curie('turbidityRaw'),
                      model_uri=NEON.turbidityRaw, domain=None, range=Optional[float])

slots.wiperPosition = Slot(uri=NEON.wiperPosition, name="wiperPosition", curie=NEON.curie('wiperPosition'),
                      model_uri=NEON.wiperPosition, domain=None, range=Optional[float])

slots.dscUnitsFail = Slot(uri=NEON.dscUnitsFail, name="dscUnitsFail", curie=NEON.curie('dscUnitsFail'),
                      model_uri=NEON.dscUnitsFail, domain=None, range=Optional[float])

slots.dscWaterEdgeWarn = Slot(uri=NEON.dscWaterEdgeWarn, name="dscWaterEdgeWarn", curie=NEON.curie('dscWaterEdgeWarn'),
                      model_uri=NEON.dscWaterEdgeWarn, domain=None, range=Optional[float])

slots.dscStationEntryWarn = Slot(uri=NEON.dscStationEntryWarn, name="dscStationEntryWarn", curie=NEON.curie('dscStationEntryWarn'),
                      model_uri=NEON.dscStationEntryWarn, domain=None, range=Optional[float])

slots.dscFilterParamWarn = Slot(uri=NEON.dscFilterParamWarn, name="dscFilterParamWarn", curie=NEON.curie('dscFilterParamWarn'),
                      model_uri=NEON.dscFilterParamWarn, domain=None, range=Optional[float])

slots.startDateTime = Slot(uri=NEON.startDateTime, name="startDateTime", curie=NEON.curie('startDateTime'),
                      model_uri=NEON.startDateTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.endDateTime = Slot(uri=NEON.endDateTime, name="endDateTime", curie=NEON.curie('endDateTime'),
                      model_uri=NEON.endDateTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.wellWaterDepth = Slot(uri=NEON.wellWaterDepth, name="wellWaterDepth", curie=NEON.curie('wellWaterDepth'),
                      model_uri=NEON.wellWaterDepth, domain=None, range=Optional[float])

slots.sampleDepth = Slot(uri=NEON.sampleDepth, name="sampleDepth", curie=NEON.curie('sampleDepth'),
                      model_uri=NEON.sampleDepth, domain=None, range=Optional[float])

slots.sampleExtractionMethod = Slot(uri=NEON.sampleExtractionMethod, name="sampleExtractionMethod", curie=NEON.curie('sampleExtractionMethod'),
                      model_uri=NEON.sampleExtractionMethod, domain=None, range=Optional[str])

slots.wellDischargeRate = Slot(uri=NEON.wellDischargeRate, name="wellDischargeRate", curie=NEON.curie('wellDischargeRate'),
                      model_uri=NEON.wellDischargeRate, domain=None, range=Optional[float])

slots.wellVolumePurged = Slot(uri=NEON.wellVolumePurged, name="wellVolumePurged", curie=NEON.curie('wellVolumePurged'),
                      model_uri=NEON.wellVolumePurged, domain=None, range=Optional[float])

slots.wellSampleDepth = Slot(uri=NEON.wellSampleDepth, name="wellSampleDepth", curie=NEON.curie('wellSampleDepth'),
                      model_uri=NEON.wellSampleDepth, domain=None, range=Optional[float])

slots.time = Slot(uri=NEON.time, name="time", curie=NEON.curie('time'),
                      model_uri=NEON.time, domain=None, range=Optional[Union[str, XSDTime]])

slots.groundwaterTempExpUncert = Slot(uri=NEON.groundwaterTempExpUncert, name="groundwaterTempExpUncert", curie=NEON.curie('groundwaterTempExpUncert'),
                      model_uri=NEON.groundwaterTempExpUncert, domain=None, range=Optional[float])

slots.groundwaterTempRangeQF = Slot(uri=NEON.groundwaterTempRangeQF, name="groundwaterTempRangeQF", curie=NEON.curie('groundwaterTempRangeQF'),
                      model_uri=NEON.groundwaterTempRangeQF, domain=None, range=Optional[int])

slots.groundwaterTempPersistenceQF = Slot(uri=NEON.groundwaterTempPersistenceQF, name="groundwaterTempPersistenceQF", curie=NEON.curie('groundwaterTempPersistenceQF'),
                      model_uri=NEON.groundwaterTempPersistenceQF, domain=None, range=Optional[int])

slots.groundwaterTempStepQF = Slot(uri=NEON.groundwaterTempStepQF, name="groundwaterTempStepQF", curie=NEON.curie('groundwaterTempStepQF'),
                      model_uri=NEON.groundwaterTempStepQF, domain=None, range=Optional[int])

slots.groundwaterTempNullQF = Slot(uri=NEON.groundwaterTempNullQF, name="groundwaterTempNullQF", curie=NEON.curie('groundwaterTempNullQF'),
                      model_uri=NEON.groundwaterTempNullQF, domain=None, range=Optional[int])

slots.groundwaterTempGapQF = Slot(uri=NEON.groundwaterTempGapQF, name="groundwaterTempGapQF", curie=NEON.curie('groundwaterTempGapQF'),
                      model_uri=NEON.groundwaterTempGapQF, domain=None, range=Optional[int])

slots.groundwaterTempConsistencyQF = Slot(uri=NEON.groundwaterTempConsistencyQF, name="groundwaterTempConsistencyQF", curie=NEON.curie('groundwaterTempConsistencyQF'),
                      model_uri=NEON.groundwaterTempConsistencyQF, domain=None, range=Optional[int])

slots.groundwaterTempSpikeQF = Slot(uri=NEON.groundwaterTempSpikeQF, name="groundwaterTempSpikeQF", curie=NEON.curie('groundwaterTempSpikeQF'),
                      model_uri=NEON.groundwaterTempSpikeQF, domain=None, range=Optional[int])

slots.groundwaterTempMean = Slot(uri=NEON.groundwaterTempMean, name="groundwaterTempMean", curie=NEON.curie('groundwaterTempMean'),
                      model_uri=NEON.groundwaterTempMean, domain=None, range=Optional[float])

slots.groundwaterTempMinimum = Slot(uri=NEON.groundwaterTempMinimum, name="groundwaterTempMinimum", curie=NEON.curie('groundwaterTempMinimum'),
                      model_uri=NEON.groundwaterTempMinimum, domain=None, range=Optional[float])

slots.groundwaterTempMaximum = Slot(uri=NEON.groundwaterTempMaximum, name="groundwaterTempMaximum", curie=NEON.curie('groundwaterTempMaximum'),
                      model_uri=NEON.groundwaterTempMaximum, domain=None, range=Optional[float])

slots.groundwaterTempVariance = Slot(uri=NEON.groundwaterTempVariance, name="groundwaterTempVariance", curie=NEON.curie('groundwaterTempVariance'),
                      model_uri=NEON.groundwaterTempVariance, domain=None, range=Optional[float])

slots.groundwaterTempNumPts = Slot(uri=NEON.groundwaterTempNumPts, name="groundwaterTempNumPts", curie=NEON.curie('groundwaterTempNumPts'),
                      model_uri=NEON.groundwaterTempNumPts, domain=None, range=Optional[float])

slots.groundwaterTempStdErMean = Slot(uri=NEON.groundwaterTempStdErMean, name="groundwaterTempStdErMean", curie=NEON.curie('groundwaterTempStdErMean'),
                      model_uri=NEON.groundwaterTempStdErMean, domain=None, range=Optional[float])

slots.groundwaterSpecCond = Slot(uri=NEON.groundwaterSpecCond, name="groundwaterSpecCond", curie=NEON.curie('groundwaterSpecCond'),
                      model_uri=NEON.groundwaterSpecCond, domain=None, range=Optional[float])

slots.groundwaterSpecCondExpUncert = Slot(uri=NEON.groundwaterSpecCondExpUncert, name="groundwaterSpecCondExpUncert", curie=NEON.curie('groundwaterSpecCondExpUncert'),
                      model_uri=NEON.groundwaterSpecCondExpUncert, domain=None, range=Optional[float])

slots.groundwaterSpecCondRangeQF = Slot(uri=NEON.groundwaterSpecCondRangeQF, name="groundwaterSpecCondRangeQF", curie=NEON.curie('groundwaterSpecCondRangeQF'),
                      model_uri=NEON.groundwaterSpecCondRangeQF, domain=None, range=Optional[int])

slots.groundwaterSpecCondPersistQF = Slot(uri=NEON.groundwaterSpecCondPersistQF, name="groundwaterSpecCondPersistQF", curie=NEON.curie('groundwaterSpecCondPersistQF'),
                      model_uri=NEON.groundwaterSpecCondPersistQF, domain=None, range=Optional[int])

slots.groundwaterSpecCondStepQF = Slot(uri=NEON.groundwaterSpecCondStepQF, name="groundwaterSpecCondStepQF", curie=NEON.curie('groundwaterSpecCondStepQF'),
                      model_uri=NEON.groundwaterSpecCondStepQF, domain=None, range=Optional[int])

slots.groundwaterSpecCondNullQF = Slot(uri=NEON.groundwaterSpecCondNullQF, name="groundwaterSpecCondNullQF", curie=NEON.curie('groundwaterSpecCondNullQF'),
                      model_uri=NEON.groundwaterSpecCondNullQF, domain=None, range=Optional[int])

slots.groundwaterSpecCondGapQF = Slot(uri=NEON.groundwaterSpecCondGapQF, name="groundwaterSpecCondGapQF", curie=NEON.curie('groundwaterSpecCondGapQF'),
                      model_uri=NEON.groundwaterSpecCondGapQF, domain=None, range=Optional[int])

slots.groundwaterSpecCondConsistQF = Slot(uri=NEON.groundwaterSpecCondConsistQF, name="groundwaterSpecCondConsistQF", curie=NEON.curie('groundwaterSpecCondConsistQF'),
                      model_uri=NEON.groundwaterSpecCondConsistQF, domain=None, range=Optional[int])

slots.groundwaterSpecCondSpikeQF = Slot(uri=NEON.groundwaterSpecCondSpikeQF, name="groundwaterSpecCondSpikeQF", curie=NEON.curie('groundwaterSpecCondSpikeQF'),
                      model_uri=NEON.groundwaterSpecCondSpikeQF, domain=None, range=Optional[int])

slots.groundwaterSpecCondMean = Slot(uri=NEON.groundwaterSpecCondMean, name="groundwaterSpecCondMean", curie=NEON.curie('groundwaterSpecCondMean'),
                      model_uri=NEON.groundwaterSpecCondMean, domain=None, range=Optional[float])

slots.groundwaterSpecCondMinimum = Slot(uri=NEON.groundwaterSpecCondMinimum, name="groundwaterSpecCondMinimum", curie=NEON.curie('groundwaterSpecCondMinimum'),
                      model_uri=NEON.groundwaterSpecCondMinimum, domain=None, range=Optional[float])

slots.groundwaterSpecCondMaximum = Slot(uri=NEON.groundwaterSpecCondMaximum, name="groundwaterSpecCondMaximum", curie=NEON.curie('groundwaterSpecCondMaximum'),
                      model_uri=NEON.groundwaterSpecCondMaximum, domain=None, range=Optional[float])

slots.groundwaterSpecCondVariance = Slot(uri=NEON.groundwaterSpecCondVariance, name="groundwaterSpecCondVariance", curie=NEON.curie('groundwaterSpecCondVariance'),
                      model_uri=NEON.groundwaterSpecCondVariance, domain=None, range=Optional[float])

slots.groundwaterSpecCondNumPts = Slot(uri=NEON.groundwaterSpecCondNumPts, name="groundwaterSpecCondNumPts", curie=NEON.curie('groundwaterSpecCondNumPts'),
                      model_uri=NEON.groundwaterSpecCondNumPts, domain=None, range=Optional[float])

slots.groundwaterSpecCondStdErMean = Slot(uri=NEON.groundwaterSpecCondStdErMean, name="groundwaterSpecCondStdErMean", curie=NEON.curie('groundwaterSpecCondStdErMean'),
                      model_uri=NEON.groundwaterSpecCondStdErMean, domain=None, range=Optional[float])

slots.groundwaterElev = Slot(uri=NEON.groundwaterElev, name="groundwaterElev", curie=NEON.curie('groundwaterElev'),
                      model_uri=NEON.groundwaterElev, domain=None, range=Optional[float])

slots.groundwaterElevExpUncert = Slot(uri=NEON.groundwaterElevExpUncert, name="groundwaterElevExpUncert", curie=NEON.curie('groundwaterElevExpUncert'),
                      model_uri=NEON.groundwaterElevExpUncert, domain=None, range=Optional[float])

slots.groundwaterElevRangeQF = Slot(uri=NEON.groundwaterElevRangeQF, name="groundwaterElevRangeQF", curie=NEON.curie('groundwaterElevRangeQF'),
                      model_uri=NEON.groundwaterElevRangeQF, domain=None, range=Optional[int])

slots.groundwaterElevPersistQF = Slot(uri=NEON.groundwaterElevPersistQF, name="groundwaterElevPersistQF", curie=NEON.curie('groundwaterElevPersistQF'),
                      model_uri=NEON.groundwaterElevPersistQF, domain=None, range=Optional[int])

slots.groundwaterElevStepQF = Slot(uri=NEON.groundwaterElevStepQF, name="groundwaterElevStepQF", curie=NEON.curie('groundwaterElevStepQF'),
                      model_uri=NEON.groundwaterElevStepQF, domain=None, range=Optional[int])

slots.groundwaterElevNullQF = Slot(uri=NEON.groundwaterElevNullQF, name="groundwaterElevNullQF", curie=NEON.curie('groundwaterElevNullQF'),
                      model_uri=NEON.groundwaterElevNullQF, domain=None, range=Optional[int])

slots.groundwaterElevGapQF = Slot(uri=NEON.groundwaterElevGapQF, name="groundwaterElevGapQF", curie=NEON.curie('groundwaterElevGapQF'),
                      model_uri=NEON.groundwaterElevGapQF, domain=None, range=Optional[int])

slots.groundwaterElevConsistQF = Slot(uri=NEON.groundwaterElevConsistQF, name="groundwaterElevConsistQF", curie=NEON.curie('groundwaterElevConsistQF'),
                      model_uri=NEON.groundwaterElevConsistQF, domain=None, range=Optional[int])

slots.groundwaterElevSpikeQF = Slot(uri=NEON.groundwaterElevSpikeQF, name="groundwaterElevSpikeQF", curie=NEON.curie('groundwaterElevSpikeQF'),
                      model_uri=NEON.groundwaterElevSpikeQF, domain=None, range=Optional[int])

slots.groundwaterElevMean = Slot(uri=NEON.groundwaterElevMean, name="groundwaterElevMean", curie=NEON.curie('groundwaterElevMean'),
                      model_uri=NEON.groundwaterElevMean, domain=None, range=Optional[float])

slots.groundwaterElevMinimum = Slot(uri=NEON.groundwaterElevMinimum, name="groundwaterElevMinimum", curie=NEON.curie('groundwaterElevMinimum'),
                      model_uri=NEON.groundwaterElevMinimum, domain=None, range=Optional[float])

slots.groundwaterElevMaximum = Slot(uri=NEON.groundwaterElevMaximum, name="groundwaterElevMaximum", curie=NEON.curie('groundwaterElevMaximum'),
                      model_uri=NEON.groundwaterElevMaximum, domain=None, range=Optional[float])

slots.groundwaterElevVariance = Slot(uri=NEON.groundwaterElevVariance, name="groundwaterElevVariance", curie=NEON.curie('groundwaterElevVariance'),
                      model_uri=NEON.groundwaterElevVariance, domain=None, range=Optional[float])

slots.groundwaterElevNumPts = Slot(uri=NEON.groundwaterElevNumPts, name="groundwaterElevNumPts", curie=NEON.curie('groundwaterElevNumPts'),
                      model_uri=NEON.groundwaterElevNumPts, domain=None, range=Optional[float])

slots.groundwaterElevStdErMean = Slot(uri=NEON.groundwaterElevStdErMean, name="groundwaterElevStdErMean", curie=NEON.curie('groundwaterElevStdErMean'),
                      model_uri=NEON.groundwaterElevStdErMean, domain=None, range=Optional[float])

slots.soilPRTResistance = Slot(uri=NEON.soilPRTResistance, name="soilPRTResistance", curie=NEON.curie('soilPRTResistance'),
                      model_uri=NEON.soilPRTResistance, domain=None, range=Optional[float])

slots.rawCO2 = Slot(uri=NEON.rawCO2, name="rawCO2", curie=NEON.curie('rawCO2'),
                      model_uri=NEON.rawCO2, domain=None, range=Optional[float])

slots.headspaceTemp = Slot(uri=NEON.headspaceTemp, name="headspaceTemp", curie=NEON.curie('headspaceTemp'),
                      model_uri=NEON.headspaceTemp, domain=None, range=Optional[float])

slots.errorStatus = Slot(uri=NEON.errorStatus, name="errorStatus", curie=NEON.curie('errorStatus'),
                      model_uri=NEON.errorStatus, domain=None, range=Optional[float])

slots.trapType = Slot(uri=NEON.trapType, name="trapType", curie=NEON.curie('trapType'),
                      model_uri=NEON.trapType, domain=None, range=Optional[str])

slots.externalConductance = Slot(uri=NEON.externalConductance, name="externalConductance", curie=NEON.curie('externalConductance'),
                      model_uri=NEON.externalConductance, domain=None, range=Optional[float])

slots.waterCarbonate = Slot(uri=NEON.waterCarbonate, name="waterCarbonate", curie=NEON.curie('waterCarbonate'),
                      model_uri=NEON.waterCarbonate, domain=None, range=Optional[float])

slots.waterBicarbonate = Slot(uri=NEON.waterBicarbonate, name="waterBicarbonate", curie=NEON.curie('waterBicarbonate'),
                      model_uri=NEON.waterBicarbonate, domain=None, range=Optional[float])

slots.externalANC = Slot(uri=NEON.externalANC, name="externalANC", curie=NEON.curie('externalANC'),
                      model_uri=NEON.externalANC, domain=None, range=Optional[float])

slots.waterCalcium = Slot(uri=NEON.waterCalcium, name="waterCalcium", curie=NEON.curie('waterCalcium'),
                      model_uri=NEON.waterCalcium, domain=None, range=Optional[float])

slots.waterMagnesium = Slot(uri=NEON.waterMagnesium, name="waterMagnesium", curie=NEON.curie('waterMagnesium'),
                      model_uri=NEON.waterMagnesium, domain=None, range=Optional[float])

slots.waterSodium = Slot(uri=NEON.waterSodium, name="waterSodium", curie=NEON.curie('waterSodium'),
                      model_uri=NEON.waterSodium, domain=None, range=Optional[float])

slots.waterPotassium = Slot(uri=NEON.waterPotassium, name="waterPotassium", curie=NEON.curie('waterPotassium'),
                      model_uri=NEON.waterPotassium, domain=None, range=Optional[float])

slots.waterSulfate = Slot(uri=NEON.waterSulfate, name="waterSulfate", curie=NEON.curie('waterSulfate'),
                      model_uri=NEON.waterSulfate, domain=None, range=Optional[float])

slots.waterChlorine = Slot(uri=NEON.waterChlorine, name="waterChlorine", curie=NEON.curie('waterChlorine'),
                      model_uri=NEON.waterChlorine, domain=None, range=Optional[float])

slots.waterManganese = Slot(uri=NEON.waterManganese, name="waterManganese", curie=NEON.curie('waterManganese'),
                      model_uri=NEON.waterManganese, domain=None, range=Optional[float])

slots.waterIron = Slot(uri=NEON.waterIron, name="waterIron", curie=NEON.curie('waterIron'),
                      model_uri=NEON.waterIron, domain=None, range=Optional[float])

slots.waterBromine = Slot(uri=NEON.waterBromine, name="waterBromine", curie=NEON.curie('waterBromine'),
                      model_uri=NEON.waterBromine, domain=None, range=Optional[float])

slots.waterFluorine = Slot(uri=NEON.waterFluorine, name="waterFluorine", curie=NEON.curie('waterFluorine'),
                      model_uri=NEON.waterFluorine, domain=None, range=Optional[float])

slots.waterSilica = Slot(uri=NEON.waterSilica, name="waterSilica", curie=NEON.curie('waterSilica'),
                      model_uri=NEON.waterSilica, domain=None, range=Optional[float])

slots.totalSuspendedSolids = Slot(uri=NEON.totalSuspendedSolids, name="totalSuspendedSolids", curie=NEON.curie('totalSuspendedSolids'),
                      model_uri=NEON.totalSuspendedSolids, domain=None, range=Optional[float])

slots.totalSuspendedSolidsDryMass = Slot(uri=NEON.totalSuspendedSolidsDryMass, name="totalSuspendedSolidsDryMass", curie=NEON.curie('totalSuspendedSolidsDryMass'),
                      model_uri=NEON.totalSuspendedSolidsDryMass, domain=None, range=Optional[float])

slots.totalDissolvedSolids = Slot(uri=NEON.totalDissolvedSolids, name="totalDissolvedSolids", curie=NEON.curie('totalDissolvedSolids'),
                      model_uri=NEON.totalDissolvedSolids, domain=None, range=Optional[float])

slots.waterNitrateAndNitriteN = Slot(uri=NEON.waterNitrateAndNitriteN, name="waterNitrateAndNitriteN", curie=NEON.curie('waterNitrateAndNitriteN'),
                      model_uri=NEON.waterNitrateAndNitriteN, domain=None, range=Optional[float])

slots.waterNitriteN = Slot(uri=NEON.waterNitriteN, name="waterNitriteN", curie=NEON.curie('waterNitriteN'),
                      model_uri=NEON.waterNitriteN, domain=None, range=Optional[float])

slots.waterAmmoniumN = Slot(uri=NEON.waterAmmoniumN, name="waterAmmoniumN", curie=NEON.curie('waterAmmoniumN'),
                      model_uri=NEON.waterAmmoniumN, domain=None, range=Optional[float])

slots.waterOrthophosphateP = Slot(uri=NEON.waterOrthophosphateP, name="waterOrthophosphateP", curie=NEON.curie('waterOrthophosphateP'),
                      model_uri=NEON.waterOrthophosphateP, domain=None, range=Optional[float])

slots.waterTotalNitrogen = Slot(uri=NEON.waterTotalNitrogen, name="waterTotalNitrogen", curie=NEON.curie('waterTotalNitrogen'),
                      model_uri=NEON.waterTotalNitrogen, domain=None, range=Optional[float])

slots.totalDissolvedNitrogen = Slot(uri=NEON.totalDissolvedNitrogen, name="totalDissolvedNitrogen", curie=NEON.curie('totalDissolvedNitrogen'),
                      model_uri=NEON.totalDissolvedNitrogen, domain=None, range=Optional[float])

slots.dissolvedInorganicCarbon = Slot(uri=NEON.dissolvedInorganicCarbon, name="dissolvedInorganicCarbon", curie=NEON.curie('dissolvedInorganicCarbon'),
                      model_uri=NEON.dissolvedInorganicCarbon, domain=None, range=Optional[float])

slots.dissolvedOrganicCarbon = Slot(uri=NEON.dissolvedOrganicCarbon, name="dissolvedOrganicCarbon", curie=NEON.curie('dissolvedOrganicCarbon'),
                      model_uri=NEON.dissolvedOrganicCarbon, domain=None, range=Optional[float])

slots.waterTotalOrganicCarbon = Slot(uri=NEON.waterTotalOrganicCarbon, name="waterTotalOrganicCarbon", curie=NEON.curie('waterTotalOrganicCarbon'),
                      model_uri=NEON.waterTotalOrganicCarbon, domain=None, range=Optional[float])

slots.waterTotalPhosphorus = Slot(uri=NEON.waterTotalPhosphorus, name="waterTotalPhosphorus", curie=NEON.curie('waterTotalPhosphorus'),
                      model_uri=NEON.waterTotalPhosphorus, domain=None, range=Optional[float])

slots.totalDissolvedPhosphorus = Slot(uri=NEON.totalDissolvedPhosphorus, name="totalDissolvedPhosphorus", curie=NEON.curie('totalDissolvedPhosphorus'),
                      model_uri=NEON.totalDissolvedPhosphorus, domain=None, range=Optional[float])

slots.totalParticulateCarbonMass = Slot(uri=NEON.totalParticulateCarbonMass, name="totalParticulateCarbonMass", curie=NEON.curie('totalParticulateCarbonMass'),
                      model_uri=NEON.totalParticulateCarbonMass, domain=None, range=Optional[float])

slots.totalParticulateNitrogenMass = Slot(uri=NEON.totalParticulateNitrogenMass, name="totalParticulateNitrogenMass", curie=NEON.curie('totalParticulateNitrogenMass'),
                      model_uri=NEON.totalParticulateNitrogenMass, domain=None, range=Optional[float])

slots.uvAbsorbance250 = Slot(uri=NEON.uvAbsorbance250, name="uvAbsorbance250", curie=NEON.curie('uvAbsorbance250'),
                      model_uri=NEON.uvAbsorbance250, domain=None, range=Optional[float])

slots.uvAbsorbance284 = Slot(uri=NEON.uvAbsorbance284, name="uvAbsorbance284", curie=NEON.curie('uvAbsorbance284'),
                      model_uri=NEON.uvAbsorbance284, domain=None, range=Optional[float])

slots.nitrateNitriteNRunID = Slot(uri=NEON.nitrateNitriteNRunID, name="nitrateNitriteNRunID", curie=NEON.curie('nitrateNitriteNRunID'),
                      model_uri=NEON.nitrateNitriteNRunID, domain=None, range=Optional[str])

slots.nitriteRunID = Slot(uri=NEON.nitriteRunID, name="nitriteRunID", curie=NEON.curie('nitriteRunID'),
                      model_uri=NEON.nitriteRunID, domain=None, range=Optional[str])

slots.nh4RunID = Slot(uri=NEON.nh4RunID, name="nh4RunID", curie=NEON.curie('nh4RunID'),
                      model_uri=NEON.nh4RunID, domain=None, range=Optional[str])

slots.OrthoPRunID = Slot(uri=NEON.OrthoPRunID, name="OrthoPRunID", curie=NEON.curie('OrthoPRunID'),
                      model_uri=NEON.OrthoPRunID, domain=None, range=Optional[str])

slots.tnRunID = Slot(uri=NEON.tnRunID, name="tnRunID", curie=NEON.curie('tnRunID'),
                      model_uri=NEON.tnRunID, domain=None, range=Optional[str])

slots.tdnRunID = Slot(uri=NEON.tdnRunID, name="tdnRunID", curie=NEON.curie('tdnRunID'),
                      model_uri=NEON.tdnRunID, domain=None, range=Optional[str])

slots.dicRunID = Slot(uri=NEON.dicRunID, name="dicRunID", curie=NEON.curie('dicRunID'),
                      model_uri=NEON.dicRunID, domain=None, range=Optional[str])

slots.docRunID = Slot(uri=NEON.docRunID, name="docRunID", curie=NEON.curie('docRunID'),
                      model_uri=NEON.docRunID, domain=None, range=Optional[str])

slots.tocRunID = Slot(uri=NEON.tocRunID, name="tocRunID", curie=NEON.curie('tocRunID'),
                      model_uri=NEON.tocRunID, domain=None, range=Optional[str])

slots.tpcnRunDate = Slot(uri=NEON.tpcnRunDate, name="tpcnRunDate", curie=NEON.curie('tpcnRunDate'),
                      model_uri=NEON.tpcnRunDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.tpcnVolume = Slot(uri=NEON.tpcnVolume, name="tpcnVolume", curie=NEON.curie('tpcnVolume'),
                      model_uri=NEON.tpcnVolume, domain=None, range=Optional[float])

slots.uvBatchID = Slot(uri=NEON.uvBatchID, name="uvBatchID", curie=NEON.curie('uvBatchID'),
                      model_uri=NEON.uvBatchID, domain=None, range=Optional[str])

slots.coolerTemp = Slot(uri=NEON.coolerTemp, name="coolerTemp", curie=NEON.curie('coolerTemp'),
                      model_uri=NEON.coolerTemp, domain=None, range=Optional[float])

slots.externalLabMetadata = Slot(uri=NEON.externalLabMetadata, name="externalLabMetadata", curie=NEON.curie('externalLabMetadata'),
                      model_uri=NEON.externalLabMetadata, domain=None, range=Optional[str])

slots.internalLabID = Slot(uri=NEON.internalLabID, name="internalLabID", curie=NEON.curie('internalLabID'),
                      model_uri=NEON.internalLabID, domain=None, range=Optional[str])

slots.shipmentReceivedDate = Slot(uri=NEON.shipmentReceivedDate, name="shipmentReceivedDate", curie=NEON.curie('shipmentReceivedDate'),
                      model_uri=NEON.shipmentReceivedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.receivedBy = Slot(uri=NEON.receivedBy, name="receivedBy", curie=NEON.curie('receivedBy'),
                      model_uri=NEON.receivedBy, domain=None, range=Optional[str])

slots.shipDate = Slot(uri=NEON.shipDate, name="shipDate", curie=NEON.curie('shipDate'),
                      model_uri=NEON.shipDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.shipmentID = Slot(uri=NEON.shipmentID, name="shipmentID", curie=NEON.curie('shipmentID'),
                      model_uri=NEON.shipmentID, domain=None, range=Optional[str])

slots.shipmentCondition = Slot(uri=NEON.shipmentCondition, name="shipmentCondition", curie=NEON.curie('shipmentCondition'),
                      model_uri=NEON.shipmentCondition, domain=None, range=Optional[str])

slots.waterCarbonNitrogenRatio = Slot(uri=NEON.waterCarbonNitrogenRatio, name="waterCarbonNitrogenRatio", curie=NEON.curie('waterCarbonNitrogenRatio'),
                      model_uri=NEON.waterCarbonNitrogenRatio, domain=None, range=Optional[float])

slots.shipmentWarmQF = Slot(uri=NEON.shipmentWarmQF, name="shipmentWarmQF", curie=NEON.curie('shipmentWarmQF'),
                      model_uri=NEON.shipmentWarmQF, domain=None, range=Optional[float])

slots.shipmentLateQF = Slot(uri=NEON.shipmentLateQF, name="shipmentLateQF", curie=NEON.curie('shipmentLateQF'),
                      model_uri=NEON.shipmentLateQF, domain=None, range=Optional[float])

slots.belowDetectionQF = Slot(uri=NEON.belowDetectionQF, name="belowDetectionQF", curie=NEON.curie('belowDetectionQF'),
                      model_uri=NEON.belowDetectionQF, domain=None, range=Optional[float])

slots.totalParticulateCarbon = Slot(uri=NEON.totalParticulateCarbon, name="totalParticulateCarbon", curie=NEON.curie('totalParticulateCarbon'),
                      model_uri=NEON.totalParticulateCarbon, domain=None, range=Optional[float])

slots.totalParticulateNitrogen = Slot(uri=NEON.totalParticulateNitrogen, name="totalParticulateNitrogen", curie=NEON.curie('totalParticulateNitrogen'),
                      model_uri=NEON.totalParticulateNitrogen, domain=None, range=Optional[float])

slots.externalRemarks = Slot(uri=NEON.externalRemarks, name="externalRemarks", curie=NEON.curie('externalRemarks'),
                      model_uri=NEON.externalRemarks, domain=None, range=Optional[str])

slots.externalDuplicateRecordQF = Slot(uri=NEON.externalDuplicateRecordQF, name="externalDuplicateRecordQF", curie=NEON.curie('externalDuplicateRecordQF'),
                      model_uri=NEON.externalDuplicateRecordQF, domain=None, range=Optional[int])

slots.analytesBelowDetection = Slot(uri=NEON.analytesBelowDetection, name="analytesBelowDetection", curie=NEON.curie('analytesBelowDetection'),
                      model_uri=NEON.analytesBelowDetection, domain=None, range=Optional[str])

slots.idqQF = Slot(uri=NEON.idqQF, name="idqQF", curie=NEON.curie('idqQF'),
                      model_uri=NEON.idqQF, domain=None, range=Optional[int])

slots.rawIRImage = Slot(uri=NEON.rawIRImage, name="rawIRImage", curie=NEON.curie('rawIRImage'),
                      model_uri=NEON.rawIRImage, domain=None, range=Optional[str])

slots.rawRGBImage = Slot(uri=NEON.rawRGBImage, name="rawRGBImage", curie=NEON.curie('rawRGBImage'),
                      model_uri=NEON.rawRGBImage, domain=None, range=Optional[str])

slots.SHFVoltage = Slot(uri=NEON.SHFVoltage, name="SHFVoltage", curie=NEON.curie('SHFVoltage'),
                      model_uri=NEON.SHFVoltage, domain=None, range=Optional[float])

slots.SHFCalHeaterFlag = Slot(uri=NEON.SHFCalHeaterFlag, name="SHFCalHeaterFlag", curie=NEON.curie('SHFCalHeaterFlag'),
                      model_uri=NEON.SHFCalHeaterFlag, domain=None, range=Optional[float])

slots.curVoltage = Slot(uri=NEON.curVoltage, name="curVoltage", curie=NEON.curie('curVoltage'),
                      model_uri=NEON.curVoltage, domain=None, range=Optional[float])

slots.uploadDate = Slot(uri=NEON.uploadDate, name="uploadDate", curie=NEON.curie('uploadDate'),
                      model_uri=NEON.uploadDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.analyte = Slot(uri=NEON.analyte, name="analyte", curie=NEON.curie('analyte'),
                      model_uri=NEON.analyte, domain=None, range=Optional[str])

slots.instrument = Slot(uri=NEON.instrument, name="instrument", curie=NEON.curie('instrument'),
                      model_uri=NEON.instrument, domain=None, range=Optional[str])

slots.method = Slot(uri=NEON.method, name="method", curie=NEON.curie('method'),
                      model_uri=NEON.method, domain=None, range=Optional[str])

slots.methodModification = Slot(uri=NEON.methodModification, name="methodModification", curie=NEON.curie('methodModification'),
                      model_uri=NEON.methodModification, domain=None, range=Optional[str])

slots.methodDetectionLimit = Slot(uri=NEON.methodDetectionLimit, name="methodDetectionLimit", curie=NEON.curie('methodDetectionLimit'),
                      model_uri=NEON.methodDetectionLimit, domain=None, range=Optional[float])

slots.analyteUnits = Slot(uri=NEON.analyteUnits, name="analyteUnits", curie=NEON.curie('analyteUnits'),
                      model_uri=NEON.analyteUnits, domain=None, range=Optional[str])

slots.precision = Slot(uri=NEON.precision, name="precision", curie=NEON.curie('precision'),
                      model_uri=NEON.precision, domain=None, range=Optional[float])

slots.measurementUncertainty = Slot(uri=NEON.measurementUncertainty, name="measurementUncertainty", curie=NEON.curie('measurementUncertainty'),
                      model_uri=NEON.measurementUncertainty, domain=None, range=Optional[float])

slots.internalLabName = Slot(uri=NEON.internalLabName, name="internalLabName", curie=NEON.curie('internalLabName'),
                      model_uri=NEON.internalLabName, domain=None, range=Optional[str])

slots.labSpecificStartDate = Slot(uri=NEON.labSpecificStartDate, name="labSpecificStartDate", curie=NEON.curie('labSpecificStartDate'),
                      model_uri=NEON.labSpecificStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.labSpecificEndDate = Slot(uri=NEON.labSpecificEndDate, name="labSpecificEndDate", curie=NEON.curie('labSpecificEndDate'),
                      model_uri=NEON.labSpecificEndDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.rawSWCSalinity = Slot(uri=NEON.rawSWCSalinity, name="rawSWCSalinity", curie=NEON.curie('rawSWCSalinity'),
                      model_uri=NEON.rawSWCSalinity, domain=None, range=Optional[float])

slots.baroPressParticulateMass = Slot(uri=NEON.baroPressParticulateMass, name="baroPressParticulateMass", curie=NEON.curie('baroPressParticulateMass'),
                      model_uri=NEON.baroPressParticulateMass, domain=None, range=Optional[float])

slots.flowRate = Slot(uri=NEON.flowRate, name="flowRate", curie=NEON.curie('flowRate'),
                      model_uri=NEON.flowRate, domain=None, range=Optional[float])

slots.corrAirVolume = Slot(uri=NEON.corrAirVolume, name="corrAirVolume", curie=NEON.curie('corrAirVolume'),
                      model_uri=NEON.corrAirVolume, domain=None, range=Optional[float])

slots.uncorrAirVolume = Slot(uri=NEON.uncorrAirVolume, name="uncorrAirVolume", curie=NEON.curie('uncorrAirVolume'),
                      model_uri=NEON.uncorrAirVolume, domain=None, range=Optional[float])

slots.chamberTemperature = Slot(uri=NEON.chamberTemperature, name="chamberTemperature", curie=NEON.curie('chamberTemperature'),
                      model_uri=NEON.chamberTemperature, domain=None, range=Optional[float])

slots.powerStatus = Slot(uri=NEON.powerStatus, name="powerStatus", curie=NEON.curie('powerStatus'),
                      model_uri=NEON.powerStatus, domain=None, range=Optional[float])

slots.lidStatusWetDep = Slot(uri=NEON.lidStatusWetDep, name="lidStatusWetDep", curie=NEON.curie('lidStatusWetDep'),
                      model_uri=NEON.lidStatusWetDep, domain=None, range=Optional[float])

slots.rawWaterCalcium = Slot(uri=NEON.rawWaterCalcium, name="rawWaterCalcium", curie=NEON.curie('rawWaterCalcium'),
                      model_uri=NEON.rawWaterCalcium, domain=None, range=Optional[float])

slots.rawWaterMagnesium = Slot(uri=NEON.rawWaterMagnesium, name="rawWaterMagnesium", curie=NEON.curie('rawWaterMagnesium'),
                      model_uri=NEON.rawWaterMagnesium, domain=None, range=Optional[float])

slots.rawWaterPotassium = Slot(uri=NEON.rawWaterPotassium, name="rawWaterPotassium", curie=NEON.curie('rawWaterPotassium'),
                      model_uri=NEON.rawWaterPotassium, domain=None, range=Optional[float])

slots.rawWaterSodium = Slot(uri=NEON.rawWaterSodium, name="rawWaterSodium", curie=NEON.curie('rawWaterSodium'),
                      model_uri=NEON.rawWaterSodium, domain=None, range=Optional[float])

slots.rawWaterAmmonium = Slot(uri=NEON.rawWaterAmmonium, name="rawWaterAmmonium", curie=NEON.curie('rawWaterAmmonium'),
                      model_uri=NEON.rawWaterAmmonium, domain=None, range=Optional[float])

slots.rawWaterNitrate = Slot(uri=NEON.rawWaterNitrate, name="rawWaterNitrate", curie=NEON.curie('rawWaterNitrate'),
                      model_uri=NEON.rawWaterNitrate, domain=None, range=Optional[float])

slots.rawWaterSulfate = Slot(uri=NEON.rawWaterSulfate, name="rawWaterSulfate", curie=NEON.curie('rawWaterSulfate'),
                      model_uri=NEON.rawWaterSulfate, domain=None, range=Optional[float])

slots.rawWaterPhosphate = Slot(uri=NEON.rawWaterPhosphate, name="rawWaterPhosphate", curie=NEON.curie('rawWaterPhosphate'),
                      model_uri=NEON.rawWaterPhosphate, domain=None, range=Optional[float])

slots.rawPH = Slot(uri=NEON.rawPH, name="rawPH", curie=NEON.curie('rawPH'),
                      model_uri=NEON.rawPH, domain=None, range=Optional[float])

slots.rawConductance = Slot(uri=NEON.rawConductance, name="rawConductance", curie=NEON.curie('rawConductance'),
                      model_uri=NEON.rawConductance, domain=None, range=Optional[float])

slots.wetDepChemicalWeightField = Slot(uri=NEON.wetDepChemicalWeightField, name="wetDepChemicalWeightField", curie=NEON.curie('wetDepChemicalWeightField'),
                      model_uri=NEON.wetDepChemicalWeightField, domain=None, range=Optional[float])

slots.wetDepChemicalWeightLab = Slot(uri=NEON.wetDepChemicalWeightLab, name="wetDepChemicalWeightLab", curie=NEON.curie('wetDepChemicalWeightLab'),
                      model_uri=NEON.wetDepChemicalWeightLab, domain=None, range=Optional[float])

slots.rawOxygen18 = Slot(uri=NEON.rawOxygen18, name="rawOxygen18", curie=NEON.curie('rawOxygen18'),
                      model_uri=NEON.rawOxygen18, domain=None, range=Optional[float])

slots.rawDeuterium = Slot(uri=NEON.rawDeuterium, name="rawDeuterium", curie=NEON.curie('rawDeuterium'),
                      model_uri=NEON.rawDeuterium, domain=None, range=Optional[float])

slots.wetDepIsotopeWeightField = Slot(uri=NEON.wetDepIsotopeWeightField, name="wetDepIsotopeWeightField", curie=NEON.curie('wetDepIsotopeWeightField'),
                      model_uri=NEON.wetDepIsotopeWeightField, domain=None, range=Optional[float])

slots.wetDepIsotopeWeightLab = Slot(uri=NEON.wetDepIsotopeWeightLab, name="wetDepIsotopeWeightLab", curie=NEON.curie('wetDepIsotopeWeightLab'),
                      model_uri=NEON.wetDepIsotopeWeightLab, domain=None, range=Optional[float])

slots.corPresTempQF = Slot(uri=NEON.corPresTempQF, name="corPresTempQF", curie=NEON.curie('corPresTempQF'),
                      model_uri=NEON.corPresTempQF, domain=None, range=Optional[str])

slots.corPresDewPtQF = Slot(uri=NEON.corPresDewPtQF, name="corPresDewPtQF", curie=NEON.curie('corPresDewPtQF'),
                      model_uri=NEON.corPresDewPtQF, domain=None, range=Optional[str])

slots.surfacePresTempQF = Slot(uri=NEON.surfacePresTempQF, name="surfacePresTempQF", curie=NEON.curie('surfacePresTempQF'),
                      model_uri=NEON.surfacePresTempQF, domain=None, range=Optional[float])

slots.surfacePresDewPtQF = Slot(uri=NEON.surfacePresDewPtQF, name="surfacePresDewPtQF", curie=NEON.curie('surfacePresDewPtQF'),
                      model_uri=NEON.surfacePresDewPtQF, domain=None, range=Optional[float])

slots.larvalTicksAttached = Slot(uri=NEON.larvalTicksAttached, name="larvalTicksAttached", curie=NEON.curie('larvalTicksAttached'),
                      model_uri=NEON.larvalTicksAttached, domain=None, range=Optional[str])

slots.nymphalTicksAttached = Slot(uri=NEON.nymphalTicksAttached, name="nymphalTicksAttached", curie=NEON.curie('nymphalTicksAttached'),
                      model_uri=NEON.nymphalTicksAttached, domain=None, range=Optional[str])

slots.adultTicksAttached = Slot(uri=NEON.adultTicksAttached, name="adultTicksAttached", curie=NEON.curie('adultTicksAttached'),
                      model_uri=NEON.adultTicksAttached, domain=None, range=Optional[str])

slots.individualNid = Slot(uri=NEON.individualNid, name="individualNid", curie=NEON.curie('individualNid'),
                      model_uri=NEON.individualNid, domain=None, range=Optional[str])

slots.setDateTime = Slot(uri=NEON.setDateTime, name="setDateTime", curie=NEON.curie('setDateTime'),
                      model_uri=NEON.setDateTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.collectDateTime = Slot(uri=NEON.collectDateTime, name="collectDateTime", curie=NEON.curie('collectDateTime'),
                      model_uri=NEON.collectDateTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.sampleTiming = Slot(uri=NEON.sampleTiming, name="sampleTiming", curie=NEON.curie('sampleTiming'),
                      model_uri=NEON.sampleTiming, domain=None, range=Optional[str])

slots.numVialsSampleID = Slot(uri=NEON.numVialsSampleID, name="numVialsSampleID", curie=NEON.curie('numVialsSampleID'),
                      model_uri=NEON.numVialsSampleID, domain=None, range=Optional[str])

slots.fanStatus = Slot(uri=NEON.fanStatus, name="fanStatus", curie=NEON.curie('fanStatus'),
                      model_uri=NEON.fanStatus, domain=None, range=Optional[str])

slots.catchCupStatus = Slot(uri=NEON.catchCupStatus, name="catchCupStatus", curie=NEON.curie('catchCupStatus'),
                      model_uri=NEON.catchCupStatus, domain=None, range=Optional[str])

slots.dryIceStatus = Slot(uri=NEON.dryIceStatus, name="dryIceStatus", curie=NEON.curie('dryIceStatus'),
                      model_uri=NEON.dryIceStatus, domain=None, range=Optional[str])

slots.sampleCompromised = Slot(uri=NEON.sampleCompromised, name="sampleCompromised", curie=NEON.curie('sampleCompromised'),
                      model_uri=NEON.sampleCompromised, domain=None, range=Optional[str])

slots.receivedDate = Slot(uri=NEON.receivedDate, name="receivedDate", curie=NEON.curie('receivedDate'),
                      model_uri=NEON.receivedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.sortDate = Slot(uri=NEON.sortDate, name="sortDate", curie=NEON.curie('sortDate'),
                      model_uri=NEON.sortDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.totalWeight = Slot(uri=NEON.totalWeight, name="totalWeight", curie=NEON.curie('totalWeight'),
                      model_uri=NEON.totalWeight, domain=None, range=Optional[float])

slots.subsampleWeight = Slot(uri=NEON.subsampleWeight, name="subsampleWeight", curie=NEON.curie('subsampleWeight'),
                      model_uri=NEON.subsampleWeight, domain=None, range=Optional[float])

slots.bycatchWeight = Slot(uri=NEON.bycatchWeight, name="bycatchWeight", curie=NEON.curie('bycatchWeight'),
                      model_uri=NEON.bycatchWeight, domain=None, range=Optional[float])

slots.sortedBy = Slot(uri=NEON.sortedBy, name="sortedBy", curie=NEON.curie('sortedBy'),
                      model_uri=NEON.sortedBy, domain=None, range=Optional[str])

slots.testingID = Slot(uri=NEON.testingID, name="testingID", curie=NEON.curie('testingID'),
                      model_uri=NEON.testingID, domain=None, range=Optional[str])

slots.individualIDList = Slot(uri=NEON.individualIDList, name="individualIDList", curie=NEON.curie('individualIDList'),
                      model_uri=NEON.individualIDList, domain=None, range=Optional[str])

slots.identificationRemarks = Slot(uri=NEON.identificationRemarks, name="identificationRemarks", curie=NEON.curie('identificationRemarks'),
                      model_uri=NEON.identificationRemarks, domain=None, range=Optional[str])

slots.testingVialID = Slot(uri=NEON.testingVialID, name="testingVialID", curie=NEON.curie('testingVialID'),
                      model_uri=NEON.testingVialID, domain=None, range=Optional[str])

slots.poolSize = Slot(uri=NEON.poolSize, name="poolSize", curie=NEON.curie('poolSize'),
                      model_uri=NEON.poolSize, domain=None, range=Optional[str])

slots.archiveVialIDList = Slot(uri=NEON.archiveVialIDList, name="archiveVialIDList", curie=NEON.curie('archiveVialIDList'),
                      model_uri=NEON.archiveVialIDList, domain=None, range=Optional[str])

slots.archivedCount = Slot(uri=NEON.archivedCount, name="archivedCount", curie=NEON.curie('archivedCount'),
                      model_uri=NEON.archivedCount, domain=None, range=Optional[str])

slots.archiveMedium = Slot(uri=NEON.archiveMedium, name="archiveMedium", curie=NEON.curie('archiveMedium'),
                      model_uri=NEON.archiveMedium, domain=None, range=Optional[str])

slots.deprecatedVialID = Slot(uri=NEON.deprecatedVialID, name="deprecatedVialID", curie=NEON.curie('deprecatedVialID'),
                      model_uri=NEON.deprecatedVialID, domain=None, range=Optional[str])

slots.testedDate = Slot(uri=NEON.testedDate, name="testedDate", curie=NEON.curie('testedDate'),
                      model_uri=NEON.testedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.senderID = Slot(uri=NEON.senderID, name="senderID", curie=NEON.curie('senderID'),
                      model_uri=NEON.senderID, domain=None, range=Optional[str])

slots.testProtocolVersion = Slot(uri=NEON.testProtocolVersion, name="testProtocolVersion", curie=NEON.curie('testProtocolVersion'),
                      model_uri=NEON.testProtocolVersion, domain=None, range=Optional[str])

slots.testMethod = Slot(uri=NEON.testMethod, name="testMethod", curie=NEON.curie('testMethod'),
                      model_uri=NEON.testMethod, domain=None, range=Optional[str])

slots.testResult = Slot(uri=NEON.testResult, name="testResult", curie=NEON.curie('testResult'),
                      model_uri=NEON.testResult, domain=None, range=Optional[str])

slots.testPathogenName = Slot(uri=NEON.testPathogenName, name="testPathogenName", curie=NEON.curie('testPathogenName'),
                      model_uri=NEON.testPathogenName, domain=None, range=Optional[str])

slots.testNumber = Slot(uri=NEON.testNumber, name="testNumber", curie=NEON.curie('testNumber'),
                      model_uri=NEON.testNumber, domain=None, range=Optional[str])

slots.finalResult = Slot(uri=NEON.finalResult, name="finalResult", curie=NEON.curie('finalResult'),
                      model_uri=NEON.finalResult, domain=None, range=Optional[str])

slots.locus = Slot(uri=NEON.locus, name="locus", curie=NEON.curie('locus'),
                      model_uri=NEON.locus, domain=None, range=Optional[str])

slots.percentIdentity = Slot(uri=NEON.percentIdentity, name="percentIdentity", curie=NEON.curie('percentIdentity'),
                      model_uri=NEON.percentIdentity, domain=None, range=Optional[str])

slots.sequenceDatabase = Slot(uri=NEON.sequenceDatabase, name="sequenceDatabase", curie=NEON.curie('sequenceDatabase'),
                      model_uri=NEON.sequenceDatabase, domain=None, range=Optional[str])

slots.sequenceDatabaseID = Slot(uri=NEON.sequenceDatabaseID, name="sequenceDatabaseID", curie=NEON.curie('sequenceDatabaseID'),
                      model_uri=NEON.sequenceDatabaseID, domain=None, range=Optional[str])

slots.extractDepleted = Slot(uri=NEON.extractDepleted, name="extractDepleted", curie=NEON.curie('extractDepleted'),
                      model_uri=NEON.extractDepleted, domain=None, range=Optional[str])

slots.testedBy = Slot(uri=NEON.testedBy, name="testedBy", curie=NEON.curie('testedBy'),
                      model_uri=NEON.testedBy, domain=None, range=Optional[str])

slots.pdaDecimalLatitude = Slot(uri=NEON.pdaDecimalLatitude, name="pdaDecimalLatitude", curie=NEON.curie('pdaDecimalLatitude'),
                      model_uri=NEON.pdaDecimalLatitude, domain=None, range=Optional[float])

slots.pdaDecimalLongitude = Slot(uri=NEON.pdaDecimalLongitude, name="pdaDecimalLongitude", curie=NEON.curie('pdaDecimalLongitude'),
                      model_uri=NEON.pdaDecimalLongitude, domain=None, range=Optional[float])

slots.pdaAccuracy = Slot(uri=NEON.pdaAccuracy, name="pdaAccuracy", curie=NEON.curie('pdaAccuracy'),
                      model_uri=NEON.pdaAccuracy, domain=None, range=Optional[float])

slots.pdaElevation = Slot(uri=NEON.pdaElevation, name="pdaElevation", curie=NEON.curie('pdaElevation'),
                      model_uri=NEON.pdaElevation, domain=None, range=Optional[float])

slots.nightOrDay = Slot(uri=NEON.nightOrDay, name="nightOrDay", curie=NEON.curie('nightOrDay'),
                      model_uri=NEON.nightOrDay, domain=None, range=Optional[str])

slots.trapHours = Slot(uri=NEON.trapHours, name="trapHours", curie=NEON.curie('trapHours'),
                      model_uri=NEON.trapHours, domain=None, range=Optional[float])

slots.trapRecordedBy = Slot(uri=NEON.trapRecordedBy, name="trapRecordedBy", curie=NEON.curie('trapRecordedBy'),
                      model_uri=NEON.trapRecordedBy, domain=None, range=Optional[str])

slots.trappingRemarks = Slot(uri=NEON.trappingRemarks, name="trappingRemarks", curie=NEON.curie('trappingRemarks'),
                      model_uri=NEON.trappingRemarks, domain=None, range=Optional[str])

slots.trapCompromisedQF = Slot(uri=NEON.trapCompromisedQF, name="trapCompromisedQF", curie=NEON.curie('trapCompromisedQF'),
                      model_uri=NEON.trapCompromisedQF, domain=None, range=Optional[int])

slots.sampleCompromisedAtTrapping = Slot(uri=NEON.sampleCompromisedAtTrapping, name="sampleCompromisedAtTrapping", curie=NEON.curie('sampleCompromisedAtTrapping'),
                      model_uri=NEON.sampleCompromisedAtTrapping, domain=None, range=Optional[str])

slots.sampleLostQF = Slot(uri=NEON.sampleLostQF, name="sampleLostQF", curie=NEON.curie('sampleLostQF'),
                      model_uri=NEON.sampleLostQF, domain=None, range=Optional[int])

slots.duplicatesInTrappingQF = Slot(uri=NEON.duplicatesInTrappingQF, name="duplicatesInTrappingQF", curie=NEON.curie('duplicatesInTrappingQF'),
                      model_uri=NEON.duplicatesInTrappingQF, domain=None, range=Optional[int])

slots.estimatedAbundance = Slot(uri=NEON.estimatedAbundance, name="estimatedAbundance", curie=NEON.curie('estimatedAbundance'),
                      model_uri=NEON.estimatedAbundance, domain=None, range=Optional[str])

slots.percentCounted = Slot(uri=NEON.percentCounted, name="percentCounted", curie=NEON.curie('percentCounted'),
                      model_uri=NEON.percentCounted, domain=None, range=Optional[str])

slots.TFPrecipBucketTips = Slot(uri=NEON.TFPrecipBucketTips, name="TFPrecipBucketTips", curie=NEON.curie('TFPrecipBucketTips'),
                      model_uri=NEON.TFPrecipBucketTips, domain=None, range=Optional[int])

slots.strainGauge1Stability = Slot(uri=NEON.strainGauge1Stability, name="strainGauge1Stability", curie=NEON.curie('strainGauge1Stability'),
                      model_uri=NEON.strainGauge1Stability, domain=None, range=Optional[int])

slots.strainGauge1Temp = Slot(uri=NEON.strainGauge1Temp, name="strainGauge1Temp", curie=NEON.curie('strainGauge1Temp'),
                      model_uri=NEON.strainGauge1Temp, domain=None, range=Optional[float])

slots.strainGauge1Amplitude = Slot(uri=NEON.strainGauge1Amplitude, name="strainGauge1Amplitude", curie=NEON.curie('strainGauge1Amplitude'),
                      model_uri=NEON.strainGauge1Amplitude, domain=None, range=Optional[float])

slots.strainGauge1FreqRaw = Slot(uri=NEON.strainGauge1FreqRaw, name="strainGauge1FreqRaw", curie=NEON.curie('strainGauge1FreqRaw'),
                      model_uri=NEON.strainGauge1FreqRaw, domain=None, range=Optional[float])

slots.strainGauge1Weight = Slot(uri=NEON.strainGauge1Weight, name="strainGauge1Weight", curie=NEON.curie('strainGauge1Weight'),
                      model_uri=NEON.strainGauge1Weight, domain=None, range=Optional[float])

slots.strainGaugeFailureFlag = Slot(uri=NEON.strainGaugeFailureFlag, name="strainGaugeFailureFlag", curie=NEON.curie('strainGaugeFailureFlag'),
                      model_uri=NEON.strainGaugeFailureFlag, domain=None, range=Optional[int])

slots.totalGaugeWeight = Slot(uri=NEON.totalGaugeWeight, name="totalGaugeWeight", curie=NEON.curie('totalGaugeWeight'),
                      model_uri=NEON.totalGaugeWeight, domain=None, range=Optional[float])

slots.totalPrecipDepth = Slot(uri=NEON.totalPrecipDepth, name="totalPrecipDepth", curie=NEON.curie('totalPrecipDepth'),
                      model_uri=NEON.totalPrecipDepth, domain=None, range=Optional[float])

slots.inletTemp = Slot(uri=NEON.inletTemp, name="inletTemp", curie=NEON.curie('inletTemp'),
                      model_uri=NEON.inletTemp, domain=None, range=Optional[float])

slots.internalTemp = Slot(uri=NEON.internalTemp, name="internalTemp", curie=NEON.curie('internalTemp'),
                      model_uri=NEON.internalTemp, domain=None, range=Optional[float])

slots.precipAccumulationRate = Slot(uri=NEON.precipAccumulationRate, name="precipAccumulationRate", curie=NEON.curie('precipAccumulationRate'),
                      model_uri=NEON.precipAccumulationRate, domain=None, range=Optional[float])

slots.fieldCalibrationFlag = Slot(uri=NEON.fieldCalibrationFlag, name="fieldCalibrationFlag", curie=NEON.curie('fieldCalibrationFlag'),
                      model_uri=NEON.fieldCalibrationFlag, domain=None, range=Optional[int])

slots.sortingLaboratoryName = Slot(uri=NEON.sortingLaboratoryName, name="sortingLaboratoryName", curie=NEON.curie('sortingLaboratoryName'),
                      model_uri=NEON.sortingLaboratoryName, domain=None, range=Optional[str])

slots.idLaboratoryName = Slot(uri=NEON.idLaboratoryName, name="idLaboratoryName", curie=NEON.curie('idLaboratoryName'),
                      model_uri=NEON.idLaboratoryName, domain=None, range=Optional[str])

slots.sortingRemarks = Slot(uri=NEON.sortingRemarks, name="sortingRemarks", curie=NEON.curie('sortingRemarks'),
                      model_uri=NEON.sortingRemarks, domain=None, range=Optional[str])

slots.identificationLabRemarks = Slot(uri=NEON.identificationLabRemarks, name="identificationLabRemarks", curie=NEON.curie('identificationLabRemarks'),
                      model_uri=NEON.identificationLabRemarks, domain=None, range=Optional[str])

slots.sampleCompromisedAtSorting = Slot(uri=NEON.sampleCompromisedAtSorting, name="sampleCompromisedAtSorting", curie=NEON.curie('sampleCompromisedAtSorting'),
                      model_uri=NEON.sampleCompromisedAtSorting, domain=None, range=Optional[str])

slots.sampleCompromisedAtIDLab = Slot(uri=NEON.sampleCompromisedAtIDLab, name="sampleCompromisedAtIDLab", curie=NEON.curie('sampleCompromisedAtIDLab'),
                      model_uri=NEON.sampleCompromisedAtIDLab, domain=None, range=Optional[str])

slots.taxonRangeQF = Slot(uri=NEON.taxonRangeQF, name="taxonRangeQF", curie=NEON.curie('taxonRangeQF'),
                      model_uri=NEON.taxonRangeQF, domain=None, range=Optional[int])

slots.duplicatesInSortingQF = Slot(uri=NEON.duplicatesInSortingQF, name="duplicatesInSortingQF", curie=NEON.curie('duplicatesInSortingQF'),
                      model_uri=NEON.duplicatesInSortingQF, domain=None, range=Optional[int])

slots.duplicatesInIdentificationQF = Slot(uri=NEON.duplicatesInIdentificationQF, name="duplicatesInIdentificationQF", curie=NEON.curie('duplicatesInIdentificationQF'),
                      model_uri=NEON.duplicatesInIdentificationQF, domain=None, range=Optional[int])

slots.startCollectDate = Slot(uri=NEON.startCollectDate, name="startCollectDate", curie=NEON.curie('startCollectDate'),
                      model_uri=NEON.startCollectDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.endCollectDate = Slot(uri=NEON.endCollectDate, name="endCollectDate", curie=NEON.curie('endCollectDate'),
                      model_uri=NEON.endCollectDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.duplicatesInArchivePoolingQF = Slot(uri=NEON.duplicatesInArchivePoolingQF, name="duplicatesInArchivePoolingQF", curie=NEON.curie('duplicatesInArchivePoolingQF'),
                      model_uri=NEON.duplicatesInArchivePoolingQF, domain=None, range=Optional[int])

slots.nonStandardPoolQF = Slot(uri=NEON.nonStandardPoolQF, name="nonStandardPoolQF", curie=NEON.curie('nonStandardPoolQF'),
                      model_uri=NEON.nonStandardPoolQF, domain=None, range=Optional[int])

slots.duplicatesInPathogenPoolingQF = Slot(uri=NEON.duplicatesInPathogenPoolingQF, name="duplicatesInPathogenPoolingQF", curie=NEON.curie('duplicatesInPathogenPoolingQF'),
                      model_uri=NEON.duplicatesInPathogenPoolingQF, domain=None, range=Optional[int])

slots.duplicatesInPathogenResultsQF = Slot(uri=NEON.duplicatesInPathogenResultsQF, name="duplicatesInPathogenResultsQF", curie=NEON.curie('duplicatesInPathogenResultsQF'),
                      model_uri=NEON.duplicatesInPathogenResultsQF, domain=None, range=Optional[int])

slots.sampleCompromisedAtTesting = Slot(uri=NEON.sampleCompromisedAtTesting, name="sampleCompromisedAtTesting", curie=NEON.curie('sampleCompromisedAtTesting'),
                      model_uri=NEON.sampleCompromisedAtTesting, domain=None, range=Optional[str])

slots.rawVSWC = Slot(uri=NEON.rawVSWC, name="rawVSWC", curie=NEON.curie('rawVSWC'),
                      model_uri=NEON.rawVSWC, domain=None, range=Optional[float])

slots.rawVSIC = Slot(uri=NEON.rawVSIC, name="rawVSIC", curie=NEON.curie('rawVSIC'),
                      model_uri=NEON.rawVSIC, domain=None, range=Optional[float])

slots.veloXaxs = Slot(uri=NEON.veloXaxs, name="veloXaxs", curie=NEON.curie('veloXaxs'),
                      model_uri=NEON.veloXaxs, domain=None, range=Optional[float])

slots.veloYaxs = Slot(uri=NEON.veloYaxs, name="veloYaxs", curie=NEON.curie('veloYaxs'),
                      model_uri=NEON.veloYaxs, domain=None, range=Optional[float])

slots.veloZaxs = Slot(uri=NEON.veloZaxs, name="veloZaxs", curie=NEON.curie('veloZaxs'),
                      model_uri=NEON.veloZaxs, domain=None, range=Optional[float])

slots.idx = Slot(uri=NEON.idx, name="idx", curie=NEON.curie('idx'),
                      model_uri=NEON.idx, domain=None, range=Optional[int])

slots.diag = Slot(uri=NEON.diag, name="diag", curie=NEON.curie('diag'),
                      model_uri=NEON.diag, domain=None, range=Optional[int])

slots.tempTranTop = Slot(uri=NEON.tempTranTop, name="tempTranTop", curie=NEON.curie('tempTranTop'),
                      model_uri=NEON.tempTranTop, domain=None, range=Optional[float])

slots.tempArmTop = Slot(uri=NEON.tempArmTop, name="tempArmTop", curie=NEON.curie('tempArmTop'),
                      model_uri=NEON.tempArmTop, domain=None, range=Optional[float])

slots.tempArmBot = Slot(uri=NEON.tempArmBot, name="tempArmBot", curie=NEON.curie('tempArmBot'),
                      model_uri=NEON.tempArmBot, domain=None, range=Optional[float])

slots.tempTranBot = Slot(uri=NEON.tempTranBot, name="tempTranBot", curie=NEON.curie('tempTranBot'),
                      model_uri=NEON.tempTranBot, domain=None, range=Optional[float])

slots.tempBloc = Slot(uri=NEON.tempBloc, name="tempBloc", curie=NEON.curie('tempBloc'),
                      model_uri=NEON.tempBloc, domain=None, range=Optional[float])

slots.heatingPower = Slot(uri=NEON.heatingPower, name="heatingPower", curie=NEON.curie('heatingPower'),
                      model_uri=NEON.heatingPower, domain=None, range=Optional[float])

slots.globalTimeSourceFlag = Slot(uri=NEON.globalTimeSourceFlag, name="globalTimeSourceFlag", curie=NEON.curie('globalTimeSourceFlag'),
                      model_uri=NEON.globalTimeSourceFlag, domain=None, range=Optional[int])

slots.particulateMass1.0 = Slot(uri=NEON['particulateMass1.0'], name="particulateMass1.0", curie=NEON.curie('particulateMass1.0'),
                      model_uri=NEON['particulateMass1.0'], domain=None, range=Optional[float])

slots.particulateMass2.5 = Slot(uri=NEON['particulateMass2.5'], name="particulateMass2.5", curie=NEON.curie('particulateMass2.5'),
                      model_uri=NEON['particulateMass2.5'], domain=None, range=Optional[float])

slots.particulateMass4.0 = Slot(uri=NEON['particulateMass4.0'], name="particulateMass4.0", curie=NEON.curie('particulateMass4.0'),
                      model_uri=NEON['particulateMass4.0'], domain=None, range=Optional[float])

slots.particulateMass10 = Slot(uri=NEON.particulateMass10, name="particulateMass10", curie=NEON.curie('particulateMass10'),
                      model_uri=NEON.particulateMass10, domain=None, range=Optional[float])

slots.particulateMass15 = Slot(uri=NEON.particulateMass15, name="particulateMass15", curie=NEON.curie('particulateMass15'),
                      model_uri=NEON.particulateMass15, domain=None, range=Optional[float])

slots.pressureFM = Slot(uri=NEON.pressureFM, name="pressureFM", curie=NEON.curie('pressureFM'),
                      model_uri=NEON.pressureFM, domain=None, range=Optional[float])

slots.tempFM = Slot(uri=NEON.tempFM, name="tempFM", curie=NEON.curie('tempFM'),
                      model_uri=NEON.tempFM, domain=None, range=Optional[float])

slots.flowRateVolFM = Slot(uri=NEON.flowRateVolFM, name="flowRateVolFM", curie=NEON.curie('flowRateVolFM'),
                      model_uri=NEON.flowRateVolFM, domain=None, range=Optional[float])

slots.flowRateMassFM = Slot(uri=NEON.flowRateMassFM, name="flowRateMassFM", curie=NEON.curie('flowRateMassFM'),
                      model_uri=NEON.flowRateMassFM, domain=None, range=Optional[float])

slots.presAtm = Slot(uri=NEON.presAtm, name="presAtm", curie=NEON.curie('presAtm'),
                      model_uri=NEON.presAtm, domain=None, range=Optional[float])

slots.temp = Slot(uri=NEON.temp, name="temp", curie=NEON.curie('temp'),
                      model_uri=NEON.temp, domain=None, range=Optional[float])

slots.frt = Slot(uri=NEON.frt, name="frt", curie=NEON.curie('frt'),
                      model_uri=NEON.frt, domain=None, range=Optional[float])

slots.frt0 = Slot(uri=NEON.frt0, name="frt0", curie=NEON.curie('frt0'),
                      model_uri=NEON.frt0, domain=None, range=Optional[float])

slots.frtSet0 = Slot(uri=NEON.frtSet0, name="frtSet0", curie=NEON.curie('frtSet0'),
                      model_uri=NEON.frtSet0, domain=None, range=Optional[float])

slots.SHFMean = Slot(uri=NEON.SHFMean, name="SHFMean", curie=NEON.curie('SHFMean'),
                      model_uri=NEON.SHFMean, domain=None, range=Optional[float])

slots.SHFMinimum = Slot(uri=NEON.SHFMinimum, name="SHFMinimum", curie=NEON.curie('SHFMinimum'),
                      model_uri=NEON.SHFMinimum, domain=None, range=Optional[float])

slots.SHFMaximum = Slot(uri=NEON.SHFMaximum, name="SHFMaximum", curie=NEON.curie('SHFMaximum'),
                      model_uri=NEON.SHFMaximum, domain=None, range=Optional[float])

slots.SHFVariance = Slot(uri=NEON.SHFVariance, name="SHFVariance", curie=NEON.curie('SHFVariance'),
                      model_uri=NEON.SHFVariance, domain=None, range=Optional[float])

slots.SHFNumPts = Slot(uri=NEON.SHFNumPts, name="SHFNumPts", curie=NEON.curie('SHFNumPts'),
                      model_uri=NEON.SHFNumPts, domain=None, range=Optional[float])

slots.SHFExpUncert = Slot(uri=NEON.SHFExpUncert, name="SHFExpUncert", curie=NEON.curie('SHFExpUncert'),
                      model_uri=NEON.SHFExpUncert, domain=None, range=Optional[float])

slots.SHFStdErMean = Slot(uri=NEON.SHFStdErMean, name="SHFStdErMean", curie=NEON.curie('SHFStdErMean'),
                      model_uri=NEON.SHFStdErMean, domain=None, range=Optional[float])

slots.SHFCalHeaterQF = Slot(uri=NEON.SHFCalHeaterQF, name="SHFCalHeaterQF", curie=NEON.curie('SHFCalHeaterQF'),
                      model_uri=NEON.SHFCalHeaterQF, domain=None, range=Optional[int])

slots.SHFCalPeriodFlag = Slot(uri=NEON.SHFCalPeriodFlag, name="SHFCalPeriodFlag", curie=NEON.curie('SHFCalPeriodFlag'),
                      model_uri=NEON.SHFCalPeriodFlag, domain=None, range=Optional[float])

slots.SHFInSituCorFactor = Slot(uri=NEON.SHFInSituCorFactor, name="SHFInSituCorFactor", curie=NEON.curie('SHFInSituCorFactor'),
                      model_uri=NEON.SHFInSituCorFactor, domain=None, range=Optional[float])

slots.SHFInSituCorQF = Slot(uri=NEON.SHFInSituCorQF, name="SHFInSituCorQF", curie=NEON.curie('SHFInSituCorQF'),
                      model_uri=NEON.SHFInSituCorQF, domain=None, range=Optional[int])

slots.SHFCalHeaterOnMetric = Slot(uri=NEON.SHFCalHeaterOnMetric, name="SHFCalHeaterOnMetric", curie=NEON.curie('SHFCalHeaterOnMetric'),
                      model_uri=NEON.SHFCalHeaterOnMetric, domain=None, range=Optional[float])

slots.SHFCalHeaterOffMetric = Slot(uri=NEON.SHFCalHeaterOffMetric, name="SHFCalHeaterOffMetric", curie=NEON.curie('SHFCalHeaterOffMetric'),
                      model_uri=NEON.SHFCalHeaterOffMetric, domain=None, range=Optional[float])

slots.SHFCalHeaterFailQM = Slot(uri=NEON.SHFCalHeaterFailQM, name="SHFCalHeaterFailQM", curie=NEON.curie('SHFCalHeaterFailQM'),
                      model_uri=NEON.SHFCalHeaterFailQM, domain=None, range=Optional[float])

slots.SHFCalHeaterPassQM = Slot(uri=NEON.SHFCalHeaterPassQM, name="SHFCalHeaterPassQM", curie=NEON.curie('SHFCalHeaterPassQM'),
                      model_uri=NEON.SHFCalHeaterPassQM, domain=None, range=Optional[float])

slots.SHFCalHeaterNAQM = Slot(uri=NEON.SHFCalHeaterNAQM, name="SHFCalHeaterNAQM", curie=NEON.curie('SHFCalHeaterNAQM'),
                      model_uri=NEON.SHFCalHeaterNAQM, domain=None, range=Optional[float])

slots.SHFCalPeriodOnMetric = Slot(uri=NEON.SHFCalPeriodOnMetric, name="SHFCalPeriodOnMetric", curie=NEON.curie('SHFCalPeriodOnMetric'),
                      model_uri=NEON.SHFCalPeriodOnMetric, domain=None, range=Optional[float])

slots.SHFCalPeriodOffMetric = Slot(uri=NEON.SHFCalPeriodOffMetric, name="SHFCalPeriodOffMetric", curie=NEON.curie('SHFCalPeriodOffMetric'),
                      model_uri=NEON.SHFCalPeriodOffMetric, domain=None, range=Optional[float])

slots.SHFInSituCorFailQM = Slot(uri=NEON.SHFInSituCorFailQM, name="SHFInSituCorFailQM", curie=NEON.curie('SHFInSituCorFailQM'),
                      model_uri=NEON.SHFInSituCorFailQM, domain=None, range=Optional[float])

slots.SHFInSituCorPassQM = Slot(uri=NEON.SHFInSituCorPassQM, name="SHFInSituCorPassQM", curie=NEON.curie('SHFInSituCorPassQM'),
                      model_uri=NEON.SHFInSituCorPassQM, domain=None, range=Optional[float])

slots.SHFInSituCorNAQM = Slot(uri=NEON.SHFInSituCorNAQM, name="SHFInSituCorNAQM", curie=NEON.curie('SHFInSituCorNAQM'),
                      model_uri=NEON.SHFInSituCorNAQM, domain=None, range=Optional[float])

slots.archiveFacilityID = Slot(uri=NEON.archiveFacilityID, name="archiveFacilityID", curie=NEON.curie('archiveFacilityID'),
                      model_uri=NEON.archiveFacilityID, domain=None, range=Optional[str])

slots.gWatTempRangeFailQM = Slot(uri=NEON.gWatTempRangeFailQM, name="gWatTempRangeFailQM", curie=NEON.curie('gWatTempRangeFailQM'),
                      model_uri=NEON.gWatTempRangeFailQM, domain=None, range=Optional[float])

slots.gWatTempRangePassQM = Slot(uri=NEON.gWatTempRangePassQM, name="gWatTempRangePassQM", curie=NEON.curie('gWatTempRangePassQM'),
                      model_uri=NEON.gWatTempRangePassQM, domain=None, range=Optional[float])

slots.gWatTempRangeNAQM = Slot(uri=NEON.gWatTempRangeNAQM, name="gWatTempRangeNAQM", curie=NEON.curie('gWatTempRangeNAQM'),
                      model_uri=NEON.gWatTempRangeNAQM, domain=None, range=Optional[float])

slots.gWatTempPersistenceFailQM = Slot(uri=NEON.gWatTempPersistenceFailQM, name="gWatTempPersistenceFailQM", curie=NEON.curie('gWatTempPersistenceFailQM'),
                      model_uri=NEON.gWatTempPersistenceFailQM, domain=None, range=Optional[float])

slots.gWatTempPersistencePassQM = Slot(uri=NEON.gWatTempPersistencePassQM, name="gWatTempPersistencePassQM", curie=NEON.curie('gWatTempPersistencePassQM'),
                      model_uri=NEON.gWatTempPersistencePassQM, domain=None, range=Optional[float])

slots.gWatTempPersistenceNAQM = Slot(uri=NEON.gWatTempPersistenceNAQM, name="gWatTempPersistenceNAQM", curie=NEON.curie('gWatTempPersistenceNAQM'),
                      model_uri=NEON.gWatTempPersistenceNAQM, domain=None, range=Optional[float])

slots.gWatTempStepFailQM = Slot(uri=NEON.gWatTempStepFailQM, name="gWatTempStepFailQM", curie=NEON.curie('gWatTempStepFailQM'),
                      model_uri=NEON.gWatTempStepFailQM, domain=None, range=Optional[float])

slots.gWatTempStepPassQM = Slot(uri=NEON.gWatTempStepPassQM, name="gWatTempStepPassQM", curie=NEON.curie('gWatTempStepPassQM'),
                      model_uri=NEON.gWatTempStepPassQM, domain=None, range=Optional[float])

slots.gWatTempStepNAQM = Slot(uri=NEON.gWatTempStepNAQM, name="gWatTempStepNAQM", curie=NEON.curie('gWatTempStepNAQM'),
                      model_uri=NEON.gWatTempStepNAQM, domain=None, range=Optional[float])

slots.gWatTempNullFailQM = Slot(uri=NEON.gWatTempNullFailQM, name="gWatTempNullFailQM", curie=NEON.curie('gWatTempNullFailQM'),
                      model_uri=NEON.gWatTempNullFailQM, domain=None, range=Optional[float])

slots.gWatTempNullPassQM = Slot(uri=NEON.gWatTempNullPassQM, name="gWatTempNullPassQM", curie=NEON.curie('gWatTempNullPassQM'),
                      model_uri=NEON.gWatTempNullPassQM, domain=None, range=Optional[float])

slots.gWatTempNullNAQM = Slot(uri=NEON.gWatTempNullNAQM, name="gWatTempNullNAQM", curie=NEON.curie('gWatTempNullNAQM'),
                      model_uri=NEON.gWatTempNullNAQM, domain=None, range=Optional[float])

slots.gWatTempGapFailQM = Slot(uri=NEON.gWatTempGapFailQM, name="gWatTempGapFailQM", curie=NEON.curie('gWatTempGapFailQM'),
                      model_uri=NEON.gWatTempGapFailQM, domain=None, range=Optional[float])

slots.gWatTempGapPassQM = Slot(uri=NEON.gWatTempGapPassQM, name="gWatTempGapPassQM", curie=NEON.curie('gWatTempGapPassQM'),
                      model_uri=NEON.gWatTempGapPassQM, domain=None, range=Optional[float])

slots.gWatTempGapNAQM = Slot(uri=NEON.gWatTempGapNAQM, name="gWatTempGapNAQM", curie=NEON.curie('gWatTempGapNAQM'),
                      model_uri=NEON.gWatTempGapNAQM, domain=None, range=Optional[float])

slots.gWatTempSpikeFailQM = Slot(uri=NEON.gWatTempSpikeFailQM, name="gWatTempSpikeFailQM", curie=NEON.curie('gWatTempSpikeFailQM'),
                      model_uri=NEON.gWatTempSpikeFailQM, domain=None, range=Optional[float])

slots.gWatTempSpikePassQM = Slot(uri=NEON.gWatTempSpikePassQM, name="gWatTempSpikePassQM", curie=NEON.curie('gWatTempSpikePassQM'),
                      model_uri=NEON.gWatTempSpikePassQM, domain=None, range=Optional[float])

slots.gWatTempSpikeNAQM = Slot(uri=NEON.gWatTempSpikeNAQM, name="gWatTempSpikeNAQM", curie=NEON.curie('gWatTempSpikeNAQM'),
                      model_uri=NEON.gWatTempSpikeNAQM, domain=None, range=Optional[float])

slots.gWatTempConsistencyFailQM = Slot(uri=NEON.gWatTempConsistencyFailQM, name="gWatTempConsistencyFailQM", curie=NEON.curie('gWatTempConsistencyFailQM'),
                      model_uri=NEON.gWatTempConsistencyFailQM, domain=None, range=Optional[float])

slots.gWatTempConsistencyPassQM = Slot(uri=NEON.gWatTempConsistencyPassQM, name="gWatTempConsistencyPassQM", curie=NEON.curie('gWatTempConsistencyPassQM'),
                      model_uri=NEON.gWatTempConsistencyPassQM, domain=None, range=Optional[float])

slots.gWatTempConsistencyNAQM = Slot(uri=NEON.gWatTempConsistencyNAQM, name="gWatTempConsistencyNAQM", curie=NEON.curie('gWatTempConsistencyNAQM'),
                      model_uri=NEON.gWatTempConsistencyNAQM, domain=None, range=Optional[float])

slots.gWatTempAlphaQM = Slot(uri=NEON.gWatTempAlphaQM, name="gWatTempAlphaQM", curie=NEON.curie('gWatTempAlphaQM'),
                      model_uri=NEON.gWatTempAlphaQM, domain=None, range=Optional[float])

slots.localSetDateTime = Slot(uri=NEON.localSetDateTime, name="localSetDateTime", curie=NEON.curie('localSetDateTime'),
                      model_uri=NEON.localSetDateTime, domain=None, range=Optional[str])

slots.localCollectDateTime = Slot(uri=NEON.localCollectDateTime, name="localCollectDateTime", curie=NEON.curie('localCollectDateTime'),
                      model_uri=NEON.localCollectDateTime, domain=None, range=Optional[str])

slots.strainGauge1FreqComp = Slot(uri=NEON.strainGauge1FreqComp, name="strainGauge1FreqComp", curie=NEON.curie('strainGauge1FreqComp'),
                      model_uri=NEON.strainGauge1FreqComp, domain=None, range=Optional[float])

slots.orificeHeaterFlag = Slot(uri=NEON.orificeHeaterFlag, name="orificeHeaterFlag", curie=NEON.curie('orificeHeaterFlag'),
                      model_uri=NEON.orificeHeaterFlag, domain=None, range=Optional[int])

slots.gWatTempBetaQM = Slot(uri=NEON.gWatTempBetaQM, name="gWatTempBetaQM", curie=NEON.curie('gWatTempBetaQM'),
                      model_uri=NEON.gWatTempBetaQM, domain=None, range=Optional[float])

slots.gWatTempFinalQF = Slot(uri=NEON.gWatTempFinalQF, name="gWatTempFinalQF", curie=NEON.curie('gWatTempFinalQF'),
                      model_uri=NEON.gWatTempFinalQF, domain=None, range=Optional[str])

slots.gWatElevRangeFailQM = Slot(uri=NEON.gWatElevRangeFailQM, name="gWatElevRangeFailQM", curie=NEON.curie('gWatElevRangeFailQM'),
                      model_uri=NEON.gWatElevRangeFailQM, domain=None, range=Optional[float])

slots.gWatElevRangePassQM = Slot(uri=NEON.gWatElevRangePassQM, name="gWatElevRangePassQM", curie=NEON.curie('gWatElevRangePassQM'),
                      model_uri=NEON.gWatElevRangePassQM, domain=None, range=Optional[float])

slots.gWatElevRangeNAQM = Slot(uri=NEON.gWatElevRangeNAQM, name="gWatElevRangeNAQM", curie=NEON.curie('gWatElevRangeNAQM'),
                      model_uri=NEON.gWatElevRangeNAQM, domain=None, range=Optional[float])

slots.gWatElevPersistenceFailQM = Slot(uri=NEON.gWatElevPersistenceFailQM, name="gWatElevPersistenceFailQM", curie=NEON.curie('gWatElevPersistenceFailQM'),
                      model_uri=NEON.gWatElevPersistenceFailQM, domain=None, range=Optional[float])

slots.gWatElevPersistencePassQM = Slot(uri=NEON.gWatElevPersistencePassQM, name="gWatElevPersistencePassQM", curie=NEON.curie('gWatElevPersistencePassQM'),
                      model_uri=NEON.gWatElevPersistencePassQM, domain=None, range=Optional[float])

slots.gWatElevPersistenceNAQM = Slot(uri=NEON.gWatElevPersistenceNAQM, name="gWatElevPersistenceNAQM", curie=NEON.curie('gWatElevPersistenceNAQM'),
                      model_uri=NEON.gWatElevPersistenceNAQM, domain=None, range=Optional[float])

slots.gWatElevStepFailQM = Slot(uri=NEON.gWatElevStepFailQM, name="gWatElevStepFailQM", curie=NEON.curie('gWatElevStepFailQM'),
                      model_uri=NEON.gWatElevStepFailQM, domain=None, range=Optional[float])

slots.gWatElevStepPassQM = Slot(uri=NEON.gWatElevStepPassQM, name="gWatElevStepPassQM", curie=NEON.curie('gWatElevStepPassQM'),
                      model_uri=NEON.gWatElevStepPassQM, domain=None, range=Optional[float])

slots.gWatElevStepNAQM = Slot(uri=NEON.gWatElevStepNAQM, name="gWatElevStepNAQM", curie=NEON.curie('gWatElevStepNAQM'),
                      model_uri=NEON.gWatElevStepNAQM, domain=None, range=Optional[float])

slots.gWatElevNullFailQM = Slot(uri=NEON.gWatElevNullFailQM, name="gWatElevNullFailQM", curie=NEON.curie('gWatElevNullFailQM'),
                      model_uri=NEON.gWatElevNullFailQM, domain=None, range=Optional[float])

slots.gWatElevNullPassQM = Slot(uri=NEON.gWatElevNullPassQM, name="gWatElevNullPassQM", curie=NEON.curie('gWatElevNullPassQM'),
                      model_uri=NEON.gWatElevNullPassQM, domain=None, range=Optional[float])

slots.gWatElevNullNAQM = Slot(uri=NEON.gWatElevNullNAQM, name="gWatElevNullNAQM", curie=NEON.curie('gWatElevNullNAQM'),
                      model_uri=NEON.gWatElevNullNAQM, domain=None, range=Optional[float])

slots.gWatElevGapFailQM = Slot(uri=NEON.gWatElevGapFailQM, name="gWatElevGapFailQM", curie=NEON.curie('gWatElevGapFailQM'),
                      model_uri=NEON.gWatElevGapFailQM, domain=None, range=Optional[float])

slots.gWatElevGapPassQM = Slot(uri=NEON.gWatElevGapPassQM, name="gWatElevGapPassQM", curie=NEON.curie('gWatElevGapPassQM'),
                      model_uri=NEON.gWatElevGapPassQM, domain=None, range=Optional[float])

slots.gWatElevGapNAQM = Slot(uri=NEON.gWatElevGapNAQM, name="gWatElevGapNAQM", curie=NEON.curie('gWatElevGapNAQM'),
                      model_uri=NEON.gWatElevGapNAQM, domain=None, range=Optional[float])

slots.gWatElevSpikeFailQM = Slot(uri=NEON.gWatElevSpikeFailQM, name="gWatElevSpikeFailQM", curie=NEON.curie('gWatElevSpikeFailQM'),
                      model_uri=NEON.gWatElevSpikeFailQM, domain=None, range=Optional[float])

slots.gWatElevSpikePassQM = Slot(uri=NEON.gWatElevSpikePassQM, name="gWatElevSpikePassQM", curie=NEON.curie('gWatElevSpikePassQM'),
                      model_uri=NEON.gWatElevSpikePassQM, domain=None, range=Optional[float])

slots.gWatElevSpikeNAQM = Slot(uri=NEON.gWatElevSpikeNAQM, name="gWatElevSpikeNAQM", curie=NEON.curie('gWatElevSpikeNAQM'),
                      model_uri=NEON.gWatElevSpikeNAQM, domain=None, range=Optional[float])

slots.gWatElevConsistencyFailQM = Slot(uri=NEON.gWatElevConsistencyFailQM, name="gWatElevConsistencyFailQM", curie=NEON.curie('gWatElevConsistencyFailQM'),
                      model_uri=NEON.gWatElevConsistencyFailQM, domain=None, range=Optional[float])

slots.gWatElevConsistencyPassQM = Slot(uri=NEON.gWatElevConsistencyPassQM, name="gWatElevConsistencyPassQM", curie=NEON.curie('gWatElevConsistencyPassQM'),
                      model_uri=NEON.gWatElevConsistencyPassQM, domain=None, range=Optional[float])

slots.gWatElevConsistencyNAQM = Slot(uri=NEON.gWatElevConsistencyNAQM, name="gWatElevConsistencyNAQM", curie=NEON.curie('gWatElevConsistencyNAQM'),
                      model_uri=NEON.gWatElevConsistencyNAQM, domain=None, range=Optional[float])

slots.gWatElevAlphaQM = Slot(uri=NEON.gWatElevAlphaQM, name="gWatElevAlphaQM", curie=NEON.curie('gWatElevAlphaQM'),
                      model_uri=NEON.gWatElevAlphaQM, domain=None, range=Optional[float])

slots.gWatElevBetaQM = Slot(uri=NEON.gWatElevBetaQM, name="gWatElevBetaQM", curie=NEON.curie('gWatElevBetaQM'),
                      model_uri=NEON.gWatElevBetaQM, domain=None, range=Optional[float])

slots.gWatElevFinalQF = Slot(uri=NEON.gWatElevFinalQF, name="gWatElevFinalQF", curie=NEON.curie('gWatElevFinalQF'),
                      model_uri=NEON.gWatElevFinalQF, domain=None, range=Optional[str])

slots.gWatSCondRangeFailQM = Slot(uri=NEON.gWatSCondRangeFailQM, name="gWatSCondRangeFailQM", curie=NEON.curie('gWatSCondRangeFailQM'),
                      model_uri=NEON.gWatSCondRangeFailQM, domain=None, range=Optional[float])

slots.gWatSCondRangePassQM = Slot(uri=NEON.gWatSCondRangePassQM, name="gWatSCondRangePassQM", curie=NEON.curie('gWatSCondRangePassQM'),
                      model_uri=NEON.gWatSCondRangePassQM, domain=None, range=Optional[float])

slots.gWatSCondRangeNAQM = Slot(uri=NEON.gWatSCondRangeNAQM, name="gWatSCondRangeNAQM", curie=NEON.curie('gWatSCondRangeNAQM'),
                      model_uri=NEON.gWatSCondRangeNAQM, domain=None, range=Optional[float])

slots.gWatSCondPersistenceFailQM = Slot(uri=NEON.gWatSCondPersistenceFailQM, name="gWatSCondPersistenceFailQM", curie=NEON.curie('gWatSCondPersistenceFailQM'),
                      model_uri=NEON.gWatSCondPersistenceFailQM, domain=None, range=Optional[float])

slots.gWatSCondPersistencePassQM = Slot(uri=NEON.gWatSCondPersistencePassQM, name="gWatSCondPersistencePassQM", curie=NEON.curie('gWatSCondPersistencePassQM'),
                      model_uri=NEON.gWatSCondPersistencePassQM, domain=None, range=Optional[float])

slots.gWatSCondPersistenceNAQM = Slot(uri=NEON.gWatSCondPersistenceNAQM, name="gWatSCondPersistenceNAQM", curie=NEON.curie('gWatSCondPersistenceNAQM'),
                      model_uri=NEON.gWatSCondPersistenceNAQM, domain=None, range=Optional[float])

slots.gWatSCondStepFailQM = Slot(uri=NEON.gWatSCondStepFailQM, name="gWatSCondStepFailQM", curie=NEON.curie('gWatSCondStepFailQM'),
                      model_uri=NEON.gWatSCondStepFailQM, domain=None, range=Optional[float])

slots.gWatSCondStepPassQM = Slot(uri=NEON.gWatSCondStepPassQM, name="gWatSCondStepPassQM", curie=NEON.curie('gWatSCondStepPassQM'),
                      model_uri=NEON.gWatSCondStepPassQM, domain=None, range=Optional[float])

slots.gWatSCondStepNAQM = Slot(uri=NEON.gWatSCondStepNAQM, name="gWatSCondStepNAQM", curie=NEON.curie('gWatSCondStepNAQM'),
                      model_uri=NEON.gWatSCondStepNAQM, domain=None, range=Optional[float])

slots.gWatSCondNullFailQM = Slot(uri=NEON.gWatSCondNullFailQM, name="gWatSCondNullFailQM", curie=NEON.curie('gWatSCondNullFailQM'),
                      model_uri=NEON.gWatSCondNullFailQM, domain=None, range=Optional[float])

slots.gWatSCondNullPassQM = Slot(uri=NEON.gWatSCondNullPassQM, name="gWatSCondNullPassQM", curie=NEON.curie('gWatSCondNullPassQM'),
                      model_uri=NEON.gWatSCondNullPassQM, domain=None, range=Optional[float])

slots.gWatSCondNullNAQM = Slot(uri=NEON.gWatSCondNullNAQM, name="gWatSCondNullNAQM", curie=NEON.curie('gWatSCondNullNAQM'),
                      model_uri=NEON.gWatSCondNullNAQM, domain=None, range=Optional[float])

slots.gWatSCondGapFailQM = Slot(uri=NEON.gWatSCondGapFailQM, name="gWatSCondGapFailQM", curie=NEON.curie('gWatSCondGapFailQM'),
                      model_uri=NEON.gWatSCondGapFailQM, domain=None, range=Optional[float])

slots.gWatSCondGapPassQM = Slot(uri=NEON.gWatSCondGapPassQM, name="gWatSCondGapPassQM", curie=NEON.curie('gWatSCondGapPassQM'),
                      model_uri=NEON.gWatSCondGapPassQM, domain=None, range=Optional[float])

slots.gWatSCondGapNAQM = Slot(uri=NEON.gWatSCondGapNAQM, name="gWatSCondGapNAQM", curie=NEON.curie('gWatSCondGapNAQM'),
                      model_uri=NEON.gWatSCondGapNAQM, domain=None, range=Optional[float])

slots.gWatSCondSpikeFailQM = Slot(uri=NEON.gWatSCondSpikeFailQM, name="gWatSCondSpikeFailQM", curie=NEON.curie('gWatSCondSpikeFailQM'),
                      model_uri=NEON.gWatSCondSpikeFailQM, domain=None, range=Optional[float])

slots.gWatSCondSpikePassQM = Slot(uri=NEON.gWatSCondSpikePassQM, name="gWatSCondSpikePassQM", curie=NEON.curie('gWatSCondSpikePassQM'),
                      model_uri=NEON.gWatSCondSpikePassQM, domain=None, range=Optional[float])

slots.gWatSCondSpikeNAQM = Slot(uri=NEON.gWatSCondSpikeNAQM, name="gWatSCondSpikeNAQM", curie=NEON.curie('gWatSCondSpikeNAQM'),
                      model_uri=NEON.gWatSCondSpikeNAQM, domain=None, range=Optional[float])

slots.gWatSCondConsistencyFailQM = Slot(uri=NEON.gWatSCondConsistencyFailQM, name="gWatSCondConsistencyFailQM", curie=NEON.curie('gWatSCondConsistencyFailQM'),
                      model_uri=NEON.gWatSCondConsistencyFailQM, domain=None, range=Optional[float])

slots.gWatSCondConsistencyPassQM = Slot(uri=NEON.gWatSCondConsistencyPassQM, name="gWatSCondConsistencyPassQM", curie=NEON.curie('gWatSCondConsistencyPassQM'),
                      model_uri=NEON.gWatSCondConsistencyPassQM, domain=None, range=Optional[float])

slots.gWatSCondConsistencyNAQM = Slot(uri=NEON.gWatSCondConsistencyNAQM, name="gWatSCondConsistencyNAQM", curie=NEON.curie('gWatSCondConsistencyNAQM'),
                      model_uri=NEON.gWatSCondConsistencyNAQM, domain=None, range=Optional[float])

slots.gWatSCondAlphaQM = Slot(uri=NEON.gWatSCondAlphaQM, name="gWatSCondAlphaQM", curie=NEON.curie('gWatSCondAlphaQM'),
                      model_uri=NEON.gWatSCondAlphaQM, domain=None, range=Optional[float])

slots.gWatSCondBetaQM = Slot(uri=NEON.gWatSCondBetaQM, name="gWatSCondBetaQM", curie=NEON.curie('gWatSCondBetaQM'),
                      model_uri=NEON.gWatSCondBetaQM, domain=None, range=Optional[float])

slots.gWatSCondFinalQF = Slot(uri=NEON.gWatSCondFinalQF, name="gWatSCondFinalQF", curie=NEON.curie('gWatSCondFinalQF'),
                      model_uri=NEON.gWatSCondFinalQF, domain=None, range=Optional[str])

slots.IRmetadata = Slot(uri=NEON.IRmetadata, name="IRmetadata", curie=NEON.curie('IRmetadata'),
                      model_uri=NEON.IRmetadata, domain=None, range=Optional[str])

slots.RGBmetadata = Slot(uri=NEON.RGBmetadata, name="RGBmetadata", curie=NEON.curie('RGBmetadata'),
                      model_uri=NEON.RGBmetadata, domain=None, range=Optional[str])

slots.pitProfileID = Slot(uri=NEON.pitProfileID, name="pitProfileID", curie=NEON.curie('pitProfileID'),
                      model_uri=NEON.pitProfileID, domain=None, range=Optional[str])

slots.rootStatus = Slot(uri=NEON.rootStatus, name="rootStatus", curie=NEON.curie('rootStatus'),
                      model_uri=NEON.rootStatus, domain=None, range=Optional[str])

slots.sizeCategory = Slot(uri=NEON.sizeCategory, name="sizeCategory", curie=NEON.curie('sizeCategory'),
                      model_uri=NEON.sizeCategory, domain=None, range=Optional[str])

slots.maxProfileDepth = Slot(uri=NEON.maxProfileDepth, name="maxProfileDepth", curie=NEON.curie('maxProfileDepth'),
                      model_uri=NEON.maxProfileDepth, domain=None, range=Optional[float])

slots.totalRootBiomass = Slot(uri=NEON.totalRootBiomass, name="totalRootBiomass", curie=NEON.curie('totalRootBiomass'),
                      model_uri=NEON.totalRootBiomass, domain=None, range=Optional[float])

slots.depth100RootBiomass = Slot(uri=NEON.depth100RootBiomass, name="depth100RootBiomass", curie=NEON.curie('depth100RootBiomass'),
                      model_uri=NEON.depth100RootBiomass, domain=None, range=Optional[float])

slots.topDepth = Slot(uri=NEON.topDepth, name="topDepth", curie=NEON.curie('topDepth'),
                      model_uri=NEON.topDepth, domain=None, range=Optional[float])

slots.bottomDepth = Slot(uri=NEON.bottomDepth, name="bottomDepth", curie=NEON.curie('bottomDepth'),
                      model_uri=NEON.bottomDepth, domain=None, range=Optional[float])

slots.depthIncrementID = Slot(uri=NEON.depthIncrementID, name="depthIncrementID", curie=NEON.curie('depthIncrementID'),
                      model_uri=NEON.depthIncrementID, domain=None, range=Optional[str])

slots.depthIncrementVolume = Slot(uri=NEON.depthIncrementVolume, name="depthIncrementVolume", curie=NEON.curie('depthIncrementVolume'),
                      model_uri=NEON.depthIncrementVolume, domain=None, range=Optional[float])

slots.sampleMethod = Slot(uri=NEON.sampleMethod, name="sampleMethod", curie=NEON.curie('sampleMethod'),
                      model_uri=NEON.sampleMethod, domain=None, range=Optional[str])

slots.sampleMethodOrientation = Slot(uri=NEON.sampleMethodOrientation, name="sampleMethodOrientation", curie=NEON.curie('sampleMethodOrientation'),
                      model_uri=NEON.sampleMethodOrientation, domain=None, range=Optional[str])

slots.rootDryMass = Slot(uri=NEON.rootDryMass, name="rootDryMass", curie=NEON.curie('rootDryMass'),
                      model_uri=NEON.rootDryMass, domain=None, range=Optional[float])

slots.incrementRootBiomass = Slot(uri=NEON.incrementRootBiomass, name="incrementRootBiomass", curie=NEON.curie('incrementRootBiomass'),
                      model_uri=NEON.incrementRootBiomass, domain=None, range=Optional[float])

slots.incrementRootDensity = Slot(uri=NEON.incrementRootDensity, name="incrementRootDensity", curie=NEON.curie('incrementRootDensity'),
                      model_uri=NEON.incrementRootDensity, domain=None, range=Optional[float])

slots.strainGauge2Stability = Slot(uri=NEON.strainGauge2Stability, name="strainGauge2Stability", curie=NEON.curie('strainGauge2Stability'),
                      model_uri=NEON.strainGauge2Stability, domain=None, range=Optional[int])

slots.strainGauge3Stability = Slot(uri=NEON.strainGauge3Stability, name="strainGauge3Stability", curie=NEON.curie('strainGauge3Stability'),
                      model_uri=NEON.strainGauge3Stability, domain=None, range=Optional[int])

slots.strainGauge2Temp = Slot(uri=NEON.strainGauge2Temp, name="strainGauge2Temp", curie=NEON.curie('strainGauge2Temp'),
                      model_uri=NEON.strainGauge2Temp, domain=None, range=Optional[float])

slots.strainGauge3Temp = Slot(uri=NEON.strainGauge3Temp, name="strainGauge3Temp", curie=NEON.curie('strainGauge3Temp'),
                      model_uri=NEON.strainGauge3Temp, domain=None, range=Optional[float])

slots.strainGauge2FreqRaw = Slot(uri=NEON.strainGauge2FreqRaw, name="strainGauge2FreqRaw", curie=NEON.curie('strainGauge2FreqRaw'),
                      model_uri=NEON.strainGauge2FreqRaw, domain=None, range=Optional[float])

slots.strainGauge3FreqRaw = Slot(uri=NEON.strainGauge3FreqRaw, name="strainGauge3FreqRaw", curie=NEON.curie('strainGauge3FreqRaw'),
                      model_uri=NEON.strainGauge3FreqRaw, domain=None, range=Optional[float])

slots.strainGauge2Weight = Slot(uri=NEON.strainGauge2Weight, name="strainGauge2Weight", curie=NEON.curie('strainGauge2Weight'),
                      model_uri=NEON.strainGauge2Weight, domain=None, range=Optional[float])

slots.strainGauge3Weight = Slot(uri=NEON.strainGauge3Weight, name="strainGauge3Weight", curie=NEON.curie('strainGauge3Weight'),
                      model_uri=NEON.strainGauge3Weight, domain=None, range=Optional[float])

slots.strainGauge2FreqComp = Slot(uri=NEON.strainGauge2FreqComp, name="strainGauge2FreqComp", curie=NEON.curie('strainGauge2FreqComp'),
                      model_uri=NEON.strainGauge2FreqComp, domain=None, range=Optional[float])

slots.strainGauge3FreqComp = Slot(uri=NEON.strainGauge3FreqComp, name="strainGauge3FreqComp", curie=NEON.curie('strainGauge3FreqComp'),
                      model_uri=NEON.strainGauge3FreqComp, domain=None, range=Optional[float])

slots.externalLabNamedLocation = Slot(uri=NEON.externalLabNamedLocation, name="externalLabNamedLocation", curie=NEON.curie('externalLabNamedLocation'),
                      model_uri=NEON.externalLabNamedLocation, domain=None, range=Optional[str])

slots.externalLabSummaryFile = Slot(uri=NEON.externalLabSummaryFile, name="externalLabSummaryFile", curie=NEON.curie('externalLabSummaryFile'),
                      model_uri=NEON.externalLabSummaryFile, domain=None, range=Optional[str])

slots.heaterMonitor = Slot(uri=NEON.heaterMonitor, name="heaterMonitor", curie=NEON.curie('heaterMonitor'),
                      model_uri=NEON.heaterMonitor, domain=None, range=Optional[float])

slots.rawVSWC0 = Slot(uri=NEON.rawVSWC0, name="rawVSWC0", curie=NEON.curie('rawVSWC0'),
                      model_uri=NEON.rawVSWC0, domain=None, range=Optional[float])

slots.rawVSIC0 = Slot(uri=NEON.rawVSIC0, name="rawVSIC0", curie=NEON.curie('rawVSIC0'),
                      model_uri=NEON.rawVSIC0, domain=None, range=Optional[float])

slots.rawVSWC1 = Slot(uri=NEON.rawVSWC1, name="rawVSWC1", curie=NEON.curie('rawVSWC1'),
                      model_uri=NEON.rawVSWC1, domain=None, range=Optional[float])

slots.rawVSIC1 = Slot(uri=NEON.rawVSIC1, name="rawVSIC1", curie=NEON.curie('rawVSIC1'),
                      model_uri=NEON.rawVSIC1, domain=None, range=Optional[float])

slots.rawVSWC2 = Slot(uri=NEON.rawVSWC2, name="rawVSWC2", curie=NEON.curie('rawVSWC2'),
                      model_uri=NEON.rawVSWC2, domain=None, range=Optional[float])

slots.rawVSIC2 = Slot(uri=NEON.rawVSIC2, name="rawVSIC2", curie=NEON.curie('rawVSIC2'),
                      model_uri=NEON.rawVSIC2, domain=None, range=Optional[float])

slots.rawVSWC3 = Slot(uri=NEON.rawVSWC3, name="rawVSWC3", curie=NEON.curie('rawVSWC3'),
                      model_uri=NEON.rawVSWC3, domain=None, range=Optional[float])

slots.rawVSIC3 = Slot(uri=NEON.rawVSIC3, name="rawVSIC3", curie=NEON.curie('rawVSIC3'),
                      model_uri=NEON.rawVSIC3, domain=None, range=Optional[float])

slots.rawVSWC4 = Slot(uri=NEON.rawVSWC4, name="rawVSWC4", curie=NEON.curie('rawVSWC4'),
                      model_uri=NEON.rawVSWC4, domain=None, range=Optional[float])

slots.rawVSIC4 = Slot(uri=NEON.rawVSIC4, name="rawVSIC4", curie=NEON.curie('rawVSIC4'),
                      model_uri=NEON.rawVSIC4, domain=None, range=Optional[float])

slots.rawVSWC5 = Slot(uri=NEON.rawVSWC5, name="rawVSWC5", curie=NEON.curie('rawVSWC5'),
                      model_uri=NEON.rawVSWC5, domain=None, range=Optional[float])

slots.rawVSIC5 = Slot(uri=NEON.rawVSIC5, name="rawVSIC5", curie=NEON.curie('rawVSIC5'),
                      model_uri=NEON.rawVSIC5, domain=None, range=Optional[float])

slots.rawVSWC6 = Slot(uri=NEON.rawVSWC6, name="rawVSWC6", curie=NEON.curie('rawVSWC6'),
                      model_uri=NEON.rawVSWC6, domain=None, range=Optional[float])

slots.rawVSIC6 = Slot(uri=NEON.rawVSIC6, name="rawVSIC6", curie=NEON.curie('rawVSIC6'),
                      model_uri=NEON.rawVSIC6, domain=None, range=Optional[float])

slots.rawVSWC7 = Slot(uri=NEON.rawVSWC7, name="rawVSWC7", curie=NEON.curie('rawVSWC7'),
                      model_uri=NEON.rawVSWC7, domain=None, range=Optional[float])

slots.rawVSIC7 = Slot(uri=NEON.rawVSIC7, name="rawVSIC7", curie=NEON.curie('rawVSIC7'),
                      model_uri=NEON.rawVSIC7, domain=None, range=Optional[float])

slots.wire1StabilityPassQM = Slot(uri=NEON.wire1StabilityPassQM, name="wire1StabilityPassQM", curie=NEON.curie('wire1StabilityPassQM'),
                      model_uri=NEON.wire1StabilityPassQM, domain=None, range=Optional[float])

slots.wire1StabilitySearchQM = Slot(uri=NEON.wire1StabilitySearchQM, name="wire1StabilitySearchQM", curie=NEON.curie('wire1StabilitySearchQM'),
                      model_uri=NEON.wire1StabilitySearchQM, domain=None, range=Optional[float])

slots.wire1StabilityFailQM = Slot(uri=NEON.wire1StabilityFailQM, name="wire1StabilityFailQM", curie=NEON.curie('wire1StabilityFailQM'),
                      model_uri=NEON.wire1StabilityFailQM, domain=None, range=Optional[float])

slots.wire2StabilityPassQM = Slot(uri=NEON.wire2StabilityPassQM, name="wire2StabilityPassQM", curie=NEON.curie('wire2StabilityPassQM'),
                      model_uri=NEON.wire2StabilityPassQM, domain=None, range=Optional[float])

slots.wire2StabilitySearchQM = Slot(uri=NEON.wire2StabilitySearchQM, name="wire2StabilitySearchQM", curie=NEON.curie('wire2StabilitySearchQM'),
                      model_uri=NEON.wire2StabilitySearchQM, domain=None, range=Optional[float])

slots.wire2StabilityFailQM = Slot(uri=NEON.wire2StabilityFailQM, name="wire2StabilityFailQM", curie=NEON.curie('wire2StabilityFailQM'),
                      model_uri=NEON.wire2StabilityFailQM, domain=None, range=Optional[float])

slots.wire3StabilityPassQM = Slot(uri=NEON.wire3StabilityPassQM, name="wire3StabilityPassQM", curie=NEON.curie('wire3StabilityPassQM'),
                      model_uri=NEON.wire3StabilityPassQM, domain=None, range=Optional[float])

slots.wire3StabilitySearchQM = Slot(uri=NEON.wire3StabilitySearchQM, name="wire3StabilitySearchQM", curie=NEON.curie('wire3StabilitySearchQM'),
                      model_uri=NEON.wire3StabilitySearchQM, domain=None, range=Optional[float])

slots.wire3StabilityFailQM = Slot(uri=NEON.wire3StabilityFailQM, name="wire3StabilityFailQM", curie=NEON.curie('wire3StabilityFailQM'),
                      model_uri=NEON.wire3StabilityFailQM, domain=None, range=Optional[float])

slots.inletHeaters1QM = Slot(uri=NEON.inletHeaters1QM, name="inletHeaters1QM", curie=NEON.curie('inletHeaters1QM'),
                      model_uri=NEON.inletHeaters1QM, domain=None, range=Optional[float])

slots.inletHeaters2QM = Slot(uri=NEON.inletHeaters2QM, name="inletHeaters2QM", curie=NEON.curie('inletHeaters2QM'),
                      model_uri=NEON.inletHeaters2QM, domain=None, range=Optional[float])

slots.inletHeaters3QM = Slot(uri=NEON.inletHeaters3QM, name="inletHeaters3QM", curie=NEON.curie('inletHeaters3QM'),
                      model_uri=NEON.inletHeaters3QM, domain=None, range=Optional[float])

slots.priorDepthQF = Slot(uri=NEON.priorDepthQF, name="priorDepthQF", curie=NEON.curie('priorDepthQF'),
                      model_uri=NEON.priorDepthQF, domain=None, range=Optional[str])

slots.unstableQF = Slot(uri=NEON.unstableQF, name="unstableQF", curie=NEON.curie('unstableQF'),
                      model_uri=NEON.unstableQF, domain=None, range=Optional[str])

slots.lowDepthQF = Slot(uri=NEON.lowDepthQF, name="lowDepthQF", curie=NEON.curie('lowDepthQF'),
                      model_uri=NEON.lowDepthQF, domain=None, range=Optional[str])

slots.exDeltaQF = Slot(uri=NEON.exDeltaQF, name="exDeltaQF", curie=NEON.curie('exDeltaQF'),
                      model_uri=NEON.exDeltaQF, domain=None, range=Optional[str])

slots.missingWireInfoQF = Slot(uri=NEON.missingWireInfoQF, name="missingWireInfoQF", curie=NEON.curie('missingWireInfoQF'),
                      model_uri=NEON.missingWireInfoQF, domain=None, range=Optional[str])

slots.gaugeNoiseQF = Slot(uri=NEON.gaugeNoiseQF, name="gaugeNoiseQF", curie=NEON.curie('gaugeNoiseQF'),
                      model_uri=NEON.gaugeNoiseQF, domain=None, range=Optional[str])

slots.wireNoiseQF = Slot(uri=NEON.wireNoiseQF, name="wireNoiseQF", curie=NEON.curie('wireNoiseQF'),
                      model_uri=NEON.wireNoiseQF, domain=None, range=Optional[str])

slots.overflowQF = Slot(uri=NEON.overflowQF, name="overflowQF", curie=NEON.curie('overflowQF'),
                      model_uri=NEON.overflowQF, domain=None, range=Optional[str])

slots.heaterErrorQF = Slot(uri=NEON.heaterErrorQF, name="heaterErrorQF", curie=NEON.curie('heaterErrorQF'),
                      model_uri=NEON.heaterErrorQF, domain=None, range=Optional[str])

slots.priPrecipFinalQF = Slot(uri=NEON.priPrecipFinalQF, name="priPrecipFinalQF", curie=NEON.curie('priPrecipFinalQF'),
                      model_uri=NEON.priPrecipFinalQF, domain=None, range=Optional[str])

slots.priPrecipNumPts = Slot(uri=NEON.priPrecipNumPts, name="priPrecipNumPts", curie=NEON.curie('priPrecipNumPts'),
                      model_uri=NEON.priPrecipNumPts, domain=None, range=Optional[float])

slots.profileID = Slot(uri=NEON.profileID, name="profileID", curie=NEON.curie('profileID'),
                      model_uri=NEON.profileID, domain=None, range=Optional[str])

slots.iceThickness = Slot(uri=NEON.iceThickness, name="iceThickness", curie=NEON.curie('iceThickness'),
                      model_uri=NEON.iceThickness, domain=None, range=Optional[float])

slots.thermalStratification = Slot(uri=NEON.thermalStratification, name="thermalStratification", curie=NEON.curie('thermalStratification'),
                      model_uri=NEON.thermalStratification, domain=None, range=Optional[str])

slots.metalimnionDepth = Slot(uri=NEON.metalimnionDepth, name="metalimnionDepth", curie=NEON.curie('metalimnionDepth'),
                      model_uri=NEON.metalimnionDepth, domain=None, range=Optional[str])

slots.secchi1Depth = Slot(uri=NEON.secchi1Depth, name="secchi1Depth", curie=NEON.curie('secchi1Depth'),
                      model_uri=NEON.secchi1Depth, domain=None, range=Optional[float])

slots.secchi2Depth = Slot(uri=NEON.secchi2Depth, name="secchi2Depth", curie=NEON.curie('secchi2Depth'),
                      model_uri=NEON.secchi2Depth, domain=None, range=Optional[float])

slots.clearToBottom = Slot(uri=NEON.clearToBottom, name="clearToBottom", curie=NEON.curie('clearToBottom'),
                      model_uri=NEON.clearToBottom, domain=None, range=Optional[str])

slots.secchiMeanDepth = Slot(uri=NEON.secchiMeanDepth, name="secchiMeanDepth", curie=NEON.curie('secchiMeanDepth'),
                      model_uri=NEON.secchiMeanDepth, domain=None, range=Optional[float])

slots.euphoticDepth = Slot(uri=NEON.euphoticDepth, name="euphoticDepth", curie=NEON.curie('euphoticDepth'),
                      model_uri=NEON.euphoticDepth, domain=None, range=Optional[float])

slots.wetMass = Slot(uri=NEON.wetMass, name="wetMass", curie=NEON.curie('wetMass'),
                      model_uri=NEON.wetMass, domain=None, range=Optional[float])

slots.wetMassSubsample = Slot(uri=NEON.wetMassSubsample, name="wetMassSubsample", curie=NEON.curie('wetMassSubsample'),
                      model_uri=NEON.wetMassSubsample, domain=None, range=Optional[float])

slots.boatID = Slot(uri=NEON.boatID, name="boatID", curie=NEON.curie('boatID'),
                      model_uri=NEON.boatID, domain=None, range=Optional[str])

slots.boatMass = Slot(uri=NEON.boatMass, name="boatMass", curie=NEON.curie('boatMass'),
                      model_uri=NEON.boatMass, domain=None, range=Optional[float])

slots.dryMassBoatMass = Slot(uri=NEON.dryMassBoatMass, name="dryMassBoatMass", curie=NEON.curie('dryMassBoatMass'),
                      model_uri=NEON.dryMassBoatMass, domain=None, range=Optional[float])

slots.ashMassBoatMass = Slot(uri=NEON.ashMassBoatMass, name="ashMassBoatMass", curie=NEON.curie('ashMassBoatMass'),
                      model_uri=NEON.ashMassBoatMass, domain=None, range=Optional[float])

slots.habitatType = Slot(uri=NEON.habitatType, name="habitatType", curie=NEON.curie('habitatType'),
                      model_uri=NEON.habitatType, domain=None, range=Optional[str])

slots.fieldID = Slot(uri=NEON.fieldID, name="fieldID", curie=NEON.curie('fieldID'),
                      model_uri=NEON.fieldID, domain=None, range=Optional[str])

slots.sampleCollected = Slot(uri=NEON.sampleCollected, name="sampleCollected", curie=NEON.curie('sampleCollected'),
                      model_uri=NEON.sampleCollected, domain=None, range=Optional[str])

slots.locationID = Slot(uri=NEON.locationID, name="locationID", curie=NEON.curie('locationID'),
                      model_uri=NEON.locationID, domain=None, range=Optional[str])

slots.locationDry = Slot(uri=NEON.locationDry, name="locationDry", curie=NEON.curie('locationDry'),
                      model_uri=NEON.locationDry, domain=None, range=Optional[str])

slots.aquaticPlantType = Slot(uri=NEON.aquaticPlantType, name="aquaticPlantType", curie=NEON.curie('aquaticPlantType'),
                      model_uri=NEON.aquaticPlantType, domain=None, range=Optional[str])

slots.plantSampleID = Slot(uri=NEON.plantSampleID, name="plantSampleID", curie=NEON.curie('plantSampleID'),
                      model_uri=NEON.plantSampleID, domain=None, range=Optional[str])

slots.macroalgaeSampleID = Slot(uri=NEON.macroalgaeSampleID, name="macroalgaeSampleID", curie=NEON.curie('macroalgaeSampleID'),
                      model_uri=NEON.macroalgaeSampleID, domain=None, range=Optional[str])

slots.qcTaxonomyStatus = Slot(uri=NEON.qcTaxonomyStatus, name="qcTaxonomyStatus", curie=NEON.curie('qcTaxonomyStatus'),
                      model_uri=NEON.qcTaxonomyStatus, domain=None, range=Optional[str])

slots.qcReidentification = Slot(uri=NEON.qcReidentification, name="qcReidentification", curie=NEON.curie('qcReidentification'),
                      model_uri=NEON.qcReidentification, domain=None, range=Optional[str])

slots.algalType = Slot(uri=NEON.algalType, name="algalType", curie=NEON.curie('algalType'),
                      model_uri=NEON.algalType, domain=None, range=Optional[str])

slots.slideID = Slot(uri=NEON.slideID, name="slideID", curie=NEON.curie('slideID'),
                      model_uri=NEON.slideID, domain=None, range=Optional[str])

slots.algalParameter = Slot(uri=NEON.algalParameter, name="algalParameter", curie=NEON.curie('algalParameter'),
                      model_uri=NEON.algalParameter, domain=None, range=Optional[str])

slots.accessionNumber = Slot(uri=NEON.accessionNumber, name="accessionNumber", curie=NEON.curie('accessionNumber'),
                      model_uri=NEON.accessionNumber, domain=None, range=Optional[str])

slots.algalParameterValue = Slot(uri=NEON.algalParameterValue, name="algalParameterValue", curie=NEON.curie('algalParameterValue'),
                      model_uri=NEON.algalParameterValue, domain=None, range=Optional[float])

slots.algalParameterUnit = Slot(uri=NEON.algalParameterUnit, name="algalParameterUnit", curie=NEON.curie('algalParameterUnit'),
                      model_uri=NEON.algalParameterUnit, domain=None, range=Optional[str])

slots.kingdom = Slot(uri=NEON.kingdom, name="kingdom", curie=NEON.curie('kingdom'),
                      model_uri=NEON.kingdom, domain=None, range=Optional[str])

slots.phylum = Slot(uri=NEON.phylum, name="phylum", curie=NEON.curie('phylum'),
                      model_uri=NEON.phylum, domain=None, range=Optional[str])

slots.class = Slot(uri=NEON.class, name="class", curie=NEON.curie('class'),
                      model_uri=NEON.class, domain=None, range=Optional[str])

slots.order = Slot(uri=NEON.order, name="order", curie=NEON.curie('order'),
                      model_uri=NEON.order, domain=None, range=Optional[str])

slots.family = Slot(uri=NEON.family, name="family", curie=NEON.curie('family'),
                      model_uri=NEON.family, domain=None, range=Optional[str])

slots.subfamily = Slot(uri=NEON.subfamily, name="subfamily", curie=NEON.curie('subfamily'),
                      model_uri=NEON.subfamily, domain=None, range=Optional[str])

slots.genus = Slot(uri=NEON.genus, name="genus", curie=NEON.curie('genus'),
                      model_uri=NEON.genus, domain=None, range=Optional[str])

slots.subgenus = Slot(uri=NEON.subgenus, name="subgenus", curie=NEON.curie('subgenus'),
                      model_uri=NEON.subgenus, domain=None, range=Optional[str])

slots.specificEpithet = Slot(uri=NEON.specificEpithet, name="specificEpithet", curie=NEON.curie('specificEpithet'),
                      model_uri=NEON.specificEpithet, domain=None, range=Optional[str])

slots.infraspecificEpithet = Slot(uri=NEON.infraspecificEpithet, name="infraspecificEpithet", curie=NEON.curie('infraspecificEpithet'),
                      model_uri=NEON.infraspecificEpithet, domain=None, range=Optional[str])

slots.tribe = Slot(uri=NEON.tribe, name="tribe", curie=NEON.curie('tribe'),
                      model_uri=NEON.tribe, domain=None, range=Optional[str])

slots.variety = Slot(uri=NEON.variety, name="variety", curie=NEON.curie('variety'),
                      model_uri=NEON.variety, domain=None, range=Optional[str])

slots.taxonomicForm = Slot(uri=NEON.taxonomicForm, name="taxonomicForm", curie=NEON.curie('taxonomicForm'),
                      model_uri=NEON.taxonomicForm, domain=None, range=Optional[str])

slots.authority = Slot(uri=NEON.authority, name="authority", curie=NEON.curie('authority'),
                      model_uri=NEON.authority, domain=None, range=Optional[str])

slots.taxonDatabaseName = Slot(uri=NEON.taxonDatabaseName, name="taxonDatabaseName", curie=NEON.curie('taxonDatabaseName'),
                      model_uri=NEON.taxonDatabaseName, domain=None, range=Optional[str])

slots.taxonDatabaseID = Slot(uri=NEON.taxonDatabaseID, name="taxonDatabaseID", curie=NEON.curie('taxonDatabaseID'),
                      model_uri=NEON.taxonDatabaseID, domain=None, range=Optional[str])

slots.benthicArea = Slot(uri=NEON.benthicArea, name="benthicArea", curie=NEON.curie('benthicArea'),
                      model_uri=NEON.benthicArea, domain=None, range=Optional[float])

slots.samplerType = Slot(uri=NEON.samplerType, name="samplerType", curie=NEON.curie('samplerType'),
                      model_uri=NEON.samplerType, domain=None, range=Optional[str])

slots.storageDays = Slot(uri=NEON.storageDays, name="storageDays", curie=NEON.curie('storageDays'),
                      model_uri=NEON.storageDays, domain=None, range=Optional[float])

slots.adjDryMass = Slot(uri=NEON.adjDryMass, name="adjDryMass", curie=NEON.curie('adjDryMass'),
                      model_uri=NEON.adjDryMass, domain=None, range=Optional[float])

slots.adjAshFreeDryMass = Slot(uri=NEON.adjAshFreeDryMass, name="adjAshFreeDryMass", curie=NEON.curie('adjAshFreeDryMass'),
                      model_uri=NEON.adjAshFreeDryMass, domain=None, range=Optional[float])

slots.arealAdjDryMass = Slot(uri=NEON.arealAdjDryMass, name="arealAdjDryMass", curie=NEON.curie('arealAdjDryMass'),
                      model_uri=NEON.arealAdjDryMass, domain=None, range=Optional[float])

slots.arealAdjAshFreeDryMass = Slot(uri=NEON.arealAdjAshFreeDryMass, name="arealAdjAshFreeDryMass", curie=NEON.curie('arealAdjAshFreeDryMass'),
                      model_uri=NEON.arealAdjAshFreeDryMass, domain=None, range=Optional[float])

slots.wire1StabilityNAQM = Slot(uri=NEON.wire1StabilityNAQM, name="wire1StabilityNAQM", curie=NEON.curie('wire1StabilityNAQM'),
                      model_uri=NEON.wire1StabilityNAQM, domain=None, range=Optional[float])

slots.wire2StabilityNAQM = Slot(uri=NEON.wire2StabilityNAQM, name="wire2StabilityNAQM", curie=NEON.curie('wire2StabilityNAQM'),
                      model_uri=NEON.wire2StabilityNAQM, domain=None, range=Optional[float])

slots.wire3StabilityNAQM = Slot(uri=NEON.wire3StabilityNAQM, name="wire3StabilityNAQM", curie=NEON.curie('wire3StabilityNAQM'),
                      model_uri=NEON.wire3StabilityNAQM, domain=None, range=Optional[float])

slots.inletHeatersNAQM = Slot(uri=NEON.inletHeatersNAQM, name="inletHeatersNAQM", curie=NEON.curie('inletHeatersNAQM'),
                      model_uri=NEON.inletHeatersNAQM, domain=None, range=Optional[float])

slots.tempCellIn = Slot(uri=NEON.tempCellIn, name="tempCellIn", curie=NEON.curie('tempCellIn'),
                      model_uri=NEON.tempCellIn, domain=None, range=Optional[float])

slots.tempCellOut = Slot(uri=NEON.tempCellOut, name="tempCellOut", curie=NEON.curie('tempCellOut'),
                      model_uri=NEON.tempCellOut, domain=None, range=Optional[float])

slots.presAtmBox = Slot(uri=NEON.presAtmBox, name="presAtmBox", curie=NEON.curie('presAtmBox'),
                      model_uri=NEON.presAtmBox, domain=None, range=Optional[float])

slots.presGageCell = Slot(uri=NEON.presGageCell, name="presGageCell", curie=NEON.curie('presGageCell'),
                      model_uri=NEON.presGageCell, domain=None, range=Optional[float])

slots.pwrH2OSamp = Slot(uri=NEON.pwrH2OSamp, name="pwrH2OSamp", curie=NEON.curie('pwrH2OSamp'),
                      model_uri=NEON.pwrH2OSamp, domain=None, range=Optional[float])

slots.pwrH2ORef = Slot(uri=NEON.pwrH2ORef, name="pwrH2ORef", curie=NEON.curie('pwrH2ORef'),
                      model_uri=NEON.pwrH2ORef, domain=None, range=Optional[float])

slots.asrpH2O = Slot(uri=NEON.asrpH2O, name="asrpH2O", curie=NEON.curie('asrpH2O'),
                      model_uri=NEON.asrpH2O, domain=None, range=Optional[float])

slots.rhoMoleH2O = Slot(uri=NEON.rhoMoleH2O, name="rhoMoleH2O", curie=NEON.curie('rhoMoleH2O'),
                      model_uri=NEON.rhoMoleH2O, domain=None, range=Optional[float])

slots.fdMoleH2O = Slot(uri=NEON.fdMoleH2O, name="fdMoleH2O", curie=NEON.curie('fdMoleH2O'),
                      model_uri=NEON.fdMoleH2O, domain=None, range=Optional[float])

slots.pwrCO2Samp = Slot(uri=NEON.pwrCO2Samp, name="pwrCO2Samp", curie=NEON.curie('pwrCO2Samp'),
                      model_uri=NEON.pwrCO2Samp, domain=None, range=Optional[float])

slots.pwrCO2Ref = Slot(uri=NEON.pwrCO2Ref, name="pwrCO2Ref", curie=NEON.curie('pwrCO2Ref'),
                      model_uri=NEON.pwrCO2Ref, domain=None, range=Optional[float])

slots.asrpCO2 = Slot(uri=NEON.asrpCO2, name="asrpCO2", curie=NEON.curie('asrpCO2'),
                      model_uri=NEON.asrpCO2, domain=None, range=Optional[float])

slots.rhoMoleCO2 = Slot(uri=NEON.rhoMoleCO2, name="rhoMoleCO2", curie=NEON.curie('rhoMoleCO2'),
                      model_uri=NEON.rhoMoleCO2, domain=None, range=Optional[float])

slots.fdMoleCO2 = Slot(uri=NEON.fdMoleCO2, name="fdMoleCO2", curie=NEON.curie('fdMoleCO2'),
                      model_uri=NEON.fdMoleCO2, domain=None, range=Optional[float])

slots.diag2 = Slot(uri=NEON.diag2, name="diag2", curie=NEON.curie('diag2'),
                      model_uri=NEON.diag2, domain=None, range=Optional[int])

slots.poteCool = Slot(uri=NEON.poteCool, name="poteCool", curie=NEON.curie('poteCool'),
                      model_uri=NEON.poteCool, domain=None, range=Optional[float])

slots.ssiCO2 = Slot(uri=NEON.ssiCO2, name="ssiCO2", curie=NEON.curie('ssiCO2'),
                      model_uri=NEON.ssiCO2, domain=None, range=Optional[float])

slots.ssiH2O = Slot(uri=NEON.ssiH2O, name="ssiH2O", curie=NEON.curie('ssiH2O'),
                      model_uri=NEON.ssiH2O, domain=None, range=Optional[float])

slots.presGage = Slot(uri=NEON.presGage, name="presGage", curie=NEON.curie('presGage'),
                      model_uri=NEON.presGage, domain=None, range=Optional[float])

slots.qfTrapIn = Slot(uri=NEON.qfTrapIn, name="qfTrapIn", curie=NEON.curie('qfTrapIn'),
                      model_uri=NEON.qfTrapIn, domain=None, range=Optional[int])

slots.qfTrapOut = Slot(uri=NEON.qfTrapOut, name="qfTrapOut", curie=NEON.curie('qfTrapOut'),
                      model_uri=NEON.qfTrapOut, domain=None, range=Optional[int])

slots.qfLeak = Slot(uri=NEON.qfLeak, name="qfLeak", curie=NEON.curie('qfLeak'),
                      model_uri=NEON.qfLeak, domain=None, range=Optional[int])

slots.acceXaxs = Slot(uri=NEON.acceXaxs, name="acceXaxs", curie=NEON.curie('acceXaxs'),
                      model_uri=NEON.acceXaxs, domain=None, range=Optional[float])

slots.acceYaxs = Slot(uri=NEON.acceYaxs, name="acceYaxs", curie=NEON.curie('acceYaxs'),
                      model_uri=NEON.acceYaxs, domain=None, range=Optional[float])

slots.acceZaxs = Slot(uri=NEON.acceZaxs, name="acceZaxs", curie=NEON.curie('acceZaxs'),
                      model_uri=NEON.acceZaxs, domain=None, range=Optional[float])

slots.acceXaxsFree = Slot(uri=NEON.acceXaxsFree, name="acceXaxsFree", curie=NEON.curie('acceXaxsFree'),
                      model_uri=NEON.acceXaxsFree, domain=None, range=Optional[float])

slots.acceYaxsFree = Slot(uri=NEON.acceYaxsFree, name="acceYaxsFree", curie=NEON.curie('acceYaxsFree'),
                      model_uri=NEON.acceYaxsFree, domain=None, range=Optional[float])

slots.acceZaxsFree = Slot(uri=NEON.acceZaxsFree, name="acceZaxsFree", curie=NEON.curie('acceZaxsFree'),
                      model_uri=NEON.acceZaxsFree, domain=None, range=Optional[float])

slots.omegYaxs = Slot(uri=NEON.omegYaxs, name="omegYaxs", curie=NEON.curie('omegYaxs'),
                      model_uri=NEON.omegYaxs, domain=None, range=Optional[float])

slots.omegXaxs = Slot(uri=NEON.omegXaxs, name="omegXaxs", curie=NEON.curie('omegXaxs'),
                      model_uri=NEON.omegXaxs, domain=None, range=Optional[float])

slots.omegZaxs = Slot(uri=NEON.omegZaxs, name="omegZaxs", curie=NEON.curie('omegZaxs'),
                      model_uri=NEON.omegZaxs, domain=None, range=Optional[float])

slots.thetYaxs = Slot(uri=NEON.thetYaxs, name="thetYaxs", curie=NEON.curie('thetYaxs'),
                      model_uri=NEON.thetYaxs, domain=None, range=Optional[float])

slots.thetXaxs = Slot(uri=NEON.thetXaxs, name="thetXaxs", curie=NEON.curie('thetXaxs'),
                      model_uri=NEON.thetXaxs, domain=None, range=Optional[float])

slots.thetZaxs = Slot(uri=NEON.thetZaxs, name="thetZaxs", curie=NEON.curie('thetZaxs'),
                      model_uri=NEON.thetZaxs, domain=None, range=Optional[float])

slots.qfGas1 = Slot(uri=NEON.qfGas1, name="qfGas1", curie=NEON.curie('qfGas1'),
                      model_uri=NEON.qfGas1, domain=None, range=Optional[int])

slots.qfGas2 = Slot(uri=NEON.qfGas2, name="qfGas2", curie=NEON.curie('qfGas2'),
                      model_uri=NEON.qfGas2, domain=None, range=Optional[int])

slots.qfGas3 = Slot(uri=NEON.qfGas3, name="qfGas3", curie=NEON.curie('qfGas3'),
                      model_uri=NEON.qfGas3, domain=None, range=Optional[int])

slots.qfGas4 = Slot(uri=NEON.qfGas4, name="qfGas4", curie=NEON.curie('qfGas4'),
                      model_uri=NEON.qfGas4, domain=None, range=Optional[int])

slots.qfGas5 = Slot(uri=NEON.qfGas5, name="qfGas5", curie=NEON.curie('qfGas5'),
                      model_uri=NEON.qfGas5, domain=None, range=Optional[int])

slots.calQAQCRpt = Slot(uri=NEON.calQAQCRpt, name="calQAQCRpt", curie=NEON.curie('calQAQCRpt'),
                      model_uri=NEON.calQAQCRpt, domain=None, range=Optional[str])

slots.calDefaultQM = Slot(uri=NEON.calDefaultQM, name="calDefaultQM", curie=NEON.curie('calDefaultQM'),
                      model_uri=NEON.calDefaultQM, domain=None, range=Optional[float])

slots.calNEONQM = Slot(uri=NEON.calNEONQM, name="calNEONQM", curie=NEON.curie('calNEONQM'),
                      model_uri=NEON.calNEONQM, domain=None, range=Optional[float])

slots.calNAQM = Slot(uri=NEON.calNAQM, name="calNAQM", curie=NEON.curie('calNAQM'),
                      model_uri=NEON.calNAQM, domain=None, range=Optional[float])

slots.qfHeatSoni = Slot(uri=NEON.qfHeatSoni, name="qfHeatSoni", curie=NEON.curie('qfHeatSoni'),
                      model_uri=NEON.qfHeatSoni, domain=None, range=Optional[int])

slots.qfHeatTube = Slot(uri=NEON.qfHeatTube, name="qfHeatTube", curie=NEON.curie('qfHeatTube'),
                      model_uri=NEON.qfHeatTube, domain=None, range=Optional[int])

slots.qfHeatCap = Slot(uri=NEON.qfHeatCap, name="qfHeatCap", curie=NEON.curie('qfHeatCap'),
                      model_uri=NEON.qfHeatCap, domain=None, range=Optional[int])

slots.qfHeatVali = Slot(uri=NEON.qfHeatVali, name="qfHeatVali", curie=NEON.curie('qfHeatVali'),
                      model_uri=NEON.qfHeatVali, domain=None, range=Optional[int])

slots.diag16 = Slot(uri=NEON.diag16, name="diag16", curie=NEON.curie('diag16'),
                      model_uri=NEON.diag16, domain=None, range=Optional[int])

slots.diag32 = Slot(uri=NEON.diag32, name="diag32", curie=NEON.curie('diag32'),
                      model_uri=NEON.diag32, domain=None, range=Optional[int])

slots.surfWaterTemp = Slot(uri=NEON.surfWaterTemp, name="surfWaterTemp", curie=NEON.curie('surfWaterTemp'),
                      model_uri=NEON.surfWaterTemp, domain=None, range=Optional[float])

slots.surfWaterTempExpUncert = Slot(uri=NEON.surfWaterTempExpUncert, name="surfWaterTempExpUncert", curie=NEON.curie('surfWaterTempExpUncert'),
                      model_uri=NEON.surfWaterTempExpUncert, domain=None, range=Optional[float])

slots.surfWaterTempRangeQF = Slot(uri=NEON.surfWaterTempRangeQF, name="surfWaterTempRangeQF", curie=NEON.curie('surfWaterTempRangeQF'),
                      model_uri=NEON.surfWaterTempRangeQF, domain=None, range=Optional[int])

slots.surfWaterTempPersistenceQF = Slot(uri=NEON.surfWaterTempPersistenceQF, name="surfWaterTempPersistenceQF", curie=NEON.curie('surfWaterTempPersistenceQF'),
                      model_uri=NEON.surfWaterTempPersistenceQF, domain=None, range=Optional[int])

slots.surfWaterTempStepQF = Slot(uri=NEON.surfWaterTempStepQF, name="surfWaterTempStepQF", curie=NEON.curie('surfWaterTempStepQF'),
                      model_uri=NEON.surfWaterTempStepQF, domain=None, range=Optional[int])

slots.surfWaterTempNullQF = Slot(uri=NEON.surfWaterTempNullQF, name="surfWaterTempNullQF", curie=NEON.curie('surfWaterTempNullQF'),
                      model_uri=NEON.surfWaterTempNullQF, domain=None, range=Optional[int])

slots.surfWaterTempGapQF = Slot(uri=NEON.surfWaterTempGapQF, name="surfWaterTempGapQF", curie=NEON.curie('surfWaterTempGapQF'),
                      model_uri=NEON.surfWaterTempGapQF, domain=None, range=Optional[int])

slots.surfWaterTempConsistencyQF = Slot(uri=NEON.surfWaterTempConsistencyQF, name="surfWaterTempConsistencyQF", curie=NEON.curie('surfWaterTempConsistencyQF'),
                      model_uri=NEON.surfWaterTempConsistencyQF, domain=None, range=Optional[int])

slots.surfWaterTempSpikeQF = Slot(uri=NEON.surfWaterTempSpikeQF, name="surfWaterTempSpikeQF", curie=NEON.curie('surfWaterTempSpikeQF'),
                      model_uri=NEON.surfWaterTempSpikeQF, domain=None, range=Optional[int])

slots.surfWaterTempMean = Slot(uri=NEON.surfWaterTempMean, name="surfWaterTempMean", curie=NEON.curie('surfWaterTempMean'),
                      model_uri=NEON.surfWaterTempMean, domain=None, range=Optional[float])

slots.surfWaterTempMinimum = Slot(uri=NEON.surfWaterTempMinimum, name="surfWaterTempMinimum", curie=NEON.curie('surfWaterTempMinimum'),
                      model_uri=NEON.surfWaterTempMinimum, domain=None, range=Optional[float])

slots.surfWaterTempMaximum = Slot(uri=NEON.surfWaterTempMaximum, name="surfWaterTempMaximum", curie=NEON.curie('surfWaterTempMaximum'),
                      model_uri=NEON.surfWaterTempMaximum, domain=None, range=Optional[float])

slots.surfWaterTempVariance = Slot(uri=NEON.surfWaterTempVariance, name="surfWaterTempVariance", curie=NEON.curie('surfWaterTempVariance'),
                      model_uri=NEON.surfWaterTempVariance, domain=None, range=Optional[float])

slots.surfWaterTempNumPts = Slot(uri=NEON.surfWaterTempNumPts, name="surfWaterTempNumPts", curie=NEON.curie('surfWaterTempNumPts'),
                      model_uri=NEON.surfWaterTempNumPts, domain=None, range=Optional[float])

slots.surfWaterTempStdErMean = Slot(uri=NEON.surfWaterTempStdErMean, name="surfWaterTempStdErMean", curie=NEON.curie('surfWaterTempStdErMean'),
                      model_uri=NEON.surfWaterTempStdErMean, domain=None, range=Optional[float])

slots.rawNitrateSingleCompressedStream = Slot(uri=NEON.rawNitrateSingleCompressedStream, name="rawNitrateSingleCompressedStream", curie=NEON.curie('rawNitrateSingleCompressedStream'),
                      model_uri=NEON.rawNitrateSingleCompressedStream, domain=None, range=Optional[str])

slots.parentSampleID = Slot(uri=NEON.parentSampleID, name="parentSampleID", curie=NEON.curie('parentSampleID'),
                      model_uri=NEON.parentSampleID, domain=None, range=Optional[str])

slots.lakeWaterTemp1 = Slot(uri=NEON.lakeWaterTemp1, name="lakeWaterTemp1", curie=NEON.curie('lakeWaterTemp1'),
                      model_uri=NEON.lakeWaterTemp1, domain=None, range=Optional[float])

slots.lakeWaterTemp2 = Slot(uri=NEON.lakeWaterTemp2, name="lakeWaterTemp2", curie=NEON.curie('lakeWaterTemp2'),
                      model_uri=NEON.lakeWaterTemp2, domain=None, range=Optional[float])

slots.lakeSampleDepth1 = Slot(uri=NEON.lakeSampleDepth1, name="lakeSampleDepth1", curie=NEON.curie('lakeSampleDepth1'),
                      model_uri=NEON.lakeSampleDepth1, domain=None, range=Optional[float])

slots.lakeSampleDepth2 = Slot(uri=NEON.lakeSampleDepth2, name="lakeSampleDepth2", curie=NEON.curie('lakeSampleDepth2'),
                      model_uri=NEON.lakeSampleDepth2, domain=None, range=Optional[float])

slots.equilibratedAirSampleID = Slot(uri=NEON.equilibratedAirSampleID, name="equilibratedAirSampleID", curie=NEON.curie('equilibratedAirSampleID'),
                      model_uri=NEON.equilibratedAirSampleID, domain=None, range=Optional[str])

slots.referenceAirSampleID = Slot(uri=NEON.referenceAirSampleID, name="referenceAirSampleID", curie=NEON.curie('referenceAirSampleID'),
                      model_uri=NEON.referenceAirSampleID, domain=None, range=Optional[str])

slots.storageWaterTemp = Slot(uri=NEON.storageWaterTemp, name="storageWaterTemp", curie=NEON.curie('storageWaterTemp'),
                      model_uri=NEON.storageWaterTemp, domain=None, range=Optional[float])

slots.ptBarometricPressure = Slot(uri=NEON.ptBarometricPressure, name="ptBarometricPressure", curie=NEON.curie('ptBarometricPressure'),
                      model_uri=NEON.ptBarometricPressure, domain=None, range=Optional[float])

slots.waterVolumeSyringe = Slot(uri=NEON.waterVolumeSyringe, name="waterVolumeSyringe", curie=NEON.curie('waterVolumeSyringe'),
                      model_uri=NEON.waterVolumeSyringe, domain=None, range=Optional[float])

slots.gasVolumeSyringe = Slot(uri=NEON.gasVolumeSyringe, name="gasVolumeSyringe", curie=NEON.curie('gasVolumeSyringe'),
                      model_uri=NEON.gasVolumeSyringe, domain=None, range=Optional[float])

slots.airVolumeSample = Slot(uri=NEON.airVolumeSample, name="airVolumeSample", curie=NEON.curie('airVolumeSample'),
                      model_uri=NEON.airVolumeSample, domain=None, range=Optional[float])

slots.gasVolumeSample = Slot(uri=NEON.gasVolumeSample, name="gasVolumeSample", curie=NEON.curie('gasVolumeSample'),
                      model_uri=NEON.gasVolumeSample, domain=None, range=Optional[float])

slots.analysisDate = Slot(uri=NEON.analysisDate, name="analysisDate", curie=NEON.curie('analysisDate'),
                      model_uri=NEON.analysisDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.internalSampleName = Slot(uri=NEON.internalSampleName, name="internalSampleName", curie=NEON.curie('internalSampleName'),
                      model_uri=NEON.internalSampleName, domain=None, range=Optional[str])

slots.internalLabFileName = Slot(uri=NEON.internalLabFileName, name="internalLabFileName", curie=NEON.curie('internalLabFileName'),
                      model_uri=NEON.internalLabFileName, domain=None, range=Optional[str])

slots.concentrationCH4 = Slot(uri=NEON.concentrationCH4, name="concentrationCH4", curie=NEON.curie('concentrationCH4'),
                      model_uri=NEON.concentrationCH4, domain=None, range=Optional[float])

slots.concentrationCO2 = Slot(uri=NEON.concentrationCO2, name="concentrationCO2", curie=NEON.curie('concentrationCO2'),
                      model_uri=NEON.concentrationCO2, domain=None, range=Optional[float])

slots.concentrationN2O = Slot(uri=NEON.concentrationN2O, name="concentrationN2O", curie=NEON.curie('concentrationN2O'),
                      model_uri=NEON.concentrationN2O, domain=None, range=Optional[float])

slots.volumeGasAnalyzed = Slot(uri=NEON.volumeGasAnalyzed, name="volumeGasAnalyzed", curie=NEON.curie('volumeGasAnalyzed'),
                      model_uri=NEON.volumeGasAnalyzed, domain=None, range=Optional[float])

slots.CH4RT = Slot(uri=NEON.CH4RT, name="CH4RT", curie=NEON.curie('CH4RT'),
                      model_uri=NEON.CH4RT, domain=None, range=Optional[float])

slots.CH4Area = Slot(uri=NEON.CH4Area, name="CH4Area", curie=NEON.curie('CH4Area'),
                      model_uri=NEON.CH4Area, domain=None, range=Optional[float])

slots.CH4Height = Slot(uri=NEON.CH4Height, name="CH4Height", curie=NEON.curie('CH4Height'),
                      model_uri=NEON.CH4Height, domain=None, range=Optional[float])

slots.CH4Amount = Slot(uri=NEON.CH4Amount, name="CH4Amount", curie=NEON.curie('CH4Amount'),
                      model_uri=NEON.CH4Amount, domain=None, range=Optional[float])

slots.CO2RT = Slot(uri=NEON.CO2RT, name="CO2RT", curie=NEON.curie('CO2RT'),
                      model_uri=NEON.CO2RT, domain=None, range=Optional[float])

slots.CO2Area = Slot(uri=NEON.CO2Area, name="CO2Area", curie=NEON.curie('CO2Area'),
                      model_uri=NEON.CO2Area, domain=None, range=Optional[float])

slots.CO2Height = Slot(uri=NEON.CO2Height, name="CO2Height", curie=NEON.curie('CO2Height'),
                      model_uri=NEON.CO2Height, domain=None, range=Optional[float])

slots.CO2Amount = Slot(uri=NEON.CO2Amount, name="CO2Amount", curie=NEON.curie('CO2Amount'),
                      model_uri=NEON.CO2Amount, domain=None, range=Optional[float])

slots.N2ORT = Slot(uri=NEON.N2ORT, name="N2ORT", curie=NEON.curie('N2ORT'),
                      model_uri=NEON.N2ORT, domain=None, range=Optional[float])

slots.N2OArea = Slot(uri=NEON.N2OArea, name="N2OArea", curie=NEON.curie('N2OArea'),
                      model_uri=NEON.N2OArea, domain=None, range=Optional[float])

slots.N2OHeight = Slot(uri=NEON.N2OHeight, name="N2OHeight", curie=NEON.curie('N2OHeight'),
                      model_uri=NEON.N2OHeight, domain=None, range=Optional[float])

slots.N2OAmount = Slot(uri=NEON.N2OAmount, name="N2OAmount", curie=NEON.curie('N2OAmount'),
                      model_uri=NEON.N2OAmount, domain=None, range=Optional[float])

slots.runDetectionLimitCH4 = Slot(uri=NEON.runDetectionLimitCH4, name="runDetectionLimitCH4", curie=NEON.curie('runDetectionLimitCH4'),
                      model_uri=NEON.runDetectionLimitCH4, domain=None, range=Optional[float])

slots.runDetectionLimitCO2 = Slot(uri=NEON.runDetectionLimitCO2, name="runDetectionLimitCO2", curie=NEON.curie('runDetectionLimitCO2'),
                      model_uri=NEON.runDetectionLimitCO2, domain=None, range=Optional[float])

slots.runDetectionLimitN2O = Slot(uri=NEON.runDetectionLimitN2O, name="runDetectionLimitN2O", curie=NEON.curie('runDetectionLimitN2O'),
                      model_uri=NEON.runDetectionLimitN2O, domain=None, range=Optional[float])

slots.precisionCH4 = Slot(uri=NEON.precisionCH4, name="precisionCH4", curie=NEON.curie('precisionCH4'),
                      model_uri=NEON.precisionCH4, domain=None, range=Optional[float])

slots.precisionCO2 = Slot(uri=NEON.precisionCO2, name="precisionCO2", curie=NEON.curie('precisionCO2'),
                      model_uri=NEON.precisionCO2, domain=None, range=Optional[float])

slots.precisionN2O = Slot(uri=NEON.precisionN2O, name="precisionN2O", curie=NEON.curie('precisionN2O'),
                      model_uri=NEON.precisionN2O, domain=None, range=Optional[float])

slots.gasStandardAccuracy = Slot(uri=NEON.gasStandardAccuracy, name="gasStandardAccuracy", curie=NEON.curie('gasStandardAccuracy'),
                      model_uri=NEON.gasStandardAccuracy, domain=None, range=Optional[float])

slots.methodCH4 = Slot(uri=NEON.methodCH4, name="methodCH4", curie=NEON.curie('methodCH4'),
                      model_uri=NEON.methodCH4, domain=None, range=Optional[str])

slots.methodDetectionLimitCH4 = Slot(uri=NEON.methodDetectionLimitCH4, name="methodDetectionLimitCH4", curie=NEON.curie('methodDetectionLimitCH4'),
                      model_uri=NEON.methodDetectionLimitCH4, domain=None, range=Optional[float])

slots.methodCO2 = Slot(uri=NEON.methodCO2, name="methodCO2", curie=NEON.curie('methodCO2'),
                      model_uri=NEON.methodCO2, domain=None, range=Optional[str])

slots.methodDetectionLimitCO2 = Slot(uri=NEON.methodDetectionLimitCO2, name="methodDetectionLimitCO2", curie=NEON.curie('methodDetectionLimitCO2'),
                      model_uri=NEON.methodDetectionLimitCO2, domain=None, range=Optional[float])

slots.methodN2O = Slot(uri=NEON.methodN2O, name="methodN2O", curie=NEON.curie('methodN2O'),
                      model_uri=NEON.methodN2O, domain=None, range=Optional[str])

slots.methodDetectionLimitN2O = Slot(uri=NEON.methodDetectionLimitN2O, name="methodDetectionLimitN2O", curie=NEON.curie('methodDetectionLimitN2O'),
                      model_uri=NEON.methodDetectionLimitN2O, domain=None, range=Optional[float])

slots.internalLabQAQC = Slot(uri=NEON.internalLabQAQC, name="internalLabQAQC", curie=NEON.curie('internalLabQAQC'),
                      model_uri=NEON.internalLabQAQC, domain=None, range=Optional[str])

slots.instrumentCH4N2O = Slot(uri=NEON.instrumentCH4N2O, name="instrumentCH4N2O", curie=NEON.curie('instrumentCH4N2O'),
                      model_uri=NEON.instrumentCH4N2O, domain=None, range=Optional[str])

slots.instrumentCO2 = Slot(uri=NEON.instrumentCO2, name="instrumentCO2", curie=NEON.curie('instrumentCO2'),
                      model_uri=NEON.instrumentCO2, domain=None, range=Optional[str])

slots.changeLog = Slot(uri=NEON.changeLog, name="changeLog", curie=NEON.curie('changeLog'),
                      model_uri=NEON.changeLog, domain=None, range=Optional[str])

slots.analyzedBy = Slot(uri=NEON.analyzedBy, name="analyzedBy", curie=NEON.curie('analyzedBy'),
                      model_uri=NEON.analyzedBy, domain=None, range=Optional[str])

slots.dissolvedCH4 = Slot(uri=NEON.dissolvedCH4, name="dissolvedCH4", curie=NEON.curie('dissolvedCH4'),
                      model_uri=NEON.dissolvedCH4, domain=None, range=Optional[float])

slots.dissolvedCO2 = Slot(uri=NEON.dissolvedCO2, name="dissolvedCO2", curie=NEON.curie('dissolvedCO2'),
                      model_uri=NEON.dissolvedCO2, domain=None, range=Optional[float])

slots.dissolvedN2O = Slot(uri=NEON.dissolvedN2O, name="dissolvedN2O", curie=NEON.curie('dissolvedN2O'),
                      model_uri=NEON.dissolvedN2O, domain=None, range=Optional[float])

slots.rawWaterCO2 = Slot(uri=NEON.rawWaterCO2, name="rawWaterCO2", curie=NEON.curie('rawWaterCO2'),
                      model_uri=NEON.rawWaterCO2, domain=None, range=Optional[float])

slots.rawWaterCH4 = Slot(uri=NEON.rawWaterCH4, name="rawWaterCH4", curie=NEON.curie('rawWaterCH4'),
                      model_uri=NEON.rawWaterCH4, domain=None, range=Optional[float])

slots.rawWaterN2O = Slot(uri=NEON.rawWaterN2O, name="rawWaterN2O", curie=NEON.curie('rawWaterN2O'),
                      model_uri=NEON.rawWaterN2O, domain=None, range=Optional[float])

slots.rawAirCO2 = Slot(uri=NEON.rawAirCO2, name="rawAirCO2", curie=NEON.curie('rawAirCO2'),
                      model_uri=NEON.rawAirCO2, domain=None, range=Optional[float])

slots.rawAirCH4 = Slot(uri=NEON.rawAirCH4, name="rawAirCH4", curie=NEON.curie('rawAirCH4'),
                      model_uri=NEON.rawAirCH4, domain=None, range=Optional[float])

slots.rawAirN2O = Slot(uri=NEON.rawAirN2O, name="rawAirN2O", curie=NEON.curie('rawAirN2O'),
                      model_uri=NEON.rawAirN2O, domain=None, range=Optional[float])

slots.volumeRatioAssumedQF = Slot(uri=NEON.volumeRatioAssumedQF, name="volumeRatioAssumedQF", curie=NEON.curie('volumeRatioAssumedQF'),
                      model_uri=NEON.volumeRatioAssumedQF, domain=None, range=Optional[int])

slots.lowGasVolumeQF = Slot(uri=NEON.lowGasVolumeQF, name="lowGasVolumeQF", curie=NEON.curie('lowGasVolumeQF'),
                      model_uri=NEON.lowGasVolumeQF, domain=None, range=Optional[int])

slots.lowAirVolumeQF = Slot(uri=NEON.lowAirVolumeQF, name="lowAirVolumeQF", curie=NEON.curie('lowAirVolumeQF'),
                      model_uri=NEON.lowAirVolumeQF, domain=None, range=Optional[int])

slots.sdgDuplicateRecordGroupQF = Slot(uri=NEON.sdgDuplicateRecordGroupQF, name="sdgDuplicateRecordGroupQF", curie=NEON.curie('sdgDuplicateRecordGroupQF'),
                      model_uri=NEON.sdgDuplicateRecordGroupQF, domain=None, range=Optional[str])

slots.instStat = Slot(uri=NEON.instStat, name="instStat", curie=NEON.curie('instStat'),
                      model_uri=NEON.instStat, domain=None, range=Optional[int])

slots.presCavi = Slot(uri=NEON.presCavi, name="presCavi", curie=NEON.curie('presCavi'),
                      model_uri=NEON.presCavi, domain=None, range=Optional[float])

slots.tempCavi = Slot(uri=NEON.tempCavi, name="tempCavi", curie=NEON.curie('tempCavi'),
                      model_uri=NEON.tempCavi, domain=None, range=Optional[float])

slots.tempDas = Slot(uri=NEON.tempDas, name="tempDas", curie=NEON.curie('tempDas'),
                      model_uri=NEON.tempDas, domain=None, range=Optional[float])

slots.tempEtal = Slot(uri=NEON.tempEtal, name="tempEtal", curie=NEON.curie('tempEtal'),
                      model_uri=NEON.tempEtal, domain=None, range=Optional[float])

slots.tempWarmBox = Slot(uri=NEON.tempWarmBox, name="tempWarmBox", curie=NEON.curie('tempWarmBox'),
                      model_uri=NEON.tempWarmBox, domain=None, range=Optional[float])

slots.posiMPV = Slot(uri=NEON.posiMPV, name="posiMPV", curie=NEON.curie('posiMPV'),
                      model_uri=NEON.posiMPV, domain=None, range=Optional[float])

slots.valvOutl = Slot(uri=NEON.valvOutl, name="valvOutl", curie=NEON.curie('valvOutl'),
                      model_uri=NEON.valvOutl, domain=None, range=Optional[float])

slots.valvSol = Slot(uri=NEON.valvSol, name="valvSol", curie=NEON.curie('valvSol'),
                      model_uri=NEON.valvSol, domain=None, range=Optional[float])

slots.specID = Slot(uri=NEON.specID, name="specID", curie=NEON.curie('specID'),
                      model_uri=NEON.specID, domain=None, range=Optional[float])

slots.fwMoleCO2 = Slot(uri=NEON.fwMoleCO2, name="fwMoleCO2", curie=NEON.curie('fwMoleCO2'),
                      model_uri=NEON.fwMoleCO2, domain=None, range=Optional[float])

slots.fwMole12CO2 = Slot(uri=NEON.fwMole12CO2, name="fwMole12CO2", curie=NEON.curie('fwMole12CO2'),
                      model_uri=NEON.fwMole12CO2, domain=None, range=Optional[float])

slots.fdMole12CO2 = Slot(uri=NEON.fdMole12CO2, name="fdMole12CO2", curie=NEON.curie('fdMole12CO2'),
                      model_uri=NEON.fdMole12CO2, domain=None, range=Optional[float])

slots.fwMole13CO2 = Slot(uri=NEON.fwMole13CO2, name="fwMole13CO2", curie=NEON.curie('fwMole13CO2'),
                      model_uri=NEON.fwMole13CO2, domain=None, range=Optional[float])

slots.fdMole13CO2 = Slot(uri=NEON.fdMole13CO2, name="fdMole13CO2", curie=NEON.curie('fdMole13CO2'),
                      model_uri=NEON.fdMole13CO2, domain=None, range=Optional[float])

slots.2Mind13CO2 = Slot(uri=NEON['2Mind13CO2'], name="2Mind13CO2", curie=NEON.curie('2Mind13CO2'),
                      model_uri=NEON['2Mind13CO2'], domain=None, range=Optional[float])

slots.30Secd13CO2 = Slot(uri=NEON['30Secd13CO2'], name="30Secd13CO2", curie=NEON.curie('30Secd13CO2'),
                      model_uri=NEON['30Secd13CO2'], domain=None, range=Optional[float])

slots.5Mind13CO2 = Slot(uri=NEON['5Mind13CO2'], name="5Mind13CO2", curie=NEON.curie('5Mind13CO2'),
                      model_uri=NEON['5Mind13CO2'], domain=None, range=Optional[float])

slots.d13CO2 = Slot(uri=NEON.d13CO2, name="d13CO2", curie=NEON.curie('d13CO2'),
                      model_uri=NEON.d13CO2, domain=None, range=Optional[float])

slots.percentFwMoleH2O = Slot(uri=NEON.percentFwMoleH2O, name="percentFwMoleH2O", curie=NEON.curie('percentFwMoleH2O'),
                      model_uri=NEON.percentFwMoleH2O, domain=None, range=Optional[float])

slots.2MinCO2IsoRatio = Slot(uri=NEON['2MinCO2IsoRatio'], name="2MinCO2IsoRatio", curie=NEON.curie('2MinCO2IsoRatio'),
                      model_uri=NEON['2MinCO2IsoRatio'], domain=None, range=Optional[float])

slots.30SecCO2IsoRatio = Slot(uri=NEON['30SecCO2IsoRatio'], name="30SecCO2IsoRatio", curie=NEON.curie('30SecCO2IsoRatio'),
                      model_uri=NEON['30SecCO2IsoRatio'], domain=None, range=Optional[float])

slots.5MinCO2IsoRatio = Slot(uri=NEON['5MinCO2IsoRatio'], name="5MinCO2IsoRatio", curie=NEON.curie('5MinCO2IsoRatio'),
                      model_uri=NEON['5MinCO2IsoRatio'], domain=None, range=Optional[float])

slots.CO2IsoRatio = Slot(uri=NEON.CO2IsoRatio, name="CO2IsoRatio", curie=NEON.curie('CO2IsoRatio'),
                      model_uri=NEON.CO2IsoRatio, domain=None, range=Optional[float])

slots.fwMoleCH4 = Slot(uri=NEON.fwMoleCH4, name="fwMoleCH4", curie=NEON.curie('fwMoleCH4'),
                      model_uri=NEON.fwMoleCH4, domain=None, range=Optional[float])

slots.fdMoleCH4 = Slot(uri=NEON.fdMoleCH4, name="fdMoleCH4", curie=NEON.curie('fdMoleCH4'),
                      model_uri=NEON.fdMoleCH4, domain=None, range=Optional[float])

slots.fwMoleHPCH4 = Slot(uri=NEON.fwMoleHPCH4, name="fwMoleHPCH4", curie=NEON.curie('fwMoleHPCH4'),
                      model_uri=NEON.fwMoleHPCH4, domain=None, range=Optional[float])

slots.fdMoleHPCH4 = Slot(uri=NEON.fdMoleHPCH4, name="fdMoleHPCH4", curie=NEON.curie('fdMoleHPCH4'),
                      model_uri=NEON.fdMoleHPCH4, domain=None, range=Optional[float])

slots.peakHeigH2O = Slot(uri=NEON.peakHeigH2O, name="peakHeigH2O", curie=NEON.curie('peakHeigH2O'),
                      model_uri=NEON.peakHeigH2O, domain=None, range=Optional[float])

slots.spliFitCH4 = Slot(uri=NEON.spliFitCH4, name="spliFitCH4", curie=NEON.curie('spliFitCH4'),
                      model_uri=NEON.spliFitCH4, domain=None, range=Optional[float])

slots.peakHeig12C = Slot(uri=NEON.peakHeig12C, name="peakHeig12C", curie=NEON.curie('peakHeig12C'),
                      model_uri=NEON.peakHeig12C, domain=None, range=Optional[float])

slots.peakHeig13C = Slot(uri=NEON.peakHeig13C, name="peakHeig13C", curie=NEON.curie('peakHeig13C'),
                      model_uri=NEON.peakHeig13C, domain=None, range=Optional[float])

slots.valvMask = Slot(uri=NEON.valvMask, name="valvMask", curie=NEON.curie('valvMask'),
                      model_uri=NEON.valvMask, domain=None, range=Optional[float])

slots.ppmvFwMoleH2O = Slot(uri=NEON.ppmvFwMoleH2O, name="ppmvFwMoleH2O", curie=NEON.curie('ppmvFwMoleH2O'),
                      model_uri=NEON.ppmvFwMoleH2O, domain=None, range=Optional[float])

slots.N2Flag = Slot(uri=NEON.N2Flag, name="N2Flag", curie=NEON.curie('N2Flag'),
                      model_uri=NEON.N2Flag, domain=None, range=Optional[float])

slots.baseShift = Slot(uri=NEON.baseShift, name="baseShift", curie=NEON.curie('baseShift'),
                      model_uri=NEON.baseShift, domain=None, range=Optional[float])

slots.slopShift = Slot(uri=NEON.slopShift, name="slopShift", curie=NEON.curie('slopShift'),
                      model_uri=NEON.slopShift, domain=None, range=Optional[float])

slots.resiRMS = Slot(uri=NEON.resiRMS, name="resiRMS", curie=NEON.curie('resiRMS'),
                      model_uri=NEON.resiRMS, domain=None, range=Optional[float])

slots.tempHut = Slot(uri=NEON.tempHut, name="tempHut", curie=NEON.curie('tempHut'),
                      model_uri=NEON.tempHut, domain=None, range=Optional[float])

slots.RHHut = Slot(uri=NEON.RHHut, name="RHHut", curie=NEON.curie('RHHut'),
                      model_uri=NEON.RHHut, domain=None, range=Optional[float])

slots.baroPresHut = Slot(uri=NEON.baroPresHut, name="baroPresHut", curie=NEON.curie('baroPresHut'),
                      model_uri=NEON.baroPresHut, domain=None, range=Optional[float])

slots.H2OMixRatioHut = Slot(uri=NEON.H2OMixRatioHut, name="H2OMixRatioHut", curie=NEON.curie('H2OMixRatioHut'),
                      model_uri=NEON.H2OMixRatioHut, domain=None, range=Optional[float])

slots.fwMoleH2O = Slot(uri=NEON.fwMoleH2O, name="fwMoleH2O", curie=NEON.curie('fwMoleH2O'),
                      model_uri=NEON.fwMoleH2O, domain=None, range=Optional[float])

slots.tempCell = Slot(uri=NEON.tempCell, name="tempCell", curie=NEON.curie('tempCell'),
                      model_uri=NEON.tempCell, domain=None, range=Optional[float])

slots.presCell = Slot(uri=NEON.presCell, name="presCell", curie=NEON.curie('presCell'),
                      model_uri=NEON.presCell, domain=None, range=Optional[float])

slots.pumpVoltage = Slot(uri=NEON.pumpVoltage, name="pumpVoltage", curie=NEON.curie('pumpVoltage'),
                      model_uri=NEON.pumpVoltage, domain=None, range=Optional[float])

slots.valvStat1 = Slot(uri=NEON.valvStat1, name="valvStat1", curie=NEON.curie('valvStat1'),
                      model_uri=NEON.valvStat1, domain=None, range=Optional[int])

slots.valvStat2 = Slot(uri=NEON.valvStat2, name="valvStat2", curie=NEON.curie('valvStat2'),
                      model_uri=NEON.valvStat2, domain=None, range=Optional[int])

slots.valvStat3 = Slot(uri=NEON.valvStat3, name="valvStat3", curie=NEON.curie('valvStat3'),
                      model_uri=NEON.valvStat3, domain=None, range=Optional[int])

slots.valvStat4 = Slot(uri=NEON.valvStat4, name="valvStat4", curie=NEON.curie('valvStat4'),
                      model_uri=NEON.valvStat4, domain=None, range=Optional[int])

slots.valvStat5 = Slot(uri=NEON.valvStat5, name="valvStat5", curie=NEON.curie('valvStat5'),
                      model_uri=NEON.valvStat5, domain=None, range=Optional[int])

slots.valvStat6 = Slot(uri=NEON.valvStat6, name="valvStat6", curie=NEON.curie('valvStat6'),
                      model_uri=NEON.valvStat6, domain=None, range=Optional[int])

slots.valvStat7 = Slot(uri=NEON.valvStat7, name="valvStat7", curie=NEON.curie('valvStat7'),
                      model_uri=NEON.valvStat7, domain=None, range=Optional[int])

slots.valvStat8 = Slot(uri=NEON.valvStat8, name="valvStat8", curie=NEON.curie('valvStat8'),
                      model_uri=NEON.valvStat8, domain=None, range=Optional[int])

slots.valvCmd1 = Slot(uri=NEON.valvCmd1, name="valvCmd1", curie=NEON.curie('valvCmd1'),
                      model_uri=NEON.valvCmd1, domain=None, range=Optional[int])

slots.valvCmd2 = Slot(uri=NEON.valvCmd2, name="valvCmd2", curie=NEON.curie('valvCmd2'),
                      model_uri=NEON.valvCmd2, domain=None, range=Optional[int])

slots.valvCmd3 = Slot(uri=NEON.valvCmd3, name="valvCmd3", curie=NEON.curie('valvCmd3'),
                      model_uri=NEON.valvCmd3, domain=None, range=Optional[int])

slots.valvCmd4 = Slot(uri=NEON.valvCmd4, name="valvCmd4", curie=NEON.curie('valvCmd4'),
                      model_uri=NEON.valvCmd4, domain=None, range=Optional[int])

slots.valvCmd5 = Slot(uri=NEON.valvCmd5, name="valvCmd5", curie=NEON.curie('valvCmd5'),
                      model_uri=NEON.valvCmd5, domain=None, range=Optional[int])

slots.valvCmd6 = Slot(uri=NEON.valvCmd6, name="valvCmd6", curie=NEON.curie('valvCmd6'),
                      model_uri=NEON.valvCmd6, domain=None, range=Optional[int])

slots.valvCmd7 = Slot(uri=NEON.valvCmd7, name="valvCmd7", curie=NEON.curie('valvCmd7'),
                      model_uri=NEON.valvCmd7, domain=None, range=Optional[int])

slots.valvCmd8 = Slot(uri=NEON.valvCmd8, name="valvCmd8", curie=NEON.curie('valvCmd8'),
                      model_uri=NEON.valvCmd8, domain=None, range=Optional[int])

slots.d18OWater = Slot(uri=NEON.d18OWater, name="d18OWater", curie=NEON.curie('d18OWater'),
                      model_uri=NEON.d18OWater, domain=None, range=Optional[float])

slots.d2HWater = Slot(uri=NEON.d2HWater, name="d2HWater", curie=NEON.curie('d2HWater'),
                      model_uri=NEON.d2HWater, domain=None, range=Optional[float])

slots.sdgSamplingProtocolVersion = Slot(uri=NEON.sdgSamplingProtocolVersion, name="sdgSamplingProtocolVersion", curie=NEON.curie('sdgSamplingProtocolVersion'),
                      model_uri=NEON.sdgSamplingProtocolVersion, domain=None, range=Optional[str])

slots.asiSamplingProtocolVersion = Slot(uri=NEON.asiSamplingProtocolVersion, name="asiSamplingProtocolVersion", curie=NEON.curie('asiSamplingProtocolVersion'),
                      model_uri=NEON.asiSamplingProtocolVersion, domain=None, range=Optional[str])

slots.H2OIsotopeSampleCollected = Slot(uri=NEON.H2OIsotopeSampleCollected, name="H2OIsotopeSampleCollected", curie=NEON.curie('H2OIsotopeSampleCollected'),
                      model_uri=NEON.H2OIsotopeSampleCollected, domain=None, range=Optional[str])

slots.processedDateH2OIsotopes = Slot(uri=NEON.processedDateH2OIsotopes, name="processedDateH2OIsotopes", curie=NEON.curie('processedDateH2OIsotopes'),
                      model_uri=NEON.processedDateH2OIsotopes, domain=None, range=Optional[Union[str, XSDTime]])

slots.processedDateFilters = Slot(uri=NEON.processedDateFilters, name="processedDateFilters", curie=NEON.curie('processedDateFilters'),
                      model_uri=NEON.processedDateFilters, domain=None, range=Optional[Union[str, XSDTime]])

slots.sampleVolumeFilteredPOMRep1 = Slot(uri=NEON.sampleVolumeFilteredPOMRep1, name="sampleVolumeFilteredPOMRep1", curie=NEON.curie('sampleVolumeFilteredPOMRep1'),
                      model_uri=NEON.sampleVolumeFilteredPOMRep1, domain=None, range=Optional[float])

slots.sampleVolumeFilteredPOMRep2 = Slot(uri=NEON.sampleVolumeFilteredPOMRep2, name="sampleVolumeFilteredPOMRep2", curie=NEON.curie('sampleVolumeFilteredPOMRep2'),
                      model_uri=NEON.sampleVolumeFilteredPOMRep2, domain=None, range=Optional[float])

slots.isotopeH2OSampleID = Slot(uri=NEON.isotopeH2OSampleID, name="isotopeH2OSampleID", curie=NEON.curie('isotopeH2OSampleID'),
                      model_uri=NEON.isotopeH2OSampleID, domain=None, range=Optional[str])

slots.isotopePOMSampleID = Slot(uri=NEON.isotopePOMSampleID, name="isotopePOMSampleID", curie=NEON.curie('isotopePOMSampleID'),
                      model_uri=NEON.isotopePOMSampleID, domain=None, range=Optional[str])

slots.isotopePOMRep2SampleID = Slot(uri=NEON.isotopePOMRep2SampleID, name="isotopePOMRep2SampleID", curie=NEON.curie('isotopePOMRep2SampleID'),
                      model_uri=NEON.isotopePOMRep2SampleID, domain=None, range=Optional[str])

slots.sampleNumber = Slot(uri=NEON.sampleNumber, name="sampleNumber", curie=NEON.curie('sampleNumber'),
                      model_uri=NEON.sampleNumber, domain=None, range=Optional[str])

slots.substratumSizeClass = Slot(uri=NEON.substratumSizeClass, name="substratumSizeClass", curie=NEON.curie('substratumSizeClass'),
                      model_uri=NEON.substratumSizeClass, domain=None, range=Optional[str])

slots.ponarDepth = Slot(uri=NEON.ponarDepth, name="ponarDepth", curie=NEON.curie('ponarDepth'),
                      model_uri=NEON.ponarDepth, domain=None, range=Optional[float])

slots.snagLength = Slot(uri=NEON.snagLength, name="snagLength", curie=NEON.curie('snagLength'),
                      model_uri=NEON.snagLength, domain=None, range=Optional[float])

slots.snagDiameter = Slot(uri=NEON.snagDiameter, name="snagDiameter", curie=NEON.curie('snagDiameter'),
                      model_uri=NEON.snagDiameter, domain=None, range=Optional[float])

slots.subsamplePercent = Slot(uri=NEON.subsamplePercent, name="subsamplePercent", curie=NEON.curie('subsamplePercent'),
                      model_uri=NEON.subsamplePercent, domain=None, range=Optional[float])

slots.qcSortDate = Slot(uri=NEON.qcSortDate, name="qcSortDate", curie=NEON.curie('qcSortDate'),
                      model_uri=NEON.qcSortDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.primaryMatrix = Slot(uri=NEON.primaryMatrix, name="primaryMatrix", curie=NEON.curie('primaryMatrix'),
                      model_uri=NEON.primaryMatrix, domain=None, range=Optional[str])

slots.preRinseVolume = Slot(uri=NEON.preRinseVolume, name="preRinseVolume", curie=NEON.curie('preRinseVolume'),
                      model_uri=NEON.preRinseVolume, domain=None, range=Optional[float])

slots.postRinseVolume = Slot(uri=NEON.postRinseVolume, name="postRinseVolume", curie=NEON.curie('postRinseVolume'),
                      model_uri=NEON.postRinseVolume, domain=None, range=Optional[float])

slots.qcSortedBy = Slot(uri=NEON.qcSortedBy, name="qcSortedBy", curie=NEON.curie('qcSortedBy'),
                      model_uri=NEON.qcSortedBy, domain=None, range=Optional[str])

slots.qcPercentSimilarity = Slot(uri=NEON.qcPercentSimilarity, name="qcPercentSimilarity", curie=NEON.curie('qcPercentSimilarity'),
                      model_uri=NEON.qcPercentSimilarity, domain=None, range=Optional[float])

slots.benchRemarks = Slot(uri=NEON.benchRemarks, name="benchRemarks", curie=NEON.curie('benchRemarks'),
                      model_uri=NEON.benchRemarks, domain=None, range=Optional[str])

slots.invertebrateLifeStage = Slot(uri=NEON.invertebrateLifeStage, name="invertebrateLifeStage", curie=NEON.curie('invertebrateLifeStage'),
                      model_uri=NEON.invertebrateLifeStage, domain=None, range=Optional[str])

slots.sizeClass = Slot(uri=NEON.sizeClass, name="sizeClass", curie=NEON.curie('sizeClass'),
                      model_uri=NEON.sizeClass, domain=None, range=Optional[str])

slots.immatureSpecimen = Slot(uri=NEON.immatureSpecimen, name="immatureSpecimen", curie=NEON.curie('immatureSpecimen'),
                      model_uri=NEON.immatureSpecimen, domain=None, range=Optional[str])

slots.indeterminateSpecimen = Slot(uri=NEON.indeterminateSpecimen, name="indeterminateSpecimen", curie=NEON.curie('indeterminateSpecimen'),
                      model_uri=NEON.indeterminateSpecimen, domain=None, range=Optional[str])

slots.distinctTaxon = Slot(uri=NEON.distinctTaxon, name="distinctTaxon", curie=NEON.curie('distinctTaxon'),
                      model_uri=NEON.distinctTaxon, domain=None, range=Optional[str])

slots.qcSortingEfficacy = Slot(uri=NEON.qcSortingEfficacy, name="qcSortingEfficacy", curie=NEON.curie('qcSortingEfficacy'),
                      model_uri=NEON.qcSortingEfficacy, domain=None, range=Optional[float])

slots.qcIterationCount = Slot(uri=NEON.qcIterationCount, name="qcIterationCount", curie=NEON.curie('qcIterationCount'),
                      model_uri=NEON.qcIterationCount, domain=None, range=Optional[str])

slots.qcChecked = Slot(uri=NEON.qcChecked, name="qcChecked", curie=NEON.curie('qcChecked'),
                      model_uri=NEON.qcChecked, domain=None, range=Optional[str])

slots.indeterminateSpecies = Slot(uri=NEON.indeterminateSpecies, name="indeterminateSpecies", curie=NEON.curie('indeterminateSpecies'),
                      model_uri=NEON.indeterminateSpecies, domain=None, range=Optional[str])

slots.notSubsampled = Slot(uri=NEON.notSubsampled, name="notSubsampled", curie=NEON.curie('notSubsampled'),
                      model_uri=NEON.notSubsampled, domain=None, range=Optional[str])

slots.subphylum = Slot(uri=NEON.subphylum, name="subphylum", curie=NEON.curie('subphylum'),
                      model_uri=NEON.subphylum, domain=None, range=Optional[str])

slots.subclass = Slot(uri=NEON.subclass, name="subclass", curie=NEON.curie('subclass'),
                      model_uri=NEON.subclass, domain=None, range=Optional[str])

slots.infraclass = Slot(uri=NEON.infraclass, name="infraclass", curie=NEON.curie('infraclass'),
                      model_uri=NEON.infraclass, domain=None, range=Optional[str])

slots.superorder = Slot(uri=NEON.superorder, name="superorder", curie=NEON.curie('superorder'),
                      model_uri=NEON.superorder, domain=None, range=Optional[str])

slots.suborder = Slot(uri=NEON.suborder, name="suborder", curie=NEON.curie('suborder'),
                      model_uri=NEON.suborder, domain=None, range=Optional[str])

slots.infraorder = Slot(uri=NEON.infraorder, name="infraorder", curie=NEON.curie('infraorder'),
                      model_uri=NEON.infraorder, domain=None, range=Optional[str])

slots.superfamily = Slot(uri=NEON.superfamily, name="superfamily", curie=NEON.curie('superfamily'),
                      model_uri=NEON.superfamily, domain=None, range=Optional[str])

slots.subtribe = Slot(uri=NEON.subtribe, name="subtribe", curie=NEON.curie('subtribe'),
                      model_uri=NEON.subtribe, domain=None, range=Optional[str])

slots.referenceCount = Slot(uri=NEON.referenceCount, name="referenceCount", curie=NEON.curie('referenceCount'),
                      model_uri=NEON.referenceCount, domain=None, range=Optional[str])

slots.referenceID = Slot(uri=NEON.referenceID, name="referenceID", curie=NEON.curie('referenceID'),
                      model_uri=NEON.referenceID, domain=None, range=Optional[str])

slots.fieldRemarks = Slot(uri=NEON.fieldRemarks, name="fieldRemarks", curie=NEON.curie('fieldRemarks'),
                      model_uri=NEON.fieldRemarks, domain=None, range=Optional[str])

slots.estimatedTotalCount = Slot(uri=NEON.estimatedTotalCount, name="estimatedTotalCount", curie=NEON.curie('estimatedTotalCount'),
                      model_uri=NEON.estimatedTotalCount, domain=None, range=Optional[float])

slots.estimatedArealCount = Slot(uri=NEON.estimatedArealCount, name="estimatedArealCount", curie=NEON.curie('estimatedArealCount'),
                      model_uri=NEON.estimatedArealCount, domain=None, range=Optional[float])

slots.observerInstitutionName = Slot(uri=NEON.observerInstitutionName, name="observerInstitutionName", curie=NEON.curie('observerInstitutionName'),
                      model_uri=NEON.observerInstitutionName, domain=None, range=Optional[str])

slots.technicianID = Slot(uri=NEON.technicianID, name="technicianID", curie=NEON.curie('technicianID'),
                      model_uri=NEON.technicianID, domain=None, range=Optional[str])

slots.fullName = Slot(uri=NEON.fullName, name="fullName", curie=NEON.curie('fullName'),
                      model_uri=NEON.fullName, domain=None, range=Optional[str])

slots.evaluationMethod = Slot(uri=NEON.evaluationMethod, name="evaluationMethod", curie=NEON.curie('evaluationMethod'),
                      model_uri=NEON.evaluationMethod, domain=None, range=Optional[str])

slots.evaluationScore = Slot(uri=NEON.evaluationScore, name="evaluationScore", curie=NEON.curie('evaluationScore'),
                      model_uri=NEON.evaluationScore, domain=None, range=Optional[str])

slots.localDate = Slot(uri=NEON.localDate, name="localDate", curie=NEON.curie('localDate'),
                      model_uri=NEON.localDate, domain=None, range=Optional[str])

slots.localStartTime = Slot(uri=NEON.localStartTime, name="localStartTime", curie=NEON.curie('localStartTime'),
                      model_uri=NEON.localStartTime, domain=None, range=Optional[str])

slots.startCloudCoverPercentage = Slot(uri=NEON.startCloudCoverPercentage, name="startCloudCoverPercentage", curie=NEON.curie('startCloudCoverPercentage'),
                      model_uri=NEON.startCloudCoverPercentage, domain=None, range=Optional[str])

slots.endCloudCoverPercentage = Slot(uri=NEON.endCloudCoverPercentage, name="endCloudCoverPercentage", curie=NEON.curie('endCloudCoverPercentage'),
                      model_uri=NEON.endCloudCoverPercentage, domain=None, range=Optional[str])

slots.startRH = Slot(uri=NEON.startRH, name="startRH", curie=NEON.curie('startRH'),
                      model_uri=NEON.startRH, domain=None, range=Optional[str])

slots.endRH = Slot(uri=NEON.endRH, name="endRH", curie=NEON.curie('endRH'),
                      model_uri=NEON.endRH, domain=None, range=Optional[str])

slots.observedHabitat = Slot(uri=NEON.observedHabitat, name="observedHabitat", curie=NEON.curie('observedHabitat'),
                      model_uri=NEON.observedHabitat, domain=None, range=Optional[str])

slots.observedAirTemp = Slot(uri=NEON.observedAirTemp, name="observedAirTemp", curie=NEON.curie('observedAirTemp'),
                      model_uri=NEON.observedAirTemp, domain=None, range=Optional[float])

slots.kmPerHourObservedWindSpeed = Slot(uri=NEON.kmPerHourObservedWindSpeed, name="kmPerHourObservedWindSpeed", curie=NEON.curie('kmPerHourObservedWindSpeed'),
                      model_uri=NEON.kmPerHourObservedWindSpeed, domain=None, range=Optional[float])

slots.pointCountMinute = Slot(uri=NEON.pointCountMinute, name="pointCountMinute", curie=NEON.curie('pointCountMinute'),
                      model_uri=NEON.pointCountMinute, domain=None, range=Optional[str])

slots.observerDistance = Slot(uri=NEON.observerDistance, name="observerDistance", curie=NEON.curie('observerDistance'),
                      model_uri=NEON.observerDistance, domain=None, range=Optional[float])

slots.detectionMethod = Slot(uri=NEON.detectionMethod, name="detectionMethod", curie=NEON.curie('detectionMethod'),
                      model_uri=NEON.detectionMethod, domain=None, range=Optional[str])

slots.sexOrAge = Slot(uri=NEON.sexOrAge, name="sexOrAge", curie=NEON.curie('sexOrAge'),
                      model_uri=NEON.sexOrAge, domain=None, range=Optional[str])

slots.observedWindSpeed = Slot(uri=NEON.observedWindSpeed, name="observedWindSpeed", curie=NEON.curie('observedWindSpeed'),
                      model_uri=NEON.observedWindSpeed, domain=None, range=Optional[float])

slots.visualConfirmation = Slot(uri=NEON.visualConfirmation, name="visualConfirmation", curie=NEON.curie('visualConfirmation'),
                      model_uri=NEON.visualConfirmation, domain=None, range=Optional[str])

slots.clusterCode = Slot(uri=NEON.clusterCode, name="clusterCode", curie=NEON.curie('clusterCode'),
                      model_uri=NEON.clusterCode, domain=None, range=Optional[str])

slots.clusterSize = Slot(uri=NEON.clusterSize, name="clusterSize", curie=NEON.curie('clusterSize'),
                      model_uri=NEON.clusterSize, domain=None, range=Optional[str])

slots.pointID = Slot(uri=NEON.pointID, name="pointID", curie=NEON.curie('pointID'),
                      model_uri=NEON.pointID, domain=None, range=Optional[str])

slots.referencePointPosition = Slot(uri=NEON.referencePointPosition, name="referencePointPosition", curie=NEON.curie('referencePointPosition'),
                      model_uri=NEON.referencePointPosition, domain=None, range=Optional[str])

slots.vernacularName = Slot(uri=NEON.vernacularName, name="vernacularName", curie=NEON.curie('vernacularName'),
                      model_uri=NEON.vernacularName, domain=None, range=Optional[str])

slots.section = Slot(uri=NEON.section, name="section", curie=NEON.curie('section'),
                      model_uri=NEON.section, domain=None, range=Optional[str])

slots.subkingdom = Slot(uri=NEON.subkingdom, name="subkingdom", curie=NEON.curie('subkingdom'),
                      model_uri=NEON.subkingdom, domain=None, range=Optional[str])

slots.infrakingdom = Slot(uri=NEON.infrakingdom, name="infrakingdom", curie=NEON.curie('infrakingdom'),
                      model_uri=NEON.infrakingdom, domain=None, range=Optional[str])

slots.superdivision = Slot(uri=NEON.superdivision, name="superdivision", curie=NEON.curie('superdivision'),
                      model_uri=NEON.superdivision, domain=None, range=Optional[str])

slots.division = Slot(uri=NEON.division, name="division", curie=NEON.curie('division'),
                      model_uri=NEON.division, domain=None, range=Optional[str])

slots.subdivision = Slot(uri=NEON.subdivision, name="subdivision", curie=NEON.curie('subdivision'),
                      model_uri=NEON.subdivision, domain=None, range=Optional[str])

slots.infradivision = Slot(uri=NEON.infradivision, name="infradivision", curie=NEON.curie('infradivision'),
                      model_uri=NEON.infradivision, domain=None, range=Optional[str])

slots.parvdivision = Slot(uri=NEON.parvdivision, name="parvdivision", curie=NEON.curie('parvdivision'),
                      model_uri=NEON.parvdivision, domain=None, range=Optional[str])

slots.superclass = Slot(uri=NEON.superclass, name="superclass", curie=NEON.curie('superclass'),
                      model_uri=NEON.superclass, domain=None, range=Optional[str])

slots.subsection = Slot(uri=NEON.subsection, name="subsection", curie=NEON.curie('subsection'),
                      model_uri=NEON.subsection, domain=None, range=Optional[str])

slots.subspecies = Slot(uri=NEON.subspecies, name="subspecies", curie=NEON.curie('subspecies'),
                      model_uri=NEON.subspecies, domain=None, range=Optional[str])

slots.subvariety = Slot(uri=NEON.subvariety, name="subvariety", curie=NEON.curie('subvariety'),
                      model_uri=NEON.subvariety, domain=None, range=Optional[str])

slots.subform = Slot(uri=NEON.subform, name="subform", curie=NEON.curie('subform'),
                      model_uri=NEON.subform, domain=None, range=Optional[str])

slots.form = Slot(uri=NEON.form, name="form", curie=NEON.curie('form'),
                      model_uri=NEON.form, domain=None, range=Optional[str])

slots.speciesGroup = Slot(uri=NEON.speciesGroup, name="speciesGroup", curie=NEON.curie('speciesGroup'),
                      model_uri=NEON.speciesGroup, domain=None, range=Optional[str])

slots.gasCyl = Slot(uri=NEON.gasCyl, name="gasCyl", curie=NEON.curie('gasCyl'),
                      model_uri=NEON.gasCyl, domain=None, range=Optional[float])

slots.tray45Vial = Slot(uri=NEON.tray45Vial, name="tray45Vial", curie=NEON.curie('tray45Vial'),
                      model_uri=NEON.tray45Vial, domain=None, range=Optional[float])

slots.tray90Vial = Slot(uri=NEON.tray90Vial, name="tray90Vial", curie=NEON.curie('tray90Vial'),
                      model_uri=NEON.tray90Vial, domain=None, range=Optional[float])

slots.PM15Median = Slot(uri=NEON.PM15Median, name="PM15Median", curie=NEON.curie('PM15Median'),
                      model_uri=NEON.PM15Median, domain=None, range=Optional[float])

slots.PM15Minimum = Slot(uri=NEON.PM15Minimum, name="PM15Minimum", curie=NEON.curie('PM15Minimum'),
                      model_uri=NEON.PM15Minimum, domain=None, range=Optional[float])

slots.PM15Maximum = Slot(uri=NEON.PM15Maximum, name="PM15Maximum", curie=NEON.curie('PM15Maximum'),
                      model_uri=NEON.PM15Maximum, domain=None, range=Optional[float])

slots.PM15NumPts = Slot(uri=NEON.PM15NumPts, name="PM15NumPts", curie=NEON.curie('PM15NumPts'),
                      model_uri=NEON.PM15NumPts, domain=None, range=Optional[float])

slots.PM15MAD = Slot(uri=NEON.PM15MAD, name="PM15MAD", curie=NEON.curie('PM15MAD'),
                      model_uri=NEON.PM15MAD, domain=None, range=Optional[float])

slots.PM15rangeQAQCRpt = Slot(uri=NEON.PM15rangeQAQCRpt, name="PM15rangeQAQCRpt", curie=NEON.curie('PM15rangeQAQCRpt'),
                      model_uri=NEON.PM15rangeQAQCRpt, domain=None, range=Optional[str])

slots.PM15persistenceQAQCRpt = Slot(uri=NEON.PM15persistenceQAQCRpt, name="PM15persistenceQAQCRpt", curie=NEON.curie('PM15persistenceQAQCRpt'),
                      model_uri=NEON.PM15persistenceQAQCRpt, domain=None, range=Optional[str])

slots.PM15stepQAQCRpt = Slot(uri=NEON.PM15stepQAQCRpt, name="PM15stepQAQCRpt", curie=NEON.curie('PM15stepQAQCRpt'),
                      model_uri=NEON.PM15stepQAQCRpt, domain=None, range=Optional[str])

slots.PM15nullQAQCRpt = Slot(uri=NEON.PM15nullQAQCRpt, name="PM15nullQAQCRpt", curie=NEON.curie('PM15nullQAQCRpt'),
                      model_uri=NEON.PM15nullQAQCRpt, domain=None, range=Optional[str])

slots.PM15gapQAQCRpt = Slot(uri=NEON.PM15gapQAQCRpt, name="PM15gapQAQCRpt", curie=NEON.curie('PM15gapQAQCRpt'),
                      model_uri=NEON.PM15gapQAQCRpt, domain=None, range=Optional[str])

slots.PM15consistencyQAQCRpt = Slot(uri=NEON.PM15consistencyQAQCRpt, name="PM15consistencyQAQCRpt", curie=NEON.curie('PM15consistencyQAQCRpt'),
                      model_uri=NEON.PM15consistencyQAQCRpt, domain=None, range=Optional[str])

slots.PM15spikeQAQCRpt = Slot(uri=NEON.PM15spikeQAQCRpt, name="PM15spikeQAQCRpt", curie=NEON.curie('PM15spikeQAQCRpt'),
                      model_uri=NEON.PM15spikeQAQCRpt, domain=None, range=Optional[str])

slots.PM15alphaQAQCRpt = Slot(uri=NEON.PM15alphaQAQCRpt, name="PM15alphaQAQCRpt", curie=NEON.curie('PM15alphaQAQCRpt'),
                      model_uri=NEON.PM15alphaQAQCRpt, domain=None, range=Optional[str])

slots.PM15betaQAQCRpt = Slot(uri=NEON.PM15betaQAQCRpt, name="PM15betaQAQCRpt", curie=NEON.curie('PM15betaQAQCRpt'),
                      model_uri=NEON.PM15betaQAQCRpt, domain=None, range=Optional[str])

slots.PM15rangeFailQM = Slot(uri=NEON.PM15rangeFailQM, name="PM15rangeFailQM", curie=NEON.curie('PM15rangeFailQM'),
                      model_uri=NEON.PM15rangeFailQM, domain=None, range=Optional[float])

slots.PM15rangePassQM = Slot(uri=NEON.PM15rangePassQM, name="PM15rangePassQM", curie=NEON.curie('PM15rangePassQM'),
                      model_uri=NEON.PM15rangePassQM, domain=None, range=Optional[float])

slots.PM15rangeNAQM = Slot(uri=NEON.PM15rangeNAQM, name="PM15rangeNAQM", curie=NEON.curie('PM15rangeNAQM'),
                      model_uri=NEON.PM15rangeNAQM, domain=None, range=Optional[float])

slots.PM15persistenceFailQM = Slot(uri=NEON.PM15persistenceFailQM, name="PM15persistenceFailQM", curie=NEON.curie('PM15persistenceFailQM'),
                      model_uri=NEON.PM15persistenceFailQM, domain=None, range=Optional[float])

slots.PM15persistencePassQM = Slot(uri=NEON.PM15persistencePassQM, name="PM15persistencePassQM", curie=NEON.curie('PM15persistencePassQM'),
                      model_uri=NEON.PM15persistencePassQM, domain=None, range=Optional[float])

slots.PM15persistenceNAQM = Slot(uri=NEON.PM15persistenceNAQM, name="PM15persistenceNAQM", curie=NEON.curie('PM15persistenceNAQM'),
                      model_uri=NEON.PM15persistenceNAQM, domain=None, range=Optional[float])

slots.PM15stepFailQM = Slot(uri=NEON.PM15stepFailQM, name="PM15stepFailQM", curie=NEON.curie('PM15stepFailQM'),
                      model_uri=NEON.PM15stepFailQM, domain=None, range=Optional[float])

slots.PM15stepPassQM = Slot(uri=NEON.PM15stepPassQM, name="PM15stepPassQM", curie=NEON.curie('PM15stepPassQM'),
                      model_uri=NEON.PM15stepPassQM, domain=None, range=Optional[float])

slots.PM15stepNAQM = Slot(uri=NEON.PM15stepNAQM, name="PM15stepNAQM", curie=NEON.curie('PM15stepNAQM'),
                      model_uri=NEON.PM15stepNAQM, domain=None, range=Optional[float])

slots.PM15nullFailQM = Slot(uri=NEON.PM15nullFailQM, name="PM15nullFailQM", curie=NEON.curie('PM15nullFailQM'),
                      model_uri=NEON.PM15nullFailQM, domain=None, range=Optional[float])

slots.PM15nullPassQM = Slot(uri=NEON.PM15nullPassQM, name="PM15nullPassQM", curie=NEON.curie('PM15nullPassQM'),
                      model_uri=NEON.PM15nullPassQM, domain=None, range=Optional[float])

slots.PM15nullNAQM = Slot(uri=NEON.PM15nullNAQM, name="PM15nullNAQM", curie=NEON.curie('PM15nullNAQM'),
                      model_uri=NEON.PM15nullNAQM, domain=None, range=Optional[float])

slots.PM15gapFailQM = Slot(uri=NEON.PM15gapFailQM, name="PM15gapFailQM", curie=NEON.curie('PM15gapFailQM'),
                      model_uri=NEON.PM15gapFailQM, domain=None, range=Optional[float])

slots.PM15gapPassQM = Slot(uri=NEON.PM15gapPassQM, name="PM15gapPassQM", curie=NEON.curie('PM15gapPassQM'),
                      model_uri=NEON.PM15gapPassQM, domain=None, range=Optional[float])

slots.PM15gapNAQM = Slot(uri=NEON.PM15gapNAQM, name="PM15gapNAQM", curie=NEON.curie('PM15gapNAQM'),
                      model_uri=NEON.PM15gapNAQM, domain=None, range=Optional[float])

slots.PM15spikeFailQM = Slot(uri=NEON.PM15spikeFailQM, name="PM15spikeFailQM", curie=NEON.curie('PM15spikeFailQM'),
                      model_uri=NEON.PM15spikeFailQM, domain=None, range=Optional[float])

slots.PM15spikePassQM = Slot(uri=NEON.PM15spikePassQM, name="PM15spikePassQM", curie=NEON.curie('PM15spikePassQM'),
                      model_uri=NEON.PM15spikePassQM, domain=None, range=Optional[float])

slots.PM15spikeNAQM = Slot(uri=NEON.PM15spikeNAQM, name="PM15spikeNAQM", curie=NEON.curie('PM15spikeNAQM'),
                      model_uri=NEON.PM15spikeNAQM, domain=None, range=Optional[float])

slots.PM15consistencyFailQM = Slot(uri=NEON.PM15consistencyFailQM, name="PM15consistencyFailQM", curie=NEON.curie('PM15consistencyFailQM'),
                      model_uri=NEON.PM15consistencyFailQM, domain=None, range=Optional[float])

slots.PM15consistencyPassQM = Slot(uri=NEON.PM15consistencyPassQM, name="PM15consistencyPassQM", curie=NEON.curie('PM15consistencyPassQM'),
                      model_uri=NEON.PM15consistencyPassQM, domain=None, range=Optional[float])

slots.PM15consistencyNAQM = Slot(uri=NEON.PM15consistencyNAQM, name="PM15consistencyNAQM", curie=NEON.curie('PM15consistencyNAQM'),
                      model_uri=NEON.PM15consistencyNAQM, domain=None, range=Optional[float])

slots.PM15alphaQM = Slot(uri=NEON.PM15alphaQM, name="PM15alphaQM", curie=NEON.curie('PM15alphaQM'),
                      model_uri=NEON.PM15alphaQM, domain=None, range=Optional[float])

slots.PM15betaQM = Slot(uri=NEON.PM15betaQM, name="PM15betaQM", curie=NEON.curie('PM15betaQM'),
                      model_uri=NEON.PM15betaQM, domain=None, range=Optional[float])

slots.PM15finalQF = Slot(uri=NEON.PM15finalQF, name="PM15finalQF", curie=NEON.curie('PM15finalQF'),
                      model_uri=NEON.PM15finalQF, domain=None, range=Optional[str])

slots.PM10Median = Slot(uri=NEON.PM10Median, name="PM10Median", curie=NEON.curie('PM10Median'),
                      model_uri=NEON.PM10Median, domain=None, range=Optional[float])

slots.PM10Minimum = Slot(uri=NEON.PM10Minimum, name="PM10Minimum", curie=NEON.curie('PM10Minimum'),
                      model_uri=NEON.PM10Minimum, domain=None, range=Optional[float])

slots.PM10Maximum = Slot(uri=NEON.PM10Maximum, name="PM10Maximum", curie=NEON.curie('PM10Maximum'),
                      model_uri=NEON.PM10Maximum, domain=None, range=Optional[float])

slots.PM10NumPts = Slot(uri=NEON.PM10NumPts, name="PM10NumPts", curie=NEON.curie('PM10NumPts'),
                      model_uri=NEON.PM10NumPts, domain=None, range=Optional[float])

slots.PM10MAD = Slot(uri=NEON.PM10MAD, name="PM10MAD", curie=NEON.curie('PM10MAD'),
                      model_uri=NEON.PM10MAD, domain=None, range=Optional[float])

slots.PM10rangeQAQCRpt = Slot(uri=NEON.PM10rangeQAQCRpt, name="PM10rangeQAQCRpt", curie=NEON.curie('PM10rangeQAQCRpt'),
                      model_uri=NEON.PM10rangeQAQCRpt, domain=None, range=Optional[str])

slots.PM10persistenceQAQCRpt = Slot(uri=NEON.PM10persistenceQAQCRpt, name="PM10persistenceQAQCRpt", curie=NEON.curie('PM10persistenceQAQCRpt'),
                      model_uri=NEON.PM10persistenceQAQCRpt, domain=None, range=Optional[str])

slots.PM10stepQAQCRpt = Slot(uri=NEON.PM10stepQAQCRpt, name="PM10stepQAQCRpt", curie=NEON.curie('PM10stepQAQCRpt'),
                      model_uri=NEON.PM10stepQAQCRpt, domain=None, range=Optional[str])

slots.PM10nullQAQCRpt = Slot(uri=NEON.PM10nullQAQCRpt, name="PM10nullQAQCRpt", curie=NEON.curie('PM10nullQAQCRpt'),
                      model_uri=NEON.PM10nullQAQCRpt, domain=None, range=Optional[str])

slots.PM10gapQAQCRpt = Slot(uri=NEON.PM10gapQAQCRpt, name="PM10gapQAQCRpt", curie=NEON.curie('PM10gapQAQCRpt'),
                      model_uri=NEON.PM10gapQAQCRpt, domain=None, range=Optional[str])

slots.PM10consistencyQAQCRpt = Slot(uri=NEON.PM10consistencyQAQCRpt, name="PM10consistencyQAQCRpt", curie=NEON.curie('PM10consistencyQAQCRpt'),
                      model_uri=NEON.PM10consistencyQAQCRpt, domain=None, range=Optional[str])

slots.PM10spikeQAQCRpt = Slot(uri=NEON.PM10spikeQAQCRpt, name="PM10spikeQAQCRpt", curie=NEON.curie('PM10spikeQAQCRpt'),
                      model_uri=NEON.PM10spikeQAQCRpt, domain=None, range=Optional[str])

slots.PM10alphaQAQCRpt = Slot(uri=NEON.PM10alphaQAQCRpt, name="PM10alphaQAQCRpt", curie=NEON.curie('PM10alphaQAQCRpt'),
                      model_uri=NEON.PM10alphaQAQCRpt, domain=None, range=Optional[str])

slots.PM10betaQAQCRpt = Slot(uri=NEON.PM10betaQAQCRpt, name="PM10betaQAQCRpt", curie=NEON.curie('PM10betaQAQCRpt'),
                      model_uri=NEON.PM10betaQAQCRpt, domain=None, range=Optional[str])

slots.PM10rangeFailQM = Slot(uri=NEON.PM10rangeFailQM, name="PM10rangeFailQM", curie=NEON.curie('PM10rangeFailQM'),
                      model_uri=NEON.PM10rangeFailQM, domain=None, range=Optional[float])

slots.PM10rangePassQM = Slot(uri=NEON.PM10rangePassQM, name="PM10rangePassQM", curie=NEON.curie('PM10rangePassQM'),
                      model_uri=NEON.PM10rangePassQM, domain=None, range=Optional[float])

slots.PM10rangeNAQM = Slot(uri=NEON.PM10rangeNAQM, name="PM10rangeNAQM", curie=NEON.curie('PM10rangeNAQM'),
                      model_uri=NEON.PM10rangeNAQM, domain=None, range=Optional[float])

slots.PM10persistenceFailQM = Slot(uri=NEON.PM10persistenceFailQM, name="PM10persistenceFailQM", curie=NEON.curie('PM10persistenceFailQM'),
                      model_uri=NEON.PM10persistenceFailQM, domain=None, range=Optional[float])

slots.PM10persistencePassQM = Slot(uri=NEON.PM10persistencePassQM, name="PM10persistencePassQM", curie=NEON.curie('PM10persistencePassQM'),
                      model_uri=NEON.PM10persistencePassQM, domain=None, range=Optional[float])

slots.PM10persistenceNAQM = Slot(uri=NEON.PM10persistenceNAQM, name="PM10persistenceNAQM", curie=NEON.curie('PM10persistenceNAQM'),
                      model_uri=NEON.PM10persistenceNAQM, domain=None, range=Optional[float])

slots.PM10stepFailQM = Slot(uri=NEON.PM10stepFailQM, name="PM10stepFailQM", curie=NEON.curie('PM10stepFailQM'),
                      model_uri=NEON.PM10stepFailQM, domain=None, range=Optional[float])

slots.PM10stepPassQM = Slot(uri=NEON.PM10stepPassQM, name="PM10stepPassQM", curie=NEON.curie('PM10stepPassQM'),
                      model_uri=NEON.PM10stepPassQM, domain=None, range=Optional[float])

slots.PM10stepNAQM = Slot(uri=NEON.PM10stepNAQM, name="PM10stepNAQM", curie=NEON.curie('PM10stepNAQM'),
                      model_uri=NEON.PM10stepNAQM, domain=None, range=Optional[float])

slots.PM10nullFailQM = Slot(uri=NEON.PM10nullFailQM, name="PM10nullFailQM", curie=NEON.curie('PM10nullFailQM'),
                      model_uri=NEON.PM10nullFailQM, domain=None, range=Optional[float])

slots.PM10nullPassQM = Slot(uri=NEON.PM10nullPassQM, name="PM10nullPassQM", curie=NEON.curie('PM10nullPassQM'),
                      model_uri=NEON.PM10nullPassQM, domain=None, range=Optional[float])

slots.PM10nullNAQM = Slot(uri=NEON.PM10nullNAQM, name="PM10nullNAQM", curie=NEON.curie('PM10nullNAQM'),
                      model_uri=NEON.PM10nullNAQM, domain=None, range=Optional[float])

slots.PM10gapFailQM = Slot(uri=NEON.PM10gapFailQM, name="PM10gapFailQM", curie=NEON.curie('PM10gapFailQM'),
                      model_uri=NEON.PM10gapFailQM, domain=None, range=Optional[float])

slots.PM10gapPassQM = Slot(uri=NEON.PM10gapPassQM, name="PM10gapPassQM", curie=NEON.curie('PM10gapPassQM'),
                      model_uri=NEON.PM10gapPassQM, domain=None, range=Optional[float])

slots.PM10gapNAQM = Slot(uri=NEON.PM10gapNAQM, name="PM10gapNAQM", curie=NEON.curie('PM10gapNAQM'),
                      model_uri=NEON.PM10gapNAQM, domain=None, range=Optional[float])

slots.PM10spikeFailQM = Slot(uri=NEON.PM10spikeFailQM, name="PM10spikeFailQM", curie=NEON.curie('PM10spikeFailQM'),
                      model_uri=NEON.PM10spikeFailQM, domain=None, range=Optional[float])

slots.PM10spikePassQM = Slot(uri=NEON.PM10spikePassQM, name="PM10spikePassQM", curie=NEON.curie('PM10spikePassQM'),
                      model_uri=NEON.PM10spikePassQM, domain=None, range=Optional[float])

slots.PM10spikeNAQM = Slot(uri=NEON.PM10spikeNAQM, name="PM10spikeNAQM", curie=NEON.curie('PM10spikeNAQM'),
                      model_uri=NEON.PM10spikeNAQM, domain=None, range=Optional[float])

slots.PM10consistencyFailQM = Slot(uri=NEON.PM10consistencyFailQM, name="PM10consistencyFailQM", curie=NEON.curie('PM10consistencyFailQM'),
                      model_uri=NEON.PM10consistencyFailQM, domain=None, range=Optional[float])

slots.PM10consistencyPassQM = Slot(uri=NEON.PM10consistencyPassQM, name="PM10consistencyPassQM", curie=NEON.curie('PM10consistencyPassQM'),
                      model_uri=NEON.PM10consistencyPassQM, domain=None, range=Optional[float])

slots.PM10consistencyNAQM = Slot(uri=NEON.PM10consistencyNAQM, name="PM10consistencyNAQM", curie=NEON.curie('PM10consistencyNAQM'),
                      model_uri=NEON.PM10consistencyNAQM, domain=None, range=Optional[float])

slots.PM10alphaQM = Slot(uri=NEON.PM10alphaQM, name="PM10alphaQM", curie=NEON.curie('PM10alphaQM'),
                      model_uri=NEON.PM10alphaQM, domain=None, range=Optional[float])

slots.PM10betaQM = Slot(uri=NEON.PM10betaQM, name="PM10betaQM", curie=NEON.curie('PM10betaQM'),
                      model_uri=NEON.PM10betaQM, domain=None, range=Optional[float])

slots.PM10finalQF = Slot(uri=NEON.PM10finalQF, name="PM10finalQF", curie=NEON.curie('PM10finalQF'),
                      model_uri=NEON.PM10finalQF, domain=None, range=Optional[str])

slots.PM4Median = Slot(uri=NEON.PM4Median, name="PM4Median", curie=NEON.curie('PM4Median'),
                      model_uri=NEON.PM4Median, domain=None, range=Optional[float])

slots.PM4Minimum = Slot(uri=NEON.PM4Minimum, name="PM4Minimum", curie=NEON.curie('PM4Minimum'),
                      model_uri=NEON.PM4Minimum, domain=None, range=Optional[float])

slots.PM4Maximum = Slot(uri=NEON.PM4Maximum, name="PM4Maximum", curie=NEON.curie('PM4Maximum'),
                      model_uri=NEON.PM4Maximum, domain=None, range=Optional[float])

slots.PM4NumPts = Slot(uri=NEON.PM4NumPts, name="PM4NumPts", curie=NEON.curie('PM4NumPts'),
                      model_uri=NEON.PM4NumPts, domain=None, range=Optional[float])

slots.PM4MAD = Slot(uri=NEON.PM4MAD, name="PM4MAD", curie=NEON.curie('PM4MAD'),
                      model_uri=NEON.PM4MAD, domain=None, range=Optional[float])

slots.PM4rangeQAQCRpt = Slot(uri=NEON.PM4rangeQAQCRpt, name="PM4rangeQAQCRpt", curie=NEON.curie('PM4rangeQAQCRpt'),
                      model_uri=NEON.PM4rangeQAQCRpt, domain=None, range=Optional[str])

slots.PM4persistenceQAQCRpt = Slot(uri=NEON.PM4persistenceQAQCRpt, name="PM4persistenceQAQCRpt", curie=NEON.curie('PM4persistenceQAQCRpt'),
                      model_uri=NEON.PM4persistenceQAQCRpt, domain=None, range=Optional[str])

slots.PM4stepQAQCRpt = Slot(uri=NEON.PM4stepQAQCRpt, name="PM4stepQAQCRpt", curie=NEON.curie('PM4stepQAQCRpt'),
                      model_uri=NEON.PM4stepQAQCRpt, domain=None, range=Optional[str])

slots.PM4nullQAQCRpt = Slot(uri=NEON.PM4nullQAQCRpt, name="PM4nullQAQCRpt", curie=NEON.curie('PM4nullQAQCRpt'),
                      model_uri=NEON.PM4nullQAQCRpt, domain=None, range=Optional[str])

slots.PM4gapQAQCRpt = Slot(uri=NEON.PM4gapQAQCRpt, name="PM4gapQAQCRpt", curie=NEON.curie('PM4gapQAQCRpt'),
                      model_uri=NEON.PM4gapQAQCRpt, domain=None, range=Optional[str])

slots.PM4consistencyQAQCRpt = Slot(uri=NEON.PM4consistencyQAQCRpt, name="PM4consistencyQAQCRpt", curie=NEON.curie('PM4consistencyQAQCRpt'),
                      model_uri=NEON.PM4consistencyQAQCRpt, domain=None, range=Optional[str])

slots.PM4spikeQAQCRpt = Slot(uri=NEON.PM4spikeQAQCRpt, name="PM4spikeQAQCRpt", curie=NEON.curie('PM4spikeQAQCRpt'),
                      model_uri=NEON.PM4spikeQAQCRpt, domain=None, range=Optional[str])

slots.PM4alphaQAQCRpt = Slot(uri=NEON.PM4alphaQAQCRpt, name="PM4alphaQAQCRpt", curie=NEON.curie('PM4alphaQAQCRpt'),
                      model_uri=NEON.PM4alphaQAQCRpt, domain=None, range=Optional[str])

slots.PM4betaQAQCRpt = Slot(uri=NEON.PM4betaQAQCRpt, name="PM4betaQAQCRpt", curie=NEON.curie('PM4betaQAQCRpt'),
                      model_uri=NEON.PM4betaQAQCRpt, domain=None, range=Optional[str])

slots.PM4rangeFailQM = Slot(uri=NEON.PM4rangeFailQM, name="PM4rangeFailQM", curie=NEON.curie('PM4rangeFailQM'),
                      model_uri=NEON.PM4rangeFailQM, domain=None, range=Optional[float])

slots.PM4rangePassQM = Slot(uri=NEON.PM4rangePassQM, name="PM4rangePassQM", curie=NEON.curie('PM4rangePassQM'),
                      model_uri=NEON.PM4rangePassQM, domain=None, range=Optional[float])

slots.PM4rangeNAQM = Slot(uri=NEON.PM4rangeNAQM, name="PM4rangeNAQM", curie=NEON.curie('PM4rangeNAQM'),
                      model_uri=NEON.PM4rangeNAQM, domain=None, range=Optional[float])

slots.PM4persistenceFailQM = Slot(uri=NEON.PM4persistenceFailQM, name="PM4persistenceFailQM", curie=NEON.curie('PM4persistenceFailQM'),
                      model_uri=NEON.PM4persistenceFailQM, domain=None, range=Optional[float])

slots.PM4persistencePassQM = Slot(uri=NEON.PM4persistencePassQM, name="PM4persistencePassQM", curie=NEON.curie('PM4persistencePassQM'),
                      model_uri=NEON.PM4persistencePassQM, domain=None, range=Optional[float])

slots.PM4persistenceNAQM = Slot(uri=NEON.PM4persistenceNAQM, name="PM4persistenceNAQM", curie=NEON.curie('PM4persistenceNAQM'),
                      model_uri=NEON.PM4persistenceNAQM, domain=None, range=Optional[float])

slots.PM4stepFailQM = Slot(uri=NEON.PM4stepFailQM, name="PM4stepFailQM", curie=NEON.curie('PM4stepFailQM'),
                      model_uri=NEON.PM4stepFailQM, domain=None, range=Optional[float])

slots.PM4stepPassQM = Slot(uri=NEON.PM4stepPassQM, name="PM4stepPassQM", curie=NEON.curie('PM4stepPassQM'),
                      model_uri=NEON.PM4stepPassQM, domain=None, range=Optional[float])

slots.PM4stepNAQM = Slot(uri=NEON.PM4stepNAQM, name="PM4stepNAQM", curie=NEON.curie('PM4stepNAQM'),
                      model_uri=NEON.PM4stepNAQM, domain=None, range=Optional[float])

slots.PM4nullFailQM = Slot(uri=NEON.PM4nullFailQM, name="PM4nullFailQM", curie=NEON.curie('PM4nullFailQM'),
                      model_uri=NEON.PM4nullFailQM, domain=None, range=Optional[float])

slots.PM4nullPassQM = Slot(uri=NEON.PM4nullPassQM, name="PM4nullPassQM", curie=NEON.curie('PM4nullPassQM'),
                      model_uri=NEON.PM4nullPassQM, domain=None, range=Optional[float])

slots.PM4nullNAQM = Slot(uri=NEON.PM4nullNAQM, name="PM4nullNAQM", curie=NEON.curie('PM4nullNAQM'),
                      model_uri=NEON.PM4nullNAQM, domain=None, range=Optional[float])

slots.PM4gapFailQM = Slot(uri=NEON.PM4gapFailQM, name="PM4gapFailQM", curie=NEON.curie('PM4gapFailQM'),
                      model_uri=NEON.PM4gapFailQM, domain=None, range=Optional[float])

slots.PM4gapPassQM = Slot(uri=NEON.PM4gapPassQM, name="PM4gapPassQM", curie=NEON.curie('PM4gapPassQM'),
                      model_uri=NEON.PM4gapPassQM, domain=None, range=Optional[float])

slots.PM4gapNAQM = Slot(uri=NEON.PM4gapNAQM, name="PM4gapNAQM", curie=NEON.curie('PM4gapNAQM'),
                      model_uri=NEON.PM4gapNAQM, domain=None, range=Optional[float])

slots.PM4spikeFailQM = Slot(uri=NEON.PM4spikeFailQM, name="PM4spikeFailQM", curie=NEON.curie('PM4spikeFailQM'),
                      model_uri=NEON.PM4spikeFailQM, domain=None, range=Optional[float])

slots.PM4spikePassQM = Slot(uri=NEON.PM4spikePassQM, name="PM4spikePassQM", curie=NEON.curie('PM4spikePassQM'),
                      model_uri=NEON.PM4spikePassQM, domain=None, range=Optional[float])

slots.PM4spikeNAQM = Slot(uri=NEON.PM4spikeNAQM, name="PM4spikeNAQM", curie=NEON.curie('PM4spikeNAQM'),
                      model_uri=NEON.PM4spikeNAQM, domain=None, range=Optional[float])

slots.PM4consistencyFailQM = Slot(uri=NEON.PM4consistencyFailQM, name="PM4consistencyFailQM", curie=NEON.curie('PM4consistencyFailQM'),
                      model_uri=NEON.PM4consistencyFailQM, domain=None, range=Optional[float])

slots.PM4consistencyPassQM = Slot(uri=NEON.PM4consistencyPassQM, name="PM4consistencyPassQM", curie=NEON.curie('PM4consistencyPassQM'),
                      model_uri=NEON.PM4consistencyPassQM, domain=None, range=Optional[float])

slots.PM4consistencyNAQM = Slot(uri=NEON.PM4consistencyNAQM, name="PM4consistencyNAQM", curie=NEON.curie('PM4consistencyNAQM'),
                      model_uri=NEON.PM4consistencyNAQM, domain=None, range=Optional[float])

slots.PM4alphaQM = Slot(uri=NEON.PM4alphaQM, name="PM4alphaQM", curie=NEON.curie('PM4alphaQM'),
                      model_uri=NEON.PM4alphaQM, domain=None, range=Optional[float])

slots.PM4betaQM = Slot(uri=NEON.PM4betaQM, name="PM4betaQM", curie=NEON.curie('PM4betaQM'),
                      model_uri=NEON.PM4betaQM, domain=None, range=Optional[float])

slots.PM4finalQF = Slot(uri=NEON.PM4finalQF, name="PM4finalQF", curie=NEON.curie('PM4finalQF'),
                      model_uri=NEON.PM4finalQF, domain=None, range=Optional[str])

slots.PM2.5Median = Slot(uri=NEON['PM2.5Median'], name="PM2.5Median", curie=NEON.curie('PM2.5Median'),
                      model_uri=NEON['PM2.5Median'], domain=None, range=Optional[float])

slots.PM2.5Minimum = Slot(uri=NEON['PM2.5Minimum'], name="PM2.5Minimum", curie=NEON.curie('PM2.5Minimum'),
                      model_uri=NEON['PM2.5Minimum'], domain=None, range=Optional[float])

slots.PM2.5Maximum = Slot(uri=NEON['PM2.5Maximum'], name="PM2.5Maximum", curie=NEON.curie('PM2.5Maximum'),
                      model_uri=NEON['PM2.5Maximum'], domain=None, range=Optional[float])

slots.PM2.5NumPts = Slot(uri=NEON['PM2.5NumPts'], name="PM2.5NumPts", curie=NEON.curie('PM2.5NumPts'),
                      model_uri=NEON['PM2.5NumPts'], domain=None, range=Optional[float])

slots.PM2.5MAD = Slot(uri=NEON['PM2.5MAD'], name="PM2.5MAD", curie=NEON.curie('PM2.5MAD'),
                      model_uri=NEON['PM2.5MAD'], domain=None, range=Optional[float])

slots.PM2.5rangeQAQCRpt = Slot(uri=NEON['PM2.5rangeQAQCRpt'], name="PM2.5rangeQAQCRpt", curie=NEON.curie('PM2.5rangeQAQCRpt'),
                      model_uri=NEON['PM2.5rangeQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5persistenceQAQCRpt = Slot(uri=NEON['PM2.5persistenceQAQCRpt'], name="PM2.5persistenceQAQCRpt", curie=NEON.curie('PM2.5persistenceQAQCRpt'),
                      model_uri=NEON['PM2.5persistenceQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5stepQAQCRpt = Slot(uri=NEON['PM2.5stepQAQCRpt'], name="PM2.5stepQAQCRpt", curie=NEON.curie('PM2.5stepQAQCRpt'),
                      model_uri=NEON['PM2.5stepQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5nullQAQCRpt = Slot(uri=NEON['PM2.5nullQAQCRpt'], name="PM2.5nullQAQCRpt", curie=NEON.curie('PM2.5nullQAQCRpt'),
                      model_uri=NEON['PM2.5nullQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5gapQAQCRpt = Slot(uri=NEON['PM2.5gapQAQCRpt'], name="PM2.5gapQAQCRpt", curie=NEON.curie('PM2.5gapQAQCRpt'),
                      model_uri=NEON['PM2.5gapQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5consistencyQAQCRpt = Slot(uri=NEON['PM2.5consistencyQAQCRpt'], name="PM2.5consistencyQAQCRpt", curie=NEON.curie('PM2.5consistencyQAQCRpt'),
                      model_uri=NEON['PM2.5consistencyQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5spikeQAQCRpt = Slot(uri=NEON['PM2.5spikeQAQCRpt'], name="PM2.5spikeQAQCRpt", curie=NEON.curie('PM2.5spikeQAQCRpt'),
                      model_uri=NEON['PM2.5spikeQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5alphaQAQCRpt = Slot(uri=NEON['PM2.5alphaQAQCRpt'], name="PM2.5alphaQAQCRpt", curie=NEON.curie('PM2.5alphaQAQCRpt'),
                      model_uri=NEON['PM2.5alphaQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5betaQAQCRpt = Slot(uri=NEON['PM2.5betaQAQCRpt'], name="PM2.5betaQAQCRpt", curie=NEON.curie('PM2.5betaQAQCRpt'),
                      model_uri=NEON['PM2.5betaQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5rangeFailQM = Slot(uri=NEON['PM2.5rangeFailQM'], name="PM2.5rangeFailQM", curie=NEON.curie('PM2.5rangeFailQM'),
                      model_uri=NEON['PM2.5rangeFailQM'], domain=None, range=Optional[float])

slots.PM2.5rangePassQM = Slot(uri=NEON['PM2.5rangePassQM'], name="PM2.5rangePassQM", curie=NEON.curie('PM2.5rangePassQM'),
                      model_uri=NEON['PM2.5rangePassQM'], domain=None, range=Optional[float])

slots.PM2.5rangeNAQM = Slot(uri=NEON['PM2.5rangeNAQM'], name="PM2.5rangeNAQM", curie=NEON.curie('PM2.5rangeNAQM'),
                      model_uri=NEON['PM2.5rangeNAQM'], domain=None, range=Optional[float])

slots.PM2.5persistenceFailQM = Slot(uri=NEON['PM2.5persistenceFailQM'], name="PM2.5persistenceFailQM", curie=NEON.curie('PM2.5persistenceFailQM'),
                      model_uri=NEON['PM2.5persistenceFailQM'], domain=None, range=Optional[float])

slots.PM2.5persistencePassQM = Slot(uri=NEON['PM2.5persistencePassQM'], name="PM2.5persistencePassQM", curie=NEON.curie('PM2.5persistencePassQM'),
                      model_uri=NEON['PM2.5persistencePassQM'], domain=None, range=Optional[float])

slots.PM2.5persistenceNAQM = Slot(uri=NEON['PM2.5persistenceNAQM'], name="PM2.5persistenceNAQM", curie=NEON.curie('PM2.5persistenceNAQM'),
                      model_uri=NEON['PM2.5persistenceNAQM'], domain=None, range=Optional[float])

slots.PM2.5stepFailQM = Slot(uri=NEON['PM2.5stepFailQM'], name="PM2.5stepFailQM", curie=NEON.curie('PM2.5stepFailQM'),
                      model_uri=NEON['PM2.5stepFailQM'], domain=None, range=Optional[float])

slots.PM2.5stepPassQM = Slot(uri=NEON['PM2.5stepPassQM'], name="PM2.5stepPassQM", curie=NEON.curie('PM2.5stepPassQM'),
                      model_uri=NEON['PM2.5stepPassQM'], domain=None, range=Optional[float])

slots.PM2.5stepNAQM = Slot(uri=NEON['PM2.5stepNAQM'], name="PM2.5stepNAQM", curie=NEON.curie('PM2.5stepNAQM'),
                      model_uri=NEON['PM2.5stepNAQM'], domain=None, range=Optional[float])

slots.PM2.5nullFailQM = Slot(uri=NEON['PM2.5nullFailQM'], name="PM2.5nullFailQM", curie=NEON.curie('PM2.5nullFailQM'),
                      model_uri=NEON['PM2.5nullFailQM'], domain=None, range=Optional[float])

slots.PM2.5nullPassQM = Slot(uri=NEON['PM2.5nullPassQM'], name="PM2.5nullPassQM", curie=NEON.curie('PM2.5nullPassQM'),
                      model_uri=NEON['PM2.5nullPassQM'], domain=None, range=Optional[float])

slots.PM2.5nullNAQM = Slot(uri=NEON['PM2.5nullNAQM'], name="PM2.5nullNAQM", curie=NEON.curie('PM2.5nullNAQM'),
                      model_uri=NEON['PM2.5nullNAQM'], domain=None, range=Optional[float])

slots.PM2.5gapFailQM = Slot(uri=NEON['PM2.5gapFailQM'], name="PM2.5gapFailQM", curie=NEON.curie('PM2.5gapFailQM'),
                      model_uri=NEON['PM2.5gapFailQM'], domain=None, range=Optional[float])

slots.PM2.5gapPassQM = Slot(uri=NEON['PM2.5gapPassQM'], name="PM2.5gapPassQM", curie=NEON.curie('PM2.5gapPassQM'),
                      model_uri=NEON['PM2.5gapPassQM'], domain=None, range=Optional[float])

slots.PM2.5gapNAQM = Slot(uri=NEON['PM2.5gapNAQM'], name="PM2.5gapNAQM", curie=NEON.curie('PM2.5gapNAQM'),
                      model_uri=NEON['PM2.5gapNAQM'], domain=None, range=Optional[float])

slots.PM2.5spikeFailQM = Slot(uri=NEON['PM2.5spikeFailQM'], name="PM2.5spikeFailQM", curie=NEON.curie('PM2.5spikeFailQM'),
                      model_uri=NEON['PM2.5spikeFailQM'], domain=None, range=Optional[float])

slots.PM2.5spikePassQM = Slot(uri=NEON['PM2.5spikePassQM'], name="PM2.5spikePassQM", curie=NEON.curie('PM2.5spikePassQM'),
                      model_uri=NEON['PM2.5spikePassQM'], domain=None, range=Optional[float])

slots.PM2.5spikeNAQM = Slot(uri=NEON['PM2.5spikeNAQM'], name="PM2.5spikeNAQM", curie=NEON.curie('PM2.5spikeNAQM'),
                      model_uri=NEON['PM2.5spikeNAQM'], domain=None, range=Optional[float])

slots.PM2.5consistencyFailQM = Slot(uri=NEON['PM2.5consistencyFailQM'], name="PM2.5consistencyFailQM", curie=NEON.curie('PM2.5consistencyFailQM'),
                      model_uri=NEON['PM2.5consistencyFailQM'], domain=None, range=Optional[float])

slots.PM2.5consistencyPassQM = Slot(uri=NEON['PM2.5consistencyPassQM'], name="PM2.5consistencyPassQM", curie=NEON.curie('PM2.5consistencyPassQM'),
                      model_uri=NEON['PM2.5consistencyPassQM'], domain=None, range=Optional[float])

slots.PM2.5consistencyNAQM = Slot(uri=NEON['PM2.5consistencyNAQM'], name="PM2.5consistencyNAQM", curie=NEON.curie('PM2.5consistencyNAQM'),
                      model_uri=NEON['PM2.5consistencyNAQM'], domain=None, range=Optional[float])

slots.PM2.5alphaQM = Slot(uri=NEON['PM2.5alphaQM'], name="PM2.5alphaQM", curie=NEON.curie('PM2.5alphaQM'),
                      model_uri=NEON['PM2.5alphaQM'], domain=None, range=Optional[float])

slots.PM2.5betaQM = Slot(uri=NEON['PM2.5betaQM'], name="PM2.5betaQM", curie=NEON.curie('PM2.5betaQM'),
                      model_uri=NEON['PM2.5betaQM'], domain=None, range=Optional[float])

slots.PM2.5finalQF = Slot(uri=NEON['PM2.5finalQF'], name="PM2.5finalQF", curie=NEON.curie('PM2.5finalQF'),
                      model_uri=NEON['PM2.5finalQF'], domain=None, range=Optional[str])

slots.PM1Median = Slot(uri=NEON.PM1Median, name="PM1Median", curie=NEON.curie('PM1Median'),
                      model_uri=NEON.PM1Median, domain=None, range=Optional[float])

slots.PM1Minimum = Slot(uri=NEON.PM1Minimum, name="PM1Minimum", curie=NEON.curie('PM1Minimum'),
                      model_uri=NEON.PM1Minimum, domain=None, range=Optional[float])

slots.PM1Maximum = Slot(uri=NEON.PM1Maximum, name="PM1Maximum", curie=NEON.curie('PM1Maximum'),
                      model_uri=NEON.PM1Maximum, domain=None, range=Optional[float])

slots.PM1NumPts = Slot(uri=NEON.PM1NumPts, name="PM1NumPts", curie=NEON.curie('PM1NumPts'),
                      model_uri=NEON.PM1NumPts, domain=None, range=Optional[float])

slots.PM1MAD = Slot(uri=NEON.PM1MAD, name="PM1MAD", curie=NEON.curie('PM1MAD'),
                      model_uri=NEON.PM1MAD, domain=None, range=Optional[float])

slots.PM1rangeQAQCRpt = Slot(uri=NEON.PM1rangeQAQCRpt, name="PM1rangeQAQCRpt", curie=NEON.curie('PM1rangeQAQCRpt'),
                      model_uri=NEON.PM1rangeQAQCRpt, domain=None, range=Optional[str])

slots.PM1persistenceQAQCRpt = Slot(uri=NEON.PM1persistenceQAQCRpt, name="PM1persistenceQAQCRpt", curie=NEON.curie('PM1persistenceQAQCRpt'),
                      model_uri=NEON.PM1persistenceQAQCRpt, domain=None, range=Optional[str])

slots.PM1stepQAQCRpt = Slot(uri=NEON.PM1stepQAQCRpt, name="PM1stepQAQCRpt", curie=NEON.curie('PM1stepQAQCRpt'),
                      model_uri=NEON.PM1stepQAQCRpt, domain=None, range=Optional[str])

slots.PM1nullQAQCRpt = Slot(uri=NEON.PM1nullQAQCRpt, name="PM1nullQAQCRpt", curie=NEON.curie('PM1nullQAQCRpt'),
                      model_uri=NEON.PM1nullQAQCRpt, domain=None, range=Optional[str])

slots.PM1gapQAQCRpt = Slot(uri=NEON.PM1gapQAQCRpt, name="PM1gapQAQCRpt", curie=NEON.curie('PM1gapQAQCRpt'),
                      model_uri=NEON.PM1gapQAQCRpt, domain=None, range=Optional[str])

slots.PM1consistencyQAQCRpt = Slot(uri=NEON.PM1consistencyQAQCRpt, name="PM1consistencyQAQCRpt", curie=NEON.curie('PM1consistencyQAQCRpt'),
                      model_uri=NEON.PM1consistencyQAQCRpt, domain=None, range=Optional[str])

slots.PM1spikeQAQCRpt = Slot(uri=NEON.PM1spikeQAQCRpt, name="PM1spikeQAQCRpt", curie=NEON.curie('PM1spikeQAQCRpt'),
                      model_uri=NEON.PM1spikeQAQCRpt, domain=None, range=Optional[str])

slots.PM1alphaQAQCRpt = Slot(uri=NEON.PM1alphaQAQCRpt, name="PM1alphaQAQCRpt", curie=NEON.curie('PM1alphaQAQCRpt'),
                      model_uri=NEON.PM1alphaQAQCRpt, domain=None, range=Optional[str])

slots.PM1betaQAQCRpt = Slot(uri=NEON.PM1betaQAQCRpt, name="PM1betaQAQCRpt", curie=NEON.curie('PM1betaQAQCRpt'),
                      model_uri=NEON.PM1betaQAQCRpt, domain=None, range=Optional[str])

slots.PM1rangeFailQM = Slot(uri=NEON.PM1rangeFailQM, name="PM1rangeFailQM", curie=NEON.curie('PM1rangeFailQM'),
                      model_uri=NEON.PM1rangeFailQM, domain=None, range=Optional[float])

slots.PM1rangePassQM = Slot(uri=NEON.PM1rangePassQM, name="PM1rangePassQM", curie=NEON.curie('PM1rangePassQM'),
                      model_uri=NEON.PM1rangePassQM, domain=None, range=Optional[float])

slots.PM1rangeNAQM = Slot(uri=NEON.PM1rangeNAQM, name="PM1rangeNAQM", curie=NEON.curie('PM1rangeNAQM'),
                      model_uri=NEON.PM1rangeNAQM, domain=None, range=Optional[float])

slots.PM1persistenceFailQM = Slot(uri=NEON.PM1persistenceFailQM, name="PM1persistenceFailQM", curie=NEON.curie('PM1persistenceFailQM'),
                      model_uri=NEON.PM1persistenceFailQM, domain=None, range=Optional[float])

slots.PM1persistencePassQM = Slot(uri=NEON.PM1persistencePassQM, name="PM1persistencePassQM", curie=NEON.curie('PM1persistencePassQM'),
                      model_uri=NEON.PM1persistencePassQM, domain=None, range=Optional[float])

slots.PM1persistenceNAQM = Slot(uri=NEON.PM1persistenceNAQM, name="PM1persistenceNAQM", curie=NEON.curie('PM1persistenceNAQM'),
                      model_uri=NEON.PM1persistenceNAQM, domain=None, range=Optional[float])

slots.PM1stepFailQM = Slot(uri=NEON.PM1stepFailQM, name="PM1stepFailQM", curie=NEON.curie('PM1stepFailQM'),
                      model_uri=NEON.PM1stepFailQM, domain=None, range=Optional[float])

slots.PM1stepPassQM = Slot(uri=NEON.PM1stepPassQM, name="PM1stepPassQM", curie=NEON.curie('PM1stepPassQM'),
                      model_uri=NEON.PM1stepPassQM, domain=None, range=Optional[float])

slots.PM1stepNAQM = Slot(uri=NEON.PM1stepNAQM, name="PM1stepNAQM", curie=NEON.curie('PM1stepNAQM'),
                      model_uri=NEON.PM1stepNAQM, domain=None, range=Optional[float])

slots.PM1nullFailQM = Slot(uri=NEON.PM1nullFailQM, name="PM1nullFailQM", curie=NEON.curie('PM1nullFailQM'),
                      model_uri=NEON.PM1nullFailQM, domain=None, range=Optional[float])

slots.PM1nullPassQM = Slot(uri=NEON.PM1nullPassQM, name="PM1nullPassQM", curie=NEON.curie('PM1nullPassQM'),
                      model_uri=NEON.PM1nullPassQM, domain=None, range=Optional[float])

slots.PM1nullNAQM = Slot(uri=NEON.PM1nullNAQM, name="PM1nullNAQM", curie=NEON.curie('PM1nullNAQM'),
                      model_uri=NEON.PM1nullNAQM, domain=None, range=Optional[float])

slots.PM1gapFailQM = Slot(uri=NEON.PM1gapFailQM, name="PM1gapFailQM", curie=NEON.curie('PM1gapFailQM'),
                      model_uri=NEON.PM1gapFailQM, domain=None, range=Optional[float])

slots.PM1gapPassQM = Slot(uri=NEON.PM1gapPassQM, name="PM1gapPassQM", curie=NEON.curie('PM1gapPassQM'),
                      model_uri=NEON.PM1gapPassQM, domain=None, range=Optional[float])

slots.PM1gapNAQM = Slot(uri=NEON.PM1gapNAQM, name="PM1gapNAQM", curie=NEON.curie('PM1gapNAQM'),
                      model_uri=NEON.PM1gapNAQM, domain=None, range=Optional[float])

slots.PM1spikeFailQM = Slot(uri=NEON.PM1spikeFailQM, name="PM1spikeFailQM", curie=NEON.curie('PM1spikeFailQM'),
                      model_uri=NEON.PM1spikeFailQM, domain=None, range=Optional[float])

slots.PM1spikePassQM = Slot(uri=NEON.PM1spikePassQM, name="PM1spikePassQM", curie=NEON.curie('PM1spikePassQM'),
                      model_uri=NEON.PM1spikePassQM, domain=None, range=Optional[float])

slots.PM1spikeNAQM = Slot(uri=NEON.PM1spikeNAQM, name="PM1spikeNAQM", curie=NEON.curie('PM1spikeNAQM'),
                      model_uri=NEON.PM1spikeNAQM, domain=None, range=Optional[float])

slots.PM1consistencyFailQM = Slot(uri=NEON.PM1consistencyFailQM, name="PM1consistencyFailQM", curie=NEON.curie('PM1consistencyFailQM'),
                      model_uri=NEON.PM1consistencyFailQM, domain=None, range=Optional[float])

slots.PM1consistencyPassQM = Slot(uri=NEON.PM1consistencyPassQM, name="PM1consistencyPassQM", curie=NEON.curie('PM1consistencyPassQM'),
                      model_uri=NEON.PM1consistencyPassQM, domain=None, range=Optional[float])

slots.PM1consistencyNAQM = Slot(uri=NEON.PM1consistencyNAQM, name="PM1consistencyNAQM", curie=NEON.curie('PM1consistencyNAQM'),
                      model_uri=NEON.PM1consistencyNAQM, domain=None, range=Optional[float])

slots.PM1alphaQM = Slot(uri=NEON.PM1alphaQM, name="PM1alphaQM", curie=NEON.curie('PM1alphaQM'),
                      model_uri=NEON.PM1alphaQM, domain=None, range=Optional[float])

slots.PM1betaQM = Slot(uri=NEON.PM1betaQM, name="PM1betaQM", curie=NEON.curie('PM1betaQM'),
                      model_uri=NEON.PM1betaQM, domain=None, range=Optional[float])

slots.PM1finalQF = Slot(uri=NEON.PM1finalQF, name="PM1finalQF", curie=NEON.curie('PM1finalQF'),
                      model_uri=NEON.PM1finalQF, domain=None, range=Optional[str])

slots.PM15sub50RHMedian = Slot(uri=NEON.PM15sub50RHMedian, name="PM15sub50RHMedian", curie=NEON.curie('PM15sub50RHMedian'),
                      model_uri=NEON.PM15sub50RHMedian, domain=None, range=Optional[float])

slots.PM15sub50RHMinimum = Slot(uri=NEON.PM15sub50RHMinimum, name="PM15sub50RHMinimum", curie=NEON.curie('PM15sub50RHMinimum'),
                      model_uri=NEON.PM15sub50RHMinimum, domain=None, range=Optional[float])

slots.PM15sub50RHMaximum = Slot(uri=NEON.PM15sub50RHMaximum, name="PM15sub50RHMaximum", curie=NEON.curie('PM15sub50RHMaximum'),
                      model_uri=NEON.PM15sub50RHMaximum, domain=None, range=Optional[float])

slots.PM15sub50RHNumPts = Slot(uri=NEON.PM15sub50RHNumPts, name="PM15sub50RHNumPts", curie=NEON.curie('PM15sub50RHNumPts'),
                      model_uri=NEON.PM15sub50RHNumPts, domain=None, range=Optional[float])

slots.PM15sub50RHMAD = Slot(uri=NEON.PM15sub50RHMAD, name="PM15sub50RHMAD", curie=NEON.curie('PM15sub50RHMAD'),
                      model_uri=NEON.PM15sub50RHMAD, domain=None, range=Optional[float])

slots.PM15sub50RHrangeQAQCRpt = Slot(uri=NEON.PM15sub50RHrangeQAQCRpt, name="PM15sub50RHrangeQAQCRpt", curie=NEON.curie('PM15sub50RHrangeQAQCRpt'),
                      model_uri=NEON.PM15sub50RHrangeQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHpersistenceQAQCRpt = Slot(uri=NEON.PM15sub50RHpersistenceQAQCRpt, name="PM15sub50RHpersistenceQAQCRpt", curie=NEON.curie('PM15sub50RHpersistenceQAQCRpt'),
                      model_uri=NEON.PM15sub50RHpersistenceQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHstepQAQCRpt = Slot(uri=NEON.PM15sub50RHstepQAQCRpt, name="PM15sub50RHstepQAQCRpt", curie=NEON.curie('PM15sub50RHstepQAQCRpt'),
                      model_uri=NEON.PM15sub50RHstepQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHnullQAQCRpt = Slot(uri=NEON.PM15sub50RHnullQAQCRpt, name="PM15sub50RHnullQAQCRpt", curie=NEON.curie('PM15sub50RHnullQAQCRpt'),
                      model_uri=NEON.PM15sub50RHnullQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHgapQAQCRpt = Slot(uri=NEON.PM15sub50RHgapQAQCRpt, name="PM15sub50RHgapQAQCRpt", curie=NEON.curie('PM15sub50RHgapQAQCRpt'),
                      model_uri=NEON.PM15sub50RHgapQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHconsistencyQAQCRpt = Slot(uri=NEON.PM15sub50RHconsistencyQAQCRpt, name="PM15sub50RHconsistencyQAQCRpt", curie=NEON.curie('PM15sub50RHconsistencyQAQCRpt'),
                      model_uri=NEON.PM15sub50RHconsistencyQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHspikeQAQCRpt = Slot(uri=NEON.PM15sub50RHspikeQAQCRpt, name="PM15sub50RHspikeQAQCRpt", curie=NEON.curie('PM15sub50RHspikeQAQCRpt'),
                      model_uri=NEON.PM15sub50RHspikeQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHalphaQAQCRpt = Slot(uri=NEON.PM15sub50RHalphaQAQCRpt, name="PM15sub50RHalphaQAQCRpt", curie=NEON.curie('PM15sub50RHalphaQAQCRpt'),
                      model_uri=NEON.PM15sub50RHalphaQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHbetaQAQCRpt = Slot(uri=NEON.PM15sub50RHbetaQAQCRpt, name="PM15sub50RHbetaQAQCRpt", curie=NEON.curie('PM15sub50RHbetaQAQCRpt'),
                      model_uri=NEON.PM15sub50RHbetaQAQCRpt, domain=None, range=Optional[str])

slots.PM15sub50RHrangeFailQM = Slot(uri=NEON.PM15sub50RHrangeFailQM, name="PM15sub50RHrangeFailQM", curie=NEON.curie('PM15sub50RHrangeFailQM'),
                      model_uri=NEON.PM15sub50RHrangeFailQM, domain=None, range=Optional[float])

slots.PM15sub50RHrangePassQM = Slot(uri=NEON.PM15sub50RHrangePassQM, name="PM15sub50RHrangePassQM", curie=NEON.curie('PM15sub50RHrangePassQM'),
                      model_uri=NEON.PM15sub50RHrangePassQM, domain=None, range=Optional[float])

slots.PM15sub50RHrangeNAQM = Slot(uri=NEON.PM15sub50RHrangeNAQM, name="PM15sub50RHrangeNAQM", curie=NEON.curie('PM15sub50RHrangeNAQM'),
                      model_uri=NEON.PM15sub50RHrangeNAQM, domain=None, range=Optional[float])

slots.PM15sub50RHpersistenceFailQM = Slot(uri=NEON.PM15sub50RHpersistenceFailQM, name="PM15sub50RHpersistenceFailQM", curie=NEON.curie('PM15sub50RHpersistenceFailQM'),
                      model_uri=NEON.PM15sub50RHpersistenceFailQM, domain=None, range=Optional[float])

slots.PM15sub50RHpersistencePassQM = Slot(uri=NEON.PM15sub50RHpersistencePassQM, name="PM15sub50RHpersistencePassQM", curie=NEON.curie('PM15sub50RHpersistencePassQM'),
                      model_uri=NEON.PM15sub50RHpersistencePassQM, domain=None, range=Optional[float])

slots.PM15sub50RHpersistenceNAQM = Slot(uri=NEON.PM15sub50RHpersistenceNAQM, name="PM15sub50RHpersistenceNAQM", curie=NEON.curie('PM15sub50RHpersistenceNAQM'),
                      model_uri=NEON.PM15sub50RHpersistenceNAQM, domain=None, range=Optional[float])

slots.PM15sub50RHstepFailQM = Slot(uri=NEON.PM15sub50RHstepFailQM, name="PM15sub50RHstepFailQM", curie=NEON.curie('PM15sub50RHstepFailQM'),
                      model_uri=NEON.PM15sub50RHstepFailQM, domain=None, range=Optional[float])

slots.PM15sub50RHstepPassQM = Slot(uri=NEON.PM15sub50RHstepPassQM, name="PM15sub50RHstepPassQM", curie=NEON.curie('PM15sub50RHstepPassQM'),
                      model_uri=NEON.PM15sub50RHstepPassQM, domain=None, range=Optional[float])

slots.PM15sub50RHstepNAQM = Slot(uri=NEON.PM15sub50RHstepNAQM, name="PM15sub50RHstepNAQM", curie=NEON.curie('PM15sub50RHstepNAQM'),
                      model_uri=NEON.PM15sub50RHstepNAQM, domain=None, range=Optional[float])

slots.PM15sub50RHnullFailQM = Slot(uri=NEON.PM15sub50RHnullFailQM, name="PM15sub50RHnullFailQM", curie=NEON.curie('PM15sub50RHnullFailQM'),
                      model_uri=NEON.PM15sub50RHnullFailQM, domain=None, range=Optional[float])

slots.PM15sub50RHnullPassQM = Slot(uri=NEON.PM15sub50RHnullPassQM, name="PM15sub50RHnullPassQM", curie=NEON.curie('PM15sub50RHnullPassQM'),
                      model_uri=NEON.PM15sub50RHnullPassQM, domain=None, range=Optional[float])

slots.PM15sub50RHnullNAQM = Slot(uri=NEON.PM15sub50RHnullNAQM, name="PM15sub50RHnullNAQM", curie=NEON.curie('PM15sub50RHnullNAQM'),
                      model_uri=NEON.PM15sub50RHnullNAQM, domain=None, range=Optional[float])

slots.PM15sub50RHgapFailQM = Slot(uri=NEON.PM15sub50RHgapFailQM, name="PM15sub50RHgapFailQM", curie=NEON.curie('PM15sub50RHgapFailQM'),
                      model_uri=NEON.PM15sub50RHgapFailQM, domain=None, range=Optional[float])

slots.PM15sub50RHgapPassQM = Slot(uri=NEON.PM15sub50RHgapPassQM, name="PM15sub50RHgapPassQM", curie=NEON.curie('PM15sub50RHgapPassQM'),
                      model_uri=NEON.PM15sub50RHgapPassQM, domain=None, range=Optional[float])

slots.PM15sub50RHgapNAQM = Slot(uri=NEON.PM15sub50RHgapNAQM, name="PM15sub50RHgapNAQM", curie=NEON.curie('PM15sub50RHgapNAQM'),
                      model_uri=NEON.PM15sub50RHgapNAQM, domain=None, range=Optional[float])

slots.PM15sub50RHspikeFailQM = Slot(uri=NEON.PM15sub50RHspikeFailQM, name="PM15sub50RHspikeFailQM", curie=NEON.curie('PM15sub50RHspikeFailQM'),
                      model_uri=NEON.PM15sub50RHspikeFailQM, domain=None, range=Optional[float])

slots.PM15sub50RHspikePassQM = Slot(uri=NEON.PM15sub50RHspikePassQM, name="PM15sub50RHspikePassQM", curie=NEON.curie('PM15sub50RHspikePassQM'),
                      model_uri=NEON.PM15sub50RHspikePassQM, domain=None, range=Optional[float])

slots.PM15sub50RHspikeNAQM = Slot(uri=NEON.PM15sub50RHspikeNAQM, name="PM15sub50RHspikeNAQM", curie=NEON.curie('PM15sub50RHspikeNAQM'),
                      model_uri=NEON.PM15sub50RHspikeNAQM, domain=None, range=Optional[float])

slots.PM15sub50RHconsistencyFailQM = Slot(uri=NEON.PM15sub50RHconsistencyFailQM, name="PM15sub50RHconsistencyFailQM", curie=NEON.curie('PM15sub50RHconsistencyFailQM'),
                      model_uri=NEON.PM15sub50RHconsistencyFailQM, domain=None, range=Optional[float])

slots.PM15sub50RHconsistencyPassQM = Slot(uri=NEON.PM15sub50RHconsistencyPassQM, name="PM15sub50RHconsistencyPassQM", curie=NEON.curie('PM15sub50RHconsistencyPassQM'),
                      model_uri=NEON.PM15sub50RHconsistencyPassQM, domain=None, range=Optional[float])

slots.PM15sub50RHconsistencyNAQM = Slot(uri=NEON.PM15sub50RHconsistencyNAQM, name="PM15sub50RHconsistencyNAQM", curie=NEON.curie('PM15sub50RHconsistencyNAQM'),
                      model_uri=NEON.PM15sub50RHconsistencyNAQM, domain=None, range=Optional[float])

slots.PM15sub50RHalphaQM = Slot(uri=NEON.PM15sub50RHalphaQM, name="PM15sub50RHalphaQM", curie=NEON.curie('PM15sub50RHalphaQM'),
                      model_uri=NEON.PM15sub50RHalphaQM, domain=None, range=Optional[float])

slots.PM15sub50RHbetaQM = Slot(uri=NEON.PM15sub50RHbetaQM, name="PM15sub50RHbetaQM", curie=NEON.curie('PM15sub50RHbetaQM'),
                      model_uri=NEON.PM15sub50RHbetaQM, domain=None, range=Optional[float])

slots.PM15sub50RHfinalQF = Slot(uri=NEON.PM15sub50RHfinalQF, name="PM15sub50RHfinalQF", curie=NEON.curie('PM15sub50RHfinalQF'),
                      model_uri=NEON.PM15sub50RHfinalQF, domain=None, range=Optional[str])

slots.PM10sub50RHMedian = Slot(uri=NEON.PM10sub50RHMedian, name="PM10sub50RHMedian", curie=NEON.curie('PM10sub50RHMedian'),
                      model_uri=NEON.PM10sub50RHMedian, domain=None, range=Optional[float])

slots.PM10sub50RHMinimum = Slot(uri=NEON.PM10sub50RHMinimum, name="PM10sub50RHMinimum", curie=NEON.curie('PM10sub50RHMinimum'),
                      model_uri=NEON.PM10sub50RHMinimum, domain=None, range=Optional[float])

slots.PM10sub50RHMaximum = Slot(uri=NEON.PM10sub50RHMaximum, name="PM10sub50RHMaximum", curie=NEON.curie('PM10sub50RHMaximum'),
                      model_uri=NEON.PM10sub50RHMaximum, domain=None, range=Optional[float])

slots.PM10sub50RHNumPts = Slot(uri=NEON.PM10sub50RHNumPts, name="PM10sub50RHNumPts", curie=NEON.curie('PM10sub50RHNumPts'),
                      model_uri=NEON.PM10sub50RHNumPts, domain=None, range=Optional[float])

slots.PM10sub50RHMAD = Slot(uri=NEON.PM10sub50RHMAD, name="PM10sub50RHMAD", curie=NEON.curie('PM10sub50RHMAD'),
                      model_uri=NEON.PM10sub50RHMAD, domain=None, range=Optional[float])

slots.PM10sub50RHrangeQAQCRpt = Slot(uri=NEON.PM10sub50RHrangeQAQCRpt, name="PM10sub50RHrangeQAQCRpt", curie=NEON.curie('PM10sub50RHrangeQAQCRpt'),
                      model_uri=NEON.PM10sub50RHrangeQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHpersistenceQAQCRpt = Slot(uri=NEON.PM10sub50RHpersistenceQAQCRpt, name="PM10sub50RHpersistenceQAQCRpt", curie=NEON.curie('PM10sub50RHpersistenceQAQCRpt'),
                      model_uri=NEON.PM10sub50RHpersistenceQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHstepQAQCRpt = Slot(uri=NEON.PM10sub50RHstepQAQCRpt, name="PM10sub50RHstepQAQCRpt", curie=NEON.curie('PM10sub50RHstepQAQCRpt'),
                      model_uri=NEON.PM10sub50RHstepQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHnullQAQCRpt = Slot(uri=NEON.PM10sub50RHnullQAQCRpt, name="PM10sub50RHnullQAQCRpt", curie=NEON.curie('PM10sub50RHnullQAQCRpt'),
                      model_uri=NEON.PM10sub50RHnullQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHgapQAQCRpt = Slot(uri=NEON.PM10sub50RHgapQAQCRpt, name="PM10sub50RHgapQAQCRpt", curie=NEON.curie('PM10sub50RHgapQAQCRpt'),
                      model_uri=NEON.PM10sub50RHgapQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHconsistencyQAQCRpt = Slot(uri=NEON.PM10sub50RHconsistencyQAQCRpt, name="PM10sub50RHconsistencyQAQCRpt", curie=NEON.curie('PM10sub50RHconsistencyQAQCRpt'),
                      model_uri=NEON.PM10sub50RHconsistencyQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHspikeQAQCRpt = Slot(uri=NEON.PM10sub50RHspikeQAQCRpt, name="PM10sub50RHspikeQAQCRpt", curie=NEON.curie('PM10sub50RHspikeQAQCRpt'),
                      model_uri=NEON.PM10sub50RHspikeQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHalphaQAQCRpt = Slot(uri=NEON.PM10sub50RHalphaQAQCRpt, name="PM10sub50RHalphaQAQCRpt", curie=NEON.curie('PM10sub50RHalphaQAQCRpt'),
                      model_uri=NEON.PM10sub50RHalphaQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHbetaQAQCRpt = Slot(uri=NEON.PM10sub50RHbetaQAQCRpt, name="PM10sub50RHbetaQAQCRpt", curie=NEON.curie('PM10sub50RHbetaQAQCRpt'),
                      model_uri=NEON.PM10sub50RHbetaQAQCRpt, domain=None, range=Optional[str])

slots.PM10sub50RHrangeFailQM = Slot(uri=NEON.PM10sub50RHrangeFailQM, name="PM10sub50RHrangeFailQM", curie=NEON.curie('PM10sub50RHrangeFailQM'),
                      model_uri=NEON.PM10sub50RHrangeFailQM, domain=None, range=Optional[float])

slots.PM10sub50RHrangePassQM = Slot(uri=NEON.PM10sub50RHrangePassQM, name="PM10sub50RHrangePassQM", curie=NEON.curie('PM10sub50RHrangePassQM'),
                      model_uri=NEON.PM10sub50RHrangePassQM, domain=None, range=Optional[float])

slots.PM10sub50RHrangeNAQM = Slot(uri=NEON.PM10sub50RHrangeNAQM, name="PM10sub50RHrangeNAQM", curie=NEON.curie('PM10sub50RHrangeNAQM'),
                      model_uri=NEON.PM10sub50RHrangeNAQM, domain=None, range=Optional[float])

slots.PM10sub50RHpersistenceFailQM = Slot(uri=NEON.PM10sub50RHpersistenceFailQM, name="PM10sub50RHpersistenceFailQM", curie=NEON.curie('PM10sub50RHpersistenceFailQM'),
                      model_uri=NEON.PM10sub50RHpersistenceFailQM, domain=None, range=Optional[float])

slots.PM10sub50RHpersistencePassQM = Slot(uri=NEON.PM10sub50RHpersistencePassQM, name="PM10sub50RHpersistencePassQM", curie=NEON.curie('PM10sub50RHpersistencePassQM'),
                      model_uri=NEON.PM10sub50RHpersistencePassQM, domain=None, range=Optional[float])

slots.PM10sub50RHpersistenceNAQM = Slot(uri=NEON.PM10sub50RHpersistenceNAQM, name="PM10sub50RHpersistenceNAQM", curie=NEON.curie('PM10sub50RHpersistenceNAQM'),
                      model_uri=NEON.PM10sub50RHpersistenceNAQM, domain=None, range=Optional[float])

slots.PM10sub50RHstepFailQM = Slot(uri=NEON.PM10sub50RHstepFailQM, name="PM10sub50RHstepFailQM", curie=NEON.curie('PM10sub50RHstepFailQM'),
                      model_uri=NEON.PM10sub50RHstepFailQM, domain=None, range=Optional[float])

slots.PM10sub50RHstepPassQM = Slot(uri=NEON.PM10sub50RHstepPassQM, name="PM10sub50RHstepPassQM", curie=NEON.curie('PM10sub50RHstepPassQM'),
                      model_uri=NEON.PM10sub50RHstepPassQM, domain=None, range=Optional[float])

slots.PM10sub50RHstepNAQM = Slot(uri=NEON.PM10sub50RHstepNAQM, name="PM10sub50RHstepNAQM", curie=NEON.curie('PM10sub50RHstepNAQM'),
                      model_uri=NEON.PM10sub50RHstepNAQM, domain=None, range=Optional[float])

slots.PM10sub50RHnullFailQM = Slot(uri=NEON.PM10sub50RHnullFailQM, name="PM10sub50RHnullFailQM", curie=NEON.curie('PM10sub50RHnullFailQM'),
                      model_uri=NEON.PM10sub50RHnullFailQM, domain=None, range=Optional[float])

slots.PM10sub50RHnullPassQM = Slot(uri=NEON.PM10sub50RHnullPassQM, name="PM10sub50RHnullPassQM", curie=NEON.curie('PM10sub50RHnullPassQM'),
                      model_uri=NEON.PM10sub50RHnullPassQM, domain=None, range=Optional[float])

slots.PM10sub50RHnullNAQM = Slot(uri=NEON.PM10sub50RHnullNAQM, name="PM10sub50RHnullNAQM", curie=NEON.curie('PM10sub50RHnullNAQM'),
                      model_uri=NEON.PM10sub50RHnullNAQM, domain=None, range=Optional[float])

slots.PM10sub50RHgapFailQM = Slot(uri=NEON.PM10sub50RHgapFailQM, name="PM10sub50RHgapFailQM", curie=NEON.curie('PM10sub50RHgapFailQM'),
                      model_uri=NEON.PM10sub50RHgapFailQM, domain=None, range=Optional[float])

slots.PM10sub50RHgapPassQM = Slot(uri=NEON.PM10sub50RHgapPassQM, name="PM10sub50RHgapPassQM", curie=NEON.curie('PM10sub50RHgapPassQM'),
                      model_uri=NEON.PM10sub50RHgapPassQM, domain=None, range=Optional[float])

slots.PM10sub50RHgapNAQM = Slot(uri=NEON.PM10sub50RHgapNAQM, name="PM10sub50RHgapNAQM", curie=NEON.curie('PM10sub50RHgapNAQM'),
                      model_uri=NEON.PM10sub50RHgapNAQM, domain=None, range=Optional[float])

slots.PM10sub50RHspikeFailQM = Slot(uri=NEON.PM10sub50RHspikeFailQM, name="PM10sub50RHspikeFailQM", curie=NEON.curie('PM10sub50RHspikeFailQM'),
                      model_uri=NEON.PM10sub50RHspikeFailQM, domain=None, range=Optional[float])

slots.PM10sub50RHspikePassQM = Slot(uri=NEON.PM10sub50RHspikePassQM, name="PM10sub50RHspikePassQM", curie=NEON.curie('PM10sub50RHspikePassQM'),
                      model_uri=NEON.PM10sub50RHspikePassQM, domain=None, range=Optional[float])

slots.PM10sub50RHspikeNAQM = Slot(uri=NEON.PM10sub50RHspikeNAQM, name="PM10sub50RHspikeNAQM", curie=NEON.curie('PM10sub50RHspikeNAQM'),
                      model_uri=NEON.PM10sub50RHspikeNAQM, domain=None, range=Optional[float])

slots.PM10sub50RHconsistencyFailQM = Slot(uri=NEON.PM10sub50RHconsistencyFailQM, name="PM10sub50RHconsistencyFailQM", curie=NEON.curie('PM10sub50RHconsistencyFailQM'),
                      model_uri=NEON.PM10sub50RHconsistencyFailQM, domain=None, range=Optional[float])

slots.PM10sub50RHconsistencyPassQM = Slot(uri=NEON.PM10sub50RHconsistencyPassQM, name="PM10sub50RHconsistencyPassQM", curie=NEON.curie('PM10sub50RHconsistencyPassQM'),
                      model_uri=NEON.PM10sub50RHconsistencyPassQM, domain=None, range=Optional[float])

slots.PM10sub50RHconsistencyNAQM = Slot(uri=NEON.PM10sub50RHconsistencyNAQM, name="PM10sub50RHconsistencyNAQM", curie=NEON.curie('PM10sub50RHconsistencyNAQM'),
                      model_uri=NEON.PM10sub50RHconsistencyNAQM, domain=None, range=Optional[float])

slots.PM10sub50RHalphaQM = Slot(uri=NEON.PM10sub50RHalphaQM, name="PM10sub50RHalphaQM", curie=NEON.curie('PM10sub50RHalphaQM'),
                      model_uri=NEON.PM10sub50RHalphaQM, domain=None, range=Optional[float])

slots.PM10sub50RHbetaQM = Slot(uri=NEON.PM10sub50RHbetaQM, name="PM10sub50RHbetaQM", curie=NEON.curie('PM10sub50RHbetaQM'),
                      model_uri=NEON.PM10sub50RHbetaQM, domain=None, range=Optional[float])

slots.PM10sub50RHfinalQF = Slot(uri=NEON.PM10sub50RHfinalQF, name="PM10sub50RHfinalQF", curie=NEON.curie('PM10sub50RHfinalQF'),
                      model_uri=NEON.PM10sub50RHfinalQF, domain=None, range=Optional[str])

slots.PM4sub50RHMedian = Slot(uri=NEON.PM4sub50RHMedian, name="PM4sub50RHMedian", curie=NEON.curie('PM4sub50RHMedian'),
                      model_uri=NEON.PM4sub50RHMedian, domain=None, range=Optional[float])

slots.PM4sub50RHMinimum = Slot(uri=NEON.PM4sub50RHMinimum, name="PM4sub50RHMinimum", curie=NEON.curie('PM4sub50RHMinimum'),
                      model_uri=NEON.PM4sub50RHMinimum, domain=None, range=Optional[float])

slots.PM4sub50RHMaximum = Slot(uri=NEON.PM4sub50RHMaximum, name="PM4sub50RHMaximum", curie=NEON.curie('PM4sub50RHMaximum'),
                      model_uri=NEON.PM4sub50RHMaximum, domain=None, range=Optional[float])

slots.PM4sub50RHNumPts = Slot(uri=NEON.PM4sub50RHNumPts, name="PM4sub50RHNumPts", curie=NEON.curie('PM4sub50RHNumPts'),
                      model_uri=NEON.PM4sub50RHNumPts, domain=None, range=Optional[float])

slots.PM4sub50RHMAD = Slot(uri=NEON.PM4sub50RHMAD, name="PM4sub50RHMAD", curie=NEON.curie('PM4sub50RHMAD'),
                      model_uri=NEON.PM4sub50RHMAD, domain=None, range=Optional[float])

slots.PM4sub50RHrangeQAQCRpt = Slot(uri=NEON.PM4sub50RHrangeQAQCRpt, name="PM4sub50RHrangeQAQCRpt", curie=NEON.curie('PM4sub50RHrangeQAQCRpt'),
                      model_uri=NEON.PM4sub50RHrangeQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHpersistenceQAQCRpt = Slot(uri=NEON.PM4sub50RHpersistenceQAQCRpt, name="PM4sub50RHpersistenceQAQCRpt", curie=NEON.curie('PM4sub50RHpersistenceQAQCRpt'),
                      model_uri=NEON.PM4sub50RHpersistenceQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHstepQAQCRpt = Slot(uri=NEON.PM4sub50RHstepQAQCRpt, name="PM4sub50RHstepQAQCRpt", curie=NEON.curie('PM4sub50RHstepQAQCRpt'),
                      model_uri=NEON.PM4sub50RHstepQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHnullQAQCRpt = Slot(uri=NEON.PM4sub50RHnullQAQCRpt, name="PM4sub50RHnullQAQCRpt", curie=NEON.curie('PM4sub50RHnullQAQCRpt'),
                      model_uri=NEON.PM4sub50RHnullQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHgapQAQCRpt = Slot(uri=NEON.PM4sub50RHgapQAQCRpt, name="PM4sub50RHgapQAQCRpt", curie=NEON.curie('PM4sub50RHgapQAQCRpt'),
                      model_uri=NEON.PM4sub50RHgapQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHconsistencyQAQCRpt = Slot(uri=NEON.PM4sub50RHconsistencyQAQCRpt, name="PM4sub50RHconsistencyQAQCRpt", curie=NEON.curie('PM4sub50RHconsistencyQAQCRpt'),
                      model_uri=NEON.PM4sub50RHconsistencyQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHspikeQAQCRpt = Slot(uri=NEON.PM4sub50RHspikeQAQCRpt, name="PM4sub50RHspikeQAQCRpt", curie=NEON.curie('PM4sub50RHspikeQAQCRpt'),
                      model_uri=NEON.PM4sub50RHspikeQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHalphaQAQCRpt = Slot(uri=NEON.PM4sub50RHalphaQAQCRpt, name="PM4sub50RHalphaQAQCRpt", curie=NEON.curie('PM4sub50RHalphaQAQCRpt'),
                      model_uri=NEON.PM4sub50RHalphaQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHbetaQAQCRpt = Slot(uri=NEON.PM4sub50RHbetaQAQCRpt, name="PM4sub50RHbetaQAQCRpt", curie=NEON.curie('PM4sub50RHbetaQAQCRpt'),
                      model_uri=NEON.PM4sub50RHbetaQAQCRpt, domain=None, range=Optional[str])

slots.PM4sub50RHrangeFailQM = Slot(uri=NEON.PM4sub50RHrangeFailQM, name="PM4sub50RHrangeFailQM", curie=NEON.curie('PM4sub50RHrangeFailQM'),
                      model_uri=NEON.PM4sub50RHrangeFailQM, domain=None, range=Optional[float])

slots.PM4sub50RHrangePassQM = Slot(uri=NEON.PM4sub50RHrangePassQM, name="PM4sub50RHrangePassQM", curie=NEON.curie('PM4sub50RHrangePassQM'),
                      model_uri=NEON.PM4sub50RHrangePassQM, domain=None, range=Optional[float])

slots.PM4sub50RHrangeNAQM = Slot(uri=NEON.PM4sub50RHrangeNAQM, name="PM4sub50RHrangeNAQM", curie=NEON.curie('PM4sub50RHrangeNAQM'),
                      model_uri=NEON.PM4sub50RHrangeNAQM, domain=None, range=Optional[float])

slots.PM4sub50RHpersistenceFailQM = Slot(uri=NEON.PM4sub50RHpersistenceFailQM, name="PM4sub50RHpersistenceFailQM", curie=NEON.curie('PM4sub50RHpersistenceFailQM'),
                      model_uri=NEON.PM4sub50RHpersistenceFailQM, domain=None, range=Optional[float])

slots.PM4sub50RHpersistencePassQM = Slot(uri=NEON.PM4sub50RHpersistencePassQM, name="PM4sub50RHpersistencePassQM", curie=NEON.curie('PM4sub50RHpersistencePassQM'),
                      model_uri=NEON.PM4sub50RHpersistencePassQM, domain=None, range=Optional[float])

slots.PM4sub50RHpersistenceNAQM = Slot(uri=NEON.PM4sub50RHpersistenceNAQM, name="PM4sub50RHpersistenceNAQM", curie=NEON.curie('PM4sub50RHpersistenceNAQM'),
                      model_uri=NEON.PM4sub50RHpersistenceNAQM, domain=None, range=Optional[float])

slots.PM4sub50RHstepFailQM = Slot(uri=NEON.PM4sub50RHstepFailQM, name="PM4sub50RHstepFailQM", curie=NEON.curie('PM4sub50RHstepFailQM'),
                      model_uri=NEON.PM4sub50RHstepFailQM, domain=None, range=Optional[float])

slots.PM4sub50RHstepPassQM = Slot(uri=NEON.PM4sub50RHstepPassQM, name="PM4sub50RHstepPassQM", curie=NEON.curie('PM4sub50RHstepPassQM'),
                      model_uri=NEON.PM4sub50RHstepPassQM, domain=None, range=Optional[float])

slots.PM4sub50RHstepNAQM = Slot(uri=NEON.PM4sub50RHstepNAQM, name="PM4sub50RHstepNAQM", curie=NEON.curie('PM4sub50RHstepNAQM'),
                      model_uri=NEON.PM4sub50RHstepNAQM, domain=None, range=Optional[float])

slots.PM4sub50RHnullFailQM = Slot(uri=NEON.PM4sub50RHnullFailQM, name="PM4sub50RHnullFailQM", curie=NEON.curie('PM4sub50RHnullFailQM'),
                      model_uri=NEON.PM4sub50RHnullFailQM, domain=None, range=Optional[float])

slots.PM4sub50RHnullPassQM = Slot(uri=NEON.PM4sub50RHnullPassQM, name="PM4sub50RHnullPassQM", curie=NEON.curie('PM4sub50RHnullPassQM'),
                      model_uri=NEON.PM4sub50RHnullPassQM, domain=None, range=Optional[float])

slots.PM4sub50RHnullNAQM = Slot(uri=NEON.PM4sub50RHnullNAQM, name="PM4sub50RHnullNAQM", curie=NEON.curie('PM4sub50RHnullNAQM'),
                      model_uri=NEON.PM4sub50RHnullNAQM, domain=None, range=Optional[float])

slots.PM4sub50RHgapFailQM = Slot(uri=NEON.PM4sub50RHgapFailQM, name="PM4sub50RHgapFailQM", curie=NEON.curie('PM4sub50RHgapFailQM'),
                      model_uri=NEON.PM4sub50RHgapFailQM, domain=None, range=Optional[float])

slots.PM4sub50RHgapPassQM = Slot(uri=NEON.PM4sub50RHgapPassQM, name="PM4sub50RHgapPassQM", curie=NEON.curie('PM4sub50RHgapPassQM'),
                      model_uri=NEON.PM4sub50RHgapPassQM, domain=None, range=Optional[float])

slots.PM4sub50RHgapNAQM = Slot(uri=NEON.PM4sub50RHgapNAQM, name="PM4sub50RHgapNAQM", curie=NEON.curie('PM4sub50RHgapNAQM'),
                      model_uri=NEON.PM4sub50RHgapNAQM, domain=None, range=Optional[float])

slots.PM4sub50RHspikeFailQM = Slot(uri=NEON.PM4sub50RHspikeFailQM, name="PM4sub50RHspikeFailQM", curie=NEON.curie('PM4sub50RHspikeFailQM'),
                      model_uri=NEON.PM4sub50RHspikeFailQM, domain=None, range=Optional[float])

slots.PM4sub50RHspikePassQM = Slot(uri=NEON.PM4sub50RHspikePassQM, name="PM4sub50RHspikePassQM", curie=NEON.curie('PM4sub50RHspikePassQM'),
                      model_uri=NEON.PM4sub50RHspikePassQM, domain=None, range=Optional[float])

slots.PM4sub50RHspikeNAQM = Slot(uri=NEON.PM4sub50RHspikeNAQM, name="PM4sub50RHspikeNAQM", curie=NEON.curie('PM4sub50RHspikeNAQM'),
                      model_uri=NEON.PM4sub50RHspikeNAQM, domain=None, range=Optional[float])

slots.PM4sub50RHconsistencyFailQM = Slot(uri=NEON.PM4sub50RHconsistencyFailQM, name="PM4sub50RHconsistencyFailQM", curie=NEON.curie('PM4sub50RHconsistencyFailQM'),
                      model_uri=NEON.PM4sub50RHconsistencyFailQM, domain=None, range=Optional[float])

slots.PM4sub50RHconsistencyPassQM = Slot(uri=NEON.PM4sub50RHconsistencyPassQM, name="PM4sub50RHconsistencyPassQM", curie=NEON.curie('PM4sub50RHconsistencyPassQM'),
                      model_uri=NEON.PM4sub50RHconsistencyPassQM, domain=None, range=Optional[float])

slots.PM4sub50RHconsistencyNAQM = Slot(uri=NEON.PM4sub50RHconsistencyNAQM, name="PM4sub50RHconsistencyNAQM", curie=NEON.curie('PM4sub50RHconsistencyNAQM'),
                      model_uri=NEON.PM4sub50RHconsistencyNAQM, domain=None, range=Optional[float])

slots.PM4sub50RHalphaQM = Slot(uri=NEON.PM4sub50RHalphaQM, name="PM4sub50RHalphaQM", curie=NEON.curie('PM4sub50RHalphaQM'),
                      model_uri=NEON.PM4sub50RHalphaQM, domain=None, range=Optional[float])

slots.PM4sub50RHbetaQM = Slot(uri=NEON.PM4sub50RHbetaQM, name="PM4sub50RHbetaQM", curie=NEON.curie('PM4sub50RHbetaQM'),
                      model_uri=NEON.PM4sub50RHbetaQM, domain=None, range=Optional[float])

slots.PM4sub50RHfinalQF = Slot(uri=NEON.PM4sub50RHfinalQF, name="PM4sub50RHfinalQF", curie=NEON.curie('PM4sub50RHfinalQF'),
                      model_uri=NEON.PM4sub50RHfinalQF, domain=None, range=Optional[str])

slots.PM2.5sub50RHMedian = Slot(uri=NEON['PM2.5sub50RHMedian'], name="PM2.5sub50RHMedian", curie=NEON.curie('PM2.5sub50RHMedian'),
                      model_uri=NEON['PM2.5sub50RHMedian'], domain=None, range=Optional[float])

slots.PM2.5sub50RHMinimum = Slot(uri=NEON['PM2.5sub50RHMinimum'], name="PM2.5sub50RHMinimum", curie=NEON.curie('PM2.5sub50RHMinimum'),
                      model_uri=NEON['PM2.5sub50RHMinimum'], domain=None, range=Optional[float])

slots.PM2.5sub50RHMaximum = Slot(uri=NEON['PM2.5sub50RHMaximum'], name="PM2.5sub50RHMaximum", curie=NEON.curie('PM2.5sub50RHMaximum'),
                      model_uri=NEON['PM2.5sub50RHMaximum'], domain=None, range=Optional[float])

slots.PM2.5sub50RHNumPts = Slot(uri=NEON['PM2.5sub50RHNumPts'], name="PM2.5sub50RHNumPts", curie=NEON.curie('PM2.5sub50RHNumPts'),
                      model_uri=NEON['PM2.5sub50RHNumPts'], domain=None, range=Optional[float])

slots.PM2.5sub50RHMAD = Slot(uri=NEON['PM2.5sub50RHMAD'], name="PM2.5sub50RHMAD", curie=NEON.curie('PM2.5sub50RHMAD'),
                      model_uri=NEON['PM2.5sub50RHMAD'], domain=None, range=Optional[float])

slots.PM2.5sub50RHrangeQAQCRpt = Slot(uri=NEON['PM2.5sub50RHrangeQAQCRpt'], name="PM2.5sub50RHrangeQAQCRpt", curie=NEON.curie('PM2.5sub50RHrangeQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHrangeQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHpersistenceQAQCRpt = Slot(uri=NEON['PM2.5sub50RHpersistenceQAQCRpt'], name="PM2.5sub50RHpersistenceQAQCRpt", curie=NEON.curie('PM2.5sub50RHpersistenceQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHpersistenceQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHstepQAQCRpt = Slot(uri=NEON['PM2.5sub50RHstepQAQCRpt'], name="PM2.5sub50RHstepQAQCRpt", curie=NEON.curie('PM2.5sub50RHstepQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHstepQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHnullQAQCRpt = Slot(uri=NEON['PM2.5sub50RHnullQAQCRpt'], name="PM2.5sub50RHnullQAQCRpt", curie=NEON.curie('PM2.5sub50RHnullQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHnullQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHgapQAQCRpt = Slot(uri=NEON['PM2.5sub50RHgapQAQCRpt'], name="PM2.5sub50RHgapQAQCRpt", curie=NEON.curie('PM2.5sub50RHgapQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHgapQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHconsistencyQAQCRpt = Slot(uri=NEON['PM2.5sub50RHconsistencyQAQCRpt'], name="PM2.5sub50RHconsistencyQAQCRpt", curie=NEON.curie('PM2.5sub50RHconsistencyQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHconsistencyQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHspikeQAQCRpt = Slot(uri=NEON['PM2.5sub50RHspikeQAQCRpt'], name="PM2.5sub50RHspikeQAQCRpt", curie=NEON.curie('PM2.5sub50RHspikeQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHspikeQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHalphaQAQCRpt = Slot(uri=NEON['PM2.5sub50RHalphaQAQCRpt'], name="PM2.5sub50RHalphaQAQCRpt", curie=NEON.curie('PM2.5sub50RHalphaQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHalphaQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHbetaQAQCRpt = Slot(uri=NEON['PM2.5sub50RHbetaQAQCRpt'], name="PM2.5sub50RHbetaQAQCRpt", curie=NEON.curie('PM2.5sub50RHbetaQAQCRpt'),
                      model_uri=NEON['PM2.5sub50RHbetaQAQCRpt'], domain=None, range=Optional[str])

slots.PM2.5sub50RHrangeFailQM = Slot(uri=NEON['PM2.5sub50RHrangeFailQM'], name="PM2.5sub50RHrangeFailQM", curie=NEON.curie('PM2.5sub50RHrangeFailQM'),
                      model_uri=NEON['PM2.5sub50RHrangeFailQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHrangePassQM = Slot(uri=NEON['PM2.5sub50RHrangePassQM'], name="PM2.5sub50RHrangePassQM", curie=NEON.curie('PM2.5sub50RHrangePassQM'),
                      model_uri=NEON['PM2.5sub50RHrangePassQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHrangeNAQM = Slot(uri=NEON['PM2.5sub50RHrangeNAQM'], name="PM2.5sub50RHrangeNAQM", curie=NEON.curie('PM2.5sub50RHrangeNAQM'),
                      model_uri=NEON['PM2.5sub50RHrangeNAQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHpersistenceFailQM = Slot(uri=NEON['PM2.5sub50RHpersistenceFailQM'], name="PM2.5sub50RHpersistenceFailQM", curie=NEON.curie('PM2.5sub50RHpersistenceFailQM'),
                      model_uri=NEON['PM2.5sub50RHpersistenceFailQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHpersistencePassQM = Slot(uri=NEON['PM2.5sub50RHpersistencePassQM'], name="PM2.5sub50RHpersistencePassQM", curie=NEON.curie('PM2.5sub50RHpersistencePassQM'),
                      model_uri=NEON['PM2.5sub50RHpersistencePassQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHpersistenceNAQM = Slot(uri=NEON['PM2.5sub50RHpersistenceNAQM'], name="PM2.5sub50RHpersistenceNAQM", curie=NEON.curie('PM2.5sub50RHpersistenceNAQM'),
                      model_uri=NEON['PM2.5sub50RHpersistenceNAQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHstepFailQM = Slot(uri=NEON['PM2.5sub50RHstepFailQM'], name="PM2.5sub50RHstepFailQM", curie=NEON.curie('PM2.5sub50RHstepFailQM'),
                      model_uri=NEON['PM2.5sub50RHstepFailQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHstepPassQM = Slot(uri=NEON['PM2.5sub50RHstepPassQM'], name="PM2.5sub50RHstepPassQM", curie=NEON.curie('PM2.5sub50RHstepPassQM'),
                      model_uri=NEON['PM2.5sub50RHstepPassQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHstepNAQM = Slot(uri=NEON['PM2.5sub50RHstepNAQM'], name="PM2.5sub50RHstepNAQM", curie=NEON.curie('PM2.5sub50RHstepNAQM'),
                      model_uri=NEON['PM2.5sub50RHstepNAQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHnullFailQM = Slot(uri=NEON['PM2.5sub50RHnullFailQM'], name="PM2.5sub50RHnullFailQM", curie=NEON.curie('PM2.5sub50RHnullFailQM'),
                      model_uri=NEON['PM2.5sub50RHnullFailQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHnullPassQM = Slot(uri=NEON['PM2.5sub50RHnullPassQM'], name="PM2.5sub50RHnullPassQM", curie=NEON.curie('PM2.5sub50RHnullPassQM'),
                      model_uri=NEON['PM2.5sub50RHnullPassQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHnullNAQM = Slot(uri=NEON['PM2.5sub50RHnullNAQM'], name="PM2.5sub50RHnullNAQM", curie=NEON.curie('PM2.5sub50RHnullNAQM'),
                      model_uri=NEON['PM2.5sub50RHnullNAQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHgapFailQM = Slot(uri=NEON['PM2.5sub50RHgapFailQM'], name="PM2.5sub50RHgapFailQM", curie=NEON.curie('PM2.5sub50RHgapFailQM'),
                      model_uri=NEON['PM2.5sub50RHgapFailQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHgapPassQM = Slot(uri=NEON['PM2.5sub50RHgapPassQM'], name="PM2.5sub50RHgapPassQM", curie=NEON.curie('PM2.5sub50RHgapPassQM'),
                      model_uri=NEON['PM2.5sub50RHgapPassQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHgapNAQM = Slot(uri=NEON['PM2.5sub50RHgapNAQM'], name="PM2.5sub50RHgapNAQM", curie=NEON.curie('PM2.5sub50RHgapNAQM'),
                      model_uri=NEON['PM2.5sub50RHgapNAQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHspikeFailQM = Slot(uri=NEON['PM2.5sub50RHspikeFailQM'], name="PM2.5sub50RHspikeFailQM", curie=NEON.curie('PM2.5sub50RHspikeFailQM'),
                      model_uri=NEON['PM2.5sub50RHspikeFailQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHspikePassQM = Slot(uri=NEON['PM2.5sub50RHspikePassQM'], name="PM2.5sub50RHspikePassQM", curie=NEON.curie('PM2.5sub50RHspikePassQM'),
                      model_uri=NEON['PM2.5sub50RHspikePassQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHspikeNAQM = Slot(uri=NEON['PM2.5sub50RHspikeNAQM'], name="PM2.5sub50RHspikeNAQM", curie=NEON.curie('PM2.5sub50RHspikeNAQM'),
                      model_uri=NEON['PM2.5sub50RHspikeNAQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHconsistencyFailQM = Slot(uri=NEON['PM2.5sub50RHconsistencyFailQM'], name="PM2.5sub50RHconsistencyFailQM", curie=NEON.curie('PM2.5sub50RHconsistencyFailQM'),
                      model_uri=NEON['PM2.5sub50RHconsistencyFailQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHconsistencyPassQM = Slot(uri=NEON['PM2.5sub50RHconsistencyPassQM'], name="PM2.5sub50RHconsistencyPassQM", curie=NEON.curie('PM2.5sub50RHconsistencyPassQM'),
                      model_uri=NEON['PM2.5sub50RHconsistencyPassQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHconsistencyNAQM = Slot(uri=NEON['PM2.5sub50RHconsistencyNAQM'], name="PM2.5sub50RHconsistencyNAQM", curie=NEON.curie('PM2.5sub50RHconsistencyNAQM'),
                      model_uri=NEON['PM2.5sub50RHconsistencyNAQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHalphaQM = Slot(uri=NEON['PM2.5sub50RHalphaQM'], name="PM2.5sub50RHalphaQM", curie=NEON.curie('PM2.5sub50RHalphaQM'),
                      model_uri=NEON['PM2.5sub50RHalphaQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHbetaQM = Slot(uri=NEON['PM2.5sub50RHbetaQM'], name="PM2.5sub50RHbetaQM", curie=NEON.curie('PM2.5sub50RHbetaQM'),
                      model_uri=NEON['PM2.5sub50RHbetaQM'], domain=None, range=Optional[float])

slots.PM2.5sub50RHfinalQF = Slot(uri=NEON['PM2.5sub50RHfinalQF'], name="PM2.5sub50RHfinalQF", curie=NEON.curie('PM2.5sub50RHfinalQF'),
                      model_uri=NEON['PM2.5sub50RHfinalQF'], domain=None, range=Optional[str])

slots.PM1sub50RHMedian = Slot(uri=NEON.PM1sub50RHMedian, name="PM1sub50RHMedian", curie=NEON.curie('PM1sub50RHMedian'),
                      model_uri=NEON.PM1sub50RHMedian, domain=None, range=Optional[float])

slots.PM1sub50RHMinimum = Slot(uri=NEON.PM1sub50RHMinimum, name="PM1sub50RHMinimum", curie=NEON.curie('PM1sub50RHMinimum'),
                      model_uri=NEON.PM1sub50RHMinimum, domain=None, range=Optional[float])

slots.PM1sub50RHMaximum = Slot(uri=NEON.PM1sub50RHMaximum, name="PM1sub50RHMaximum", curie=NEON.curie('PM1sub50RHMaximum'),
                      model_uri=NEON.PM1sub50RHMaximum, domain=None, range=Optional[float])

slots.PM1sub50RHNumPts = Slot(uri=NEON.PM1sub50RHNumPts, name="PM1sub50RHNumPts", curie=NEON.curie('PM1sub50RHNumPts'),
                      model_uri=NEON.PM1sub50RHNumPts, domain=None, range=Optional[float])

slots.PM1sub50RHMAD = Slot(uri=NEON.PM1sub50RHMAD, name="PM1sub50RHMAD", curie=NEON.curie('PM1sub50RHMAD'),
                      model_uri=NEON.PM1sub50RHMAD, domain=None, range=Optional[float])

slots.PM1sub50RHrangeQAQCRpt = Slot(uri=NEON.PM1sub50RHrangeQAQCRpt, name="PM1sub50RHrangeQAQCRpt", curie=NEON.curie('PM1sub50RHrangeQAQCRpt'),
                      model_uri=NEON.PM1sub50RHrangeQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHpersistenceQAQCRpt = Slot(uri=NEON.PM1sub50RHpersistenceQAQCRpt, name="PM1sub50RHpersistenceQAQCRpt", curie=NEON.curie('PM1sub50RHpersistenceQAQCRpt'),
                      model_uri=NEON.PM1sub50RHpersistenceQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHstepQAQCRpt = Slot(uri=NEON.PM1sub50RHstepQAQCRpt, name="PM1sub50RHstepQAQCRpt", curie=NEON.curie('PM1sub50RHstepQAQCRpt'),
                      model_uri=NEON.PM1sub50RHstepQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHnullQAQCRpt = Slot(uri=NEON.PM1sub50RHnullQAQCRpt, name="PM1sub50RHnullQAQCRpt", curie=NEON.curie('PM1sub50RHnullQAQCRpt'),
                      model_uri=NEON.PM1sub50RHnullQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHgapQAQCRpt = Slot(uri=NEON.PM1sub50RHgapQAQCRpt, name="PM1sub50RHgapQAQCRpt", curie=NEON.curie('PM1sub50RHgapQAQCRpt'),
                      model_uri=NEON.PM1sub50RHgapQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHconsistencyQAQCRpt = Slot(uri=NEON.PM1sub50RHconsistencyQAQCRpt, name="PM1sub50RHconsistencyQAQCRpt", curie=NEON.curie('PM1sub50RHconsistencyQAQCRpt'),
                      model_uri=NEON.PM1sub50RHconsistencyQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHspikeQAQCRpt = Slot(uri=NEON.PM1sub50RHspikeQAQCRpt, name="PM1sub50RHspikeQAQCRpt", curie=NEON.curie('PM1sub50RHspikeQAQCRpt'),
                      model_uri=NEON.PM1sub50RHspikeQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHalphaQAQCRpt = Slot(uri=NEON.PM1sub50RHalphaQAQCRpt, name="PM1sub50RHalphaQAQCRpt", curie=NEON.curie('PM1sub50RHalphaQAQCRpt'),
                      model_uri=NEON.PM1sub50RHalphaQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHbetaQAQCRpt = Slot(uri=NEON.PM1sub50RHbetaQAQCRpt, name="PM1sub50RHbetaQAQCRpt", curie=NEON.curie('PM1sub50RHbetaQAQCRpt'),
                      model_uri=NEON.PM1sub50RHbetaQAQCRpt, domain=None, range=Optional[str])

slots.PM1sub50RHrangeFailQM = Slot(uri=NEON.PM1sub50RHrangeFailQM, name="PM1sub50RHrangeFailQM", curie=NEON.curie('PM1sub50RHrangeFailQM'),
                      model_uri=NEON.PM1sub50RHrangeFailQM, domain=None, range=Optional[float])

slots.PM1sub50RHrangePassQM = Slot(uri=NEON.PM1sub50RHrangePassQM, name="PM1sub50RHrangePassQM", curie=NEON.curie('PM1sub50RHrangePassQM'),
                      model_uri=NEON.PM1sub50RHrangePassQM, domain=None, range=Optional[float])

slots.PM1sub50RHrangeNAQM = Slot(uri=NEON.PM1sub50RHrangeNAQM, name="PM1sub50RHrangeNAQM", curie=NEON.curie('PM1sub50RHrangeNAQM'),
                      model_uri=NEON.PM1sub50RHrangeNAQM, domain=None, range=Optional[float])

slots.PM1sub50RHpersistenceFailQM = Slot(uri=NEON.PM1sub50RHpersistenceFailQM, name="PM1sub50RHpersistenceFailQM", curie=NEON.curie('PM1sub50RHpersistenceFailQM'),
                      model_uri=NEON.PM1sub50RHpersistenceFailQM, domain=None, range=Optional[float])

slots.PM1sub50RHpersistencePassQM = Slot(uri=NEON.PM1sub50RHpersistencePassQM, name="PM1sub50RHpersistencePassQM", curie=NEON.curie('PM1sub50RHpersistencePassQM'),
                      model_uri=NEON.PM1sub50RHpersistencePassQM, domain=None, range=Optional[float])

slots.PM1sub50RHpersistenceNAQM = Slot(uri=NEON.PM1sub50RHpersistenceNAQM, name="PM1sub50RHpersistenceNAQM", curie=NEON.curie('PM1sub50RHpersistenceNAQM'),
                      model_uri=NEON.PM1sub50RHpersistenceNAQM, domain=None, range=Optional[float])

slots.PM1sub50RHstepFailQM = Slot(uri=NEON.PM1sub50RHstepFailQM, name="PM1sub50RHstepFailQM", curie=NEON.curie('PM1sub50RHstepFailQM'),
                      model_uri=NEON.PM1sub50RHstepFailQM, domain=None, range=Optional[float])

slots.PM1sub50RHstepPassQM = Slot(uri=NEON.PM1sub50RHstepPassQM, name="PM1sub50RHstepPassQM", curie=NEON.curie('PM1sub50RHstepPassQM'),
                      model_uri=NEON.PM1sub50RHstepPassQM, domain=None, range=Optional[float])

slots.PM1sub50RHstepNAQM = Slot(uri=NEON.PM1sub50RHstepNAQM, name="PM1sub50RHstepNAQM", curie=NEON.curie('PM1sub50RHstepNAQM'),
                      model_uri=NEON.PM1sub50RHstepNAQM, domain=None, range=Optional[float])

slots.PM1sub50RHnullFailQM = Slot(uri=NEON.PM1sub50RHnullFailQM, name="PM1sub50RHnullFailQM", curie=NEON.curie('PM1sub50RHnullFailQM'),
                      model_uri=NEON.PM1sub50RHnullFailQM, domain=None, range=Optional[float])

slots.PM1sub50RHnullPassQM = Slot(uri=NEON.PM1sub50RHnullPassQM, name="PM1sub50RHnullPassQM", curie=NEON.curie('PM1sub50RHnullPassQM'),
                      model_uri=NEON.PM1sub50RHnullPassQM, domain=None, range=Optional[float])

slots.PM1sub50RHnullNAQM = Slot(uri=NEON.PM1sub50RHnullNAQM, name="PM1sub50RHnullNAQM", curie=NEON.curie('PM1sub50RHnullNAQM'),
                      model_uri=NEON.PM1sub50RHnullNAQM, domain=None, range=Optional[float])

slots.PM1sub50RHgapFailQM = Slot(uri=NEON.PM1sub50RHgapFailQM, name="PM1sub50RHgapFailQM", curie=NEON.curie('PM1sub50RHgapFailQM'),
                      model_uri=NEON.PM1sub50RHgapFailQM, domain=None, range=Optional[float])

slots.PM1sub50RHgapPassQM = Slot(uri=NEON.PM1sub50RHgapPassQM, name="PM1sub50RHgapPassQM", curie=NEON.curie('PM1sub50RHgapPassQM'),
                      model_uri=NEON.PM1sub50RHgapPassQM, domain=None, range=Optional[float])

slots.PM1sub50RHgapNAQM = Slot(uri=NEON.PM1sub50RHgapNAQM, name="PM1sub50RHgapNAQM", curie=NEON.curie('PM1sub50RHgapNAQM'),
                      model_uri=NEON.PM1sub50RHgapNAQM, domain=None, range=Optional[float])

slots.PM1sub50RHspikeFailQM = Slot(uri=NEON.PM1sub50RHspikeFailQM, name="PM1sub50RHspikeFailQM", curie=NEON.curie('PM1sub50RHspikeFailQM'),
                      model_uri=NEON.PM1sub50RHspikeFailQM, domain=None, range=Optional[float])

slots.PM1sub50RHspikePassQM = Slot(uri=NEON.PM1sub50RHspikePassQM, name="PM1sub50RHspikePassQM", curie=NEON.curie('PM1sub50RHspikePassQM'),
                      model_uri=NEON.PM1sub50RHspikePassQM, domain=None, range=Optional[float])

slots.PM1sub50RHspikeNAQM = Slot(uri=NEON.PM1sub50RHspikeNAQM, name="PM1sub50RHspikeNAQM", curie=NEON.curie('PM1sub50RHspikeNAQM'),
                      model_uri=NEON.PM1sub50RHspikeNAQM, domain=None, range=Optional[float])

slots.PM1sub50RHconsistencyFailQM = Slot(uri=NEON.PM1sub50RHconsistencyFailQM, name="PM1sub50RHconsistencyFailQM", curie=NEON.curie('PM1sub50RHconsistencyFailQM'),
                      model_uri=NEON.PM1sub50RHconsistencyFailQM, domain=None, range=Optional[float])

slots.PM1sub50RHconsistencyPassQM = Slot(uri=NEON.PM1sub50RHconsistencyPassQM, name="PM1sub50RHconsistencyPassQM", curie=NEON.curie('PM1sub50RHconsistencyPassQM'),
                      model_uri=NEON.PM1sub50RHconsistencyPassQM, domain=None, range=Optional[float])

slots.PM1sub50RHconsistencyNAQM = Slot(uri=NEON.PM1sub50RHconsistencyNAQM, name="PM1sub50RHconsistencyNAQM", curie=NEON.curie('PM1sub50RHconsistencyNAQM'),
                      model_uri=NEON.PM1sub50RHconsistencyNAQM, domain=None, range=Optional[float])

slots.PM1sub50RHalphaQM = Slot(uri=NEON.PM1sub50RHalphaQM, name="PM1sub50RHalphaQM", curie=NEON.curie('PM1sub50RHalphaQM'),
                      model_uri=NEON.PM1sub50RHalphaQM, domain=None, range=Optional[float])

slots.PM1sub50RHbetaQM = Slot(uri=NEON.PM1sub50RHbetaQM, name="PM1sub50RHbetaQM", curie=NEON.curie('PM1sub50RHbetaQM'),
                      model_uri=NEON.PM1sub50RHbetaQM, domain=None, range=Optional[float])

slots.PM1sub50RHfinalQF = Slot(uri=NEON.PM1sub50RHfinalQF, name="PM1sub50RHfinalQF", curie=NEON.curie('PM1sub50RHfinalQF'),
                      model_uri=NEON.PM1sub50RHfinalQF, domain=None, range=Optional[str])

slots.sensorFlowRateFailQM = Slot(uri=NEON.sensorFlowRateFailQM, name="sensorFlowRateFailQM", curie=NEON.curie('sensorFlowRateFailQM'),
                      model_uri=NEON.sensorFlowRateFailQM, domain=None, range=Optional[float])

slots.sensorFlowRatePassQM = Slot(uri=NEON.sensorFlowRatePassQM, name="sensorFlowRatePassQM", curie=NEON.curie('sensorFlowRatePassQM'),
                      model_uri=NEON.sensorFlowRatePassQM, domain=None, range=Optional[float])

slots.sensorFlowRateNAQM = Slot(uri=NEON.sensorFlowRateNAQM, name="sensorFlowRateNAQM", curie=NEON.curie('sensorFlowRateNAQM'),
                      model_uri=NEON.sensorFlowRateNAQM, domain=None, range=Optional[float])

slots.assemblyFlowRateFailQM = Slot(uri=NEON.assemblyFlowRateFailQM, name="assemblyFlowRateFailQM", curie=NEON.curie('assemblyFlowRateFailQM'),
                      model_uri=NEON.assemblyFlowRateFailQM, domain=None, range=Optional[float])

slots.assemblyFlowRatePassQM = Slot(uri=NEON.assemblyFlowRatePassQM, name="assemblyFlowRatePassQM", curie=NEON.curie('assemblyFlowRatePassQM'),
                      model_uri=NEON.assemblyFlowRatePassQM, domain=None, range=Optional[float])

slots.assemblyFlowRateNAQM = Slot(uri=NEON.assemblyFlowRateNAQM, name="assemblyFlowRateNAQM", curie=NEON.curie('assemblyFlowRateNAQM'),
                      model_uri=NEON.assemblyFlowRateNAQM, domain=None, range=Optional[float])

slots.measurementValidityFailQM = Slot(uri=NEON.measurementValidityFailQM, name="measurementValidityFailQM", curie=NEON.curie('measurementValidityFailQM'),
                      model_uri=NEON.measurementValidityFailQM, domain=None, range=Optional[float])

slots.measurementValidityPassQM = Slot(uri=NEON.measurementValidityPassQM, name="measurementValidityPassQM", curie=NEON.curie('measurementValidityPassQM'),
                      model_uri=NEON.measurementValidityPassQM, domain=None, range=Optional[float])

slots.measurementValidityNAQM = Slot(uri=NEON.measurementValidityNAQM, name="measurementValidityNAQM", curie=NEON.curie('measurementValidityNAQM'),
                      model_uri=NEON.measurementValidityNAQM, domain=None, range=Optional[float])

slots.waterSampleID = Slot(uri=NEON.waterSampleID, name="waterSampleID", curie=NEON.curie('waterSampleID'),
                      model_uri=NEON.waterSampleID, domain=None, range=Optional[str])

slots.d2HWaterLow = Slot(uri=NEON.d2HWaterLow, name="d2HWaterLow", curie=NEON.curie('d2HWaterLow'),
                      model_uri=NEON.d2HWaterLow, domain=None, range=Optional[float])

slots.d18OWaterLow = Slot(uri=NEON.d18OWaterLow, name="d18OWaterLow", curie=NEON.curie('d18OWaterLow'),
                      model_uri=NEON.d18OWaterLow, domain=None, range=Optional[float])

slots.d2HWaterMed = Slot(uri=NEON.d2HWaterMed, name="d2HWaterMed", curie=NEON.curie('d2HWaterMed'),
                      model_uri=NEON.d2HWaterMed, domain=None, range=Optional[float])

slots.d18OWaterMed = Slot(uri=NEON.d18OWaterMed, name="d18OWaterMed", curie=NEON.curie('d18OWaterMed'),
                      model_uri=NEON.d18OWaterMed, domain=None, range=Optional[float])

slots.d2HWaterHigh = Slot(uri=NEON.d2HWaterHigh, name="d2HWaterHigh", curie=NEON.curie('d2HWaterHigh'),
                      model_uri=NEON.d2HWaterHigh, domain=None, range=Optional[float])

slots.d18OWaterHigh = Slot(uri=NEON.d18OWaterHigh, name="d18OWaterHigh", curie=NEON.curie('d18OWaterHigh'),
                      model_uri=NEON.d18OWaterHigh, domain=None, range=Optional[float])

slots.surfacewaterElevMean = Slot(uri=NEON.surfacewaterElevMean, name="surfacewaterElevMean", curie=NEON.curie('surfacewaterElevMean'),
                      model_uri=NEON.surfacewaterElevMean, domain=None, range=Optional[float])

slots.surfacewaterElevMinimum = Slot(uri=NEON.surfacewaterElevMinimum, name="surfacewaterElevMinimum", curie=NEON.curie('surfacewaterElevMinimum'),
                      model_uri=NEON.surfacewaterElevMinimum, domain=None, range=Optional[float])

slots.surfacewaterElevMaximum = Slot(uri=NEON.surfacewaterElevMaximum, name="surfacewaterElevMaximum", curie=NEON.curie('surfacewaterElevMaximum'),
                      model_uri=NEON.surfacewaterElevMaximum, domain=None, range=Optional[float])

slots.surfacewaterElevVariance = Slot(uri=NEON.surfacewaterElevVariance, name="surfacewaterElevVariance", curie=NEON.curie('surfacewaterElevVariance'),
                      model_uri=NEON.surfacewaterElevVariance, domain=None, range=Optional[float])

slots.surfacewaterElevNumPts = Slot(uri=NEON.surfacewaterElevNumPts, name="surfacewaterElevNumPts", curie=NEON.curie('surfacewaterElevNumPts'),
                      model_uri=NEON.surfacewaterElevNumPts, domain=None, range=Optional[float])

slots.surfacewaterElevExpUncert = Slot(uri=NEON.surfacewaterElevExpUncert, name="surfacewaterElevExpUncert", curie=NEON.curie('surfacewaterElevExpUncert'),
                      model_uri=NEON.surfacewaterElevExpUncert, domain=None, range=Optional[float])

slots.surfacewaterElevStdErMean = Slot(uri=NEON.surfacewaterElevStdErMean, name="surfacewaterElevStdErMean", curie=NEON.curie('surfacewaterElevStdErMean'),
                      model_uri=NEON.surfacewaterElevStdErMean, domain=None, range=Optional[float])

slots.sWatElevRangeFailQM = Slot(uri=NEON.sWatElevRangeFailQM, name="sWatElevRangeFailQM", curie=NEON.curie('sWatElevRangeFailQM'),
                      model_uri=NEON.sWatElevRangeFailQM, domain=None, range=Optional[float])

slots.sWatElevRangePassQM = Slot(uri=NEON.sWatElevRangePassQM, name="sWatElevRangePassQM", curie=NEON.curie('sWatElevRangePassQM'),
                      model_uri=NEON.sWatElevRangePassQM, domain=None, range=Optional[float])

slots.sWatElevRangeNAQM = Slot(uri=NEON.sWatElevRangeNAQM, name="sWatElevRangeNAQM", curie=NEON.curie('sWatElevRangeNAQM'),
                      model_uri=NEON.sWatElevRangeNAQM, domain=None, range=Optional[float])

slots.sWatElevPersistenceFailQM = Slot(uri=NEON.sWatElevPersistenceFailQM, name="sWatElevPersistenceFailQM", curie=NEON.curie('sWatElevPersistenceFailQM'),
                      model_uri=NEON.sWatElevPersistenceFailQM, domain=None, range=Optional[float])

slots.sWatElevPersistencePassQM = Slot(uri=NEON.sWatElevPersistencePassQM, name="sWatElevPersistencePassQM", curie=NEON.curie('sWatElevPersistencePassQM'),
                      model_uri=NEON.sWatElevPersistencePassQM, domain=None, range=Optional[float])

slots.sWatElevPersistenceNAQM = Slot(uri=NEON.sWatElevPersistenceNAQM, name="sWatElevPersistenceNAQM", curie=NEON.curie('sWatElevPersistenceNAQM'),
                      model_uri=NEON.sWatElevPersistenceNAQM, domain=None, range=Optional[float])

slots.sWatElevStepFailQM = Slot(uri=NEON.sWatElevStepFailQM, name="sWatElevStepFailQM", curie=NEON.curie('sWatElevStepFailQM'),
                      model_uri=NEON.sWatElevStepFailQM, domain=None, range=Optional[float])

slots.sWatElevStepPassQM = Slot(uri=NEON.sWatElevStepPassQM, name="sWatElevStepPassQM", curie=NEON.curie('sWatElevStepPassQM'),
                      model_uri=NEON.sWatElevStepPassQM, domain=None, range=Optional[float])

slots.sWatElevStepNAQM = Slot(uri=NEON.sWatElevStepNAQM, name="sWatElevStepNAQM", curie=NEON.curie('sWatElevStepNAQM'),
                      model_uri=NEON.sWatElevStepNAQM, domain=None, range=Optional[float])

slots.sWatElevNullFailQM = Slot(uri=NEON.sWatElevNullFailQM, name="sWatElevNullFailQM", curie=NEON.curie('sWatElevNullFailQM'),
                      model_uri=NEON.sWatElevNullFailQM, domain=None, range=Optional[float])

slots.sWatElevNullPassQM = Slot(uri=NEON.sWatElevNullPassQM, name="sWatElevNullPassQM", curie=NEON.curie('sWatElevNullPassQM'),
                      model_uri=NEON.sWatElevNullPassQM, domain=None, range=Optional[float])

slots.sWatElevNullNAQM = Slot(uri=NEON.sWatElevNullNAQM, name="sWatElevNullNAQM", curie=NEON.curie('sWatElevNullNAQM'),
                      model_uri=NEON.sWatElevNullNAQM, domain=None, range=Optional[float])

slots.sWatElevGapFailQM = Slot(uri=NEON.sWatElevGapFailQM, name="sWatElevGapFailQM", curie=NEON.curie('sWatElevGapFailQM'),
                      model_uri=NEON.sWatElevGapFailQM, domain=None, range=Optional[float])

slots.sWatElevGapPassQM = Slot(uri=NEON.sWatElevGapPassQM, name="sWatElevGapPassQM", curie=NEON.curie('sWatElevGapPassQM'),
                      model_uri=NEON.sWatElevGapPassQM, domain=None, range=Optional[float])

slots.sWatElevGapNAQM = Slot(uri=NEON.sWatElevGapNAQM, name="sWatElevGapNAQM", curie=NEON.curie('sWatElevGapNAQM'),
                      model_uri=NEON.sWatElevGapNAQM, domain=None, range=Optional[float])

slots.sWatElevSpikeFailQM = Slot(uri=NEON.sWatElevSpikeFailQM, name="sWatElevSpikeFailQM", curie=NEON.curie('sWatElevSpikeFailQM'),
                      model_uri=NEON.sWatElevSpikeFailQM, domain=None, range=Optional[float])

slots.sWatElevSpikePassQM = Slot(uri=NEON.sWatElevSpikePassQM, name="sWatElevSpikePassQM", curie=NEON.curie('sWatElevSpikePassQM'),
                      model_uri=NEON.sWatElevSpikePassQM, domain=None, range=Optional[float])

slots.sWatElevSpikeNAQM = Slot(uri=NEON.sWatElevSpikeNAQM, name="sWatElevSpikeNAQM", curie=NEON.curie('sWatElevSpikeNAQM'),
                      model_uri=NEON.sWatElevSpikeNAQM, domain=None, range=Optional[float])

slots.sWatElevConsistencyFailQM = Slot(uri=NEON.sWatElevConsistencyFailQM, name="sWatElevConsistencyFailQM", curie=NEON.curie('sWatElevConsistencyFailQM'),
                      model_uri=NEON.sWatElevConsistencyFailQM, domain=None, range=Optional[float])

slots.sWatElevConsistencyPassQM = Slot(uri=NEON.sWatElevConsistencyPassQM, name="sWatElevConsistencyPassQM", curie=NEON.curie('sWatElevConsistencyPassQM'),
                      model_uri=NEON.sWatElevConsistencyPassQM, domain=None, range=Optional[float])

slots.sWatElevConsistencyNAQM = Slot(uri=NEON.sWatElevConsistencyNAQM, name="sWatElevConsistencyNAQM", curie=NEON.curie('sWatElevConsistencyNAQM'),
                      model_uri=NEON.sWatElevConsistencyNAQM, domain=None, range=Optional[float])

slots.sWatElevAlphaQM = Slot(uri=NEON.sWatElevAlphaQM, name="sWatElevAlphaQM", curie=NEON.curie('sWatElevAlphaQM'),
                      model_uri=NEON.sWatElevAlphaQM, domain=None, range=Optional[float])

slots.sWatElevBetaQM = Slot(uri=NEON.sWatElevBetaQM, name="sWatElevBetaQM", curie=NEON.curie('sWatElevBetaQM'),
                      model_uri=NEON.sWatElevBetaQM, domain=None, range=Optional[float])

slots.sWatElevFinalQF = Slot(uri=NEON.sWatElevFinalQF, name="sWatElevFinalQF", curie=NEON.curie('sWatElevFinalQF'),
                      model_uri=NEON.sWatElevFinalQF, domain=None, range=Optional[str])

slots.depth0WaterTemp = Slot(uri=NEON.depth0WaterTemp, name="depth0WaterTemp", curie=NEON.curie('depth0WaterTemp'),
                      model_uri=NEON.depth0WaterTemp, domain=None, range=Optional[float])

slots.depth1WaterTemp = Slot(uri=NEON.depth1WaterTemp, name="depth1WaterTemp", curie=NEON.curie('depth1WaterTemp'),
                      model_uri=NEON.depth1WaterTemp, domain=None, range=Optional[float])

slots.depth2WaterTemp = Slot(uri=NEON.depth2WaterTemp, name="depth2WaterTemp", curie=NEON.curie('depth2WaterTemp'),
                      model_uri=NEON.depth2WaterTemp, domain=None, range=Optional[float])

slots.depth3WaterTemp = Slot(uri=NEON.depth3WaterTemp, name="depth3WaterTemp", curie=NEON.curie('depth3WaterTemp'),
                      model_uri=NEON.depth3WaterTemp, domain=None, range=Optional[float])

slots.depth4WaterTemp = Slot(uri=NEON.depth4WaterTemp, name="depth4WaterTemp", curie=NEON.curie('depth4WaterTemp'),
                      model_uri=NEON.depth4WaterTemp, domain=None, range=Optional[float])

slots.depth5WaterTemp = Slot(uri=NEON.depth5WaterTemp, name="depth5WaterTemp", curie=NEON.curie('depth5WaterTemp'),
                      model_uri=NEON.depth5WaterTemp, domain=None, range=Optional[float])

slots.depth6WaterTemp = Slot(uri=NEON.depth6WaterTemp, name="depth6WaterTemp", curie=NEON.curie('depth6WaterTemp'),
                      model_uri=NEON.depth6WaterTemp, domain=None, range=Optional[float])

slots.depth7WaterTemp = Slot(uri=NEON.depth7WaterTemp, name="depth7WaterTemp", curie=NEON.curie('depth7WaterTemp'),
                      model_uri=NEON.depth7WaterTemp, domain=None, range=Optional[float])

slots.depth8WaterTemp = Slot(uri=NEON.depth8WaterTemp, name="depth8WaterTemp", curie=NEON.curie('depth8WaterTemp'),
                      model_uri=NEON.depth8WaterTemp, domain=None, range=Optional[float])

slots.depth9WaterTemp = Slot(uri=NEON.depth9WaterTemp, name="depth9WaterTemp", curie=NEON.curie('depth9WaterTemp'),
                      model_uri=NEON.depth9WaterTemp, domain=None, range=Optional[float])

slots.thetYaxsMean = Slot(uri=NEON.thetYaxsMean, name="thetYaxsMean", curie=NEON.curie('thetYaxsMean'),
                      model_uri=NEON.thetYaxsMean, domain=None, range=Optional[float])

slots.thetXaxsMean = Slot(uri=NEON.thetXaxsMean, name="thetXaxsMean", curie=NEON.curie('thetXaxsMean'),
                      model_uri=NEON.thetXaxsMean, domain=None, range=Optional[float])

slots.thetZaxsMean = Slot(uri=NEON.thetZaxsMean, name="thetZaxsMean", curie=NEON.curie('thetZaxsMean'),
                      model_uri=NEON.thetZaxsMean, domain=None, range=Optional[float])

slots.pHBuoyParked = Slot(uri=NEON.pHBuoyParked, name="pHBuoyParked", curie=NEON.curie('pHBuoyParked'),
                      model_uri=NEON.pHBuoyParked, domain=None, range=Optional[float])

slots.pHBuoyProfile = Slot(uri=NEON.pHBuoyProfile, name="pHBuoyProfile", curie=NEON.curie('pHBuoyProfile'),
                      model_uri=NEON.pHBuoyProfile, domain=None, range=Optional[float])

slots.pHVoltageBuoyParked = Slot(uri=NEON.pHVoltageBuoyParked, name="pHVoltageBuoyParked", curie=NEON.curie('pHVoltageBuoyParked'),
                      model_uri=NEON.pHVoltageBuoyParked, domain=None, range=Optional[float])

slots.pHVoltageBuoyProfile = Slot(uri=NEON.pHVoltageBuoyProfile, name="pHVoltageBuoyProfile", curie=NEON.curie('pHVoltageBuoyProfile'),
                      model_uri=NEON.pHVoltageBuoyProfile, domain=None, range=Optional[float])

slots.blueGreenBuoyParked = Slot(uri=NEON.blueGreenBuoyParked, name="blueGreenBuoyParked", curie=NEON.curie('blueGreenBuoyParked'),
                      model_uri=NEON.blueGreenBuoyParked, domain=None, range=Optional[float])

slots.blueGreenBuoyProfile = Slot(uri=NEON.blueGreenBuoyProfile, name="blueGreenBuoyProfile", curie=NEON.curie('blueGreenBuoyProfile'),
                      model_uri=NEON.blueGreenBuoyProfile, domain=None, range=Optional[float])

slots.chlaBuoyParked = Slot(uri=NEON.chlaBuoyParked, name="chlaBuoyParked", curie=NEON.curie('chlaBuoyParked'),
                      model_uri=NEON.chlaBuoyParked, domain=None, range=Optional[float])

slots.chlaBuoyProfile = Slot(uri=NEON.chlaBuoyProfile, name="chlaBuoyProfile", curie=NEON.curie('chlaBuoyProfile'),
                      model_uri=NEON.chlaBuoyProfile, domain=None, range=Optional[float])

slots.conductanceBuoyParked = Slot(uri=NEON.conductanceBuoyParked, name="conductanceBuoyParked", curie=NEON.curie('conductanceBuoyParked'),
                      model_uri=NEON.conductanceBuoyParked, domain=None, range=Optional[float])

slots.conductanceBuoyProfile = Slot(uri=NEON.conductanceBuoyProfile, name="conductanceBuoyProfile", curie=NEON.curie('conductanceBuoyProfile'),
                      model_uri=NEON.conductanceBuoyProfile, domain=None, range=Optional[float])

slots.specCondBuoyParked = Slot(uri=NEON.specCondBuoyParked, name="specCondBuoyParked", curie=NEON.curie('specCondBuoyParked'),
                      model_uri=NEON.specCondBuoyParked, domain=None, range=Optional[float])

slots.specCondBuoyProfile = Slot(uri=NEON.specCondBuoyProfile, name="specCondBuoyProfile", curie=NEON.curie('specCondBuoyProfile'),
                      model_uri=NEON.specCondBuoyProfile, domain=None, range=Optional[float])

slots.fDOMBuoyParked = Slot(uri=NEON.fDOMBuoyParked, name="fDOMBuoyParked", curie=NEON.curie('fDOMBuoyParked'),
                      model_uri=NEON.fDOMBuoyParked, domain=None, range=Optional[float])

slots.fDOMBuoyProfile = Slot(uri=NEON.fDOMBuoyProfile, name="fDOMBuoyProfile", curie=NEON.curie('fDOMBuoyProfile'),
                      model_uri=NEON.fDOMBuoyProfile, domain=None, range=Optional[float])

slots.turbidityBuoyParked = Slot(uri=NEON.turbidityBuoyParked, name="turbidityBuoyParked", curie=NEON.curie('turbidityBuoyParked'),
                      model_uri=NEON.turbidityBuoyParked, domain=None, range=Optional[float])

slots.turbidityBuoyProfile = Slot(uri=NEON.turbidityBuoyProfile, name="turbidityBuoyProfile", curie=NEON.curie('turbidityBuoyProfile'),
                      model_uri=NEON.turbidityBuoyProfile, domain=None, range=Optional[float])

slots.DOSaturationBuoyParked = Slot(uri=NEON.DOSaturationBuoyParked, name="DOSaturationBuoyParked", curie=NEON.curie('DOSaturationBuoyParked'),
                      model_uri=NEON.DOSaturationBuoyParked, domain=None, range=Optional[float])

slots.DOSaturationBuoyProfile = Slot(uri=NEON.DOSaturationBuoyProfile, name="DOSaturationBuoyProfile", curie=NEON.curie('DOSaturationBuoyProfile'),
                      model_uri=NEON.DOSaturationBuoyProfile, domain=None, range=Optional[float])

slots.DOBuoyParked = Slot(uri=NEON.DOBuoyParked, name="DOBuoyParked", curie=NEON.curie('DOBuoyParked'),
                      model_uri=NEON.DOBuoyParked, domain=None, range=Optional[float])

slots.DOBuoyProfile = Slot(uri=NEON.DOBuoyProfile, name="DOBuoyProfile", curie=NEON.curie('DOBuoyProfile'),
                      model_uri=NEON.DOBuoyProfile, domain=None, range=Optional[float])

slots.waterTempBuoyParked = Slot(uri=NEON.waterTempBuoyParked, name="waterTempBuoyParked", curie=NEON.curie('waterTempBuoyParked'),
                      model_uri=NEON.waterTempBuoyParked, domain=None, range=Optional[float])

slots.waterTempBuoyProfile = Slot(uri=NEON.waterTempBuoyProfile, name="waterTempBuoyProfile", curie=NEON.curie('waterTempBuoyProfile'),
                      model_uri=NEON.waterTempBuoyProfile, domain=None, range=Optional[float])

slots.waterPressureBuoyParked = Slot(uri=NEON.waterPressureBuoyParked, name="waterPressureBuoyParked", curie=NEON.curie('waterPressureBuoyParked'),
                      model_uri=NEON.waterPressureBuoyParked, domain=None, range=Optional[float])

slots.waterPressureBuoyProfile = Slot(uri=NEON.waterPressureBuoyProfile, name="waterPressureBuoyProfile", curie=NEON.curie('waterPressureBuoyProfile'),
                      model_uri=NEON.waterPressureBuoyProfile, domain=None, range=Optional[float])

slots.sensorDepthBuoyParked = Slot(uri=NEON.sensorDepthBuoyParked, name="sensorDepthBuoyParked", curie=NEON.curie('sensorDepthBuoyParked'),
                      model_uri=NEON.sensorDepthBuoyParked, domain=None, range=Optional[float])

slots.sensorDepthBuoyProfile = Slot(uri=NEON.sensorDepthBuoyProfile, name="sensorDepthBuoyProfile", curie=NEON.curie('sensorDepthBuoyProfile'),
                      model_uri=NEON.sensorDepthBuoyProfile, domain=None, range=Optional[float])

slots.batteryVoltageBuoyParked = Slot(uri=NEON.batteryVoltageBuoyParked, name="batteryVoltageBuoyParked", curie=NEON.curie('batteryVoltageBuoyParked'),
                      model_uri=NEON.batteryVoltageBuoyParked, domain=None, range=Optional[float])

slots.batteryVoltageBuoyProfile = Slot(uri=NEON.batteryVoltageBuoyProfile, name="batteryVoltageBuoyProfile", curie=NEON.curie('batteryVoltageBuoyProfile'),
                      model_uri=NEON.batteryVoltageBuoyProfile, domain=None, range=Optional[float])

slots.sensorVoltageBuoyParked = Slot(uri=NEON.sensorVoltageBuoyParked, name="sensorVoltageBuoyParked", curie=NEON.curie('sensorVoltageBuoyParked'),
                      model_uri=NEON.sensorVoltageBuoyParked, domain=None, range=Optional[float])

slots.sensorVoltageBuoyProfile = Slot(uri=NEON.sensorVoltageBuoyProfile, name="sensorVoltageBuoyProfile", curie=NEON.curie('sensorVoltageBuoyProfile'),
                      model_uri=NEON.sensorVoltageBuoyProfile, domain=None, range=Optional[float])

slots.chlaRawBuoyParked = Slot(uri=NEON.chlaRawBuoyParked, name="chlaRawBuoyParked", curie=NEON.curie('chlaRawBuoyParked'),
                      model_uri=NEON.chlaRawBuoyParked, domain=None, range=Optional[float])

slots.chlaRawBuoyProfile = Slot(uri=NEON.chlaRawBuoyProfile, name="chlaRawBuoyProfile", curie=NEON.curie('chlaRawBuoyProfile'),
                      model_uri=NEON.chlaRawBuoyProfile, domain=None, range=Optional[float])

slots.blueGreenRawBuoyParked = Slot(uri=NEON.blueGreenRawBuoyParked, name="blueGreenRawBuoyParked", curie=NEON.curie('blueGreenRawBuoyParked'),
                      model_uri=NEON.blueGreenRawBuoyParked, domain=None, range=Optional[float])

slots.blueGreenRawBuoyProfile = Slot(uri=NEON.blueGreenRawBuoyProfile, name="blueGreenRawBuoyProfile", curie=NEON.curie('blueGreenRawBuoyProfile'),
                      model_uri=NEON.blueGreenRawBuoyProfile, domain=None, range=Optional[float])

slots.fDOMRawBuoyParked = Slot(uri=NEON.fDOMRawBuoyParked, name="fDOMRawBuoyParked", curie=NEON.curie('fDOMRawBuoyParked'),
                      model_uri=NEON.fDOMRawBuoyParked, domain=None, range=Optional[float])

slots.fDOMRawBuoyProfile = Slot(uri=NEON.fDOMRawBuoyProfile, name="fDOMRawBuoyProfile", curie=NEON.curie('fDOMRawBuoyProfile'),
                      model_uri=NEON.fDOMRawBuoyProfile, domain=None, range=Optional[float])

slots.turbidityRawBuoyParked = Slot(uri=NEON.turbidityRawBuoyParked, name="turbidityRawBuoyParked", curie=NEON.curie('turbidityRawBuoyParked'),
                      model_uri=NEON.turbidityRawBuoyParked, domain=None, range=Optional[float])

slots.turbidityRawBuoyProfile = Slot(uri=NEON.turbidityRawBuoyProfile, name="turbidityRawBuoyProfile", curie=NEON.curie('turbidityRawBuoyProfile'),
                      model_uri=NEON.turbidityRawBuoyProfile, domain=None, range=Optional[float])

slots.wiperPositionBuoyParked = Slot(uri=NEON.wiperPositionBuoyParked, name="wiperPositionBuoyParked", curie=NEON.curie('wiperPositionBuoyParked'),
                      model_uri=NEON.wiperPositionBuoyParked, domain=None, range=Optional[float])

slots.wiperPositionBuoyProfile = Slot(uri=NEON.wiperPositionBuoyProfile, name="wiperPositionBuoyProfile", curie=NEON.curie('wiperPositionBuoyProfile'),
                      model_uri=NEON.wiperPositionBuoyProfile, domain=None, range=Optional[float])

slots.soilCO2concentrationMean = Slot(uri=NEON.soilCO2concentrationMean, name="soilCO2concentrationMean", curie=NEON.curie('soilCO2concentrationMean'),
                      model_uri=NEON.soilCO2concentrationMean, domain=None, range=Optional[float])

slots.soilCO2concentrationMinimum = Slot(uri=NEON.soilCO2concentrationMinimum, name="soilCO2concentrationMinimum", curie=NEON.curie('soilCO2concentrationMinimum'),
                      model_uri=NEON.soilCO2concentrationMinimum, domain=None, range=Optional[float])

slots.soilCO2concentrationMaximum = Slot(uri=NEON.soilCO2concentrationMaximum, name="soilCO2concentrationMaximum", curie=NEON.curie('soilCO2concentrationMaximum'),
                      model_uri=NEON.soilCO2concentrationMaximum, domain=None, range=Optional[float])

slots.soilCO2concentrationVariance = Slot(uri=NEON.soilCO2concentrationVariance, name="soilCO2concentrationVariance", curie=NEON.curie('soilCO2concentrationVariance'),
                      model_uri=NEON.soilCO2concentrationVariance, domain=None, range=Optional[float])

slots.soilCO2concentrationNumPts = Slot(uri=NEON.soilCO2concentrationNumPts, name="soilCO2concentrationNumPts", curie=NEON.curie('soilCO2concentrationNumPts'),
                      model_uri=NEON.soilCO2concentrationNumPts, domain=None, range=Optional[float])

slots.soilCO2concentrationExpUncert = Slot(uri=NEON.soilCO2concentrationExpUncert, name="soilCO2concentrationExpUncert", curie=NEON.curie('soilCO2concentrationExpUncert'),
                      model_uri=NEON.soilCO2concentrationExpUncert, domain=None, range=Optional[float])

slots.soilCO2concentrationStdErMean = Slot(uri=NEON.soilCO2concentrationStdErMean, name="soilCO2concentrationStdErMean", curie=NEON.curie('soilCO2concentrationStdErMean'),
                      model_uri=NEON.soilCO2concentrationStdErMean, domain=None, range=Optional[float])

slots.warmUpInstallationQAQCRpt = Slot(uri=NEON.warmUpInstallationQAQCRpt, name="warmUpInstallationQAQCRpt", curie=NEON.curie('warmUpInstallationQAQCRpt'),
                      model_uri=NEON.warmUpInstallationQAQCRpt, domain=None, range=Optional[str])

slots.sensorErrorStatusQAQCRpt = Slot(uri=NEON.sensorErrorStatusQAQCRpt, name="sensorErrorStatusQAQCRpt", curie=NEON.curie('sensorErrorStatusQAQCRpt'),
                      model_uri=NEON.sensorErrorStatusQAQCRpt, domain=None, range=Optional[str])

slots.temperatureSCO2QAQCRpt = Slot(uri=NEON.temperatureSCO2QAQCRpt, name="temperatureSCO2QAQCRpt", curie=NEON.curie('temperatureSCO2QAQCRpt'),
                      model_uri=NEON.temperatureSCO2QAQCRpt, domain=None, range=Optional[str])

slots.pressureRangeQAQCRpt = Slot(uri=NEON.pressureRangeQAQCRpt, name="pressureRangeQAQCRpt", curie=NEON.curie('pressureRangeQAQCRpt'),
                      model_uri=NEON.pressureRangeQAQCRpt, domain=None, range=Optional[str])

slots.warmUpInstallationFailQM = Slot(uri=NEON.warmUpInstallationFailQM, name="warmUpInstallationFailQM", curie=NEON.curie('warmUpInstallationFailQM'),
                      model_uri=NEON.warmUpInstallationFailQM, domain=None, range=Optional[float])

slots.warmUpInstallationPassQM = Slot(uri=NEON.warmUpInstallationPassQM, name="warmUpInstallationPassQM", curie=NEON.curie('warmUpInstallationPassQM'),
                      model_uri=NEON.warmUpInstallationPassQM, domain=None, range=Optional[float])

slots.warmUpInstallationNAQM = Slot(uri=NEON.warmUpInstallationNAQM, name="warmUpInstallationNAQM", curie=NEON.curie('warmUpInstallationNAQM'),
                      model_uri=NEON.warmUpInstallationNAQM, domain=None, range=Optional[float])

slots.sensorErrorStatusFailQM = Slot(uri=NEON.sensorErrorStatusFailQM, name="sensorErrorStatusFailQM", curie=NEON.curie('sensorErrorStatusFailQM'),
                      model_uri=NEON.sensorErrorStatusFailQM, domain=None, range=Optional[float])

slots.sensorErrorStatusPassQM = Slot(uri=NEON.sensorErrorStatusPassQM, name="sensorErrorStatusPassQM", curie=NEON.curie('sensorErrorStatusPassQM'),
                      model_uri=NEON.sensorErrorStatusPassQM, domain=None, range=Optional[float])

slots.sensorErrorStatusNAQM = Slot(uri=NEON.sensorErrorStatusNAQM, name="sensorErrorStatusNAQM", curie=NEON.curie('sensorErrorStatusNAQM'),
                      model_uri=NEON.sensorErrorStatusNAQM, domain=None, range=Optional[float])

slots.temperatureSCO2FailQM = Slot(uri=NEON.temperatureSCO2FailQM, name="temperatureSCO2FailQM", curie=NEON.curie('temperatureSCO2FailQM'),
                      model_uri=NEON.temperatureSCO2FailQM, domain=None, range=Optional[float])

slots.temperatureSCO2PassQM = Slot(uri=NEON.temperatureSCO2PassQM, name="temperatureSCO2PassQM", curie=NEON.curie('temperatureSCO2PassQM'),
                      model_uri=NEON.temperatureSCO2PassQM, domain=None, range=Optional[float])

slots.temperatureSCO2NAQM = Slot(uri=NEON.temperatureSCO2NAQM, name="temperatureSCO2NAQM", curie=NEON.curie('temperatureSCO2NAQM'),
                      model_uri=NEON.temperatureSCO2NAQM, domain=None, range=Optional[float])

slots.pressureRangeFailQM = Slot(uri=NEON.pressureRangeFailQM, name="pressureRangeFailQM", curie=NEON.curie('pressureRangeFailQM'),
                      model_uri=NEON.pressureRangeFailQM, domain=None, range=Optional[float])

slots.pressureRangePassQM = Slot(uri=NEON.pressureRangePassQM, name="pressureRangePassQM", curie=NEON.curie('pressureRangePassQM'),
                      model_uri=NEON.pressureRangePassQM, domain=None, range=Optional[float])

slots.pressureRangeNAQM = Slot(uri=NEON.pressureRangeNAQM, name="pressureRangeNAQM", curie=NEON.curie('pressureRangeNAQM'),
                      model_uri=NEON.pressureRangeNAQM, domain=None, range=Optional[float])

slots.fulcrumID = Slot(uri=NEON.fulcrumID, name="fulcrumID", curie=NEON.curie('fulcrumID'),
                      model_uri=NEON.fulcrumID, domain=None, range=Optional[str])

slots.createdDate = Slot(uri=NEON.createdDate, name="createdDate", curie=NEON.curie('createdDate'),
                      model_uri=NEON.createdDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.updatedDate = Slot(uri=NEON.updatedDate, name="updatedDate", curie=NEON.curie('updatedDate'),
                      model_uri=NEON.updatedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.createdBy = Slot(uri=NEON.createdBy, name="createdBy", curie=NEON.curie('createdBy'),
                      model_uri=NEON.createdBy, domain=None, range=Optional[str])

slots.updatedBy = Slot(uri=NEON.updatedBy, name="updatedBy", curie=NEON.curie('updatedBy'),
                      model_uri=NEON.updatedBy, domain=None, range=Optional[str])

slots.assignedTo = Slot(uri=NEON.assignedTo, name="assignedTo", curie=NEON.curie('assignedTo'),
                      model_uri=NEON.assignedTo, domain=None, range=Optional[str])

slots.clientCreatedDate = Slot(uri=NEON.clientCreatedDate, name="clientCreatedDate", curie=NEON.curie('clientCreatedDate'),
                      model_uri=NEON.clientCreatedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.recordVersion = Slot(uri=NEON.recordVersion, name="recordVersion", curie=NEON.curie('recordVersion'),
                      model_uri=NEON.recordVersion, domain=None, range=Optional[str])

slots.status = Slot(uri=NEON.status, name="status", curie=NEON.curie('status'),
                      model_uri=NEON.status, domain=None, range=Optional[str])

slots.project = Slot(uri=NEON.project, name="project", curie=NEON.curie('project'),
                      model_uri=NEON.project, domain=None, range=Optional[str])

slots.dataEntryAltitude = Slot(uri=NEON.dataEntryAltitude, name="dataEntryAltitude", curie=NEON.curie('dataEntryAltitude'),
                      model_uri=NEON.dataEntryAltitude, domain=None, range=Optional[float])

slots.dataEntryLatitude = Slot(uri=NEON.dataEntryLatitude, name="dataEntryLatitude", curie=NEON.curie('dataEntryLatitude'),
                      model_uri=NEON.dataEntryLatitude, domain=None, range=Optional[float])

slots.dataEntryLongitude = Slot(uri=NEON.dataEntryLongitude, name="dataEntryLongitude", curie=NEON.curie('dataEntryLongitude'),
                      model_uri=NEON.dataEntryLongitude, domain=None, range=Optional[float])

slots.horizontalAccuracy = Slot(uri=NEON.horizontalAccuracy, name="horizontalAccuracy", curie=NEON.curie('horizontalAccuracy'),
                      model_uri=NEON.horizontalAccuracy, domain=None, range=Optional[float])

slots.equipmentProblems = Slot(uri=NEON.equipmentProblems, name="equipmentProblems", curie=NEON.curie('equipmentProblems'),
                      model_uri=NEON.equipmentProblems, domain=None, range=Optional[str])

slots.equipmentProblemsCategory = Slot(uri=NEON.equipmentProblemsCategory, name="equipmentProblemsCategory", curie=NEON.curie('equipmentProblemsCategory'),
                      model_uri=NEON.equipmentProblemsCategory, domain=None, range=Optional[str])

slots.equipmentProblemsRemarks = Slot(uri=NEON.equipmentProblemsRemarks, name="equipmentProblemsRemarks", curie=NEON.curie('equipmentProblemsRemarks'),
                      model_uri=NEON.equipmentProblemsRemarks, domain=None, range=Optional[str])

slots.aSetBy = Slot(uri=NEON.aSetBy, name="aSetBy", curie=NEON.curie('aSetBy'),
                      model_uri=NEON.aSetBy, domain=None, range=Optional[str])

slots.bSetBy = Slot(uri=NEON.bSetBy, name="bSetBy", curie=NEON.curie('bSetBy'),
                      model_uri=NEON.bSetBy, domain=None, range=Optional[str])

slots.chemSubsampleBottleNumber = Slot(uri=NEON.chemSubsampleBottleNumber, name="chemSubsampleBottleNumber", curie=NEON.curie('chemSubsampleBottleNumber'),
                      model_uri=NEON.chemSubsampleBottleNumber, domain=None, range=Optional[str])

slots.chemSubsampleBottleStartMass = Slot(uri=NEON.chemSubsampleBottleStartMass, name="chemSubsampleBottleStartMass", curie=NEON.curie('chemSubsampleBottleStartMass'),
                      model_uri=NEON.chemSubsampleBottleStartMass, domain=None, range=Optional[float])

slots.chemSubsampleBottleEndMass = Slot(uri=NEON.chemSubsampleBottleEndMass, name="chemSubsampleBottleEndMass", curie=NEON.curie('chemSubsampleBottleEndMass'),
                      model_uri=NEON.chemSubsampleBottleEndMass, domain=None, range=Optional[float])

slots.chemSubsampleMass = Slot(uri=NEON.chemSubsampleMass, name="chemSubsampleMass", curie=NEON.curie('chemSubsampleMass'),
                      model_uri=NEON.chemSubsampleMass, domain=None, range=Optional[float])

slots.chemSubsampleCompromised = Slot(uri=NEON.chemSubsampleCompromised, name="chemSubsampleCompromised", curie=NEON.curie('chemSubsampleCompromised'),
                      model_uri=NEON.chemSubsampleCompromised, domain=None, range=Optional[str])

slots.chemSubsampleCompromisedCat = Slot(uri=NEON.chemSubsampleCompromisedCat, name="chemSubsampleCompromisedCat", curie=NEON.curie('chemSubsampleCompromisedCat'),
                      model_uri=NEON.chemSubsampleCompromisedCat, domain=None, range=Optional[str])

slots.chemSubsampleCompromisedRmrks = Slot(uri=NEON.chemSubsampleCompromisedRmrks, name="chemSubsampleCompromisedRmrks", curie=NEON.curie('chemSubsampleCompromisedRmrks'),
                      model_uri=NEON.chemSubsampleCompromisedRmrks, domain=None, range=Optional[str])

slots.isoSubsampleBottleNumber = Slot(uri=NEON.isoSubsampleBottleNumber, name="isoSubsampleBottleNumber", curie=NEON.curie('isoSubsampleBottleNumber'),
                      model_uri=NEON.isoSubsampleBottleNumber, domain=None, range=Optional[str])

slots.isoSubsampleBottleStartMass = Slot(uri=NEON.isoSubsampleBottleStartMass, name="isoSubsampleBottleStartMass", curie=NEON.curie('isoSubsampleBottleStartMass'),
                      model_uri=NEON.isoSubsampleBottleStartMass, domain=None, range=Optional[float])

slots.isoSubsampleBottleEndMass = Slot(uri=NEON.isoSubsampleBottleEndMass, name="isoSubsampleBottleEndMass", curie=NEON.curie('isoSubsampleBottleEndMass'),
                      model_uri=NEON.isoSubsampleBottleEndMass, domain=None, range=Optional[float])

slots.isoSubsampleMass = Slot(uri=NEON.isoSubsampleMass, name="isoSubsampleMass", curie=NEON.curie('isoSubsampleMass'),
                      model_uri=NEON.isoSubsampleMass, domain=None, range=Optional[float])

slots.isoSubsampleCompromised = Slot(uri=NEON.isoSubsampleCompromised, name="isoSubsampleCompromised", curie=NEON.curie('isoSubsampleCompromised'),
                      model_uri=NEON.isoSubsampleCompromised, domain=None, range=Optional[str])

slots.isoSubsampleCompromisedCat = Slot(uri=NEON.isoSubsampleCompromisedCat, name="isoSubsampleCompromisedCat", curie=NEON.curie('isoSubsampleCompromisedCat'),
                      model_uri=NEON.isoSubsampleCompromisedCat, domain=None, range=Optional[str])

slots.isoSubsampleCompromisedRmrks = Slot(uri=NEON.isoSubsampleCompromisedRmrks, name="isoSubsampleCompromisedRmrks", curie=NEON.curie('isoSubsampleCompromisedRmrks'),
                      model_uri=NEON.isoSubsampleCompromisedRmrks, domain=None, range=Optional[str])

slots.iso20SubsampleVolume = Slot(uri=NEON.iso20SubsampleVolume, name="iso20SubsampleVolume", curie=NEON.curie('iso20SubsampleVolume'),
                      model_uri=NEON.iso20SubsampleVolume, domain=None, range=Optional[float])

slots.labCompromised = Slot(uri=NEON.labCompromised, name="labCompromised", curie=NEON.curie('labCompromised'),
                      model_uri=NEON.labCompromised, domain=None, range=Optional[str])

slots.labCompromisedType = Slot(uri=NEON.labCompromisedType, name="labCompromisedType", curie=NEON.curie('labCompromisedType'),
                      model_uri=NEON.labCompromisedType, domain=None, range=Optional[str])

slots.labCompromisedRemarks = Slot(uri=NEON.labCompromisedRemarks, name="labCompromisedRemarks", curie=NEON.curie('labCompromisedRemarks'),
                      model_uri=NEON.labCompromisedRemarks, domain=None, range=Optional[str])

slots.sampleFate = Slot(uri=NEON.sampleFate, name="sampleFate", curie=NEON.curie('sampleFate'),
                      model_uri=NEON.sampleFate, domain=None, range=Optional[str])

slots.sampleCode = Slot(uri=NEON.sampleCode, name="sampleCode", curie=NEON.curie('sampleCode'),
                      model_uri=NEON.sampleCode, domain=None, range=Optional[str])

slots.chemSubsampleID = Slot(uri=NEON.chemSubsampleID, name="chemSubsampleID", curie=NEON.curie('chemSubsampleID'),
                      model_uri=NEON.chemSubsampleID, domain=None, range=Optional[str])

slots.chemSubsampleFate = Slot(uri=NEON.chemSubsampleFate, name="chemSubsampleFate", curie=NEON.curie('chemSubsampleFate'),
                      model_uri=NEON.chemSubsampleFate, domain=None, range=Optional[str])

slots.chemSubsampleBarcode = Slot(uri=NEON.chemSubsampleBarcode, name="chemSubsampleBarcode", curie=NEON.curie('chemSubsampleBarcode'),
                      model_uri=NEON.chemSubsampleBarcode, domain=None, range=Optional[str])

slots.isoSubsampleID = Slot(uri=NEON.isoSubsampleID, name="isoSubsampleID", curie=NEON.curie('isoSubsampleID'),
                      model_uri=NEON.isoSubsampleID, domain=None, range=Optional[str])

slots.isoSubsampleFate = Slot(uri=NEON.isoSubsampleFate, name="isoSubsampleFate", curie=NEON.curie('isoSubsampleFate'),
                      model_uri=NEON.isoSubsampleFate, domain=None, range=Optional[str])

slots.isoSubsampleBarcode = Slot(uri=NEON.isoSubsampleBarcode, name="isoSubsampleBarcode", curie=NEON.curie('isoSubsampleBarcode'),
                      model_uri=NEON.isoSubsampleBarcode, domain=None, range=Optional[str])

slots.iso20SubsampleID = Slot(uri=NEON.iso20SubsampleID, name="iso20SubsampleID", curie=NEON.curie('iso20SubsampleID'),
                      model_uri=NEON.iso20SubsampleID, domain=None, range=Optional[str])

slots.iso20SubsampleFate = Slot(uri=NEON.iso20SubsampleFate, name="iso20SubsampleFate", curie=NEON.curie('iso20SubsampleFate'),
                      model_uri=NEON.iso20SubsampleFate, domain=None, range=Optional[str])

slots.iso20SubsampleBarcode = Slot(uri=NEON.iso20SubsampleBarcode, name="iso20SubsampleBarcode", curie=NEON.curie('iso20SubsampleBarcode'),
                      model_uri=NEON.iso20SubsampleBarcode, domain=None, range=Optional[str])

slots.isotopeH2OSampleFate = Slot(uri=NEON.isotopeH2OSampleFate, name="isotopeH2OSampleFate", curie=NEON.curie('isotopeH2OSampleFate'),
                      model_uri=NEON.isotopeH2OSampleFate, domain=None, range=Optional[str])

slots.isotopeH2OSampleCode = Slot(uri=NEON.isotopeH2OSampleCode, name="isotopeH2OSampleCode", curie=NEON.curie('isotopeH2OSampleCode'),
                      model_uri=NEON.isotopeH2OSampleCode, domain=None, range=Optional[str])

slots.isotopePOMSampleFate = Slot(uri=NEON.isotopePOMSampleFate, name="isotopePOMSampleFate", curie=NEON.curie('isotopePOMSampleFate'),
                      model_uri=NEON.isotopePOMSampleFate, domain=None, range=Optional[str])

slots.isotopePOMRep2SampleFate = Slot(uri=NEON.isotopePOMRep2SampleFate, name="isotopePOMRep2SampleFate", curie=NEON.curie('isotopePOMRep2SampleFate'),
                      model_uri=NEON.isotopePOMRep2SampleFate, domain=None, range=Optional[str])

slots.isotopePOMRep2SampleCode = Slot(uri=NEON.isotopePOMRep2SampleCode, name="isotopePOMRep2SampleCode", curie=NEON.curie('isotopePOMRep2SampleCode'),
                      model_uri=NEON.isotopePOMRep2SampleCode, domain=None, range=Optional[str])

slots.isotopePOMSampleCode = Slot(uri=NEON.isotopePOMSampleCode, name="isotopePOMSampleCode", curie=NEON.curie('isotopePOMSampleCode'),
                      model_uri=NEON.isotopePOMSampleCode, domain=None, range=Optional[str])

slots.dataQF = Slot(uri=NEON.dataQF, name="dataQF", curie=NEON.curie('dataQF'),
                      model_uri=NEON.dataQF, domain=None, range=Optional[str])

slots.surfWaterNitrateMean = Slot(uri=NEON.surfWaterNitrateMean, name="surfWaterNitrateMean", curie=NEON.curie('surfWaterNitrateMean'),
                      model_uri=NEON.surfWaterNitrateMean, domain=None, range=Optional[float])

slots.surfWaterNitrateMinimum = Slot(uri=NEON.surfWaterNitrateMinimum, name="surfWaterNitrateMinimum", curie=NEON.curie('surfWaterNitrateMinimum'),
                      model_uri=NEON.surfWaterNitrateMinimum, domain=None, range=Optional[float])

slots.surfWaterNitrateMaximum = Slot(uri=NEON.surfWaterNitrateMaximum, name="surfWaterNitrateMaximum", curie=NEON.curie('surfWaterNitrateMaximum'),
                      model_uri=NEON.surfWaterNitrateMaximum, domain=None, range=Optional[float])

slots.surfWaterNitrateVariance = Slot(uri=NEON.surfWaterNitrateVariance, name="surfWaterNitrateVariance", curie=NEON.curie('surfWaterNitrateVariance'),
                      model_uri=NEON.surfWaterNitrateVariance, domain=None, range=Optional[float])

slots.surfWaterNitrateNumPts = Slot(uri=NEON.surfWaterNitrateNumPts, name="surfWaterNitrateNumPts", curie=NEON.curie('surfWaterNitrateNumPts'),
                      model_uri=NEON.surfWaterNitrateNumPts, domain=None, range=Optional[float])

slots.surfWaterNitrateExpUncert = Slot(uri=NEON.surfWaterNitrateExpUncert, name="surfWaterNitrateExpUncert", curie=NEON.curie('surfWaterNitrateExpUncert'),
                      model_uri=NEON.surfWaterNitrateExpUncert, domain=None, range=Optional[float])

slots.surfWaterNitrateStdErMean = Slot(uri=NEON.surfWaterNitrateStdErMean, name="surfWaterNitrateStdErMean", curie=NEON.curie('surfWaterNitrateStdErMean'),
                      model_uri=NEON.surfWaterNitrateStdErMean, domain=None, range=Optional[float])

slots.isoTestSubsampleID = Slot(uri=NEON.isoTestSubsampleID, name="isoTestSubsampleID", curie=NEON.curie('isoTestSubsampleID'),
                      model_uri=NEON.isoTestSubsampleID, domain=None, range=Optional[str])

slots.isoTestSubsampleFate = Slot(uri=NEON.isoTestSubsampleFate, name="isoTestSubsampleFate", curie=NEON.curie('isoTestSubsampleFate'),
                      model_uri=NEON.isoTestSubsampleFate, domain=None, range=Optional[str])

slots.isoTestSubsampleBarcode = Slot(uri=NEON.isoTestSubsampleBarcode, name="isoTestSubsampleBarcode", curie=NEON.curie('isoTestSubsampleBarcode'),
                      model_uri=NEON.isoTestSubsampleBarcode, domain=None, range=Optional[str])

slots.isoTestSubsampleVolume = Slot(uri=NEON.isoTestSubsampleVolume, name="isoTestSubsampleVolume", curie=NEON.curie('isoTestSubsampleVolume'),
                      model_uri=NEON.isoTestSubsampleVolume, domain=None, range=Optional[float])

slots.d18OsdWater = Slot(uri=NEON.d18OsdWater, name="d18OsdWater", curie=NEON.curie('d18OsdWater'),
                      model_uri=NEON.d18OsdWater, domain=None, range=Optional[float])

slots.d2HsdWater = Slot(uri=NEON.d2HsdWater, name="d2HsdWater", curie=NEON.curie('d2HsdWater'),
                      model_uri=NEON.d2HsdWater, domain=None, range=Optional[float])

slots.d13CPOM = Slot(uri=NEON.d13CPOM, name="d13CPOM", curie=NEON.curie('d13CPOM'),
                      model_uri=NEON.d13CPOM, domain=None, range=Optional[float])

slots.d15NPOM = Slot(uri=NEON.d15NPOM, name="d15NPOM", curie=NEON.curie('d15NPOM'),
                      model_uri=NEON.d15NPOM, domain=None, range=Optional[float])

slots.filterSize = Slot(uri=NEON.filterSize, name="filterSize", curie=NEON.curie('filterSize'),
                      model_uri=NEON.filterSize, domain=None, range=Optional[float])

slots.filterAnalyzedFraction = Slot(uri=NEON.filterAnalyzedFraction, name="filterAnalyzedFraction", curie=NEON.curie('filterAnalyzedFraction'),
                      model_uri=NEON.filterAnalyzedFraction, domain=None, range=Optional[float])

slots.plantAlgaeLabUnits = Slot(uri=NEON.plantAlgaeLabUnits, name="plantAlgaeLabUnits", curie=NEON.curie('plantAlgaeLabUnits'),
                      model_uri=NEON.plantAlgaeLabUnits, domain=None, range=Optional[str])

slots.instrumentSN = Slot(uri=NEON.instrumentSN, name="instrumentSN", curie=NEON.curie('instrumentSN'),
                      model_uri=NEON.instrumentSN, domain=None, range=Optional[str])

slots.isotopeH2OExternalLabQF = Slot(uri=NEON.isotopeH2OExternalLabQF, name="isotopeH2OExternalLabQF", curie=NEON.curie('isotopeH2OExternalLabQF'),
                      model_uri=NEON.isotopeH2OExternalLabQF, domain=None, range=Optional[str])

slots.H2OIsotopeQAQCID = Slot(uri=NEON.H2OIsotopeQAQCID, name="H2OIsotopeQAQCID", curie=NEON.curie('H2OIsotopeQAQCID'),
                      model_uri=NEON.H2OIsotopeQAQCID, domain=None, range=Optional[str])

slots.d18OMeasured = Slot(uri=NEON.d18OMeasured, name="d18OMeasured", curie=NEON.curie('d18OMeasured'),
                      model_uri=NEON.d18OMeasured, domain=None, range=Optional[float])

slots.d2HMeasured = Slot(uri=NEON.d2HMeasured, name="d2HMeasured", curie=NEON.curie('d2HMeasured'),
                      model_uri=NEON.d2HMeasured, domain=None, range=Optional[float])

slots.d18OKnown = Slot(uri=NEON.d18OKnown, name="d18OKnown", curie=NEON.curie('d18OKnown'),
                      model_uri=NEON.d18OKnown, domain=None, range=Optional[float])

slots.d2HKnown = Slot(uri=NEON.d2HKnown, name="d2HKnown", curie=NEON.curie('d2HKnown'),
                      model_uri=NEON.d2HKnown, domain=None, range=Optional[float])

slots.subsamplesProcessed = Slot(uri=NEON.subsamplesProcessed, name="subsamplesProcessed", curie=NEON.curie('subsamplesProcessed'),
                      model_uri=NEON.subsamplesProcessed, domain=None, range=Optional[str])

slots.isotopeH2OexternalLabQAQCFlag = Slot(uri=NEON.isotopeH2OexternalLabQAQCFlag, name="isotopeH2OexternalLabQAQCFlag", curie=NEON.curie('isotopeH2OexternalLabQAQCFlag'),
                      model_uri=NEON.isotopeH2OexternalLabQAQCFlag, domain=None, range=Optional[str])

slots.cellCountSampleID = Slot(uri=NEON.cellCountSampleID, name="cellCountSampleID", curie=NEON.curie('cellCountSampleID'),
                      model_uri=NEON.cellCountSampleID, domain=None, range=Optional[str])

slots.geneticSampleID = Slot(uri=NEON.geneticSampleID, name="geneticSampleID", curie=NEON.curie('geneticSampleID'),
                      model_uri=NEON.geneticSampleID, domain=None, range=Optional[str])

slots.labSampleID = Slot(uri=NEON.labSampleID, name="labSampleID", curie=NEON.curie('labSampleID'),
                      model_uri=NEON.labSampleID, domain=None, range=Optional[str])

slots.veloSoni = Slot(uri=NEON.veloSoni, name="veloSoni", curie=NEON.curie('veloSoni'),
                      model_uri=NEON.veloSoni, domain=None, range=Optional[float])

slots.towsTrapsNumber = Slot(uri=NEON.towsTrapsNumber, name="towsTrapsNumber", curie=NEON.curie('towsTrapsNumber'),
                      model_uri=NEON.towsTrapsNumber, domain=None, range=Optional[str])

slots.totalSampledArea = Slot(uri=NEON.totalSampledArea, name="totalSampledArea", curie=NEON.curie('totalSampledArea'),
                      model_uri=NEON.totalSampledArea, domain=None, range=Optional[float])

slots.setNetCount = Slot(uri=NEON.setNetCount, name="setNetCount", curie=NEON.curie('setNetCount'),
                      model_uri=NEON.setNetCount, domain=None, range=Optional[str])

slots.sampledNetCount = Slot(uri=NEON.sampledNetCount, name="sampledNetCount", curie=NEON.curie('sampledNetCount'),
                      model_uri=NEON.sampledNetCount, domain=None, range=Optional[str])

slots.missingNetCount = Slot(uri=NEON.missingNetCount, name="missingNetCount", curie=NEON.curie('missingNetCount'),
                      model_uri=NEON.missingNetCount, domain=None, range=Optional[str])

slots.aquaticSiteType = Slot(uri=NEON.aquaticSiteType, name="aquaticSiteType", curie=NEON.curie('aquaticSiteType'),
                      model_uri=NEON.aquaticSiteType, domain=None, range=Optional[str])

slots.zooDepth1 = Slot(uri=NEON.zooDepth1, name="zooDepth1", curie=NEON.curie('zooDepth1'),
                      model_uri=NEON.zooDepth1, domain=None, range=Optional[float])

slots.zooDepth2 = Slot(uri=NEON.zooDepth2, name="zooDepth2", curie=NEON.curie('zooDepth2'),
                      model_uri=NEON.zooDepth2, domain=None, range=Optional[float])

slots.zooDepth3 = Slot(uri=NEON.zooDepth3, name="zooDepth3", curie=NEON.curie('zooDepth3'),
                      model_uri=NEON.zooDepth3, domain=None, range=Optional[float])

slots.referencePhotoID = Slot(uri=NEON.referencePhotoID, name="referencePhotoID", curie=NEON.curie('referencePhotoID'),
                      model_uri=NEON.referencePhotoID, domain=None, range=Optional[str])

slots.sampleBarcode = Slot(uri=NEON.sampleBarcode, name="sampleBarcode", curie=NEON.curie('sampleBarcode'),
                      model_uri=NEON.sampleBarcode, domain=None, range=Optional[str])

slots.ovenStartDate = Slot(uri=NEON.ovenStartDate, name="ovenStartDate", curie=NEON.curie('ovenStartDate'),
                      model_uri=NEON.ovenStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.ovenEndDate = Slot(uri=NEON.ovenEndDate, name="ovenEndDate", curie=NEON.curie('ovenEndDate'),
                      model_uri=NEON.ovenEndDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.supplementalDryingTime = Slot(uri=NEON.supplementalDryingTime, name="supplementalDryingTime", curie=NEON.curie('supplementalDryingTime'),
                      model_uri=NEON.supplementalDryingTime, domain=None, range=Optional[str])

slots.setBy = Slot(uri=NEON.setBy, name="setBy", curie=NEON.curie('setBy'),
                      model_uri=NEON.setBy, domain=None, range=Optional[str])

slots.setRemarks = Slot(uri=NEON.setRemarks, name="setRemarks", curie=NEON.curie('setRemarks'),
                      model_uri=NEON.setRemarks, domain=None, range=Optional[str])

slots.collectRemarks = Slot(uri=NEON.collectRemarks, name="collectRemarks", curie=NEON.curie('collectRemarks'),
                      model_uri=NEON.collectRemarks, domain=None, range=Optional[str])

slots.weighRemarks = Slot(uri=NEON.weighRemarks, name="weighRemarks", curie=NEON.curie('weighRemarks'),
                      model_uri=NEON.weighRemarks, domain=None, range=Optional[str])

slots.compressedBuoyWaterQuality = Slot(uri=NEON.compressedBuoyWaterQuality, name="compressedBuoyWaterQuality", curie=NEON.curie('compressedBuoyWaterQuality'),
                      model_uri=NEON.compressedBuoyWaterQuality, domain=None, range=Optional[str])

slots.algaeSampleID = Slot(uri=NEON.algaeSampleID, name="algaeSampleID", curie=NEON.curie('algaeSampleID'),
                      model_uri=NEON.algaeSampleID, domain=None, range=Optional[str])

slots.algaeSampleFate = Slot(uri=NEON.algaeSampleFate, name="algaeSampleFate", curie=NEON.curie('algaeSampleFate'),
                      model_uri=NEON.algaeSampleFate, domain=None, range=Optional[str])

slots.algaeSampleCode = Slot(uri=NEON.algaeSampleCode, name="algaeSampleCode", curie=NEON.curie('algaeSampleCode'),
                      model_uri=NEON.algaeSampleCode, domain=None, range=Optional[str])

slots.algalSampleType = Slot(uri=NEON.algalSampleType, name="algalSampleType", curie=NEON.curie('algalSampleType'),
                      model_uri=NEON.algalSampleType, domain=None, range=Optional[str])

slots.phytoDepth1 = Slot(uri=NEON.phytoDepth1, name="phytoDepth1", curie=NEON.curie('phytoDepth1'),
                      model_uri=NEON.phytoDepth1, domain=None, range=Optional[float])

slots.phytoDepth2 = Slot(uri=NEON.phytoDepth2, name="phytoDepth2", curie=NEON.curie('phytoDepth2'),
                      model_uri=NEON.phytoDepth2, domain=None, range=Optional[float])

slots.phytoDepth3 = Slot(uri=NEON.phytoDepth3, name="phytoDepth3", curie=NEON.curie('phytoDepth3'),
                      model_uri=NEON.phytoDepth3, domain=None, range=Optional[float])

slots.fieldSampleVolume = Slot(uri=NEON.fieldSampleVolume, name="fieldSampleVolume", curie=NEON.curie('fieldSampleVolume'),
                      model_uri=NEON.fieldSampleVolume, domain=None, range=Optional[float])

slots.alternateFieldSampleVolume = Slot(uri=NEON.alternateFieldSampleVolume, name="alternateFieldSampleVolume", curie=NEON.curie('alternateFieldSampleVolume'),
                      model_uri=NEON.alternateFieldSampleVolume, domain=None, range=Optional[float])

slots.parentSampleFate = Slot(uri=NEON.parentSampleFate, name="parentSampleFate", curie=NEON.curie('parentSampleFate'),
                      model_uri=NEON.parentSampleFate, domain=None, range=Optional[str])

slots.parentSampleCode = Slot(uri=NEON.parentSampleCode, name="parentSampleCode", curie=NEON.curie('parentSampleCode'),
                      model_uri=NEON.parentSampleCode, domain=None, range=Optional[str])

slots.sampleClass = Slot(uri=NEON.sampleClass, name="sampleClass", curie=NEON.curie('sampleClass'),
                      model_uri=NEON.sampleClass, domain=None, range=Optional[str])

slots.labSampleVolume = Slot(uri=NEON.labSampleVolume, name="labSampleVolume", curie=NEON.curie('labSampleVolume'),
                      model_uri=NEON.labSampleVolume, domain=None, range=Optional[float])

slots.domainFilterVolume = Slot(uri=NEON.domainFilterVolume, name="domainFilterVolume", curie=NEON.curie('domainFilterVolume'),
                      model_uri=NEON.domainFilterVolume, domain=None, range=Optional[float])

slots.domainFilterVolumeQF = Slot(uri=NEON.domainFilterVolumeQF, name="domainFilterVolumeQF", curie=NEON.curie('domainFilterVolumeQF'),
                      model_uri=NEON.domainFilterVolumeQF, domain=None, range=Optional[float])

slots.filterNumber = Slot(uri=NEON.filterNumber, name="filterNumber", curie=NEON.curie('filterNumber'),
                      model_uri=NEON.filterNumber, domain=None, range=Optional[str])

slots.preservativeType = Slot(uri=NEON.preservativeType, name="preservativeType", curie=NEON.curie('preservativeType'),
                      model_uri=NEON.preservativeType, domain=None, range=Optional[str])

slots.preservativeVolume = Slot(uri=NEON.preservativeVolume, name="preservativeVolume", curie=NEON.curie('preservativeVolume'),
                      model_uri=NEON.preservativeVolume, domain=None, range=Optional[float])

slots.sampleCondition = Slot(uri=NEON.sampleCondition, name="sampleCondition", curie=NEON.curie('sampleCondition'),
                      model_uri=NEON.sampleCondition, domain=None, range=Optional[str])

slots.plantDryMass = Slot(uri=NEON.plantDryMass, name="plantDryMass", curie=NEON.curie('plantDryMass'),
                      model_uri=NEON.plantDryMass, domain=None, range=Optional[float])

slots.plantSurfaceArea = Slot(uri=NEON.plantSurfaceArea, name="plantSurfaceArea", curie=NEON.curie('plantSurfaceArea'),
                      model_uri=NEON.plantSurfaceArea, domain=None, range=Optional[float])

slots.biovolumeMean = Slot(uri=NEON.biovolumeMean, name="biovolumeMean", curie=NEON.curie('biovolumeMean'),
                      model_uri=NEON.biovolumeMean, domain=None, range=Optional[float])

slots.biovolumeVariance = Slot(uri=NEON.biovolumeVariance, name="biovolumeVariance", curie=NEON.curie('biovolumeVariance'),
                      model_uri=NEON.biovolumeVariance, domain=None, range=Optional[float])

slots.biovolumeFormula = Slot(uri=NEON.biovolumeFormula, name="biovolumeFormula", curie=NEON.curie('biovolumeFormula'),
                      model_uri=NEON.biovolumeFormula, domain=None, range=Optional[str])

slots.slideCode = Slot(uri=NEON.slideCode, name="slideCode", curie=NEON.curie('slideCode'),
                      model_uri=NEON.slideCode, domain=None, range=Optional[str])

slots.volumeAdjValue = Slot(uri=NEON.volumeAdjValue, name="volumeAdjValue", curie=NEON.curie('volumeAdjValue'),
                      model_uri=NEON.volumeAdjValue, domain=None, range=Optional[float])

slots.volumeAdjUnit = Slot(uri=NEON.volumeAdjUnit, name="volumeAdjUnit", curie=NEON.curie('volumeAdjUnit'),
                      model_uri=NEON.volumeAdjUnit, domain=None, range=Optional[str])

slots.arealAdjValue = Slot(uri=NEON.arealAdjValue, name="arealAdjValue", curie=NEON.curie('arealAdjValue'),
                      model_uri=NEON.arealAdjValue, domain=None, range=Optional[float])

slots.arealAdjUnit = Slot(uri=NEON.arealAdjUnit, name="arealAdjUnit", curie=NEON.curie('arealAdjUnit'),
                      model_uri=NEON.arealAdjUnit, domain=None, range=Optional[str])

slots.biovolumeSpecimenNumber = Slot(uri=NEON.biovolumeSpecimenNumber, name="biovolumeSpecimenNumber", curie=NEON.curie('biovolumeSpecimenNumber'),
                      model_uri=NEON.biovolumeSpecimenNumber, domain=None, range=Optional[str])

slots.growthInterval = Slot(uri=NEON.growthInterval, name="growthInterval", curie=NEON.curie('growthInterval'),
                      model_uri=NEON.growthInterval, domain=None, range=Optional[str])

slots.cellCountDataQF = Slot(uri=NEON.cellCountDataQF, name="cellCountDataQF", curie=NEON.curie('cellCountDataQF'),
                      model_uri=NEON.cellCountDataQF, domain=None, range=Optional[str])

slots.cellCountSampleFate = Slot(uri=NEON.cellCountSampleFate, name="cellCountSampleFate", curie=NEON.curie('cellCountSampleFate'),
                      model_uri=NEON.cellCountSampleFate, domain=None, range=Optional[str])

slots.cellCountSampleCode = Slot(uri=NEON.cellCountSampleCode, name="cellCountSampleCode", curie=NEON.curie('cellCountSampleCode'),
                      model_uri=NEON.cellCountSampleCode, domain=None, range=Optional[str])

slots.nauplii = Slot(uri=NEON.nauplii, name="nauplii", curie=NEON.curie('nauplii'),
                      model_uri=NEON.nauplii, domain=None, range=Optional[str])

slots.trapCondition = Slot(uri=NEON.trapCondition, name="trapCondition", curie=NEON.curie('trapCondition'),
                      model_uri=NEON.trapCondition, domain=None, range=Optional[str])

slots.zooMinimumLength = Slot(uri=NEON.zooMinimumLength, name="zooMinimumLength", curie=NEON.curie('zooMinimumLength'),
                      model_uri=NEON.zooMinimumLength, domain=None, range=Optional[float])

slots.zooMaximumLength = Slot(uri=NEON.zooMaximumLength, name="zooMaximumLength", curie=NEON.curie('zooMaximumLength'),
                      model_uri=NEON.zooMaximumLength, domain=None, range=Optional[float])

slots.zooMeanLength = Slot(uri=NEON.zooMeanLength, name="zooMeanLength", curie=NEON.curie('zooMeanLength'),
                      model_uri=NEON.zooMeanLength, domain=None, range=Optional[float])

slots.zooWidth = Slot(uri=NEON.zooWidth, name="zooWidth", curie=NEON.curie('zooWidth'),
                      model_uri=NEON.zooWidth, domain=None, range=Optional[float])

slots.zooSubsampleVolume = Slot(uri=NEON.zooSubsampleVolume, name="zooSubsampleVolume", curie=NEON.curie('zooSubsampleVolume'),
                      model_uri=NEON.zooSubsampleVolume, domain=None, range=Optional[float])

slots.superphylum = Slot(uri=NEON.superphylum, name="superphylum", curie=NEON.curie('superphylum'),
                      model_uri=NEON.superphylum, domain=None, range=Optional[str])

slots.infraphylum = Slot(uri=NEON.infraphylum, name="infraphylum", curie=NEON.curie('infraphylum'),
                      model_uri=NEON.infraphylum, domain=None, range=Optional[str])

slots.referenceFate = Slot(uri=NEON.referenceFate, name="referenceFate", curie=NEON.curie('referenceFate'),
                      model_uri=NEON.referenceFate, domain=None, range=Optional[str])

slots.referenceCode = Slot(uri=NEON.referenceCode, name="referenceCode", curie=NEON.curie('referenceCode'),
                      model_uri=NEON.referenceCode, domain=None, range=Optional[str])

slots.dnaSampleID = Slot(uri=NEON.dnaSampleID, name="dnaSampleID", curie=NEON.curie('dnaSampleID'),
                      model_uri=NEON.dnaSampleID, domain=None, range=Optional[str])

slots.dnaSampleFate = Slot(uri=NEON.dnaSampleFate, name="dnaSampleFate", curie=NEON.curie('dnaSampleFate'),
                      model_uri=NEON.dnaSampleFate, domain=None, range=Optional[str])

slots.dnaSampleCode = Slot(uri=NEON.dnaSampleCode, name="dnaSampleCode", curie=NEON.curie('dnaSampleCode'),
                      model_uri=NEON.dnaSampleCode, domain=None, range=Optional[str])

slots.slideFate = Slot(uri=NEON.slideFate, name="slideFate", curie=NEON.curie('slideFate'),
                      model_uri=NEON.slideFate, domain=None, range=Optional[str])

slots.fieldDataQF = Slot(uri=NEON.fieldDataQF, name="fieldDataQF", curie=NEON.curie('fieldDataQF'),
                      model_uri=NEON.fieldDataQF, domain=None, range=Optional[str])

slots.externalLabDataQF = Slot(uri=NEON.externalLabDataQF, name="externalLabDataQF", curie=NEON.curie('externalLabDataQF'),
                      model_uri=NEON.externalLabDataQF, domain=None, range=Optional[str])

slots.perSampleDataQF = Slot(uri=NEON.perSampleDataQF, name="perSampleDataQF", curie=NEON.curie('perSampleDataQF'),
                      model_uri=NEON.perSampleDataQF, domain=None, range=Optional[str])

slots.PAR = Slot(uri=NEON.PAR, name="PAR", curie=NEON.curie('PAR'),
                      model_uri=NEON.PAR, domain=None, range=Optional[float])

slots.airDryEndDate = Slot(uri=NEON.airDryEndDate, name="airDryEndDate", curie=NEON.curie('airDryEndDate'),
                      model_uri=NEON.airDryEndDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.airDryStartDate = Slot(uri=NEON.airDryStartDate, name="airDryStartDate", curie=NEON.curie('airDryStartDate'),
                      model_uri=NEON.airDryStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.bgcArchiveCode = Slot(uri=NEON.bgcArchiveCode, name="bgcArchiveCode", curie=NEON.curie('bgcArchiveCode'),
                      model_uri=NEON.bgcArchiveCode, domain=None, range=Optional[str])

slots.bgcArchiveFate = Slot(uri=NEON.bgcArchiveFate, name="bgcArchiveFate", curie=NEON.curie('bgcArchiveFate'),
                      model_uri=NEON.bgcArchiveFate, domain=None, range=Optional[str])

slots.bgcArchiveID = Slot(uri=NEON.bgcArchiveID, name="bgcArchiveID", curie=NEON.curie('bgcArchiveID'),
                      model_uri=NEON.bgcArchiveID, domain=None, range=Optional[str])

slots.biomassCode = Slot(uri=NEON.biomassCode, name="biomassCode", curie=NEON.curie('biomassCode'),
                      model_uri=NEON.biomassCode, domain=None, range=Optional[str])

slots.biomassFate = Slot(uri=NEON.biomassFate, name="biomassFate", curie=NEON.curie('biomassFate'),
                      model_uri=NEON.biomassFate, domain=None, range=Optional[str])

slots.biomassID = Slot(uri=NEON.biomassID, name="biomassID", curie=NEON.curie('biomassID'),
                      model_uri=NEON.biomassID, domain=None, range=Optional[str])

slots.boutType = Slot(uri=NEON.boutType, name="boutType", curie=NEON.curie('boutType'),
                      model_uri=NEON.boutType, domain=None, range=Optional[str])

slots.cnSampleCode = Slot(uri=NEON.cnSampleCode, name="cnSampleCode", curie=NEON.curie('cnSampleCode'),
                      model_uri=NEON.cnSampleCode, domain=None, range=Optional[str])

slots.cnSampleFate = Slot(uri=NEON.cnSampleFate, name="cnSampleFate", curie=NEON.curie('cnSampleFate'),
                      model_uri=NEON.cnSampleFate, domain=None, range=Optional[str])

slots.cnSampleID = Slot(uri=NEON.cnSampleID, name="cnSampleID", curie=NEON.curie('cnSampleID'),
                      model_uri=NEON.cnSampleID, domain=None, range=Optional[str])

slots.compositeSampleCode = Slot(uri=NEON.compositeSampleCode, name="compositeSampleCode", curie=NEON.curie('compositeSampleCode'),
                      model_uri=NEON.compositeSampleCode, domain=None, range=Optional[str])

slots.compositeSampleFate = Slot(uri=NEON.compositeSampleFate, name="compositeSampleFate", curie=NEON.curie('compositeSampleFate'),
                      model_uri=NEON.compositeSampleFate, domain=None, range=Optional[str])

slots.compositeSampleID = Slot(uri=NEON.compositeSampleID, name="compositeSampleID", curie=NEON.curie('compositeSampleID'),
                      model_uri=NEON.compositeSampleID, domain=None, range=Optional[str])

slots.coreCoordinateX = Slot(uri=NEON.coreCoordinateX, name="coreCoordinateX", curie=NEON.curie('coreCoordinateX'),
                      model_uri=NEON.coreCoordinateX, domain=None, range=Optional[float])

slots.coreCoordinateY = Slot(uri=NEON.coreCoordinateY, name="coreCoordinateY", curie=NEON.curie('coreCoordinateY'),
                      model_uri=NEON.coreCoordinateY, domain=None, range=Optional[float])

slots.freshMassBoatMass = Slot(uri=NEON.freshMassBoatMass, name="freshMassBoatMass", curie=NEON.curie('freshMassBoatMass'),
                      model_uri=NEON.freshMassBoatMass, domain=None, range=Optional[float])

slots.geneticArchiveSample1Code = Slot(uri=NEON.geneticArchiveSample1Code, name="geneticArchiveSample1Code", curie=NEON.curie('geneticArchiveSample1Code'),
                      model_uri=NEON.geneticArchiveSample1Code, domain=None, range=Optional[str])

slots.geneticArchiveSample1Fate = Slot(uri=NEON.geneticArchiveSample1Fate, name="geneticArchiveSample1Fate", curie=NEON.curie('geneticArchiveSample1Fate'),
                      model_uri=NEON.geneticArchiveSample1Fate, domain=None, range=Optional[str])

slots.geneticArchiveSample1ID = Slot(uri=NEON.geneticArchiveSample1ID, name="geneticArchiveSample1ID", curie=NEON.curie('geneticArchiveSample1ID'),
                      model_uri=NEON.geneticArchiveSample1ID, domain=None, range=Optional[str])

slots.geneticArchiveSample2Code = Slot(uri=NEON.geneticArchiveSample2Code, name="geneticArchiveSample2Code", curie=NEON.curie('geneticArchiveSample2Code'),
                      model_uri=NEON.geneticArchiveSample2Code, domain=None, range=Optional[str])

slots.geneticArchiveSample2Fate = Slot(uri=NEON.geneticArchiveSample2Fate, name="geneticArchiveSample2Fate", curie=NEON.curie('geneticArchiveSample2Fate'),
                      model_uri=NEON.geneticArchiveSample2Fate, domain=None, range=Optional[str])

slots.geneticArchiveSample2ID = Slot(uri=NEON.geneticArchiveSample2ID, name="geneticArchiveSample2ID", curie=NEON.curie('geneticArchiveSample2ID'),
                      model_uri=NEON.geneticArchiveSample2ID, domain=None, range=Optional[str])

slots.geneticArchiveSample3Code = Slot(uri=NEON.geneticArchiveSample3Code, name="geneticArchiveSample3Code", curie=NEON.curie('geneticArchiveSample3Code'),
                      model_uri=NEON.geneticArchiveSample3Code, domain=None, range=Optional[str])

slots.geneticArchiveSample3Fate = Slot(uri=NEON.geneticArchiveSample3Fate, name="geneticArchiveSample3Fate", curie=NEON.curie('geneticArchiveSample3Fate'),
                      model_uri=NEON.geneticArchiveSample3Fate, domain=None, range=Optional[str])

slots.geneticArchiveSample3ID = Slot(uri=NEON.geneticArchiveSample3ID, name="geneticArchiveSample3ID", curie=NEON.curie('geneticArchiveSample3ID'),
                      model_uri=NEON.geneticArchiveSample3ID, domain=None, range=Optional[str])

slots.geneticArchiveSample4Code = Slot(uri=NEON.geneticArchiveSample4Code, name="geneticArchiveSample4Code", curie=NEON.curie('geneticArchiveSample4Code'),
                      model_uri=NEON.geneticArchiveSample4Code, domain=None, range=Optional[str])

slots.geneticArchiveSample4Fate = Slot(uri=NEON.geneticArchiveSample4Fate, name="geneticArchiveSample4Fate", curie=NEON.curie('geneticArchiveSample4Fate'),
                      model_uri=NEON.geneticArchiveSample4Fate, domain=None, range=Optional[str])

slots.geneticArchiveSample4ID = Slot(uri=NEON.geneticArchiveSample4ID, name="geneticArchiveSample4ID", curie=NEON.curie('geneticArchiveSample4ID'),
                      model_uri=NEON.geneticArchiveSample4ID, domain=None, range=Optional[str])

slots.geneticArchiveSample5Code = Slot(uri=NEON.geneticArchiveSample5Code, name="geneticArchiveSample5Code", curie=NEON.curie('geneticArchiveSample5Code'),
                      model_uri=NEON.geneticArchiveSample5Code, domain=None, range=Optional[str])

slots.geneticArchiveSample5Fate = Slot(uri=NEON.geneticArchiveSample5Fate, name="geneticArchiveSample5Fate", curie=NEON.curie('geneticArchiveSample5Fate'),
                      model_uri=NEON.geneticArchiveSample5Fate, domain=None, range=Optional[str])

slots.geneticArchiveSample5ID = Slot(uri=NEON.geneticArchiveSample5ID, name="geneticArchiveSample5ID", curie=NEON.curie('geneticArchiveSample5ID'),
                      model_uri=NEON.geneticArchiveSample5ID, domain=None, range=Optional[str])

slots.geneticArchiveSampleCount = Slot(uri=NEON.geneticArchiveSampleCount, name="geneticArchiveSampleCount", curie=NEON.curie('geneticArchiveSampleCount'),
                      model_uri=NEON.geneticArchiveSampleCount, domain=None, range=Optional[int])

slots.geneticSampleCode = Slot(uri=NEON.geneticSampleCode, name="geneticSampleCode", curie=NEON.curie('geneticSampleCode'),
                      model_uri=NEON.geneticSampleCode, domain=None, range=Optional[str])

slots.geneticSampleCondition = Slot(uri=NEON.geneticSampleCondition, name="geneticSampleCondition", curie=NEON.curie('geneticSampleCondition'),
                      model_uri=NEON.geneticSampleCondition, domain=None, range=Optional[str])

slots.geneticSampleFate = Slot(uri=NEON.geneticSampleFate, name="geneticSampleFate", curie=NEON.curie('geneticSampleFate'),
                      model_uri=NEON.geneticSampleFate, domain=None, range=Optional[str])

slots.horizon = Slot(uri=NEON.horizon, name="horizon", curie=NEON.curie('horizon'),
                      model_uri=NEON.horizon, domain=None, range=Optional[str])

slots.horizonExceedsSampleDepth = Slot(uri=NEON.horizonExceedsSampleDepth, name="horizonExceedsSampleDepth", curie=NEON.curie('horizonExceedsSampleDepth'),
                      model_uri=NEON.horizonExceedsSampleDepth, domain=None, range=Optional[str])

slots.litterDepth = Slot(uri=NEON.litterDepth, name="litterDepth", curie=NEON.curie('litterDepth'),
                      model_uri=NEON.litterDepth, domain=None, range=Optional[float])

slots.locationFlooded = Slot(uri=NEON.locationFlooded, name="locationFlooded", curie=NEON.curie('locationFlooded'),
                      model_uri=NEON.locationFlooded, domain=None, range=Optional[str])

slots.moistureSampleCode = Slot(uri=NEON.moistureSampleCode, name="moistureSampleCode", curie=NEON.curie('moistureSampleCode'),
                      model_uri=NEON.moistureSampleCode, domain=None, range=Optional[str])

slots.moistureSampleFate = Slot(uri=NEON.moistureSampleFate, name="moistureSampleFate", curie=NEON.curie('moistureSampleFate'),
                      model_uri=NEON.moistureSampleFate, domain=None, range=Optional[str])

slots.moistureSampleID = Slot(uri=NEON.moistureSampleID, name="moistureSampleID", curie=NEON.curie('moistureSampleID'),
                      model_uri=NEON.moistureSampleID, domain=None, range=Optional[str])

slots.nTransBoutType = Slot(uri=NEON.nTransBoutType, name="nTransBoutType", curie=NEON.curie('nTransBoutType'),
                      model_uri=NEON.nTransBoutType, domain=None, range=Optional[str])

slots.pHCaClVol = Slot(uri=NEON.pHCaClVol, name="pHCaClVol", curie=NEON.curie('pHCaClVol'),
                      model_uri=NEON.pHCaClVol, domain=None, range=Optional[float])

slots.pHSampleCode = Slot(uri=NEON.pHSampleCode, name="pHSampleCode", curie=NEON.curie('pHSampleCode'),
                      model_uri=NEON.pHSampleCode, domain=None, range=Optional[str])

slots.pHSampleFate = Slot(uri=NEON.pHSampleFate, name="pHSampleFate", curie=NEON.curie('pHSampleFate'),
                      model_uri=NEON.pHSampleFate, domain=None, range=Optional[str])

slots.pHSampleID = Slot(uri=NEON.pHSampleID, name="pHSampleID", curie=NEON.curie('pHSampleID'),
                      model_uri=NEON.pHSampleID, domain=None, range=Optional[str])

slots.pHSoilInCaClMass = Slot(uri=NEON.pHSoilInCaClMass, name="pHSoilInCaClMass", curie=NEON.curie('pHSoilInCaClMass'),
                      model_uri=NEON.pHSoilInCaClMass, domain=None, range=Optional[float])

slots.pHSoilInWaterMass = Slot(uri=NEON.pHSoilInWaterMass, name="pHSoilInWaterMass", curie=NEON.curie('pHSoilInWaterMass'),
                      model_uri=NEON.pHSoilInWaterMass, domain=None, range=Optional[float])

slots.pHWaterVol = Slot(uri=NEON.pHWaterVol, name="pHWaterVol", curie=NEON.curie('pHWaterVol'),
                      model_uri=NEON.pHWaterVol, domain=None, range=Optional[float])

slots.processedBy = Slot(uri=NEON.processedBy, name="processedBy", curie=NEON.curie('processedBy'),
                      model_uri=NEON.processedBy, domain=None, range=Optional[str])

slots.sampleBottomDepth = Slot(uri=NEON.sampleBottomDepth, name="sampleBottomDepth", curie=NEON.curie('sampleBottomDepth'),
                      model_uri=NEON.sampleBottomDepth, domain=None, range=Optional[float])

slots.sampleTopDepth = Slot(uri=NEON.sampleTopDepth, name="sampleTopDepth", curie=NEON.curie('sampleTopDepth'),
                      model_uri=NEON.sampleTopDepth, domain=None, range=Optional[float])

slots.soilCoreCount = Slot(uri=NEON.soilCoreCount, name="soilCoreCount", curie=NEON.curie('soilCoreCount'),
                      model_uri=NEON.soilCoreCount, domain=None, range=Optional[str])

slots.soilInCaClpH = Slot(uri=NEON.soilInCaClpH, name="soilInCaClpH", curie=NEON.curie('soilInCaClpH'),
                      model_uri=NEON.soilInCaClpH, domain=None, range=Optional[float])

slots.soilInWaterpH = Slot(uri=NEON.soilInWaterpH, name="soilInWaterpH", curie=NEON.curie('soilInWaterpH'),
                      model_uri=NEON.soilInWaterpH, domain=None, range=Optional[float])

slots.soilSamplingDevice = Slot(uri=NEON.soilSamplingDevice, name="soilSamplingDevice", curie=NEON.curie('soilSamplingDevice'),
                      model_uri=NEON.soilSamplingDevice, domain=None, range=Optional[str])

slots.soilTemp = Slot(uri=NEON.soilTemp, name="soilTemp", curie=NEON.curie('soilTemp'),
                      model_uri=NEON.soilTemp, domain=None, range=Optional[float])

slots.toCompositeBarcodeList = Slot(uri=NEON.toCompositeBarcodeList, name="toCompositeBarcodeList", curie=NEON.curie('toCompositeBarcodeList'),
                      model_uri=NEON.toCompositeBarcodeList, domain=None, range=Optional[str])

slots.toCompositeFateList = Slot(uri=NEON.toCompositeFateList, name="toCompositeFateList", curie=NEON.curie('toCompositeFateList'),
                      model_uri=NEON.toCompositeFateList, domain=None, range=Optional[str])

slots.toCompositeSampleIDList = Slot(uri=NEON.toCompositeSampleIDList, name="toCompositeSampleIDList", curie=NEON.curie('toCompositeSampleIDList'),
                      model_uri=NEON.toCompositeSampleIDList, domain=None, range=Optional[str])

slots.testingIDCode = Slot(uri=NEON.testingIDCode, name="testingIDCode", curie=NEON.curie('testingIDCode'),
                      model_uri=NEON.testingIDCode, domain=None, range=Optional[str])

slots.testingIDFate = Slot(uri=NEON.testingIDFate, name="testingIDFate", curie=NEON.curie('testingIDFate'),
                      model_uri=NEON.testingIDFate, domain=None, range=Optional[str])

slots.chemSubsampleCondition = Slot(uri=NEON.chemSubsampleCondition, name="chemSubsampleCondition", curie=NEON.curie('chemSubsampleCondition'),
                      model_uri=NEON.chemSubsampleCondition, domain=None, range=Optional[str])

slots.chemSubsampleConditionRemarks = Slot(uri=NEON.chemSubsampleConditionRemarks, name="chemSubsampleConditionRemarks", curie=NEON.curie('chemSubsampleConditionRemarks'),
                      model_uri=NEON.chemSubsampleConditionRemarks, domain=None, range=Optional[str])

slots.isoSubsampleCondition = Slot(uri=NEON.isoSubsampleCondition, name="isoSubsampleCondition", curie=NEON.curie('isoSubsampleCondition'),
                      model_uri=NEON.isoSubsampleCondition, domain=None, range=Optional[str])

slots.isoSubsampleConditionRemarks = Slot(uri=NEON.isoSubsampleConditionRemarks, name="isoSubsampleConditionRemarks", curie=NEON.curie('isoSubsampleConditionRemarks'),
                      model_uri=NEON.isoSubsampleConditionRemarks, domain=None, range=Optional[str])

slots.tempOutOfBounds = Slot(uri=NEON.tempOutOfBounds, name="tempOutOfBounds", curie=NEON.curie('tempOutOfBounds'),
                      model_uri=NEON.tempOutOfBounds, domain=None, range=Optional[float])

slots.chemSubsampleDataQF = Slot(uri=NEON.chemSubsampleDataQF, name="chemSubsampleDataQF", curie=NEON.curie('chemSubsampleDataQF'),
                      model_uri=NEON.chemSubsampleDataQF, domain=None, range=Optional[int])

slots.labDataQF = Slot(uri=NEON.labDataQF, name="labDataQF", curie=NEON.curie('labDataQF'),
                      model_uri=NEON.labDataQF, domain=None, range=Optional[int])

slots.labCondition = Slot(uri=NEON.labCondition, name="labCondition", curie=NEON.curie('labCondition'),
                      model_uri=NEON.labCondition, domain=None, range=Optional[str])

slots.labConditionRemarks = Slot(uri=NEON.labConditionRemarks, name="labConditionRemarks", curie=NEON.curie('labConditionRemarks'),
                      model_uri=NEON.labConditionRemarks, domain=None, range=Optional[str])

slots.pHUncertainty = Slot(uri=NEON.pHUncertainty, name="pHUncertainty", curie=NEON.curie('pHUncertainty'),
                      model_uri=NEON.pHUncertainty, domain=None, range=Optional[float])

slots.precipAmmonium = Slot(uri=NEON.precipAmmonium, name="precipAmmonium", curie=NEON.curie('precipAmmonium'),
                      model_uri=NEON.precipAmmonium, domain=None, range=Optional[float])

slots.precipAmmoniumFlag = Slot(uri=NEON.precipAmmoniumFlag, name="precipAmmoniumFlag", curie=NEON.curie('precipAmmoniumFlag'),
                      model_uri=NEON.precipAmmoniumFlag, domain=None, range=Optional[str])

slots.precipAmmoniumUncertainty = Slot(uri=NEON.precipAmmoniumUncertainty, name="precipAmmoniumUncertainty", curie=NEON.curie('precipAmmoniumUncertainty'),
                      model_uri=NEON.precipAmmoniumUncertainty, domain=None, range=Optional[float])

slots.precipBromide = Slot(uri=NEON.precipBromide, name="precipBromide", curie=NEON.curie('precipBromide'),
                      model_uri=NEON.precipBromide, domain=None, range=Optional[float])

slots.precipBromideFlag = Slot(uri=NEON.precipBromideFlag, name="precipBromideFlag", curie=NEON.curie('precipBromideFlag'),
                      model_uri=NEON.precipBromideFlag, domain=None, range=Optional[str])

slots.precipBromideUncertainty = Slot(uri=NEON.precipBromideUncertainty, name="precipBromideUncertainty", curie=NEON.curie('precipBromideUncertainty'),
                      model_uri=NEON.precipBromideUncertainty, domain=None, range=Optional[float])

slots.precipCalcium = Slot(uri=NEON.precipCalcium, name="precipCalcium", curie=NEON.curie('precipCalcium'),
                      model_uri=NEON.precipCalcium, domain=None, range=Optional[float])

slots.precipCalciumFlag = Slot(uri=NEON.precipCalciumFlag, name="precipCalciumFlag", curie=NEON.curie('precipCalciumFlag'),
                      model_uri=NEON.precipCalciumFlag, domain=None, range=Optional[str])

slots.precipCalciumUncertainty = Slot(uri=NEON.precipCalciumUncertainty, name="precipCalciumUncertainty", curie=NEON.curie('precipCalciumUncertainty'),
                      model_uri=NEON.precipCalciumUncertainty, domain=None, range=Optional[float])

slots.precipChloride = Slot(uri=NEON.precipChloride, name="precipChloride", curie=NEON.curie('precipChloride'),
                      model_uri=NEON.precipChloride, domain=None, range=Optional[float])

slots.precipChlorideFlag = Slot(uri=NEON.precipChlorideFlag, name="precipChlorideFlag", curie=NEON.curie('precipChlorideFlag'),
                      model_uri=NEON.precipChlorideFlag, domain=None, range=Optional[str])

slots.precipChlorideUncertainty = Slot(uri=NEON.precipChlorideUncertainty, name="precipChlorideUncertainty", curie=NEON.curie('precipChlorideUncertainty'),
                      model_uri=NEON.precipChlorideUncertainty, domain=None, range=Optional[float])

slots.precipConductivity = Slot(uri=NEON.precipConductivity, name="precipConductivity", curie=NEON.curie('precipConductivity'),
                      model_uri=NEON.precipConductivity, domain=None, range=Optional[float])

slots.precipConductivityUncertainty = Slot(uri=NEON.precipConductivityUncertainty, name="precipConductivityUncertainty", curie=NEON.curie('precipConductivityUncertainty'),
                      model_uri=NEON.precipConductivityUncertainty, domain=None, range=Optional[float])

slots.precipMagnesium = Slot(uri=NEON.precipMagnesium, name="precipMagnesium", curie=NEON.curie('precipMagnesium'),
                      model_uri=NEON.precipMagnesium, domain=None, range=Optional[float])

slots.precipMagnesiumFlag = Slot(uri=NEON.precipMagnesiumFlag, name="precipMagnesiumFlag", curie=NEON.curie('precipMagnesiumFlag'),
                      model_uri=NEON.precipMagnesiumFlag, domain=None, range=Optional[str])

slots.precipMagnesiumUncertainty = Slot(uri=NEON.precipMagnesiumUncertainty, name="precipMagnesiumUncertainty", curie=NEON.curie('precipMagnesiumUncertainty'),
                      model_uri=NEON.precipMagnesiumUncertainty, domain=None, range=Optional[float])

slots.precipNitrate = Slot(uri=NEON.precipNitrate, name="precipNitrate", curie=NEON.curie('precipNitrate'),
                      model_uri=NEON.precipNitrate, domain=None, range=Optional[float])

slots.precipNitrateFlag = Slot(uri=NEON.precipNitrateFlag, name="precipNitrateFlag", curie=NEON.curie('precipNitrateFlag'),
                      model_uri=NEON.precipNitrateFlag, domain=None, range=Optional[str])

slots.precipNitrateUncertainty = Slot(uri=NEON.precipNitrateUncertainty, name="precipNitrateUncertainty", curie=NEON.curie('precipNitrateUncertainty'),
                      model_uri=NEON.precipNitrateUncertainty, domain=None, range=Optional[float])

slots.precipPhosphate = Slot(uri=NEON.precipPhosphate, name="precipPhosphate", curie=NEON.curie('precipPhosphate'),
                      model_uri=NEON.precipPhosphate, domain=None, range=Optional[float])

slots.precipPhosphateFlag = Slot(uri=NEON.precipPhosphateFlag, name="precipPhosphateFlag", curie=NEON.curie('precipPhosphateFlag'),
                      model_uri=NEON.precipPhosphateFlag, domain=None, range=Optional[str])

slots.precipPhosphateUncertainty = Slot(uri=NEON.precipPhosphateUncertainty, name="precipPhosphateUncertainty", curie=NEON.curie('precipPhosphateUncertainty'),
                      model_uri=NEON.precipPhosphateUncertainty, domain=None, range=Optional[float])

slots.precipPotassium = Slot(uri=NEON.precipPotassium, name="precipPotassium", curie=NEON.curie('precipPotassium'),
                      model_uri=NEON.precipPotassium, domain=None, range=Optional[float])

slots.precipPotassiumFlag = Slot(uri=NEON.precipPotassiumFlag, name="precipPotassiumFlag", curie=NEON.curie('precipPotassiumFlag'),
                      model_uri=NEON.precipPotassiumFlag, domain=None, range=Optional[str])

slots.precipPotassiumUncertainty = Slot(uri=NEON.precipPotassiumUncertainty, name="precipPotassiumUncertainty", curie=NEON.curie('precipPotassiumUncertainty'),
                      model_uri=NEON.precipPotassiumUncertainty, domain=None, range=Optional[float])

slots.precipSodium = Slot(uri=NEON.precipSodium, name="precipSodium", curie=NEON.curie('precipSodium'),
                      model_uri=NEON.precipSodium, domain=None, range=Optional[float])

slots.precipSodiumFlag = Slot(uri=NEON.precipSodiumFlag, name="precipSodiumFlag", curie=NEON.curie('precipSodiumFlag'),
                      model_uri=NEON.precipSodiumFlag, domain=None, range=Optional[str])

slots.precipSodiumUncertainty = Slot(uri=NEON.precipSodiumUncertainty, name="precipSodiumUncertainty", curie=NEON.curie('precipSodiumUncertainty'),
                      model_uri=NEON.precipSodiumUncertainty, domain=None, range=Optional[float])

slots.precipSulfate = Slot(uri=NEON.precipSulfate, name="precipSulfate", curie=NEON.curie('precipSulfate'),
                      model_uri=NEON.precipSulfate, domain=None, range=Optional[float])

slots.precipSulfateFlag = Slot(uri=NEON.precipSulfateFlag, name="precipSulfateFlag", curie=NEON.curie('precipSulfateFlag'),
                      model_uri=NEON.precipSulfateFlag, domain=None, range=Optional[str])

slots.precipSulfateUncertainty = Slot(uri=NEON.precipSulfateUncertainty, name="precipSulfateUncertainty", curie=NEON.curie('precipSulfateUncertainty'),
                      model_uri=NEON.precipSulfateUncertainty, domain=None, range=Optional[float])

slots.collectionDataQF = Slot(uri=NEON.collectionDataQF, name="collectionDataQF", curie=NEON.curie('collectionDataQF'),
                      model_uri=NEON.collectionDataQF, domain=None, range=Optional[int])

slots.processTimeQF = Slot(uri=NEON.processTimeQF, name="processTimeQF", curie=NEON.curie('processTimeQF'),
                      model_uri=NEON.processTimeQF, domain=None, range=Optional[int])

slots.analyteAccuracy = Slot(uri=NEON.analyteAccuracy, name="analyteAccuracy", curie=NEON.curie('analyteAccuracy'),
                      model_uri=NEON.analyteAccuracy, domain=None, range=Optional[float])

slots.analyteStandardDeviation = Slot(uri=NEON.analyteStandardDeviation, name="analyteStandardDeviation", curie=NEON.curie('analyteStandardDeviation'),
                      model_uri=NEON.analyteStandardDeviation, domain=None, range=Optional[float])

slots.isoCollectionDataQF = Slot(uri=NEON.isoCollectionDataQF, name="isoCollectionDataQF", curie=NEON.curie('isoCollectionDataQF'),
                      model_uri=NEON.isoCollectionDataQF, domain=None, range=Optional[int])

slots.qaReferenceID = Slot(uri=NEON.qaReferenceID, name="qaReferenceID", curie=NEON.curie('qaReferenceID'),
                      model_uri=NEON.qaReferenceID, domain=None, range=Optional[str])

slots.standardReferenceKnownValue = Slot(uri=NEON.standardReferenceKnownValue, name="standardReferenceKnownValue", curie=NEON.curie('standardReferenceKnownValue'),
                      model_uri=NEON.standardReferenceKnownValue, domain=None, range=Optional[float])

slots.standardReferenceMeasuredMean = Slot(uri=NEON.standardReferenceMeasuredMean, name="standardReferenceMeasuredMean", curie=NEON.curie('standardReferenceMeasuredMean'),
                      model_uri=NEON.standardReferenceMeasuredMean, domain=None, range=Optional[float])

slots.adjacentAreaLeftRemarks = Slot(uri=NEON.adjacentAreaLeftRemarks, name="adjacentAreaLeftRemarks", curie=NEON.curie('adjacentAreaLeftRemarks'),
                      model_uri=NEON.adjacentAreaLeftRemarks, domain=None, range=Optional[str])

slots.adjacentAreaRightRemarks = Slot(uri=NEON.adjacentAreaRightRemarks, name="adjacentAreaRightRemarks", curie=NEON.curie('adjacentAreaRightRemarks'),
                      model_uri=NEON.adjacentAreaRightRemarks, domain=None, range=Optional[str])

slots.agriculturePresence = Slot(uri=NEON.agriculturePresence, name="agriculturePresence", curie=NEON.curie('agriculturePresence'),
                      model_uri=NEON.agriculturePresence, domain=None, range=Optional[str])

slots.bankLR = Slot(uri=NEON.bankLR, name="bankLR", curie=NEON.curie('bankLR'),
                      model_uri=NEON.bankLR, domain=None, range=Optional[str])

slots.bareDirtCoverClass = Slot(uri=NEON.bareDirtCoverClass, name="bareDirtCoverClass", curie=NEON.curie('bareDirtCoverClass'),
                      model_uri=NEON.bareDirtCoverClass, domain=None, range=Optional[str])

slots.bigTreeCoverClass = Slot(uri=NEON.bigTreeCoverClass, name="bigTreeCoverClass", curie=NEON.curie('bigTreeCoverClass'),
                      model_uri=NEON.bigTreeCoverClass, domain=None, range=Optional[str])

slots.bigTreeType = Slot(uri=NEON.bigTreeType, name="bigTreeType", curie=NEON.curie('bigTreeType'),
                      model_uri=NEON.bigTreeType, domain=None, range=Optional[str])

slots.boatRampPresence = Slot(uri=NEON.boatRampPresence, name="boatRampPresence", curie=NEON.curie('boatRampPresence'),
                      model_uri=NEON.boatRampPresence, domain=None, range=Optional[str])

slots.buildingPresence = Slot(uri=NEON.buildingPresence, name="buildingPresence", curie=NEON.curie('buildingPresence'),
                      model_uri=NEON.buildingPresence, domain=None, range=Optional[str])

slots.dominantBankAngle = Slot(uri=NEON.dominantBankAngle, name="dominantBankAngle", curie=NEON.curie('dominantBankAngle'),
                      model_uri=NEON.dominantBankAngle, domain=None, range=Optional[str])

slots.dominantBankRevetment = Slot(uri=NEON.dominantBankRevetment, name="dominantBankRevetment", curie=NEON.curie('dominantBankRevetment'),
                      model_uri=NEON.dominantBankRevetment, domain=None, range=Optional[str])

slots.dominantBankTexture = Slot(uri=NEON.dominantBankTexture, name="dominantBankTexture", curie=NEON.curie('dominantBankTexture'),
                      model_uri=NEON.dominantBankTexture, domain=None, range=Optional[str])

slots.industryPresence = Slot(uri=NEON.industryPresence, name="industryPresence", curie=NEON.curie('industryPresence'),
                      model_uri=NEON.industryPresence, domain=None, range=Optional[str])

slots.lawnsParksPresence = Slot(uri=NEON.lawnsParksPresence, name="lawnsParksPresence", curie=NEON.curie('lawnsParksPresence'),
                      model_uri=NEON.lawnsParksPresence, domain=None, range=Optional[str])

slots.pavementPresence = Slot(uri=NEON.pavementPresence, name="pavementPresence", curie=NEON.curie('pavementPresence'),
                      model_uri=NEON.pavementPresence, domain=None, range=Optional[str])

slots.riparianClass = Slot(uri=NEON.riparianClass, name="riparianClass", curie=NEON.curie('riparianClass'),
                      model_uri=NEON.riparianClass, domain=None, range=Optional[str])

slots.riparianDominantVegetation = Slot(uri=NEON.riparianDominantVegetation, name="riparianDominantVegetation", curie=NEON.curie('riparianDominantVegetation'),
                      model_uri=NEON.riparianDominantVegetation, domain=None, range=Optional[str])

slots.riparianSubclass = Slot(uri=NEON.riparianSubclass, name="riparianSubclass", curie=NEON.curie('riparianSubclass'),
                      model_uri=NEON.riparianSubclass, domain=None, range=Optional[str])

slots.riparianSubdominantVegetation = Slot(uri=NEON.riparianSubdominantVegetation, name="riparianSubdominantVegetation", curie=NEON.curie('riparianSubdominantVegetation'),
                      model_uri=NEON.riparianSubdominantVegetation, domain=None, range=Optional[str])

slots.riparianSubsystem = Slot(uri=NEON.riparianSubsystem, name="riparianSubsystem", curie=NEON.curie('riparianSubsystem'),
                      model_uri=NEON.riparianSubsystem, domain=None, range=Optional[str])

slots.riparianWaterDepth = Slot(uri=NEON.riparianWaterDepth, name="riparianWaterDepth", curie=NEON.curie('riparianWaterDepth'),
                      model_uri=NEON.riparianWaterDepth, domain=None, range=Optional[float])

slots.roadPresence = Slot(uri=NEON.roadPresence, name="roadPresence", curie=NEON.curie('roadPresence'),
                      model_uri=NEON.roadPresence, domain=None, range=Optional[str])

slots.shortHerbCoverClass = Slot(uri=NEON.shortHerbCoverClass, name="shortHerbCoverClass", curie=NEON.curie('shortHerbCoverClass'),
                      model_uri=NEON.shortHerbCoverClass, domain=None, range=Optional[str])

slots.smallTreeCoverClass = Slot(uri=NEON.smallTreeCoverClass, name="smallTreeCoverClass", curie=NEON.curie('smallTreeCoverClass'),
                      model_uri=NEON.smallTreeCoverClass, domain=None, range=Optional[str])

slots.smallTreeType = Slot(uri=NEON.smallTreeType, name="smallTreeType", curie=NEON.curie('smallTreeType'),
                      model_uri=NEON.smallTreeType, domain=None, range=Optional[str])

slots.standingWaterCoverClass = Slot(uri=NEON.standingWaterCoverClass, name="standingWaterCoverClass", curie=NEON.curie('standingWaterCoverClass'),
                      model_uri=NEON.standingWaterCoverClass, domain=None, range=Optional[str])

slots.subdominantBankAngle = Slot(uri=NEON.subdominantBankAngle, name="subdominantBankAngle", curie=NEON.curie('subdominantBankAngle'),
                      model_uri=NEON.subdominantBankAngle, domain=None, range=Optional[str])

slots.subdominantBankRevetment = Slot(uri=NEON.subdominantBankRevetment, name="subdominantBankRevetment", curie=NEON.curie('subdominantBankRevetment'),
                      model_uri=NEON.subdominantBankRevetment, domain=None, range=Optional[str])

slots.subdominantBankTexture = Slot(uri=NEON.subdominantBankTexture, name="subdominantBankTexture", curie=NEON.curie('subdominantBankTexture'),
                      model_uri=NEON.subdominantBankTexture, domain=None, range=Optional[str])

slots.tallHerbCoverClass = Slot(uri=NEON.tallHerbCoverClass, name="tallHerbCoverClass", curie=NEON.curie('tallHerbCoverClass'),
                      model_uri=NEON.tallHerbCoverClass, domain=None, range=Optional[str])

slots.tallHerbType = Slot(uri=NEON.tallHerbType, name="tallHerbType", curie=NEON.curie('tallHerbType'),
                      model_uri=NEON.tallHerbType, domain=None, range=Optional[str])

slots.transectID = Slot(uri=NEON.transectID, name="transectID", curie=NEON.curie('transectID'),
                      model_uri=NEON.transectID, domain=None, range=Optional[str])

slots.trashPresence = Slot(uri=NEON.trashPresence, name="trashPresence", curie=NEON.curie('trashPresence'),
                      model_uri=NEON.trashPresence, domain=None, range=Optional[str])

slots.wettedWidth = Slot(uri=NEON.wettedWidth, name="wettedWidth", curie=NEON.curie('wettedWidth'),
                      model_uri=NEON.wettedWidth, domain=None, range=Optional[float])

slots.woodyShrubGroundCoverClass = Slot(uri=NEON.woodyShrubGroundCoverClass, name="woodyShrubGroundCoverClass", curie=NEON.curie('woodyShrubGroundCoverClass'),
                      model_uri=NEON.woodyShrubGroundCoverClass, domain=None, range=Optional[str])

slots.woodyShrubSaplingCoverClass = Slot(uri=NEON.woodyShrubSaplingCoverClass, name="woodyShrubSaplingCoverClass", curie=NEON.curie('woodyShrubSaplingCoverClass'),
                      model_uri=NEON.woodyShrubSaplingCoverClass, domain=None, range=Optional[str])

slots.woodyShrubSaplingType = Slot(uri=NEON.woodyShrubSaplingType, name="woodyShrubSaplingType", curie=NEON.curie('woodyShrubSaplingType'),
                      model_uri=NEON.woodyShrubSaplingType, domain=None, range=Optional[str])

slots.coveredDensiometerPoints = Slot(uri=NEON.coveredDensiometerPoints, name="coveredDensiometerPoints", curie=NEON.curie('coveredDensiometerPoints'),
                      model_uri=NEON.coveredDensiometerPoints, domain=None, range=Optional[str])

slots.measurementDirection = Slot(uri=NEON.measurementDirection, name="measurementDirection", curie=NEON.curie('measurementDirection'),
                      model_uri=NEON.measurementDirection, domain=None, range=Optional[str])

slots.measurementLocation = Slot(uri=NEON.measurementLocation, name="measurementLocation", curie=NEON.curie('measurementLocation'),
                      model_uri=NEON.measurementLocation, domain=None, range=Optional[str])

slots.totalDensiometerPoints = Slot(uri=NEON.totalDensiometerPoints, name="totalDensiometerPoints", curie=NEON.curie('totalDensiometerPoints'),
                      model_uri=NEON.totalDensiometerPoints, domain=None, range=Optional[str])

slots.samplingImpractical = Slot(uri=NEON.samplingImpractical, name="samplingImpractical", curie=NEON.curie('samplingImpractical'),
                      model_uri=NEON.samplingImpractical, domain=None, range=Optional[str])

slots.incubationMethod = Slot(uri=NEON.incubationMethod, name="incubationMethod", curie=NEON.curie('incubationMethod'),
                      model_uri=NEON.incubationMethod, domain=None, range=Optional[str])

slots.taxonAbbreviation = Slot(uri=NEON.taxonAbbreviation, name="taxonAbbreviation", curie=NEON.curie('taxonAbbreviation'),
                      model_uri=NEON.taxonAbbreviation, domain=None, range=Optional[str])

slots.biovolumeSD = Slot(uri=NEON.biovolumeSD, name="biovolumeSD", curie=NEON.curie('biovolumeSD'),
                      model_uri=NEON.biovolumeSD, domain=None, range=Optional[float])

slots.inconsistentDataQF = Slot(uri=NEON.inconsistentDataQF, name="inconsistentDataQF", curie=NEON.curie('inconsistentDataQF'),
                      model_uri=NEON.inconsistentDataQF, domain=None, range=Optional[str])

slots.bryType = Slot(uri=NEON.bryType, name="bryType", curie=NEON.curie('bryType'),
                      model_uri=NEON.bryType, domain=None, range=Optional[str])

slots.ampliconLength = Slot(uri=NEON.ampliconLength, name="ampliconLength", curie=NEON.curie('ampliconLength'),
                      model_uri=NEON.ampliconLength, domain=None, range=Optional[str])

slots.analysisEndDate = Slot(uri=NEON.analysisEndDate, name="analysisEndDate", curie=NEON.curie('analysisEndDate'),
                      model_uri=NEON.analysisEndDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.analysisStartDate = Slot(uri=NEON.analysisStartDate, name="analysisStartDate", curie=NEON.curie('analysisStartDate'),
                      model_uri=NEON.analysisStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.batchID = Slot(uri=NEON.batchID, name="batchID", curie=NEON.curie('batchID'),
                      model_uri=NEON.batchID, domain=None, range=Optional[str])

slots.bufferComposition = Slot(uri=NEON.bufferComposition, name="bufferComposition", curie=NEON.curie('bufferComposition'),
                      model_uri=NEON.bufferComposition, domain=None, range=Optional[str])

slots.bufferID = Slot(uri=NEON.bufferID, name="bufferID", curie=NEON.curie('bufferID'),
                      model_uri=NEON.bufferID, domain=None, range=Optional[str])

slots.calCurveIntercept = Slot(uri=NEON.calCurveIntercept, name="calCurveIntercept", curie=NEON.curie('calCurveIntercept'),
                      model_uri=NEON.calCurveIntercept, domain=None, range=Optional[float])

slots.calCurveRsquared = Slot(uri=NEON.calCurveRsquared, name="calCurveRsquared", curie=NEON.curie('calCurveRsquared'),
                      model_uri=NEON.calCurveRsquared, domain=None, range=Optional[float])

slots.calCurveSlope = Slot(uri=NEON.calCurveSlope, name="calCurveSlope", curie=NEON.curie('calCurveSlope'),
                      model_uri=NEON.calCurveSlope, domain=None, range=Optional[float])

slots.copyNumber = Slot(uri=NEON.copyNumber, name="copyNumber", curie=NEON.curie('copyNumber'),
                      model_uri=NEON.copyNumber, domain=None, range=Optional[float])

slots.cqMethod = Slot(uri=NEON.cqMethod, name="cqMethod", curie=NEON.curie('cqMethod'),
                      model_uri=NEON.cqMethod, domain=None, range=Optional[str])

slots.cqValue = Slot(uri=NEON.cqValue, name="cqValue", curie=NEON.curie('cqValue'),
                      model_uri=NEON.cqValue, domain=None, range=Optional[int])

slots.dNTPConcentration = Slot(uri=NEON.dNTPConcentration, name="dNTPConcentration", curie=NEON.curie('dNTPConcentration'),
                      model_uri=NEON.dNTPConcentration, domain=None, range=Optional[float])

slots.forwardPrimer = Slot(uri=NEON.forwardPrimer, name="forwardPrimer", curie=NEON.curie('forwardPrimer'),
                      model_uri=NEON.forwardPrimer, domain=None, range=Optional[str])

slots.inhibitorRemovalRequired = Slot(uri=NEON.inhibitorRemovalRequired, name="inhibitorRemovalRequired", curie=NEON.curie('inhibitorRemovalRequired'),
                      model_uri=NEON.inhibitorRemovalRequired, domain=None, range=Optional[str])

slots.detectionLimit = Slot(uri=NEON.detectionLimit, name="detectionLimit", curie=NEON.curie('detectionLimit'),
                      model_uri=NEON.detectionLimit, domain=None, range=Optional[float])

slots.linearDynamicRangeLower = Slot(uri=NEON.linearDynamicRangeLower, name="linearDynamicRangeLower", curie=NEON.curie('linearDynamicRangeLower'),
                      model_uri=NEON.linearDynamicRangeLower, domain=None, range=Optional[float])

slots.linearDynamicRangeUpper = Slot(uri=NEON.linearDynamicRangeUpper, name="linearDynamicRangeUpper", curie=NEON.curie('linearDynamicRangeUpper'),
                      model_uri=NEON.linearDynamicRangeUpper, domain=None, range=Optional[float])

slots.lodCqVar = Slot(uri=NEON.lodCqVar, name="lodCqVar", curie=NEON.curie('lodCqVar'),
                      model_uri=NEON.lodCqVar, domain=None, range=Optional[float])

slots.mgConcentration = Slot(uri=NEON.mgConcentration, name="mgConcentration", curie=NEON.curie('mgConcentration'),
                      model_uri=NEON.mgConcentration, domain=None, range=Optional[float])

slots.multiplexStatus = Slot(uri=NEON.multiplexStatus, name="multiplexStatus", curie=NEON.curie('multiplexStatus'),
                      model_uri=NEON.multiplexStatus, domain=None, range=Optional[str])

slots.negControl1Result = Slot(uri=NEON.negControl1Result, name="negControl1Result", curie=NEON.curie('negControl1Result'),
                      model_uri=NEON.negControl1Result, domain=None, range=Optional[str])

slots.negControl2Result = Slot(uri=NEON.negControl2Result, name="negControl2Result", curie=NEON.curie('negControl2Result'),
                      model_uri=NEON.negControl2Result, domain=None, range=Optional[str])

slots.negControl3Result = Slot(uri=NEON.negControl3Result, name="negControl3Result", curie=NEON.curie('negControl3Result'),
                      model_uri=NEON.negControl3Result, domain=None, range=Optional[str])

slots.negControl4Result = Slot(uri=NEON.negControl4Result, name="negControl4Result", curie=NEON.curie('negControl4Result'),
                      model_uri=NEON.negControl4Result, domain=None, range=Optional[str])

slots.negControl5Result = Slot(uri=NEON.negControl5Result, name="negControl5Result", curie=NEON.curie('negControl5Result'),
                      model_uri=NEON.negControl5Result, domain=None, range=Optional[str])

slots.noTemplateControlCq = Slot(uri=NEON.noTemplateControlCq, name="noTemplateControlCq", curie=NEON.curie('noTemplateControlCq'),
                      model_uri=NEON.noTemplateControlCq, domain=None, range=Optional[int])

slots.nucleicAcidConcentration = Slot(uri=NEON.nucleicAcidConcentration, name="nucleicAcidConcentration", curie=NEON.curie('nucleicAcidConcentration'),
                      model_uri=NEON.nucleicAcidConcentration, domain=None, range=Optional[float])

slots.pcrEfficiency = Slot(uri=NEON.pcrEfficiency, name="pcrEfficiency", curie=NEON.curie('pcrEfficiency'),
                      model_uri=NEON.pcrEfficiency, domain=None, range=Optional[float])

slots.pcrEfficiencyConfInt = Slot(uri=NEON.pcrEfficiencyConfInt, name="pcrEfficiencyConfInt", curie=NEON.curie('pcrEfficiencyConfInt'),
                      model_uri=NEON.pcrEfficiencyConfInt, domain=None, range=Optional[float])

slots.polymeraseType = Slot(uri=NEON.polymeraseType, name="polymeraseType", curie=NEON.curie('polymeraseType'),
                      model_uri=NEON.polymeraseType, domain=None, range=Optional[str])

slots.polymeraseUnitNumber = Slot(uri=NEON.polymeraseUnitNumber, name="polymeraseUnitNumber", curie=NEON.curie('polymeraseUnitNumber'),
                      model_uri=NEON.polymeraseUnitNumber, domain=None, range=Optional[float])

slots.primerConcentration = Slot(uri=NEON.primerConcentration, name="primerConcentration", curie=NEON.curie('primerConcentration'),
                      model_uri=NEON.primerConcentration, domain=None, range=Optional[float])

slots.primerSpecificity = Slot(uri=NEON.primerSpecificity, name="primerSpecificity", curie=NEON.curie('primerSpecificity'),
                      model_uri=NEON.primerSpecificity, domain=None, range=Optional[float])

slots.probeConcentration = Slot(uri=NEON.probeConcentration, name="probeConcentration", curie=NEON.curie('probeConcentration'),
                      model_uri=NEON.probeConcentration, domain=None, range=Optional[float])

slots.qPCRAnalysisProgram = Slot(uri=NEON.qPCRAnalysisProgram, name="qPCRAnalysisProgram", curie=NEON.curie('qPCRAnalysisProgram'),
                      model_uri=NEON.qPCRAnalysisProgram, domain=None, range=Optional[str])

slots.qpcrDetectionMethod = Slot(uri=NEON.qpcrDetectionMethod, name="qpcrDetectionMethod", curie=NEON.curie('qpcrDetectionMethod'),
                      model_uri=NEON.qpcrDetectionMethod, domain=None, range=Optional[str])

slots.qpcrMethod = Slot(uri=NEON.qpcrMethod, name="qpcrMethod", curie=NEON.curie('qpcrMethod'),
                      model_uri=NEON.qpcrMethod, domain=None, range=Optional[str])

slots.reactionVolume = Slot(uri=NEON.reactionVolume, name="reactionVolume", curie=NEON.curie('reactionVolume'),
                      model_uri=NEON.reactionVolume, domain=None, range=Optional[float])

slots.replicateNumber = Slot(uri=NEON.replicateNumber, name="replicateNumber", curie=NEON.curie('replicateNumber'),
                      model_uri=NEON.replicateNumber, domain=None, range=Optional[int])

slots.reversePrimer = Slot(uri=NEON.reversePrimer, name="reversePrimer", curie=NEON.curie('reversePrimer'),
                      model_uri=NEON.reversePrimer, domain=None, range=Optional[str])

slots.reviewedBy = Slot(uri=NEON.reviewedBy, name="reviewedBy", curie=NEON.curie('reviewedBy'),
                      model_uri=NEON.reviewedBy, domain=None, range=Optional[str])

slots.sampleMaterial = Slot(uri=NEON.sampleMaterial, name="sampleMaterial", curie=NEON.curie('sampleMaterial'),
                      model_uri=NEON.sampleMaterial, domain=None, range=Optional[str])

slots.standardDescription = Slot(uri=NEON.standardDescription, name="standardDescription", curie=NEON.curie('standardDescription'),
                      model_uri=NEON.standardDescription, domain=None, range=Optional[str])

slots.targetGene = Slot(uri=NEON.targetGene, name="targetGene", curie=NEON.curie('targetGene'),
                      model_uri=NEON.targetGene, domain=None, range=Optional[str])

slots.targetTaxonGroup = Slot(uri=NEON.targetTaxonGroup, name="targetTaxonGroup", curie=NEON.curie('targetTaxonGroup'),
                      model_uri=NEON.targetTaxonGroup, domain=None, range=Optional[str])

slots.archiveSampleBarcode = Slot(uri=NEON.archiveSampleBarcode, name="archiveSampleBarcode", curie=NEON.curie('archiveSampleBarcode'),
                      model_uri=NEON.archiveSampleBarcode, domain=None, range=Optional[str])

slots.archiveSampleFate = Slot(uri=NEON.archiveSampleFate, name="archiveSampleFate", curie=NEON.curie('archiveSampleFate'),
                      model_uri=NEON.archiveSampleFate, domain=None, range=Optional[str])

slots.archiveSampleID = Slot(uri=NEON.archiveSampleID, name="archiveSampleID", curie=NEON.curie('archiveSampleID'),
                      model_uri=NEON.archiveSampleID, domain=None, range=Optional[str])

slots.biogeoSample = Slot(uri=NEON.biogeoSample, name="biogeoSample", curie=NEON.curie('biogeoSample'),
                      model_uri=NEON.biogeoSample, domain=None, range=Optional[str])

slots.fieldSampleBarcode = Slot(uri=NEON.fieldSampleBarcode, name="fieldSampleBarcode", curie=NEON.curie('fieldSampleBarcode'),
                      model_uri=NEON.fieldSampleBarcode, domain=None, range=Optional[str])

slots.fieldSampleFate = Slot(uri=NEON.fieldSampleFate, name="fieldSampleFate", curie=NEON.curie('fieldSampleFate'),
                      model_uri=NEON.fieldSampleFate, domain=None, range=Optional[str])

slots.fieldSampleID = Slot(uri=NEON.fieldSampleID, name="fieldSampleID", curie=NEON.curie('fieldSampleID'),
                      model_uri=NEON.fieldSampleID, domain=None, range=Optional[str])

slots.functionalGroup = Slot(uri=NEON.functionalGroup, name="functionalGroup", curie=NEON.curie('functionalGroup'),
                      model_uri=NEON.functionalGroup, domain=None, range=Optional[str])

slots.ligninSampleBarcode = Slot(uri=NEON.ligninSampleBarcode, name="ligninSampleBarcode", curie=NEON.curie('ligninSampleBarcode'),
                      model_uri=NEON.ligninSampleBarcode, domain=None, range=Optional[str])

slots.ligninSampleFate = Slot(uri=NEON.ligninSampleFate, name="ligninSampleFate", curie=NEON.curie('ligninSampleFate'),
                      model_uri=NEON.ligninSampleFate, domain=None, range=Optional[str])

slots.ligninSampleID = Slot(uri=NEON.ligninSampleID, name="ligninSampleID", curie=NEON.curie('ligninSampleID'),
                      model_uri=NEON.ligninSampleID, domain=None, range=Optional[str])

slots.massSampleBarcode = Slot(uri=NEON.massSampleBarcode, name="massSampleBarcode", curie=NEON.curie('massSampleBarcode'),
                      model_uri=NEON.massSampleBarcode, domain=None, range=Optional[str])

slots.massSampleBarcodeList = Slot(uri=NEON.massSampleBarcodeList, name="massSampleBarcodeList", curie=NEON.curie('massSampleBarcodeList'),
                      model_uri=NEON.massSampleBarcodeList, domain=None, range=Optional[str])

slots.massSampleFate = Slot(uri=NEON.massSampleFate, name="massSampleFate", curie=NEON.curie('massSampleFate'),
                      model_uri=NEON.massSampleFate, domain=None, range=Optional[str])

slots.massSampleFateList = Slot(uri=NEON.massSampleFateList, name="massSampleFateList", curie=NEON.curie('massSampleFateList'),
                      model_uri=NEON.massSampleFateList, domain=None, range=Optional[str])

slots.massSampleID = Slot(uri=NEON.massSampleID, name="massSampleID", curie=NEON.curie('massSampleID'),
                      model_uri=NEON.massSampleID, domain=None, range=Optional[str])

slots.massSampleIDList = Slot(uri=NEON.massSampleIDList, name="massSampleIDList", curie=NEON.curie('massSampleIDList'),
                      model_uri=NEON.massSampleIDList, domain=None, range=Optional[str])

slots.massSampleMixtureBarcode = Slot(uri=NEON.massSampleMixtureBarcode, name="massSampleMixtureBarcode", curie=NEON.curie('massSampleMixtureBarcode'),
                      model_uri=NEON.massSampleMixtureBarcode, domain=None, range=Optional[str])

slots.massSampleMixtureFate = Slot(uri=NEON.massSampleMixtureFate, name="massSampleMixtureFate", curie=NEON.curie('massSampleMixtureFate'),
                      model_uri=NEON.massSampleMixtureFate, domain=None, range=Optional[str])

slots.massSampleMixtureID = Slot(uri=NEON.massSampleMixtureID, name="massSampleMixtureID", curie=NEON.curie('massSampleMixtureID'),
                      model_uri=NEON.massSampleMixtureID, domain=None, range=Optional[str])

slots.trapPlacement = Slot(uri=NEON.trapPlacement, name="trapPlacement", curie=NEON.curie('trapPlacement'),
                      model_uri=NEON.trapPlacement, domain=None, range=Optional[str])

slots.trapSize = Slot(uri=NEON.trapSize, name="trapSize", curie=NEON.curie('trapSize'),
                      model_uri=NEON.trapSize, domain=None, range=Optional[float])

slots.namedLocation = Slot(uri=NEON.namedLocation, name="namedLocation", curie=NEON.curie('namedLocation'),
                      model_uri=NEON.namedLocation, domain=None, range=Optional[str])

slots.soilCO2FinalQF = Slot(uri=NEON.soilCO2FinalQF, name="soilCO2FinalQF", curie=NEON.curie('soilCO2FinalQF'),
                      model_uri=NEON.soilCO2FinalQF, domain=None, range=Optional[str])

slots.validCalFailQM = Slot(uri=NEON.validCalFailQM, name="validCalFailQM", curie=NEON.curie('validCalFailQM'),
                      model_uri=NEON.validCalFailQM, domain=None, range=Optional[float])

slots.validCalNAQM = Slot(uri=NEON.validCalNAQM, name="validCalNAQM", curie=NEON.curie('validCalNAQM'),
                      model_uri=NEON.validCalNAQM, domain=None, range=Optional[float])

slots.validCalPassQM = Slot(uri=NEON.validCalPassQM, name="validCalPassQM", curie=NEON.curie('validCalPassQM'),
                      model_uri=NEON.validCalPassQM, domain=None, range=Optional[float])

slots.nitrateInternalHumidity = Slot(uri=NEON.nitrateInternalHumidity, name="nitrateInternalHumidity", curie=NEON.curie('nitrateInternalHumidity'),
                      model_uri=NEON.nitrateInternalHumidity, domain=None, range=Optional[float])

slots.nitrateInternalHumidityPassQM = Slot(uri=NEON.nitrateInternalHumidityPassQM, name="nitrateInternalHumidityPassQM", curie=NEON.curie('nitrateInternalHumidityPassQM'),
                      model_uri=NEON.nitrateInternalHumidityPassQM, domain=None, range=Optional[float])

slots.nitrateInternalHumidityFailQM = Slot(uri=NEON.nitrateInternalHumidityFailQM, name="nitrateInternalHumidityFailQM", curie=NEON.curie('nitrateInternalHumidityFailQM'),
                      model_uri=NEON.nitrateInternalHumidityFailQM, domain=None, range=Optional[float])

slots.nitrateInternalHumidityNAQM = Slot(uri=NEON.nitrateInternalHumidityNAQM, name="nitrateInternalHumidityNAQM", curie=NEON.curie('nitrateInternalHumidityNAQM'),
                      model_uri=NEON.nitrateInternalHumidityNAQM, domain=None, range=Optional[float])

slots.nitrateInternalHumidityQAQCRpt = Slot(uri=NEON.nitrateInternalHumidityQAQCRpt, name="nitrateInternalHumidityQAQCRpt", curie=NEON.curie('nitrateInternalHumidityQAQCRpt'),
                      model_uri=NEON.nitrateInternalHumidityQAQCRpt, domain=None, range=Optional[str])

slots.nitrateLightDarkSpectralRatio = Slot(uri=NEON.nitrateLightDarkSpectralRatio, name="nitrateLightDarkSpectralRatio", curie=NEON.curie('nitrateLightDarkSpectralRatio'),
                      model_uri=NEON.nitrateLightDarkSpectralRatio, domain=None, range=Optional[float])

slots.nitrateLightDarkSpectralRatioPassQM = Slot(uri=NEON.nitrateLightDarkSpectralRatioPassQM, name="nitrateLightDarkSpectralRatioPassQM", curie=NEON.curie('nitrateLightDarkSpectralRatioPassQM'),
                      model_uri=NEON.nitrateLightDarkSpectralRatioPassQM, domain=None, range=Optional[float])

slots.nitrateLightDarkSpectralRatioFailQM = Slot(uri=NEON.nitrateLightDarkSpectralRatioFailQM, name="nitrateLightDarkSpectralRatioFailQM", curie=NEON.curie('nitrateLightDarkSpectralRatioFailQM'),
                      model_uri=NEON.nitrateLightDarkSpectralRatioFailQM, domain=None, range=Optional[float])

slots.nitrateLightDarkSpectralRatioNAQM = Slot(uri=NEON.nitrateLightDarkSpectralRatioNAQM, name="nitrateLightDarkSpectralRatioNAQM", curie=NEON.curie('nitrateLightDarkSpectralRatioNAQM'),
                      model_uri=NEON.nitrateLightDarkSpectralRatioNAQM, domain=None, range=Optional[float])

slots.nitrateLightDarkSpectralRatioQAQCRpt = Slot(uri=NEON.nitrateLightDarkSpectralRatioQAQCRpt, name="nitrateLightDarkSpectralRatioQAQCRpt", curie=NEON.curie('nitrateLightDarkSpectralRatioQAQCRpt'),
                      model_uri=NEON.nitrateLightDarkSpectralRatioQAQCRpt, domain=None, range=Optional[str])

slots.validCalQAQCRpt = Slot(uri=NEON.validCalQAQCRpt, name="validCalQAQCRpt", curie=NEON.curie('validCalQAQCRpt'),
                      model_uri=NEON.validCalQAQCRpt, domain=None, range=Optional[str])

slots.fieldIDCode = Slot(uri=NEON.fieldIDCode, name="fieldIDCode", curie=NEON.curie('fieldIDCode'),
                      model_uri=NEON.fieldIDCode, domain=None, range=Optional[str])

slots.fieldIDFate = Slot(uri=NEON.fieldIDFate, name="fieldIDFate", curie=NEON.curie('fieldIDFate'),
                      model_uri=NEON.fieldIDFate, domain=None, range=Optional[str])

slots.streamAddCoordinateUncertainty = Slot(uri=NEON.streamAddCoordinateUncertainty, name="streamAddCoordinateUncertainty", curie=NEON.curie('streamAddCoordinateUncertainty'),
                      model_uri=NEON.streamAddCoordinateUncertainty, domain=None, range=Optional[float])

slots.thermistorDepth = Slot(uri=NEON.thermistorDepth, name="thermistorDepth", curie=NEON.curie('thermistorDepth'),
                      model_uri=NEON.thermistorDepth, domain=None, range=Optional[float])

slots.tsdWaterTemp = Slot(uri=NEON.tsdWaterTemp, name="tsdWaterTemp", curie=NEON.curie('tsdWaterTemp'),
                      model_uri=NEON.tsdWaterTemp, domain=None, range=Optional[float])

slots.tsdWaterTempAlphaQM = Slot(uri=NEON.tsdWaterTempAlphaQM, name="tsdWaterTempAlphaQM", curie=NEON.curie('tsdWaterTempAlphaQM'),
                      model_uri=NEON.tsdWaterTempAlphaQM, domain=None, range=Optional[float])

slots.tsdWaterTempBetaQM = Slot(uri=NEON.tsdWaterTempBetaQM, name="tsdWaterTempBetaQM", curie=NEON.curie('tsdWaterTempBetaQM'),
                      model_uri=NEON.tsdWaterTempBetaQM, domain=None, range=Optional[float])

slots.tsdWaterTempConsistencyFailQM = Slot(uri=NEON.tsdWaterTempConsistencyFailQM, name="tsdWaterTempConsistencyFailQM", curie=NEON.curie('tsdWaterTempConsistencyFailQM'),
                      model_uri=NEON.tsdWaterTempConsistencyFailQM, domain=None, range=Optional[float])

slots.tsdWaterTempConsistencyNAQM = Slot(uri=NEON.tsdWaterTempConsistencyNAQM, name="tsdWaterTempConsistencyNAQM", curie=NEON.curie('tsdWaterTempConsistencyNAQM'),
                      model_uri=NEON.tsdWaterTempConsistencyNAQM, domain=None, range=Optional[float])

slots.tsdWaterTempConsistencyPassQM = Slot(uri=NEON.tsdWaterTempConsistencyPassQM, name="tsdWaterTempConsistencyPassQM", curie=NEON.curie('tsdWaterTempConsistencyPassQM'),
                      model_uri=NEON.tsdWaterTempConsistencyPassQM, domain=None, range=Optional[float])

slots.tsdWaterTempConsistQF = Slot(uri=NEON.tsdWaterTempConsistQF, name="tsdWaterTempConsistQF", curie=NEON.curie('tsdWaterTempConsistQF'),
                      model_uri=NEON.tsdWaterTempConsistQF, domain=None, range=Optional[int])

slots.tsdWaterTempExpUncert = Slot(uri=NEON.tsdWaterTempExpUncert, name="tsdWaterTempExpUncert", curie=NEON.curie('tsdWaterTempExpUncert'),
                      model_uri=NEON.tsdWaterTempExpUncert, domain=None, range=Optional[float])

slots.tsdWaterTempFinalQF = Slot(uri=NEON.tsdWaterTempFinalQF, name="tsdWaterTempFinalQF", curie=NEON.curie('tsdWaterTempFinalQF'),
                      model_uri=NEON.tsdWaterTempFinalQF, domain=None, range=Optional[str])

slots.tsdWaterTempGapFailQM = Slot(uri=NEON.tsdWaterTempGapFailQM, name="tsdWaterTempGapFailQM", curie=NEON.curie('tsdWaterTempGapFailQM'),
                      model_uri=NEON.tsdWaterTempGapFailQM, domain=None, range=Optional[float])

slots.tsdWaterTempGapNAQM = Slot(uri=NEON.tsdWaterTempGapNAQM, name="tsdWaterTempGapNAQM", curie=NEON.curie('tsdWaterTempGapNAQM'),
                      model_uri=NEON.tsdWaterTempGapNAQM, domain=None, range=Optional[float])

slots.tsdWaterTempGapPassQM = Slot(uri=NEON.tsdWaterTempGapPassQM, name="tsdWaterTempGapPassQM", curie=NEON.curie('tsdWaterTempGapPassQM'),
                      model_uri=NEON.tsdWaterTempGapPassQM, domain=None, range=Optional[float])

slots.tsdWaterTempGapQF = Slot(uri=NEON.tsdWaterTempGapQF, name="tsdWaterTempGapQF", curie=NEON.curie('tsdWaterTempGapQF'),
                      model_uri=NEON.tsdWaterTempGapQF, domain=None, range=Optional[int])

slots.tsdWaterTempMaximum = Slot(uri=NEON.tsdWaterTempMaximum, name="tsdWaterTempMaximum", curie=NEON.curie('tsdWaterTempMaximum'),
                      model_uri=NEON.tsdWaterTempMaximum, domain=None, range=Optional[float])

slots.tsdWaterTempMean = Slot(uri=NEON.tsdWaterTempMean, name="tsdWaterTempMean", curie=NEON.curie('tsdWaterTempMean'),
                      model_uri=NEON.tsdWaterTempMean, domain=None, range=Optional[float])

slots.tsdWaterTempMinimum = Slot(uri=NEON.tsdWaterTempMinimum, name="tsdWaterTempMinimum", curie=NEON.curie('tsdWaterTempMinimum'),
                      model_uri=NEON.tsdWaterTempMinimum, domain=None, range=Optional[float])

slots.tsdWaterTempNullFailQM = Slot(uri=NEON.tsdWaterTempNullFailQM, name="tsdWaterTempNullFailQM", curie=NEON.curie('tsdWaterTempNullFailQM'),
                      model_uri=NEON.tsdWaterTempNullFailQM, domain=None, range=Optional[float])

slots.tsdWaterTempNullNAQM = Slot(uri=NEON.tsdWaterTempNullNAQM, name="tsdWaterTempNullNAQM", curie=NEON.curie('tsdWaterTempNullNAQM'),
                      model_uri=NEON.tsdWaterTempNullNAQM, domain=None, range=Optional[float])

slots.tsdWaterTempNullPassQM = Slot(uri=NEON.tsdWaterTempNullPassQM, name="tsdWaterTempNullPassQM", curie=NEON.curie('tsdWaterTempNullPassQM'),
                      model_uri=NEON.tsdWaterTempNullPassQM, domain=None, range=Optional[float])

slots.tsdWaterTempNullQF = Slot(uri=NEON.tsdWaterTempNullQF, name="tsdWaterTempNullQF", curie=NEON.curie('tsdWaterTempNullQF'),
                      model_uri=NEON.tsdWaterTempNullQF, domain=None, range=Optional[int])

slots.tsdWaterTempNumPts = Slot(uri=NEON.tsdWaterTempNumPts, name="tsdWaterTempNumPts", curie=NEON.curie('tsdWaterTempNumPts'),
                      model_uri=NEON.tsdWaterTempNumPts, domain=None, range=Optional[str])

slots.tsdWaterTempRangeFailQM = Slot(uri=NEON.tsdWaterTempRangeFailQM, name="tsdWaterTempRangeFailQM", curie=NEON.curie('tsdWaterTempRangeFailQM'),
                      model_uri=NEON.tsdWaterTempRangeFailQM, domain=None, range=Optional[float])

slots.tsdWaterTempRangeNAQM = Slot(uri=NEON.tsdWaterTempRangeNAQM, name="tsdWaterTempRangeNAQM", curie=NEON.curie('tsdWaterTempRangeNAQM'),
                      model_uri=NEON.tsdWaterTempRangeNAQM, domain=None, range=Optional[float])

slots.tsdWaterTempRangePassQM = Slot(uri=NEON.tsdWaterTempRangePassQM, name="tsdWaterTempRangePassQM", curie=NEON.curie('tsdWaterTempRangePassQM'),
                      model_uri=NEON.tsdWaterTempRangePassQM, domain=None, range=Optional[float])

slots.tsdWaterTempRangeQF = Slot(uri=NEON.tsdWaterTempRangeQF, name="tsdWaterTempRangeQF", curie=NEON.curie('tsdWaterTempRangeQF'),
                      model_uri=NEON.tsdWaterTempRangeQF, domain=None, range=Optional[int])

slots.tsdWaterTempSpikeFailQM = Slot(uri=NEON.tsdWaterTempSpikeFailQM, name="tsdWaterTempSpikeFailQM", curie=NEON.curie('tsdWaterTempSpikeFailQM'),
                      model_uri=NEON.tsdWaterTempSpikeFailQM, domain=None, range=Optional[float])

slots.tsdWaterTempSpikeNAQM = Slot(uri=NEON.tsdWaterTempSpikeNAQM, name="tsdWaterTempSpikeNAQM", curie=NEON.curie('tsdWaterTempSpikeNAQM'),
                      model_uri=NEON.tsdWaterTempSpikeNAQM, domain=None, range=Optional[float])

slots.tsdWaterTempSpikePassQM = Slot(uri=NEON.tsdWaterTempSpikePassQM, name="tsdWaterTempSpikePassQM", curie=NEON.curie('tsdWaterTempSpikePassQM'),
                      model_uri=NEON.tsdWaterTempSpikePassQM, domain=None, range=Optional[float])

slots.tsdWaterTempSpikeQF = Slot(uri=NEON.tsdWaterTempSpikeQF, name="tsdWaterTempSpikeQF", curie=NEON.curie('tsdWaterTempSpikeQF'),
                      model_uri=NEON.tsdWaterTempSpikeQF, domain=None, range=Optional[int])

slots.tsdWaterTempStdErMean = Slot(uri=NEON.tsdWaterTempStdErMean, name="tsdWaterTempStdErMean", curie=NEON.curie('tsdWaterTempStdErMean'),
                      model_uri=NEON.tsdWaterTempStdErMean, domain=None, range=Optional[float])

slots.tsdWaterTempStepFailQM = Slot(uri=NEON.tsdWaterTempStepFailQM, name="tsdWaterTempStepFailQM", curie=NEON.curie('tsdWaterTempStepFailQM'),
                      model_uri=NEON.tsdWaterTempStepFailQM, domain=None, range=Optional[float])

slots.tsdWaterTempStepNAQM = Slot(uri=NEON.tsdWaterTempStepNAQM, name="tsdWaterTempStepNAQM", curie=NEON.curie('tsdWaterTempStepNAQM'),
                      model_uri=NEON.tsdWaterTempStepNAQM, domain=None, range=Optional[float])

slots.tsdWaterTempStepPassQM = Slot(uri=NEON.tsdWaterTempStepPassQM, name="tsdWaterTempStepPassQM", curie=NEON.curie('tsdWaterTempStepPassQM'),
                      model_uri=NEON.tsdWaterTempStepPassQM, domain=None, range=Optional[float])

slots.tsdWaterTempStepQF = Slot(uri=NEON.tsdWaterTempStepQF, name="tsdWaterTempStepQF", curie=NEON.curie('tsdWaterTempStepQF'),
                      model_uri=NEON.tsdWaterTempStepQF, domain=None, range=Optional[int])

slots.tsdWaterTempValidCalFailQM = Slot(uri=NEON.tsdWaterTempValidCalFailQM, name="tsdWaterTempValidCalFailQM", curie=NEON.curie('tsdWaterTempValidCalFailQM'),
                      model_uri=NEON.tsdWaterTempValidCalFailQM, domain=None, range=Optional[float])

slots.tsdWaterTempValidCalNAQM = Slot(uri=NEON.tsdWaterTempValidCalNAQM, name="tsdWaterTempValidCalNAQM", curie=NEON.curie('tsdWaterTempValidCalNAQM'),
                      model_uri=NEON.tsdWaterTempValidCalNAQM, domain=None, range=Optional[float])

slots.tsdWaterTempValidCalPassQM = Slot(uri=NEON.tsdWaterTempValidCalPassQM, name="tsdWaterTempValidCalPassQM", curie=NEON.curie('tsdWaterTempValidCalPassQM'),
                      model_uri=NEON.tsdWaterTempValidCalPassQM, domain=None, range=Optional[float])

slots.tsdWaterTempValidCalQF = Slot(uri=NEON.tsdWaterTempValidCalQF, name="tsdWaterTempValidCalQF", curie=NEON.curie('tsdWaterTempValidCalQF'),
                      model_uri=NEON.tsdWaterTempValidCalQF, domain=None, range=Optional[int])

slots.tsdWaterTempVariance = Slot(uri=NEON.tsdWaterTempVariance, name="tsdWaterTempVariance", curie=NEON.curie('tsdWaterTempVariance'),
                      model_uri=NEON.tsdWaterTempVariance, domain=None, range=Optional[float])

slots.buoyCorMeanPres = Slot(uri=NEON.buoyCorMeanPres, name="buoyCorMeanPres", curie=NEON.curie('buoyCorMeanPres'),
                      model_uri=NEON.buoyCorMeanPres, domain=None, range=Optional[float])

slots.buoyCorPres = Slot(uri=NEON.buoyCorPres, name="buoyCorPres", curie=NEON.curie('buoyCorPres'),
                      model_uri=NEON.buoyCorPres, domain=None, range=Optional[float])

slots.buoyCorPresDewPtQF = Slot(uri=NEON.buoyCorPresDewPtQF, name="buoyCorPresDewPtQF", curie=NEON.curie('buoyCorPresDewPtQF'),
                      model_uri=NEON.buoyCorPresDewPtQF, domain=None, range=Optional[str])

slots.buoyCorPresExpUncert = Slot(uri=NEON.buoyCorPresExpUncert, name="buoyCorPresExpUncert", curie=NEON.curie('buoyCorPresExpUncert'),
                      model_uri=NEON.buoyCorPresExpUncert, domain=None, range=Optional[float])

slots.buoyCorPresFinalQF = Slot(uri=NEON.buoyCorPresFinalQF, name="buoyCorPresFinalQF", curie=NEON.curie('buoyCorPresFinalQF'),
                      model_uri=NEON.buoyCorPresFinalQF, domain=None, range=Optional[str])

slots.buoyCorPresTempQF = Slot(uri=NEON.buoyCorPresTempQF, name="buoyCorPresTempQF", curie=NEON.curie('buoyCorPresTempQF'),
                      model_uri=NEON.buoyCorPresTempQF, domain=None, range=Optional[str])

slots.buoyStaPres = Slot(uri=NEON.buoyStaPres, name="buoyStaPres", curie=NEON.curie('buoyStaPres'),
                      model_uri=NEON.buoyStaPres, domain=None, range=Optional[float])

slots.buoyStaPresAlphaQM = Slot(uri=NEON.buoyStaPresAlphaQM, name="buoyStaPresAlphaQM", curie=NEON.curie('buoyStaPresAlphaQM'),
                      model_uri=NEON.buoyStaPresAlphaQM, domain=None, range=Optional[float])

slots.buoyStaPresBetaQM = Slot(uri=NEON.buoyStaPresBetaQM, name="buoyStaPresBetaQM", curie=NEON.curie('buoyStaPresBetaQM'),
                      model_uri=NEON.buoyStaPresBetaQM, domain=None, range=Optional[float])

slots.buoyStaPresConsistencyFailQM = Slot(uri=NEON.buoyStaPresConsistencyFailQM, name="buoyStaPresConsistencyFailQM", curie=NEON.curie('buoyStaPresConsistencyFailQM'),
                      model_uri=NEON.buoyStaPresConsistencyFailQM, domain=None, range=Optional[float])

slots.buoyStaPresConsistencyNAQM = Slot(uri=NEON.buoyStaPresConsistencyNAQM, name="buoyStaPresConsistencyNAQM", curie=NEON.curie('buoyStaPresConsistencyNAQM'),
                      model_uri=NEON.buoyStaPresConsistencyNAQM, domain=None, range=Optional[float])

slots.buoyStaPresConsistencyPassQM = Slot(uri=NEON.buoyStaPresConsistencyPassQM, name="buoyStaPresConsistencyPassQM", curie=NEON.curie('buoyStaPresConsistencyPassQM'),
                      model_uri=NEON.buoyStaPresConsistencyPassQM, domain=None, range=Optional[float])

slots.buoyStaPresConsistQF = Slot(uri=NEON.buoyStaPresConsistQF, name="buoyStaPresConsistQF", curie=NEON.curie('buoyStaPresConsistQF'),
                      model_uri=NEON.buoyStaPresConsistQF, domain=None, range=Optional[int])

slots.buoyStaPresExpUncert = Slot(uri=NEON.buoyStaPresExpUncert, name="buoyStaPresExpUncert", curie=NEON.curie('buoyStaPresExpUncert'),
                      model_uri=NEON.buoyStaPresExpUncert, domain=None, range=Optional[float])

slots.buoyStaPresFinalQF = Slot(uri=NEON.buoyStaPresFinalQF, name="buoyStaPresFinalQF", curie=NEON.curie('buoyStaPresFinalQF'),
                      model_uri=NEON.buoyStaPresFinalQF, domain=None, range=Optional[str])

slots.buoyStaPresGapFailQM = Slot(uri=NEON.buoyStaPresGapFailQM, name="buoyStaPresGapFailQM", curie=NEON.curie('buoyStaPresGapFailQM'),
                      model_uri=NEON.buoyStaPresGapFailQM, domain=None, range=Optional[float])

slots.buoyStaPresGapNAQM = Slot(uri=NEON.buoyStaPresGapNAQM, name="buoyStaPresGapNAQM", curie=NEON.curie('buoyStaPresGapNAQM'),
                      model_uri=NEON.buoyStaPresGapNAQM, domain=None, range=Optional[float])

slots.buoyStaPresGapPassQM = Slot(uri=NEON.buoyStaPresGapPassQM, name="buoyStaPresGapPassQM", curie=NEON.curie('buoyStaPresGapPassQM'),
                      model_uri=NEON.buoyStaPresGapPassQM, domain=None, range=Optional[float])

slots.buoyStaPresGapQF = Slot(uri=NEON.buoyStaPresGapQF, name="buoyStaPresGapQF", curie=NEON.curie('buoyStaPresGapQF'),
                      model_uri=NEON.buoyStaPresGapQF, domain=None, range=Optional[int])

slots.buoyStaPresMaximum = Slot(uri=NEON.buoyStaPresMaximum, name="buoyStaPresMaximum", curie=NEON.curie('buoyStaPresMaximum'),
                      model_uri=NEON.buoyStaPresMaximum, domain=None, range=Optional[float])

slots.buoyStaPresMean = Slot(uri=NEON.buoyStaPresMean, name="buoyStaPresMean", curie=NEON.curie('buoyStaPresMean'),
                      model_uri=NEON.buoyStaPresMean, domain=None, range=Optional[float])

slots.buoyStaPresMinimum = Slot(uri=NEON.buoyStaPresMinimum, name="buoyStaPresMinimum", curie=NEON.curie('buoyStaPresMinimum'),
                      model_uri=NEON.buoyStaPresMinimum, domain=None, range=Optional[float])

slots.buoyStaPresNullFailQM = Slot(uri=NEON.buoyStaPresNullFailQM, name="buoyStaPresNullFailQM", curie=NEON.curie('buoyStaPresNullFailQM'),
                      model_uri=NEON.buoyStaPresNullFailQM, domain=None, range=Optional[float])

slots.buoyStaPresNullNAQM = Slot(uri=NEON.buoyStaPresNullNAQM, name="buoyStaPresNullNAQM", curie=NEON.curie('buoyStaPresNullNAQM'),
                      model_uri=NEON.buoyStaPresNullNAQM, domain=None, range=Optional[float])

slots.buoyStaPresNullPassQM = Slot(uri=NEON.buoyStaPresNullPassQM, name="buoyStaPresNullPassQM", curie=NEON.curie('buoyStaPresNullPassQM'),
                      model_uri=NEON.buoyStaPresNullPassQM, domain=None, range=Optional[float])

slots.buoyStaPresNullQF = Slot(uri=NEON.buoyStaPresNullQF, name="buoyStaPresNullQF", curie=NEON.curie('buoyStaPresNullQF'),
                      model_uri=NEON.buoyStaPresNullQF, domain=None, range=Optional[int])

slots.buoyStaPresNumPts = Slot(uri=NEON.buoyStaPresNumPts, name="buoyStaPresNumPts", curie=NEON.curie('buoyStaPresNumPts'),
                      model_uri=NEON.buoyStaPresNumPts, domain=None, range=Optional[str])

slots.buoyStaPresPersistenceFailQM = Slot(uri=NEON.buoyStaPresPersistenceFailQM, name="buoyStaPresPersistenceFailQM", curie=NEON.curie('buoyStaPresPersistenceFailQM'),
                      model_uri=NEON.buoyStaPresPersistenceFailQM, domain=None, range=Optional[float])

slots.buoyStaPresPersistenceNAQM = Slot(uri=NEON.buoyStaPresPersistenceNAQM, name="buoyStaPresPersistenceNAQM", curie=NEON.curie('buoyStaPresPersistenceNAQM'),
                      model_uri=NEON.buoyStaPresPersistenceNAQM, domain=None, range=Optional[float])

slots.buoyStaPresPersistencePassQM = Slot(uri=NEON.buoyStaPresPersistencePassQM, name="buoyStaPresPersistencePassQM", curie=NEON.curie('buoyStaPresPersistencePassQM'),
                      model_uri=NEON.buoyStaPresPersistencePassQM, domain=None, range=Optional[float])

slots.buoyStaPresPersistQF = Slot(uri=NEON.buoyStaPresPersistQF, name="buoyStaPresPersistQF", curie=NEON.curie('buoyStaPresPersistQF'),
                      model_uri=NEON.buoyStaPresPersistQF, domain=None, range=Optional[int])

slots.buoyStaPresRangeFailQM = Slot(uri=NEON.buoyStaPresRangeFailQM, name="buoyStaPresRangeFailQM", curie=NEON.curie('buoyStaPresRangeFailQM'),
                      model_uri=NEON.buoyStaPresRangeFailQM, domain=None, range=Optional[float])

slots.buoyStaPresRangeNAQM = Slot(uri=NEON.buoyStaPresRangeNAQM, name="buoyStaPresRangeNAQM", curie=NEON.curie('buoyStaPresRangeNAQM'),
                      model_uri=NEON.buoyStaPresRangeNAQM, domain=None, range=Optional[float])

slots.buoyStaPresRangePassQM = Slot(uri=NEON.buoyStaPresRangePassQM, name="buoyStaPresRangePassQM", curie=NEON.curie('buoyStaPresRangePassQM'),
                      model_uri=NEON.buoyStaPresRangePassQM, domain=None, range=Optional[float])

slots.buoyStaPresRangeQF = Slot(uri=NEON.buoyStaPresRangeQF, name="buoyStaPresRangeQF", curie=NEON.curie('buoyStaPresRangeQF'),
                      model_uri=NEON.buoyStaPresRangeQF, domain=None, range=Optional[int])

slots.buoyStaPresSpikeFailQM = Slot(uri=NEON.buoyStaPresSpikeFailQM, name="buoyStaPresSpikeFailQM", curie=NEON.curie('buoyStaPresSpikeFailQM'),
                      model_uri=NEON.buoyStaPresSpikeFailQM, domain=None, range=Optional[float])

slots.buoyStaPresSpikeNAQM = Slot(uri=NEON.buoyStaPresSpikeNAQM, name="buoyStaPresSpikeNAQM", curie=NEON.curie('buoyStaPresSpikeNAQM'),
                      model_uri=NEON.buoyStaPresSpikeNAQM, domain=None, range=Optional[float])

slots.buoyStaPresSpikePassQM = Slot(uri=NEON.buoyStaPresSpikePassQM, name="buoyStaPresSpikePassQM", curie=NEON.curie('buoyStaPresSpikePassQM'),
                      model_uri=NEON.buoyStaPresSpikePassQM, domain=None, range=Optional[float])

slots.buoyStaPresSpikeQF = Slot(uri=NEON.buoyStaPresSpikeQF, name="buoyStaPresSpikeQF", curie=NEON.curie('buoyStaPresSpikeQF'),
                      model_uri=NEON.buoyStaPresSpikeQF, domain=None, range=Optional[int])

slots.buoyStaPresStdErMean = Slot(uri=NEON.buoyStaPresStdErMean, name="buoyStaPresStdErMean", curie=NEON.curie('buoyStaPresStdErMean'),
                      model_uri=NEON.buoyStaPresStdErMean, domain=None, range=Optional[float])

slots.buoyStaPresStepFailQM = Slot(uri=NEON.buoyStaPresStepFailQM, name="buoyStaPresStepFailQM", curie=NEON.curie('buoyStaPresStepFailQM'),
                      model_uri=NEON.buoyStaPresStepFailQM, domain=None, range=Optional[float])

slots.buoyStaPresStepNAQM = Slot(uri=NEON.buoyStaPresStepNAQM, name="buoyStaPresStepNAQM", curie=NEON.curie('buoyStaPresStepNAQM'),
                      model_uri=NEON.buoyStaPresStepNAQM, domain=None, range=Optional[float])

slots.buoyStaPresStepPassQM = Slot(uri=NEON.buoyStaPresStepPassQM, name="buoyStaPresStepPassQM", curie=NEON.curie('buoyStaPresStepPassQM'),
                      model_uri=NEON.buoyStaPresStepPassQM, domain=None, range=Optional[float])

slots.buoyStaPresStepQF = Slot(uri=NEON.buoyStaPresStepQF, name="buoyStaPresStepQF", curie=NEON.curie('buoyStaPresStepQF'),
                      model_uri=NEON.buoyStaPresStepQF, domain=None, range=Optional[int])

slots.buoyStaPresVariance = Slot(uri=NEON.buoyStaPresVariance, name="buoyStaPresVariance", curie=NEON.curie('buoyStaPresVariance'),
                      model_uri=NEON.buoyStaPresVariance, domain=None, range=Optional[float])

slots.outuPARAlphaQAQCRpt = Slot(uri=NEON.outuPARAlphaQAQCRpt, name="outuPARAlphaQAQCRpt", curie=NEON.curie('outuPARAlphaQAQCRpt'),
                      model_uri=NEON.outuPARAlphaQAQCRpt, domain=None, range=Optional[str])

slots.outuPARAlphaQM = Slot(uri=NEON.outuPARAlphaQM, name="outuPARAlphaQM", curie=NEON.curie('outuPARAlphaQM'),
                      model_uri=NEON.outuPARAlphaQM, domain=None, range=Optional[float])

slots.outuPARBetaQAQCRpt = Slot(uri=NEON.outuPARBetaQAQCRpt, name="outuPARBetaQAQCRpt", curie=NEON.curie('outuPARBetaQAQCRpt'),
                      model_uri=NEON.outuPARBetaQAQCRpt, domain=None, range=Optional[str])

slots.outuPARBetaQM = Slot(uri=NEON.outuPARBetaQM, name="outuPARBetaQM", curie=NEON.curie('outuPARBetaQM'),
                      model_uri=NEON.outuPARBetaQM, domain=None, range=Optional[float])

slots.outuPARConsistencyFailQM = Slot(uri=NEON.outuPARConsistencyFailQM, name="outuPARConsistencyFailQM", curie=NEON.curie('outuPARConsistencyFailQM'),
                      model_uri=NEON.outuPARConsistencyFailQM, domain=None, range=Optional[float])

slots.outuPARConsistencyNAQM = Slot(uri=NEON.outuPARConsistencyNAQM, name="outuPARConsistencyNAQM", curie=NEON.curie('outuPARConsistencyNAQM'),
                      model_uri=NEON.outuPARConsistencyNAQM, domain=None, range=Optional[float])

slots.outuPARConsistencyPassQM = Slot(uri=NEON.outuPARConsistencyPassQM, name="outuPARConsistencyPassQM", curie=NEON.curie('outuPARConsistencyPassQM'),
                      model_uri=NEON.outuPARConsistencyPassQM, domain=None, range=Optional[float])

slots.outuPARConsistencyQAQCRpt = Slot(uri=NEON.outuPARConsistencyQAQCRpt, name="outuPARConsistencyQAQCRpt", curie=NEON.curie('outuPARConsistencyQAQCRpt'),
                      model_uri=NEON.outuPARConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.outuPARExpUncert = Slot(uri=NEON.outuPARExpUncert, name="outuPARExpUncert", curie=NEON.curie('outuPARExpUncert'),
                      model_uri=NEON.outuPARExpUncert, domain=None, range=Optional[float])

slots.outuPARFinalQF = Slot(uri=NEON.outuPARFinalQF, name="outuPARFinalQF", curie=NEON.curie('outuPARFinalQF'),
                      model_uri=NEON.outuPARFinalQF, domain=None, range=Optional[str])

slots.outuPARGapFailQM = Slot(uri=NEON.outuPARGapFailQM, name="outuPARGapFailQM", curie=NEON.curie('outuPARGapFailQM'),
                      model_uri=NEON.outuPARGapFailQM, domain=None, range=Optional[float])

slots.outuPARGapNAQM = Slot(uri=NEON.outuPARGapNAQM, name="outuPARGapNAQM", curie=NEON.curie('outuPARGapNAQM'),
                      model_uri=NEON.outuPARGapNAQM, domain=None, range=Optional[float])

slots.outuPARGapPassQM = Slot(uri=NEON.outuPARGapPassQM, name="outuPARGapPassQM", curie=NEON.curie('outuPARGapPassQM'),
                      model_uri=NEON.outuPARGapPassQM, domain=None, range=Optional[float])

slots.outuPARGapQAQCRpt = Slot(uri=NEON.outuPARGapQAQCRpt, name="outuPARGapQAQCRpt", curie=NEON.curie('outuPARGapQAQCRpt'),
                      model_uri=NEON.outuPARGapQAQCRpt, domain=None, range=Optional[str])

slots.outuPARMaximum = Slot(uri=NEON.outuPARMaximum, name="outuPARMaximum", curie=NEON.curie('outuPARMaximum'),
                      model_uri=NEON.outuPARMaximum, domain=None, range=Optional[float])

slots.outuPARMean = Slot(uri=NEON.outuPARMean, name="outuPARMean", curie=NEON.curie('outuPARMean'),
                      model_uri=NEON.outuPARMean, domain=None, range=Optional[float])

slots.outuPARMinimum = Slot(uri=NEON.outuPARMinimum, name="outuPARMinimum", curie=NEON.curie('outuPARMinimum'),
                      model_uri=NEON.outuPARMinimum, domain=None, range=Optional[float])

slots.outuPARNullFailQM = Slot(uri=NEON.outuPARNullFailQM, name="outuPARNullFailQM", curie=NEON.curie('outuPARNullFailQM'),
                      model_uri=NEON.outuPARNullFailQM, domain=None, range=Optional[float])

slots.outuPARNullNAQM = Slot(uri=NEON.outuPARNullNAQM, name="outuPARNullNAQM", curie=NEON.curie('outuPARNullNAQM'),
                      model_uri=NEON.outuPARNullNAQM, domain=None, range=Optional[float])

slots.outuPARNullPassQM = Slot(uri=NEON.outuPARNullPassQM, name="outuPARNullPassQM", curie=NEON.curie('outuPARNullPassQM'),
                      model_uri=NEON.outuPARNullPassQM, domain=None, range=Optional[float])

slots.outuPARNullQAQCRpt = Slot(uri=NEON.outuPARNullQAQCRpt, name="outuPARNullQAQCRpt", curie=NEON.curie('outuPARNullQAQCRpt'),
                      model_uri=NEON.outuPARNullQAQCRpt, domain=None, range=Optional[str])

slots.outuPARNumPts = Slot(uri=NEON.outuPARNumPts, name="outuPARNumPts", curie=NEON.curie('outuPARNumPts'),
                      model_uri=NEON.outuPARNumPts, domain=None, range=Optional[int])

slots.outuPARPersistenceFailQM = Slot(uri=NEON.outuPARPersistenceFailQM, name="outuPARPersistenceFailQM", curie=NEON.curie('outuPARPersistenceFailQM'),
                      model_uri=NEON.outuPARPersistenceFailQM, domain=None, range=Optional[float])

slots.outuPARPersistenceNAQM = Slot(uri=NEON.outuPARPersistenceNAQM, name="outuPARPersistenceNAQM", curie=NEON.curie('outuPARPersistenceNAQM'),
                      model_uri=NEON.outuPARPersistenceNAQM, domain=None, range=Optional[float])

slots.outuPARPersistencePassQM = Slot(uri=NEON.outuPARPersistencePassQM, name="outuPARPersistencePassQM", curie=NEON.curie('outuPARPersistencePassQM'),
                      model_uri=NEON.outuPARPersistencePassQM, domain=None, range=Optional[float])

slots.outuPARPersistenceQAQCRpt = Slot(uri=NEON.outuPARPersistenceQAQCRpt, name="outuPARPersistenceQAQCRpt", curie=NEON.curie('outuPARPersistenceQAQCRpt'),
                      model_uri=NEON.outuPARPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.outuPARRangeFailQM = Slot(uri=NEON.outuPARRangeFailQM, name="outuPARRangeFailQM", curie=NEON.curie('outuPARRangeFailQM'),
                      model_uri=NEON.outuPARRangeFailQM, domain=None, range=Optional[float])

slots.outuPARRangeNAQM = Slot(uri=NEON.outuPARRangeNAQM, name="outuPARRangeNAQM", curie=NEON.curie('outuPARRangeNAQM'),
                      model_uri=NEON.outuPARRangeNAQM, domain=None, range=Optional[float])

slots.outuPARRangePassQM = Slot(uri=NEON.outuPARRangePassQM, name="outuPARRangePassQM", curie=NEON.curie('outuPARRangePassQM'),
                      model_uri=NEON.outuPARRangePassQM, domain=None, range=Optional[float])

slots.outuPARRangeQAQCRpt = Slot(uri=NEON.outuPARRangeQAQCRpt, name="outuPARRangeQAQCRpt", curie=NEON.curie('outuPARRangeQAQCRpt'),
                      model_uri=NEON.outuPARRangeQAQCRpt, domain=None, range=Optional[str])

slots.outuPARSpikeFailQM = Slot(uri=NEON.outuPARSpikeFailQM, name="outuPARSpikeFailQM", curie=NEON.curie('outuPARSpikeFailQM'),
                      model_uri=NEON.outuPARSpikeFailQM, domain=None, range=Optional[float])

slots.outuPARSpikeNAQM = Slot(uri=NEON.outuPARSpikeNAQM, name="outuPARSpikeNAQM", curie=NEON.curie('outuPARSpikeNAQM'),
                      model_uri=NEON.outuPARSpikeNAQM, domain=None, range=Optional[float])

slots.outuPARSpikePassQM = Slot(uri=NEON.outuPARSpikePassQM, name="outuPARSpikePassQM", curie=NEON.curie('outuPARSpikePassQM'),
                      model_uri=NEON.outuPARSpikePassQM, domain=None, range=Optional[float])

slots.outuPARSpikeQAQCRpt = Slot(uri=NEON.outuPARSpikeQAQCRpt, name="outuPARSpikeQAQCRpt", curie=NEON.curie('outuPARSpikeQAQCRpt'),
                      model_uri=NEON.outuPARSpikeQAQCRpt, domain=None, range=Optional[str])

slots.outuPARStdErMean = Slot(uri=NEON.outuPARStdErMean, name="outuPARStdErMean", curie=NEON.curie('outuPARStdErMean'),
                      model_uri=NEON.outuPARStdErMean, domain=None, range=Optional[float])

slots.outuPARStepFailQM = Slot(uri=NEON.outuPARStepFailQM, name="outuPARStepFailQM", curie=NEON.curie('outuPARStepFailQM'),
                      model_uri=NEON.outuPARStepFailQM, domain=None, range=Optional[float])

slots.outuPARStepNAQM = Slot(uri=NEON.outuPARStepNAQM, name="outuPARStepNAQM", curie=NEON.curie('outuPARStepNAQM'),
                      model_uri=NEON.outuPARStepNAQM, domain=None, range=Optional[float])

slots.outuPARStepPassQM = Slot(uri=NEON.outuPARStepPassQM, name="outuPARStepPassQM", curie=NEON.curie('outuPARStepPassQM'),
                      model_uri=NEON.outuPARStepPassQM, domain=None, range=Optional[float])

slots.outuPARStepQAQCRpt = Slot(uri=NEON.outuPARStepQAQCRpt, name="outuPARStepQAQCRpt", curie=NEON.curie('outuPARStepQAQCRpt'),
                      model_uri=NEON.outuPARStepQAQCRpt, domain=None, range=Optional[str])

slots.outuPARValidCalFailQM = Slot(uri=NEON.outuPARValidCalFailQM, name="outuPARValidCalFailQM", curie=NEON.curie('outuPARValidCalFailQM'),
                      model_uri=NEON.outuPARValidCalFailQM, domain=None, range=Optional[float])

slots.outuPARValidCalNAQM = Slot(uri=NEON.outuPARValidCalNAQM, name="outuPARValidCalNAQM", curie=NEON.curie('outuPARValidCalNAQM'),
                      model_uri=NEON.outuPARValidCalNAQM, domain=None, range=Optional[float])

slots.outuPARValidCalPassQM = Slot(uri=NEON.outuPARValidCalPassQM, name="outuPARValidCalPassQM", curie=NEON.curie('outuPARValidCalPassQM'),
                      model_uri=NEON.outuPARValidCalPassQM, domain=None, range=Optional[float])

slots.outuPARValidCalQAQCRpt = Slot(uri=NEON.outuPARValidCalQAQCRpt, name="outuPARValidCalQAQCRpt", curie=NEON.curie('outuPARValidCalQAQCRpt'),
                      model_uri=NEON.outuPARValidCalQAQCRpt, domain=None, range=Optional[str])

slots.outuPARVariance = Slot(uri=NEON.outuPARVariance, name="outuPARVariance", curie=NEON.curie('outuPARVariance'),
                      model_uri=NEON.outuPARVariance, domain=None, range=Optional[float])

slots.uPARAlphaQAQCRpt = Slot(uri=NEON.uPARAlphaQAQCRpt, name="uPARAlphaQAQCRpt", curie=NEON.curie('uPARAlphaQAQCRpt'),
                      model_uri=NEON.uPARAlphaQAQCRpt, domain=None, range=Optional[str])

slots.uPARAlphaQM = Slot(uri=NEON.uPARAlphaQM, name="uPARAlphaQM", curie=NEON.curie('uPARAlphaQM'),
                      model_uri=NEON.uPARAlphaQM, domain=None, range=Optional[float])

slots.uPARBetaQAQCRpt = Slot(uri=NEON.uPARBetaQAQCRpt, name="uPARBetaQAQCRpt", curie=NEON.curie('uPARBetaQAQCRpt'),
                      model_uri=NEON.uPARBetaQAQCRpt, domain=None, range=Optional[str])

slots.uPARBetaQM = Slot(uri=NEON.uPARBetaQM, name="uPARBetaQM", curie=NEON.curie('uPARBetaQM'),
                      model_uri=NEON.uPARBetaQM, domain=None, range=Optional[float])

slots.uPARConsistencyFailQM = Slot(uri=NEON.uPARConsistencyFailQM, name="uPARConsistencyFailQM", curie=NEON.curie('uPARConsistencyFailQM'),
                      model_uri=NEON.uPARConsistencyFailQM, domain=None, range=Optional[float])

slots.uPARConsistencyNAQM = Slot(uri=NEON.uPARConsistencyNAQM, name="uPARConsistencyNAQM", curie=NEON.curie('uPARConsistencyNAQM'),
                      model_uri=NEON.uPARConsistencyNAQM, domain=None, range=Optional[float])

slots.uPARConsistencyPassQM = Slot(uri=NEON.uPARConsistencyPassQM, name="uPARConsistencyPassQM", curie=NEON.curie('uPARConsistencyPassQM'),
                      model_uri=NEON.uPARConsistencyPassQM, domain=None, range=Optional[float])

slots.uPARConsistencyQAQCRpt = Slot(uri=NEON.uPARConsistencyQAQCRpt, name="uPARConsistencyQAQCRpt", curie=NEON.curie('uPARConsistencyQAQCRpt'),
                      model_uri=NEON.uPARConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.uPARExpUncert = Slot(uri=NEON.uPARExpUncert, name="uPARExpUncert", curie=NEON.curie('uPARExpUncert'),
                      model_uri=NEON.uPARExpUncert, domain=None, range=Optional[float])

slots.uPARFinalQF = Slot(uri=NEON.uPARFinalQF, name="uPARFinalQF", curie=NEON.curie('uPARFinalQF'),
                      model_uri=NEON.uPARFinalQF, domain=None, range=Optional[str])

slots.uPARGapFailQM = Slot(uri=NEON.uPARGapFailQM, name="uPARGapFailQM", curie=NEON.curie('uPARGapFailQM'),
                      model_uri=NEON.uPARGapFailQM, domain=None, range=Optional[float])

slots.uPARGapNAQM = Slot(uri=NEON.uPARGapNAQM, name="uPARGapNAQM", curie=NEON.curie('uPARGapNAQM'),
                      model_uri=NEON.uPARGapNAQM, domain=None, range=Optional[float])

slots.uPARGapPassQM = Slot(uri=NEON.uPARGapPassQM, name="uPARGapPassQM", curie=NEON.curie('uPARGapPassQM'),
                      model_uri=NEON.uPARGapPassQM, domain=None, range=Optional[float])

slots.uPARGapQAQCRpt = Slot(uri=NEON.uPARGapQAQCRpt, name="uPARGapQAQCRpt", curie=NEON.curie('uPARGapQAQCRpt'),
                      model_uri=NEON.uPARGapQAQCRpt, domain=None, range=Optional[str])

slots.uPARMaximum = Slot(uri=NEON.uPARMaximum, name="uPARMaximum", curie=NEON.curie('uPARMaximum'),
                      model_uri=NEON.uPARMaximum, domain=None, range=Optional[float])

slots.uPARMean = Slot(uri=NEON.uPARMean, name="uPARMean", curie=NEON.curie('uPARMean'),
                      model_uri=NEON.uPARMean, domain=None, range=Optional[float])

slots.uPARMinimum = Slot(uri=NEON.uPARMinimum, name="uPARMinimum", curie=NEON.curie('uPARMinimum'),
                      model_uri=NEON.uPARMinimum, domain=None, range=Optional[float])

slots.uPARNullFailQM = Slot(uri=NEON.uPARNullFailQM, name="uPARNullFailQM", curie=NEON.curie('uPARNullFailQM'),
                      model_uri=NEON.uPARNullFailQM, domain=None, range=Optional[float])

slots.uPARNullNAQM = Slot(uri=NEON.uPARNullNAQM, name="uPARNullNAQM", curie=NEON.curie('uPARNullNAQM'),
                      model_uri=NEON.uPARNullNAQM, domain=None, range=Optional[float])

slots.uPARNullPassQM = Slot(uri=NEON.uPARNullPassQM, name="uPARNullPassQM", curie=NEON.curie('uPARNullPassQM'),
                      model_uri=NEON.uPARNullPassQM, domain=None, range=Optional[float])

slots.uPARNullQAQCRpt = Slot(uri=NEON.uPARNullQAQCRpt, name="uPARNullQAQCRpt", curie=NEON.curie('uPARNullQAQCRpt'),
                      model_uri=NEON.uPARNullQAQCRpt, domain=None, range=Optional[str])

slots.uPARNumPts = Slot(uri=NEON.uPARNumPts, name="uPARNumPts", curie=NEON.curie('uPARNumPts'),
                      model_uri=NEON.uPARNumPts, domain=None, range=Optional[int])

slots.uPARPersistenceFailQM = Slot(uri=NEON.uPARPersistenceFailQM, name="uPARPersistenceFailQM", curie=NEON.curie('uPARPersistenceFailQM'),
                      model_uri=NEON.uPARPersistenceFailQM, domain=None, range=Optional[float])

slots.uPARPersistenceNAQM = Slot(uri=NEON.uPARPersistenceNAQM, name="uPARPersistenceNAQM", curie=NEON.curie('uPARPersistenceNAQM'),
                      model_uri=NEON.uPARPersistenceNAQM, domain=None, range=Optional[float])

slots.uPARPersistencePassQM = Slot(uri=NEON.uPARPersistencePassQM, name="uPARPersistencePassQM", curie=NEON.curie('uPARPersistencePassQM'),
                      model_uri=NEON.uPARPersistencePassQM, domain=None, range=Optional[float])

slots.uPARPersistenceQAQCRpt = Slot(uri=NEON.uPARPersistenceQAQCRpt, name="uPARPersistenceQAQCRpt", curie=NEON.curie('uPARPersistenceQAQCRpt'),
                      model_uri=NEON.uPARPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.uPARRangeFailQM = Slot(uri=NEON.uPARRangeFailQM, name="uPARRangeFailQM", curie=NEON.curie('uPARRangeFailQM'),
                      model_uri=NEON.uPARRangeFailQM, domain=None, range=Optional[float])

slots.uPARRangeNAQM = Slot(uri=NEON.uPARRangeNAQM, name="uPARRangeNAQM", curie=NEON.curie('uPARRangeNAQM'),
                      model_uri=NEON.uPARRangeNAQM, domain=None, range=Optional[float])

slots.uPARRangePassQM = Slot(uri=NEON.uPARRangePassQM, name="uPARRangePassQM", curie=NEON.curie('uPARRangePassQM'),
                      model_uri=NEON.uPARRangePassQM, domain=None, range=Optional[float])

slots.uPARRangeQAQCRpt = Slot(uri=NEON.uPARRangeQAQCRpt, name="uPARRangeQAQCRpt", curie=NEON.curie('uPARRangeQAQCRpt'),
                      model_uri=NEON.uPARRangeQAQCRpt, domain=None, range=Optional[str])

slots.uPARSpikeFailQM = Slot(uri=NEON.uPARSpikeFailQM, name="uPARSpikeFailQM", curie=NEON.curie('uPARSpikeFailQM'),
                      model_uri=NEON.uPARSpikeFailQM, domain=None, range=Optional[float])

slots.uPARSpikeNAQM = Slot(uri=NEON.uPARSpikeNAQM, name="uPARSpikeNAQM", curie=NEON.curie('uPARSpikeNAQM'),
                      model_uri=NEON.uPARSpikeNAQM, domain=None, range=Optional[float])

slots.uPARSpikePassQM = Slot(uri=NEON.uPARSpikePassQM, name="uPARSpikePassQM", curie=NEON.curie('uPARSpikePassQM'),
                      model_uri=NEON.uPARSpikePassQM, domain=None, range=Optional[float])

slots.uPARSpikeQAQCRpt = Slot(uri=NEON.uPARSpikeQAQCRpt, name="uPARSpikeQAQCRpt", curie=NEON.curie('uPARSpikeQAQCRpt'),
                      model_uri=NEON.uPARSpikeQAQCRpt, domain=None, range=Optional[str])

slots.uPARStdErMean = Slot(uri=NEON.uPARStdErMean, name="uPARStdErMean", curie=NEON.curie('uPARStdErMean'),
                      model_uri=NEON.uPARStdErMean, domain=None, range=Optional[float])

slots.uPARStepFailQM = Slot(uri=NEON.uPARStepFailQM, name="uPARStepFailQM", curie=NEON.curie('uPARStepFailQM'),
                      model_uri=NEON.uPARStepFailQM, domain=None, range=Optional[float])

slots.uPARStepNAQM = Slot(uri=NEON.uPARStepNAQM, name="uPARStepNAQM", curie=NEON.curie('uPARStepNAQM'),
                      model_uri=NEON.uPARStepNAQM, domain=None, range=Optional[float])

slots.uPARStepPassQM = Slot(uri=NEON.uPARStepPassQM, name="uPARStepPassQM", curie=NEON.curie('uPARStepPassQM'),
                      model_uri=NEON.uPARStepPassQM, domain=None, range=Optional[float])

slots.uPARStepQAQCRpt = Slot(uri=NEON.uPARStepQAQCRpt, name="uPARStepQAQCRpt", curie=NEON.curie('uPARStepQAQCRpt'),
                      model_uri=NEON.uPARStepQAQCRpt, domain=None, range=Optional[str])

slots.uPARValidCalFailQM = Slot(uri=NEON.uPARValidCalFailQM, name="uPARValidCalFailQM", curie=NEON.curie('uPARValidCalFailQM'),
                      model_uri=NEON.uPARValidCalFailQM, domain=None, range=Optional[float])

slots.uPARValidCalNAQM = Slot(uri=NEON.uPARValidCalNAQM, name="uPARValidCalNAQM", curie=NEON.curie('uPARValidCalNAQM'),
                      model_uri=NEON.uPARValidCalNAQM, domain=None, range=Optional[float])

slots.uPARValidCalPassQM = Slot(uri=NEON.uPARValidCalPassQM, name="uPARValidCalPassQM", curie=NEON.curie('uPARValidCalPassQM'),
                      model_uri=NEON.uPARValidCalPassQM, domain=None, range=Optional[float])

slots.uPARValidCalQAQCRpt = Slot(uri=NEON.uPARValidCalQAQCRpt, name="uPARValidCalQAQCRpt", curie=NEON.curie('uPARValidCalQAQCRpt'),
                      model_uri=NEON.uPARValidCalQAQCRpt, domain=None, range=Optional[str])

slots.uPARVariance = Slot(uri=NEON.uPARVariance, name="uPARVariance", curie=NEON.curie('uPARVariance'),
                      model_uri=NEON.uPARVariance, domain=None, range=Optional[float])

slots.hbpType = Slot(uri=NEON.hbpType, name="hbpType", curie=NEON.curie('hbpType'),
                      model_uri=NEON.hbpType, domain=None, range=Optional[str])

slots.subsamplesCreated = Slot(uri=NEON.subsamplesCreated, name="subsamplesCreated", curie=NEON.curie('subsamplesCreated'),
                      model_uri=NEON.subsamplesCreated, domain=None, range=Optional[str])

slots.subsampleFreshMassRatio = Slot(uri=NEON.subsampleFreshMassRatio, name="subsampleFreshMassRatio", curie=NEON.curie('subsampleFreshMassRatio'),
                      model_uri=NEON.subsampleFreshMassRatio, domain=None, range=Optional[float])

slots.vectorAverageHeading = Slot(uri=NEON.vectorAverageHeading, name="vectorAverageHeading", curie=NEON.curie('vectorAverageHeading'),
                      model_uri=NEON.vectorAverageHeading, domain=None, range=Optional[float])

slots.toCompositeSampleCode = Slot(uri=NEON.toCompositeSampleCode, name="toCompositeSampleCode", curie=NEON.curie('toCompositeSampleCode'),
                      model_uri=NEON.toCompositeSampleCode, domain=None, range=Optional[str])

slots.toCompositeSampleFate = Slot(uri=NEON.toCompositeSampleFate, name="toCompositeSampleFate", curie=NEON.curie('toCompositeSampleFate'),
                      model_uri=NEON.toCompositeSampleFate, domain=None, range=Optional[str])

slots.toCompositeSampleID = Slot(uri=NEON.toCompositeSampleID, name="toCompositeSampleID", curie=NEON.curie('toCompositeSampleID'),
                      model_uri=NEON.toCompositeSampleID, domain=None, range=Optional[str])

slots.sampleMass = Slot(uri=NEON.sampleMass, name="sampleMass", curie=NEON.curie('sampleMass'),
                      model_uri=NEON.sampleMass, domain=None, range=Optional[float])

slots.samplePercent = Slot(uri=NEON.samplePercent, name="samplePercent", curie=NEON.curie('samplePercent'),
                      model_uri=NEON.samplePercent, domain=None, range=Optional[float])

slots.dnaPooledStatus = Slot(uri=NEON.dnaPooledStatus, name="dnaPooledStatus", curie=NEON.curie('dnaPooledStatus'),
                      model_uri=NEON.dnaPooledStatus, domain=None, range=Optional[str])

slots.linkerPrimerSequence = Slot(uri=NEON.linkerPrimerSequence, name="linkerPrimerSequence", curie=NEON.curie('linkerPrimerSequence'),
                      model_uri=NEON.linkerPrimerSequence, domain=None, range=Optional[str])

slots.reverseLinkerPrimerSequence = Slot(uri=NEON.reverseLinkerPrimerSequence, name="reverseLinkerPrimerSequence", curie=NEON.curie('reverseLinkerPrimerSequence'),
                      model_uri=NEON.reverseLinkerPrimerSequence, domain=None, range=Optional[str])

slots.sequencingPlatform = Slot(uri=NEON.sequencingPlatform, name="sequencingPlatform", curie=NEON.curie('sequencingPlatform'),
                      model_uri=NEON.sequencingPlatform, domain=None, range=Optional[str])

slots.sequencingPlatformModel = Slot(uri=NEON.sequencingPlatformModel, name="sequencingPlatformModel", curie=NEON.curie('sequencingPlatformModel'),
                      model_uri=NEON.sequencingPlatformModel, domain=None, range=Optional[str])

slots.seq_model = Slot(uri=NEON.seq_model, name="seq_model", curie=NEON.curie('seq_model'),
                      model_uri=NEON.seq_model, domain=None, range=Optional[str])

slots.sequencingMethod = Slot(uri=NEON.sequencingMethod, name="sequencingMethod", curie=NEON.curie('sequencingMethod'),
                      model_uri=NEON.sequencingMethod, domain=None, range=Optional[str])

slots.investigation_type = Slot(uri=NEON.investigation_type, name="investigation_type", curie=NEON.curie('investigation_type'),
                      model_uri=NEON.investigation_type, domain=None, range=Optional[str])

slots.sequencingConcentration = Slot(uri=NEON.sequencingConcentration, name="sequencingConcentration", curie=NEON.curie('sequencingConcentration'),
                      model_uri=NEON.sequencingConcentration, domain=None, range=Optional[float])

slots.sequencerRunID = Slot(uri=NEON.sequencerRunID, name="sequencerRunID", curie=NEON.curie('sequencerRunID'),
                      model_uri=NEON.sequencerRunID, domain=None, range=Optional[str])

slots.sampleTotalReadNumber = Slot(uri=NEON.sampleTotalReadNumber, name="sampleTotalReadNumber", curie=NEON.curie('sampleTotalReadNumber'),
                      model_uri=NEON.sampleTotalReadNumber, domain=None, range=Optional[str])

slots.sampleFilteredReadNumber = Slot(uri=NEON.sampleFilteredReadNumber, name="sampleFilteredReadNumber", curie=NEON.curie('sampleFilteredReadNumber'),
                      model_uri=NEON.sampleFilteredReadNumber, domain=None, range=Optional[str])

slots.maxFilteredReadLength = Slot(uri=NEON.maxFilteredReadLength, name="maxFilteredReadLength", curie=NEON.curie('maxFilteredReadLength'),
                      model_uri=NEON.maxFilteredReadLength, domain=None, range=Optional[str])

slots.minFilteredReadLength = Slot(uri=NEON.minFilteredReadLength, name="minFilteredReadLength", curie=NEON.curie('minFilteredReadLength'),
                      model_uri=NEON.minFilteredReadLength, domain=None, range=Optional[str])

slots.averageFilteredReadQuality = Slot(uri=NEON.averageFilteredReadQuality, name="averageFilteredReadQuality", curie=NEON.curie('averageFilteredReadQuality'),
                      model_uri=NEON.averageFilteredReadQuality, domain=None, range=Optional[float])

slots.ambiguousBasesNumber = Slot(uri=NEON.ambiguousBasesNumber, name="ambiguousBasesNumber", curie=NEON.curie('ambiguousBasesNumber'),
                      model_uri=NEON.ambiguousBasesNumber, domain=None, range=Optional[str])

slots.barcodeSequence = Slot(uri=NEON.barcodeSequence, name="barcodeSequence", curie=NEON.curie('barcodeSequence'),
                      model_uri=NEON.barcodeSequence, domain=None, range=Optional[str])

slots.dnaProcessedBy = Slot(uri=NEON.dnaProcessedBy, name="dnaProcessedBy", curie=NEON.curie('dnaProcessedBy'),
                      model_uri=NEON.dnaProcessedBy, domain=None, range=Optional[str])

slots.nucleicAcidQuantMethod = Slot(uri=NEON.nucleicAcidQuantMethod, name="nucleicAcidQuantMethod", curie=NEON.curie('nucleicAcidQuantMethod'),
                      model_uri=NEON.nucleicAcidQuantMethod, domain=None, range=Optional[str])

slots.qaqcStatus = Slot(uri=NEON.qaqcStatus, name="qaqcStatus", curie=NEON.curie('qaqcStatus'),
                      model_uri=NEON.qaqcStatus, domain=None, range=Optional[str])

slots.fullRangeSpCondLinear = Slot(uri=NEON.fullRangeSpCondLinear, name="fullRangeSpCondLinear", curie=NEON.curie('fullRangeSpCondLinear'),
                      model_uri=NEON.fullRangeSpCondLinear, domain=None, range=Optional[float])

slots.fullRangeSpCondNonlinear = Slot(uri=NEON.fullRangeSpCondNonlinear, name="fullRangeSpCondNonlinear", curie=NEON.curie('fullRangeSpCondNonlinear'),
                      model_uri=NEON.fullRangeSpCondNonlinear, domain=None, range=Optional[float])

slots.lowRangeSpCondLinear = Slot(uri=NEON.lowRangeSpCondLinear, name="lowRangeSpCondLinear", curie=NEON.curie('lowRangeSpCondLinear'),
                      model_uri=NEON.lowRangeSpCondLinear, domain=None, range=Optional[float])

slots.lowRangeSpCondNonlinear = Slot(uri=NEON.lowRangeSpCondNonlinear, name="lowRangeSpCondNonlinear", curie=NEON.curie('lowRangeSpCondNonlinear'),
                      model_uri=NEON.lowRangeSpCondNonlinear, domain=None, range=Optional[float])

slots.averageVelocity = Slot(uri=NEON.averageVelocity, name="averageVelocity", curie=NEON.curie('averageVelocity'),
                      model_uri=NEON.averageVelocity, domain=None, range=Optional[float])

slots.averageVelocityUnits = Slot(uri=NEON.averageVelocityUnits, name="averageVelocityUnits", curie=NEON.curie('averageVelocityUnits'),
                      model_uri=NEON.averageVelocityUnits, domain=None, range=Optional[str])

slots.averageVelocityUnitsQF = Slot(uri=NEON.averageVelocityUnitsQF, name="averageVelocityUnitsQF", curie=NEON.curie('averageVelocityUnitsQF'),
                      model_uri=NEON.averageVelocityUnitsQF, domain=None, range=Optional[int])

slots.bedVelocity = Slot(uri=NEON.bedVelocity, name="bedVelocity", curie=NEON.curie('bedVelocity'),
                      model_uri=NEON.bedVelocity, domain=None, range=Optional[float])

slots.dischargeUnitsQF = Slot(uri=NEON.dischargeUnitsQF, name="dischargeUnitsQF", curie=NEON.curie('dischargeUnitsQF'),
                      model_uri=NEON.dischargeUnitsQF, domain=None, range=Optional[int])

slots.edgeFactor = Slot(uri=NEON.edgeFactor, name="edgeFactor", curie=NEON.curie('edgeFactor'),
                      model_uri=NEON.edgeFactor, domain=None, range=Optional[str])

slots.flowCalcQF = Slot(uri=NEON.flowCalcQF, name="flowCalcQF", curie=NEON.curie('flowCalcQF'),
                      model_uri=NEON.flowCalcQF, domain=None, range=Optional[str])

slots.flowCalculation = Slot(uri=NEON.flowCalculation, name="flowCalculation", curie=NEON.curie('flowCalculation'),
                      model_uri=NEON.flowCalculation, domain=None, range=Optional[str])

slots.fourFifthDepthVelocity = Slot(uri=NEON.fourFifthDepthVelocity, name="fourFifthDepthVelocity", curie=NEON.curie('fourFifthDepthVelocity'),
                      model_uri=NEON.fourFifthDepthVelocity, domain=None, range=Optional[float])

slots.lowVelocityFinalQF = Slot(uri=NEON.lowVelocityFinalQF, name="lowVelocityFinalQF", curie=NEON.curie('lowVelocityFinalQF'),
                      model_uri=NEON.lowVelocityFinalQF, domain=None, range=Optional[float])

slots.lowVelocityQF = Slot(uri=NEON.lowVelocityQF, name="lowVelocityQF", curie=NEON.curie('lowVelocityQF'),
                      model_uri=NEON.lowVelocityQF, domain=None, range=Optional[int])

slots.oneFifthDepthVelocity = Slot(uri=NEON.oneFifthDepthVelocity, name="oneFifthDepthVelocity", curie=NEON.curie('oneFifthDepthVelocity'),
                      model_uri=NEON.oneFifthDepthVelocity, domain=None, range=Optional[float])

slots.recorduid = Slot(uri=NEON.recorduid, name="recorduid", curie=NEON.curie('recorduid'),
                      model_uri=NEON.recorduid, domain=None, range=Optional[str])

slots.sectionArea = Slot(uri=NEON.sectionArea, name="sectionArea", curie=NEON.curie('sectionArea'),
                      model_uri=NEON.sectionArea, domain=None, range=Optional[float])

slots.sectionFlow = Slot(uri=NEON.sectionFlow, name="sectionFlow", curie=NEON.curie('sectionFlow'),
                      model_uri=NEON.sectionFlow, domain=None, range=Optional[float])

slots.stationNumber = Slot(uri=NEON.stationNumber, name="stationNumber", curie=NEON.curie('stationNumber'),
                      model_uri=NEON.stationNumber, domain=None, range=Optional[int])

slots.streamProfilingMethod = Slot(uri=NEON.streamProfilingMethod, name="streamProfilingMethod", curie=NEON.curie('streamProfilingMethod'),
                      model_uri=NEON.streamProfilingMethod, domain=None, range=Optional[str])

slots.streamStageUnits = Slot(uri=NEON.streamStageUnits, name="streamStageUnits", curie=NEON.curie('streamStageUnits'),
                      model_uri=NEON.streamStageUnits, domain=None, range=Optional[str])

slots.streamStageUnitsQF = Slot(uri=NEON.streamStageUnitsQF, name="streamStageUnitsQF", curie=NEON.curie('streamStageUnitsQF'),
                      model_uri=NEON.streamStageUnitsQF, domain=None, range=Optional[int])

slots.surfaceVelocity = Slot(uri=NEON.surfaceVelocity, name="surfaceVelocity", curie=NEON.curie('surfaceVelocity'),
                      model_uri=NEON.surfaceVelocity, domain=None, range=Optional[float])

slots.tapeDistance = Slot(uri=NEON.tapeDistance, name="tapeDistance", curie=NEON.curie('tapeDistance'),
                      model_uri=NEON.tapeDistance, domain=None, range=Optional[float])

slots.tapeDistanceUnits = Slot(uri=NEON.tapeDistanceUnits, name="tapeDistanceUnits", curie=NEON.curie('tapeDistanceUnits'),
                      model_uri=NEON.tapeDistanceUnits, domain=None, range=Optional[str])

slots.tapeDistanceUnitsQF = Slot(uri=NEON.tapeDistanceUnitsQF, name="tapeDistanceUnitsQF", curie=NEON.curie('tapeDistanceUnitsQF'),
                      model_uri=NEON.tapeDistanceUnitsQF, domain=None, range=Optional[int])

slots.threeFifthDepthVelocity = Slot(uri=NEON.threeFifthDepthVelocity, name="threeFifthDepthVelocity", curie=NEON.curie('threeFifthDepthVelocity'),
                      model_uri=NEON.threeFifthDepthVelocity, domain=None, range=Optional[float])

slots.twoFifthDepthVelocity = Slot(uri=NEON.twoFifthDepthVelocity, name="twoFifthDepthVelocity", curie=NEON.curie('twoFifthDepthVelocity'),
                      model_uri=NEON.twoFifthDepthVelocity, domain=None, range=Optional[float])

slots.waterDepth = Slot(uri=NEON.waterDepth, name="waterDepth", curie=NEON.curie('waterDepth'),
                      model_uri=NEON.waterDepth, domain=None, range=Optional[float])

slots.waterDepthUnits = Slot(uri=NEON.waterDepthUnits, name="waterDepthUnits", curie=NEON.curie('waterDepthUnits'),
                      model_uri=NEON.waterDepthUnits, domain=None, range=Optional[str])

slots.waterDepthUnitsQF = Slot(uri=NEON.waterDepthUnitsQF, name="waterDepthUnitsQF", curie=NEON.curie('waterDepthUnitsQF'),
                      model_uri=NEON.waterDepthUnitsQF, domain=None, range=Optional[int])

slots.bgcDataQF = Slot(uri=NEON.bgcDataQF, name="bgcDataQF", curie=NEON.curie('bgcDataQF'),
                      model_uri=NEON.bgcDataQF, domain=None, range=Optional[str])

slots.bgcRemarks = Slot(uri=NEON.bgcRemarks, name="bgcRemarks", curie=NEON.curie('bgcRemarks'),
                      model_uri=NEON.bgcRemarks, domain=None, range=Optional[str])

slots.caclpHRatio = Slot(uri=NEON.caclpHRatio, name="caclpHRatio", curie=NEON.curie('caclpHRatio'),
                      model_uri=NEON.caclpHRatio, domain=None, range=Optional[float])

slots.dryMassFraction = Slot(uri=NEON.dryMassFraction, name="dryMassFraction", curie=NEON.curie('dryMassFraction'),
                      model_uri=NEON.dryMassFraction, domain=None, range=Optional[float])

slots.genomicsDataQF = Slot(uri=NEON.genomicsDataQF, name="genomicsDataQF", curie=NEON.curie('genomicsDataQF'),
                      model_uri=NEON.genomicsDataQF, domain=None, range=Optional[str])

slots.pHDataQF = Slot(uri=NEON.pHDataQF, name="pHDataQF", curie=NEON.curie('pHDataQF'),
                      model_uri=NEON.pHDataQF, domain=None, range=Optional[str])

slots.pHMeasuredBy = Slot(uri=NEON.pHMeasuredBy, name="pHMeasuredBy", curie=NEON.curie('pHMeasuredBy'),
                      model_uri=NEON.pHMeasuredBy, domain=None, range=Optional[str])

slots.pHRemarks = Slot(uri=NEON.pHRemarks, name="pHRemarks", curie=NEON.curie('pHRemarks'),
                      model_uri=NEON.pHRemarks, domain=None, range=Optional[str])

slots.sampleExtent = Slot(uri=NEON.sampleExtent, name="sampleExtent", curie=NEON.curie('sampleExtent'),
                      model_uri=NEON.sampleExtent, domain=None, range=Optional[str])

slots.smDataQF = Slot(uri=NEON.smDataQF, name="smDataQF", curie=NEON.curie('smDataQF'),
                      model_uri=NEON.smDataQF, domain=None, range=Optional[str])

slots.smMeasuredBy = Slot(uri=NEON.smMeasuredBy, name="smMeasuredBy", curie=NEON.curie('smMeasuredBy'),
                      model_uri=NEON.smMeasuredBy, domain=None, range=Optional[str])

slots.smRemarks = Slot(uri=NEON.smRemarks, name="smRemarks", curie=NEON.curie('smRemarks'),
                      model_uri=NEON.smRemarks, domain=None, range=Optional[str])

slots.soilMoisture = Slot(uri=NEON.soilMoisture, name="soilMoisture", curie=NEON.curie('soilMoisture'),
                      model_uri=NEON.soilMoisture, domain=None, range=Optional[float])

slots.standingWaterDepth = Slot(uri=NEON.standingWaterDepth, name="standingWaterDepth", curie=NEON.curie('standingWaterDepth'),
                      model_uri=NEON.standingWaterDepth, domain=None, range=Optional[float])

slots.waterpHRatio = Slot(uri=NEON.waterpHRatio, name="waterpHRatio", curie=NEON.curie('waterpHRatio'),
                      model_uri=NEON.waterpHRatio, domain=None, range=Optional[float])

slots.genomicsPooledCodeList = Slot(uri=NEON.genomicsPooledCodeList, name="genomicsPooledCodeList", curie=NEON.curie('genomicsPooledCodeList'),
                      model_uri=NEON.genomicsPooledCodeList, domain=None, range=Optional[str])

slots.genomicsPooledIDList = Slot(uri=NEON.genomicsPooledIDList, name="genomicsPooledIDList", curie=NEON.curie('genomicsPooledIDList'),
                      model_uri=NEON.genomicsPooledIDList, domain=None, range=Optional[str])

slots.genomicsSampleCode = Slot(uri=NEON.genomicsSampleCode, name="genomicsSampleCode", curie=NEON.curie('genomicsSampleCode'),
                      model_uri=NEON.genomicsSampleCode, domain=None, range=Optional[str])

slots.genomicsSampleID = Slot(uri=NEON.genomicsSampleID, name="genomicsSampleID", curie=NEON.curie('genomicsSampleID'),
                      model_uri=NEON.genomicsSampleID, domain=None, range=Optional[str])

slots.additionalCoordUncertainty = Slot(uri=NEON.additionalCoordUncertainty, name="additionalCoordUncertainty", curie=NEON.curie('additionalCoordUncertainty'),
                      model_uri=NEON.additionalCoordUncertainty, domain=None, range=Optional[float])

slots.fulcrumVersion = Slot(uri=NEON.fulcrumVersion, name="fulcrumVersion", curie=NEON.curie('fulcrumVersion'),
                      model_uri=NEON.fulcrumVersion, domain=None, range=Optional[str])

slots.icePresent = Slot(uri=NEON.icePresent, name="icePresent", curie=NEON.curie('icePresent'),
                      model_uri=NEON.icePresent, domain=None, range=Optional[str])

slots.platformInfo = Slot(uri=NEON.platformInfo, name="platformInfo", curie=NEON.curie('platformInfo'),
                      model_uri=NEON.platformInfo, domain=None, range=Optional[str])

slots.estimatedMetalimnionDepths = Slot(uri=NEON.estimatedMetalimnionDepths, name="estimatedMetalimnionDepths", curie=NEON.curie('estimatedMetalimnionDepths'),
                      model_uri=NEON.estimatedMetalimnionDepths, domain=None, range=Optional[str])

slots.lowerMetalimnionDepth = Slot(uri=NEON.lowerMetalimnionDepth, name="lowerMetalimnionDepth", curie=NEON.curie('lowerMetalimnionDepth'),
                      model_uri=NEON.lowerMetalimnionDepth, domain=None, range=Optional[str])

slots.lowerMetalimnion2Depth = Slot(uri=NEON.lowerMetalimnion2Depth, name="lowerMetalimnion2Depth", curie=NEON.curie('lowerMetalimnion2Depth'),
                      model_uri=NEON.lowerMetalimnion2Depth, domain=None, range=Optional[str])

slots.upperMetalimnionDepth = Slot(uri=NEON.upperMetalimnionDepth, name="upperMetalimnionDepth", curie=NEON.curie('upperMetalimnionDepth'),
                      model_uri=NEON.upperMetalimnionDepth, domain=None, range=Optional[str])

slots.upperMetalimnion2Depth = Slot(uri=NEON.upperMetalimnion2Depth, name="upperMetalimnion2Depth", curie=NEON.curie('upperMetalimnion2Depth'),
                      model_uri=NEON.upperMetalimnion2Depth, domain=None, range=Optional[str])

slots.snowThickness = Slot(uri=NEON.snowThickness, name="snowThickness", curie=NEON.curie('snowThickness'),
                      model_uri=NEON.snowThickness, domain=None, range=Optional[float])

slots.beaufortScaleWind = Slot(uri=NEON.beaufortScaleWind, name="beaufortScaleWind", curie=NEON.curie('beaufortScaleWind'),
                      model_uri=NEON.beaufortScaleWind, domain=None, range=Optional[str])

slots.algaePresence = Slot(uri=NEON.algaePresence, name="algaePresence", curie=NEON.curie('algaePresence'),
                      model_uri=NEON.algaePresence, domain=None, range=Optional[str])

slots.leafLitterPresence = Slot(uri=NEON.leafLitterPresence, name="leafLitterPresence", curie=NEON.curie('leafLitterPresence'),
                      model_uri=NEON.leafLitterPresence, domain=None, range=Optional[str])

slots.macrophytePresence = Slot(uri=NEON.macrophytePresence, name="macrophytePresence", curie=NEON.curie('macrophytePresence'),
                      model_uri=NEON.macrophytePresence, domain=None, range=Optional[str])

slots.nominalCloudCover = Slot(uri=NEON.nominalCloudCover, name="nominalCloudCover", curie=NEON.curie('nominalCloudCover'),
                      model_uri=NEON.nominalCloudCover, domain=None, range=Optional[str])

slots.oilsPresence = Slot(uri=NEON.oilsPresence, name="oilsPresence", curie=NEON.curie('oilsPresence'),
                      model_uri=NEON.oilsPresence, domain=None, range=Optional[str])

slots.pollenPresence = Slot(uri=NEON.pollenPresence, name="pollenPresence", curie=NEON.curie('pollenPresence'),
                      model_uri=NEON.pollenPresence, domain=None, range=Optional[str])

slots.trashPresent = Slot(uri=NEON.trashPresent, name="trashPresent", curie=NEON.curie('trashPresent'),
                      model_uri=NEON.trashPresent, domain=None, range=Optional[str])

slots.waterClarityDescrip = Slot(uri=NEON.waterClarityDescrip, name="waterClarityDescrip", curie=NEON.curie('waterClarityDescrip'),
                      model_uri=NEON.waterClarityDescrip, domain=None, range=Optional[str])

slots.woodyDebrisPresence = Slot(uri=NEON.woodyDebrisPresence, name="woodyDebrisPresence", curie=NEON.curie('woodyDebrisPresence'),
                      model_uri=NEON.woodyDebrisPresence, domain=None, range=Optional[str])

slots.clipArea = Slot(uri=NEON.clipArea, name="clipArea", curie=NEON.curie('clipArea'),
                      model_uri=NEON.clipArea, domain=None, range=Optional[float])

slots.clipLength = Slot(uri=NEON.clipLength, name="clipLength", curie=NEON.curie('clipLength'),
                      model_uri=NEON.clipLength, domain=None, range=Optional[float])

slots.clipWidth = Slot(uri=NEON.clipWidth, name="clipWidth", curie=NEON.curie('clipWidth'),
                      model_uri=NEON.clipWidth, domain=None, range=Optional[float])

slots.freshMass = Slot(uri=NEON.freshMass, name="freshMass", curie=NEON.curie('freshMass'),
                      model_uri=NEON.freshMass, domain=None, range=Optional[float])

slots.subsampleCode = Slot(uri=NEON.subsampleCode, name="subsampleCode", curie=NEON.curie('subsampleCode'),
                      model_uri=NEON.subsampleCode, domain=None, range=Optional[str])

slots.subsampleDryMass = Slot(uri=NEON.subsampleDryMass, name="subsampleDryMass", curie=NEON.curie('subsampleDryMass'),
                      model_uri=NEON.subsampleDryMass, domain=None, range=Optional[float])

slots.subsampleFate = Slot(uri=NEON.subsampleFate, name="subsampleFate", curie=NEON.curie('subsampleFate'),
                      model_uri=NEON.subsampleFate, domain=None, range=Optional[str])

slots.subsampleFreshMass = Slot(uri=NEON.subsampleFreshMass, name="subsampleFreshMass", curie=NEON.curie('subsampleFreshMass'),
                      model_uri=NEON.subsampleFreshMass, domain=None, range=Optional[float])

slots.plotManagement = Slot(uri=NEON.plotManagement, name="plotManagement", curie=NEON.curie('plotManagement'),
                      model_uri=NEON.plotManagement, domain=None, range=Optional[str])

slots.boatToShoreDist = Slot(uri=NEON.boatToShoreDist, name="boatToShoreDist", curie=NEON.curie('boatToShoreDist'),
                      model_uri=NEON.boatToShoreDist, domain=None, range=Optional[float])

slots.canopyCoverPercent = Slot(uri=NEON.canopyCoverPercent, name="canopyCoverPercent", curie=NEON.curie('canopyCoverPercent'),
                      model_uri=NEON.canopyCoverPercent, domain=None, range=Optional[float])

slots.estVisibilityDist = Slot(uri=NEON.estVisibilityDist, name="estVisibilityDist", curie=NEON.curie('estVisibilityDist'),
                      model_uri=NEON.estVisibilityDist, domain=None, range=Optional[str])

slots.fulcrumChildID = Slot(uri=NEON.fulcrumChildID, name="fulcrumChildID", curie=NEON.curie('fulcrumChildID'),
                      model_uri=NEON.fulcrumChildID, domain=None, range=Optional[str])

slots.fulcrumGrandchildID = Slot(uri=NEON.fulcrumGrandchildID, name="fulcrumGrandchildID", curie=NEON.curie('fulcrumGrandchildID'),
                      model_uri=NEON.fulcrumGrandchildID, domain=None, range=Optional[str])

slots.acidTreatment = Slot(uri=NEON.acidTreatment, name="acidTreatment", curie=NEON.curie('acidTreatment'),
                      model_uri=NEON.acidTreatment, domain=None, range=Optional[str])

slots.analyteKnownValue = Slot(uri=NEON.analyteKnownValue, name="analyteKnownValue", curie=NEON.curie('analyteKnownValue'),
                      model_uri=NEON.analyteKnownValue, domain=None, range=Optional[float])

slots.analyticalRepNumber = Slot(uri=NEON.analyticalRepNumber, name="analyticalRepNumber", curie=NEON.curie('analyticalRepNumber'),
                      model_uri=NEON.analyticalRepNumber, domain=None, range=Optional[str])

slots.carbonPercent = Slot(uri=NEON.carbonPercent, name="carbonPercent", curie=NEON.curie('carbonPercent'),
                      model_uri=NEON.carbonPercent, domain=None, range=Optional[float])

slots.cnIsotopeQF = Slot(uri=NEON.cnIsotopeQF, name="cnIsotopeQF", curie=NEON.curie('cnIsotopeQF'),
                      model_uri=NEON.cnIsotopeQF, domain=None, range=Optional[str])

slots.cnPercentQF = Slot(uri=NEON.cnPercentQF, name="cnPercentQF", curie=NEON.curie('cnPercentQF'),
                      model_uri=NEON.cnPercentQF, domain=None, range=Optional[str])

slots.CNratio = Slot(uri=NEON.CNratio, name="CNratio", curie=NEON.curie('CNratio'),
                      model_uri=NEON.CNratio, domain=None, range=Optional[float])

slots.d13C = Slot(uri=NEON.d13C, name="d13C", curie=NEON.curie('d13C'),
                      model_uri=NEON.d13C, domain=None, range=Optional[float])

slots.d15N = Slot(uri=NEON.d15N, name="d15N", curie=NEON.curie('d15N'),
                      model_uri=NEON.d15N, domain=None, range=Optional[float])

slots.nitrogenPercent = Slot(uri=NEON.nitrogenPercent, name="nitrogenPercent", curie=NEON.curie('nitrogenPercent'),
                      model_uri=NEON.nitrogenPercent, domain=None, range=Optional[float])

slots.runID = Slot(uri=NEON.runID, name="runID", curie=NEON.curie('runID'),
                      model_uri=NEON.runID, domain=None, range=Optional[str])

slots.altCoordinateUncertainty = Slot(uri=NEON.altCoordinateUncertainty, name="altCoordinateUncertainty", curie=NEON.curie('altCoordinateUncertainty'),
                      model_uri=NEON.altCoordinateUncertainty, domain=None, range=Optional[float])

slots.altGeodeticDatum = Slot(uri=NEON.altGeodeticDatum, name="altGeodeticDatum", curie=NEON.curie('altGeodeticDatum'),
                      model_uri=NEON.altGeodeticDatum, domain=None, range=Optional[str])

slots.amcSamplingProtocolVersion = Slot(uri=NEON.amcSamplingProtocolVersion, name="amcSamplingProtocolVersion", curie=NEON.curie('amcSamplingProtocolVersion'),
                      model_uri=NEON.amcSamplingProtocolVersion, domain=None, range=Optional[str])

slots.domainSampleCode = Slot(uri=NEON.domainSampleCode, name="domainSampleCode", curie=NEON.curie('domainSampleCode'),
                      model_uri=NEON.domainSampleCode, domain=None, range=Optional[str])

slots.swcSamplingProtocolVersion = Slot(uri=NEON.swcSamplingProtocolVersion, name="swcSamplingProtocolVersion", curie=NEON.curie('swcSamplingProtocolVersion'),
                      model_uri=NEON.swcSamplingProtocolVersion, domain=None, range=Optional[str])

slots.titrationDataString = Slot(uri=NEON.titrationDataString, name="titrationDataString", curie=NEON.curie('titrationDataString'),
                      model_uri=NEON.titrationDataString, domain=None, range=Optional[str])

slots.domainSampleFate = Slot(uri=NEON.domainSampleFate, name="domainSampleFate", curie=NEON.curie('domainSampleFate'),
                      model_uri=NEON.domainSampleFate, domain=None, range=Optional[str])

slots.filtSampleCode = Slot(uri=NEON.filtSampleCode, name="filtSampleCode", curie=NEON.curie('filtSampleCode'),
                      model_uri=NEON.filtSampleCode, domain=None, range=Optional[str])

slots.filtSampleCond = Slot(uri=NEON.filtSampleCond, name="filtSampleCond", curie=NEON.curie('filtSampleCond'),
                      model_uri=NEON.filtSampleCond, domain=None, range=Optional[str])

slots.filtSampleFate = Slot(uri=NEON.filtSampleFate, name="filtSampleFate", curie=NEON.curie('filtSampleFate'),
                      model_uri=NEON.filtSampleFate, domain=None, range=Optional[str])

slots.filtSampleID = Slot(uri=NEON.filtSampleID, name="filtSampleID", curie=NEON.curie('filtSampleID'),
                      model_uri=NEON.filtSampleID, domain=None, range=Optional[str])

slots.pcnSampleCode = Slot(uri=NEON.pcnSampleCode, name="pcnSampleCode", curie=NEON.curie('pcnSampleCode'),
                      model_uri=NEON.pcnSampleCode, domain=None, range=Optional[str])

slots.pcnSampleCond = Slot(uri=NEON.pcnSampleCond, name="pcnSampleCond", curie=NEON.curie('pcnSampleCond'),
                      model_uri=NEON.pcnSampleCond, domain=None, range=Optional[str])

slots.pcnSampleFate = Slot(uri=NEON.pcnSampleFate, name="pcnSampleFate", curie=NEON.curie('pcnSampleFate'),
                      model_uri=NEON.pcnSampleFate, domain=None, range=Optional[str])

slots.pcnSampleID = Slot(uri=NEON.pcnSampleID, name="pcnSampleID", curie=NEON.curie('pcnSampleID'),
                      model_uri=NEON.pcnSampleID, domain=None, range=Optional[str])

slots.rawSampleCode = Slot(uri=NEON.rawSampleCode, name="rawSampleCode", curie=NEON.curie('rawSampleCode'),
                      model_uri=NEON.rawSampleCode, domain=None, range=Optional[str])

slots.rawSampleCond = Slot(uri=NEON.rawSampleCond, name="rawSampleCond", curie=NEON.curie('rawSampleCond'),
                      model_uri=NEON.rawSampleCond, domain=None, range=Optional[str])

slots.rawSampleFate = Slot(uri=NEON.rawSampleFate, name="rawSampleFate", curie=NEON.curie('rawSampleFate'),
                      model_uri=NEON.rawSampleFate, domain=None, range=Optional[str])

slots.rawSampleID = Slot(uri=NEON.rawSampleID, name="rawSampleID", curie=NEON.curie('rawSampleID'),
                      model_uri=NEON.rawSampleID, domain=None, range=Optional[str])

slots.shipmentLateTest = Slot(uri=NEON.shipmentLateTest, name="shipmentLateTest", curie=NEON.curie('shipmentLateTest'),
                      model_uri=NEON.shipmentLateTest, domain=None, range=Optional[float])

slots.absorbancePrecision = Slot(uri=NEON.absorbancePrecision, name="absorbancePrecision", curie=NEON.curie('absorbancePrecision'),
                      model_uri=NEON.absorbancePrecision, domain=None, range=Optional[str])

slots.groundwaterFieldDataQF = Slot(uri=NEON.groundwaterFieldDataQF, name="groundwaterFieldDataQF", curie=NEON.curie('groundwaterFieldDataQF'),
                      model_uri=NEON.groundwaterFieldDataQF, domain=None, range=Optional[str])

slots.measurementDate = Slot(uri=NEON.measurementDate, name="measurementDate", curie=NEON.curie('measurementDate'),
                      model_uri=NEON.measurementDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.measurementDepth = Slot(uri=NEON.measurementDepth, name="measurementDepth", curie=NEON.curie('measurementDepth'),
                      model_uri=NEON.measurementDepth, domain=None, range=Optional[float])

slots.pumpStartTime = Slot(uri=NEON.pumpStartTime, name="pumpStartTime", curie=NEON.curie('pumpStartTime'),
                      model_uri=NEON.pumpStartTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.totalWellDepth = Slot(uri=NEON.totalWellDepth, name="totalWellDepth", curie=NEON.curie('totalWellDepth'),
                      model_uri=NEON.totalWellDepth, domain=None, range=Optional[float])

slots.volume3Wells = Slot(uri=NEON.volume3Wells, name="volume3Wells", curie=NEON.curie('volume3Wells'),
                      model_uri=NEON.volume3Wells, domain=None, range=Optional[float])

slots.waterColumnHeight = Slot(uri=NEON.waterColumnHeight, name="waterColumnHeight", curie=NEON.curie('waterColumnHeight'),
                      model_uri=NEON.waterColumnHeight, domain=None, range=Optional[float])

slots.wellRedeveloped = Slot(uri=NEON.wellRedeveloped, name="wellRedeveloped", curie=NEON.curie('wellRedeveloped'),
                      model_uri=NEON.wellRedeveloped, domain=None, range=Optional[str])

slots.wellRedevelopedDate = Slot(uri=NEON.wellRedevelopedDate, name="wellRedevelopedDate", curie=NEON.curie('wellRedevelopedDate'),
                      model_uri=NEON.wellRedevelopedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.adultCount = Slot(uri=NEON.adultCount, name="adultCount", curie=NEON.curie('adultCount'),
                      model_uri=NEON.adultCount, domain=None, range=Optional[str])

slots.controlType = Slot(uri=NEON.controlType, name="controlType", curie=NEON.curie('controlType'),
                      model_uri=NEON.controlType, domain=None, range=Optional[str])

slots.criteriaMet = Slot(uri=NEON.criteriaMet, name="criteriaMet", curie=NEON.curie('criteriaMet'),
                      model_uri=NEON.criteriaMet, domain=None, range=Optional[str])

slots.identificationProtocolVersion = Slot(uri=NEON.identificationProtocolVersion, name="identificationProtocolVersion", curie=NEON.curie('identificationProtocolVersion'),
                      model_uri=NEON.identificationProtocolVersion, domain=None, range=Optional[str])

slots.larvaCount = Slot(uri=NEON.larvaCount, name="larvaCount", curie=NEON.curie('larvaCount'),
                      model_uri=NEON.larvaCount, domain=None, range=Optional[str])

slots.nymphCount = Slot(uri=NEON.nymphCount, name="nymphCount", curie=NEON.curie('nymphCount'),
                      model_uri=NEON.nymphCount, domain=None, range=Optional[str])

slots.samplingMethod = Slot(uri=NEON.samplingMethod, name="samplingMethod", curie=NEON.curie('samplingMethod'),
                      model_uri=NEON.samplingMethod, domain=None, range=Optional[str])

slots.analysisMagnification = Slot(uri=NEON.analysisMagnification, name="analysisMagnification", curie=NEON.curie('analysisMagnification'),
                      model_uri=NEON.analysisMagnification, domain=None, range=Optional[str])

slots.analysisVolume = Slot(uri=NEON.analysisVolume, name="analysisVolume", curie=NEON.curie('analysisVolume'),
                      model_uri=NEON.analysisVolume, domain=None, range=Optional[float])

slots.archiveFilteredSampleVolume = Slot(uri=NEON.archiveFilteredSampleVolume, name="archiveFilteredSampleVolume", curie=NEON.curie('archiveFilteredSampleVolume'),
                      model_uri=NEON.archiveFilteredSampleVolume, domain=None, range=Optional[str])

slots.archiveSampleCode = Slot(uri=NEON.archiveSampleCode, name="archiveSampleCode", curie=NEON.curie('archiveSampleCode'),
                      model_uri=NEON.archiveSampleCode, domain=None, range=Optional[str])

slots.archiveSampleCond = Slot(uri=NEON.archiveSampleCond, name="archiveSampleCond", curie=NEON.curie('archiveSampleCond'),
                      model_uri=NEON.archiveSampleCond, domain=None, range=Optional[str])

slots.batchReferenceCount = Slot(uri=NEON.batchReferenceCount, name="batchReferenceCount", curie=NEON.curie('batchReferenceCount'),
                      model_uri=NEON.batchReferenceCount, domain=None, range=Optional[str])

slots.cellCountLabSampleMedium = Slot(uri=NEON.cellCountLabSampleMedium, name="cellCountLabSampleMedium", curie=NEON.curie('cellCountLabSampleMedium'),
                      model_uri=NEON.cellCountLabSampleMedium, domain=None, range=Optional[str])

slots.cellCountMethod = Slot(uri=NEON.cellCountMethod, name="cellCountMethod", curie=NEON.curie('cellCountMethod'),
                      model_uri=NEON.cellCountMethod, domain=None, range=Optional[str])

slots.cellCountPreservantVolume = Slot(uri=NEON.cellCountPreservantVolume, name="cellCountPreservantVolume", curie=NEON.curie('cellCountPreservantVolume'),
                      model_uri=NEON.cellCountPreservantVolume, domain=None, range=Optional[float])

slots.cellCountSampleCond = Slot(uri=NEON.cellCountSampleCond, name="cellCountSampleCond", curie=NEON.curie('cellCountSampleCond'),
                      model_uri=NEON.cellCountSampleCond, domain=None, range=Optional[str])

slots.cellCountSampleVolume = Slot(uri=NEON.cellCountSampleVolume, name="cellCountSampleVolume", curie=NEON.curie('cellCountSampleVolume'),
                      model_uri=NEON.cellCountSampleVolume, domain=None, range=Optional[float])

slots.countStandardDeviation = Slot(uri=NEON.countStandardDeviation, name="countStandardDeviation", curie=NEON.curie('countStandardDeviation'),
                      model_uri=NEON.countStandardDeviation, domain=None, range=Optional[float])

slots.enumerationDifference = Slot(uri=NEON.enumerationDifference, name="enumerationDifference", curie=NEON.curie('enumerationDifference'),
                      model_uri=NEON.enumerationDifference, domain=None, range=Optional[float])

slots.longTermEnumerationDifference = Slot(uri=NEON.longTermEnumerationDifference, name="longTermEnumerationDifference", curie=NEON.curie('longTermEnumerationDifference'),
                      model_uri=NEON.longTermEnumerationDifference, domain=None, range=Optional[float])

slots.geneticFilteredSampleVolume = Slot(uri=NEON.geneticFilteredSampleVolume, name="geneticFilteredSampleVolume", curie=NEON.curie('geneticFilteredSampleVolume'),
                      model_uri=NEON.geneticFilteredSampleVolume, domain=None, range=Optional[str])

slots.geneticLabSampleMedium = Slot(uri=NEON.geneticLabSampleMedium, name="geneticLabSampleMedium", curie=NEON.curie('geneticLabSampleMedium'),
                      model_uri=NEON.geneticLabSampleMedium, domain=None, range=Optional[str])

slots.geneticSampleCond = Slot(uri=NEON.geneticSampleCond, name="geneticSampleCond", curie=NEON.curie('geneticSampleCond'),
                      model_uri=NEON.geneticSampleCond, domain=None, range=Optional[str])

slots.numberOfFieldsAnalyzed = Slot(uri=NEON.numberOfFieldsAnalyzed, name="numberOfFieldsAnalyzed", curie=NEON.curie('numberOfFieldsAnalyzed'),
                      model_uri=NEON.numberOfFieldsAnalyzed, domain=None, range=Optional[str])

slots.rawMicrobialAbundance = Slot(uri=NEON.rawMicrobialAbundance, name="rawMicrobialAbundance", curie=NEON.curie('rawMicrobialAbundance'),
                      model_uri=NEON.rawMicrobialAbundance, domain=None, range=Optional[str])

slots.referenceImageCount = Slot(uri=NEON.referenceImageCount, name="referenceImageCount", curie=NEON.curie('referenceImageCount'),
                      model_uri=NEON.referenceImageCount, domain=None, range=Optional[str])

slots.referenceImageID = Slot(uri=NEON.referenceImageID, name="referenceImageID", curie=NEON.curie('referenceImageID'),
                      model_uri=NEON.referenceImageID, domain=None, range=Optional[str])

slots.totalCellCount = Slot(uri=NEON.totalCellCount, name="totalCellCount", curie=NEON.curie('totalCellCount'),
                      model_uri=NEON.totalCellCount, domain=None, range=Optional[str])

slots.boatWetMassSum = Slot(uri=NEON.boatWetMassSum, name="boatWetMassSum", curie=NEON.curie('boatWetMassSum'),
                      model_uri=NEON.boatWetMassSum, domain=None, range=Optional[float])

slots.morphospeciesCreatedDate = Slot(uri=NEON.morphospeciesCreatedDate, name="morphospeciesCreatedDate", curie=NEON.curie('morphospeciesCreatedDate'),
                      model_uri=NEON.morphospeciesCreatedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.morphospeciesResolved = Slot(uri=NEON.morphospeciesResolved, name="morphospeciesResolved", curie=NEON.curie('morphospeciesResolved'),
                      model_uri=NEON.morphospeciesResolved, domain=None, range=Optional[str])

slots.morphospeciesResolvedDate = Slot(uri=NEON.morphospeciesResolvedDate, name="morphospeciesResolvedDate", curie=NEON.curie('morphospeciesResolvedDate'),
                      model_uri=NEON.morphospeciesResolvedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.perBottleSampleVolume = Slot(uri=NEON.perBottleSampleVolume, name="perBottleSampleVolume", curie=NEON.curie('perBottleSampleVolume'),
                      model_uri=NEON.perBottleSampleVolume, domain=None, range=Optional[float])

slots.pointNumber = Slot(uri=NEON.pointNumber, name="pointNumber", curie=NEON.curie('pointNumber'),
                      model_uri=NEON.pointNumber, domain=None, range=Optional[str])

slots.substrate = Slot(uri=NEON.substrate, name="substrate", curie=NEON.curie('substrate'),
                      model_uri=NEON.substrate, domain=None, range=Optional[str])

slots.transectDistance = Slot(uri=NEON.transectDistance, name="transectDistance", curie=NEON.curie('transectDistance'),
                      model_uri=NEON.transectDistance, domain=None, range=Optional[float])

slots.archiveFate = Slot(uri=NEON.archiveFate, name="archiveFate", curie=NEON.curie('archiveFate'),
                      model_uri=NEON.archiveFate, domain=None, range=Optional[str])

slots.archiveIDCode = Slot(uri=NEON.archiveIDCode, name="archiveIDCode", curie=NEON.curie('archiveIDCode'),
                      model_uri=NEON.archiveIDCode, domain=None, range=Optional[str])

slots.depthIncrementCode = Slot(uri=NEON.depthIncrementCode, name="depthIncrementCode", curie=NEON.curie('depthIncrementCode'),
                      model_uri=NEON.depthIncrementCode, domain=None, range=Optional[str])

slots.depthIncrementFate = Slot(uri=NEON.depthIncrementFate, name="depthIncrementFate", curie=NEON.curie('depthIncrementFate'),
                      model_uri=NEON.depthIncrementFate, domain=None, range=Optional[str])

slots.pitCode = Slot(uri=NEON.pitCode, name="pitCode", curie=NEON.curie('pitCode'),
                      model_uri=NEON.pitCode, domain=None, range=Optional[str])

slots.pitFate = Slot(uri=NEON.pitFate, name="pitFate", curie=NEON.curie('pitFate'),
                      model_uri=NEON.pitFate, domain=None, range=Optional[str])

slots.pitProfileClassCode = Slot(uri=NEON.pitProfileClassCode, name="pitProfileClassCode", curie=NEON.curie('pitProfileClassCode'),
                      model_uri=NEON.pitProfileClassCode, domain=None, range=Optional[str])

slots.pitProfileClassFate = Slot(uri=NEON.pitProfileClassFate, name="pitProfileClassFate", curie=NEON.curie('pitProfileClassFate'),
                      model_uri=NEON.pitProfileClassFate, domain=None, range=Optional[str])

slots.pitProfileClassID = Slot(uri=NEON.pitProfileClassID, name="pitProfileClassID", curie=NEON.curie('pitProfileClassID'),
                      model_uri=NEON.pitProfileClassID, domain=None, range=Optional[str])

slots.pitProfileCode = Slot(uri=NEON.pitProfileCode, name="pitProfileCode", curie=NEON.curie('pitProfileCode'),
                      model_uri=NEON.pitProfileCode, domain=None, range=Optional[str])

slots.pitProfileFate = Slot(uri=NEON.pitProfileFate, name="pitProfileFate", curie=NEON.curie('pitProfileFate'),
                      model_uri=NEON.pitProfileFate, domain=None, range=Optional[str])

slots.equilibratedAirSampleCode = Slot(uri=NEON.equilibratedAirSampleCode, name="equilibratedAirSampleCode", curie=NEON.curie('equilibratedAirSampleCode'),
                      model_uri=NEON.equilibratedAirSampleCode, domain=None, range=Optional[str])

slots.equilibratedAirSampleCond = Slot(uri=NEON.equilibratedAirSampleCond, name="equilibratedAirSampleCond", curie=NEON.curie('equilibratedAirSampleCond'),
                      model_uri=NEON.equilibratedAirSampleCond, domain=None, range=Optional[str])

slots.equilibratedAirSampleFate = Slot(uri=NEON.equilibratedAirSampleFate, name="equilibratedAirSampleFate", curie=NEON.curie('equilibratedAirSampleFate'),
                      model_uri=NEON.equilibratedAirSampleFate, domain=None, range=Optional[str])

slots.referenceAirSampleCode = Slot(uri=NEON.referenceAirSampleCode, name="referenceAirSampleCode", curie=NEON.curie('referenceAirSampleCode'),
                      model_uri=NEON.referenceAirSampleCode, domain=None, range=Optional[str])

slots.referenceAirSampleCond = Slot(uri=NEON.referenceAirSampleCond, name="referenceAirSampleCond", curie=NEON.curie('referenceAirSampleCond'),
                      model_uri=NEON.referenceAirSampleCond, domain=None, range=Optional[str])

slots.referenceAirSampleFate = Slot(uri=NEON.referenceAirSampleFate, name="referenceAirSampleFate", curie=NEON.curie('referenceAirSampleFate'),
                      model_uri=NEON.referenceAirSampleFate, domain=None, range=Optional[str])

slots.sdgAirDataQF = Slot(uri=NEON.sdgAirDataQF, name="sdgAirDataQF", curie=NEON.curie('sdgAirDataQF'),
                      model_uri=NEON.sdgAirDataQF, domain=None, range=Optional[str])

slots.sdgExternalLabDataQF = Slot(uri=NEON.sdgExternalLabDataQF, name="sdgExternalLabDataQF", curie=NEON.curie('sdgExternalLabDataQF'),
                      model_uri=NEON.sdgExternalLabDataQF, domain=None, range=Optional[str])

slots.sdgFieldDataQF = Slot(uri=NEON.sdgFieldDataQF, name="sdgFieldDataQF", curie=NEON.curie('sdgFieldDataQF'),
                      model_uri=NEON.sdgFieldDataQF, domain=None, range=Optional[str])

slots.sdgProcessDataQF = Slot(uri=NEON.sdgProcessDataQF, name="sdgProcessDataQF", curie=NEON.curie('sdgProcessDataQF'),
                      model_uri=NEON.sdgProcessDataQF, domain=None, range=Optional[str])

slots.waterSampleCode = Slot(uri=NEON.waterSampleCode, name="waterSampleCode", curie=NEON.curie('waterSampleCode'),
                      model_uri=NEON.waterSampleCode, domain=None, range=Optional[str])

slots.waterSampleFate = Slot(uri=NEON.waterSampleFate, name="waterSampleFate", curie=NEON.curie('waterSampleFate'),
                      model_uri=NEON.waterSampleFate, domain=None, range=Optional[str])

slots.analyteConcentration = Slot(uri=NEON.analyteConcentration, name="analyteConcentration", curie=NEON.curie('analyteConcentration'),
                      model_uri=NEON.analyteConcentration, domain=None, range=Optional[float])

slots.percentFilterAnalyzed = Slot(uri=NEON.percentFilterAnalyzed, name="percentFilterAnalyzed", curie=NEON.curie('percentFilterAnalyzed'),
                      model_uri=NEON.percentFilterAnalyzed, domain=None, range=Optional[float])

slots.qaType = Slot(uri=NEON.qaType, name="qaType", curie=NEON.curie('qaType'),
                      model_uri=NEON.qaType, domain=None, range=Optional[str])

slots.replicate = Slot(uri=NEON.replicate, name="replicate", curie=NEON.curie('replicate'),
                      model_uri=NEON.replicate, domain=None, range=Optional[str])

slots.isotopeH2OSampleCond = Slot(uri=NEON.isotopeH2OSampleCond, name="isotopeH2OSampleCond", curie=NEON.curie('isotopeH2OSampleCond'),
                      model_uri=NEON.isotopeH2OSampleCond, domain=None, range=Optional[str])

slots.isotopePOMSampleCond = Slot(uri=NEON.isotopePOMSampleCond, name="isotopePOMSampleCond", curie=NEON.curie('isotopePOMSampleCond'),
                      model_uri=NEON.isotopePOMSampleCond, domain=None, range=Optional[str])

slots.isotopePOMRep2SampleCond = Slot(uri=NEON.isotopePOMRep2SampleCond, name="isotopePOMRep2SampleCond", curie=NEON.curie('isotopePOMRep2SampleCond'),
                      model_uri=NEON.isotopePOMRep2SampleCond, domain=None, range=Optional[str])

slots.isotopeH2OExternalLabTest = Slot(uri=NEON.isotopeH2OExternalLabTest, name="isotopeH2OExternalLabTest", curie=NEON.curie('isotopeH2OExternalLabTest'),
                      model_uri=NEON.isotopeH2OExternalLabTest, domain=None, range=Optional[str])

slots.caco3Conc = Slot(uri=NEON.caco3Conc, name="caco3Conc", curie=NEON.curie('caco3Conc'),
                      model_uri=NEON.caco3Conc, domain=None, range=Optional[float])

slots.carbonTot = Slot(uri=NEON.carbonTot, name="carbonTot", curie=NEON.curie('carbonTot'),
                      model_uri=NEON.carbonTot, domain=None, range=Optional[float])

slots.estimatedOC = Slot(uri=NEON.estimatedOC, name="estimatedOC", curie=NEON.curie('estimatedOC'),
                      model_uri=NEON.estimatedOC, domain=None, range=Optional[float])

slots.gypsumConc = Slot(uri=NEON.gypsumConc, name="gypsumConc", curie=NEON.curie('gypsumConc'),
                      model_uri=NEON.gypsumConc, domain=None, range=Optional[float])

slots.nitrogenTot = Slot(uri=NEON.nitrogenTot, name="nitrogenTot", curie=NEON.curie('nitrogenTot'),
                      model_uri=NEON.nitrogenTot, domain=None, range=Optional[float])

slots.sulfurTot = Slot(uri=NEON.sulfurTot, name="sulfurTot", curie=NEON.curie('sulfurTot'),
                      model_uri=NEON.sulfurTot, domain=None, range=Optional[float])

slots.waterSatx = Slot(uri=NEON.waterSatx, name="waterSatx", curie=NEON.curie('waterSatx'),
                      model_uri=NEON.waterSatx, domain=None, range=Optional[float])

slots.biogeoCode = Slot(uri=NEON.biogeoCode, name="biogeoCode", curie=NEON.curie('biogeoCode'),
                      model_uri=NEON.biogeoCode, domain=None, range=Optional[str])

slots.biogeoNrcsFate = Slot(uri=NEON.biogeoNrcsFate, name="biogeoNrcsFate", curie=NEON.curie('biogeoNrcsFate'),
                      model_uri=NEON.biogeoNrcsFate, domain=None, range=Optional[str])

slots.bulkDensCode = Slot(uri=NEON.bulkDensCode, name="bulkDensCode", curie=NEON.curie('bulkDensCode'),
                      model_uri=NEON.bulkDensCode, domain=None, range=Optional[str])

slots.bulkDensNrcsFate = Slot(uri=NEON.bulkDensNrcsFate, name="bulkDensNrcsFate", curie=NEON.curie('bulkDensNrcsFate'),
                      model_uri=NEON.bulkDensNrcsFate, domain=None, range=Optional[str])

slots.carbonateClay = Slot(uri=NEON.carbonateClay, name="carbonateClay", curie=NEON.curie('carbonateClay'),
                      model_uri=NEON.carbonateClay, domain=None, range=Optional[float])

slots.clayFineContent = Slot(uri=NEON.clayFineContent, name="clayFineContent", curie=NEON.curie('clayFineContent'),
                      model_uri=NEON.clayFineContent, domain=None, range=Optional[float])

slots.clayTotal = Slot(uri=NEON.clayTotal, name="clayTotal", curie=NEON.curie('clayTotal'),
                      model_uri=NEON.clayTotal, domain=None, range=Optional[float])

slots.horizonCode = Slot(uri=NEON.horizonCode, name="horizonCode", curie=NEON.curie('horizonCode'),
                      model_uri=NEON.horizonCode, domain=None, range=Optional[str])

slots.horizonFate = Slot(uri=NEON.horizonFate, name="horizonFate", curie=NEON.curie('horizonFate'),
                      model_uri=NEON.horizonFate, domain=None, range=Optional[str])

slots.sandCoarseContent = Slot(uri=NEON.sandCoarseContent, name="sandCoarseContent", curie=NEON.curie('sandCoarseContent'),
                      model_uri=NEON.sandCoarseContent, domain=None, range=Optional[float])

slots.sandFineContent = Slot(uri=NEON.sandFineContent, name="sandFineContent", curie=NEON.curie('sandFineContent'),
                      model_uri=NEON.sandFineContent, domain=None, range=Optional[float])

slots.sandMediumContent = Slot(uri=NEON.sandMediumContent, name="sandMediumContent", curie=NEON.curie('sandMediumContent'),
                      model_uri=NEON.sandMediumContent, domain=None, range=Optional[float])

slots.sandTotal = Slot(uri=NEON.sandTotal, name="sandTotal", curie=NEON.curie('sandTotal'),
                      model_uri=NEON.sandTotal, domain=None, range=Optional[float])

slots.sandVeryCoarseContent = Slot(uri=NEON.sandVeryCoarseContent, name="sandVeryCoarseContent", curie=NEON.curie('sandVeryCoarseContent'),
                      model_uri=NEON.sandVeryCoarseContent, domain=None, range=Optional[float])

slots.sandVeryFineContent = Slot(uri=NEON.sandVeryFineContent, name="sandVeryFineContent", curie=NEON.curie('sandVeryFineContent'),
                      model_uri=NEON.sandVeryFineContent, domain=None, range=Optional[float])

slots.siltCoarseContent = Slot(uri=NEON.siltCoarseContent, name="siltCoarseContent", curie=NEON.curie('siltCoarseContent'),
                      model_uri=NEON.siltCoarseContent, domain=None, range=Optional[float])

slots.siltFineContent = Slot(uri=NEON.siltFineContent, name="siltFineContent", curie=NEON.curie('siltFineContent'),
                      model_uri=NEON.siltFineContent, domain=None, range=Optional[float])

slots.siltTotal = Slot(uri=NEON.siltTotal, name="siltTotal", curie=NEON.curie('siltTotal'),
                      model_uri=NEON.siltTotal, domain=None, range=Optional[float])

slots.associatedSpecimens = Slot(uri=NEON.associatedSpecimens, name="associatedSpecimens", curie=NEON.curie('associatedSpecimens'),
                      model_uri=NEON.associatedSpecimens, domain=None, range=Optional[str])

slots.associatedTaxa = Slot(uri=NEON.associatedTaxa, name="associatedTaxa", curie=NEON.curie('associatedTaxa'),
                      model_uri=NEON.associatedTaxa, domain=None, range=Optional[str])

slots.dnaBarcoded = Slot(uri=NEON.dnaBarcoded, name="dnaBarcoded", curie=NEON.curie('dnaBarcoded'),
                      model_uri=NEON.dnaBarcoded, domain=None, range=Optional[str])

slots.externalURLs = Slot(uri=NEON.externalURLs, name="externalURLs", curie=NEON.curie('externalURLs'),
                      model_uri=NEON.externalURLs, domain=None, range=Optional[str])

slots.individualCode = Slot(uri=NEON.individualCode, name="individualCode", curie=NEON.curie('individualCode'),
                      model_uri=NEON.individualCode, domain=None, range=Optional[str])

slots.individualFate = Slot(uri=NEON.individualFate, name="individualFate", curie=NEON.curie('individualFate'),
                      model_uri=NEON.individualFate, domain=None, range=Optional[str])

slots.sampleStatus = Slot(uri=NEON.sampleStatus, name="sampleStatus", curie=NEON.curie('sampleStatus'),
                      model_uri=NEON.sampleStatus, domain=None, range=Optional[str])

slots.testingVialIDCode = Slot(uri=NEON.testingVialIDCode, name="testingVialIDCode", curie=NEON.curie('testingVialIDCode'),
                      model_uri=NEON.testingVialIDCode, domain=None, range=Optional[str])

slots.testingVialIDFate = Slot(uri=NEON.testingVialIDFate, name="testingVialIDFate", curie=NEON.curie('testingVialIDFate'),
                      model_uri=NEON.testingVialIDFate, domain=None, range=Optional[str])

slots.wellCoordinates = Slot(uri=NEON.wellCoordinates, name="wellCoordinates", curie=NEON.curie('wellCoordinates'),
                      model_uri=NEON.wellCoordinates, domain=None, range=Optional[str])

slots.nativeStatusCode = Slot(uri=NEON.nativeStatusCode, name="nativeStatusCode", curie=NEON.curie('nativeStatusCode'),
                      model_uri=NEON.nativeStatusCode, domain=None, range=Optional[str])

slots.taxonRaw = Slot(uri=NEON.taxonRaw, name="taxonRaw", curie=NEON.curie('taxonRaw'),
                      model_uri=NEON.taxonRaw, domain=None, range=Optional[str])

slots.bloodSampleBarcode = Slot(uri=NEON.bloodSampleBarcode, name="bloodSampleBarcode", curie=NEON.curie('bloodSampleBarcode'),
                      model_uri=NEON.bloodSampleBarcode, domain=None, range=Optional[str])

slots.earSampleBarcode = Slot(uri=NEON.earSampleBarcode, name="earSampleBarcode", curie=NEON.curie('earSampleBarcode'),
                      model_uri=NEON.earSampleBarcode, domain=None, range=Optional[str])

slots.fecalSampleBarcode = Slot(uri=NEON.fecalSampleBarcode, name="fecalSampleBarcode", curie=NEON.curie('fecalSampleBarcode'),
                      model_uri=NEON.fecalSampleBarcode, domain=None, range=Optional[str])

slots.hairSampleBarcode = Slot(uri=NEON.hairSampleBarcode, name="hairSampleBarcode", curie=NEON.curie('hairSampleBarcode'),
                      model_uri=NEON.hairSampleBarcode, domain=None, range=Optional[str])

slots.voucherSampleBarcode = Slot(uri=NEON.voucherSampleBarcode, name="voucherSampleBarcode", curie=NEON.curie('voucherSampleBarcode'),
                      model_uri=NEON.voucherSampleBarcode, domain=None, range=Optional[str])

slots.bloodSampleFate = Slot(uri=NEON.bloodSampleFate, name="bloodSampleFate", curie=NEON.curie('bloodSampleFate'),
                      model_uri=NEON.bloodSampleFate, domain=None, range=Optional[str])

slots.earSampleFate = Slot(uri=NEON.earSampleFate, name="earSampleFate", curie=NEON.curie('earSampleFate'),
                      model_uri=NEON.earSampleFate, domain=None, range=Optional[str])

slots.fecalSampleFate = Slot(uri=NEON.fecalSampleFate, name="fecalSampleFate", curie=NEON.curie('fecalSampleFate'),
                      model_uri=NEON.fecalSampleFate, domain=None, range=Optional[str])

slots.hairSampleFate = Slot(uri=NEON.hairSampleFate, name="hairSampleFate", curie=NEON.curie('hairSampleFate'),
                      model_uri=NEON.hairSampleFate, domain=None, range=Optional[str])

slots.voucherSampleFate = Slot(uri=NEON.voucherSampleFate, name="voucherSampleFate", curie=NEON.curie('voucherSampleFate'),
                      model_uri=NEON.voucherSampleFate, domain=None, range=Optional[str])

slots.identifier = Slot(uri=NEON.identifier, name="identifier", curie=NEON.curie('identifier'),
                      model_uri=NEON.identifier, domain=None, range=Optional[str])

slots.identifierEmail = Slot(uri=NEON.identifierEmail, name="identifierEmail", curie=NEON.curie('identifierEmail'),
                      model_uri=NEON.identifierEmail, domain=None, range=Optional[str])

slots.identifierInstitution = Slot(uri=NEON.identifierInstitution, name="identifierInstitution", curie=NEON.curie('identifierInstitution'),
                      model_uri=NEON.identifierInstitution, domain=None, range=Optional[str])

slots.reproduction = Slot(uri=NEON.reproduction, name="reproduction", curie=NEON.curie('reproduction'),
                      model_uri=NEON.reproduction, domain=None, range=Optional[str])

slots.hairSampleContents = Slot(uri=NEON.hairSampleContents, name="hairSampleContents", curie=NEON.curie('hairSampleContents'),
                      model_uri=NEON.hairSampleContents, domain=None, range=Optional[str])

slots.altCoordinateSource = Slot(uri=NEON.altCoordinateSource, name="altCoordinateSource", curie=NEON.curie('altCoordinateSource'),
                      model_uri=NEON.altCoordinateSource, domain=None, range=Optional[str])

slots.altElevation = Slot(uri=NEON.altElevation, name="altElevation", curie=NEON.curie('altElevation'),
                      model_uri=NEON.altElevation, domain=None, range=Optional[float])

slots.altElevationUncertainty = Slot(uri=NEON.altElevationUncertainty, name="altElevationUncertainty", curie=NEON.curie('altElevationUncertainty'),
                      model_uri=NEON.altElevationUncertainty, domain=None, range=Optional[float])

slots.habitatDescription = Slot(uri=NEON.habitatDescription, name="habitatDescription", curie=NEON.curie('habitatDescription'),
                      model_uri=NEON.habitatDescription, domain=None, range=Optional[str])

slots.tagCode = Slot(uri=NEON.tagCode, name="tagCode", curie=NEON.curie('tagCode'),
                      model_uri=NEON.tagCode, domain=None, range=Optional[str])

slots.voucherSampleCode = Slot(uri=NEON.voucherSampleCode, name="voucherSampleCode", curie=NEON.curie('voucherSampleCode'),
                      model_uri=NEON.voucherSampleCode, domain=None, range=Optional[str])

slots.additionalSpecies = Slot(uri=NEON.additionalSpecies, name="additionalSpecies", curie=NEON.curie('additionalSpecies'),
                      model_uri=NEON.additionalSpecies, domain=None, range=Optional[str])

slots.plantCondition = Slot(uri=NEON.plantCondition, name="plantCondition", curie=NEON.curie('plantCondition'),
                      model_uri=NEON.plantCondition, domain=None, range=Optional[str])

slots.tagFate = Slot(uri=NEON.tagFate, name="tagFate", curie=NEON.curie('tagFate'),
                      model_uri=NEON.tagFate, domain=None, range=Optional[str])

slots.untaggedPlantID = Slot(uri=NEON.untaggedPlantID, name="untaggedPlantID", curie=NEON.curie('untaggedPlantID'),
                      model_uri=NEON.untaggedPlantID, domain=None, range=Optional[str])

slots.editedDate = Slot(uri=NEON.editedDate, name="editedDate", curie=NEON.curie('editedDate'),
                      model_uri=NEON.editedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.gpsDatafile = Slot(uri=NEON.gpsDatafile, name="gpsDatafile", curie=NEON.curie('gpsDatafile'),
                      model_uri=NEON.gpsDatafile, domain=None, range=Optional[str])

slots.individualBarcode = Slot(uri=NEON.individualBarcode, name="individualBarcode", curie=NEON.curie('individualBarcode'),
                      model_uri=NEON.individualBarcode, domain=None, range=Optional[str])

slots.logCount = Slot(uri=NEON.logCount, name="logCount", curie=NEON.curie('logCount'),
                      model_uri=NEON.logCount, domain=None, range=Optional[float])

slots.patchSize = Slot(uri=NEON.patchSize, name="patchSize", curie=NEON.curie('patchSize'),
                      model_uri=NEON.patchSize, domain=None, range=Optional[float])

slots.sampleCoordinateUncertainty = Slot(uri=NEON.sampleCoordinateUncertainty, name="sampleCoordinateUncertainty", curie=NEON.curie('sampleCoordinateUncertainty'),
                      model_uri=NEON.sampleCoordinateUncertainty, domain=None, range=Optional[float])

slots.sampleElevation = Slot(uri=NEON.sampleElevation, name="sampleElevation", curie=NEON.curie('sampleElevation'),
                      model_uri=NEON.sampleElevation, domain=None, range=Optional[float])

slots.sampleElevationUncertainty = Slot(uri=NEON.sampleElevationUncertainty, name="sampleElevationUncertainty", curie=NEON.curie('sampleElevationUncertainty'),
                      model_uri=NEON.sampleElevationUncertainty, domain=None, range=Optional[float])

slots.sampleLatitude = Slot(uri=NEON.sampleLatitude, name="sampleLatitude", curie=NEON.curie('sampleLatitude'),
                      model_uri=NEON.sampleLatitude, domain=None, range=Optional[float])

slots.sampleLongitude = Slot(uri=NEON.sampleLongitude, name="sampleLongitude", curie=NEON.curie('sampleLongitude'),
                      model_uri=NEON.sampleLongitude, domain=None, range=Optional[float])

slots.subtypeSpecification = Slot(uri=NEON.subtypeSpecification, name="subtypeSpecification", curie=NEON.curie('subtypeSpecification'),
                      model_uri=NEON.subtypeSpecification, domain=None, range=Optional[str])

slots.vstTagID = Slot(uri=NEON.vstTagID, name="vstTagID", curie=NEON.curie('vstTagID'),
                      model_uri=NEON.vstTagID, domain=None, range=Optional[str])

slots.sampleGeodeticDatum = Slot(uri=NEON.sampleGeodeticDatum, name="sampleGeodeticDatum", curie=NEON.curie('sampleGeodeticDatum'),
                      model_uri=NEON.sampleGeodeticDatum, domain=None, range=Optional[str])

slots.archiveVialID = Slot(uri=NEON.archiveVialID, name="archiveVialID", curie=NEON.curie('archiveVialID'),
                      model_uri=NEON.archiveVialID, domain=None, range=Optional[str])

slots.collectionCode = Slot(uri=NEON.collectionCode, name="collectionCode", curie=NEON.curie('collectionCode'),
                      model_uri=NEON.collectionCode, domain=None, range=Optional[str])

slots.photographedBy = Slot(uri=NEON.photographedBy, name="photographedBy", curie=NEON.curie('photographedBy'),
                      model_uri=NEON.photographedBy, domain=None, range=Optional[str])

slots.photoView = Slot(uri=NEON.photoView, name="photoView", curie=NEON.curie('photoView'),
                      model_uri=NEON.photoView, domain=None, range=Optional[str])

slots.subsampleIDList = Slot(uri=NEON.subsampleIDList, name="subsampleIDList", curie=NEON.curie('subsampleIDList'),
                      model_uri=NEON.subsampleIDList, domain=None, range=Optional[str])

slots.backgroundFieldCondDataQF = Slot(uri=NEON.backgroundFieldCondDataQF, name="backgroundFieldCondDataQF", curie=NEON.curie('backgroundFieldCondDataQF'),
                      model_uri=NEON.backgroundFieldCondDataQF, domain=None, range=Optional[str])

slots.backgroundFieldSaltDataQF = Slot(uri=NEON.backgroundFieldSaltDataQF, name="backgroundFieldSaltDataQF", curie=NEON.curie('backgroundFieldSaltDataQF'),
                      model_uri=NEON.backgroundFieldSaltDataQF, domain=None, range=Optional[str])

slots.betweenLoggersDist = Slot(uri=NEON.betweenLoggersDist, name="betweenLoggersDist", curie=NEON.curie('betweenLoggersDist'),
                      model_uri=NEON.betweenLoggersDist, domain=None, range=Optional[float])

slots.carboyVolume = Slot(uri=NEON.carboyVolume, name="carboyVolume", curie=NEON.curie('carboyVolume'),
                      model_uri=NEON.carboyVolume, domain=None, range=Optional[float])

slots.certifiedStandardAccuracy = Slot(uri=NEON.certifiedStandardAccuracy, name="certifiedStandardAccuracy", curie=NEON.curie('certifiedStandardAccuracy'),
                      model_uri=NEON.certifiedStandardAccuracy, domain=None, range=Optional[float])

slots.constantRateTracerMass = Slot(uri=NEON.constantRateTracerMass, name="constantRateTracerMass", curie=NEON.curie('constantRateTracerMass'),
                      model_uri=NEON.constantRateTracerMass, domain=None, range=Optional[float])

slots.dateTimeLogger = Slot(uri=NEON.dateTimeLogger, name="dateTimeLogger", curie=NEON.curie('dateTimeLogger'),
                      model_uri=NEON.dateTimeLogger, domain=None, range=Optional[Union[str, XSDTime]])

slots.dripEndTime = Slot(uri=NEON.dripEndTime, name="dripEndTime", curie=NEON.curie('dripEndTime'),
                      model_uri=NEON.dripEndTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.dripRateStart = Slot(uri=NEON.dripRateStart, name="dripRateStart", curie=NEON.curie('dripRateStart'),
                      model_uri=NEON.dripRateStart, domain=None, range=Optional[float])

slots.dripRateEnd = Slot(uri=NEON.dripRateEnd, name="dripRateEnd", curie=NEON.curie('dripRateEnd'),
                      model_uri=NEON.dripRateEnd, domain=None, range=Optional[float])

slots.dripStartTime = Slot(uri=NEON.dripStartTime, name="dripStartTime", curie=NEON.curie('dripStartTime'),
                      model_uri=NEON.dripStartTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.externalLabGasDataQF = Slot(uri=NEON.externalLabGasDataQF, name="externalLabGasDataQF", curie=NEON.curie('externalLabGasDataQF'),
                      model_uri=NEON.externalLabGasDataQF, domain=None, range=Optional[str])

slots.externalLabSaltDataQF = Slot(uri=NEON.externalLabSaltDataQF, name="externalLabSaltDataQF", curie=NEON.curie('externalLabSaltDataQF'),
                      model_uri=NEON.externalLabSaltDataQF, domain=None, range=Optional[str])

slots.finalConcentration = Slot(uri=NEON.finalConcentration, name="finalConcentration", curie=NEON.curie('finalConcentration'),
                      model_uri=NEON.finalConcentration, domain=None, range=Optional[float])

slots.fullRangeHobo = Slot(uri=NEON.fullRangeHobo, name="fullRangeHobo", curie=NEON.curie('fullRangeHobo'),
                      model_uri=NEON.fullRangeHobo, domain=None, range=Optional[float])

slots.gasSampleCode = Slot(uri=NEON.gasSampleCode, name="gasSampleCode", curie=NEON.curie('gasSampleCode'),
                      model_uri=NEON.gasSampleCode, domain=None, range=Optional[str])

slots.gasSampleID = Slot(uri=NEON.gasSampleID, name="gasSampleID", curie=NEON.curie('gasSampleID'),
                      model_uri=NEON.gasSampleID, domain=None, range=Optional[str])

slots.gasTracerConcentration = Slot(uri=NEON.gasTracerConcentration, name="gasTracerConcentration", curie=NEON.curie('gasTracerConcentration'),
                      model_uri=NEON.gasTracerConcentration, domain=None, range=Optional[float])

slots.gasTracerType = Slot(uri=NEON.gasTracerType, name="gasTracerType", curie=NEON.curie('gasTracerType'),
                      model_uri=NEON.gasTracerType, domain=None, range=Optional[str])

slots.gasVolumeAnalyzed = Slot(uri=NEON.gasVolumeAnalyzed, name="gasVolumeAnalyzed", curie=NEON.curie('gasVolumeAnalyzed'),
                      model_uri=NEON.gasVolumeAnalyzed, domain=None, range=Optional[float])

slots.hoboSampleCode = Slot(uri=NEON.hoboSampleCode, name="hoboSampleCode", curie=NEON.curie('hoboSampleCode'),
                      model_uri=NEON.hoboSampleCode, domain=None, range=Optional[str])

slots.hoboSampleID = Slot(uri=NEON.hoboSampleID, name="hoboSampleID", curie=NEON.curie('hoboSampleID'),
                      model_uri=NEON.hoboSampleID, domain=None, range=Optional[str])

slots.injectateSampleCode = Slot(uri=NEON.injectateSampleCode, name="injectateSampleCode", curie=NEON.curie('injectateSampleCode'),
                      model_uri=NEON.injectateSampleCode, domain=None, range=Optional[str])

slots.injectateSampleCollected = Slot(uri=NEON.injectateSampleCollected, name="injectateSampleCollected", curie=NEON.curie('injectateSampleCollected'),
                      model_uri=NEON.injectateSampleCollected, domain=None, range=Optional[str])

slots.injectateSampleID = Slot(uri=NEON.injectateSampleID, name="injectateSampleID", curie=NEON.curie('injectateSampleID'),
                      model_uri=NEON.injectateSampleID, domain=None, range=Optional[str])

slots.injectionType = Slot(uri=NEON.injectionType, name="injectionType", curie=NEON.curie('injectionType'),
                      model_uri=NEON.injectionType, domain=None, range=Optional[str])

slots.labStandardPrecision = Slot(uri=NEON.labStandardPrecision, name="labStandardPrecision", curie=NEON.curie('labStandardPrecision'),
                      model_uri=NEON.labStandardPrecision, domain=None, range=Optional[float])

slots.loggerDataQF = Slot(uri=NEON.loggerDataQF, name="loggerDataQF", curie=NEON.curie('loggerDataQF'),
                      model_uri=NEON.loggerDataQF, domain=None, range=Optional[str])

slots.loggersAtSensorSets = Slot(uri=NEON.loggersAtSensorSets, name="loggersAtSensorSets", curie=NEON.curie('loggersAtSensorSets'),
                      model_uri=NEON.loggersAtSensorSets, domain=None, range=Optional[str])

slots.lowRangeHobo = Slot(uri=NEON.lowRangeHobo, name="lowRangeHobo", curie=NEON.curie('lowRangeHobo'),
                      model_uri=NEON.lowRangeHobo, domain=None, range=Optional[float])

slots.measurementNumber = Slot(uri=NEON.measurementNumber, name="measurementNumber", curie=NEON.curie('measurementNumber'),
                      model_uri=NEON.measurementNumber, domain=None, range=Optional[str])

slots.plateauFieldDataQF = Slot(uri=NEON.plateauFieldDataQF, name="plateauFieldDataQF", curie=NEON.curie('plateauFieldDataQF'),
                      model_uri=NEON.plateauFieldDataQF, domain=None, range=Optional[str])

slots.plateauSampleFieldDataQF = Slot(uri=NEON.plateauSampleFieldDataQF, name="plateauSampleFieldDataQF", curie=NEON.curie('plateauSampleFieldDataQF'),
                      model_uri=NEON.plateauSampleFieldDataQF, domain=None, range=Optional[str])

slots.plateauCollectTime = Slot(uri=NEON.plateauCollectTime, name="plateauCollectTime", curie=NEON.curie('plateauCollectTime'),
                      model_uri=NEON.plateauCollectTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.runDetectionLimit = Slot(uri=NEON.runDetectionLimit, name="runDetectionLimit", curie=NEON.curie('runDetectionLimit'),
                      model_uri=NEON.runDetectionLimit, domain=None, range=Optional[float])

slots.saltBackgroundSampleCode = Slot(uri=NEON.saltBackgroundSampleCode, name="saltBackgroundSampleCode", curie=NEON.curie('saltBackgroundSampleCode'),
                      model_uri=NEON.saltBackgroundSampleCode, domain=None, range=Optional[str])

slots.saltBackgroundSampleID = Slot(uri=NEON.saltBackgroundSampleID, name="saltBackgroundSampleID", curie=NEON.curie('saltBackgroundSampleID'),
                      model_uri=NEON.saltBackgroundSampleID, domain=None, range=Optional[str])

slots.saltBelowDetectionQF = Slot(uri=NEON.saltBelowDetectionQF, name="saltBelowDetectionQF", curie=NEON.curie('saltBelowDetectionQF'),
                      model_uri=NEON.saltBelowDetectionQF, domain=None, range=Optional[int])

slots.saltSampleID = Slot(uri=NEON.saltSampleID, name="saltSampleID", curie=NEON.curie('saltSampleID'),
                      model_uri=NEON.saltSampleID, domain=None, range=Optional[str])

slots.saltTracerSampleCode = Slot(uri=NEON.saltTracerSampleCode, name="saltTracerSampleCode", curie=NEON.curie('saltTracerSampleCode'),
                      model_uri=NEON.saltTracerSampleCode, domain=None, range=Optional[str])

slots.saltTracerSampleID = Slot(uri=NEON.saltTracerSampleID, name="saltTracerSampleID", curie=NEON.curie('saltTracerSampleID'),
                      model_uri=NEON.saltTracerSampleID, domain=None, range=Optional[str])

slots.slugPourTime = Slot(uri=NEON.slugPourTime, name="slugPourTime", curie=NEON.curie('slugPourTime'),
                      model_uri=NEON.slugPourTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.slugTracerMass = Slot(uri=NEON.slugTracerMass, name="slugTracerMass", curie=NEON.curie('slugTracerMass'),
                      model_uri=NEON.slugTracerMass, domain=None, range=Optional[float])

slots.specificConductanceRep1 = Slot(uri=NEON.specificConductanceRep1, name="specificConductanceRep1", curie=NEON.curie('specificConductanceRep1'),
                      model_uri=NEON.specificConductanceRep1, domain=None, range=Optional[float])

slots.specificConductanceRep2 = Slot(uri=NEON.specificConductanceRep2, name="specificConductanceRep2", curie=NEON.curie('specificConductanceRep2'),
                      model_uri=NEON.specificConductanceRep2, domain=None, range=Optional[float])

slots.specificConductanceRep3 = Slot(uri=NEON.specificConductanceRep3, name="specificConductanceRep3", curie=NEON.curie('specificConductanceRep3'),
                      model_uri=NEON.specificConductanceRep3, domain=None, range=Optional[float])

slots.specificConductanceRep4 = Slot(uri=NEON.specificConductanceRep4, name="specificConductanceRep4", curie=NEON.curie('specificConductanceRep4'),
                      model_uri=NEON.specificConductanceRep4, domain=None, range=Optional[float])

slots.specificConductanceRep5 = Slot(uri=NEON.specificConductanceRep5, name="specificConductanceRep5", curie=NEON.curie('specificConductanceRep5'),
                      model_uri=NEON.specificConductanceRep5, domain=None, range=Optional[float])

slots.stationToInjectionDistance = Slot(uri=NEON.stationToInjectionDistance, name="stationToInjectionDistance", curie=NEON.curie('stationToInjectionDistance'),
                      model_uri=NEON.stationToInjectionDistance, domain=None, range=Optional[float])

slots.syringeID = Slot(uri=NEON.syringeID, name="syringeID", curie=NEON.curie('syringeID'),
                      model_uri=NEON.syringeID, domain=None, range=Optional[str])

slots.syringeCode = Slot(uri=NEON.syringeCode, name="syringeCode", curie=NEON.curie('syringeCode'),
                      model_uri=NEON.syringeCode, domain=None, range=Optional[str])

slots.tracerAnalysisType = Slot(uri=NEON.tracerAnalysisType, name="tracerAnalysisType", curie=NEON.curie('tracerAnalysisType'),
                      model_uri=NEON.tracerAnalysisType, domain=None, range=Optional[str])

slots.widthMeasurementNumber = Slot(uri=NEON.widthMeasurementNumber, name="widthMeasurementNumber", curie=NEON.curie('widthMeasurementNumber'),
                      model_uri=NEON.widthMeasurementNumber, domain=None, range=Optional[str])

slots.wettedWidthDataQF = Slot(uri=NEON.wettedWidthDataQF, name="wettedWidthDataQF", curie=NEON.curie('wettedWidthDataQF'),
                      model_uri=NEON.wettedWidthDataQF, domain=None, range=Optional[str])

slots.externaLabFileName = Slot(uri=NEON.externaLabFileName, name="externaLabFileName", curie=NEON.curie('externaLabFileName'),
                      model_uri=NEON.externaLabFileName, domain=None, range=Optional[str])

slots.gasBelowDetectionQF = Slot(uri=NEON.gasBelowDetectionQF, name="gasBelowDetectionQF", curie=NEON.curie('gasBelowDetectionQF'),
                      model_uri=NEON.gasBelowDetectionQF, domain=None, range=Optional[int])

slots.gasSampleFate = Slot(uri=NEON.gasSampleFate, name="gasSampleFate", curie=NEON.curie('gasSampleFate'),
                      model_uri=NEON.gasSampleFate, domain=None, range=Optional[str])

slots.hoboSampleFate = Slot(uri=NEON.hoboSampleFate, name="hoboSampleFate", curie=NEON.curie('hoboSampleFate'),
                      model_uri=NEON.hoboSampleFate, domain=None, range=Optional[str])

slots.injectateSampleFate = Slot(uri=NEON.injectateSampleFate, name="injectateSampleFate", curie=NEON.curie('injectateSampleFate'),
                      model_uri=NEON.injectateSampleFate, domain=None, range=Optional[str])

slots.saltBackgroundSampleClass = Slot(uri=NEON.saltBackgroundSampleClass, name="saltBackgroundSampleClass", curie=NEON.curie('saltBackgroundSampleClass'),
                      model_uri=NEON.saltBackgroundSampleClass, domain=None, range=Optional[str])

slots.saltBackgroundSampleFate = Slot(uri=NEON.saltBackgroundSampleFate, name="saltBackgroundSampleFate", curie=NEON.curie('saltBackgroundSampleFate'),
                      model_uri=NEON.saltBackgroundSampleFate, domain=None, range=Optional[str])

slots.saltSampleCode = Slot(uri=NEON.saltSampleCode, name="saltSampleCode", curie=NEON.curie('saltSampleCode'),
                      model_uri=NEON.saltSampleCode, domain=None, range=Optional[str])

slots.saltSampleFate = Slot(uri=NEON.saltSampleFate, name="saltSampleFate", curie=NEON.curie('saltSampleFate'),
                      model_uri=NEON.saltSampleFate, domain=None, range=Optional[str])

slots.saltTracerSampleFate = Slot(uri=NEON.saltTracerSampleFate, name="saltTracerSampleFate", curie=NEON.curie('saltTracerSampleFate'),
                      model_uri=NEON.saltTracerSampleFate, domain=None, range=Optional[str])

slots.syringeFate = Slot(uri=NEON.syringeFate, name="syringeFate", curie=NEON.curie('syringeFate'),
                      model_uri=NEON.syringeFate, domain=None, range=Optional[str])

slots.analysisType = Slot(uri=NEON.analysisType, name="analysisType", curie=NEON.curie('analysisType'),
                      model_uri=NEON.analysisType, domain=None, range=Optional[str])

slots.originalFieldSampleVolume = Slot(uri=NEON.originalFieldSampleVolume, name="originalFieldSampleVolume", curie=NEON.curie('originalFieldSampleVolume'),
                      model_uri=NEON.originalFieldSampleVolume, domain=None, range=Optional[float])

slots.plantAdjAshFreeDryMass = Slot(uri=NEON.plantAdjAshFreeDryMass, name="plantAdjAshFreeDryMass", curie=NEON.curie('plantAdjAshFreeDryMass'),
                      model_uri=NEON.plantAdjAshFreeDryMass, domain=None, range=Optional[float])

slots.plantAshMassBoatMass = Slot(uri=NEON.plantAshMassBoatMass, name="plantAshMassBoatMass", curie=NEON.curie('plantAshMassBoatMass'),
                      model_uri=NEON.plantAshMassBoatMass, domain=None, range=Optional[float])

slots.plantBoatID = Slot(uri=NEON.plantBoatID, name="plantBoatID", curie=NEON.curie('plantBoatID'),
                      model_uri=NEON.plantBoatID, domain=None, range=Optional[str])

slots.plantBoatMass = Slot(uri=NEON.plantBoatMass, name="plantBoatMass", curie=NEON.curie('plantBoatMass'),
                      model_uri=NEON.plantBoatMass, domain=None, range=Optional[float])

slots.plantDryMassBoatMass = Slot(uri=NEON.plantDryMassBoatMass, name="plantDryMassBoatMass", curie=NEON.curie('plantDryMassBoatMass'),
                      model_uri=NEON.plantDryMassBoatMass, domain=None, range=Optional[float])

slots.pHFlag = Slot(uri=NEON.pHFlag, name="pHFlag", curie=NEON.curie('pHFlag'),
                      model_uri=NEON.pHFlag, domain=None, range=Optional[str])

slots.precipConductivityFlag = Slot(uri=NEON.precipConductivityFlag, name="precipConductivityFlag", curie=NEON.curie('precipConductivityFlag'),
                      model_uri=NEON.precipConductivityFlag, domain=None, range=Optional[str])

slots.chemFunnelCode = Slot(uri=NEON.chemFunnelCode, name="chemFunnelCode", curie=NEON.curie('chemFunnelCode'),
                      model_uri=NEON.chemFunnelCode, domain=None, range=Optional[str])

slots.chemTubeCode = Slot(uri=NEON.chemTubeCode, name="chemTubeCode", curie=NEON.curie('chemTubeCode'),
                      model_uri=NEON.chemTubeCode, domain=None, range=Optional[str])

slots.extChemBottleCode = Slot(uri=NEON.extChemBottleCode, name="extChemBottleCode", curie=NEON.curie('extChemBottleCode'),
                      model_uri=NEON.extChemBottleCode, domain=None, range=Optional[str])

slots.extIsoBottleCode = Slot(uri=NEON.extIsoBottleCode, name="extIsoBottleCode", curie=NEON.curie('extIsoBottleCode'),
                      model_uri=NEON.extIsoBottleCode, domain=None, range=Optional[str])

slots.isoFunnelCode = Slot(uri=NEON.isoFunnelCode, name="isoFunnelCode", curie=NEON.curie('isoFunnelCode'),
                      model_uri=NEON.isoFunnelCode, domain=None, range=Optional[str])

slots.isoTubeCode = Slot(uri=NEON.isoTubeCode, name="isoTubeCode", curie=NEON.curie('isoTubeCode'),
                      model_uri=NEON.isoTubeCode, domain=None, range=Optional[str])

slots.shippingCaseCode = Slot(uri=NEON.shippingCaseCode, name="shippingCaseCode", curie=NEON.curie('shippingCaseCode'),
                      model_uri=NEON.shippingCaseCode, domain=None, range=Optional[str])

slots.inLWFinalQFSciRvw = Slot(uri=NEON.inLWFinalQFSciRvw, name="inLWFinalQFSciRvw", curie=NEON.curie('inLWFinalQFSciRvw'),
                      model_uri=NEON.inLWFinalQFSciRvw, domain=None, range=Optional[str])

slots.inSWFinalQFSciRvw = Slot(uri=NEON.inSWFinalQFSciRvw, name="inSWFinalQFSciRvw", curie=NEON.curie('inSWFinalQFSciRvw'),
                      model_uri=NEON.inSWFinalQFSciRvw, domain=None, range=Optional[str])

slots.outLWFinalQFSciRvw = Slot(uri=NEON.outLWFinalQFSciRvw, name="outLWFinalQFSciRvw", curie=NEON.curie('outLWFinalQFSciRvw'),
                      model_uri=NEON.outLWFinalQFSciRvw, domain=None, range=Optional[str])

slots.outSWFinalQFSciRvw = Slot(uri=NEON.outSWFinalQFSciRvw, name="outSWFinalQFSciRvw", curie=NEON.curie('outSWFinalQFSciRvw'),
                      model_uri=NEON.outSWFinalQFSciRvw, domain=None, range=Optional[str])

slots.aForkMaxDiameter = Slot(uri=NEON.aForkMaxDiameter, name="aForkMaxDiameter", curie=NEON.curie('aForkMaxDiameter'),
                      model_uri=NEON.aForkMaxDiameter, domain=None, range=Optional[float])

slots.aForkMinorDiameter = Slot(uri=NEON.aForkMinorDiameter, name="aForkMinorDiameter", curie=NEON.curie('aForkMinorDiameter'),
                      model_uri=NEON.aForkMinorDiameter, domain=None, range=Optional[float])

slots.bForkMaxDiameter = Slot(uri=NEON.bForkMaxDiameter, name="bForkMaxDiameter", curie=NEON.curie('bForkMaxDiameter'),
                      model_uri=NEON.bForkMaxDiameter, domain=None, range=Optional[float])

slots.bForkMinorDiameter = Slot(uri=NEON.bForkMinorDiameter, name="bForkMinorDiameter", curie=NEON.curie('bForkMinorDiameter'),
                      model_uri=NEON.bForkMinorDiameter, domain=None, range=Optional[float])

slots.cForkMaxDiameter = Slot(uri=NEON.cForkMaxDiameter, name="cForkMaxDiameter", curie=NEON.curie('cForkMaxDiameter'),
                      model_uri=NEON.cForkMaxDiameter, domain=None, range=Optional[float])

slots.cForkMinorDiameter = Slot(uri=NEON.cForkMinorDiameter, name="cForkMinorDiameter", curie=NEON.curie('cForkMinorDiameter'),
                      model_uri=NEON.cForkMinorDiameter, domain=None, range=Optional[float])

slots.dForkMaxDiameter = Slot(uri=NEON.dForkMaxDiameter, name="dForkMaxDiameter", curie=NEON.curie('dForkMaxDiameter'),
                      model_uri=NEON.dForkMaxDiameter, domain=None, range=Optional[float])

slots.dForkMinorDiameter = Slot(uri=NEON.dForkMinorDiameter, name="dForkMinorDiameter", curie=NEON.curie('dForkMinorDiameter'),
                      model_uri=NEON.dForkMinorDiameter, domain=None, range=Optional[float])

slots.eForkMaxDiameter = Slot(uri=NEON.eForkMaxDiameter, name="eForkMaxDiameter", curie=NEON.curie('eForkMaxDiameter'),
                      model_uri=NEON.eForkMaxDiameter, domain=None, range=Optional[float])

slots.eForkMinorDiameter = Slot(uri=NEON.eForkMinorDiameter, name="eForkMinorDiameter", curie=NEON.curie('eForkMinorDiameter'),
                      model_uri=NEON.eForkMinorDiameter, domain=None, range=Optional[float])

slots.fForkMaxDiameter = Slot(uri=NEON.fForkMaxDiameter, name="fForkMaxDiameter", curie=NEON.curie('fForkMaxDiameter'),
                      model_uri=NEON.fForkMaxDiameter, domain=None, range=Optional[float])

slots.fForkMinorDiameter = Slot(uri=NEON.fForkMinorDiameter, name="fForkMinorDiameter", curie=NEON.curie('fForkMinorDiameter'),
                      model_uri=NEON.fForkMinorDiameter, domain=None, range=Optional[float])

slots.gForkMaxDiameter = Slot(uri=NEON.gForkMaxDiameter, name="gForkMaxDiameter", curie=NEON.curie('gForkMaxDiameter'),
                      model_uri=NEON.gForkMaxDiameter, domain=None, range=Optional[float])

slots.gForkMinorDiameter = Slot(uri=NEON.gForkMinorDiameter, name="gForkMinorDiameter", curie=NEON.curie('gForkMinorDiameter'),
                      model_uri=NEON.gForkMinorDiameter, domain=None, range=Optional[float])

slots.hForkMaxDiameter = Slot(uri=NEON.hForkMaxDiameter, name="hForkMaxDiameter", curie=NEON.curie('hForkMaxDiameter'),
                      model_uri=NEON.hForkMaxDiameter, domain=None, range=Optional[float])

slots.hForkMinorDiameter = Slot(uri=NEON.hForkMinorDiameter, name="hForkMinorDiameter", curie=NEON.curie('hForkMinorDiameter'),
                      model_uri=NEON.hForkMinorDiameter, domain=None, range=Optional[float])

slots.iForkMaxDiameter = Slot(uri=NEON.iForkMaxDiameter, name="iForkMaxDiameter", curie=NEON.curie('iForkMaxDiameter'),
                      model_uri=NEON.iForkMaxDiameter, domain=None, range=Optional[float])

slots.iForkMinorDiameter = Slot(uri=NEON.iForkMinorDiameter, name="iForkMinorDiameter", curie=NEON.curie('iForkMinorDiameter'),
                      model_uri=NEON.iForkMinorDiameter, domain=None, range=Optional[float])

slots.jForkMaxDiameter = Slot(uri=NEON.jForkMaxDiameter, name="jForkMaxDiameter", curie=NEON.curie('jForkMaxDiameter'),
                      model_uri=NEON.jForkMaxDiameter, domain=None, range=Optional[float])

slots.jForkMinorDiameter = Slot(uri=NEON.jForkMinorDiameter, name="jForkMinorDiameter", curie=NEON.curie('jForkMinorDiameter'),
                      model_uri=NEON.jForkMinorDiameter, domain=None, range=Optional[float])

slots.branchBarkCover = Slot(uri=NEON.branchBarkCover, name="branchBarkCover", curie=NEON.curie('branchBarkCover'),
                      model_uri=NEON.branchBarkCover, domain=None, range=Optional[str])

slots.branchesPresent = Slot(uri=NEON.branchesPresent, name="branchesPresent", curie=NEON.curie('branchesPresent'),
                      model_uri=NEON.branchesPresent, domain=None, range=Optional[str])

slots.decayClass = Slot(uri=NEON.decayClass, name="decayClass", curie=NEON.curie('decayClass'),
                      model_uri=NEON.decayClass, domain=None, range=Optional[str])

slots.equivalentLogDiameter = Slot(uri=NEON.equivalentLogDiameter, name="equivalentLogDiameter", curie=NEON.curie('equivalentLogDiameter'),
                      model_uri=NEON.equivalentLogDiameter, domain=None, range=Optional[float])

slots.leavesPresent = Slot(uri=NEON.leavesPresent, name="leavesPresent", curie=NEON.curie('leavesPresent'),
                      model_uri=NEON.leavesPresent, domain=None, range=Optional[str])

slots.lidsAzimuth = Slot(uri=NEON.lidsAzimuth, name="lidsAzimuth", curie=NEON.curie('lidsAzimuth'),
                      model_uri=NEON.lidsAzimuth, domain=None, range=Optional[str])

slots.logBarkCover = Slot(uri=NEON.logBarkCover, name="logBarkCover", curie=NEON.curie('logBarkCover'),
                      model_uri=NEON.logBarkCover, domain=None, range=Optional[str])

slots.logDistance = Slot(uri=NEON.logDistance, name="logDistance", curie=NEON.curie('logDistance'),
                      model_uri=NEON.logDistance, domain=None, range=Optional[float])

slots.logHandBreakable = Slot(uri=NEON.logHandBreakable, name="logHandBreakable", curie=NEON.curie('logHandBreakable'),
                      model_uri=NEON.logHandBreakable, domain=None, range=Optional[str])

slots.logHoldShape = Slot(uri=NEON.logHoldShape, name="logHoldShape", curie=NEON.curie('logHoldShape'),
                      model_uri=NEON.logHoldShape, domain=None, range=Optional[str])

slots.logID = Slot(uri=NEON.logID, name="logID", curie=NEON.curie('logID'),
                      model_uri=NEON.logID, domain=None, range=Optional[str])

slots.logLength = Slot(uri=NEON.logLength, name="logLength", curie=NEON.curie('logLength'),
                      model_uri=NEON.logLength, domain=None, range=Optional[float])

slots.logMaxDiameter = Slot(uri=NEON.logMaxDiameter, name="logMaxDiameter", curie=NEON.curie('logMaxDiameter'),
                      model_uri=NEON.logMaxDiameter, domain=None, range=Optional[float])

slots.logMinorDiameter = Slot(uri=NEON.logMinorDiameter, name="logMinorDiameter", curie=NEON.curie('logMinorDiameter'),
                      model_uri=NEON.logMinorDiameter, domain=None, range=Optional[float])

slots.tagStatus = Slot(uri=NEON.tagStatus, name="tagStatus", curie=NEON.curie('tagStatus'),
                      model_uri=NEON.tagStatus, domain=None, range=Optional[str])

slots.twigsPresent = Slot(uri=NEON.twigsPresent, name="twigsPresent", curie=NEON.curie('twigsPresent'),
                      model_uri=NEON.twigsPresent, domain=None, range=Optional[str])

slots.volumeFactor = Slot(uri=NEON.volumeFactor, name="volumeFactor", curie=NEON.curie('volumeFactor'),
                      model_uri=NEON.volumeFactor, domain=None, range=Optional[str])

slots.PARValidCalQAQCRpt = Slot(uri=NEON.PARValidCalQAQCRpt, name="PARValidCalQAQCRpt", curie=NEON.curie('PARValidCalQAQCRpt'),
                      model_uri=NEON.PARValidCalQAQCRpt, domain=None, range=Optional[str])

slots.PARValidCalPassQM = Slot(uri=NEON.PARValidCalPassQM, name="PARValidCalPassQM", curie=NEON.curie('PARValidCalPassQM'),
                      model_uri=NEON.PARValidCalPassQM, domain=None, range=Optional[float])

slots.PARValidCalNAQM = Slot(uri=NEON.PARValidCalNAQM, name="PARValidCalNAQM", curie=NEON.curie('PARValidCalNAQM'),
                      model_uri=NEON.PARValidCalNAQM, domain=None, range=Optional[float])

slots.PARValidCalFailQM = Slot(uri=NEON.PARValidCalFailQM, name="PARValidCalFailQM", curie=NEON.curie('PARValidCalFailQM'),
                      model_uri=NEON.PARValidCalFailQM, domain=None, range=Optional[float])

slots.outPARValidCalQAQCRpt = Slot(uri=NEON.outPARValidCalQAQCRpt, name="outPARValidCalQAQCRpt", curie=NEON.curie('outPARValidCalQAQCRpt'),
                      model_uri=NEON.outPARValidCalQAQCRpt, domain=None, range=Optional[str])

slots.outPARValidCalPassQM = Slot(uri=NEON.outPARValidCalPassQM, name="outPARValidCalPassQM", curie=NEON.curie('outPARValidCalPassQM'),
                      model_uri=NEON.outPARValidCalPassQM, domain=None, range=Optional[float])

slots.outPARValidCalNAQM = Slot(uri=NEON.outPARValidCalNAQM, name="outPARValidCalNAQM", curie=NEON.curie('outPARValidCalNAQM'),
                      model_uri=NEON.outPARValidCalNAQM, domain=None, range=Optional[float])

slots.outPARValidCalFailQM = Slot(uri=NEON.outPARValidCalFailQM, name="outPARValidCalFailQM", curie=NEON.curie('outPARValidCalFailQM'),
                      model_uri=NEON.outPARValidCalFailQM, domain=None, range=Optional[float])

slots.finalQFSciRvw = Slot(uri=NEON.finalQFSciRvw, name="finalQFSciRvw", curie=NEON.curie('finalQFSciRvw'),
                      model_uri=NEON.finalQFSciRvw, domain=None, range=Optional[str])

slots.outPARFinalQFSciRvw = Slot(uri=NEON.outPARFinalQFSciRvw, name="outPARFinalQFSciRvw", curie=NEON.curie('outPARFinalQFSciRvw'),
                      model_uri=NEON.outPARFinalQFSciRvw, domain=None, range=Optional[str])

slots.PARFinalQFSciRvw = Slot(uri=NEON.PARFinalQFSciRvw, name="PARFinalQFSciRvw", curie=NEON.curie('PARFinalQFSciRvw'),
                      model_uri=NEON.PARFinalQFSciRvw, domain=None, range=Optional[str])

slots.outuPARFinalQFSciRvw = Slot(uri=NEON.outuPARFinalQFSciRvw, name="outuPARFinalQFSciRvw", curie=NEON.curie('outuPARFinalQFSciRvw'),
                      model_uri=NEON.outuPARFinalQFSciRvw, domain=None, range=Optional[str])

slots.uPARFinalQFSciRvw = Slot(uri=NEON.uPARFinalQFSciRvw, name="uPARFinalQFSciRvw", curie=NEON.curie('uPARFinalQFSciRvw'),
                      model_uri=NEON.uPARFinalQFSciRvw, domain=None, range=Optional[str])

slots.inLWValidCalQAQCRpt = Slot(uri=NEON.inLWValidCalQAQCRpt, name="inLWValidCalQAQCRpt", curie=NEON.curie('inLWValidCalQAQCRpt'),
                      model_uri=NEON.inLWValidCalQAQCRpt, domain=None, range=Optional[str])

slots.inSWValidCalQAQCRpt = Slot(uri=NEON.inSWValidCalQAQCRpt, name="inSWValidCalQAQCRpt", curie=NEON.curie('inSWValidCalQAQCRpt'),
                      model_uri=NEON.inSWValidCalQAQCRpt, domain=None, range=Optional[str])

slots.outLWValidCalQAQCRpt = Slot(uri=NEON.outLWValidCalQAQCRpt, name="outLWValidCalQAQCRpt", curie=NEON.curie('outLWValidCalQAQCRpt'),
                      model_uri=NEON.outLWValidCalQAQCRpt, domain=None, range=Optional[str])

slots.outSWValidCalQAQCRpt = Slot(uri=NEON.outSWValidCalQAQCRpt, name="outSWValidCalQAQCRpt", curie=NEON.curie('outSWValidCalQAQCRpt'),
                      model_uri=NEON.outSWValidCalQAQCRpt, domain=None, range=Optional[str])

slots.inLWValidCalFailQM = Slot(uri=NEON.inLWValidCalFailQM, name="inLWValidCalFailQM", curie=NEON.curie('inLWValidCalFailQM'),
                      model_uri=NEON.inLWValidCalFailQM, domain=None, range=Optional[float])

slots.inLWValidCalNAQM = Slot(uri=NEON.inLWValidCalNAQM, name="inLWValidCalNAQM", curie=NEON.curie('inLWValidCalNAQM'),
                      model_uri=NEON.inLWValidCalNAQM, domain=None, range=Optional[float])

slots.inLWValidCalPassQM = Slot(uri=NEON.inLWValidCalPassQM, name="inLWValidCalPassQM", curie=NEON.curie('inLWValidCalPassQM'),
                      model_uri=NEON.inLWValidCalPassQM, domain=None, range=Optional[float])

slots.inSWValidCalFailQM = Slot(uri=NEON.inSWValidCalFailQM, name="inSWValidCalFailQM", curie=NEON.curie('inSWValidCalFailQM'),
                      model_uri=NEON.inSWValidCalFailQM, domain=None, range=Optional[float])

slots.inSWValidCalNAQM = Slot(uri=NEON.inSWValidCalNAQM, name="inSWValidCalNAQM", curie=NEON.curie('inSWValidCalNAQM'),
                      model_uri=NEON.inSWValidCalNAQM, domain=None, range=Optional[float])

slots.inSWValidCalPassQM = Slot(uri=NEON.inSWValidCalPassQM, name="inSWValidCalPassQM", curie=NEON.curie('inSWValidCalPassQM'),
                      model_uri=NEON.inSWValidCalPassQM, domain=None, range=Optional[float])

slots.outLWValidCalFailQM = Slot(uri=NEON.outLWValidCalFailQM, name="outLWValidCalFailQM", curie=NEON.curie('outLWValidCalFailQM'),
                      model_uri=NEON.outLWValidCalFailQM, domain=None, range=Optional[float])

slots.outLWValidCalNAQM = Slot(uri=NEON.outLWValidCalNAQM, name="outLWValidCalNAQM", curie=NEON.curie('outLWValidCalNAQM'),
                      model_uri=NEON.outLWValidCalNAQM, domain=None, range=Optional[float])

slots.outLWValidCalPassQM = Slot(uri=NEON.outLWValidCalPassQM, name="outLWValidCalPassQM", curie=NEON.curie('outLWValidCalPassQM'),
                      model_uri=NEON.outLWValidCalPassQM, domain=None, range=Optional[float])

slots.outSWValidCalFailQM = Slot(uri=NEON.outSWValidCalFailQM, name="outSWValidCalFailQM", curie=NEON.curie('outSWValidCalFailQM'),
                      model_uri=NEON.outSWValidCalFailQM, domain=None, range=Optional[float])

slots.outSWValidCalNAQM = Slot(uri=NEON.outSWValidCalNAQM, name="outSWValidCalNAQM", curie=NEON.curie('outSWValidCalNAQM'),
                      model_uri=NEON.outSWValidCalNAQM, domain=None, range=Optional[float])

slots.outSWValidCalPassQM = Slot(uri=NEON.outSWValidCalPassQM, name="outSWValidCalPassQM", curie=NEON.curie('outSWValidCalPassQM'),
                      model_uri=NEON.outSWValidCalPassQM, domain=None, range=Optional[float])

slots.difRadValidCalFailQM = Slot(uri=NEON.difRadValidCalFailQM, name="difRadValidCalFailQM", curie=NEON.curie('difRadValidCalFailQM'),
                      model_uri=NEON.difRadValidCalFailQM, domain=None, range=Optional[float])

slots.difRadValidCalNAQM = Slot(uri=NEON.difRadValidCalNAQM, name="difRadValidCalNAQM", curie=NEON.curie('difRadValidCalNAQM'),
                      model_uri=NEON.difRadValidCalNAQM, domain=None, range=Optional[float])

slots.difRadValidCalPassQM = Slot(uri=NEON.difRadValidCalPassQM, name="difRadValidCalPassQM", curie=NEON.curie('difRadValidCalPassQM'),
                      model_uri=NEON.difRadValidCalPassQM, domain=None, range=Optional[float])

slots.difRadValidCalQAQCRpt = Slot(uri=NEON.difRadValidCalQAQCRpt, name="difRadValidCalQAQCRpt", curie=NEON.curie('difRadValidCalQAQCRpt'),
                      model_uri=NEON.difRadValidCalQAQCRpt, domain=None, range=Optional[str])

slots.dirRadValidCalFailQM = Slot(uri=NEON.dirRadValidCalFailQM, name="dirRadValidCalFailQM", curie=NEON.curie('dirRadValidCalFailQM'),
                      model_uri=NEON.dirRadValidCalFailQM, domain=None, range=Optional[float])

slots.dirRadValidCalNAQM = Slot(uri=NEON.dirRadValidCalNAQM, name="dirRadValidCalNAQM", curie=NEON.curie('dirRadValidCalNAQM'),
                      model_uri=NEON.dirRadValidCalNAQM, domain=None, range=Optional[float])

slots.dirRadValidCalPassQM = Slot(uri=NEON.dirRadValidCalPassQM, name="dirRadValidCalPassQM", curie=NEON.curie('dirRadValidCalPassQM'),
                      model_uri=NEON.dirRadValidCalPassQM, domain=None, range=Optional[float])

slots.dirRadValidCalQAQCRpt = Slot(uri=NEON.dirRadValidCalQAQCRpt, name="dirRadValidCalQAQCRpt", curie=NEON.curie('dirRadValidCalQAQCRpt'),
                      model_uri=NEON.dirRadValidCalQAQCRpt, domain=None, range=Optional[str])

slots.gloRadValidCalFailQM = Slot(uri=NEON.gloRadValidCalFailQM, name="gloRadValidCalFailQM", curie=NEON.curie('gloRadValidCalFailQM'),
                      model_uri=NEON.gloRadValidCalFailQM, domain=None, range=Optional[float])

slots.gloRadValidCalNAQM = Slot(uri=NEON.gloRadValidCalNAQM, name="gloRadValidCalNAQM", curie=NEON.curie('gloRadValidCalNAQM'),
                      model_uri=NEON.gloRadValidCalNAQM, domain=None, range=Optional[float])

slots.gloRadValidCalPassQM = Slot(uri=NEON.gloRadValidCalPassQM, name="gloRadValidCalPassQM", curie=NEON.curie('gloRadValidCalPassQM'),
                      model_uri=NEON.gloRadValidCalPassQM, domain=None, range=Optional[float])

slots.gloRadValidCalQAQCRpt = Slot(uri=NEON.gloRadValidCalQAQCRpt, name="gloRadValidCalQAQCRpt", curie=NEON.curie('gloRadValidCalQAQCRpt'),
                      model_uri=NEON.gloRadValidCalQAQCRpt, domain=None, range=Optional[str])

slots.sensorDepthValidCalQF = Slot(uri=NEON.sensorDepthValidCalQF, name="sensorDepthValidCalQF", curie=NEON.curie('sensorDepthValidCalQF'),
                      model_uri=NEON.sensorDepthValidCalQF, domain=None, range=Optional[int])

slots.specificConductanceValidCalQF = Slot(uri=NEON.specificConductanceValidCalQF, name="specificConductanceValidCalQF", curie=NEON.curie('specificConductanceValidCalQF'),
                      model_uri=NEON.specificConductanceValidCalQF, domain=None, range=Optional[int])

slots.staPresValidCalFailQM = Slot(uri=NEON.staPresValidCalFailQM, name="staPresValidCalFailQM", curie=NEON.curie('staPresValidCalFailQM'),
                      model_uri=NEON.staPresValidCalFailQM, domain=None, range=Optional[float])

slots.staPresValidCalNAQM = Slot(uri=NEON.staPresValidCalNAQM, name="staPresValidCalNAQM", curie=NEON.curie('staPresValidCalNAQM'),
                      model_uri=NEON.staPresValidCalNAQM, domain=None, range=Optional[float])

slots.staPresValidCalPassQM = Slot(uri=NEON.staPresValidCalPassQM, name="staPresValidCalPassQM", curie=NEON.curie('staPresValidCalPassQM'),
                      model_uri=NEON.staPresValidCalPassQM, domain=None, range=Optional[float])

slots.staPresValidCalQAQCRpt = Slot(uri=NEON.staPresValidCalQAQCRpt, name="staPresValidCalQAQCRpt", curie=NEON.curie('staPresValidCalQAQCRpt'),
                      model_uri=NEON.staPresValidCalQAQCRpt, domain=None, range=Optional[str])

slots.validCalQF = Slot(uri=NEON.validCalQF, name="validCalQF", curie=NEON.curie('validCalQF'),
                      model_uri=NEON.validCalQF, domain=None, range=Optional[int])

slots.windDirValidCalFailQM = Slot(uri=NEON.windDirValidCalFailQM, name="windDirValidCalFailQM", curie=NEON.curie('windDirValidCalFailQM'),
                      model_uri=NEON.windDirValidCalFailQM, domain=None, range=Optional[float])

slots.windDirValidCalNAQM = Slot(uri=NEON.windDirValidCalNAQM, name="windDirValidCalNAQM", curie=NEON.curie('windDirValidCalNAQM'),
                      model_uri=NEON.windDirValidCalNAQM, domain=None, range=Optional[float])

slots.windDirValidCalPassQM = Slot(uri=NEON.windDirValidCalPassQM, name="windDirValidCalPassQM", curie=NEON.curie('windDirValidCalPassQM'),
                      model_uri=NEON.windDirValidCalPassQM, domain=None, range=Optional[float])

slots.windDirValidCalQAQCRpt = Slot(uri=NEON.windDirValidCalQAQCRpt, name="windDirValidCalQAQCRpt", curie=NEON.curie('windDirValidCalQAQCRpt'),
                      model_uri=NEON.windDirValidCalQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedValidCalFailQM = Slot(uri=NEON.windSpeedValidCalFailQM, name="windSpeedValidCalFailQM", curie=NEON.curie('windSpeedValidCalFailQM'),
                      model_uri=NEON.windSpeedValidCalFailQM, domain=None, range=Optional[float])

slots.windSpeedValidCalNAQM = Slot(uri=NEON.windSpeedValidCalNAQM, name="windSpeedValidCalNAQM", curie=NEON.curie('windSpeedValidCalNAQM'),
                      model_uri=NEON.windSpeedValidCalNAQM, domain=None, range=Optional[float])

slots.windSpeedValidCalPassQM = Slot(uri=NEON.windSpeedValidCalPassQM, name="windSpeedValidCalPassQM", curie=NEON.curie('windSpeedValidCalPassQM'),
                      model_uri=NEON.windSpeedValidCalPassQM, domain=None, range=Optional[float])

slots.windSpeedValidCalQAQCRpt = Slot(uri=NEON.windSpeedValidCalQAQCRpt, name="windSpeedValidCalQAQCRpt", curie=NEON.curie('windSpeedValidCalQAQCRpt'),
                      model_uri=NEON.windSpeedValidCalQAQCRpt, domain=None, range=Optional[str])

slots.buoyCorPresFinalQFSciRvw = Slot(uri=NEON.buoyCorPresFinalQFSciRvw, name="buoyCorPresFinalQFSciRvw", curie=NEON.curie('buoyCorPresFinalQFSciRvw'),
                      model_uri=NEON.buoyCorPresFinalQFSciRvw, domain=None, range=Optional[str])

slots.buoyStaPresFinalQFSciRvw = Slot(uri=NEON.buoyStaPresFinalQFSciRvw, name="buoyStaPresFinalQFSciRvw", curie=NEON.curie('buoyStaPresFinalQFSciRvw'),
                      model_uri=NEON.buoyStaPresFinalQFSciRvw, domain=None, range=Optional[str])

slots.corPresFinalQFSciRvw = Slot(uri=NEON.corPresFinalQFSciRvw, name="corPresFinalQFSciRvw", curie=NEON.curie('corPresFinalQFSciRvw'),
                      model_uri=NEON.corPresFinalQFSciRvw, domain=None, range=Optional[str])

slots.difRadFinalQFSciRvw = Slot(uri=NEON.difRadFinalQFSciRvw, name="difRadFinalQFSciRvw", curie=NEON.curie('difRadFinalQFSciRvw'),
                      model_uri=NEON.difRadFinalQFSciRvw, domain=None, range=Optional[str])

slots.dirRadFinalQFSciRvw = Slot(uri=NEON.dirRadFinalQFSciRvw, name="dirRadFinalQFSciRvw", curie=NEON.curie('dirRadFinalQFSciRvw'),
                      model_uri=NEON.dirRadFinalQFSciRvw, domain=None, range=Optional[str])

slots.gloRadFinalQFSciRvw = Slot(uri=NEON.gloRadFinalQFSciRvw, name="gloRadFinalQFSciRvw", curie=NEON.curie('gloRadFinalQFSciRvw'),
                      model_uri=NEON.gloRadFinalQFSciRvw, domain=None, range=Optional[str])

slots.staPresFinalQFSciRvw = Slot(uri=NEON.staPresFinalQFSciRvw, name="staPresFinalQFSciRvw", curie=NEON.curie('staPresFinalQFSciRvw'),
                      model_uri=NEON.staPresFinalQFSciRvw, domain=None, range=Optional[str])

slots.windDirFinalQFSciRvw = Slot(uri=NEON.windDirFinalQFSciRvw, name="windDirFinalQFSciRvw", curie=NEON.curie('windDirFinalQFSciRvw'),
                      model_uri=NEON.windDirFinalQFSciRvw, domain=None, range=Optional[str])

slots.windSpeedFinalQFSciRvw = Slot(uri=NEON.windSpeedFinalQFSciRvw, name="windSpeedFinalQFSciRvw", curie=NEON.curie('windSpeedFinalQFSciRvw'),
                      model_uri=NEON.windSpeedFinalQFSciRvw, domain=None, range=Optional[str])

slots.cameraOrientation = Slot(uri=NEON.cameraOrientation, name="cameraOrientation", curie=NEON.curie('cameraOrientation'),
                      model_uri=NEON.cameraOrientation, domain=None, range=Optional[str])

slots.cameraPosition = Slot(uri=NEON.cameraPosition, name="cameraPosition", curie=NEON.curie('cameraPosition'),
                      model_uri=NEON.cameraPosition, domain=None, range=Optional[str])

slots.imageFileName = Slot(uri=NEON.imageFileName, name="imageFileName", curie=NEON.curie('imageFileName'),
                      model_uri=NEON.imageFileName, domain=None, range=Optional[str])

slots.imageFileNumber = Slot(uri=NEON.imageFileNumber, name="imageFileNumber", curie=NEON.curie('imageFileNumber'),
                      model_uri=NEON.imageFileNumber, domain=None, range=Optional[str])

slots.downloadFileName = Slot(uri=NEON.downloadFileName, name="downloadFileName", curie=NEON.curie('downloadFileName'),
                      model_uri=NEON.downloadFileName, domain=None, range=Optional[str])

slots.fulcrumFilePath = Slot(uri=NEON.fulcrumFilePath, name="fulcrumFilePath", curie=NEON.curie('fulcrumFilePath'),
                      model_uri=NEON.fulcrumFilePath, domain=None, range=Optional[str])

slots.imageFilePath = Slot(uri=NEON.imageFilePath, name="imageFilePath", curie=NEON.curie('imageFilePath'),
                      model_uri=NEON.imageFilePath, domain=None, range=Optional[str])

slots.imageFileUrl = Slot(uri=NEON.imageFileUrl, name="imageFileUrl", curie=NEON.curie('imageFileUrl'),
                      model_uri=NEON.imageFileUrl, domain=None, range=Optional[str])

slots.imageType = Slot(uri=NEON.imageType, name="imageType", curie=NEON.curie('imageType'),
                      model_uri=NEON.imageType, domain=None, range=Optional[str])

slots.overstoryHeight = Slot(uri=NEON.overstoryHeight, name="overstoryHeight", curie=NEON.curie('overstoryHeight'),
                      model_uri=NEON.overstoryHeight, domain=None, range=Optional[float])

slots.understoryHeight = Slot(uri=NEON.understoryHeight, name="understoryHeight", curie=NEON.curie('understoryHeight'),
                      model_uri=NEON.understoryHeight, domain=None, range=Optional[float])

slots.yearBoutBegan = Slot(uri=NEON.yearBoutBegan, name="yearBoutBegan", curie=NEON.curie('yearBoutBegan'),
                      model_uri=NEON.yearBoutBegan, domain=None, range=Optional[int])

slots.PM15finalQFSciRvw = Slot(uri=NEON.PM15finalQFSciRvw, name="PM15finalQFSciRvw", curie=NEON.curie('PM15finalQFSciRvw'),
                      model_uri=NEON.PM15finalQFSciRvw, domain=None, range=Optional[str])

slots.PM10finalQFSciRvw = Slot(uri=NEON.PM10finalQFSciRvw, name="PM10finalQFSciRvw", curie=NEON.curie('PM10finalQFSciRvw'),
                      model_uri=NEON.PM10finalQFSciRvw, domain=None, range=Optional[str])

slots.dewTempFinalQFSciRvw = Slot(uri=NEON.dewTempFinalQFSciRvw, name="dewTempFinalQFSciRvw", curie=NEON.curie('dewTempFinalQFSciRvw'),
                      model_uri=NEON.dewTempFinalQFSciRvw, domain=None, range=Optional[str])

slots.PM10sub50RHfinalQFSciRvw = Slot(uri=NEON.PM10sub50RHfinalQFSciRvw, name="PM10sub50RHfinalQFSciRvw", curie=NEON.curie('PM10sub50RHfinalQFSciRvw'),
                      model_uri=NEON.PM10sub50RHfinalQFSciRvw, domain=None, range=Optional[str])

slots.PM15sub50RHfinalQFSciRvw = Slot(uri=NEON.PM15sub50RHfinalQFSciRvw, name="PM15sub50RHfinalQFSciRvw", curie=NEON.curie('PM15sub50RHfinalQFSciRvw'),
                      model_uri=NEON.PM15sub50RHfinalQFSciRvw, domain=None, range=Optional[str])

slots.PM1finalQFSciRvw = Slot(uri=NEON.PM1finalQFSciRvw, name="PM1finalQFSciRvw", curie=NEON.curie('PM1finalQFSciRvw'),
                      model_uri=NEON.PM1finalQFSciRvw, domain=None, range=Optional[str])

slots.PM1sub50RHfinalQFSciRvw = Slot(uri=NEON.PM1sub50RHfinalQFSciRvw, name="PM1sub50RHfinalQFSciRvw", curie=NEON.curie('PM1sub50RHfinalQFSciRvw'),
                      model_uri=NEON.PM1sub50RHfinalQFSciRvw, domain=None, range=Optional[str])

slots.PM2.5finalQFSciRvw = Slot(uri=NEON['PM2.5finalQFSciRvw'], name="PM2.5finalQFSciRvw", curie=NEON.curie('PM2.5finalQFSciRvw'),
                      model_uri=NEON['PM2.5finalQFSciRvw'], domain=None, range=Optional[str])

slots.PM2.5sub50RHfinalQFSciRvw = Slot(uri=NEON['PM2.5sub50RHfinalQFSciRvw'], name="PM2.5sub50RHfinalQFSciRvw", curie=NEON.curie('PM2.5sub50RHfinalQFSciRvw'),
                      model_uri=NEON['PM2.5sub50RHfinalQFSciRvw'], domain=None, range=Optional[str])

slots.PM4finalQFSciRvw = Slot(uri=NEON.PM4finalQFSciRvw, name="PM4finalQFSciRvw", curie=NEON.curie('PM4finalQFSciRvw'),
                      model_uri=NEON.PM4finalQFSciRvw, domain=None, range=Optional[str])

slots.PM4sub50RHfinalQFSciRvw = Slot(uri=NEON.PM4sub50RHfinalQFSciRvw, name="PM4sub50RHfinalQFSciRvw", curie=NEON.curie('PM4sub50RHfinalQFSciRvw'),
                      model_uri=NEON.PM4sub50RHfinalQFSciRvw, domain=None, range=Optional[str])

slots.RHFinalQFSciRvw = Slot(uri=NEON.RHFinalQFSciRvw, name="RHFinalQFSciRvw", curie=NEON.curie('RHFinalQFSciRvw'),
                      model_uri=NEON.RHFinalQFSciRvw, domain=None, range=Optional[str])

slots.tempRHFinalQFSciRvw = Slot(uri=NEON.tempRHFinalQFSciRvw, name="tempRHFinalQFSciRvw", curie=NEON.curie('tempRHFinalQFSciRvw'),
                      model_uri=NEON.tempRHFinalQFSciRvw, domain=None, range=Optional[str])

slots.dewTempValidCalFailQM = Slot(uri=NEON.dewTempValidCalFailQM, name="dewTempValidCalFailQM", curie=NEON.curie('dewTempValidCalFailQM'),
                      model_uri=NEON.dewTempValidCalFailQM, domain=None, range=Optional[float])

slots.dewTempValidCalNAQM = Slot(uri=NEON.dewTempValidCalNAQM, name="dewTempValidCalNAQM", curie=NEON.curie('dewTempValidCalNAQM'),
                      model_uri=NEON.dewTempValidCalNAQM, domain=None, range=Optional[float])

slots.dewTempValidCalPassQM = Slot(uri=NEON.dewTempValidCalPassQM, name="dewTempValidCalPassQM", curie=NEON.curie('dewTempValidCalPassQM'),
                      model_uri=NEON.dewTempValidCalPassQM, domain=None, range=Optional[float])

slots.dewTempValidCalQAQCRpt = Slot(uri=NEON.dewTempValidCalQAQCRpt, name="dewTempValidCalQAQCRpt", curie=NEON.curie('dewTempValidCalQAQCRpt'),
                      model_uri=NEON.dewTempValidCalQAQCRpt, domain=None, range=Optional[str])

slots.bareGround = Slot(uri=NEON.bareGround, name="bareGround", curie=NEON.curie('bareGround'),
                      model_uri=NEON.bareGround, domain=None, range=Optional[str])

slots.coreDiameter = Slot(uri=NEON.coreDiameter, name="coreDiameter", curie=NEON.curie('coreDiameter'),
                      model_uri=NEON.coreDiameter, domain=None, range=Optional[float])

slots.coreID = Slot(uri=NEON.coreID, name="coreID", curie=NEON.curie('coreID'),
                      model_uri=NEON.coreID, domain=None, range=Optional[str])

slots.dilutionSampleCode = Slot(uri=NEON.dilutionSampleCode, name="dilutionSampleCode", curie=NEON.curie('dilutionSampleCode'),
                      model_uri=NEON.dilutionSampleCode, domain=None, range=Optional[str])

slots.dilutionSampleFate = Slot(uri=NEON.dilutionSampleFate, name="dilutionSampleFate", curie=NEON.curie('dilutionSampleFate'),
                      model_uri=NEON.dilutionSampleFate, domain=None, range=Optional[str])

slots.dilutionSampleID = Slot(uri=NEON.dilutionSampleID, name="dilutionSampleID", curie=NEON.curie('dilutionSampleID'),
                      model_uri=NEON.dilutionSampleID, domain=None, range=Optional[str])

slots.dilutionSubsampleCode = Slot(uri=NEON.dilutionSubsampleCode, name="dilutionSubsampleCode", curie=NEON.curie('dilutionSubsampleCode'),
                      model_uri=NEON.dilutionSubsampleCode, domain=None, range=Optional[str])

slots.dilutionSubsampleFate = Slot(uri=NEON.dilutionSubsampleFate, name="dilutionSubsampleFate", curie=NEON.curie('dilutionSubsampleFate'),
                      model_uri=NEON.dilutionSubsampleFate, domain=None, range=Optional[str])

slots.dilutionSubsampleID = Slot(uri=NEON.dilutionSubsampleID, name="dilutionSubsampleID", curie=NEON.curie('dilutionSubsampleID'),
                      model_uri=NEON.dilutionSubsampleID, domain=None, range=Optional[str])

slots.dilutionSubsampleVolume = Slot(uri=NEON.dilutionSubsampleVolume, name="dilutionSubsampleVolume", curie=NEON.curie('dilutionSubsampleVolume'),
                      model_uri=NEON.dilutionSubsampleVolume, domain=None, range=Optional[float])

slots.monolithLength = Slot(uri=NEON.monolithLength, name="monolithLength", curie=NEON.curie('monolithLength'),
                      model_uri=NEON.monolithLength, domain=None, range=Optional[float])

slots.monolithWidth = Slot(uri=NEON.monolithWidth, name="monolithWidth", curie=NEON.curie('monolithWidth'),
                      model_uri=NEON.monolithWidth, domain=None, range=Optional[float])

slots.pooledSampleMass = Slot(uri=NEON.pooledSampleMass, name="pooledSampleMass", curie=NEON.curie('pooledSampleMass'),
                      model_uri=NEON.pooledSampleMass, domain=None, range=Optional[float])

slots.poolSampleCode = Slot(uri=NEON.poolSampleCode, name="poolSampleCode", curie=NEON.curie('poolSampleCode'),
                      model_uri=NEON.poolSampleCode, domain=None, range=Optional[str])

slots.poolSampleFate = Slot(uri=NEON.poolSampleFate, name="poolSampleFate", curie=NEON.curie('poolSampleFate'),
                      model_uri=NEON.poolSampleFate, domain=None, range=Optional[str])

slots.poolSampleID = Slot(uri=NEON.poolSampleID, name="poolSampleID", curie=NEON.curie('poolSampleID'),
                      model_uri=NEON.poolSampleID, domain=None, range=Optional[str])

slots.rootSampleArea = Slot(uri=NEON.rootSampleArea, name="rootSampleArea", curie=NEON.curie('rootSampleArea'),
                      model_uri=NEON.rootSampleArea, domain=None, range=Optional[float])

slots.rootSampleDepth = Slot(uri=NEON.rootSampleDepth, name="rootSampleDepth", curie=NEON.curie('rootSampleDepth'),
                      model_uri=NEON.rootSampleDepth, domain=None, range=Optional[float])

slots.rootSamplingMethod = Slot(uri=NEON.rootSamplingMethod, name="rootSamplingMethod", curie=NEON.curie('rootSamplingMethod'),
                      model_uri=NEON.rootSamplingMethod, domain=None, range=Optional[str])

slots.rootSamplingPossible = Slot(uri=NEON.rootSamplingPossible, name="rootSamplingPossible", curie=NEON.curie('rootSamplingPossible'),
                      model_uri=NEON.rootSamplingPossible, domain=None, range=Optional[str])

slots.somDryMass = Slot(uri=NEON.somDryMass, name="somDryMass", curie=NEON.curie('somDryMass'),
                      model_uri=NEON.somDryMass, domain=None, range=Optional[float])

slots.subsampleCodeList = Slot(uri=NEON.subsampleCodeList, name="subsampleCodeList", curie=NEON.curie('subsampleCodeList'),
                      model_uri=NEON.subsampleCodeList, domain=None, range=Optional[str])

slots.subsampleFateList = Slot(uri=NEON.subsampleFateList, name="subsampleFateList", curie=NEON.curie('subsampleFateList'),
                      model_uri=NEON.subsampleFateList, domain=None, range=Optional[str])

slots.wst10cmDist = Slot(uri=NEON.wst10cmDist, name="wst10cmDist", curie=NEON.curie('wst10cmDist'),
                      model_uri=NEON.wst10cmDist, domain=None, range=Optional[float])

slots.wst1cmDist = Slot(uri=NEON.wst1cmDist, name="wst1cmDist", curie=NEON.curie('wst1cmDist'),
                      model_uri=NEON.wst1cmDist, domain=None, range=Optional[float])

slots.VSICFinalQFSciRvw = Slot(uri=NEON.VSICFinalQFSciRvw, name="VSICFinalQFSciRvw", curie=NEON.curie('VSICFinalQFSciRvw'),
                      model_uri=NEON.VSICFinalQFSciRvw, domain=None, range=Optional[str])

slots.VSICValidCalFailQM = Slot(uri=NEON.VSICValidCalFailQM, name="VSICValidCalFailQM", curie=NEON.curie('VSICValidCalFailQM'),
                      model_uri=NEON.VSICValidCalFailQM, domain=None, range=Optional[float])

slots.VSICValidCalNAQM = Slot(uri=NEON.VSICValidCalNAQM, name="VSICValidCalNAQM", curie=NEON.curie('VSICValidCalNAQM'),
                      model_uri=NEON.VSICValidCalNAQM, domain=None, range=Optional[float])

slots.VSICValidCalPassQM = Slot(uri=NEON.VSICValidCalPassQM, name="VSICValidCalPassQM", curie=NEON.curie('VSICValidCalPassQM'),
                      model_uri=NEON.VSICValidCalPassQM, domain=None, range=Optional[float])

slots.VSICValidCalQAQCRpt = Slot(uri=NEON.VSICValidCalQAQCRpt, name="VSICValidCalQAQCRpt", curie=NEON.curie('VSICValidCalQAQCRpt'),
                      model_uri=NEON.VSICValidCalQAQCRpt, domain=None, range=Optional[str])

slots.VSWCFinalQFSciRvw = Slot(uri=NEON.VSWCFinalQFSciRvw, name="VSWCFinalQFSciRvw", curie=NEON.curie('VSWCFinalQFSciRvw'),
                      model_uri=NEON.VSWCFinalQFSciRvw, domain=None, range=Optional[str])

slots.VSWCValidCalFailQM = Slot(uri=NEON.VSWCValidCalFailQM, name="VSWCValidCalFailQM", curie=NEON.curie('VSWCValidCalFailQM'),
                      model_uri=NEON.VSWCValidCalFailQM, domain=None, range=Optional[float])

slots.VSWCValidCalNAQM = Slot(uri=NEON.VSWCValidCalNAQM, name="VSWCValidCalNAQM", curie=NEON.curie('VSWCValidCalNAQM'),
                      model_uri=NEON.VSWCValidCalNAQM, domain=None, range=Optional[float])

slots.VSWCValidCalPassQM = Slot(uri=NEON.VSWCValidCalPassQM, name="VSWCValidCalPassQM", curie=NEON.curie('VSWCValidCalPassQM'),
                      model_uri=NEON.VSWCValidCalPassQM, domain=None, range=Optional[float])

slots.VSWCValidCalQAQCRpt = Slot(uri=NEON.VSWCValidCalQAQCRpt, name="VSWCValidCalQAQCRpt", curie=NEON.curie('VSWCValidCalQAQCRpt'),
                      model_uri=NEON.VSWCValidCalQAQCRpt, domain=None, range=Optional[str])

slots.RHValidCalFailQM = Slot(uri=NEON.RHValidCalFailQM, name="RHValidCalFailQM", curie=NEON.curie('RHValidCalFailQM'),
                      model_uri=NEON.RHValidCalFailQM, domain=None, range=Optional[float])

slots.RHValidCalNAQM = Slot(uri=NEON.RHValidCalNAQM, name="RHValidCalNAQM", curie=NEON.curie('RHValidCalNAQM'),
                      model_uri=NEON.RHValidCalNAQM, domain=None, range=Optional[float])

slots.RHValidCalPassQM = Slot(uri=NEON.RHValidCalPassQM, name="RHValidCalPassQM", curie=NEON.curie('RHValidCalPassQM'),
                      model_uri=NEON.RHValidCalPassQM, domain=None, range=Optional[float])

slots.RHValidCalQAQCRpt = Slot(uri=NEON.RHValidCalQAQCRpt, name="RHValidCalQAQCRpt", curie=NEON.curie('RHValidCalQAQCRpt'),
                      model_uri=NEON.RHValidCalQAQCRpt, domain=None, range=Optional[str])

slots.tempRHValidCalFailQM = Slot(uri=NEON.tempRHValidCalFailQM, name="tempRHValidCalFailQM", curie=NEON.curie('tempRHValidCalFailQM'),
                      model_uri=NEON.tempRHValidCalFailQM, domain=None, range=Optional[float])

slots.tempRHValidCalNAQM = Slot(uri=NEON.tempRHValidCalNAQM, name="tempRHValidCalNAQM", curie=NEON.curie('tempRHValidCalNAQM'),
                      model_uri=NEON.tempRHValidCalNAQM, domain=None, range=Optional[float])

slots.tempRHValidCalPassQM = Slot(uri=NEON.tempRHValidCalPassQM, name="tempRHValidCalPassQM", curie=NEON.curie('tempRHValidCalPassQM'),
                      model_uri=NEON.tempRHValidCalPassQM, domain=None, range=Optional[float])

slots.tempRHValidCalQAQCRpt = Slot(uri=NEON.tempRHValidCalQAQCRpt, name="tempRHValidCalQAQCRpt", curie=NEON.curie('tempRHValidCalQAQCRpt'),
                      model_uri=NEON.tempRHValidCalQAQCRpt, domain=None, range=Optional[str])

slots.sWatElevFinalQFSciRvw = Slot(uri=NEON.sWatElevFinalQFSciRvw, name="sWatElevFinalQFSciRvw", curie=NEON.curie('sWatElevFinalQFSciRvw'),
                      model_uri=NEON.sWatElevFinalQFSciRvw, domain=None, range=Optional[str])

slots.gWatElevFinalQFSciRvw = Slot(uri=NEON.gWatElevFinalQFSciRvw, name="gWatElevFinalQFSciRvw", curie=NEON.curie('gWatElevFinalQFSciRvw'),
                      model_uri=NEON.gWatElevFinalQFSciRvw, domain=None, range=Optional[str])

slots.gWatSCondFinalQFSciRvw = Slot(uri=NEON.gWatSCondFinalQFSciRvw, name="gWatSCondFinalQFSciRvw", curie=NEON.curie('gWatSCondFinalQFSciRvw'),
                      model_uri=NEON.gWatSCondFinalQFSciRvw, domain=None, range=Optional[str])

slots.gWatTempFinalQFSciRvw = Slot(uri=NEON.gWatTempFinalQFSciRvw, name="gWatTempFinalQFSciRvw", curie=NEON.curie('gWatTempFinalQFSciRvw'),
                      model_uri=NEON.gWatTempFinalQFSciRvw, domain=None, range=Optional[str])

slots.sciRvwQF = Slot(uri=NEON.sciRvwQF, name="sciRvwQF", curie=NEON.curie('sciRvwQF'),
                      model_uri=NEON.sciRvwQF, domain=None, range=Optional[str])

slots.tsdWaterTempFinalQFSciRvw = Slot(uri=NEON.tsdWaterTempFinalQFSciRvw, name="tsdWaterTempFinalQFSciRvw", curie=NEON.curie('tsdWaterTempFinalQFSciRvw'),
                      model_uri=NEON.tsdWaterTempFinalQFSciRvw, domain=None, range=Optional[str])

slots.adjCountPerBottle = Slot(uri=NEON.adjCountPerBottle, name="adjCountPerBottle", curie=NEON.curie('adjCountPerBottle'),
                      model_uri=NEON.adjCountPerBottle, domain=None, range=Optional[float])

slots.referencePhotoCode = Slot(uri=NEON.referencePhotoCode, name="referencePhotoCode", curie=NEON.curie('referencePhotoCode'),
                      model_uri=NEON.referencePhotoCode, domain=None, range=Optional[str])

slots.towsTrapsVolume = Slot(uri=NEON.towsTrapsVolume, name="towsTrapsVolume", curie=NEON.curie('towsTrapsVolume'),
                      model_uri=NEON.towsTrapsVolume, domain=None, range=Optional[float])

slots.zooVolumePerBottle = Slot(uri=NEON.zooVolumePerBottle, name="zooVolumePerBottle", curie=NEON.curie('zooVolumePerBottle'),
                      model_uri=NEON.zooVolumePerBottle, domain=None, range=Optional[float])

slots.agWellOpticalDensity = Slot(uri=NEON.agWellOpticalDensity, name="agWellOpticalDensity", curie=NEON.curie('agWellOpticalDensity'),
                      model_uri=NEON.agWellOpticalDensity, domain=None, range=Optional[float])

slots.cAgWellOpticalDensity = Slot(uri=NEON.cAgWellOpticalDensity, name="cAgWellOpticalDensity", curie=NEON.curie('cAgWellOpticalDensity'),
                      model_uri=NEON.cAgWellOpticalDensity, domain=None, range=Optional[float])

slots.conjugateDilution = Slot(uri=NEON.conjugateDilution, name="conjugateDilution", curie=NEON.curie('conjugateDilution'),
                      model_uri=NEON.conjugateDilution, domain=None, range=Optional[str])

slots.conjugateLot = Slot(uri=NEON.conjugateLot, name="conjugateLot", curie=NEON.curie('conjugateLot'),
                      model_uri=NEON.conjugateLot, domain=None, range=Optional[str])

slots.diluentDilution = Slot(uri=NEON.diluentDilution, name="diluentDilution", curie=NEON.curie('diluentDilution'),
                      model_uri=NEON.diluentDilution, domain=None, range=Optional[str])

slots.diluentLot = Slot(uri=NEON.diluentLot, name="diluentLot", curie=NEON.curie('diluentLot'),
                      model_uri=NEON.diluentLot, domain=None, range=Optional[str])

slots.internalLabBarcode = Slot(uri=NEON.internalLabBarcode, name="internalLabBarcode", curie=NEON.curie('internalLabBarcode'),
                      model_uri=NEON.internalLabBarcode, domain=None, range=Optional[str])

slots.internalLabFate = Slot(uri=NEON.internalLabFate, name="internalLabFate", curie=NEON.curie('internalLabFate'),
                      model_uri=NEON.internalLabFate, domain=None, range=Optional[str])

slots.negAbDilution = Slot(uri=NEON.negAbDilution, name="negAbDilution", curie=NEON.curie('negAbDilution'),
                      model_uri=NEON.negAbDilution, domain=None, range=Optional[str])

slots.negAbLot = Slot(uri=NEON.negAbLot, name="negAbLot", curie=NEON.curie('negAbLot'),
                      model_uri=NEON.negAbLot, domain=None, range=Optional[str])

slots.netOpticalDensity = Slot(uri=NEON.netOpticalDensity, name="netOpticalDensity", curie=NEON.curie('netOpticalDensity'),
                      model_uri=NEON.netOpticalDensity, domain=None, range=Optional[float])

slots.plateLot = Slot(uri=NEON.plateLot, name="plateLot", curie=NEON.curie('plateLot'),
                      model_uri=NEON.plateLot, domain=None, range=Optional[str])

slots.posAbDilution = Slot(uri=NEON.posAbDilution, name="posAbDilution", curie=NEON.curie('posAbDilution'),
                      model_uri=NEON.posAbDilution, domain=None, range=Optional[str])

slots.posAbLot = Slot(uri=NEON.posAbLot, name="posAbLot", curie=NEON.curie('posAbLot'),
                      model_uri=NEON.posAbLot, domain=None, range=Optional[str])

slots.rawTestResult = Slot(uri=NEON.rawTestResult, name="rawTestResult", curie=NEON.curie('rawTestResult'),
                      model_uri=NEON.rawTestResult, domain=None, range=Optional[str])

slots.substrateLot = Slot(uri=NEON.substrateLot, name="substrateLot", curie=NEON.curie('substrateLot'),
                      model_uri=NEON.substrateLot, domain=None, range=Optional[str])

slots.substrateTime = Slot(uri=NEON.substrateTime, name="substrateTime", curie=NEON.curie('substrateTime'),
                      model_uri=NEON.substrateTime, domain=None, range=Optional[float])

slots.priPrecipFinalQFSciRvw = Slot(uri=NEON.priPrecipFinalQFSciRvw, name="priPrecipFinalQFSciRvw", curie=NEON.curie('priPrecipFinalQFSciRvw'),
                      model_uri=NEON.priPrecipFinalQFSciRvw, domain=None, range=Optional[str])

slots.priPrecipValidCalQF = Slot(uri=NEON.priPrecipValidCalQF, name="priPrecipValidCalQF", curie=NEON.curie('priPrecipValidCalQF'),
                      model_uri=NEON.priPrecipValidCalQF, domain=None, range=Optional[int])

slots.secPrecipSciRvwQF = Slot(uri=NEON.secPrecipSciRvwQF, name="secPrecipSciRvwQF", curie=NEON.curie('secPrecipSciRvwQF'),
                      model_uri=NEON.secPrecipSciRvwQF, domain=None, range=Optional[str])

slots.secPrecipValidCalQF = Slot(uri=NEON.secPrecipValidCalQF, name="secPrecipValidCalQF", curie=NEON.curie('secPrecipValidCalQF'),
                      model_uri=NEON.secPrecipValidCalQF, domain=None, range=Optional[int])

slots.TFPrecipSciRvwQF = Slot(uri=NEON.TFPrecipSciRvwQF, name="TFPrecipSciRvwQF", curie=NEON.curie('TFPrecipSciRvwQF'),
                      model_uri=NEON.TFPrecipSciRvwQF, domain=None, range=Optional[str])

slots.TFPrecipValidCalQF = Slot(uri=NEON.TFPrecipValidCalQF, name="TFPrecipValidCalQF", curie=NEON.curie('TFPrecipValidCalQF'),
                      model_uri=NEON.TFPrecipValidCalQF, domain=None, range=Optional[int])

slots.vstTag = Slot(uri=NEON.vstTag, name="vstTag", curie=NEON.curie('vstTag'),
                      model_uri=NEON.vstTag, domain=None, range=Optional[str])

slots.nullFieldValidation = Slot(uri=NEON.nullFieldValidation, name="nullFieldValidation", curie=NEON.curie('nullFieldValidation'),
                      model_uri=NEON.nullFieldValidation, domain=None, range=Optional[float])

slots.aGroupHeight = Slot(uri=NEON.aGroupHeight, name="aGroupHeight", curie=NEON.curie('aGroupHeight'),
                      model_uri=NEON.aGroupHeight, domain=None, range=Optional[float])

slots.bGroupHeight = Slot(uri=NEON.bGroupHeight, name="bGroupHeight", curie=NEON.curie('bGroupHeight'),
                      model_uri=NEON.bGroupHeight, domain=None, range=Optional[float])

slots.cGroupHeight = Slot(uri=NEON.cGroupHeight, name="cGroupHeight", curie=NEON.curie('cGroupHeight'),
                      model_uri=NEON.cGroupHeight, domain=None, range=Optional[float])

slots.dGroupHeight = Slot(uri=NEON.dGroupHeight, name="dGroupHeight", curie=NEON.curie('dGroupHeight'),
                      model_uri=NEON.dGroupHeight, domain=None, range=Optional[float])

slots.eGroupHeight = Slot(uri=NEON.eGroupHeight, name="eGroupHeight", curie=NEON.curie('eGroupHeight'),
                      model_uri=NEON.eGroupHeight, domain=None, range=Optional[float])

slots.basalStemDiameter = Slot(uri=NEON.basalStemDiameter, name="basalStemDiameter", curie=NEON.curie('basalStemDiameter'),
                      model_uri=NEON.basalStemDiameter, domain=None, range=Optional[float])

slots.basalStemDiameterMsrmntHeight = Slot(uri=NEON.basalStemDiameterMsrmntHeight, name="basalStemDiameterMsrmntHeight", curie=NEON.curie('basalStemDiameterMsrmntHeight'),
                      model_uri=NEON.basalStemDiameterMsrmntHeight, domain=None, range=Optional[float])

slots.baseCrownHeight = Slot(uri=NEON.baseCrownHeight, name="baseCrownHeight", curie=NEON.curie('baseCrownHeight'),
                      model_uri=NEON.baseCrownHeight, domain=None, range=Optional[float])

slots.branchCount = Slot(uri=NEON.branchCount, name="branchCount", curie=NEON.curie('branchCount'),
                      model_uri=NEON.branchCount, domain=None, range=Optional[str])

slots.breakDiameter = Slot(uri=NEON.breakDiameter, name="breakDiameter", curie=NEON.curie('breakDiameter'),
                      model_uri=NEON.breakDiameter, domain=None, range=Optional[float])

slots.breakHeight = Slot(uri=NEON.breakHeight, name="breakHeight", curie=NEON.curie('breakHeight'),
                      model_uri=NEON.breakHeight, domain=None, range=Optional[float])

slots.cactiAbsentList = Slot(uri=NEON.cactiAbsentList, name="cactiAbsentList", curie=NEON.curie('cactiAbsentList'),
                      model_uri=NEON.cactiAbsentList, domain=None, range=Optional[str])

slots.cactiPresent = Slot(uri=NEON.cactiPresent, name="cactiPresent", curie=NEON.curie('cactiPresent'),
                      model_uri=NEON.cactiPresent, domain=None, range=Optional[str])

slots.canopyArea = Slot(uri=NEON.canopyArea, name="canopyArea", curie=NEON.curie('canopyArea'),
                      model_uri=NEON.canopyArea, domain=None, range=Optional[float])

slots.cfcOnlyTag = Slot(uri=NEON.cfcOnlyTag, name="cfcOnlyTag", curie=NEON.curie('cfcOnlyTag'),
                      model_uri=NEON.cfcOnlyTag, domain=None, range=Optional[str])

slots.deadPercent = Slot(uri=NEON.deadPercent, name="deadPercent", curie=NEON.curie('deadPercent'),
                      model_uri=NEON.deadPercent, domain=None, range=Optional[float])

slots.fernsAbsentList = Slot(uri=NEON.fernsAbsentList, name="fernsAbsentList", curie=NEON.curie('fernsAbsentList'),
                      model_uri=NEON.fernsAbsentList, domain=None, range=Optional[str])

slots.fernsPresent = Slot(uri=NEON.fernsPresent, name="fernsPresent", curie=NEON.curie('fernsPresent'),
                      model_uri=NEON.fernsPresent, domain=None, range=Optional[str])

slots.groupID = Slot(uri=NEON.groupID, name="groupID", curie=NEON.curie('groupID'),
                      model_uri=NEON.groupID, domain=None, range=Optional[str])

slots.leafNumber = Slot(uri=NEON.leafNumber, name="leafNumber", curie=NEON.curie('leafNumber'),
                      model_uri=NEON.leafNumber, domain=None, range=Optional[str])

slots.lianasAbsentList = Slot(uri=NEON.lianasAbsentList, name="lianasAbsentList", curie=NEON.curie('lianasAbsentList'),
                      model_uri=NEON.lianasAbsentList, domain=None, range=Optional[str])

slots.lianasPresent = Slot(uri=NEON.lianasPresent, name="lianasPresent", curie=NEON.curie('lianasPresent'),
                      model_uri=NEON.lianasPresent, domain=None, range=Optional[str])

slots.livePercent = Slot(uri=NEON.livePercent, name="livePercent", curie=NEON.curie('livePercent'),
                      model_uri=NEON.livePercent, domain=None, range=Optional[float])

slots.maxBaseCrownDiameter = Slot(uri=NEON.maxBaseCrownDiameter, name="maxBaseCrownDiameter", curie=NEON.curie('maxBaseCrownDiameter'),
                      model_uri=NEON.maxBaseCrownDiameter, domain=None, range=Optional[float])

slots.maxCrownDiameter = Slot(uri=NEON.maxCrownDiameter, name="maxCrownDiameter", curie=NEON.curie('maxCrownDiameter'),
                      model_uri=NEON.maxCrownDiameter, domain=None, range=Optional[float])

slots.meanBasalDiameter = Slot(uri=NEON.meanBasalDiameter, name="meanBasalDiameter", curie=NEON.curie('meanBasalDiameter'),
                      model_uri=NEON.meanBasalDiameter, domain=None, range=Optional[float])

slots.meanBladeLength = Slot(uri=NEON.meanBladeLength, name="meanBladeLength", curie=NEON.curie('meanBladeLength'),
                      model_uri=NEON.meanBladeLength, domain=None, range=Optional[float])

slots.meanBranchLength = Slot(uri=NEON.meanBranchLength, name="meanBranchLength", curie=NEON.curie('meanBranchLength'),
                      model_uri=NEON.meanBranchLength, domain=None, range=Optional[float])

slots.meanHeight = Slot(uri=NEON.meanHeight, name="meanHeight", curie=NEON.curie('meanHeight'),
                      model_uri=NEON.meanHeight, domain=None, range=Optional[float])

slots.meanLeafLength = Slot(uri=NEON.meanLeafLength, name="meanLeafLength", curie=NEON.curie('meanLeafLength'),
                      model_uri=NEON.meanLeafLength, domain=None, range=Optional[float])

slots.meanPetioleLength = Slot(uri=NEON.meanPetioleLength, name="meanPetioleLength", curie=NEON.curie('meanPetioleLength'),
                      model_uri=NEON.meanPetioleLength, domain=None, range=Optional[float])

slots.nestedSubplotAreaLiana = Slot(uri=NEON.nestedSubplotAreaLiana, name="nestedSubplotAreaLiana", curie=NEON.curie('nestedSubplotAreaLiana'),
                      model_uri=NEON.nestedSubplotAreaLiana, domain=None, range=Optional[str])

slots.nestedSubplotAreaOther = Slot(uri=NEON.nestedSubplotAreaOther, name="nestedSubplotAreaOther", curie=NEON.curie('nestedSubplotAreaOther'),
                      model_uri=NEON.nestedSubplotAreaOther, domain=None, range=Optional[str])

slots.nestedSubplotAreaShrubSapling = Slot(uri=NEON.nestedSubplotAreaShrubSapling, name="nestedSubplotAreaShrubSapling", curie=NEON.curie('nestedSubplotAreaShrubSapling'),
                      model_uri=NEON.nestedSubplotAreaShrubSapling, domain=None, range=Optional[str])

slots.nestedSubplotID = Slot(uri=NEON.nestedSubplotID, name="nestedSubplotID", curie=NEON.curie('nestedSubplotID'),
                      model_uri=NEON.nestedSubplotID, domain=None, range=Optional[str])

slots.newPadCount = Slot(uri=NEON.newPadCount, name="newPadCount", curie=NEON.curie('newPadCount'),
                      model_uri=NEON.newPadCount, domain=None, range=Optional[str])

slots.ninetyBaseCrownDiameter = Slot(uri=NEON.ninetyBaseCrownDiameter, name="ninetyBaseCrownDiameter", curie=NEON.curie('ninetyBaseCrownDiameter'),
                      model_uri=NEON.ninetyBaseCrownDiameter, domain=None, range=Optional[float])

slots.ninetyCrownDiameter = Slot(uri=NEON.ninetyCrownDiameter, name="ninetyCrownDiameter", curie=NEON.curie('ninetyCrownDiameter'),
                      model_uri=NEON.ninetyCrownDiameter, domain=None, range=Optional[float])

slots.ocotillosAbsentList = Slot(uri=NEON.ocotillosAbsentList, name="ocotillosAbsentList", curie=NEON.curie('ocotillosAbsentList'),
                      model_uri=NEON.ocotillosAbsentList, domain=None, range=Optional[str])

slots.ocotillosPresent = Slot(uri=NEON.ocotillosPresent, name="ocotillosPresent", curie=NEON.curie('ocotillosPresent'),
                      model_uri=NEON.ocotillosPresent, domain=None, range=Optional[str])

slots.oldPadCount = Slot(uri=NEON.oldPadCount, name="oldPadCount", curie=NEON.curie('oldPadCount'),
                      model_uri=NEON.oldPadCount, domain=None, range=Optional[str])

slots.palmsAbsentList = Slot(uri=NEON.palmsAbsentList, name="palmsAbsentList", curie=NEON.curie('palmsAbsentList'),
                      model_uri=NEON.palmsAbsentList, domain=None, range=Optional[str])

slots.palmsPresent = Slot(uri=NEON.palmsPresent, name="palmsPresent", curie=NEON.curie('palmsPresent'),
                      model_uri=NEON.palmsPresent, domain=None, range=Optional[str])

slots.previouslyTaggedAs = Slot(uri=NEON.previouslyTaggedAs, name="previouslyTaggedAs", curie=NEON.curie('previouslyTaggedAs'),
                      model_uri=NEON.previouslyTaggedAs, domain=None, range=Optional[str])

slots.shape = Slot(uri=NEON.shape, name="shape", curie=NEON.curie('shape'),
                      model_uri=NEON.shape, domain=None, range=Optional[str])

slots.shrubsAbsentList = Slot(uri=NEON.shrubsAbsentList, name="shrubsAbsentList", curie=NEON.curie('shrubsAbsentList'),
                      model_uri=NEON.shrubsAbsentList, domain=None, range=Optional[str])

slots.shrubsPresent = Slot(uri=NEON.shrubsPresent, name="shrubsPresent", curie=NEON.curie('shrubsPresent'),
                      model_uri=NEON.shrubsPresent, domain=None, range=Optional[str])

slots.stemAzimuth = Slot(uri=NEON.stemAzimuth, name="stemAzimuth", curie=NEON.curie('stemAzimuth'),
                      model_uri=NEON.stemAzimuth, domain=None, range=Optional[float])

slots.stemCount = Slot(uri=NEON.stemCount, name="stemCount", curie=NEON.curie('stemCount'),
                      model_uri=NEON.stemCount, domain=None, range=Optional[str])

slots.stemDistance = Slot(uri=NEON.stemDistance, name="stemDistance", curie=NEON.curie('stemDistance'),
                      model_uri=NEON.stemDistance, domain=None, range=Optional[float])

slots.supportingStemIndividualID = Slot(uri=NEON.supportingStemIndividualID, name="supportingStemIndividualID", curie=NEON.curie('supportingStemIndividualID'),
                      model_uri=NEON.supportingStemIndividualID, domain=None, range=Optional[str])

slots.supportingStemTagID = Slot(uri=NEON.supportingStemTagID, name="supportingStemTagID", curie=NEON.curie('supportingStemTagID'),
                      model_uri=NEON.supportingStemTagID, domain=None, range=Optional[str])

slots.totalSampledAreaLiana = Slot(uri=NEON.totalSampledAreaLiana, name="totalSampledAreaLiana", curie=NEON.curie('totalSampledAreaLiana'),
                      model_uri=NEON.totalSampledAreaLiana, domain=None, range=Optional[float])

slots.totalSampledAreaOther = Slot(uri=NEON.totalSampledAreaOther, name="totalSampledAreaOther", curie=NEON.curie('totalSampledAreaOther'),
                      model_uri=NEON.totalSampledAreaOther, domain=None, range=Optional[float])

slots.totalSampledAreaShrubSapling = Slot(uri=NEON.totalSampledAreaShrubSapling, name="totalSampledAreaShrubSapling", curie=NEON.curie('totalSampledAreaShrubSapling'),
                      model_uri=NEON.totalSampledAreaShrubSapling, domain=None, range=Optional[float])

slots.totalSampledAreaTrees = Slot(uri=NEON.totalSampledAreaTrees, name="totalSampledAreaTrees", curie=NEON.curie('totalSampledAreaTrees'),
                      model_uri=NEON.totalSampledAreaTrees, domain=None, range=Optional[float])

slots.treesAbsentList = Slot(uri=NEON.treesAbsentList, name="treesAbsentList", curie=NEON.curie('treesAbsentList'),
                      model_uri=NEON.treesAbsentList, domain=None, range=Optional[str])

slots.treesPresent = Slot(uri=NEON.treesPresent, name="treesPresent", curie=NEON.curie('treesPresent'),
                      model_uri=NEON.treesPresent, domain=None, range=Optional[str])

slots.vdApexBreakHeight = Slot(uri=NEON.vdApexBreakHeight, name="vdApexBreakHeight", curie=NEON.curie('vdApexBreakHeight'),
                      model_uri=NEON.vdApexBreakHeight, domain=None, range=Optional[float])

slots.vdApexHeight = Slot(uri=NEON.vdApexHeight, name="vdApexHeight", curie=NEON.curie('vdApexHeight'),
                      model_uri=NEON.vdApexHeight, domain=None, range=Optional[float])

slots.vdBaseBreakHeight = Slot(uri=NEON.vdBaseBreakHeight, name="vdBaseBreakHeight", curie=NEON.curie('vdBaseBreakHeight'),
                      model_uri=NEON.vdBaseBreakHeight, domain=None, range=Optional[float])

slots.vdBaseHeight = Slot(uri=NEON.vdBaseHeight, name="vdBaseHeight", curie=NEON.curie('vdBaseHeight'),
                      model_uri=NEON.vdBaseHeight, domain=None, range=Optional[float])

slots.volumePercent = Slot(uri=NEON.volumePercent, name="volumePercent", curie=NEON.curie('volumePercent'),
                      model_uri=NEON.volumePercent, domain=None, range=Optional[float])

slots.vstBarcode = Slot(uri=NEON.vstBarcode, name="vstBarcode", curie=NEON.curie('vstBarcode'),
                      model_uri=NEON.vstBarcode, domain=None, range=Optional[str])

slots.vstFate = Slot(uri=NEON.vstFate, name="vstFate", curie=NEON.curie('vstFate'),
                      model_uri=NEON.vstFate, domain=None, range=Optional[str])

slots.vstID = Slot(uri=NEON.vstID, name="vstID", curie=NEON.curie('vstID'),
                      model_uri=NEON.vstID, domain=None, range=Optional[str])

slots.xerophyllumAbsentList = Slot(uri=NEON.xerophyllumAbsentList, name="xerophyllumAbsentList", curie=NEON.curie('xerophyllumAbsentList'),
                      model_uri=NEON.xerophyllumAbsentList, domain=None, range=Optional[str])

slots.xerophyllumPresent = Slot(uri=NEON.xerophyllumPresent, name="xerophyllumPresent", curie=NEON.curie('xerophyllumPresent'),
                      model_uri=NEON.xerophyllumPresent, domain=None, range=Optional[str])

slots.yuccasAbsentList = Slot(uri=NEON.yuccasAbsentList, name="yuccasAbsentList", curie=NEON.curie('yuccasAbsentList'),
                      model_uri=NEON.yuccasAbsentList, domain=None, range=Optional[str])

slots.yuccasPresent = Slot(uri=NEON.yuccasPresent, name="yuccasPresent", curie=NEON.curie('yuccasPresent'),
                      model_uri=NEON.yuccasPresent, domain=None, range=Optional[str])

slots.padCountValidation = Slot(uri=NEON.padCountValidation, name="padCountValidation", curie=NEON.curie('padCountValidation'),
                      model_uri=NEON.padCountValidation, domain=None, range=Optional[str])

slots.acidity = Slot(uri=NEON.acidity, name="acidity", curie=NEON.curie('acidity'),
                      model_uri=NEON.acidity, domain=None, range=Optional[float])

slots.acidOxalateMethod = Slot(uri=NEON.acidOxalateMethod, name="acidOxalateMethod", curie=NEON.curie('acidOxalateMethod'),
                      model_uri=NEON.acidOxalateMethod, domain=None, range=Optional[str])

slots.acidOxalateMethodPub = Slot(uri=NEON.acidOxalateMethodPub, name="acidOxalateMethodPub", curie=NEON.curie('acidOxalateMethodPub'),
                      model_uri=NEON.acidOxalateMethodPub, domain=None, range=Optional[str])

slots.acidOxalateProcessedDate = Slot(uri=NEON.acidOxalateProcessedDate, name="acidOxalateProcessedDate", curie=NEON.curie('acidOxalateProcessedDate'),
                      model_uri=NEON.acidOxalateProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.airDryOvenDryMethod = Slot(uri=NEON.airDryOvenDryMethod, name="airDryOvenDryMethod", curie=NEON.curie('airDryOvenDryMethod'),
                      model_uri=NEON.airDryOvenDryMethod, domain=None, range=Optional[str])

slots.airDryOvenDryMethodPub = Slot(uri=NEON.airDryOvenDryMethodPub, name="airDryOvenDryMethodPub", curie=NEON.curie('airDryOvenDryMethodPub'),
                      model_uri=NEON.airDryOvenDryMethodPub, domain=None, range=Optional[str])

slots.airDryOvenDryProcessedDate = Slot(uri=NEON.airDryOvenDryProcessedDate, name="airDryOvenDryProcessedDate", curie=NEON.curie('airDryOvenDryProcessedDate'),
                      model_uri=NEON.airDryOvenDryProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.airDryOvenDryRatio = Slot(uri=NEON.airDryOvenDryRatio, name="airDryOvenDryRatio", curie=NEON.curie('airDryOvenDryRatio'),
                      model_uri=NEON.airDryOvenDryRatio, domain=None, range=Optional[float])

slots.alCitDithionate = Slot(uri=NEON.alCitDithionate, name="alCitDithionate", curie=NEON.curie('alCitDithionate'),
                      model_uri=NEON.alCitDithionate, domain=None, range=Optional[float])

slots.alOxalate = Slot(uri=NEON.alOxalate, name="alOxalate", curie=NEON.curie('alOxalate'),
                      model_uri=NEON.alOxalate, domain=None, range=Optional[float])

slots.archiveCode = Slot(uri=NEON.archiveCode, name="archiveCode", curie=NEON.curie('archiveCode'),
                      model_uri=NEON.archiveCode, domain=None, range=Optional[str])

slots.archiveRemarks = Slot(uri=NEON.archiveRemarks, name="archiveRemarks", curie=NEON.curie('archiveRemarks'),
                      model_uri=NEON.archiveRemarks, domain=None, range=Optional[str])

slots.Bray1PExtractable = Slot(uri=NEON.Bray1PExtractable, name="Bray1PExtractable", curie=NEON.curie('Bray1PExtractable'),
                      model_uri=NEON.Bray1PExtractable, domain=None, range=Optional[float])

slots.Bray1PMethod = Slot(uri=NEON.Bray1PMethod, name="Bray1PMethod", curie=NEON.curie('Bray1PMethod'),
                      model_uri=NEON.Bray1PMethod, domain=None, range=Optional[str])

slots.Bray1PMethodPub = Slot(uri=NEON.Bray1PMethodPub, name="Bray1PMethodPub", curie=NEON.curie('Bray1PMethodPub'),
                      model_uri=NEON.Bray1PMethodPub, domain=None, range=Optional[str])

slots.Bray1PProcessedDate = Slot(uri=NEON.Bray1PProcessedDate, name="Bray1PProcessedDate", curie=NEON.curie('Bray1PProcessedDate'),
                      model_uri=NEON.Bray1PProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.bulkDensFieldMoist = Slot(uri=NEON.bulkDensFieldMoist, name="bulkDensFieldMoist", curie=NEON.curie('bulkDensFieldMoist'),
                      model_uri=NEON.bulkDensFieldMoist, domain=None, range=Optional[float])

slots.bulkDensMethod = Slot(uri=NEON.bulkDensMethod, name="bulkDensMethod", curie=NEON.curie('bulkDensMethod'),
                      model_uri=NEON.bulkDensMethod, domain=None, range=Optional[str])

slots.bulkDensMethodPub = Slot(uri=NEON.bulkDensMethodPub, name="bulkDensMethodPub", curie=NEON.curie('bulkDensMethodPub'),
                      model_uri=NEON.bulkDensMethodPub, domain=None, range=Optional[str])

slots.bulkDensOvenDry = Slot(uri=NEON.bulkDensOvenDry, name="bulkDensOvenDry", curie=NEON.curie('bulkDensOvenDry'),
                      model_uri=NEON.bulkDensOvenDry, domain=None, range=Optional[float])

slots.bulkDensProcessedDate = Slot(uri=NEON.bulkDensProcessedDate, name="bulkDensProcessedDate", curie=NEON.curie('bulkDensProcessedDate'),
                      model_uri=NEON.bulkDensProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.bulkDensThirdBar = Slot(uri=NEON.bulkDensThirdBar, name="bulkDensThirdBar", curie=NEON.curie('bulkDensThirdBar'),
                      model_uri=NEON.bulkDensThirdBar, domain=None, range=Optional[float])

slots.bulkDensWidth = Slot(uri=NEON.bulkDensWidth, name="bulkDensWidth", curie=NEON.curie('bulkDensWidth'),
                      model_uri=NEON.bulkDensWidth, domain=None, range=Optional[float])

slots.caco3Method = Slot(uri=NEON.caco3Method, name="caco3Method", curie=NEON.curie('caco3Method'),
                      model_uri=NEON.caco3Method, domain=None, range=Optional[str])

slots.caco3MethodPub = Slot(uri=NEON.caco3MethodPub, name="caco3MethodPub", curie=NEON.curie('caco3MethodPub'),
                      model_uri=NEON.caco3MethodPub, domain=None, range=Optional[str])

slots.caco3ProcessedDate = Slot(uri=NEON.caco3ProcessedDate, name="caco3ProcessedDate", curie=NEON.curie('caco3ProcessedDate'),
                      model_uri=NEON.caco3ProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.cecMethod = Slot(uri=NEON.cecMethod, name="cecMethod", curie=NEON.curie('cecMethod'),
                      model_uri=NEON.cecMethod, domain=None, range=Optional[str])

slots.cecMethodPub = Slot(uri=NEON.cecMethodPub, name="cecMethodPub", curie=NEON.curie('cecMethodPub'),
                      model_uri=NEON.cecMethodPub, domain=None, range=Optional[str])

slots.cecProcessedDate = Slot(uri=NEON.cecProcessedDate, name="cecProcessedDate", curie=NEON.curie('cecProcessedDate'),
                      model_uri=NEON.cecProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.citrateDithioMethod = Slot(uri=NEON.citrateDithioMethod, name="citrateDithioMethod", curie=NEON.curie('citrateDithioMethod'),
                      model_uri=NEON.citrateDithioMethod, domain=None, range=Optional[str])

slots.citrateDithioMethodPub = Slot(uri=NEON.citrateDithioMethodPub, name="citrateDithioMethodPub", curie=NEON.curie('citrateDithioMethodPub'),
                      model_uri=NEON.citrateDithioMethodPub, domain=None, range=Optional[str])

slots.citrateDithioProcessedDate = Slot(uri=NEON.citrateDithioProcessedDate, name="citrateDithioProcessedDate", curie=NEON.curie('citrateDithioProcessedDate'),
                      model_uri=NEON.citrateDithioProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.ctonRatio = Slot(uri=NEON.ctonRatio, name="ctonRatio", curie=NEON.curie('ctonRatio'),
                      model_uri=NEON.ctonRatio, domain=None, range=Optional[float])

slots.ecMethod = Slot(uri=NEON.ecMethod, name="ecMethod", curie=NEON.curie('ecMethod'),
                      model_uri=NEON.ecMethod, domain=None, range=Optional[str])

slots.ecMethodPub = Slot(uri=NEON.ecMethodPub, name="ecMethodPub", curie=NEON.curie('ecMethodPub'),
                      model_uri=NEON.ecMethodPub, domain=None, range=Optional[str])

slots.ecProcessedDate = Slot(uri=NEON.ecProcessedDate, name="ecProcessedDate", curie=NEON.curie('ecProcessedDate'),
                      model_uri=NEON.ecProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.extractAcidityMethod = Slot(uri=NEON.extractAcidityMethod, name="extractAcidityMethod", curie=NEON.curie('extractAcidityMethod'),
                      model_uri=NEON.extractAcidityMethod, domain=None, range=Optional[str])

slots.extractAcidityMethodPub = Slot(uri=NEON.extractAcidityMethodPub, name="extractAcidityMethodPub", curie=NEON.curie('extractAcidityMethodPub'),
                      model_uri=NEON.extractAcidityMethodPub, domain=None, range=Optional[str])

slots.extractAcidityProcessedDate = Slot(uri=NEON.extractAcidityProcessedDate, name="extractAcidityProcessedDate", curie=NEON.curie('extractAcidityProcessedDate'),
                      model_uri=NEON.extractAcidityProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.feCitDithionate = Slot(uri=NEON.feCitDithionate, name="feCitDithionate", curie=NEON.curie('feCitDithionate'),
                      model_uri=NEON.feCitDithionate, domain=None, range=Optional[float])

slots.feOxalate = Slot(uri=NEON.feOxalate, name="feOxalate", curie=NEON.curie('feOxalate'),
                      model_uri=NEON.feOxalate, domain=None, range=Optional[float])

slots.fieldWaterContent = Slot(uri=NEON.fieldWaterContent, name="fieldWaterContent", curie=NEON.curie('fieldWaterContent'),
                      model_uri=NEON.fieldWaterContent, domain=None, range=Optional[float])

slots.gypsumMethod = Slot(uri=NEON.gypsumMethod, name="gypsumMethod", curie=NEON.curie('gypsumMethod'),
                      model_uri=NEON.gypsumMethod, domain=None, range=Optional[str])

slots.gypsumMethodPub = Slot(uri=NEON.gypsumMethodPub, name="gypsumMethodPub", curie=NEON.curie('gypsumMethodPub'),
                      model_uri=NEON.gypsumMethodPub, domain=None, range=Optional[str])

slots.gypsumProcessedDate = Slot(uri=NEON.gypsumProcessedDate, name="gypsumProcessedDate", curie=NEON.curie('gypsumProcessedDate'),
                      model_uri=NEON.gypsumProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.h2oReten15BarMethod = Slot(uri=NEON.h2oReten15BarMethod, name="h2oReten15BarMethod", curie=NEON.curie('h2oReten15BarMethod'),
                      model_uri=NEON.h2oReten15BarMethod, domain=None, range=Optional[str])

slots.h2oReten15BarMethodPub = Slot(uri=NEON.h2oReten15BarMethodPub, name="h2oReten15BarMethodPub", curie=NEON.curie('h2oReten15BarMethodPub'),
                      model_uri=NEON.h2oReten15BarMethodPub, domain=None, range=Optional[str])

slots.h2oReten15BarProcessedDate = Slot(uri=NEON.h2oReten15BarProcessedDate, name="h2oReten15BarProcessedDate", curie=NEON.curie('h2oReten15BarProcessedDate'),
                      model_uri=NEON.h2oReten15BarProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.KClExtractMethod = Slot(uri=NEON.KClExtractMethod, name="KClExtractMethod", curie=NEON.curie('KClExtractMethod'),
                      model_uri=NEON.KClExtractMethod, domain=None, range=Optional[str])

slots.KClExtractMethodPub = Slot(uri=NEON.KClExtractMethodPub, name="KClExtractMethodPub", curie=NEON.curie('KClExtractMethodPub'),
                      model_uri=NEON.KClExtractMethodPub, domain=None, range=Optional[str])

slots.KClExtractProcessedDate = Slot(uri=NEON.KClExtractProcessedDate, name="KClExtractProcessedDate", curie=NEON.curie('KClExtractProcessedDate'),
                      model_uri=NEON.KClExtractProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.MehlichIIIPMethod = Slot(uri=NEON.MehlichIIIPMethod, name="MehlichIIIPMethod", curie=NEON.curie('MehlichIIIPMethod'),
                      model_uri=NEON.MehlichIIIPMethod, domain=None, range=Optional[str])

slots.MehlichIIIPMethodPub = Slot(uri=NEON.MehlichIIIPMethodPub, name="MehlichIIIPMethodPub", curie=NEON.curie('MehlichIIIPMethodPub'),
                      model_uri=NEON.MehlichIIIPMethodPub, domain=None, range=Optional[str])

slots.MehlichIIIPProcessedDate = Slot(uri=NEON.MehlichIIIPProcessedDate, name="MehlichIIIPProcessedDate", curie=NEON.curie('MehlichIIIPProcessedDate'),
                      model_uri=NEON.MehlichIIIPProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.MehlichIIITotP = Slot(uri=NEON.MehlichIIITotP, name="MehlichIIITotP", curie=NEON.curie('MehlichIIITotP'),
                      model_uri=NEON.MehlichIIITotP, domain=None, range=Optional[float])

slots.methodPub = Slot(uri=NEON.methodPub, name="methodPub", curie=NEON.curie('methodPub'),
                      model_uri=NEON.methodPub, domain=None, range=Optional[str])

slots.mnCitDithionate = Slot(uri=NEON.mnCitDithionate, name="mnCitDithionate", curie=NEON.curie('mnCitDithionate'),
                      model_uri=NEON.mnCitDithionate, domain=None, range=Optional[float])

slots.mnOxalate = Slot(uri=NEON.mnOxalate, name="mnOxalate", curie=NEON.curie('mnOxalate'),
                      model_uri=NEON.mnOxalate, domain=None, range=Optional[float])

slots.OlsenPExtractable = Slot(uri=NEON.OlsenPExtractable, name="OlsenPExtractable", curie=NEON.curie('OlsenPExtractable'),
                      model_uri=NEON.OlsenPExtractable, domain=None, range=Optional[float])

slots.OlsenPMethod = Slot(uri=NEON.OlsenPMethod, name="OlsenPMethod", curie=NEON.curie('OlsenPMethod'),
                      model_uri=NEON.OlsenPMethod, domain=None, range=Optional[str])

slots.OlsenPMethodPub = Slot(uri=NEON.OlsenPMethodPub, name="OlsenPMethodPub", curie=NEON.curie('OlsenPMethodPub'),
                      model_uri=NEON.OlsenPMethodPub, domain=None, range=Optional[str])

slots.OlsenPProcessedDate = Slot(uri=NEON.OlsenPProcessedDate, name="OlsenPProcessedDate", curie=NEON.curie('OlsenPProcessedDate'),
                      model_uri=NEON.OlsenPProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.optDensityOxalate = Slot(uri=NEON.optDensityOxalate, name="optDensityOxalate", curie=NEON.curie('optDensityOxalate'),
                      model_uri=NEON.optDensityOxalate, domain=None, range=Optional[float])

slots.particleSizeDistProcessedDate = Slot(uri=NEON.particleSizeDistProcessedDate, name="particleSizeDistProcessedDate", curie=NEON.curie('particleSizeDistProcessedDate'),
                      model_uri=NEON.particleSizeDistProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.particleSizeDistMethod = Slot(uri=NEON.particleSizeDistMethod, name="particleSizeDistMethod", curie=NEON.curie('particleSizeDistMethod'),
                      model_uri=NEON.particleSizeDistMethod, domain=None, range=Optional[str])

slots.particleSizeDistMethodPub = Slot(uri=NEON.particleSizeDistMethodPub, name="particleSizeDistMethodPub", curie=NEON.curie('particleSizeDistMethodPub'),
                      model_uri=NEON.particleSizeDistMethodPub, domain=None, range=Optional[str])

slots.pOxalate = Slot(uri=NEON.pOxalate, name="pOxalate", curie=NEON.curie('pOxalate'),
                      model_uri=NEON.pOxalate, domain=None, range=Optional[float])

slots.processingRemarks = Slot(uri=NEON.processingRemarks, name="processingRemarks", curie=NEON.curie('processingRemarks'),
                      model_uri=NEON.processingRemarks, domain=None, range=Optional[str])

slots.referenceCorner = Slot(uri=NEON.referenceCorner, name="referenceCorner", curie=NEON.curie('referenceCorner'),
                      model_uri=NEON.referenceCorner, domain=None, range=Optional[str])

slots.routinepHProcessedDate = Slot(uri=NEON.routinepHProcessedDate, name="routinepHProcessedDate", curie=NEON.curie('routinepHProcessedDate'),
                      model_uri=NEON.routinepHProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.routinepHMethod = Slot(uri=NEON.routinepHMethod, name="routinepHMethod", curie=NEON.curie('routinepHMethod'),
                      model_uri=NEON.routinepHMethod, domain=None, range=Optional[str])

slots.routinepHMethodPub = Slot(uri=NEON.routinepHMethodPub, name="routinepHMethodPub", curie=NEON.curie('routinepHMethodPub'),
                      model_uri=NEON.routinepHMethodPub, domain=None, range=Optional[str])

slots.sampleBearing = Slot(uri=NEON.sampleBearing, name="sampleBearing", curie=NEON.curie('sampleBearing'),
                      model_uri=NEON.sampleBearing, domain=None, range=Optional[float])

slots.sampleDistance = Slot(uri=NEON.sampleDistance, name="sampleDistance", curie=NEON.curie('sampleDistance'),
                      model_uri=NEON.sampleDistance, domain=None, range=Optional[float])

slots.sampleDistanceDeci = Slot(uri=NEON.sampleDistanceDeci, name="sampleDistanceDeci", curie=NEON.curie('sampleDistanceDeci'),
                      model_uri=NEON.sampleDistanceDeci, domain=None, range=Optional[float])

slots.sampleRelativeLocation = Slot(uri=NEON.sampleRelativeLocation, name="sampleRelativeLocation", curie=NEON.curie('sampleRelativeLocation'),
                      model_uri=NEON.sampleRelativeLocation, domain=None, range=Optional[str])

slots.satPasteMethod = Slot(uri=NEON.satPasteMethod, name="satPasteMethod", curie=NEON.curie('satPasteMethod'),
                      model_uri=NEON.satPasteMethod, domain=None, range=Optional[str])

slots.satPasteMethodPub = Slot(uri=NEON.satPasteMethodPub, name="satPasteMethodPub", curie=NEON.curie('satPasteMethodPub'),
                      model_uri=NEON.satPasteMethodPub, domain=None, range=Optional[str])

slots.satPasteProcessedDate = Slot(uri=NEON.satPasteProcessedDate, name="satPasteProcessedDate", curie=NEON.curie('satPasteProcessedDate'),
                      model_uri=NEON.satPasteProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.siliconCitrateDithionate = Slot(uri=NEON.siliconCitrateDithionate, name="siliconCitrateDithionate", curie=NEON.curie('siliconCitrateDithionate'),
                      model_uri=NEON.siliconCitrateDithionate, domain=None, range=Optional[float])

slots.siOxalate = Slot(uri=NEON.siOxalate, name="siOxalate", curie=NEON.curie('siOxalate'),
                      model_uri=NEON.siOxalate, domain=None, range=Optional[float])

slots.soilSamplingMethod = Slot(uri=NEON.soilSamplingMethod, name="soilSamplingMethod", curie=NEON.curie('soilSamplingMethod'),
                      model_uri=NEON.soilSamplingMethod, domain=None, range=Optional[str])

slots.TotalNCSMethod = Slot(uri=NEON.TotalNCSMethod, name="TotalNCSMethod", curie=NEON.curie('TotalNCSMethod'),
                      model_uri=NEON.TotalNCSMethod, domain=None, range=Optional[str])

slots.TotalNCSMethodPub = Slot(uri=NEON.TotalNCSMethodPub, name="TotalNCSMethodPub", curie=NEON.curie('TotalNCSMethodPub'),
                      model_uri=NEON.TotalNCSMethodPub, domain=None, range=Optional[str])

slots.TotalNCSProcessedDate = Slot(uri=NEON.TotalNCSProcessedDate, name="TotalNCSProcessedDate", curie=NEON.curie('TotalNCSProcessedDate'),
                      model_uri=NEON.TotalNCSProcessedDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.waterRetention15Bar = Slot(uri=NEON.waterRetention15Bar, name="waterRetention15Bar", curie=NEON.curie('waterRetention15Bar'),
                      model_uri=NEON.waterRetention15Bar, domain=None, range=Optional[float])

slots.waterRetentionThirdBar = Slot(uri=NEON.waterRetentionThirdBar, name="waterRetentionThirdBar", curie=NEON.curie('waterRetentionThirdBar'),
                      model_uri=NEON.waterRetentionThirdBar, domain=None, range=Optional[float])

slots.instrument_model = Slot(uri=NEON.instrument_model, name="instrument_model", curie=NEON.curie('instrument_model'),
                      model_uri=NEON.instrument_model, domain=None, range=Optional[str])

slots.ncbiProjectID = Slot(uri=NEON.ncbiProjectID, name="ncbiProjectID", curie=NEON.curie('ncbiProjectID'),
                      model_uri=NEON.ncbiProjectID, domain=None, range=Optional[str])

slots.rawDataFileName = Slot(uri=NEON.rawDataFileName, name="rawDataFileName", curie=NEON.curie('rawDataFileName'),
                      model_uri=NEON.rawDataFileName, domain=None, range=Optional[str])

slots.rawDataFilePath = Slot(uri=NEON.rawDataFilePath, name="rawDataFilePath", curie=NEON.curie('rawDataFilePath'),
                      model_uri=NEON.rawDataFilePath, domain=None, range=Optional[str])

slots.sequencingFacilityID = Slot(uri=NEON.sequencingFacilityID, name="sequencingFacilityID", curie=NEON.curie('sequencingFacilityID'),
                      model_uri=NEON.sequencingFacilityID, domain=None, range=Optional[str])

slots.sequencingProtocol = Slot(uri=NEON.sequencingProtocol, name="sequencingProtocol", curie=NEON.curie('sequencingProtocol'),
                      model_uri=NEON.sequencingProtocol, domain=None, range=Optional[str])

slots.windSpeedDeadZoneQF = Slot(uri=NEON.windSpeedDeadZoneQF, name="windSpeedDeadZoneQF", curie=NEON.curie('windSpeedDeadZoneQF'),
                      model_uri=NEON.windSpeedDeadZoneQF, domain=None, range=Optional[int])

slots.windSpeedSciRvwQF = Slot(uri=NEON.windSpeedSciRvwQF, name="windSpeedSciRvwQF", curie=NEON.curie('windSpeedSciRvwQF'),
                      model_uri=NEON.windSpeedSciRvwQF, domain=None, range=Optional[str])

slots.windDirSciRvwQF = Slot(uri=NEON.windDirSciRvwQF, name="windDirSciRvwQF", curie=NEON.curie('windDirSciRvwQF'),
                      model_uri=NEON.windDirSciRvwQF, domain=None, range=Optional[str])

slots.windDirDeadZoneQF = Slot(uri=NEON.windDirDeadZoneQF, name="windDirDeadZoneQF", curie=NEON.curie('windDirDeadZoneQF'),
                      model_uri=NEON.windDirDeadZoneQF, domain=None, range=Optional[int])

slots.accuracyQF = Slot(uri=NEON.accuracyQF, name="accuracyQF", curie=NEON.curie('accuracyQF'),
                      model_uri=NEON.accuracyQF, domain=None, range=Optional[str])

slots.analytePercentRecovery = Slot(uri=NEON.analytePercentRecovery, name="analytePercentRecovery", curie=NEON.curie('analytePercentRecovery'),
                      model_uri=NEON.analytePercentRecovery, domain=None, range=Optional[float])

slots.celluloseKnown = Slot(uri=NEON.celluloseKnown, name="celluloseKnown", curie=NEON.curie('celluloseKnown'),
                      model_uri=NEON.celluloseKnown, domain=None, range=Optional[float])

slots.cellulosePercent = Slot(uri=NEON.cellulosePercent, name="cellulosePercent", curie=NEON.curie('cellulosePercent'),
                      model_uri=NEON.cellulosePercent, domain=None, range=Optional[float])

slots.ligninKnown = Slot(uri=NEON.ligninKnown, name="ligninKnown", curie=NEON.curie('ligninKnown'),
                      model_uri=NEON.ligninKnown, domain=None, range=Optional[float])

slots.ligninPercent = Slot(uri=NEON.ligninPercent, name="ligninPercent", curie=NEON.curie('ligninPercent'),
                      model_uri=NEON.ligninPercent, domain=None, range=Optional[float])

slots.measurementQF = Slot(uri=NEON.measurementQF, name="measurementQF", curie=NEON.curie('measurementQF'),
                      model_uri=NEON.measurementQF, domain=None, range=Optional[str])

slots.qaMaterialQF = Slot(uri=NEON.qaMaterialQF, name="qaMaterialQF", curie=NEON.curie('qaMaterialQF'),
                      model_uri=NEON.qaMaterialQF, domain=None, range=Optional[str])

slots.trappingDays = Slot(uri=NEON.trappingDays, name="trappingDays", curie=NEON.curie('trappingDays'),
                      model_uri=NEON.trappingDays, domain=None, range=Optional[float])

slots.qcEnumerationDifference = Slot(uri=NEON.qcEnumerationDifference, name="qcEnumerationDifference", curie=NEON.curie('qcEnumerationDifference'),
                      model_uri=NEON.qcEnumerationDifference, domain=None, range=Optional[float])

slots.qcTaxonomicDifference = Slot(uri=NEON.qcTaxonomicDifference, name="qcTaxonomicDifference", curie=NEON.curie('qcTaxonomicDifference'),
                      model_uri=NEON.qcTaxonomicDifference, domain=None, range=Optional[float])

slots.windDirCalmWindQAQCRpt = Slot(uri=NEON.windDirCalmWindQAQCRpt, name="windDirCalmWindQAQCRpt", curie=NEON.curie('windDirCalmWindQAQCRpt'),
                      model_uri=NEON.windDirCalmWindQAQCRpt, domain=None, range=Optional[str])

slots.windSpeedBuoy = Slot(uri=NEON.windSpeedBuoy, name="windSpeedBuoy", curie=NEON.curie('windSpeedBuoy'),
                      model_uri=NEON.windSpeedBuoy, domain=None, range=Optional[float])

slots.windDirBuoy = Slot(uri=NEON.windDirBuoy, name="windDirBuoy", curie=NEON.curie('windDirBuoy'),
                      model_uri=NEON.windDirBuoy, domain=None, range=Optional[float])

slots.buoyCompGapFailQM = Slot(uri=NEON.buoyCompGapFailQM, name="buoyCompGapFailQM", curie=NEON.curie('buoyCompGapFailQM'),
                      model_uri=NEON.buoyCompGapFailQM, domain=None, range=Optional[float])

slots.buoyCompGapNAQM = Slot(uri=NEON.buoyCompGapNAQM, name="buoyCompGapNAQM", curie=NEON.curie('buoyCompGapNAQM'),
                      model_uri=NEON.buoyCompGapNAQM, domain=None, range=Optional[float])

slots.buoyCompGapPassQM = Slot(uri=NEON.buoyCompGapPassQM, name="buoyCompGapPassQM", curie=NEON.curie('buoyCompGapPassQM'),
                      model_uri=NEON.buoyCompGapPassQM, domain=None, range=Optional[float])

slots.buoyCompGapQAQCRpt = Slot(uri=NEON.buoyCompGapQAQCRpt, name="buoyCompGapQAQCRpt", curie=NEON.curie('buoyCompGapQAQCRpt'),
                      model_uri=NEON.buoyCompGapQAQCRpt, domain=None, range=Optional[str])

slots.buoyCompNullFailQM = Slot(uri=NEON.buoyCompNullFailQM, name="buoyCompNullFailQM", curie=NEON.curie('buoyCompNullFailQM'),
                      model_uri=NEON.buoyCompNullFailQM, domain=None, range=Optional[float])

slots.buoyCompNullNAQM = Slot(uri=NEON.buoyCompNullNAQM, name="buoyCompNullNAQM", curie=NEON.curie('buoyCompNullNAQM'),
                      model_uri=NEON.buoyCompNullNAQM, domain=None, range=Optional[float])

slots.buoyCompNullPassQM = Slot(uri=NEON.buoyCompNullPassQM, name="buoyCompNullPassQM", curie=NEON.curie('buoyCompNullPassQM'),
                      model_uri=NEON.buoyCompNullPassQM, domain=None, range=Optional[float])

slots.buoyCompNullQAQCRpt = Slot(uri=NEON.buoyCompNullQAQCRpt, name="buoyCompNullQAQCRpt", curie=NEON.curie('buoyCompNullQAQCRpt'),
                      model_uri=NEON.buoyCompNullQAQCRpt, domain=None, range=Optional[str])

slots.buoyCompPersistenceFailQM = Slot(uri=NEON.buoyCompPersistenceFailQM, name="buoyCompPersistenceFailQM", curie=NEON.curie('buoyCompPersistenceFailQM'),
                      model_uri=NEON.buoyCompPersistenceFailQM, domain=None, range=Optional[float])

slots.buoyCompPersistenceNAQM = Slot(uri=NEON.buoyCompPersistenceNAQM, name="buoyCompPersistenceNAQM", curie=NEON.curie('buoyCompPersistenceNAQM'),
                      model_uri=NEON.buoyCompPersistenceNAQM, domain=None, range=Optional[float])

slots.buoyCompPersistencePassQM = Slot(uri=NEON.buoyCompPersistencePassQM, name="buoyCompPersistencePassQM", curie=NEON.curie('buoyCompPersistencePassQM'),
                      model_uri=NEON.buoyCompPersistencePassQM, domain=None, range=Optional[float])

slots.buoyCompPersistenceQAQCRpt = Slot(uri=NEON.buoyCompPersistenceQAQCRpt, name="buoyCompPersistenceQAQCRpt", curie=NEON.curie('buoyCompPersistenceQAQCRpt'),
                      model_uri=NEON.buoyCompPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.buoyCompRangeFailQM = Slot(uri=NEON.buoyCompRangeFailQM, name="buoyCompRangeFailQM", curie=NEON.curie('buoyCompRangeFailQM'),
                      model_uri=NEON.buoyCompRangeFailQM, domain=None, range=Optional[float])

slots.buoyCompRangeNAQM = Slot(uri=NEON.buoyCompRangeNAQM, name="buoyCompRangeNAQM", curie=NEON.curie('buoyCompRangeNAQM'),
                      model_uri=NEON.buoyCompRangeNAQM, domain=None, range=Optional[float])

slots.buoyCompRangePassQM = Slot(uri=NEON.buoyCompRangePassQM, name="buoyCompRangePassQM", curie=NEON.curie('buoyCompRangePassQM'),
                      model_uri=NEON.buoyCompRangePassQM, domain=None, range=Optional[float])

slots.buoyCompRangeQAQCRpt = Slot(uri=NEON.buoyCompRangeQAQCRpt, name="buoyCompRangeQAQCRpt", curie=NEON.curie('buoyCompRangeQAQCRpt'),
                      model_uri=NEON.buoyCompRangeQAQCRpt, domain=None, range=Optional[str])

slots.buoyCompSpikeFailQM = Slot(uri=NEON.buoyCompSpikeFailQM, name="buoyCompSpikeFailQM", curie=NEON.curie('buoyCompSpikeFailQM'),
                      model_uri=NEON.buoyCompSpikeFailQM, domain=None, range=Optional[float])

slots.buoyCompSpikeNAQM = Slot(uri=NEON.buoyCompSpikeNAQM, name="buoyCompSpikeNAQM", curie=NEON.curie('buoyCompSpikeNAQM'),
                      model_uri=NEON.buoyCompSpikeNAQM, domain=None, range=Optional[float])

slots.buoyCompSpikePassQM = Slot(uri=NEON.buoyCompSpikePassQM, name="buoyCompSpikePassQM", curie=NEON.curie('buoyCompSpikePassQM'),
                      model_uri=NEON.buoyCompSpikePassQM, domain=None, range=Optional[float])

slots.buoyCompSpikeQAQCRpt = Slot(uri=NEON.buoyCompSpikeQAQCRpt, name="buoyCompSpikeQAQCRpt", curie=NEON.curie('buoyCompSpikeQAQCRpt'),
                      model_uri=NEON.buoyCompSpikeQAQCRpt, domain=None, range=Optional[str])

slots.buoyCompStepFailQM = Slot(uri=NEON.buoyCompStepFailQM, name="buoyCompStepFailQM", curie=NEON.curie('buoyCompStepFailQM'),
                      model_uri=NEON.buoyCompStepFailQM, domain=None, range=Optional[float])

slots.buoyCompStepNAQM = Slot(uri=NEON.buoyCompStepNAQM, name="buoyCompStepNAQM", curie=NEON.curie('buoyCompStepNAQM'),
                      model_uri=NEON.buoyCompStepNAQM, domain=None, range=Optional[float])

slots.buoyCompStepPassQM = Slot(uri=NEON.buoyCompStepPassQM, name="buoyCompStepPassQM", curie=NEON.curie('buoyCompStepPassQM'),
                      model_uri=NEON.buoyCompStepPassQM, domain=None, range=Optional[float])

slots.buoyCompStepQAQCRpt = Slot(uri=NEON.buoyCompStepQAQCRpt, name="buoyCompStepQAQCRpt", curie=NEON.curie('buoyCompStepQAQCRpt'),
                      model_uri=NEON.buoyCompStepQAQCRpt, domain=None, range=Optional[str])

slots.windDirCalmWindFailQM = Slot(uri=NEON.windDirCalmWindFailQM, name="windDirCalmWindFailQM", curie=NEON.curie('windDirCalmWindFailQM'),
                      model_uri=NEON.windDirCalmWindFailQM, domain=None, range=Optional[float])

slots.windDirCalmWindNAQM = Slot(uri=NEON.windDirCalmWindNAQM, name="windDirCalmWindNAQM", curie=NEON.curie('windDirCalmWindNAQM'),
                      model_uri=NEON.windDirCalmWindNAQM, domain=None, range=Optional[float])

slots.windDirCalmWindPassQM = Slot(uri=NEON.windDirCalmWindPassQM, name="windDirCalmWindPassQM", curie=NEON.curie('windDirCalmWindPassQM'),
                      model_uri=NEON.windDirCalmWindPassQM, domain=None, range=Optional[float])

slots.windDirDeadZoneFailQM = Slot(uri=NEON.windDirDeadZoneFailQM, name="windDirDeadZoneFailQM", curie=NEON.curie('windDirDeadZoneFailQM'),
                      model_uri=NEON.windDirDeadZoneFailQM, domain=None, range=Optional[float])

slots.windDirDeadZoneNAQM = Slot(uri=NEON.windDirDeadZoneNAQM, name="windDirDeadZoneNAQM", curie=NEON.curie('windDirDeadZoneNAQM'),
                      model_uri=NEON.windDirDeadZoneNAQM, domain=None, range=Optional[float])

slots.windDirDeadZonePassQM = Slot(uri=NEON.windDirDeadZonePassQM, name="windDirDeadZonePassQM", curie=NEON.curie('windDirDeadZonePassQM'),
                      model_uri=NEON.windDirDeadZonePassQM, domain=None, range=Optional[float])

slots.windDirDeadZoneQAQCRpt = Slot(uri=NEON.windDirDeadZoneQAQCRpt, name="windDirDeadZoneQAQCRpt", curie=NEON.curie('windDirDeadZoneQAQCRpt'),
                      model_uri=NEON.windDirDeadZoneQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirAlphaQAQCRpt = Slot(uri=NEON.buoyWindDirAlphaQAQCRpt, name="buoyWindDirAlphaQAQCRpt", curie=NEON.curie('buoyWindDirAlphaQAQCRpt'),
                      model_uri=NEON.buoyWindDirAlphaQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirAlphaQM = Slot(uri=NEON.buoyWindDirAlphaQM, name="buoyWindDirAlphaQM", curie=NEON.curie('buoyWindDirAlphaQM'),
                      model_uri=NEON.buoyWindDirAlphaQM, domain=None, range=Optional[float])

slots.buoyWindDirBetaQAQCRpt = Slot(uri=NEON.buoyWindDirBetaQAQCRpt, name="buoyWindDirBetaQAQCRpt", curie=NEON.curie('buoyWindDirBetaQAQCRpt'),
                      model_uri=NEON.buoyWindDirBetaQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirBetaQM = Slot(uri=NEON.buoyWindDirBetaQM, name="buoyWindDirBetaQM", curie=NEON.curie('buoyWindDirBetaQM'),
                      model_uri=NEON.buoyWindDirBetaQM, domain=None, range=Optional[float])

slots.buoyWindDirCalmWindFailQM = Slot(uri=NEON.buoyWindDirCalmWindFailQM, name="buoyWindDirCalmWindFailQM", curie=NEON.curie('buoyWindDirCalmWindFailQM'),
                      model_uri=NEON.buoyWindDirCalmWindFailQM, domain=None, range=Optional[float])

slots.buoyWindDirCalmWindNAQM = Slot(uri=NEON.buoyWindDirCalmWindNAQM, name="buoyWindDirCalmWindNAQM", curie=NEON.curie('buoyWindDirCalmWindNAQM'),
                      model_uri=NEON.buoyWindDirCalmWindNAQM, domain=None, range=Optional[float])

slots.buoyWindDirCalmWindPassQM = Slot(uri=NEON.buoyWindDirCalmWindPassQM, name="buoyWindDirCalmWindPassQM", curie=NEON.curie('buoyWindDirCalmWindPassQM'),
                      model_uri=NEON.buoyWindDirCalmWindPassQM, domain=None, range=Optional[float])

slots.buoyWindDirCalmWindQAQCRpt = Slot(uri=NEON.buoyWindDirCalmWindQAQCRpt, name="buoyWindDirCalmWindQAQCRpt", curie=NEON.curie('buoyWindDirCalmWindQAQCRpt'),
                      model_uri=NEON.buoyWindDirCalmWindQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirConsistencyFailQM = Slot(uri=NEON.buoyWindDirConsistencyFailQM, name="buoyWindDirConsistencyFailQM", curie=NEON.curie('buoyWindDirConsistencyFailQM'),
                      model_uri=NEON.buoyWindDirConsistencyFailQM, domain=None, range=Optional[float])

slots.buoyWindDirConsistencyNAQM = Slot(uri=NEON.buoyWindDirConsistencyNAQM, name="buoyWindDirConsistencyNAQM", curie=NEON.curie('buoyWindDirConsistencyNAQM'),
                      model_uri=NEON.buoyWindDirConsistencyNAQM, domain=None, range=Optional[float])

slots.buoyWindDirConsistencyPassQM = Slot(uri=NEON.buoyWindDirConsistencyPassQM, name="buoyWindDirConsistencyPassQM", curie=NEON.curie('buoyWindDirConsistencyPassQM'),
                      model_uri=NEON.buoyWindDirConsistencyPassQM, domain=None, range=Optional[float])

slots.buoyWindDirConsistencyQAQCRpt = Slot(uri=NEON.buoyWindDirConsistencyQAQCRpt, name="buoyWindDirConsistencyQAQCRpt", curie=NEON.curie('buoyWindDirConsistencyQAQCRpt'),
                      model_uri=NEON.buoyWindDirConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirDeadZoneFailQM = Slot(uri=NEON.buoyWindDirDeadZoneFailQM, name="buoyWindDirDeadZoneFailQM", curie=NEON.curie('buoyWindDirDeadZoneFailQM'),
                      model_uri=NEON.buoyWindDirDeadZoneFailQM, domain=None, range=Optional[float])

slots.buoyWindDirDeadZoneNAQM = Slot(uri=NEON.buoyWindDirDeadZoneNAQM, name="buoyWindDirDeadZoneNAQM", curie=NEON.curie('buoyWindDirDeadZoneNAQM'),
                      model_uri=NEON.buoyWindDirDeadZoneNAQM, domain=None, range=Optional[float])

slots.buoyWindDirDeadZonePassQM = Slot(uri=NEON.buoyWindDirDeadZonePassQM, name="buoyWindDirDeadZonePassQM", curie=NEON.curie('buoyWindDirDeadZonePassQM'),
                      model_uri=NEON.buoyWindDirDeadZonePassQM, domain=None, range=Optional[float])

slots.buoyWindDirDeadZoneQAQCRpt = Slot(uri=NEON.buoyWindDirDeadZoneQAQCRpt, name="buoyWindDirDeadZoneQAQCRpt", curie=NEON.curie('buoyWindDirDeadZoneQAQCRpt'),
                      model_uri=NEON.buoyWindDirDeadZoneQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirExpUncert = Slot(uri=NEON.buoyWindDirExpUncert, name="buoyWindDirExpUncert", curie=NEON.curie('buoyWindDirExpUncert'),
                      model_uri=NEON.buoyWindDirExpUncert, domain=None, range=Optional[float])

slots.buoyWindDirFinalQF = Slot(uri=NEON.buoyWindDirFinalQF, name="buoyWindDirFinalQF", curie=NEON.curie('buoyWindDirFinalQF'),
                      model_uri=NEON.buoyWindDirFinalQF, domain=None, range=Optional[str])

slots.buoyWindDirFinalQFSciRvw = Slot(uri=NEON.buoyWindDirFinalQFSciRvw, name="buoyWindDirFinalQFSciRvw", curie=NEON.curie('buoyWindDirFinalQFSciRvw'),
                      model_uri=NEON.buoyWindDirFinalQFSciRvw, domain=None, range=Optional[str])

slots.buoyWindDirGapFailQM = Slot(uri=NEON.buoyWindDirGapFailQM, name="buoyWindDirGapFailQM", curie=NEON.curie('buoyWindDirGapFailQM'),
                      model_uri=NEON.buoyWindDirGapFailQM, domain=None, range=Optional[float])

slots.buoyWindDirGapNAQM = Slot(uri=NEON.buoyWindDirGapNAQM, name="buoyWindDirGapNAQM", curie=NEON.curie('buoyWindDirGapNAQM'),
                      model_uri=NEON.buoyWindDirGapNAQM, domain=None, range=Optional[float])

slots.buoyWindDirGapPassQM = Slot(uri=NEON.buoyWindDirGapPassQM, name="buoyWindDirGapPassQM", curie=NEON.curie('buoyWindDirGapPassQM'),
                      model_uri=NEON.buoyWindDirGapPassQM, domain=None, range=Optional[float])

slots.buoyWindDirGapQAQCRpt = Slot(uri=NEON.buoyWindDirGapQAQCRpt, name="buoyWindDirGapQAQCRpt", curie=NEON.curie('buoyWindDirGapQAQCRpt'),
                      model_uri=NEON.buoyWindDirGapQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirMean = Slot(uri=NEON.buoyWindDirMean, name="buoyWindDirMean", curie=NEON.curie('buoyWindDirMean'),
                      model_uri=NEON.buoyWindDirMean, domain=None, range=Optional[float])

slots.buoyWindDirNullFailQM = Slot(uri=NEON.buoyWindDirNullFailQM, name="buoyWindDirNullFailQM", curie=NEON.curie('buoyWindDirNullFailQM'),
                      model_uri=NEON.buoyWindDirNullFailQM, domain=None, range=Optional[float])

slots.buoyWindDirNullNAQM = Slot(uri=NEON.buoyWindDirNullNAQM, name="buoyWindDirNullNAQM", curie=NEON.curie('buoyWindDirNullNAQM'),
                      model_uri=NEON.buoyWindDirNullNAQM, domain=None, range=Optional[float])

slots.buoyWindDirNullPassQM = Slot(uri=NEON.buoyWindDirNullPassQM, name="buoyWindDirNullPassQM", curie=NEON.curie('buoyWindDirNullPassQM'),
                      model_uri=NEON.buoyWindDirNullPassQM, domain=None, range=Optional[float])

slots.buoyWindDirNullQAQCRpt = Slot(uri=NEON.buoyWindDirNullQAQCRpt, name="buoyWindDirNullQAQCRpt", curie=NEON.curie('buoyWindDirNullQAQCRpt'),
                      model_uri=NEON.buoyWindDirNullQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirNumPts = Slot(uri=NEON.buoyWindDirNumPts, name="buoyWindDirNumPts", curie=NEON.curie('buoyWindDirNumPts'),
                      model_uri=NEON.buoyWindDirNumPts, domain=None, range=Optional[float])

slots.buoyWindDirPersistenceFailQM = Slot(uri=NEON.buoyWindDirPersistenceFailQM, name="buoyWindDirPersistenceFailQM", curie=NEON.curie('buoyWindDirPersistenceFailQM'),
                      model_uri=NEON.buoyWindDirPersistenceFailQM, domain=None, range=Optional[float])

slots.buoyWindDirPersistenceNAQM = Slot(uri=NEON.buoyWindDirPersistenceNAQM, name="buoyWindDirPersistenceNAQM", curie=NEON.curie('buoyWindDirPersistenceNAQM'),
                      model_uri=NEON.buoyWindDirPersistenceNAQM, domain=None, range=Optional[float])

slots.buoyWindDirPersistencePassQM = Slot(uri=NEON.buoyWindDirPersistencePassQM, name="buoyWindDirPersistencePassQM", curie=NEON.curie('buoyWindDirPersistencePassQM'),
                      model_uri=NEON.buoyWindDirPersistencePassQM, domain=None, range=Optional[float])

slots.buoyWindDirPersistenceQAQCRpt = Slot(uri=NEON.buoyWindDirPersistenceQAQCRpt, name="buoyWindDirPersistenceQAQCRpt", curie=NEON.curie('buoyWindDirPersistenceQAQCRpt'),
                      model_uri=NEON.buoyWindDirPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirRangeFailQM = Slot(uri=NEON.buoyWindDirRangeFailQM, name="buoyWindDirRangeFailQM", curie=NEON.curie('buoyWindDirRangeFailQM'),
                      model_uri=NEON.buoyWindDirRangeFailQM, domain=None, range=Optional[float])

slots.buoyWindDirRangeNAQM = Slot(uri=NEON.buoyWindDirRangeNAQM, name="buoyWindDirRangeNAQM", curie=NEON.curie('buoyWindDirRangeNAQM'),
                      model_uri=NEON.buoyWindDirRangeNAQM, domain=None, range=Optional[float])

slots.buoyWindDirRangePassQM = Slot(uri=NEON.buoyWindDirRangePassQM, name="buoyWindDirRangePassQM", curie=NEON.curie('buoyWindDirRangePassQM'),
                      model_uri=NEON.buoyWindDirRangePassQM, domain=None, range=Optional[float])

slots.buoyWindDirRangeQAQCRpt = Slot(uri=NEON.buoyWindDirRangeQAQCRpt, name="buoyWindDirRangeQAQCRpt", curie=NEON.curie('buoyWindDirRangeQAQCRpt'),
                      model_uri=NEON.buoyWindDirRangeQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirSensorErrorFailQM = Slot(uri=NEON.buoyWindDirSensorErrorFailQM, name="buoyWindDirSensorErrorFailQM", curie=NEON.curie('buoyWindDirSensorErrorFailQM'),
                      model_uri=NEON.buoyWindDirSensorErrorFailQM, domain=None, range=Optional[float])

slots.buoyWindDirSensorErrorNAQM = Slot(uri=NEON.buoyWindDirSensorErrorNAQM, name="buoyWindDirSensorErrorNAQM", curie=NEON.curie('buoyWindDirSensorErrorNAQM'),
                      model_uri=NEON.buoyWindDirSensorErrorNAQM, domain=None, range=Optional[float])

slots.buoyWindDirSensorErrorPassQM = Slot(uri=NEON.buoyWindDirSensorErrorPassQM, name="buoyWindDirSensorErrorPassQM", curie=NEON.curie('buoyWindDirSensorErrorPassQM'),
                      model_uri=NEON.buoyWindDirSensorErrorPassQM, domain=None, range=Optional[float])

slots.buoyWindDirSpikeFailQM = Slot(uri=NEON.buoyWindDirSpikeFailQM, name="buoyWindDirSpikeFailQM", curie=NEON.curie('buoyWindDirSpikeFailQM'),
                      model_uri=NEON.buoyWindDirSpikeFailQM, domain=None, range=Optional[float])

slots.buoyWindDirSpikeNAQM = Slot(uri=NEON.buoyWindDirSpikeNAQM, name="buoyWindDirSpikeNAQM", curie=NEON.curie('buoyWindDirSpikeNAQM'),
                      model_uri=NEON.buoyWindDirSpikeNAQM, domain=None, range=Optional[float])

slots.buoyWindDirSpikePassQM = Slot(uri=NEON.buoyWindDirSpikePassQM, name="buoyWindDirSpikePassQM", curie=NEON.curie('buoyWindDirSpikePassQM'),
                      model_uri=NEON.buoyWindDirSpikePassQM, domain=None, range=Optional[float])

slots.buoyWindDirSpikeQAQCRpt = Slot(uri=NEON.buoyWindDirSpikeQAQCRpt, name="buoyWindDirSpikeQAQCRpt", curie=NEON.curie('buoyWindDirSpikeQAQCRpt'),
                      model_uri=NEON.buoyWindDirSpikeQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirStdErMean = Slot(uri=NEON.buoyWindDirStdErMean, name="buoyWindDirStdErMean", curie=NEON.curie('buoyWindDirStdErMean'),
                      model_uri=NEON.buoyWindDirStdErMean, domain=None, range=Optional[float])

slots.buoyWindDirStepFailQM = Slot(uri=NEON.buoyWindDirStepFailQM, name="buoyWindDirStepFailQM", curie=NEON.curie('buoyWindDirStepFailQM'),
                      model_uri=NEON.buoyWindDirStepFailQM, domain=None, range=Optional[float])

slots.buoyWindDirStepNAQM = Slot(uri=NEON.buoyWindDirStepNAQM, name="buoyWindDirStepNAQM", curie=NEON.curie('buoyWindDirStepNAQM'),
                      model_uri=NEON.buoyWindDirStepNAQM, domain=None, range=Optional[float])

slots.buoyWindDirStepPassQM = Slot(uri=NEON.buoyWindDirStepPassQM, name="buoyWindDirStepPassQM", curie=NEON.curie('buoyWindDirStepPassQM'),
                      model_uri=NEON.buoyWindDirStepPassQM, domain=None, range=Optional[float])

slots.buoyWindDirStepQAQCRpt = Slot(uri=NEON.buoyWindDirStepQAQCRpt, name="buoyWindDirStepQAQCRpt", curie=NEON.curie('buoyWindDirStepQAQCRpt'),
                      model_uri=NEON.buoyWindDirStepQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirValidCalFailQM = Slot(uri=NEON.buoyWindDirValidCalFailQM, name="buoyWindDirValidCalFailQM", curie=NEON.curie('buoyWindDirValidCalFailQM'),
                      model_uri=NEON.buoyWindDirValidCalFailQM, domain=None, range=Optional[float])

slots.buoyWindDirValidCalNAQM = Slot(uri=NEON.buoyWindDirValidCalNAQM, name="buoyWindDirValidCalNAQM", curie=NEON.curie('buoyWindDirValidCalNAQM'),
                      model_uri=NEON.buoyWindDirValidCalNAQM, domain=None, range=Optional[float])

slots.buoyWindDirValidCalPassQM = Slot(uri=NEON.buoyWindDirValidCalPassQM, name="buoyWindDirValidCalPassQM", curie=NEON.curie('buoyWindDirValidCalPassQM'),
                      model_uri=NEON.buoyWindDirValidCalPassQM, domain=None, range=Optional[float])

slots.buoyWindDirValidCalQAQCRpt = Slot(uri=NEON.buoyWindDirValidCalQAQCRpt, name="buoyWindDirValidCalQAQCRpt", curie=NEON.curie('buoyWindDirValidCalQAQCRpt'),
                      model_uri=NEON.buoyWindDirValidCalQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindDirVariance = Slot(uri=NEON.buoyWindDirVariance, name="buoyWindDirVariance", curie=NEON.curie('buoyWindDirVariance'),
                      model_uri=NEON.buoyWindDirVariance, domain=None, range=Optional[float])

slots.buoyWindSpeedAlphaQAQCRpt = Slot(uri=NEON.buoyWindSpeedAlphaQAQCRpt, name="buoyWindSpeedAlphaQAQCRpt", curie=NEON.curie('buoyWindSpeedAlphaQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedAlphaQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedAlphaQM = Slot(uri=NEON.buoyWindSpeedAlphaQM, name="buoyWindSpeedAlphaQM", curie=NEON.curie('buoyWindSpeedAlphaQM'),
                      model_uri=NEON.buoyWindSpeedAlphaQM, domain=None, range=Optional[float])

slots.buoyWindSpeedBetaQAQCRpt = Slot(uri=NEON.buoyWindSpeedBetaQAQCRpt, name="buoyWindSpeedBetaQAQCRpt", curie=NEON.curie('buoyWindSpeedBetaQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedBetaQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedBetaQM = Slot(uri=NEON.buoyWindSpeedBetaQM, name="buoyWindSpeedBetaQM", curie=NEON.curie('buoyWindSpeedBetaQM'),
                      model_uri=NEON.buoyWindSpeedBetaQM, domain=None, range=Optional[float])

slots.buoyWindSpeedConsistencyFailQM = Slot(uri=NEON.buoyWindSpeedConsistencyFailQM, name="buoyWindSpeedConsistencyFailQM", curie=NEON.curie('buoyWindSpeedConsistencyFailQM'),
                      model_uri=NEON.buoyWindSpeedConsistencyFailQM, domain=None, range=Optional[float])

slots.buoyWindSpeedConsistencyNAQM = Slot(uri=NEON.buoyWindSpeedConsistencyNAQM, name="buoyWindSpeedConsistencyNAQM", curie=NEON.curie('buoyWindSpeedConsistencyNAQM'),
                      model_uri=NEON.buoyWindSpeedConsistencyNAQM, domain=None, range=Optional[float])

slots.buoyWindSpeedConsistencyPassQM = Slot(uri=NEON.buoyWindSpeedConsistencyPassQM, name="buoyWindSpeedConsistencyPassQM", curie=NEON.curie('buoyWindSpeedConsistencyPassQM'),
                      model_uri=NEON.buoyWindSpeedConsistencyPassQM, domain=None, range=Optional[float])

slots.buoyWindSpeedConsistencyQAQCRpt = Slot(uri=NEON.buoyWindSpeedConsistencyQAQCRpt, name="buoyWindSpeedConsistencyQAQCRpt", curie=NEON.curie('buoyWindSpeedConsistencyQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedConsistencyQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedExpUncert = Slot(uri=NEON.buoyWindSpeedExpUncert, name="buoyWindSpeedExpUncert", curie=NEON.curie('buoyWindSpeedExpUncert'),
                      model_uri=NEON.buoyWindSpeedExpUncert, domain=None, range=Optional[float])

slots.buoyWindSpeedFinalQF = Slot(uri=NEON.buoyWindSpeedFinalQF, name="buoyWindSpeedFinalQF", curie=NEON.curie('buoyWindSpeedFinalQF'),
                      model_uri=NEON.buoyWindSpeedFinalQF, domain=None, range=Optional[str])

slots.buoyWindSpeedFinalQFSciRvw = Slot(uri=NEON.buoyWindSpeedFinalQFSciRvw, name="buoyWindSpeedFinalQFSciRvw", curie=NEON.curie('buoyWindSpeedFinalQFSciRvw'),
                      model_uri=NEON.buoyWindSpeedFinalQFSciRvw, domain=None, range=Optional[str])

slots.buoyWindSpeedGapFailQM = Slot(uri=NEON.buoyWindSpeedGapFailQM, name="buoyWindSpeedGapFailQM", curie=NEON.curie('buoyWindSpeedGapFailQM'),
                      model_uri=NEON.buoyWindSpeedGapFailQM, domain=None, range=Optional[float])

slots.buoyWindSpeedGapNAQM = Slot(uri=NEON.buoyWindSpeedGapNAQM, name="buoyWindSpeedGapNAQM", curie=NEON.curie('buoyWindSpeedGapNAQM'),
                      model_uri=NEON.buoyWindSpeedGapNAQM, domain=None, range=Optional[float])

slots.buoyWindSpeedGapPassQM = Slot(uri=NEON.buoyWindSpeedGapPassQM, name="buoyWindSpeedGapPassQM", curie=NEON.curie('buoyWindSpeedGapPassQM'),
                      model_uri=NEON.buoyWindSpeedGapPassQM, domain=None, range=Optional[float])

slots.buoyWindSpeedGapQAQCRpt = Slot(uri=NEON.buoyWindSpeedGapQAQCRpt, name="buoyWindSpeedGapQAQCRpt", curie=NEON.curie('buoyWindSpeedGapQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedGapQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedMaximum = Slot(uri=NEON.buoyWindSpeedMaximum, name="buoyWindSpeedMaximum", curie=NEON.curie('buoyWindSpeedMaximum'),
                      model_uri=NEON.buoyWindSpeedMaximum, domain=None, range=Optional[float])

slots.buoyWindSpeedMean = Slot(uri=NEON.buoyWindSpeedMean, name="buoyWindSpeedMean", curie=NEON.curie('buoyWindSpeedMean'),
                      model_uri=NEON.buoyWindSpeedMean, domain=None, range=Optional[float])

slots.buoyWindSpeedMinimum = Slot(uri=NEON.buoyWindSpeedMinimum, name="buoyWindSpeedMinimum", curie=NEON.curie('buoyWindSpeedMinimum'),
                      model_uri=NEON.buoyWindSpeedMinimum, domain=None, range=Optional[float])

slots.buoyWindSpeedNullFailQM = Slot(uri=NEON.buoyWindSpeedNullFailQM, name="buoyWindSpeedNullFailQM", curie=NEON.curie('buoyWindSpeedNullFailQM'),
                      model_uri=NEON.buoyWindSpeedNullFailQM, domain=None, range=Optional[float])

slots.buoyWindSpeedNullNAQM = Slot(uri=NEON.buoyWindSpeedNullNAQM, name="buoyWindSpeedNullNAQM", curie=NEON.curie('buoyWindSpeedNullNAQM'),
                      model_uri=NEON.buoyWindSpeedNullNAQM, domain=None, range=Optional[float])

slots.buoyWindSpeedNullPassQM = Slot(uri=NEON.buoyWindSpeedNullPassQM, name="buoyWindSpeedNullPassQM", curie=NEON.curie('buoyWindSpeedNullPassQM'),
                      model_uri=NEON.buoyWindSpeedNullPassQM, domain=None, range=Optional[float])

slots.buoyWindSpeedNullQAQCRpt = Slot(uri=NEON.buoyWindSpeedNullQAQCRpt, name="buoyWindSpeedNullQAQCRpt", curie=NEON.curie('buoyWindSpeedNullQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedNullQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedNumPts = Slot(uri=NEON.buoyWindSpeedNumPts, name="buoyWindSpeedNumPts", curie=NEON.curie('buoyWindSpeedNumPts'),
                      model_uri=NEON.buoyWindSpeedNumPts, domain=None, range=Optional[float])

slots.buoyWindSpeedPersistenceFailQM = Slot(uri=NEON.buoyWindSpeedPersistenceFailQM, name="buoyWindSpeedPersistenceFailQM", curie=NEON.curie('buoyWindSpeedPersistenceFailQM'),
                      model_uri=NEON.buoyWindSpeedPersistenceFailQM, domain=None, range=Optional[float])

slots.buoyWindSpeedPersistenceNAQM = Slot(uri=NEON.buoyWindSpeedPersistenceNAQM, name="buoyWindSpeedPersistenceNAQM", curie=NEON.curie('buoyWindSpeedPersistenceNAQM'),
                      model_uri=NEON.buoyWindSpeedPersistenceNAQM, domain=None, range=Optional[float])

slots.buoyWindSpeedPersistencePassQM = Slot(uri=NEON.buoyWindSpeedPersistencePassQM, name="buoyWindSpeedPersistencePassQM", curie=NEON.curie('buoyWindSpeedPersistencePassQM'),
                      model_uri=NEON.buoyWindSpeedPersistencePassQM, domain=None, range=Optional[float])

slots.buoyWindSpeedPersistenceQAQCRpt = Slot(uri=NEON.buoyWindSpeedPersistenceQAQCRpt, name="buoyWindSpeedPersistenceQAQCRpt", curie=NEON.curie('buoyWindSpeedPersistenceQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedPersistenceQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedRangeFailQM = Slot(uri=NEON.buoyWindSpeedRangeFailQM, name="buoyWindSpeedRangeFailQM", curie=NEON.curie('buoyWindSpeedRangeFailQM'),
                      model_uri=NEON.buoyWindSpeedRangeFailQM, domain=None, range=Optional[float])

slots.buoyWindSpeedRangeNAQM = Slot(uri=NEON.buoyWindSpeedRangeNAQM, name="buoyWindSpeedRangeNAQM", curie=NEON.curie('buoyWindSpeedRangeNAQM'),
                      model_uri=NEON.buoyWindSpeedRangeNAQM, domain=None, range=Optional[float])

slots.buoyWindSpeedRangePassQM = Slot(uri=NEON.buoyWindSpeedRangePassQM, name="buoyWindSpeedRangePassQM", curie=NEON.curie('buoyWindSpeedRangePassQM'),
                      model_uri=NEON.buoyWindSpeedRangePassQM, domain=None, range=Optional[float])

slots.buoyWindSpeedRangeQAQCRpt = Slot(uri=NEON.buoyWindSpeedRangeQAQCRpt, name="buoyWindSpeedRangeQAQCRpt", curie=NEON.curie('buoyWindSpeedRangeQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedRangeQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedSpikeFailQM = Slot(uri=NEON.buoyWindSpeedSpikeFailQM, name="buoyWindSpeedSpikeFailQM", curie=NEON.curie('buoyWindSpeedSpikeFailQM'),
                      model_uri=NEON.buoyWindSpeedSpikeFailQM, domain=None, range=Optional[float])

slots.buoyWindSpeedSpikeNAQM = Slot(uri=NEON.buoyWindSpeedSpikeNAQM, name="buoyWindSpeedSpikeNAQM", curie=NEON.curie('buoyWindSpeedSpikeNAQM'),
                      model_uri=NEON.buoyWindSpeedSpikeNAQM, domain=None, range=Optional[float])

slots.buoyWindSpeedSpikePassQM = Slot(uri=NEON.buoyWindSpeedSpikePassQM, name="buoyWindSpeedSpikePassQM", curie=NEON.curie('buoyWindSpeedSpikePassQM'),
                      model_uri=NEON.buoyWindSpeedSpikePassQM, domain=None, range=Optional[float])

slots.buoyWindSpeedSpikeQAQCRpt = Slot(uri=NEON.buoyWindSpeedSpikeQAQCRpt, name="buoyWindSpeedSpikeQAQCRpt", curie=NEON.curie('buoyWindSpeedSpikeQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedSpikeQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedStdErMean = Slot(uri=NEON.buoyWindSpeedStdErMean, name="buoyWindSpeedStdErMean", curie=NEON.curie('buoyWindSpeedStdErMean'),
                      model_uri=NEON.buoyWindSpeedStdErMean, domain=None, range=Optional[float])

slots.buoyWindSpeedStepFailQM = Slot(uri=NEON.buoyWindSpeedStepFailQM, name="buoyWindSpeedStepFailQM", curie=NEON.curie('buoyWindSpeedStepFailQM'),
                      model_uri=NEON.buoyWindSpeedStepFailQM, domain=None, range=Optional[float])

slots.buoyWindSpeedStepNAQM = Slot(uri=NEON.buoyWindSpeedStepNAQM, name="buoyWindSpeedStepNAQM", curie=NEON.curie('buoyWindSpeedStepNAQM'),
                      model_uri=NEON.buoyWindSpeedStepNAQM, domain=None, range=Optional[float])

slots.buoyWindSpeedStepPassQM = Slot(uri=NEON.buoyWindSpeedStepPassQM, name="buoyWindSpeedStepPassQM", curie=NEON.curie('buoyWindSpeedStepPassQM'),
                      model_uri=NEON.buoyWindSpeedStepPassQM, domain=None, range=Optional[float])

slots.buoyWindSpeedStepQAQCRpt = Slot(uri=NEON.buoyWindSpeedStepQAQCRpt, name="buoyWindSpeedStepQAQCRpt", curie=NEON.curie('buoyWindSpeedStepQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedStepQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedValidCalFailQM = Slot(uri=NEON.buoyWindSpeedValidCalFailQM, name="buoyWindSpeedValidCalFailQM", curie=NEON.curie('buoyWindSpeedValidCalFailQM'),
                      model_uri=NEON.buoyWindSpeedValidCalFailQM, domain=None, range=Optional[float])

slots.buoyWindSpeedValidCalNAQM = Slot(uri=NEON.buoyWindSpeedValidCalNAQM, name="buoyWindSpeedValidCalNAQM", curie=NEON.curie('buoyWindSpeedValidCalNAQM'),
                      model_uri=NEON.buoyWindSpeedValidCalNAQM, domain=None, range=Optional[float])

slots.buoyWindSpeedValidCalPassQM = Slot(uri=NEON.buoyWindSpeedValidCalPassQM, name="buoyWindSpeedValidCalPassQM", curie=NEON.curie('buoyWindSpeedValidCalPassQM'),
                      model_uri=NEON.buoyWindSpeedValidCalPassQM, domain=None, range=Optional[float])

slots.buoyWindSpeedValidCalQAQCRpt = Slot(uri=NEON.buoyWindSpeedValidCalQAQCRpt, name="buoyWindSpeedValidCalQAQCRpt", curie=NEON.curie('buoyWindSpeedValidCalQAQCRpt'),
                      model_uri=NEON.buoyWindSpeedValidCalQAQCRpt, domain=None, range=Optional[str])

slots.buoyWindSpeedVariance = Slot(uri=NEON.buoyWindSpeedVariance, name="buoyWindSpeedVariance", curie=NEON.curie('buoyWindSpeedVariance'),
                      model_uri=NEON.buoyWindSpeedVariance, domain=None, range=Optional[float])

slots.labPrepMethod = Slot(uri=NEON.labPrepMethod, name="labPrepMethod", curie=NEON.curie('labPrepMethod'),
                      model_uri=NEON.labPrepMethod, domain=None, range=Optional[str])

slots.nucleicAcidPurity = Slot(uri=NEON.nucleicAcidPurity, name="nucleicAcidPurity", curie=NEON.curie('nucleicAcidPurity'),
                      model_uri=NEON.nucleicAcidPurity, domain=None, range=Optional[float])

slots.sequenceAnalysisType = Slot(uri=NEON.sequenceAnalysisType, name="sequenceAnalysisType", curie=NEON.curie('sequenceAnalysisType'),
                      model_uri=NEON.sequenceAnalysisType, domain=None, range=Optional[str])

slots.buoyNAFlag = Slot(uri=NEON.buoyNAFlag, name="buoyNAFlag", curie=NEON.curie('buoyNAFlag'),
                      model_uri=NEON.buoyNAFlag, domain=None, range=Optional[int])

slots.chlorophyllAbsQF = Slot(uri=NEON.chlorophyllAbsQF, name="chlorophyllAbsQF", curie=NEON.curie('chlorophyllAbsQF'),
                      model_uri=NEON.chlorophyllAbsQF, domain=None, range=Optional[int])

slots.chlorophyllAlphaQF = Slot(uri=NEON.chlorophyllAlphaQF, name="chlorophyllAlphaQF", curie=NEON.curie('chlorophyllAlphaQF'),
                      model_uri=NEON.chlorophyllAlphaQF, domain=None, range=Optional[int])

slots.chlorophyllBetaQF = Slot(uri=NEON.chlorophyllBetaQF, name="chlorophyllBetaQF", curie=NEON.curie('chlorophyllBetaQF'),
                      model_uri=NEON.chlorophyllBetaQF, domain=None, range=Optional[int])

slots.chlorophyllConsistQF = Slot(uri=NEON.chlorophyllConsistQF, name="chlorophyllConsistQF", curie=NEON.curie('chlorophyllConsistQF'),
                      model_uri=NEON.chlorophyllConsistQF, domain=None, range=Optional[int])

slots.chlorophyllExpUncert = Slot(uri=NEON.chlorophyllExpUncert, name="chlorophyllExpUncert", curie=NEON.curie('chlorophyllExpUncert'),
                      model_uri=NEON.chlorophyllExpUncert, domain=None, range=Optional[float])

slots.chlorophyllFinalQF = Slot(uri=NEON.chlorophyllFinalQF, name="chlorophyllFinalQF", curie=NEON.curie('chlorophyllFinalQF'),
                      model_uri=NEON.chlorophyllFinalQF, domain=None, range=Optional[str])

slots.chlorophyllFinalQFSciRvw = Slot(uri=NEON.chlorophyllFinalQFSciRvw, name="chlorophyllFinalQFSciRvw", curie=NEON.curie('chlorophyllFinalQFSciRvw'),
                      model_uri=NEON.chlorophyllFinalQFSciRvw, domain=None, range=Optional[str])

slots.chlorophyllGapQF = Slot(uri=NEON.chlorophyllGapQF, name="chlorophyllGapQF", curie=NEON.curie('chlorophyllGapQF'),
                      model_uri=NEON.chlorophyllGapQF, domain=None, range=Optional[int])

slots.chlorophyllNullQF = Slot(uri=NEON.chlorophyllNullQF, name="chlorophyllNullQF", curie=NEON.curie('chlorophyllNullQF'),
                      model_uri=NEON.chlorophyllNullQF, domain=None, range=Optional[int])

slots.chlorophyllPersistenceQF = Slot(uri=NEON.chlorophyllPersistenceQF, name="chlorophyllPersistenceQF", curie=NEON.curie('chlorophyllPersistenceQF'),
                      model_uri=NEON.chlorophyllPersistenceQF, domain=None, range=Optional[int])

slots.chlorophyllRangeQF = Slot(uri=NEON.chlorophyllRangeQF, name="chlorophyllRangeQF", curie=NEON.curie('chlorophyllRangeQF'),
                      model_uri=NEON.chlorophyllRangeQF, domain=None, range=Optional[int])

slots.chlorophyllSpikeQF = Slot(uri=NEON.chlorophyllSpikeQF, name="chlorophyllSpikeQF", curie=NEON.curie('chlorophyllSpikeQF'),
                      model_uri=NEON.chlorophyllSpikeQF, domain=None, range=Optional[int])

slots.chlorophyllStepQF = Slot(uri=NEON.chlorophyllStepQF, name="chlorophyllStepQF", curie=NEON.curie('chlorophyllStepQF'),
                      model_uri=NEON.chlorophyllStepQF, domain=None, range=Optional[int])

slots.chlorophyllTempQF = Slot(uri=NEON.chlorophyllTempQF, name="chlorophyllTempQF", curie=NEON.curie('chlorophyllTempQF'),
                      model_uri=NEON.chlorophyllTempQF, domain=None, range=Optional[int])

slots.chlorophyllValidCalQF = Slot(uri=NEON.chlorophyllValidCalQF, name="chlorophyllValidCalQF", curie=NEON.curie('chlorophyllValidCalQF'),
                      model_uri=NEON.chlorophyllValidCalQF, domain=None, range=Optional[int])

slots.dissolvedOxygenAlphaQF = Slot(uri=NEON.dissolvedOxygenAlphaQF, name="dissolvedOxygenAlphaQF", curie=NEON.curie('dissolvedOxygenAlphaQF'),
                      model_uri=NEON.dissolvedOxygenAlphaQF, domain=None, range=Optional[int])

slots.dissolvedOxygenBetaQF = Slot(uri=NEON.dissolvedOxygenBetaQF, name="dissolvedOxygenBetaQF", curie=NEON.curie('dissolvedOxygenBetaQF'),
                      model_uri=NEON.dissolvedOxygenBetaQF, domain=None, range=Optional[int])

slots.dissolvedOxygenConsistQF = Slot(uri=NEON.dissolvedOxygenConsistQF, name="dissolvedOxygenConsistQF", curie=NEON.curie('dissolvedOxygenConsistQF'),
                      model_uri=NEON.dissolvedOxygenConsistQF, domain=None, range=Optional[int])

slots.dissolvedOxygenExpUncert = Slot(uri=NEON.dissolvedOxygenExpUncert, name="dissolvedOxygenExpUncert", curie=NEON.curie('dissolvedOxygenExpUncert'),
                      model_uri=NEON.dissolvedOxygenExpUncert, domain=None, range=Optional[float])

slots.dissolvedOxygenFinalQF = Slot(uri=NEON.dissolvedOxygenFinalQF, name="dissolvedOxygenFinalQF", curie=NEON.curie('dissolvedOxygenFinalQF'),
                      model_uri=NEON.dissolvedOxygenFinalQF, domain=None, range=Optional[int])

slots.dissolvedOxygenFinalQFSciRvw = Slot(uri=NEON.dissolvedOxygenFinalQFSciRvw, name="dissolvedOxygenFinalQFSciRvw", curie=NEON.curie('dissolvedOxygenFinalQFSciRvw'),
                      model_uri=NEON.dissolvedOxygenFinalQFSciRvw, domain=None, range=Optional[int])

slots.dissolvedOxygenGapQF = Slot(uri=NEON.dissolvedOxygenGapQF, name="dissolvedOxygenGapQF", curie=NEON.curie('dissolvedOxygenGapQF'),
                      model_uri=NEON.dissolvedOxygenGapQF, domain=None, range=Optional[int])

slots.dissolvedOxygenNullQF = Slot(uri=NEON.dissolvedOxygenNullQF, name="dissolvedOxygenNullQF", curie=NEON.curie('dissolvedOxygenNullQF'),
                      model_uri=NEON.dissolvedOxygenNullQF, domain=None, range=Optional[int])

slots.dissolvedOxygenPersistenceQF = Slot(uri=NEON.dissolvedOxygenPersistenceQF, name="dissolvedOxygenPersistenceQF", curie=NEON.curie('dissolvedOxygenPersistenceQF'),
                      model_uri=NEON.dissolvedOxygenPersistenceQF, domain=None, range=Optional[int])

slots.dissolvedOxygenRangeQF = Slot(uri=NEON.dissolvedOxygenRangeQF, name="dissolvedOxygenRangeQF", curie=NEON.curie('dissolvedOxygenRangeQF'),
                      model_uri=NEON.dissolvedOxygenRangeQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatAlphaQF = Slot(uri=NEON.dissolvedOxygenSatAlphaQF, name="dissolvedOxygenSatAlphaQF", curie=NEON.curie('dissolvedOxygenSatAlphaQF'),
                      model_uri=NEON.dissolvedOxygenSatAlphaQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatBetaQF = Slot(uri=NEON.dissolvedOxygenSatBetaQF, name="dissolvedOxygenSatBetaQF", curie=NEON.curie('dissolvedOxygenSatBetaQF'),
                      model_uri=NEON.dissolvedOxygenSatBetaQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatConsistQF = Slot(uri=NEON.dissolvedOxygenSatConsistQF, name="dissolvedOxygenSatConsistQF", curie=NEON.curie('dissolvedOxygenSatConsistQF'),
                      model_uri=NEON.dissolvedOxygenSatConsistQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatExpUncert = Slot(uri=NEON.dissolvedOxygenSatExpUncert, name="dissolvedOxygenSatExpUncert", curie=NEON.curie('dissolvedOxygenSatExpUncert'),
                      model_uri=NEON.dissolvedOxygenSatExpUncert, domain=None, range=Optional[float])

slots.dissolvedOxygenSatFinalQF = Slot(uri=NEON.dissolvedOxygenSatFinalQF, name="dissolvedOxygenSatFinalQF", curie=NEON.curie('dissolvedOxygenSatFinalQF'),
                      model_uri=NEON.dissolvedOxygenSatFinalQF, domain=None, range=Optional[str])

slots.dissolvedOxygenSatFinalQFSciRvw = Slot(uri=NEON.dissolvedOxygenSatFinalQFSciRvw, name="dissolvedOxygenSatFinalQFSciRvw", curie=NEON.curie('dissolvedOxygenSatFinalQFSciRvw'),
                      model_uri=NEON.dissolvedOxygenSatFinalQFSciRvw, domain=None, range=Optional[str])

slots.dissolvedOxygenSatGapQF = Slot(uri=NEON.dissolvedOxygenSatGapQF, name="dissolvedOxygenSatGapQF", curie=NEON.curie('dissolvedOxygenSatGapQF'),
                      model_uri=NEON.dissolvedOxygenSatGapQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatNullQF = Slot(uri=NEON.dissolvedOxygenSatNullQF, name="dissolvedOxygenSatNullQF", curie=NEON.curie('dissolvedOxygenSatNullQF'),
                      model_uri=NEON.dissolvedOxygenSatNullQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatPersistQF = Slot(uri=NEON.dissolvedOxygenSatPersistQF, name="dissolvedOxygenSatPersistQF", curie=NEON.curie('dissolvedOxygenSatPersistQF'),
                      model_uri=NEON.dissolvedOxygenSatPersistQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatRangeQF = Slot(uri=NEON.dissolvedOxygenSatRangeQF, name="dissolvedOxygenSatRangeQF", curie=NEON.curie('dissolvedOxygenSatRangeQF'),
                      model_uri=NEON.dissolvedOxygenSatRangeQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatSpikeQF = Slot(uri=NEON.dissolvedOxygenSatSpikeQF, name="dissolvedOxygenSatSpikeQF", curie=NEON.curie('dissolvedOxygenSatSpikeQF'),
                      model_uri=NEON.dissolvedOxygenSatSpikeQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatStepQF = Slot(uri=NEON.dissolvedOxygenSatStepQF, name="dissolvedOxygenSatStepQF", curie=NEON.curie('dissolvedOxygenSatStepQF'),
                      model_uri=NEON.dissolvedOxygenSatStepQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSatValidCalQF = Slot(uri=NEON.dissolvedOxygenSatValidCalQF, name="dissolvedOxygenSatValidCalQF", curie=NEON.curie('dissolvedOxygenSatValidCalQF'),
                      model_uri=NEON.dissolvedOxygenSatValidCalQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSpikeQF = Slot(uri=NEON.dissolvedOxygenSpikeQF, name="dissolvedOxygenSpikeQF", curie=NEON.curie('dissolvedOxygenSpikeQF'),
                      model_uri=NEON.dissolvedOxygenSpikeQF, domain=None, range=Optional[int])

slots.dissolvedOxygenStepQF = Slot(uri=NEON.dissolvedOxygenStepQF, name="dissolvedOxygenStepQF", curie=NEON.curie('dissolvedOxygenStepQF'),
                      model_uri=NEON.dissolvedOxygenStepQF, domain=None, range=Optional[int])

slots.dissolvedOxygenValidCalQF = Slot(uri=NEON.dissolvedOxygenValidCalQF, name="dissolvedOxygenValidCalQF", curie=NEON.curie('dissolvedOxygenValidCalQF'),
                      model_uri=NEON.dissolvedOxygenValidCalQF, domain=None, range=Optional[int])

slots.fDOMAbsQF = Slot(uri=NEON.fDOMAbsQF, name="fDOMAbsQF", curie=NEON.curie('fDOMAbsQF'),
                      model_uri=NEON.fDOMAbsQF, domain=None, range=Optional[int])

slots.fDOMAlphaQF = Slot(uri=NEON.fDOMAlphaQF, name="fDOMAlphaQF", curie=NEON.curie('fDOMAlphaQF'),
                      model_uri=NEON.fDOMAlphaQF, domain=None, range=Optional[int])

slots.fDOMBetaQF = Slot(uri=NEON.fDOMBetaQF, name="fDOMBetaQF", curie=NEON.curie('fDOMBetaQF'),
                      model_uri=NEON.fDOMBetaQF, domain=None, range=Optional[int])

slots.fDOMConsistQF = Slot(uri=NEON.fDOMConsistQF, name="fDOMConsistQF", curie=NEON.curie('fDOMConsistQF'),
                      model_uri=NEON.fDOMConsistQF, domain=None, range=Optional[int])

slots.fDOMExpUncert = Slot(uri=NEON.fDOMExpUncert, name="fDOMExpUncert", curie=NEON.curie('fDOMExpUncert'),
                      model_uri=NEON.fDOMExpUncert, domain=None, range=Optional[float])

slots.fDOMFinalQF = Slot(uri=NEON.fDOMFinalQF, name="fDOMFinalQF", curie=NEON.curie('fDOMFinalQF'),
                      model_uri=NEON.fDOMFinalQF, domain=None, range=Optional[str])

slots.fDOMFinalQFSciRvw = Slot(uri=NEON.fDOMFinalQFSciRvw, name="fDOMFinalQFSciRvw", curie=NEON.curie('fDOMFinalQFSciRvw'),
                      model_uri=NEON.fDOMFinalQFSciRvw, domain=None, range=Optional[str])

slots.fDOMGapQF = Slot(uri=NEON.fDOMGapQF, name="fDOMGapQF", curie=NEON.curie('fDOMGapQF'),
                      model_uri=NEON.fDOMGapQF, domain=None, range=Optional[int])

slots.fDOMNullQF = Slot(uri=NEON.fDOMNullQF, name="fDOMNullQF", curie=NEON.curie('fDOMNullQF'),
                      model_uri=NEON.fDOMNullQF, domain=None, range=Optional[int])

slots.fDOMPersistenceQF = Slot(uri=NEON.fDOMPersistenceQF, name="fDOMPersistenceQF", curie=NEON.curie('fDOMPersistenceQF'),
                      model_uri=NEON.fDOMPersistenceQF, domain=None, range=Optional[int])

slots.fDOMRangeQF = Slot(uri=NEON.fDOMRangeQF, name="fDOMRangeQF", curie=NEON.curie('fDOMRangeQF'),
                      model_uri=NEON.fDOMRangeQF, domain=None, range=Optional[int])

slots.fDOMSpikeQF = Slot(uri=NEON.fDOMSpikeQF, name="fDOMSpikeQF", curie=NEON.curie('fDOMSpikeQF'),
                      model_uri=NEON.fDOMSpikeQF, domain=None, range=Optional[int])

slots.fDOMStepQF = Slot(uri=NEON.fDOMStepQF, name="fDOMStepQF", curie=NEON.curie('fDOMStepQF'),
                      model_uri=NEON.fDOMStepQF, domain=None, range=Optional[int])

slots.fDOMTempQF = Slot(uri=NEON.fDOMTempQF, name="fDOMTempQF", curie=NEON.curie('fDOMTempQF'),
                      model_uri=NEON.fDOMTempQF, domain=None, range=Optional[int])

slots.fDOMValidCalQF = Slot(uri=NEON.fDOMValidCalQF, name="fDOMValidCalQF", curie=NEON.curie('fDOMValidCalQF'),
                      model_uri=NEON.fDOMValidCalQF, domain=None, range=Optional[int])

slots.pHAlphaQF = Slot(uri=NEON.pHAlphaQF, name="pHAlphaQF", curie=NEON.curie('pHAlphaQF'),
                      model_uri=NEON.pHAlphaQF, domain=None, range=Optional[int])

slots.pHBetaQF = Slot(uri=NEON.pHBetaQF, name="pHBetaQF", curie=NEON.curie('pHBetaQF'),
                      model_uri=NEON.pHBetaQF, domain=None, range=Optional[int])

slots.pHConsistQF = Slot(uri=NEON.pHConsistQF, name="pHConsistQF", curie=NEON.curie('pHConsistQF'),
                      model_uri=NEON.pHConsistQF, domain=None, range=Optional[int])

slots.pHExpUncert = Slot(uri=NEON.pHExpUncert, name="pHExpUncert", curie=NEON.curie('pHExpUncert'),
                      model_uri=NEON.pHExpUncert, domain=None, range=Optional[float])

slots.pHFinalQF = Slot(uri=NEON.pHFinalQF, name="pHFinalQF", curie=NEON.curie('pHFinalQF'),
                      model_uri=NEON.pHFinalQF, domain=None, range=Optional[str])

slots.pHFinalQFSciRvw = Slot(uri=NEON.pHFinalQFSciRvw, name="pHFinalQFSciRvw", curie=NEON.curie('pHFinalQFSciRvw'),
                      model_uri=NEON.pHFinalQFSciRvw, domain=None, range=Optional[str])

slots.pHGapQF = Slot(uri=NEON.pHGapQF, name="pHGapQF", curie=NEON.curie('pHGapQF'),
                      model_uri=NEON.pHGapQF, domain=None, range=Optional[int])

slots.pHNullQF = Slot(uri=NEON.pHNullQF, name="pHNullQF", curie=NEON.curie('pHNullQF'),
                      model_uri=NEON.pHNullQF, domain=None, range=Optional[int])

slots.pHPersistenceQF = Slot(uri=NEON.pHPersistenceQF, name="pHPersistenceQF", curie=NEON.curie('pHPersistenceQF'),
                      model_uri=NEON.pHPersistenceQF, domain=None, range=Optional[int])

slots.pHRangeQF = Slot(uri=NEON.pHRangeQF, name="pHRangeQF", curie=NEON.curie('pHRangeQF'),
                      model_uri=NEON.pHRangeQF, domain=None, range=Optional[int])

slots.pHSpikeQF = Slot(uri=NEON.pHSpikeQF, name="pHSpikeQF", curie=NEON.curie('pHSpikeQF'),
                      model_uri=NEON.pHSpikeQF, domain=None, range=Optional[int])

slots.pHStepQF = Slot(uri=NEON.pHStepQF, name="pHStepQF", curie=NEON.curie('pHStepQF'),
                      model_uri=NEON.pHStepQF, domain=None, range=Optional[int])

slots.pHValidCalQF = Slot(uri=NEON.pHValidCalQF, name="pHValidCalQF", curie=NEON.curie('pHValidCalQF'),
                      model_uri=NEON.pHValidCalQF, domain=None, range=Optional[int])

slots.sensorDepthExpUncert = Slot(uri=NEON.sensorDepthExpUncert, name="sensorDepthExpUncert", curie=NEON.curie('sensorDepthExpUncert'),
                      model_uri=NEON.sensorDepthExpUncert, domain=None, range=Optional[float])

slots.sensorDepthFinalQFSciRvw = Slot(uri=NEON.sensorDepthFinalQFSciRvw, name="sensorDepthFinalQFSciRvw", curie=NEON.curie('sensorDepthFinalQFSciRvw'),
                      model_uri=NEON.sensorDepthFinalQFSciRvw, domain=None, range=Optional[int])

slots.specificCondFinalQFSciRvw = Slot(uri=NEON.specificCondFinalQFSciRvw, name="specificCondFinalQFSciRvw", curie=NEON.curie('specificCondFinalQFSciRvw'),
                      model_uri=NEON.specificCondFinalQFSciRvw, domain=None, range=Optional[str])

slots.specificConductanceAlphaQF = Slot(uri=NEON.specificConductanceAlphaQF, name="specificConductanceAlphaQF", curie=NEON.curie('specificConductanceAlphaQF'),
                      model_uri=NEON.specificConductanceAlphaQF, domain=None, range=Optional[int])

slots.specificConductanceBetaQF = Slot(uri=NEON.specificConductanceBetaQF, name="specificConductanceBetaQF", curie=NEON.curie('specificConductanceBetaQF'),
                      model_uri=NEON.specificConductanceBetaQF, domain=None, range=Optional[int])

slots.specificConductanceConsistQF = Slot(uri=NEON.specificConductanceConsistQF, name="specificConductanceConsistQF", curie=NEON.curie('specificConductanceConsistQF'),
                      model_uri=NEON.specificConductanceConsistQF, domain=None, range=Optional[int])

slots.specificConductanceExpUncert = Slot(uri=NEON.specificConductanceExpUncert, name="specificConductanceExpUncert", curie=NEON.curie('specificConductanceExpUncert'),
                      model_uri=NEON.specificConductanceExpUncert, domain=None, range=Optional[float])

slots.specificCondFinalQF = Slot(uri=NEON.specificCondFinalQF, name="specificCondFinalQF", curie=NEON.curie('specificCondFinalQF'),
                      model_uri=NEON.specificCondFinalQF, domain=None, range=Optional[int])

slots.specificConductanceGapQF = Slot(uri=NEON.specificConductanceGapQF, name="specificConductanceGapQF", curie=NEON.curie('specificConductanceGapQF'),
                      model_uri=NEON.specificConductanceGapQF, domain=None, range=Optional[int])

slots.specificConductanceNullQF = Slot(uri=NEON.specificConductanceNullQF, name="specificConductanceNullQF", curie=NEON.curie('specificConductanceNullQF'),
                      model_uri=NEON.specificConductanceNullQF, domain=None, range=Optional[int])

slots.specificConductancePersistQF = Slot(uri=NEON.specificConductancePersistQF, name="specificConductancePersistQF", curie=NEON.curie('specificConductancePersistQF'),
                      model_uri=NEON.specificConductancePersistQF, domain=None, range=Optional[int])

slots.specificConductanceRangeQF = Slot(uri=NEON.specificConductanceRangeQF, name="specificConductanceRangeQF", curie=NEON.curie('specificConductanceRangeQF'),
                      model_uri=NEON.specificConductanceRangeQF, domain=None, range=Optional[int])

slots.specificConductanceSpikeQF = Slot(uri=NEON.specificConductanceSpikeQF, name="specificConductanceSpikeQF", curie=NEON.curie('specificConductanceSpikeQF'),
                      model_uri=NEON.specificConductanceSpikeQF, domain=None, range=Optional[int])

slots.specificConductanceStepQF = Slot(uri=NEON.specificConductanceStepQF, name="specificConductanceStepQF", curie=NEON.curie('specificConductanceStepQF'),
                      model_uri=NEON.specificConductanceStepQF, domain=None, range=Optional[int])

slots.turbidityAlphaQF = Slot(uri=NEON.turbidityAlphaQF, name="turbidityAlphaQF", curie=NEON.curie('turbidityAlphaQF'),
                      model_uri=NEON.turbidityAlphaQF, domain=None, range=Optional[int])

slots.turbidityBetaQF = Slot(uri=NEON.turbidityBetaQF, name="turbidityBetaQF", curie=NEON.curie('turbidityBetaQF'),
                      model_uri=NEON.turbidityBetaQF, domain=None, range=Optional[int])

slots.turbidityConsistQF = Slot(uri=NEON.turbidityConsistQF, name="turbidityConsistQF", curie=NEON.curie('turbidityConsistQF'),
                      model_uri=NEON.turbidityConsistQF, domain=None, range=Optional[int])

slots.turbidityExpUncert = Slot(uri=NEON.turbidityExpUncert, name="turbidityExpUncert", curie=NEON.curie('turbidityExpUncert'),
                      model_uri=NEON.turbidityExpUncert, domain=None, range=Optional[float])

slots.turbidityFinalQF = Slot(uri=NEON.turbidityFinalQF, name="turbidityFinalQF", curie=NEON.curie('turbidityFinalQF'),
                      model_uri=NEON.turbidityFinalQF, domain=None, range=Optional[str])

slots.turbidityFinalQFSciRvw = Slot(uri=NEON.turbidityFinalQFSciRvw, name="turbidityFinalQFSciRvw", curie=NEON.curie('turbidityFinalQFSciRvw'),
                      model_uri=NEON.turbidityFinalQFSciRvw, domain=None, range=Optional[str])

slots.turbidityGapQF = Slot(uri=NEON.turbidityGapQF, name="turbidityGapQF", curie=NEON.curie('turbidityGapQF'),
                      model_uri=NEON.turbidityGapQF, domain=None, range=Optional[int])

slots.turbidityNullQF = Slot(uri=NEON.turbidityNullQF, name="turbidityNullQF", curie=NEON.curie('turbidityNullQF'),
                      model_uri=NEON.turbidityNullQF, domain=None, range=Optional[int])

slots.turbidityPersistenceQF = Slot(uri=NEON.turbidityPersistenceQF, name="turbidityPersistenceQF", curie=NEON.curie('turbidityPersistenceQF'),
                      model_uri=NEON.turbidityPersistenceQF, domain=None, range=Optional[int])

slots.turbidityRangeQF = Slot(uri=NEON.turbidityRangeQF, name="turbidityRangeQF", curie=NEON.curie('turbidityRangeQF'),
                      model_uri=NEON.turbidityRangeQF, domain=None, range=Optional[int])

slots.turbiditySpikeQF = Slot(uri=NEON.turbiditySpikeQF, name="turbiditySpikeQF", curie=NEON.curie('turbiditySpikeQF'),
                      model_uri=NEON.turbiditySpikeQF, domain=None, range=Optional[int])

slots.turbidityStepQF = Slot(uri=NEON.turbidityStepQF, name="turbidityStepQF", curie=NEON.curie('turbidityStepQF'),
                      model_uri=NEON.turbidityStepQF, domain=None, range=Optional[int])

slots.turbidityValidCalQF = Slot(uri=NEON.turbidityValidCalQF, name="turbidityValidCalQF", curie=NEON.curie('turbidityValidCalQF'),
                      model_uri=NEON.turbidityValidCalQF, domain=None, range=Optional[int])

slots.ammoniumNAnalysisDate = Slot(uri=NEON.ammoniumNAnalysisDate, name="ammoniumNAnalysisDate", curie=NEON.curie('ammoniumNAnalysisDate'),
                      model_uri=NEON.ammoniumNAnalysisDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.ammoniumNAnalyzedBy = Slot(uri=NEON.ammoniumNAnalyzedBy, name="ammoniumNAnalyzedBy", curie=NEON.curie('ammoniumNAnalyzedBy'),
                      model_uri=NEON.ammoniumNAnalyzedBy, domain=None, range=Optional[str])

slots.ammoniumNInstrument = Slot(uri=NEON.ammoniumNInstrument, name="ammoniumNInstrument", curie=NEON.curie('ammoniumNInstrument'),
                      model_uri=NEON.ammoniumNInstrument, domain=None, range=Optional[str])

slots.ammoniumNMethod = Slot(uri=NEON.ammoniumNMethod, name="ammoniumNMethod", curie=NEON.curie('ammoniumNMethod'),
                      model_uri=NEON.ammoniumNMethod, domain=None, range=Optional[str])

slots.ammoniumNQF = Slot(uri=NEON.ammoniumNQF, name="ammoniumNQF", curie=NEON.curie('ammoniumNQF'),
                      model_uri=NEON.ammoniumNQF, domain=None, range=Optional[str])

slots.ammoniumNRemarks = Slot(uri=NEON.ammoniumNRemarks, name="ammoniumNRemarks", curie=NEON.curie('ammoniumNRemarks'),
                      model_uri=NEON.ammoniumNRemarks, domain=None, range=Optional[str])

slots.ammoniumNRepNum = Slot(uri=NEON.ammoniumNRepNum, name="ammoniumNRepNum", curie=NEON.curie('ammoniumNRepNum'),
                      model_uri=NEON.ammoniumNRepNum, domain=None, range=Optional[str])

slots.ammoniumNReviewedBy = Slot(uri=NEON.ammoniumNReviewedBy, name="ammoniumNReviewedBy", curie=NEON.curie('ammoniumNReviewedBy'),
                      model_uri=NEON.ammoniumNReviewedBy, domain=None, range=Optional[str])

slots.ammoniumNRunID = Slot(uri=NEON.ammoniumNRunID, name="ammoniumNRunID", curie=NEON.curie('ammoniumNRunID'),
                      model_uri=NEON.ammoniumNRunID, domain=None, range=Optional[str])

slots.analyteQF = Slot(uri=NEON.analyteQF, name="analyteQF", curie=NEON.curie('analyteQF'),
                      model_uri=NEON.analyteQF, domain=None, range=Optional[str])

slots.extractionEndDate = Slot(uri=NEON.extractionEndDate, name="extractionEndDate", curie=NEON.curie('extractionEndDate'),
                      model_uri=NEON.extractionEndDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.extractionStartDate = Slot(uri=NEON.extractionStartDate, name="extractionStartDate", curie=NEON.curie('extractionStartDate'),
                      model_uri=NEON.extractionStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.incubationLength = Slot(uri=NEON.incubationLength, name="incubationLength", curie=NEON.curie('incubationLength'),
                      model_uri=NEON.incubationLength, domain=None, range=Optional[float])

slots.incubationPairID = Slot(uri=NEON.incubationPairID, name="incubationPairID", curie=NEON.curie('incubationPairID'),
                      model_uri=NEON.incubationPairID, domain=None, range=Optional[str])

slots.kclAmmoniumNConc = Slot(uri=NEON.kclAmmoniumNConc, name="kclAmmoniumNConc", curie=NEON.curie('kclAmmoniumNConc'),
                      model_uri=NEON.kclAmmoniumNConc, domain=None, range=Optional[float])

slots.kclBatchNumber = Slot(uri=NEON.kclBatchNumber, name="kclBatchNumber", curie=NEON.curie('kclBatchNumber'),
                      model_uri=NEON.kclBatchNumber, domain=None, range=Optional[str])

slots.kclBlank1Code = Slot(uri=NEON.kclBlank1Code, name="kclBlank1Code", curie=NEON.curie('kclBlank1Code'),
                      model_uri=NEON.kclBlank1Code, domain=None, range=Optional[str])

slots.kclBlank1Fate = Slot(uri=NEON.kclBlank1Fate, name="kclBlank1Fate", curie=NEON.curie('kclBlank1Fate'),
                      model_uri=NEON.kclBlank1Fate, domain=None, range=Optional[str])

slots.kclBlank1ID = Slot(uri=NEON.kclBlank1ID, name="kclBlank1ID", curie=NEON.curie('kclBlank1ID'),
                      model_uri=NEON.kclBlank1ID, domain=None, range=Optional[str])

slots.kclBlank2Code = Slot(uri=NEON.kclBlank2Code, name="kclBlank2Code", curie=NEON.curie('kclBlank2Code'),
                      model_uri=NEON.kclBlank2Code, domain=None, range=Optional[str])

slots.kclBlank2Fate = Slot(uri=NEON.kclBlank2Fate, name="kclBlank2Fate", curie=NEON.curie('kclBlank2Fate'),
                      model_uri=NEON.kclBlank2Fate, domain=None, range=Optional[str])

slots.kclBlank2ID = Slot(uri=NEON.kclBlank2ID, name="kclBlank2ID", curie=NEON.curie('kclBlank2ID'),
                      model_uri=NEON.kclBlank2ID, domain=None, range=Optional[str])

slots.kclBlank3Code = Slot(uri=NEON.kclBlank3Code, name="kclBlank3Code", curie=NEON.curie('kclBlank3Code'),
                      model_uri=NEON.kclBlank3Code, domain=None, range=Optional[str])

slots.kclBlank3Fate = Slot(uri=NEON.kclBlank3Fate, name="kclBlank3Fate", curie=NEON.curie('kclBlank3Fate'),
                      model_uri=NEON.kclBlank3Fate, domain=None, range=Optional[str])

slots.kclBlank3ID = Slot(uri=NEON.kclBlank3ID, name="kclBlank3ID", curie=NEON.curie('kclBlank3ID'),
                      model_uri=NEON.kclBlank3ID, domain=None, range=Optional[str])

slots.kclNitrateNitriteNConc = Slot(uri=NEON.kclNitrateNitriteNConc, name="kclNitrateNitriteNConc", curie=NEON.curie('kclNitrateNitriteNConc'),
                      model_uri=NEON.kclNitrateNitriteNConc, domain=None, range=Optional[float])

slots.kclReferenceCode = Slot(uri=NEON.kclReferenceCode, name="kclReferenceCode", curie=NEON.curie('kclReferenceCode'),
                      model_uri=NEON.kclReferenceCode, domain=None, range=Optional[str])

slots.kclReferenceFate = Slot(uri=NEON.kclReferenceFate, name="kclReferenceFate", curie=NEON.curie('kclReferenceFate'),
                      model_uri=NEON.kclReferenceFate, domain=None, range=Optional[str])

slots.kclReferenceID = Slot(uri=NEON.kclReferenceID, name="kclReferenceID", curie=NEON.curie('kclReferenceID'),
                      model_uri=NEON.kclReferenceID, domain=None, range=Optional[str])

slots.kclSampleCode = Slot(uri=NEON.kclSampleCode, name="kclSampleCode", curie=NEON.curie('kclSampleCode'),
                      model_uri=NEON.kclSampleCode, domain=None, range=Optional[str])

slots.kclSampleFate = Slot(uri=NEON.kclSampleFate, name="kclSampleFate", curie=NEON.curie('kclSampleFate'),
                      model_uri=NEON.kclSampleFate, domain=None, range=Optional[str])

slots.kclSampleID = Slot(uri=NEON.kclSampleID, name="kclSampleID", curie=NEON.curie('kclSampleID'),
                      model_uri=NEON.kclSampleID, domain=None, range=Optional[str])

slots.kclVolume = Slot(uri=NEON.kclVolume, name="kclVolume", curie=NEON.curie('kclVolume'),
                      model_uri=NEON.kclVolume, domain=None, range=Optional[float])

slots.lotID = Slot(uri=NEON.lotID, name="lotID", curie=NEON.curie('lotID'),
                      model_uri=NEON.lotID, domain=None, range=Optional[str])

slots.nitrateNitriteNAnalysisDate = Slot(uri=NEON.nitrateNitriteNAnalysisDate, name="nitrateNitriteNAnalysisDate", curie=NEON.curie('nitrateNitriteNAnalysisDate'),
                      model_uri=NEON.nitrateNitriteNAnalysisDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.nitrateNitriteNAnalyzedBy = Slot(uri=NEON.nitrateNitriteNAnalyzedBy, name="nitrateNitriteNAnalyzedBy", curie=NEON.curie('nitrateNitriteNAnalyzedBy'),
                      model_uri=NEON.nitrateNitriteNAnalyzedBy, domain=None, range=Optional[str])

slots.nitrateNitriteNInstrument = Slot(uri=NEON.nitrateNitriteNInstrument, name="nitrateNitriteNInstrument", curie=NEON.curie('nitrateNitriteNInstrument'),
                      model_uri=NEON.nitrateNitriteNInstrument, domain=None, range=Optional[str])

slots.nitrateNitriteNMethod = Slot(uri=NEON.nitrateNitriteNMethod, name="nitrateNitriteNMethod", curie=NEON.curie('nitrateNitriteNMethod'),
                      model_uri=NEON.nitrateNitriteNMethod, domain=None, range=Optional[str])

slots.nitrateNitriteNQF = Slot(uri=NEON.nitrateNitriteNQF, name="nitrateNitriteNQF", curie=NEON.curie('nitrateNitriteNQF'),
                      model_uri=NEON.nitrateNitriteNQF, domain=None, range=Optional[str])

slots.nitrateNitriteNRemarks = Slot(uri=NEON.nitrateNitriteNRemarks, name="nitrateNitriteNRemarks", curie=NEON.curie('nitrateNitriteNRemarks'),
                      model_uri=NEON.nitrateNitriteNRemarks, domain=None, range=Optional[str])

slots.nitrateNitriteNRepNum = Slot(uri=NEON.nitrateNitriteNRepNum, name="nitrateNitriteNRepNum", curie=NEON.curie('nitrateNitriteNRepNum'),
                      model_uri=NEON.nitrateNitriteNRepNum, domain=None, range=Optional[str])

slots.nitrateNitriteNReviewedBy = Slot(uri=NEON.nitrateNitriteNReviewedBy, name="nitrateNitriteNReviewedBy", curie=NEON.curie('nitrateNitriteNReviewedBy'),
                      model_uri=NEON.nitrateNitriteNReviewedBy, domain=None, range=Optional[str])

slots.receivedCondition = Slot(uri=NEON.receivedCondition, name="receivedCondition", curie=NEON.curie('receivedCondition'),
                      model_uri=NEON.receivedCondition, domain=None, range=Optional[str])

slots.soilFreshMass = Slot(uri=NEON.soilFreshMass, name="soilFreshMass", curie=NEON.curie('soilFreshMass'),
                      model_uri=NEON.soilFreshMass, domain=None, range=Optional[float])

slots.aquMicrobeType = Slot(uri=NEON.aquMicrobeType, name="aquMicrobeType", curie=NEON.curie('aquMicrobeType'),
                      model_uri=NEON.aquMicrobeType, domain=None, range=Optional[str])

slots.aquMicrobeScrubArea = Slot(uri=NEON.aquMicrobeScrubArea, name="aquMicrobeScrubArea", curie=NEON.curie('aquMicrobeScrubArea'),
                      model_uri=NEON.aquMicrobeScrubArea, domain=None, range=Optional[float])

slots.fieldFilterCondition = Slot(uri=NEON.fieldFilterCondition, name="fieldFilterCondition", curie=NEON.curie('fieldFilterCondition'),
                      model_uri=NEON.fieldFilterCondition, domain=None, range=Optional[str])

slots.fieldFilterConditionRemarks = Slot(uri=NEON.fieldFilterConditionRemarks, name="fieldFilterConditionRemarks", curie=NEON.curie('fieldFilterConditionRemarks'),
                      model_uri=NEON.fieldFilterConditionRemarks, domain=None, range=Optional[str])

slots.fieldFilterDamage = Slot(uri=NEON.fieldFilterDamage, name="fieldFilterDamage", curie=NEON.curie('fieldFilterDamage'),
                      model_uri=NEON.fieldFilterDamage, domain=None, range=Optional[str])

slots.fieldFilterDamageRemarks = Slot(uri=NEON.fieldFilterDamageRemarks, name="fieldFilterDamageRemarks", curie=NEON.curie('fieldFilterDamageRemarks'),
                      model_uri=NEON.fieldFilterDamageRemarks, domain=None, range=Optional[str])

slots.filterID = Slot(uri=NEON.filterID, name="filterID", curie=NEON.curie('filterID'),
                      model_uri=NEON.filterID, domain=None, range=Optional[str])

slots.filterLotID = Slot(uri=NEON.filterLotID, name="filterLotID", curie=NEON.curie('filterLotID'),
                      model_uri=NEON.filterLotID, domain=None, range=Optional[str])

slots.filterWeighDate = Slot(uri=NEON.filterWeighDate, name="filterWeighDate", curie=NEON.curie('filterWeighDate'),
                      model_uri=NEON.filterWeighDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.filterWeightDelta = Slot(uri=NEON.filterWeightDelta, name="filterWeightDelta", curie=NEON.curie('filterWeightDelta'),
                      model_uri=NEON.filterWeightDelta, domain=None, range=Optional[float])

slots.filterWeightPostDeploy = Slot(uri=NEON.filterWeightPostDeploy, name="filterWeightPostDeploy", curie=NEON.curie('filterWeightPostDeploy'),
                      model_uri=NEON.filterWeightPostDeploy, domain=None, range=Optional[float])

slots.filterWeightPreDeploy = Slot(uri=NEON.filterWeightPreDeploy, name="filterWeightPreDeploy", curie=NEON.curie('filterWeightPreDeploy'),
                      model_uri=NEON.filterWeightPreDeploy, domain=None, range=Optional[float])

slots.filterWet = Slot(uri=NEON.filterWet, name="filterWet", curie=NEON.curie('filterWet'),
                      model_uri=NEON.filterWet, domain=None, range=Optional[float])

slots.labAverageHumidity = Slot(uri=NEON.labAverageHumidity, name="labAverageHumidity", curie=NEON.curie('labAverageHumidity'),
                      model_uri=NEON.labAverageHumidity, domain=None, range=Optional[float])

slots.labFilterCondition = Slot(uri=NEON.labFilterCondition, name="labFilterCondition", curie=NEON.curie('labFilterCondition'),
                      model_uri=NEON.labFilterCondition, domain=None, range=Optional[str])

slots.labFilterConditionRemarks = Slot(uri=NEON.labFilterConditionRemarks, name="labFilterConditionRemarks", curie=NEON.curie('labFilterConditionRemarks'),
                      model_uri=NEON.labFilterConditionRemarks, domain=None, range=Optional[str])

slots.labFilterDamage = Slot(uri=NEON.labFilterDamage, name="labFilterDamage", curie=NEON.curie('labFilterDamage'),
                      model_uri=NEON.labFilterDamage, domain=None, range=Optional[str])

slots.labFilterDamageRemarks = Slot(uri=NEON.labFilterDamageRemarks, name="labFilterDamageRemarks", curie=NEON.curie('labFilterDamageRemarks'),
                      model_uri=NEON.labFilterDamageRemarks, domain=None, range=Optional[str])

slots.labQARemarks = Slot(uri=NEON.labQARemarks, name="labQARemarks", curie=NEON.curie('labQARemarks'),
                      model_uri=NEON.labQARemarks, domain=None, range=Optional[str])

slots.labRelativeHumidity = Slot(uri=NEON.labRelativeHumidity, name="labRelativeHumidity", curie=NEON.curie('labRelativeHumidity'),
                      model_uri=NEON.labRelativeHumidity, domain=None, range=Optional[float])

slots.labTemp = Slot(uri=NEON.labTemp, name="labTemp", curie=NEON.curie('labTemp'),
                      model_uri=NEON.labTemp, domain=None, range=Optional[float])

slots.equipCondition = Slot(uri=NEON.equipCondition, name="equipCondition", curie=NEON.curie('equipCondition'),
                      model_uri=NEON.equipCondition, domain=None, range=Optional[str])

slots.equipConditionDesc = Slot(uri=NEON.equipConditionDesc, name="equipConditionDesc", curie=NEON.curie('equipConditionDesc'),
                      model_uri=NEON.equipConditionDesc, domain=None, range=Optional[str])

slots.tempSoni = Slot(uri=NEON.tempSoni, name="tempSoni", curie=NEON.curie('tempSoni'),
                      model_uri=NEON.tempSoni, domain=None, range=Optional[str])

slots.qfSoniCode = Slot(uri=NEON.qfSoniCode, name="qfSoniCode", curie=NEON.curie('qfSoniCode'),
                      model_uri=NEON.qfSoniCode, domain=None, range=Optional[str])

slots.tempMean = Slot(uri=NEON.tempMean, name="tempMean", curie=NEON.curie('tempMean'),
                      model_uri=NEON.tempMean, domain=None, range=Optional[str])

slots.presSum = Slot(uri=NEON.presSum, name="presSum", curie=NEON.curie('presSum'),
                      model_uri=NEON.presSum, domain=None, range=Optional[str])

slots.qfSensStatus = Slot(uri=NEON.qfSensStatus, name="qfSensStatus", curie=NEON.curie('qfSensStatus'),
                      model_uri=NEON.qfSensStatus, domain=None, range=Optional[int])

slots.idGas = Slot(uri=NEON.idGas, name="idGas", curie=NEON.curie('idGas'),
                      model_uri=NEON.idGas, domain=None, range=Optional[int])

slots.qfStusN2 = Slot(uri=NEON.qfStusN2, name="qfStusN2", curie=NEON.curie('qfStusN2'),
                      model_uri=NEON.qfStusN2, domain=None, range=Optional[int])

slots.qfLowRtioMoleWetH2O = Slot(uri=NEON.qfLowRtioMoleWetH2O, name="qfLowRtioMoleWetH2O", curie=NEON.curie('qfLowRtioMoleWetH2O'),
                      model_uri=NEON.qfLowRtioMoleWetH2O, domain=None, range=Optional[int])

slots.qfTemp = Slot(uri=NEON.qfTemp, name="qfTemp", curie=NEON.curie('qfTemp'),
                      model_uri=NEON.qfTemp, domain=None, range=Optional[str])

slots.qfRh = Slot(uri=NEON.qfRh, name="qfRh", curie=NEON.curie('qfRh'),
                      model_uri=NEON.qfRh, domain=None, range=Optional[int])

slots.qfFrt0 = Slot(uri=NEON.qfFrt0, name="qfFrt0", curie=NEON.curie('qfFrt0'),
                      model_uri=NEON.qfFrt0, domain=None, range=Optional[int])

slots.typeGas = Slot(uri=NEON.typeGas, name="typeGas", curie=NEON.curie('typeGas'),
                      model_uri=NEON.typeGas, domain=None, range=Optional[str])

slots.typeGasCrdH2O = Slot(uri=NEON.typeGasCrdH2O, name="typeGasCrdH2O", curie=NEON.curie('typeGasCrdH2O'),
                      model_uri=NEON.typeGasCrdH2O, domain=None, range=Optional[int])

slots.lvlIrga = Slot(uri=NEON.lvlIrga, name="lvlIrga", curie=NEON.curie('lvlIrga'),
                      model_uri=NEON.lvlIrga, domain=None, range=Optional[int])

slots.lvlCrdCO2 = Slot(uri=NEON.lvlCrdCO2, name="lvlCrdCO2", curie=NEON.curie('lvlCrdCO2'),
                      model_uri=NEON.lvlCrdCO2, domain=None, range=Optional[int])

slots.lvlCrdH2O = Slot(uri=NEON.lvlCrdH2O, name="lvlCrdH2O", curie=NEON.curie('lvlCrdH2O'),
                      model_uri=NEON.lvlCrdH2O, domain=None, range=Optional[int])

slots.measTypeCrdH2O = Slot(uri=NEON.measTypeCrdH2O, name="measTypeCrdH2O", curie=NEON.curie('measTypeCrdH2O'),
                      model_uri=NEON.measTypeCrdH2O, domain=None, range=Optional[int])

slots.measTypeCrdCO2 = Slot(uri=NEON.measTypeCrdCO2, name="measTypeCrdCO2", curie=NEON.curie('measTypeCrdCO2'),
                      model_uri=NEON.measTypeCrdCO2, domain=None, range=Optional[int])

slots.qfValvIrga = Slot(uri=NEON.qfValvIrga, name="qfValvIrga", curie=NEON.curie('qfValvIrga'),
                      model_uri=NEON.qfValvIrga, domain=None, range=Optional[int])

slots.measTypeIrga = Slot(uri=NEON.measTypeIrga, name="measTypeIrga", curie=NEON.curie('measTypeIrga'),
                      model_uri=NEON.measTypeIrga, domain=None, range=Optional[int])

slots.collectionDateAccuracy = Slot(uri=NEON.collectionDateAccuracy, name="collectionDateAccuracy", curie=NEON.curie('collectionDateAccuracy'),
                      model_uri=NEON.collectionDateAccuracy, domain=None, range=Optional[str])

slots.collectionEventID = Slot(uri=NEON.collectionEventID, name="collectionEventID", curie=NEON.curie('collectionEventID'),
                      model_uri=NEON.collectionEventID, domain=None, range=Optional[str])

slots.collectionNotes = Slot(uri=NEON.collectionNotes, name="collectionNotes", curie=NEON.curie('collectionNotes'),
                      model_uri=NEON.collectionNotes, domain=None, range=Optional[str])

slots.collectors = Slot(uri=NEON.collectors, name="collectors", curie=NEON.curie('collectors'),
                      model_uri=NEON.collectors, domain=None, range=Optional[str])

slots.coordinateAccuracy = Slot(uri=NEON.coordinateAccuracy, name="coordinateAccuracy", curie=NEON.curie('coordinateAccuracy'),
                      model_uri=NEON.coordinateAccuracy, domain=None, range=Optional[float])

slots.countryOcean = Slot(uri=NEON.countryOcean, name="countryOcean", curie=NEON.curie('countryOcean'),
                      model_uri=NEON.countryOcean, domain=None, range=Optional[str])

slots.depth = Slot(uri=NEON.depth, name="depth", curie=NEON.curie('depth'),
                      model_uri=NEON.depth, domain=None, range=Optional[float])

slots.depthPrecision = Slot(uri=NEON.depthPrecision, name="depthPrecision", curie=NEON.curie('depthPrecision'),
                      model_uri=NEON.depthPrecision, domain=None, range=Optional[float])

slots.elevationPrecision = Slot(uri=NEON.elevationPrecision, name="elevationPrecision", curie=NEON.curie('elevationPrecision'),
                      model_uri=NEON.elevationPrecision, domain=None, range=Optional[float])

slots.eventTime = Slot(uri=NEON.eventTime, name="eventTime", curie=NEON.curie('eventTime'),
                      model_uri=NEON.eventTime, domain=None, range=Optional[str])

slots.exactSite = Slot(uri=NEON.exactSite, name="exactSite", curie=NEON.curie('exactSite'),
                      model_uri=NEON.exactSite, domain=None, range=Optional[str])

slots.extraInfo = Slot(uri=NEON.extraInfo, name="extraInfo", curie=NEON.curie('extraInfo'),
                      model_uri=NEON.extraInfo, domain=None, range=Optional[str])

slots.gpsSource = Slot(uri=NEON.gpsSource, name="gpsSource", curie=NEON.curie('gpsSource'),
                      model_uri=NEON.gpsSource, domain=None, range=Optional[str])

slots.habitat = Slot(uri=NEON.habitat, name="habitat", curie=NEON.curie('habitat'),
                      model_uri=NEON.habitat, domain=None, range=Optional[str])

slots.identificationMethod = Slot(uri=NEON.identificationMethod, name="identificationMethod", curie=NEON.curie('identificationMethod'),
                      model_uri=NEON.identificationMethod, domain=None, range=Optional[str])

slots.institutionStoring = Slot(uri=NEON.institutionStoring, name="institutionStoring", curie=NEON.curie('institutionStoring'),
                      model_uri=NEON.institutionStoring, domain=None, range=Optional[str])

slots.latitude = Slot(uri=NEON.latitude, name="latitude", curie=NEON.curie('latitude'),
                      model_uri=NEON.latitude, domain=None, range=Optional[float])

slots.longitude = Slot(uri=NEON.longitude, name="longitude", curie=NEON.curie('longitude'),
                      model_uri=NEON.longitude, domain=None, range=Optional[float])

slots.museumID = Slot(uri=NEON.museumID, name="museumID", curie=NEON.curie('museumID'),
                      model_uri=NEON.museumID, domain=None, range=Optional[str])

slots.notes = Slot(uri=NEON.notes, name="notes", curie=NEON.curie('notes'),
                      model_uri=NEON.notes, domain=None, range=Optional[str])

slots.region = Slot(uri=NEON.region, name="region", curie=NEON.curie('region'),
                      model_uri=NEON.region, domain=None, range=Optional[str])

slots.sector = Slot(uri=NEON.sector, name="sector", curie=NEON.curie('sector'),
                      model_uri=NEON.sector, domain=None, range=Optional[str])

slots.siteCode = Slot(uri=NEON.siteCode, name="siteCode", curie=NEON.curie('siteCode'),
                      model_uri=NEON.siteCode, domain=None, range=Optional[str])

slots.species = Slot(uri=NEON.species, name="species", curie=NEON.curie('species'),
                      model_uri=NEON.species, domain=None, range=Optional[str])

slots.stateProvince = Slot(uri=NEON.stateProvince, name="stateProvince", curie=NEON.curie('stateProvince'),
                      model_uri=NEON.stateProvince, domain=None, range=Optional[str])

slots.taxonomyNotes = Slot(uri=NEON.taxonomyNotes, name="taxonomyNotes", curie=NEON.curie('taxonomyNotes'),
                      model_uri=NEON.taxonomyNotes, domain=None, range=Optional[str])

slots.tissueDescriptor = Slot(uri=NEON.tissueDescriptor, name="tissueDescriptor", curie=NEON.curie('tissueDescriptor'),
                      model_uri=NEON.tissueDescriptor, domain=None, range=Optional[str])

slots.voucherStatus = Slot(uri=NEON.voucherStatus, name="voucherStatus", curie=NEON.curie('voucherStatus'),
                      model_uri=NEON.voucherStatus, domain=None, range=Optional[str])

slots.qfSoniSignalLow = Slot(uri=NEON.qfSoniSignalLow, name="qfSoniSignalLow", curie=NEON.curie('qfSoniSignalLow'),
                      model_uri=NEON.qfSoniSignalLow, domain=None, range=Optional[int])

slots.maxAllowableDrawdown = Slot(uri=NEON.maxAllowableDrawdown, name="maxAllowableDrawdown", curie=NEON.curie('maxAllowableDrawdown'),
                      model_uri=NEON.maxAllowableDrawdown, domain=None, range=Optional[float])

slots.measTotalWellDepth = Slot(uri=NEON.measTotalWellDepth, name="measTotalWellDepth", curie=NEON.curie('measTotalWellDepth'),
                      model_uri=NEON.measTotalWellDepth, domain=None, range=Optional[float])

slots.pumpPlacementDepth = Slot(uri=NEON.pumpPlacementDepth, name="pumpPlacementDepth", curie=NEON.curie('pumpPlacementDepth'),
                      model_uri=NEON.pumpPlacementDepth, domain=None, range=Optional[float])

slots.screenedIntervalDepth = Slot(uri=NEON.screenedIntervalDepth, name="screenedIntervalDepth", curie=NEON.curie('screenedIntervalDepth'),
                      model_uri=NEON.screenedIntervalDepth, domain=None, range=Optional[float])

slots.wellDepthChanged = Slot(uri=NEON.wellDepthChanged, name="wellDepthChanged", curie=NEON.curie('wellDepthChanged'),
                      model_uri=NEON.wellDepthChanged, domain=None, range=Optional[str])

slots.bankUndercut = Slot(uri=NEON.bankUndercut, name="bankUndercut", curie=NEON.curie('bankUndercut'),
                      model_uri=NEON.bankUndercut, domain=None, range=Optional[str])

slots.actualOrEstimated = Slot(uri=NEON.actualOrEstimated, name="actualOrEstimated", curie=NEON.curie('actualOrEstimated'),
                      model_uri=NEON.actualOrEstimated, domain=None, range=Optional[str])

slots.bulkFishCount = Slot(uri=NEON.bulkFishCount, name="bulkFishCount", curie=NEON.curie('bulkFishCount'),
                      model_uri=NEON.bulkFishCount, domain=None, range=Optional[str])

slots.bulkMortality = Slot(uri=NEON.bulkMortality, name="bulkMortality", curie=NEON.curie('bulkMortality'),
                      model_uri=NEON.bulkMortality, domain=None, range=Optional[str])

slots.cCollectedBy = Slot(uri=NEON.cCollectedBy, name="cCollectedBy", curie=NEON.curie('cCollectedBy'),
                      model_uri=NEON.cCollectedBy, domain=None, range=Optional[str])

slots.delt = Slot(uri=NEON.delt, name="delt", curie=NEON.curie('delt'),
                      model_uri=NEON.delt, domain=None, range=Optional[str])

slots.efTime = Slot(uri=NEON.efTime, name="efTime", curie=NEON.curie('efTime'),
                      model_uri=NEON.efTime, domain=None, range=Optional[float])

slots.efTime2 = Slot(uri=NEON.efTime2, name="efTime2", curie=NEON.curie('efTime2'),
                      model_uri=NEON.efTime2, domain=None, range=Optional[float])

slots.finalDutyCycle = Slot(uri=NEON.finalDutyCycle, name="finalDutyCycle", curie=NEON.curie('finalDutyCycle'),
                      model_uri=NEON.finalDutyCycle, domain=None, range=Optional[float])

slots.finalDutyCycle2 = Slot(uri=NEON.finalDutyCycle2, name="finalDutyCycle2", curie=NEON.curie('finalDutyCycle2'),
                      model_uri=NEON.finalDutyCycle2, domain=None, range=Optional[float])

slots.finalFrequency = Slot(uri=NEON.finalFrequency, name="finalFrequency", curie=NEON.curie('finalFrequency'),
                      model_uri=NEON.finalFrequency, domain=None, range=Optional[float])

slots.finalFrequency2 = Slot(uri=NEON.finalFrequency2, name="finalFrequency2", curie=NEON.curie('finalFrequency2'),
                      model_uri=NEON.finalFrequency2, domain=None, range=Optional[float])

slots.finalVoltage = Slot(uri=NEON.finalVoltage, name="finalVoltage", curie=NEON.curie('finalVoltage'),
                      model_uri=NEON.finalVoltage, domain=None, range=Optional[float])

slots.finalVoltage2 = Slot(uri=NEON.finalVoltage2, name="finalVoltage2", curie=NEON.curie('finalVoltage2'),
                      model_uri=NEON.finalVoltage2, domain=None, range=Optional[float])

slots.fishLifeStage = Slot(uri=NEON.fishLifeStage, name="fishLifeStage", curie=NEON.curie('fishLifeStage'),
                      model_uri=NEON.fishLifeStage, domain=None, range=Optional[str])

slots.fishTotalLength = Slot(uri=NEON.fishTotalLength, name="fishTotalLength", curie=NEON.curie('fishTotalLength'),
                      model_uri=NEON.fishTotalLength, domain=None, range=Optional[float])

slots.fishWeight = Slot(uri=NEON.fishWeight, name="fishWeight", curie=NEON.curie('fishWeight'),
                      model_uri=NEON.fishWeight, domain=None, range=Optional[float])

slots.fixedRandomReach = Slot(uri=NEON.fixedRandomReach, name="fixedRandomReach", curie=NEON.curie('fixedRandomReach'),
                      model_uri=NEON.fixedRandomReach, domain=None, range=Optional[str])

slots.initialDutyCycle = Slot(uri=NEON.initialDutyCycle, name="initialDutyCycle", curie=NEON.curie('initialDutyCycle'),
                      model_uri=NEON.initialDutyCycle, domain=None, range=Optional[float])

slots.initialDutyCycle2 = Slot(uri=NEON.initialDutyCycle2, name="initialDutyCycle2", curie=NEON.curie('initialDutyCycle2'),
                      model_uri=NEON.initialDutyCycle2, domain=None, range=Optional[float])

slots.initialFrequency = Slot(uri=NEON.initialFrequency, name="initialFrequency", curie=NEON.curie('initialFrequency'),
                      model_uri=NEON.initialFrequency, domain=None, range=Optional[float])

slots.initialFrequency2 = Slot(uri=NEON.initialFrequency2, name="initialFrequency2", curie=NEON.curie('initialFrequency2'),
                      model_uri=NEON.initialFrequency2, domain=None, range=Optional[float])

slots.initialVoltage = Slot(uri=NEON.initialVoltage, name="initialVoltage", curie=NEON.curie('initialVoltage'),
                      model_uri=NEON.initialVoltage, domain=None, range=Optional[float])

slots.initialVoltage2 = Slot(uri=NEON.initialVoltage2, name="initialVoltage2", curie=NEON.curie('initialVoltage2'),
                      model_uri=NEON.initialVoltage2, domain=None, range=Optional[float])

slots.efInjury = Slot(uri=NEON.efInjury, name="efInjury", curie=NEON.curie('efInjury'),
                      model_uri=NEON.efInjury, domain=None, range=Optional[str])

slots.measuredReachLength = Slot(uri=NEON.measuredReachLength, name="measuredReachLength", curie=NEON.curie('measuredReachLength'),
                      model_uri=NEON.measuredReachLength, domain=None, range=Optional[float])

slots.efMortality = Slot(uri=NEON.efMortality, name="efMortality", curie=NEON.curie('efMortality'),
                      model_uri=NEON.efMortality, domain=None, range=Optional[str])

slots.netDeploymentTime = Slot(uri=NEON.netDeploymentTime, name="netDeploymentTime", curie=NEON.curie('netDeploymentTime'),
                      model_uri=NEON.netDeploymentTime, domain=None, range=Optional[float])

slots.netDepth = Slot(uri=NEON.netDepth, name="netDepth", curie=NEON.curie('netDepth'),
                      model_uri=NEON.netDepth, domain=None, range=Optional[float])

slots.netEndTime = Slot(uri=NEON.netEndTime, name="netEndTime", curie=NEON.curie('netEndTime'),
                      model_uri=NEON.netEndTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.netIntegrity = Slot(uri=NEON.netIntegrity, name="netIntegrity", curie=NEON.curie('netIntegrity'),
                      model_uri=NEON.netIntegrity, domain=None, range=Optional[str])

slots.netLength = Slot(uri=NEON.netLength, name="netLength", curie=NEON.curie('netLength'),
                      model_uri=NEON.netLength, domain=None, range=Optional[float])

slots.netSetTime = Slot(uri=NEON.netSetTime, name="netSetTime", curie=NEON.curie('netSetTime'),
                      model_uri=NEON.netSetTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.nonTargetSpecies = Slot(uri=NEON.nonTargetSpecies, name="nonTargetSpecies", curie=NEON.curie('nonTargetSpecies'),
                      model_uri=NEON.nonTargetSpecies, domain=None, range=Optional[str])

slots.passEndTime = Slot(uri=NEON.passEndTime, name="passEndTime", curie=NEON.curie('passEndTime'),
                      model_uri=NEON.passEndTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.passNumber = Slot(uri=NEON.passNumber, name="passNumber", curie=NEON.curie('passNumber'),
                      model_uri=NEON.passNumber, domain=None, range=Optional[str])

slots.passStartTime = Slot(uri=NEON.passStartTime, name="passStartTime", curie=NEON.curie('passStartTime'),
                      model_uri=NEON.passStartTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.plateID = Slot(uri=NEON.plateID, name="plateID", curie=NEON.curie('plateID'),
                      model_uri=NEON.plateID, domain=None, range=Optional[str])

slots.reachCondition = Slot(uri=NEON.reachCondition, name="reachCondition", curie=NEON.curie('reachCondition'),
                      model_uri=NEON.reachCondition, domain=None, range=Optional[str])

slots.reachID = Slot(uri=NEON.reachID, name="reachID", curie=NEON.curie('reachID'),
                      model_uri=NEON.reachID, domain=None, range=Optional[str])

slots.sampleTypeCollected = Slot(uri=NEON.sampleTypeCollected, name="sampleTypeCollected", curie=NEON.curie('sampleTypeCollected'),
                      model_uri=NEON.sampleTypeCollected, domain=None, range=Optional[str])

slots.settingsChanged = Slot(uri=NEON.settingsChanged, name="settingsChanged", curie=NEON.curie('settingsChanged'),
                      model_uri=NEON.settingsChanged, domain=None, range=Optional[str])

slots.settingsChanged2 = Slot(uri=NEON.settingsChanged2, name="settingsChanged2", curie=NEON.curie('settingsChanged2'),
                      model_uri=NEON.settingsChanged2, domain=None, range=Optional[str])

slots.specimenNumber = Slot(uri=NEON.specimenNumber, name="specimenNumber", curie=NEON.curie('specimenNumber'),
                      model_uri=NEON.specimenNumber, domain=None, range=Optional[str])

slots.subdominantHabitatType = Slot(uri=NEON.subdominantHabitatType, name="subdominantHabitatType", curie=NEON.curie('subdominantHabitatType'),
                      model_uri=NEON.subdominantHabitatType, domain=None, range=Optional[str])

slots.totalFishCount = Slot(uri=NEON.totalFishCount, name="totalFishCount", curie=NEON.curie('totalFishCount'),
                      model_uri=NEON.totalFishCount, domain=None, range=Optional[str])

slots.voucherSampleCollected = Slot(uri=NEON.voucherSampleCollected, name="voucherSampleCollected", curie=NEON.curie('voucherSampleCollected'),
                      model_uri=NEON.voucherSampleCollected, domain=None, range=Optional[str])

slots.analyteConcText = Slot(uri=NEON.analyteConcText, name="analyteConcText", curie=NEON.curie('analyteConcText'),
                      model_uri=NEON.analyteConcText, domain=None, range=Optional[str])

slots.analyteObservedValue = Slot(uri=NEON.analyteObservedValue, name="analyteObservedValue", curie=NEON.curie('analyteObservedValue'),
                      model_uri=NEON.analyteObservedValue, domain=None, range=Optional[float])

slots.analytePercentSD = Slot(uri=NEON.analytePercentSD, name="analytePercentSD", curie=NEON.curie('analytePercentSD'),
                      model_uri=NEON.analytePercentSD, domain=None, range=Optional[float])

slots.analyteSampleValue = Slot(uri=NEON.analyteSampleValue, name="analyteSampleValue", curie=NEON.curie('analyteSampleValue'),
                      model_uri=NEON.analyteSampleValue, domain=None, range=Optional[float])

slots.analyteSurrogate = Slot(uri=NEON.analyteSurrogate, name="analyteSurrogate", curie=NEON.curie('analyteSurrogate'),
                      model_uri=NEON.analyteSurrogate, domain=None, range=Optional[str])

slots.carbonSedimentSampleFate = Slot(uri=NEON.carbonSedimentSampleFate, name="carbonSedimentSampleFate", curie=NEON.curie('carbonSedimentSampleFate'),
                      model_uri=NEON.carbonSedimentSampleFate, domain=None, range=Optional[str])

slots.carbonSedimentSampleID = Slot(uri=NEON.carbonSedimentSampleID, name="carbonSedimentSampleID", curie=NEON.curie('carbonSedimentSampleID'),
                      model_uri=NEON.carbonSedimentSampleID, domain=None, range=Optional[str])

slots.carbonSedSampleCode = Slot(uri=NEON.carbonSedSampleCode, name="carbonSedSampleCode", curie=NEON.curie('carbonSedSampleCode'),
                      model_uri=NEON.carbonSedSampleCode, domain=None, range=Optional[str])

slots.cas = Slot(uri=NEON.cas, name="cas", curie=NEON.curie('cas'),
                      model_uri=NEON.cas, domain=None, range=Optional[str])

slots.coreLength = Slot(uri=NEON.coreLength, name="coreLength", curie=NEON.curie('coreLength'),
                      model_uri=NEON.coreLength, domain=None, range=Optional[float])

slots.deptName = Slot(uri=NEON.deptName, name="deptName", curie=NEON.curie('deptName'),
                      model_uri=NEON.deptName, domain=None, range=Optional[str])

slots.downstreamCoordUncert = Slot(uri=NEON.downstreamCoordUncert, name="downstreamCoordUncert", curie=NEON.curie('downstreamCoordUncert'),
                      model_uri=NEON.downstreamCoordUncert, domain=None, range=Optional[float])

slots.downstreamDecimalLatitude = Slot(uri=NEON.downstreamDecimalLatitude, name="downstreamDecimalLatitude", curie=NEON.curie('downstreamDecimalLatitude'),
                      model_uri=NEON.downstreamDecimalLatitude, domain=None, range=Optional[float])

slots.downstreamDecimalLongitude = Slot(uri=NEON.downstreamDecimalLongitude, name="downstreamDecimalLongitude", curie=NEON.curie('downstreamDecimalLongitude'),
                      model_uri=NEON.downstreamDecimalLongitude, domain=None, range=Optional[float])

slots.downstreamGeodeticDatum = Slot(uri=NEON.downstreamGeodeticDatum, name="downstreamGeodeticDatum", curie=NEON.curie('downstreamGeodeticDatum'),
                      model_uri=NEON.downstreamGeodeticDatum, domain=None, range=Optional[str])

slots.extendedQualifier1 = Slot(uri=NEON.extendedQualifier1, name="extendedQualifier1", curie=NEON.curie('extendedQualifier1'),
                      model_uri=NEON.extendedQualifier1, domain=None, range=Optional[str])

slots.extendedQualifier2 = Slot(uri=NEON.extendedQualifier2, name="extendedQualifier2", curie=NEON.curie('extendedQualifier2'),
                      model_uri=NEON.extendedQualifier2, domain=None, range=Optional[str])

slots.extendedQualifier3 = Slot(uri=NEON.extendedQualifier3, name="extendedQualifier3", curie=NEON.curie('extendedQualifier3'),
                      model_uri=NEON.extendedQualifier3, domain=None, range=Optional[str])

slots.extendedQualifier4 = Slot(uri=NEON.extendedQualifier4, name="extendedQualifier4", curie=NEON.curie('extendedQualifier4'),
                      model_uri=NEON.extendedQualifier4, domain=None, range=Optional[str])

slots.extendedQualifier5 = Slot(uri=NEON.extendedQualifier5, name="extendedQualifier5", curie=NEON.curie('extendedQualifier5'),
                      model_uri=NEON.extendedQualifier5, domain=None, range=Optional[str])

slots.externalQualifier = Slot(uri=NEON.externalQualifier, name="externalQualifier", curie=NEON.curie('externalQualifier'),
                      model_uri=NEON.externalQualifier, domain=None, range=Optional[str])

slots.inorganicSedimentSampleFate = Slot(uri=NEON.inorganicSedimentSampleFate, name="inorganicSedimentSampleFate", curie=NEON.curie('inorganicSedimentSampleFate'),
                      model_uri=NEON.inorganicSedimentSampleFate, domain=None, range=Optional[str])

slots.inorganicSedimentSampleID = Slot(uri=NEON.inorganicSedimentSampleID, name="inorganicSedimentSampleID", curie=NEON.curie('inorganicSedimentSampleID'),
                      model_uri=NEON.inorganicSedimentSampleID, domain=None, range=Optional[str])

slots.inorgSedimentSampleBarcode = Slot(uri=NEON.inorgSedimentSampleBarcode, name="inorgSedimentSampleBarcode", curie=NEON.curie('inorgSedimentSampleBarcode'),
                      model_uri=NEON.inorgSedimentSampleBarcode, domain=None, range=Optional[str])

slots.observations = Slot(uri=NEON.observations, name="observations", curie=NEON.curie('observations'),
                      model_uri=NEON.observations, domain=None, range=Optional[str])

slots.organicSedimentSampleFate = Slot(uri=NEON.organicSedimentSampleFate, name="organicSedimentSampleFate", curie=NEON.curie('organicSedimentSampleFate'),
                      model_uri=NEON.organicSedimentSampleFate, domain=None, range=Optional[str])

slots.organicSedimentSampleID = Slot(uri=NEON.organicSedimentSampleID, name="organicSedimentSampleID", curie=NEON.curie('organicSedimentSampleID'),
                      model_uri=NEON.organicSedimentSampleID, domain=None, range=Optional[str])

slots.orgSedimentSampleBarcode = Slot(uri=NEON.orgSedimentSampleBarcode, name="orgSedimentSampleBarcode", curie=NEON.curie('orgSedimentSampleBarcode'),
                      model_uri=NEON.orgSedimentSampleBarcode, domain=None, range=Optional[str])

slots.physicalSedimentSampleFate = Slot(uri=NEON.physicalSedimentSampleFate, name="physicalSedimentSampleFate", curie=NEON.curie('physicalSedimentSampleFate'),
                      model_uri=NEON.physicalSedimentSampleFate, domain=None, range=Optional[str])

slots.physicalSedimentSampleID = Slot(uri=NEON.physicalSedimentSampleID, name="physicalSedimentSampleID", curie=NEON.curie('physicalSedimentSampleID'),
                      model_uri=NEON.physicalSedimentSampleID, domain=None, range=Optional[str])

slots.physSedimentSampleBarcode = Slot(uri=NEON.physSedimentSampleBarcode, name="physSedimentSampleBarcode", curie=NEON.curie('physSedimentSampleBarcode'),
                      model_uri=NEON.physSedimentSampleBarcode, domain=None, range=Optional[str])

slots.pointSampleCount = Slot(uri=NEON.pointSampleCount, name="pointSampleCount", curie=NEON.curie('pointSampleCount'),
                      model_uri=NEON.pointSampleCount, domain=None, range=Optional[str])

slots.practicalQuantitationLimit = Slot(uri=NEON.practicalQuantitationLimit, name="practicalQuantitationLimit", curie=NEON.curie('practicalQuantitationLimit'),
                      model_uri=NEON.practicalQuantitationLimit, domain=None, range=Optional[float])

slots.projectID = Slot(uri=NEON.projectID, name="projectID", curie=NEON.curie('projectID'),
                      model_uri=NEON.projectID, domain=None, range=Optional[str])

slots.qaQF = Slot(uri=NEON.qaQF, name="qaQF", curie=NEON.curie('qaQF'),
                      model_uri=NEON.qaQF, domain=None, range=Optional[str])

slots.quantitationLimit = Slot(uri=NEON.quantitationLimit, name="quantitationLimit", curie=NEON.curie('quantitationLimit'),
                      model_uri=NEON.quantitationLimit, domain=None, range=Optional[float])

slots.reagentSN = Slot(uri=NEON.reagentSN, name="reagentSN", curie=NEON.curie('reagentSN'),
                      model_uri=NEON.reagentSN, domain=None, range=Optional[str])

slots.recovery = Slot(uri=NEON.recovery, name="recovery", curie=NEON.curie('recovery'),
                      model_uri=NEON.recovery, domain=None, range=Optional[float])

slots.recoveryLimitLower = Slot(uri=NEON.recoveryLimitLower, name="recoveryLimitLower", curie=NEON.curie('recoveryLimitLower'),
                      model_uri=NEON.recoveryLimitLower, domain=None, range=Optional[float])

slots.recoveryLimitUpper = Slot(uri=NEON.recoveryLimitUpper, name="recoveryLimitUpper", curie=NEON.curie('recoveryLimitUpper'),
                      model_uri=NEON.recoveryLimitUpper, domain=None, range=Optional[float])

slots.relativePercentDifference = Slot(uri=NEON.relativePercentDifference, name="relativePercentDifference", curie=NEON.curie('relativePercentDifference'),
                      model_uri=NEON.relativePercentDifference, domain=None, range=Optional[float])

slots.relativePercentLimit = Slot(uri=NEON.relativePercentLimit, name="relativePercentLimit", curie=NEON.curie('relativePercentLimit'),
                      model_uri=NEON.relativePercentLimit, domain=None, range=Optional[float])

slots.sedimentSampleBarcode = Slot(uri=NEON.sedimentSampleBarcode, name="sedimentSampleBarcode", curie=NEON.curie('sedimentSampleBarcode'),
                      model_uri=NEON.sedimentSampleBarcode, domain=None, range=Optional[str])

slots.sedimentSampleFate = Slot(uri=NEON.sedimentSampleFate, name="sedimentSampleFate", curie=NEON.curie('sedimentSampleFate'),
                      model_uri=NEON.sedimentSampleFate, domain=None, range=Optional[str])

slots.sedimentSampleID = Slot(uri=NEON.sedimentSampleID, name="sedimentSampleID", curie=NEON.curie('sedimentSampleID'),
                      model_uri=NEON.sedimentSampleID, domain=None, range=Optional[str])

slots.upstreamCoordUncert = Slot(uri=NEON.upstreamCoordUncert, name="upstreamCoordUncert", curie=NEON.curie('upstreamCoordUncert'),
                      model_uri=NEON.upstreamCoordUncert, domain=None, range=Optional[float])

slots.upstreamDecimalLatitude = Slot(uri=NEON.upstreamDecimalLatitude, name="upstreamDecimalLatitude", curie=NEON.curie('upstreamDecimalLatitude'),
                      model_uri=NEON.upstreamDecimalLatitude, domain=None, range=Optional[float])

slots.upstreamDecimalLongitude = Slot(uri=NEON.upstreamDecimalLongitude, name="upstreamDecimalLongitude", curie=NEON.curie('upstreamDecimalLongitude'),
                      model_uri=NEON.upstreamDecimalLongitude, domain=None, range=Optional[float])

slots.upstreamGeodeticDatum = Slot(uri=NEON.upstreamGeodeticDatum, name="upstreamGeodeticDatum", curie=NEON.curie('upstreamGeodeticDatum'),
                      model_uri=NEON.upstreamGeodeticDatum, domain=None, range=Optional[str])

slots.zoneNumber = Slot(uri=NEON.zoneNumber, name="zoneNumber", curie=NEON.curie('zoneNumber'),
                      model_uri=NEON.zoneNumber, domain=None, range=Optional[str])

slots.zoneSampleCount = Slot(uri=NEON.zoneSampleCount, name="zoneSampleCount", curie=NEON.curie('zoneSampleCount'),
                      model_uri=NEON.zoneSampleCount, domain=None, range=Optional[str])

slots.copyNumberStandardDeviation = Slot(uri=NEON.copyNumberStandardDeviation, name="copyNumberStandardDeviation", curie=NEON.curie('copyNumberStandardDeviation'),
                      model_uri=NEON.copyNumberStandardDeviation, domain=None, range=Optional[float])

slots.meanCopyNumber = Slot(uri=NEON.meanCopyNumber, name="meanCopyNumber", curie=NEON.curie('meanCopyNumber'),
                      model_uri=NEON.meanCopyNumber, domain=None, range=Optional[float])

slots.meanCqValue = Slot(uri=NEON.meanCqValue, name="meanCqValue", curie=NEON.curie('meanCqValue'),
                      model_uri=NEON.meanCqValue, domain=None, range=Optional[float])

slots.rep1CopyNumber = Slot(uri=NEON.rep1CopyNumber, name="rep1CopyNumber", curie=NEON.curie('rep1CopyNumber'),
                      model_uri=NEON.rep1CopyNumber, domain=None, range=Optional[float])

slots.rep1CqValue = Slot(uri=NEON.rep1CqValue, name="rep1CqValue", curie=NEON.curie('rep1CqValue'),
                      model_uri=NEON.rep1CqValue, domain=None, range=Optional[float])

slots.rep1MeltingTemperature = Slot(uri=NEON.rep1MeltingTemperature, name="rep1MeltingTemperature", curie=NEON.curie('rep1MeltingTemperature'),
                      model_uri=NEON.rep1MeltingTemperature, domain=None, range=Optional[float])

slots.rep2CopyNumber = Slot(uri=NEON.rep2CopyNumber, name="rep2CopyNumber", curie=NEON.curie('rep2CopyNumber'),
                      model_uri=NEON.rep2CopyNumber, domain=None, range=Optional[float])

slots.rep2CqValue = Slot(uri=NEON.rep2CqValue, name="rep2CqValue", curie=NEON.curie('rep2CqValue'),
                      model_uri=NEON.rep2CqValue, domain=None, range=Optional[float])

slots.rep2MeltingTemperature = Slot(uri=NEON.rep2MeltingTemperature, name="rep2MeltingTemperature", curie=NEON.curie('rep2MeltingTemperature'),
                      model_uri=NEON.rep2MeltingTemperature, domain=None, range=Optional[float])

slots.rep3CopyNumber = Slot(uri=NEON.rep3CopyNumber, name="rep3CopyNumber", curie=NEON.curie('rep3CopyNumber'),
                      model_uri=NEON.rep3CopyNumber, domain=None, range=Optional[float])

slots.rep3CqValue = Slot(uri=NEON.rep3CqValue, name="rep3CqValue", curie=NEON.curie('rep3CqValue'),
                      model_uri=NEON.rep3CqValue, domain=None, range=Optional[float])

slots.rep3MeltingTemperature = Slot(uri=NEON.rep3MeltingTemperature, name="rep3MeltingTemperature", curie=NEON.curie('rep3MeltingTemperature'),
                      model_uri=NEON.rep3MeltingTemperature, domain=None, range=Optional[float])

slots.rep4CopyNumber = Slot(uri=NEON.rep4CopyNumber, name="rep4CopyNumber", curie=NEON.curie('rep4CopyNumber'),
                      model_uri=NEON.rep4CopyNumber, domain=None, range=Optional[float])

slots.rep4CqValue = Slot(uri=NEON.rep4CqValue, name="rep4CqValue", curie=NEON.curie('rep4CqValue'),
                      model_uri=NEON.rep4CqValue, domain=None, range=Optional[float])

slots.rep5CopyNumber = Slot(uri=NEON.rep5CopyNumber, name="rep5CopyNumber", curie=NEON.curie('rep5CopyNumber'),
                      model_uri=NEON.rep5CopyNumber, domain=None, range=Optional[float])

slots.rep5CqValue = Slot(uri=NEON.rep5CqValue, name="rep5CqValue", curie=NEON.curie('rep5CqValue'),
                      model_uri=NEON.rep5CqValue, domain=None, range=Optional[float])

slots.targetTaxonCode = Slot(uri=NEON.targetTaxonCode, name="targetTaxonCode", curie=NEON.curie('targetTaxonCode'),
                      model_uri=NEON.targetTaxonCode, domain=None, range=Optional[str])

slots.targetTaxonFate = Slot(uri=NEON.targetTaxonFate, name="targetTaxonFate", curie=NEON.curie('targetTaxonFate'),
                      model_uri=NEON.targetTaxonFate, domain=None, range=Optional[str])

slots.targetTaxonID = Slot(uri=NEON.targetTaxonID, name="targetTaxonID", curie=NEON.curie('targetTaxonID'),
                      model_uri=NEON.targetTaxonID, domain=None, range=Optional[str])

slots.qfSoniUnrs = Slot(uri=NEON.qfSoniUnrs, name="qfSoniUnrs", curie=NEON.curie('qfSoniUnrs'),
                      model_uri=NEON.qfSoniUnrs, domain=None, range=Optional[int])

slots.qfSoniData = Slot(uri=NEON.qfSoniData, name="qfSoniData", curie=NEON.curie('qfSoniData'),
                      model_uri=NEON.qfSoniData, domain=None, range=Optional[int])

slots.qfSoniTrig = Slot(uri=NEON.qfSoniTrig, name="qfSoniTrig", curie=NEON.curie('qfSoniTrig'),
                      model_uri=NEON.qfSoniTrig, domain=None, range=Optional[int])

slots.qfSoniComm = Slot(uri=NEON.qfSoniComm, name="qfSoniComm", curie=NEON.curie('qfSoniComm'),
                      model_uri=NEON.qfSoniComm, domain=None, range=Optional[int])

slots.qfSoniTemp = Slot(uri=NEON.qfSoniTemp, name="qfSoniTemp", curie=NEON.curie('qfSoniTemp'),
                      model_uri=NEON.qfSoniTemp, domain=None, range=Optional[int])

slots.qfSoniSignalPoor = Slot(uri=NEON.qfSoniSignalPoor, name="qfSoniSignalPoor", curie=NEON.curie('qfSoniSignalPoor'),
                      model_uri=NEON.qfSoniSignalPoor, domain=None, range=Optional[int])

slots.qfSoniSignalHigh = Slot(uri=NEON.qfSoniSignalHigh, name="qfSoniSignalHigh", curie=NEON.curie('qfSoniSignalHigh'),
                      model_uri=NEON.qfSoniSignalHigh, domain=None, range=Optional[int])

slots.qfAmrsVal = Slot(uri=NEON.qfAmrsVal, name="qfAmrsVal", curie=NEON.curie('qfAmrsVal'),
                      model_uri=NEON.qfAmrsVal, domain=None, range=Optional[int])

slots.qfAmrsFilt = Slot(uri=NEON.qfAmrsFilt, name="qfAmrsFilt", curie=NEON.curie('qfAmrsFilt'),
                      model_uri=NEON.qfAmrsFilt, domain=None, range=Optional[int])

slots.qfAmrsVelo = Slot(uri=NEON.qfAmrsVelo, name="qfAmrsVelo", curie=NEON.curie('qfAmrsVelo'),
                      model_uri=NEON.qfAmrsVelo, domain=None, range=Optional[int])

slots.qfAmrsRng = Slot(uri=NEON.qfAmrsRng, name="qfAmrsRng", curie=NEON.curie('qfAmrsRng'),
                      model_uri=NEON.qfAmrsRng, domain=None, range=Optional[int])

slots.qfIrgaHead = Slot(uri=NEON.qfIrgaHead, name="qfIrgaHead", curie=NEON.curie('qfIrgaHead'),
                      model_uri=NEON.qfIrgaHead, domain=None, range=Optional[int])

slots.qfIrgaTempOut = Slot(uri=NEON.qfIrgaTempOut, name="qfIrgaTempOut", curie=NEON.curie('qfIrgaTempOut'),
                      model_uri=NEON.qfIrgaTempOut, domain=None, range=Optional[int])

slots.qfIrgaTempIn = Slot(uri=NEON.qfIrgaTempIn, name="qfIrgaTempIn", curie=NEON.curie('qfIrgaTempIn'),
                      model_uri=NEON.qfIrgaTempIn, domain=None, range=Optional[int])

slots.qfIrgaAux = Slot(uri=NEON.qfIrgaAux, name="qfIrgaAux", curie=NEON.curie('qfIrgaAux'),
                      model_uri=NEON.qfIrgaAux, domain=None, range=Optional[int])

slots.qfIrgaPres = Slot(uri=NEON.qfIrgaPres, name="qfIrgaPres", curie=NEON.curie('qfIrgaPres'),
                      model_uri=NEON.qfIrgaPres, domain=None, range=Optional[int])

slots.qfIrgaChop = Slot(uri=NEON.qfIrgaChop, name="qfIrgaChop", curie=NEON.curie('qfIrgaChop'),
                      model_uri=NEON.qfIrgaChop, domain=None, range=Optional[int])

slots.qfIrgaDetc = Slot(uri=NEON.qfIrgaDetc, name="qfIrgaDetc", curie=NEON.curie('qfIrgaDetc'),
                      model_uri=NEON.qfIrgaDetc, domain=None, range=Optional[int])

slots.qfIrgaPll = Slot(uri=NEON.qfIrgaPll, name="qfIrgaPll", curie=NEON.curie('qfIrgaPll'),
                      model_uri=NEON.qfIrgaPll, domain=None, range=Optional[int])

slots.qfIrgaSync = Slot(uri=NEON.qfIrgaSync, name="qfIrgaSync", curie=NEON.curie('qfIrgaSync'),
                      model_uri=NEON.qfIrgaSync, domain=None, range=Optional[int])

slots.qfIrgaAgc = Slot(uri=NEON.qfIrgaAgc, name="qfIrgaAgc", curie=NEON.curie('qfIrgaAgc'),
                      model_uri=NEON.qfIrgaAgc, domain=None, range=Optional[int])

slots.sensorDepthAlphaQF = Slot(uri=NEON.sensorDepthAlphaQF, name="sensorDepthAlphaQF", curie=NEON.curie('sensorDepthAlphaQF'),
                      model_uri=NEON.sensorDepthAlphaQF, domain=None, range=Optional[int])

slots.sensorDepthBetaQF = Slot(uri=NEON.sensorDepthBetaQF, name="sensorDepthBetaQF", curie=NEON.curie('sensorDepthBetaQF'),
                      model_uri=NEON.sensorDepthBetaQF, domain=None, range=Optional[int])

slots.sensorDepthConsistQF = Slot(uri=NEON.sensorDepthConsistQF, name="sensorDepthConsistQF", curie=NEON.curie('sensorDepthConsistQF'),
                      model_uri=NEON.sensorDepthConsistQF, domain=None, range=Optional[int])

slots.sensorDepthGapQF = Slot(uri=NEON.sensorDepthGapQF, name="sensorDepthGapQF", curie=NEON.curie('sensorDepthGapQF'),
                      model_uri=NEON.sensorDepthGapQF, domain=None, range=Optional[int])

slots.sensorDepthNullQF = Slot(uri=NEON.sensorDepthNullQF, name="sensorDepthNullQF", curie=NEON.curie('sensorDepthNullQF'),
                      model_uri=NEON.sensorDepthNullQF, domain=None, range=Optional[int])

slots.sensorDepthPersistQF = Slot(uri=NEON.sensorDepthPersistQF, name="sensorDepthPersistQF", curie=NEON.curie('sensorDepthPersistQF'),
                      model_uri=NEON.sensorDepthPersistQF, domain=None, range=Optional[int])

slots.sensorDepthRangeQF = Slot(uri=NEON.sensorDepthRangeQF, name="sensorDepthRangeQF", curie=NEON.curie('sensorDepthRangeQF'),
                      model_uri=NEON.sensorDepthRangeQF, domain=None, range=Optional[int])

slots.sensorDepthSpikeQF = Slot(uri=NEON.sensorDepthSpikeQF, name="sensorDepthSpikeQF", curie=NEON.curie('sensorDepthSpikeQF'),
                      model_uri=NEON.sensorDepthSpikeQF, domain=None, range=Optional[int])

slots.ampliconConcentration = Slot(uri=NEON.ampliconConcentration, name="ampliconConcentration", curie=NEON.curie('ampliconConcentration'),
                      model_uri=NEON.ampliconConcentration, domain=None, range=Optional[float])

slots.ampliconPooledStatus = Slot(uri=NEON.ampliconPooledStatus, name="ampliconPooledStatus", curie=NEON.curie('ampliconPooledStatus'),
                      model_uri=NEON.ampliconPooledStatus, domain=None, range=Optional[str])

slots.illuminaAdapterKit = Slot(uri=NEON.illuminaAdapterKit, name="illuminaAdapterKit", curie=NEON.curie('illuminaAdapterKit'),
                      model_uri=NEON.illuminaAdapterKit, domain=None, range=Optional[str])

slots.illuminaIndex1 = Slot(uri=NEON.illuminaIndex1, name="illuminaIndex1", curie=NEON.curie('illuminaIndex1'),
                      model_uri=NEON.illuminaIndex1, domain=None, range=Optional[str])

slots.illuminaIndex2 = Slot(uri=NEON.illuminaIndex2, name="illuminaIndex2", curie=NEON.curie('illuminaIndex2'),
                      model_uri=NEON.illuminaIndex2, domain=None, range=Optional[str])

slots.library_layout = Slot(uri=NEON.library_layout, name="library_layout", curie=NEON.curie('library_layout'),
                      model_uri=NEON.library_layout, domain=None, range=Optional[str])

slots.library_selection = Slot(uri=NEON.library_selection, name="library_selection", curie=NEON.curie('library_selection'),
                      model_uri=NEON.library_selection, domain=None, range=Optional[str])

slots.library_source = Slot(uri=NEON.library_source, name="library_source", curie=NEON.curie('library_source'),
                      model_uri=NEON.library_source, domain=None, range=Optional[str])

slots.library_strategy = Slot(uri=NEON.library_strategy, name="library_strategy", curie=NEON.curie('library_strategy'),
                      model_uri=NEON.library_strategy, domain=None, range=Optional[str])

slots.targetSubfragment = Slot(uri=NEON.targetSubfragment, name="targetSubfragment", curie=NEON.curie('targetSubfragment'),
                      model_uri=NEON.targetSubfragment, domain=None, range=Optional[str])

slots.bgcArchive = Slot(uri=NEON.bgcArchive, name="bgcArchive", curie=NEON.curie('bgcArchive'),
                      model_uri=NEON.bgcArchive, domain=None, range=Optional[str])

slots.chlCarotEquationInput = Slot(uri=NEON.chlCarotEquationInput, name="chlCarotEquationInput", curie=NEON.curie('chlCarotEquationInput'),
                      model_uri=NEON.chlCarotEquationInput, domain=None, range=Optional[str])

slots.chlCarotExtinctionCoefficient = Slot(uri=NEON.chlCarotExtinctionCoefficient, name="chlCarotExtinctionCoefficient", curie=NEON.curie('chlCarotExtinctionCoefficient'),
                      model_uri=NEON.chlCarotExtinctionCoefficient, domain=None, range=Optional[float])

slots.chlCarotWavelength1 = Slot(uri=NEON.chlCarotWavelength1, name="chlCarotWavelength1", curie=NEON.curie('chlCarotWavelength1'),
                      model_uri=NEON.chlCarotWavelength1, domain=None, range=Optional[float])

slots.chlCarotWavelength1Abs = Slot(uri=NEON.chlCarotWavelength1Abs, name="chlCarotWavelength1Abs", curie=NEON.curie('chlCarotWavelength1Abs'),
                      model_uri=NEON.chlCarotWavelength1Abs, domain=None, range=Optional[float])

slots.chlCarotWavelength2 = Slot(uri=NEON.chlCarotWavelength2, name="chlCarotWavelength2", curie=NEON.curie('chlCarotWavelength2'),
                      model_uri=NEON.chlCarotWavelength2, domain=None, range=Optional[float])

slots.chlCarotWavelength2Abs = Slot(uri=NEON.chlCarotWavelength2Abs, name="chlCarotWavelength2Abs", curie=NEON.curie('chlCarotWavelength2Abs'),
                      model_uri=NEON.chlCarotWavelength2Abs, domain=None, range=Optional[float])

slots.chlCarotWavelength3 = Slot(uri=NEON.chlCarotWavelength3, name="chlCarotWavelength3", curie=NEON.curie('chlCarotWavelength3'),
                      model_uri=NEON.chlCarotWavelength3, domain=None, range=Optional[float])

slots.chlCarotWavelength3Abs = Slot(uri=NEON.chlCarotWavelength3Abs, name="chlCarotWavelength3Abs", curie=NEON.curie('chlCarotWavelength3Abs'),
                      model_uri=NEON.chlCarotWavelength3Abs, domain=None, range=Optional[float])

slots.chlCarotWavelength4 = Slot(uri=NEON.chlCarotWavelength4, name="chlCarotWavelength4", curie=NEON.curie('chlCarotWavelength4'),
                      model_uri=NEON.chlCarotWavelength4, domain=None, range=Optional[float])

slots.chlCarotWavelength4Abs = Slot(uri=NEON.chlCarotWavelength4Abs, name="chlCarotWavelength4Abs", curie=NEON.curie('chlCarotWavelength4Abs'),
                      model_uri=NEON.chlCarotWavelength4Abs, domain=None, range=Optional[float])

slots.chlorophyllSampleCode = Slot(uri=NEON.chlorophyllSampleCode, name="chlorophyllSampleCode", curie=NEON.curie('chlorophyllSampleCode'),
                      model_uri=NEON.chlorophyllSampleCode, domain=None, range=Optional[str])

slots.chlorophyllSampleFate = Slot(uri=NEON.chlorophyllSampleFate, name="chlorophyllSampleFate", curie=NEON.curie('chlorophyllSampleFate'),
                      model_uri=NEON.chlorophyllSampleFate, domain=None, range=Optional[str])

slots.chlorophyllSampleID = Slot(uri=NEON.chlorophyllSampleID, name="chlorophyllSampleID", curie=NEON.curie('chlorophyllSampleID'),
                      model_uri=NEON.chlorophyllSampleID, domain=None, range=Optional[str])

slots.digestBoronConc = Slot(uri=NEON.digestBoronConc, name="digestBoronConc", curie=NEON.curie('digestBoronConc'),
                      model_uri=NEON.digestBoronConc, domain=None, range=Optional[float])

slots.digestCalciumConc = Slot(uri=NEON.digestCalciumConc, name="digestCalciumConc", curie=NEON.curie('digestCalciumConc'),
                      model_uri=NEON.digestCalciumConc, domain=None, range=Optional[float])

slots.digestCopperConc = Slot(uri=NEON.digestCopperConc, name="digestCopperConc", curie=NEON.curie('digestCopperConc'),
                      model_uri=NEON.digestCopperConc, domain=None, range=Optional[float])

slots.digestIronConc = Slot(uri=NEON.digestIronConc, name="digestIronConc", curie=NEON.curie('digestIronConc'),
                      model_uri=NEON.digestIronConc, domain=None, range=Optional[float])

slots.digestMagnesiumConc = Slot(uri=NEON.digestMagnesiumConc, name="digestMagnesiumConc", curie=NEON.curie('digestMagnesiumConc'),
                      model_uri=NEON.digestMagnesiumConc, domain=None, range=Optional[float])

slots.digestManganeseConc = Slot(uri=NEON.digestManganeseConc, name="digestManganeseConc", curie=NEON.curie('digestManganeseConc'),
                      model_uri=NEON.digestManganeseConc, domain=None, range=Optional[float])

slots.digestPhosphorusConc = Slot(uri=NEON.digestPhosphorusConc, name="digestPhosphorusConc", curie=NEON.curie('digestPhosphorusConc'),
                      model_uri=NEON.digestPhosphorusConc, domain=None, range=Optional[float])

slots.digestPotassiumConc = Slot(uri=NEON.digestPotassiumConc, name="digestPotassiumConc", curie=NEON.curie('digestPotassiumConc'),
                      model_uri=NEON.digestPotassiumConc, domain=None, range=Optional[float])

slots.digestSulfurConc = Slot(uri=NEON.digestSulfurConc, name="digestSulfurConc", curie=NEON.curie('digestSulfurConc'),
                      model_uri=NEON.digestSulfurConc, domain=None, range=Optional[float])

slots.digestVolume = Slot(uri=NEON.digestVolume, name="digestVolume", curie=NEON.curie('digestVolume'),
                      model_uri=NEON.digestVolume, domain=None, range=Optional[float])

slots.digestZincConc = Slot(uri=NEON.digestZincConc, name="digestZincConc", curie=NEON.curie('digestZincConc'),
                      model_uri=NEON.digestZincConc, domain=None, range=Optional[float])

slots.dilutionFactor = Slot(uri=NEON.dilutionFactor, name="dilutionFactor", curie=NEON.curie('dilutionFactor'),
                      model_uri=NEON.dilutionFactor, domain=None, range=Optional[float])

slots.ecReference = Slot(uri=NEON.ecReference, name="ecReference", curie=NEON.curie('ecReference'),
                      model_uri=NEON.ecReference, domain=None, range=Optional[str])

slots.extractCarotConc = Slot(uri=NEON.extractCarotConc, name="extractCarotConc", curie=NEON.curie('extractCarotConc'),
                      model_uri=NEON.extractCarotConc, domain=None, range=Optional[float])

slots.extractChlAConc = Slot(uri=NEON.extractChlAConc, name="extractChlAConc", curie=NEON.curie('extractChlAConc'),
                      model_uri=NEON.extractChlAConc, domain=None, range=Optional[float])

slots.extractChlBConc = Slot(uri=NEON.extractChlBConc, name="extractChlBConc", curie=NEON.curie('extractChlBConc'),
                      model_uri=NEON.extractChlBConc, domain=None, range=Optional[float])

slots.extractionLength = Slot(uri=NEON.extractionLength, name="extractionLength", curie=NEON.curie('extractionLength'),
                      model_uri=NEON.extractionLength, domain=None, range=Optional[float])

slots.foliarBoronConc = Slot(uri=NEON.foliarBoronConc, name="foliarBoronConc", curie=NEON.curie('foliarBoronConc'),
                      model_uri=NEON.foliarBoronConc, domain=None, range=Optional[float])

slots.foliarCalciumConc = Slot(uri=NEON.foliarCalciumConc, name="foliarCalciumConc", curie=NEON.curie('foliarCalciumConc'),
                      model_uri=NEON.foliarCalciumConc, domain=None, range=Optional[float])

slots.foliarCopperConc = Slot(uri=NEON.foliarCopperConc, name="foliarCopperConc", curie=NEON.curie('foliarCopperConc'),
                      model_uri=NEON.foliarCopperConc, domain=None, range=Optional[float])

slots.foliarIronConc = Slot(uri=NEON.foliarIronConc, name="foliarIronConc", curie=NEON.curie('foliarIronConc'),
                      model_uri=NEON.foliarIronConc, domain=None, range=Optional[float])

slots.foliarMagnesiumConc = Slot(uri=NEON.foliarMagnesiumConc, name="foliarMagnesiumConc", curie=NEON.curie('foliarMagnesiumConc'),
                      model_uri=NEON.foliarMagnesiumConc, domain=None, range=Optional[float])

slots.foliarManganeseConc = Slot(uri=NEON.foliarManganeseConc, name="foliarManganeseConc", curie=NEON.curie('foliarManganeseConc'),
                      model_uri=NEON.foliarManganeseConc, domain=None, range=Optional[float])

slots.foliarPhosphorusConc = Slot(uri=NEON.foliarPhosphorusConc, name="foliarPhosphorusConc", curie=NEON.curie('foliarPhosphorusConc'),
                      model_uri=NEON.foliarPhosphorusConc, domain=None, range=Optional[float])

slots.foliarPotassiumConc = Slot(uri=NEON.foliarPotassiumConc, name="foliarPotassiumConc", curie=NEON.curie('foliarPotassiumConc'),
                      model_uri=NEON.foliarPotassiumConc, domain=None, range=Optional[float])

slots.foliarSulfurConc = Slot(uri=NEON.foliarSulfurConc, name="foliarSulfurConc", curie=NEON.curie('foliarSulfurConc'),
                      model_uri=NEON.foliarSulfurConc, domain=None, range=Optional[float])

slots.foliarZincConc = Slot(uri=NEON.foliarZincConc, name="foliarZincConc", curie=NEON.curie('foliarZincConc'),
                      model_uri=NEON.foliarZincConc, domain=None, range=Optional[float])

slots.handlingQF = Slot(uri=NEON.handlingQF, name="handlingQF", curie=NEON.curie('handlingQF'),
                      model_uri=NEON.handlingQF, domain=None, range=Optional[str])

slots.knownBoronConc = Slot(uri=NEON.knownBoronConc, name="knownBoronConc", curie=NEON.curie('knownBoronConc'),
                      model_uri=NEON.knownBoronConc, domain=None, range=Optional[float])

slots.knownCalciumConc = Slot(uri=NEON.knownCalciumConc, name="knownCalciumConc", curie=NEON.curie('knownCalciumConc'),
                      model_uri=NEON.knownCalciumConc, domain=None, range=Optional[float])

slots.knownCopperConc = Slot(uri=NEON.knownCopperConc, name="knownCopperConc", curie=NEON.curie('knownCopperConc'),
                      model_uri=NEON.knownCopperConc, domain=None, range=Optional[float])

slots.knownIronConc = Slot(uri=NEON.knownIronConc, name="knownIronConc", curie=NEON.curie('knownIronConc'),
                      model_uri=NEON.knownIronConc, domain=None, range=Optional[float])

slots.knownMagnesiumConc = Slot(uri=NEON.knownMagnesiumConc, name="knownMagnesiumConc", curie=NEON.curie('knownMagnesiumConc'),
                      model_uri=NEON.knownMagnesiumConc, domain=None, range=Optional[float])

slots.knownManganeseConc = Slot(uri=NEON.knownManganeseConc, name="knownManganeseConc", curie=NEON.curie('knownManganeseConc'),
                      model_uri=NEON.knownManganeseConc, domain=None, range=Optional[float])

slots.knownPhosphorusConc = Slot(uri=NEON.knownPhosphorusConc, name="knownPhosphorusConc", curie=NEON.curie('knownPhosphorusConc'),
                      model_uri=NEON.knownPhosphorusConc, domain=None, range=Optional[float])

slots.knownPotassiumConc = Slot(uri=NEON.knownPotassiumConc, name="knownPotassiumConc", curie=NEON.curie('knownPotassiumConc'),
                      model_uri=NEON.knownPotassiumConc, domain=None, range=Optional[float])

slots.knownSulfurConc = Slot(uri=NEON.knownSulfurConc, name="knownSulfurConc", curie=NEON.curie('knownSulfurConc'),
                      model_uri=NEON.knownSulfurConc, domain=None, range=Optional[float])

slots.knownZincConc = Slot(uri=NEON.knownZincConc, name="knownZincConc", curie=NEON.curie('knownZincConc'),
                      model_uri=NEON.knownZincConc, domain=None, range=Optional[float])

slots.leafArea = Slot(uri=NEON.leafArea, name="leafArea", curie=NEON.curie('leafArea'),
                      model_uri=NEON.leafArea, domain=None, range=Optional[float])

slots.leafMassPerArea = Slot(uri=NEON.leafMassPerArea, name="leafMassPerArea", curie=NEON.curie('leafMassPerArea'),
                      model_uri=NEON.leafMassPerArea, domain=None, range=Optional[float])

slots.lmaSampleCode = Slot(uri=NEON.lmaSampleCode, name="lmaSampleCode", curie=NEON.curie('lmaSampleCode'),
                      model_uri=NEON.lmaSampleCode, domain=None, range=Optional[str])

slots.lmaSampleCondition = Slot(uri=NEON.lmaSampleCondition, name="lmaSampleCondition", curie=NEON.curie('lmaSampleCondition'),
                      model_uri=NEON.lmaSampleCondition, domain=None, range=Optional[str])

slots.lmaSampleFate = Slot(uri=NEON.lmaSampleFate, name="lmaSampleFate", curie=NEON.curie('lmaSampleFate'),
                      model_uri=NEON.lmaSampleFate, domain=None, range=Optional[str])

slots.lmaSampleID = Slot(uri=NEON.lmaSampleID, name="lmaSampleID", curie=NEON.curie('lmaSampleID'),
                      model_uri=NEON.lmaSampleID, domain=None, range=Optional[str])

slots.percentCoverClip = Slot(uri=NEON.percentCoverClip, name="percentCoverClip", curie=NEON.curie('percentCoverClip'),
                      model_uri=NEON.percentCoverClip, domain=None, range=Optional[float])

slots.percentGreen = Slot(uri=NEON.percentGreen, name="percentGreen", curie=NEON.curie('percentGreen'),
                      model_uri=NEON.percentGreen, domain=None, range=Optional[str])

slots.relativeAccuracyScale = Slot(uri=NEON.relativeAccuracyScale, name="relativeAccuracyScale", curie=NEON.curie('relativeAccuracyScale'),
                      model_uri=NEON.relativeAccuracyScale, domain=None, range=Optional[str])

slots.scanDate = Slot(uri=NEON.scanDate, name="scanDate", curie=NEON.curie('scanDate'),
                      model_uri=NEON.scanDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.scannedBy = Slot(uri=NEON.scannedBy, name="scannedBy", curie=NEON.curie('scannedBy'),
                      model_uri=NEON.scannedBy, domain=None, range=Optional[str])

slots.scannedLeafNumber = Slot(uri=NEON.scannedLeafNumber, name="scannedLeafNumber", curie=NEON.curie('scannedLeafNumber'),
                      model_uri=NEON.scannedLeafNumber, domain=None, range=Optional[str])

slots.solventVolume = Slot(uri=NEON.solventVolume, name="solventVolume", curie=NEON.curie('solventVolume'),
                      model_uri=NEON.solventVolume, domain=None, range=Optional[float])

slots.standardChlAConc = Slot(uri=NEON.standardChlAConc, name="standardChlAConc", curie=NEON.curie('standardChlAConc'),
                      model_uri=NEON.standardChlAConc, domain=None, range=Optional[float])

slots.subsample1Height = Slot(uri=NEON.subsample1Height, name="subsample1Height", curie=NEON.curie('subsample1Height'),
                      model_uri=NEON.subsample1Height, domain=None, range=Optional[float])

slots.subsample2Height = Slot(uri=NEON.subsample2Height, name="subsample2Height", curie=NEON.curie('subsample2Height'),
                      model_uri=NEON.subsample2Height, domain=None, range=Optional[float])

slots.subsample3Height = Slot(uri=NEON.subsample3Height, name="subsample3Height", curie=NEON.curie('subsample3Height'),
                      model_uri=NEON.subsample3Height, domain=None, range=Optional[float])

slots.vd1BaseHeight = Slot(uri=NEON.vd1BaseHeight, name="vd1BaseHeight", curie=NEON.curie('vd1BaseHeight'),
                      model_uri=NEON.vd1BaseHeight, domain=None, range=Optional[float])

slots.vd1Sample = Slot(uri=NEON.vd1Sample, name="vd1Sample", curie=NEON.curie('vd1Sample'),
                      model_uri=NEON.vd1Sample, domain=None, range=Optional[float])

slots.vd2BaseHeight = Slot(uri=NEON.vd2BaseHeight, name="vd2BaseHeight", curie=NEON.curie('vd2BaseHeight'),
                      model_uri=NEON.vd2BaseHeight, domain=None, range=Optional[float])

slots.vd2Sample = Slot(uri=NEON.vd2Sample, name="vd2Sample", curie=NEON.curie('vd2Sample'),
                      model_uri=NEON.vd2Sample, domain=None, range=Optional[float])

slots.vd3BaseHeight = Slot(uri=NEON.vd3BaseHeight, name="vd3BaseHeight", curie=NEON.curie('vd3BaseHeight'),
                      model_uri=NEON.vd3BaseHeight, domain=None, range=Optional[float])

slots.vd3Sample = Slot(uri=NEON.vd3Sample, name="vd3Sample", curie=NEON.curie('vd3Sample'),
                      model_uri=NEON.vd3Sample, domain=None, range=Optional[float])

slots.weighedBy = Slot(uri=NEON.weighedBy, name="weighedBy", curie=NEON.curie('weighedBy'),
                      model_uri=NEON.weighedBy, domain=None, range=Optional[str])

slots.yearMonth = Slot(uri=NEON.yearMonth, name="yearMonth", curie=NEON.curie('yearMonth'),
                      model_uri=NEON.yearMonth, domain=None, range=Optional[Union[str, XSDTime]])

slots.year = Slot(uri=NEON.year, name="year", curie=NEON.curie('year'),
                      model_uri=NEON.year, domain=None, range=Optional[Union[str, XSDTime]])

slots.corPresQF = Slot(uri=NEON.corPresQF, name="corPresQF", curie=NEON.curie('corPresQF'),
                      model_uri=NEON.corPresQF, domain=None, range=Optional[str])

slots.dewTempQF = Slot(uri=NEON.dewTempQF, name="dewTempQF", curie=NEON.curie('dewTempQF'),
                      model_uri=NEON.dewTempQF, domain=None, range=Optional[str])

slots.precipQF = Slot(uri=NEON.precipQF, name="precipQF", curie=NEON.curie('precipQF'),
                      model_uri=NEON.precipQF, domain=None, range=Optional[str])

slots.precipTotal = Slot(uri=NEON.precipTotal, name="precipTotal", curie=NEON.curie('precipTotal'),
                      model_uri=NEON.precipTotal, domain=None, range=Optional[float])

slots.RHQF = Slot(uri=NEON.RHQF, name="RHQF", curie=NEON.curie('RHQF'),
                      model_uri=NEON.RHQF, domain=None, range=Optional[str])

slots.shortRadQF = Slot(uri=NEON.shortRadQF, name="shortRadQF", curie=NEON.curie('shortRadQF'),
                      model_uri=NEON.shortRadQF, domain=None, range=Optional[str])

slots.staPresQF = Slot(uri=NEON.staPresQF, name="staPresQF", curie=NEON.curie('staPresQF'),
                      model_uri=NEON.staPresQF, domain=None, range=Optional[str])

slots.tempTripleQF = Slot(uri=NEON.tempTripleQF, name="tempTripleQF", curie=NEON.curie('tempTripleQF'),
                      model_uri=NEON.tempTripleQF, domain=None, range=Optional[str])

slots.windSpeedQF = Slot(uri=NEON.windSpeedQF, name="windSpeedQF", curie=NEON.curie('windSpeedQF'),
                      model_uri=NEON.windSpeedQF, domain=None, range=Optional[str])

slots.spectrumCount = Slot(uri=NEON.spectrumCount, name="spectrumCount", curie=NEON.curie('spectrumCount'),
                      model_uri=NEON.spectrumCount, domain=None, range=Optional[int])

slots.wssCorPres = Slot(uri=NEON.wssCorPres, name="wssCorPres", curie=NEON.curie('wssCorPres'),
                      model_uri=NEON.wssCorPres, domain=None, range=Optional[float])

slots.wssDewTempMaximum = Slot(uri=NEON.wssDewTempMaximum, name="wssDewTempMaximum", curie=NEON.curie('wssDewTempMaximum'),
                      model_uri=NEON.wssDewTempMaximum, domain=None, range=Optional[float])

slots.wssDewTempMean = Slot(uri=NEON.wssDewTempMean, name="wssDewTempMean", curie=NEON.curie('wssDewTempMean'),
                      model_uri=NEON.wssDewTempMean, domain=None, range=Optional[float])

slots.wssDewTempMinimum = Slot(uri=NEON.wssDewTempMinimum, name="wssDewTempMinimum", curie=NEON.curie('wssDewTempMinimum'),
                      model_uri=NEON.wssDewTempMinimum, domain=None, range=Optional[float])

slots.wssDewTempStdErMean = Slot(uri=NEON.wssDewTempStdErMean, name="wssDewTempStdErMean", curie=NEON.curie('wssDewTempStdErMean'),
                      model_uri=NEON.wssDewTempStdErMean, domain=None, range=Optional[float])

slots.wssDewTempVariance = Slot(uri=NEON.wssDewTempVariance, name="wssDewTempVariance", curie=NEON.curie('wssDewTempVariance'),
                      model_uri=NEON.wssDewTempVariance, domain=None, range=Optional[float])

slots.wssPrecipTotal = Slot(uri=NEON.wssPrecipTotal, name="wssPrecipTotal", curie=NEON.curie('wssPrecipTotal'),
                      model_uri=NEON.wssPrecipTotal, domain=None, range=Optional[float])

slots.wssRHMaximum = Slot(uri=NEON.wssRHMaximum, name="wssRHMaximum", curie=NEON.curie('wssRHMaximum'),
                      model_uri=NEON.wssRHMaximum, domain=None, range=Optional[float])

slots.wssRHMean = Slot(uri=NEON.wssRHMean, name="wssRHMean", curie=NEON.curie('wssRHMean'),
                      model_uri=NEON.wssRHMean, domain=None, range=Optional[float])

slots.wssRHMinimum = Slot(uri=NEON.wssRHMinimum, name="wssRHMinimum", curie=NEON.curie('wssRHMinimum'),
                      model_uri=NEON.wssRHMinimum, domain=None, range=Optional[float])

slots.wssRHStdErMean = Slot(uri=NEON.wssRHStdErMean, name="wssRHStdErMean", curie=NEON.curie('wssRHStdErMean'),
                      model_uri=NEON.wssRHStdErMean, domain=None, range=Optional[float])

slots.wssRHVariance = Slot(uri=NEON.wssRHVariance, name="wssRHVariance", curie=NEON.curie('wssRHVariance'),
                      model_uri=NEON.wssRHVariance, domain=None, range=Optional[float])

slots.wssShortRadMaximum = Slot(uri=NEON.wssShortRadMaximum, name="wssShortRadMaximum", curie=NEON.curie('wssShortRadMaximum'),
                      model_uri=NEON.wssShortRadMaximum, domain=None, range=Optional[float])

slots.wssShortRadMean = Slot(uri=NEON.wssShortRadMean, name="wssShortRadMean", curie=NEON.curie('wssShortRadMean'),
                      model_uri=NEON.wssShortRadMean, domain=None, range=Optional[float])

slots.wssShortRadMinimum = Slot(uri=NEON.wssShortRadMinimum, name="wssShortRadMinimum", curie=NEON.curie('wssShortRadMinimum'),
                      model_uri=NEON.wssShortRadMinimum, domain=None, range=Optional[float])

slots.wssShortRadStdErMean = Slot(uri=NEON.wssShortRadStdErMean, name="wssShortRadStdErMean", curie=NEON.curie('wssShortRadStdErMean'),
                      model_uri=NEON.wssShortRadStdErMean, domain=None, range=Optional[float])

slots.wssShortRadVariance = Slot(uri=NEON.wssShortRadVariance, name="wssShortRadVariance", curie=NEON.curie('wssShortRadVariance'),
                      model_uri=NEON.wssShortRadVariance, domain=None, range=Optional[float])

slots.wssStaPresMaximum = Slot(uri=NEON.wssStaPresMaximum, name="wssStaPresMaximum", curie=NEON.curie('wssStaPresMaximum'),
                      model_uri=NEON.wssStaPresMaximum, domain=None, range=Optional[float])

slots.wssStaPresMean = Slot(uri=NEON.wssStaPresMean, name="wssStaPresMean", curie=NEON.curie('wssStaPresMean'),
                      model_uri=NEON.wssStaPresMean, domain=None, range=Optional[float])

slots.wssStaPresMinimum = Slot(uri=NEON.wssStaPresMinimum, name="wssStaPresMinimum", curie=NEON.curie('wssStaPresMinimum'),
                      model_uri=NEON.wssStaPresMinimum, domain=None, range=Optional[float])

slots.wssStaPresStdErMean = Slot(uri=NEON.wssStaPresStdErMean, name="wssStaPresStdErMean", curie=NEON.curie('wssStaPresStdErMean'),
                      model_uri=NEON.wssStaPresStdErMean, domain=None, range=Optional[float])

slots.wssStaPresVariance = Slot(uri=NEON.wssStaPresVariance, name="wssStaPresVariance", curie=NEON.curie('wssStaPresVariance'),
                      model_uri=NEON.wssStaPresVariance, domain=None, range=Optional[float])

slots.wssTempTripleMaximum = Slot(uri=NEON.wssTempTripleMaximum, name="wssTempTripleMaximum", curie=NEON.curie('wssTempTripleMaximum'),
                      model_uri=NEON.wssTempTripleMaximum, domain=None, range=Optional[float])

slots.wssTempTripleMean = Slot(uri=NEON.wssTempTripleMean, name="wssTempTripleMean", curie=NEON.curie('wssTempTripleMean'),
                      model_uri=NEON.wssTempTripleMean, domain=None, range=Optional[float])

slots.wssTempTripleMinimum = Slot(uri=NEON.wssTempTripleMinimum, name="wssTempTripleMinimum", curie=NEON.curie('wssTempTripleMinimum'),
                      model_uri=NEON.wssTempTripleMinimum, domain=None, range=Optional[float])

slots.wssTempTripleStdErMean = Slot(uri=NEON.wssTempTripleStdErMean, name="wssTempTripleStdErMean", curie=NEON.curie('wssTempTripleStdErMean'),
                      model_uri=NEON.wssTempTripleStdErMean, domain=None, range=Optional[float])

slots.wssTempTripleVariance = Slot(uri=NEON.wssTempTripleVariance, name="wssTempTripleVariance", curie=NEON.curie('wssTempTripleVariance'),
                      model_uri=NEON.wssTempTripleVariance, domain=None, range=Optional[float])

slots.wssWindSpeedMaximum = Slot(uri=NEON.wssWindSpeedMaximum, name="wssWindSpeedMaximum", curie=NEON.curie('wssWindSpeedMaximum'),
                      model_uri=NEON.wssWindSpeedMaximum, domain=None, range=Optional[float])

slots.wssWindSpeedMean = Slot(uri=NEON.wssWindSpeedMean, name="wssWindSpeedMean", curie=NEON.curie('wssWindSpeedMean'),
                      model_uri=NEON.wssWindSpeedMean, domain=None, range=Optional[float])

slots.wssWindSpeedMinimum = Slot(uri=NEON.wssWindSpeedMinimum, name="wssWindSpeedMinimum", curie=NEON.curie('wssWindSpeedMinimum'),
                      model_uri=NEON.wssWindSpeedMinimum, domain=None, range=Optional[float])

slots.wssWindSpeedStdErMean = Slot(uri=NEON.wssWindSpeedStdErMean, name="wssWindSpeedStdErMean", curie=NEON.curie('wssWindSpeedStdErMean'),
                      model_uri=NEON.wssWindSpeedStdErMean, domain=None, range=Optional[float])

slots.wssWindSpeedVariance = Slot(uri=NEON.wssWindSpeedVariance, name="wssWindSpeedVariance", curie=NEON.curie('wssWindSpeedVariance'),
                      model_uri=NEON.wssWindSpeedVariance, domain=None, range=Optional[float])

slots.rawCalibratedChla = Slot(uri=NEON.rawCalibratedChla, name="rawCalibratedChla", curie=NEON.curie('rawCalibratedChla'),
                      model_uri=NEON.rawCalibratedChla, domain=None, range=Optional[float])

slots.rawCalibratedfDOM = Slot(uri=NEON.rawCalibratedfDOM, name="rawCalibratedfDOM", curie=NEON.curie('rawCalibratedfDOM'),
                      model_uri=NEON.rawCalibratedfDOM, domain=None, range=Optional[float])

slots.d18OWaterHighArchive = Slot(uri=NEON.d18OWaterHighArchive, name="d18OWaterHighArchive", curie=NEON.curie('d18OWaterHighArchive'),
                      model_uri=NEON.d18OWaterHighArchive, domain=None, range=Optional[float])

slots.d18OWaterLowArchive = Slot(uri=NEON.d18OWaterLowArchive, name="d18OWaterLowArchive", curie=NEON.curie('d18OWaterLowArchive'),
                      model_uri=NEON.d18OWaterLowArchive, domain=None, range=Optional[float])

slots.d18OWaterMedArchive = Slot(uri=NEON.d18OWaterMedArchive, name="d18OWaterMedArchive", curie=NEON.curie('d18OWaterMedArchive'),
                      model_uri=NEON.d18OWaterMedArchive, domain=None, range=Optional[float])

slots.d2HWaterHighArchive = Slot(uri=NEON.d2HWaterHighArchive, name="d2HWaterHighArchive", curie=NEON.curie('d2HWaterHighArchive'),
                      model_uri=NEON.d2HWaterHighArchive, domain=None, range=Optional[float])

slots.d2HWaterLowArchive = Slot(uri=NEON.d2HWaterLowArchive, name="d2HWaterLowArchive", curie=NEON.curie('d2HWaterLowArchive'),
                      model_uri=NEON.d2HWaterLowArchive, domain=None, range=Optional[float])

slots.d2HWaterMedArchive = Slot(uri=NEON.d2HWaterMedArchive, name="d2HWaterMedArchive", curie=NEON.curie('d2HWaterMedArchive'),
                      model_uri=NEON.d2HWaterMedArchive, domain=None, range=Optional[float])

slots.attemptNumber = Slot(uri=NEON.attemptNumber, name="attemptNumber", curie=NEON.curie('attemptNumber'),
                      model_uri=NEON.attemptNumber, domain=None, range=Optional[int])

slots.bankfullDepth = Slot(uri=NEON.bankfullDepth, name="bankfullDepth", curie=NEON.curie('bankfullDepth'),
                      model_uri=NEON.bankfullDepth, domain=None, range=Optional[float])

slots.bankfullWidth = Slot(uri=NEON.bankfullWidth, name="bankfullWidth", curie=NEON.curie('bankfullWidth'),
                      model_uri=NEON.bankfullWidth, domain=None, range=Optional[float])

slots.dataFileName = Slot(uri=NEON.dataFileName, name="dataFileName", curie=NEON.curie('dataFileName'),
                      model_uri=NEON.dataFileName, domain=None, range=Optional[str])

slots.dataFilePath = Slot(uri=NEON.dataFilePath, name="dataFilePath", curie=NEON.curie('dataFilePath'),
                      model_uri=NEON.dataFilePath, domain=None, range=Optional[str])

slots.deletePoint = Slot(uri=NEON.deletePoint, name="deletePoint", curie=NEON.curie('deletePoint'),
                      model_uri=NEON.deletePoint, domain=None, range=Optional[str])

slots.errorDescription = Slot(uri=NEON.errorDescription, name="errorDescription", curie=NEON.curie('errorDescription'),
                      model_uri=NEON.errorDescription, domain=None, range=Optional[str])

slots.errorDescriptionRemarks = Slot(uri=NEON.errorDescriptionRemarks, name="errorDescriptionRemarks", curie=NEON.curie('errorDescriptionRemarks'),
                      model_uri=NEON.errorDescriptionRemarks, domain=None, range=Optional[str])

slots.featureID = Slot(uri=NEON.featureID, name="featureID", curie=NEON.curie('featureID'),
                      model_uri=NEON.featureID, domain=None, range=Optional[str])

slots.featuresSurveyed = Slot(uri=NEON.featuresSurveyed, name="featuresSurveyed", curie=NEON.curie('featuresSurveyed'),
                      model_uri=NEON.featuresSurveyed, domain=None, range=Optional[str])

slots.featuresSurveyedOther = Slot(uri=NEON.featuresSurveyedOther, name="featuresSurveyedOther", curie=NEON.curie('featuresSurveyedOther'),
                      model_uri=NEON.featuresSurveyedOther, domain=None, range=Optional[str])

slots.featureType = Slot(uri=NEON.featureType, name="featureType", curie=NEON.curie('featureType'),
                      model_uri=NEON.featureType, domain=None, range=Optional[str])

slots.firstControlPointID = Slot(uri=NEON.firstControlPointID, name="firstControlPointID", curie=NEON.curie('firstControlPointID'),
                      model_uri=NEON.firstControlPointID, domain=None, range=Optional[str])

slots.firstControlPointType = Slot(uri=NEON.firstControlPointType, name="firstControlPointType", curie=NEON.curie('firstControlPointType'),
                      model_uri=NEON.firstControlPointType, domain=None, range=Optional[str])

slots.firstThalwegPoint = Slot(uri=NEON.firstThalwegPoint, name="firstThalwegPoint", curie=NEON.curie('firstThalwegPoint'),
                      model_uri=NEON.firstThalwegPoint, domain=None, range=Optional[int])

slots.firstThalwegPointName = Slot(uri=NEON.firstThalwegPointName, name="firstThalwegPointName", curie=NEON.curie('firstThalwegPointName'),
                      model_uri=NEON.firstThalwegPointName, domain=None, range=Optional[str])

slots.floodproneHeight = Slot(uri=NEON.floodproneHeight, name="floodproneHeight", curie=NEON.curie('floodproneHeight'),
                      model_uri=NEON.floodproneHeight, domain=None, range=Optional[float])

slots.lastThalwegPoint = Slot(uri=NEON.lastThalwegPoint, name="lastThalwegPoint", curie=NEON.curie('lastThalwegPoint'),
                      model_uri=NEON.lastThalwegPoint, domain=None, range=Optional[int])

slots.lastThalwegPointName = Slot(uri=NEON.lastThalwegPointName, name="lastThalwegPointName", curie=NEON.curie('lastThalwegPointName'),
                      model_uri=NEON.lastThalwegPointName, domain=None, range=Optional[str])

slots.missingLinePoint1 = Slot(uri=NEON.missingLinePoint1, name="missingLinePoint1", curie=NEON.curie('missingLinePoint1'),
                      model_uri=NEON.missingLinePoint1, domain=None, range=Optional[str])

slots.missingLinePoint2 = Slot(uri=NEON.missingLinePoint2, name="missingLinePoint2", curie=NEON.curie('missingLinePoint2'),
                      model_uri=NEON.missingLinePoint2, domain=None, range=Optional[str])

slots.missingLineResultsdH = Slot(uri=NEON.missingLineResultsdH, name="missingLineResultsdH", curie=NEON.curie('missingLineResultsdH'),
                      model_uri=NEON.missingLineResultsdH, domain=None, range=Optional[float])

slots.missingLineResultsHD = Slot(uri=NEON.missingLineResultsHD, name="missingLineResultsHD", curie=NEON.curie('missingLineResultsHD'),
                      model_uri=NEON.missingLineResultsHD, domain=None, range=Optional[float])

slots.missingLineReultsStDev = Slot(uri=NEON.missingLineReultsStDev, name="missingLineReultsStDev", curie=NEON.curie('missingLineReultsStDev'),
                      model_uri=NEON.missingLineReultsStDev, domain=None, range=Optional[float])

slots.missingLineWorkflow = Slot(uri=NEON.missingLineWorkflow, name="missingLineWorkflow", curie=NEON.curie('missingLineWorkflow'),
                      model_uri=NEON.missingLineWorkflow, domain=None, range=Optional[str])

slots.pebbleCountD16 = Slot(uri=NEON.pebbleCountD16, name="pebbleCountD16", curie=NEON.curie('pebbleCountD16'),
                      model_uri=NEON.pebbleCountD16, domain=None, range=Optional[str])

slots.pebbleCountD5 = Slot(uri=NEON.pebbleCountD5, name="pebbleCountD5", curie=NEON.curie('pebbleCountD5'),
                      model_uri=NEON.pebbleCountD5, domain=None, range=Optional[str])

slots.pebbleCountD50 = Slot(uri=NEON.pebbleCountD50, name="pebbleCountD50", curie=NEON.curie('pebbleCountD50'),
                      model_uri=NEON.pebbleCountD50, domain=None, range=Optional[str])

slots.pebbleCountD84 = Slot(uri=NEON.pebbleCountD84, name="pebbleCountD84", curie=NEON.curie('pebbleCountD84'),
                      model_uri=NEON.pebbleCountD84, domain=None, range=Optional[str])

slots.pebbleCountNumber = Slot(uri=NEON.pebbleCountNumber, name="pebbleCountNumber", curie=NEON.curie('pebbleCountNumber'),
                      model_uri=NEON.pebbleCountNumber, domain=None, range=Optional[int])

slots.pebbleCountsCollected = Slot(uri=NEON.pebbleCountsCollected, name="pebbleCountsCollected", curie=NEON.curie('pebbleCountsCollected'),
                      model_uri=NEON.pebbleCountsCollected, domain=None, range=Optional[str])

slots.pebbleSize = Slot(uri=NEON.pebbleSize, name="pebbleSize", curie=NEON.curie('pebbleSize'),
                      model_uri=NEON.pebbleSize, domain=None, range=Optional[str])

slots.secondControlPointID = Slot(uri=NEON.secondControlPointID, name="secondControlPointID", curie=NEON.curie('secondControlPointID'),
                      model_uri=NEON.secondControlPointID, domain=None, range=Optional[str])

slots.secondControlPointType = Slot(uri=NEON.secondControlPointType, name="secondControlPointType", curie=NEON.curie('secondControlPointType'),
                      model_uri=NEON.secondControlPointType, domain=None, range=Optional[str])

slots.sopVersion = Slot(uri=NEON.sopVersion, name="sopVersion", curie=NEON.curie('sopVersion'),
                      model_uri=NEON.sopVersion, domain=None, range=Optional[str])

slots.staffGaugeInstalled = Slot(uri=NEON.staffGaugeInstalled, name="staffGaugeInstalled", curie=NEON.curie('staffGaugeInstalled'),
                      model_uri=NEON.staffGaugeInstalled, domain=None, range=Optional[str])

slots.staffGaugeMark = Slot(uri=NEON.staffGaugeMark, name="staffGaugeMark", curie=NEON.curie('staffGaugeMark'),
                      model_uri=NEON.staffGaugeMark, domain=None, range=Optional[float])

slots.stDevH = Slot(uri=NEON.stDevH, name="stDevH", curie=NEON.curie('stDevH'),
                      model_uri=NEON.stDevH, domain=None, range=Optional[float])

slots.stDevHADegrees = Slot(uri=NEON.stDevHADegrees, name="stDevHADegrees", curie=NEON.curie('stDevHADegrees'),
                      model_uri=NEON.stDevHADegrees, domain=None, range=Optional[float])

slots.stDevHAMinutes = Slot(uri=NEON.stDevHAMinutes, name="stDevHAMinutes", curie=NEON.curie('stDevHAMinutes'),
                      model_uri=NEON.stDevHAMinutes, domain=None, range=Optional[float])

slots.stDevHASeconds = Slot(uri=NEON.stDevHASeconds, name="stDevHASeconds", curie=NEON.curie('stDevHASeconds'),
                      model_uri=NEON.stDevHASeconds, domain=None, range=Optional[float])

slots.stDevPos = Slot(uri=NEON.stDevPos, name="stDevPos", curie=NEON.curie('stDevPos'),
                      model_uri=NEON.stDevPos, domain=None, range=Optional[float])

slots.thirdControlPointID = Slot(uri=NEON.thirdControlPointID, name="thirdControlPointID", curie=NEON.curie('thirdControlPointID'),
                      model_uri=NEON.thirdControlPointID, domain=None, range=Optional[str])

slots.thirdControlPointType = Slot(uri=NEON.thirdControlPointType, name="thirdControlPointType", curie=NEON.curie('thirdControlPointType'),
                      model_uri=NEON.thirdControlPointType, domain=None, range=Optional[str])

slots.totalLWDCount = Slot(uri=NEON.totalLWDCount, name="totalLWDCount", curie=NEON.curie('totalLWDCount'),
                      model_uri=NEON.totalLWDCount, domain=None, range=Optional[int])

slots.totalStationLocation = Slot(uri=NEON.totalStationLocation, name="totalStationLocation", curie=NEON.curie('totalStationLocation'),
                      model_uri=NEON.totalStationLocation, domain=None, range=Optional[str])

slots.upsDwnsHabitatType = Slot(uri=NEON.upsDwnsHabitatType, name="upsDwnsHabitatType", curie=NEON.curie('upsDwnsHabitatType'),
                      model_uri=NEON.upsDwnsHabitatType, domain=None, range=Optional[str])

slots.bathymetryDataType = Slot(uri=NEON.bathymetryDataType, name="bathymetryDataType", curie=NEON.curie('bathymetryDataType'),
                      model_uri=NEON.bathymetryDataType, domain=None, range=Optional[str])

slots.gpsAntennaHeight = Slot(uri=NEON.gpsAntennaHeight, name="gpsAntennaHeight", curie=NEON.curie('gpsAntennaHeight'),
                      model_uri=NEON.gpsAntennaHeight, domain=None, range=Optional[float])

slots.gpsUsed = Slot(uri=NEON.gpsUsed, name="gpsUsed", curie=NEON.curie('gpsUsed'),
                      model_uri=NEON.gpsUsed, domain=None, range=Optional[str])

slots.photoID = Slot(uri=NEON.photoID, name="photoID", curie=NEON.curie('photoID'),
                      model_uri=NEON.photoID, domain=None, range=Optional[str])

slots.plantsPresent = Slot(uri=NEON.plantsPresent, name="plantsPresent", curie=NEON.curie('plantsPresent'),
                      model_uri=NEON.plantsPresent, domain=None, range=Optional[str])

slots.pointCollectionDate = Slot(uri=NEON.pointCollectionDate, name="pointCollectionDate", curie=NEON.curie('pointCollectionDate'),
                      model_uri=NEON.pointCollectionDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.sonarRecordingNumber = Slot(uri=NEON.sonarRecordingNumber, name="sonarRecordingNumber", curie=NEON.curie('sonarRecordingNumber'),
                      model_uri=NEON.sonarRecordingNumber, domain=None, range=Optional[str])

slots.sonarRecordingStartTime = Slot(uri=NEON.sonarRecordingStartTime, name="sonarRecordingStartTime", curie=NEON.curie('sonarRecordingStartTime'),
                      model_uri=NEON.sonarRecordingStartTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.sonarRecordingStopTime = Slot(uri=NEON.sonarRecordingStopTime, name="sonarRecordingStopTime", curie=NEON.curie('sonarRecordingStopTime'),
                      model_uri=NEON.sonarRecordingStopTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.uniqueID = Slot(uri=NEON.uniqueID, name="uniqueID", curie=NEON.curie('uniqueID'),
                      model_uri=NEON.uniqueID, domain=None, range=Optional[str])

slots.waypoint = Slot(uri=NEON.waypoint, name="waypoint", curie=NEON.curie('waypoint'),
                      model_uri=NEON.waypoint, domain=None, range=Optional[str])

slots.waypointDescription = Slot(uri=NEON.waypointDescription, name="waypointDescription", curie=NEON.curie('waypointDescription'),
                      model_uri=NEON.waypointDescription, domain=None, range=Optional[str])

slots.lipid2OH10To0Concentration = Slot(uri=NEON.lipid2OH10To0Concentration, name="lipid2OH10To0Concentration", curie=NEON.curie('lipid2OH10To0Concentration'),
                      model_uri=NEON.lipid2OH10To0Concentration, domain=None, range=Optional[float])

slots.lipid2OH12To0Concentration = Slot(uri=NEON.lipid2OH12To0Concentration, name="lipid2OH12To0Concentration", curie=NEON.curie('lipid2OH12To0Concentration'),
                      model_uri=NEON.lipid2OH12To0Concentration, domain=None, range=Optional[float])

slots.lipid2OH14To0Concentration = Slot(uri=NEON.lipid2OH14To0Concentration, name="lipid2OH14To0Concentration", curie=NEON.curie('lipid2OH14To0Concentration'),
                      model_uri=NEON.lipid2OH14To0Concentration, domain=None, range=Optional[float])

slots.lipid2OH16To0Concentration = Slot(uri=NEON.lipid2OH16To0Concentration, name="lipid2OH16To0Concentration", curie=NEON.curie('lipid2OH16To0Concentration'),
                      model_uri=NEON.lipid2OH16To0Concentration, domain=None, range=Optional[float])

slots.lipid3OH12To0Concentration = Slot(uri=NEON.lipid3OH12To0Concentration, name="lipid3OH12To0Concentration", curie=NEON.curie('lipid3OH12To0Concentration'),
                      model_uri=NEON.lipid3OH12To0Concentration, domain=None, range=Optional[float])

slots.lipid3OH14To0Concentration = Slot(uri=NEON.lipid3OH14To0Concentration, name="lipid3OH14To0Concentration", curie=NEON.curie('lipid3OH14To0Concentration'),
                      model_uri=NEON.lipid3OH14To0Concentration, domain=None, range=Optional[float])

slots.aC15To0Concentration = Slot(uri=NEON.aC15To0Concentration, name="aC15To0Concentration", curie=NEON.curie('aC15To0Concentration'),
                      model_uri=NEON.aC15To0Concentration, domain=None, range=Optional[float])

slots.analysisStandardID = Slot(uri=NEON.analysisStandardID, name="analysisStandardID", curie=NEON.curie('analysisStandardID'),
                      model_uri=NEON.analysisStandardID, domain=None, range=Optional[str])

slots.c10To0Concentration = Slot(uri=NEON.c10To0Concentration, name="c10To0Concentration", curie=NEON.curie('c10To0Concentration'),
                      model_uri=NEON.c10To0Concentration, domain=None, range=Optional[float])

slots.c11To0Concentration = Slot(uri=NEON.c11To0Concentration, name="c11To0Concentration", curie=NEON.curie('c11To0Concentration'),
                      model_uri=NEON.c11To0Concentration, domain=None, range=Optional[float])

slots.c12To0Concentration = Slot(uri=NEON.c12To0Concentration, name="c12To0Concentration", curie=NEON.curie('c12To0Concentration'),
                      model_uri=NEON.c12To0Concentration, domain=None, range=Optional[float])

slots.c13To0Concentration = Slot(uri=NEON.c13To0Concentration, name="c13To0Concentration", curie=NEON.curie('c13To0Concentration'),
                      model_uri=NEON.c13To0Concentration, domain=None, range=Optional[float])

slots.c14To0Concentration = Slot(uri=NEON.c14To0Concentration, name="c14To0Concentration", curie=NEON.curie('c14To0Concentration'),
                      model_uri=NEON.c14To0Concentration, domain=None, range=Optional[float])

slots.c14To1Concentration = Slot(uri=NEON.c14To1Concentration, name="c14To1Concentration", curie=NEON.curie('c14To1Concentration'),
                      model_uri=NEON.c14To1Concentration, domain=None, range=Optional[float])

slots.c15To0Concentration = Slot(uri=NEON.c15To0Concentration, name="c15To0Concentration", curie=NEON.curie('c15To0Concentration'),
                      model_uri=NEON.c15To0Concentration, domain=None, range=Optional[float])

slots.c15To1Concentration = Slot(uri=NEON.c15To1Concentration, name="c15To1Concentration", curie=NEON.curie('c15To1Concentration'),
                      model_uri=NEON.c15To1Concentration, domain=None, range=Optional[float])

slots.c16To0Concentration = Slot(uri=NEON.c16To0Concentration, name="c16To0Concentration", curie=NEON.curie('c16To0Concentration'),
                      model_uri=NEON.c16To0Concentration, domain=None, range=Optional[float])

slots.c17To0Concentration = Slot(uri=NEON.c17To0Concentration, name="c17To0Concentration", curie=NEON.curie('c17To0Concentration'),
                      model_uri=NEON.c17To0Concentration, domain=None, range=Optional[float])

slots.c17To1Concentration = Slot(uri=NEON.c17To1Concentration, name="c17To1Concentration", curie=NEON.curie('c17To1Concentration'),
                      model_uri=NEON.c17To1Concentration, domain=None, range=Optional[float])

slots.c18To0Concentration = Slot(uri=NEON.c18To0Concentration, name="c18To0Concentration", curie=NEON.curie('c18To0Concentration'),
                      model_uri=NEON.c18To0Concentration, domain=None, range=Optional[float])

slots.c18To1n11Concentration = Slot(uri=NEON.c18To1n11Concentration, name="c18To1n11Concentration", curie=NEON.curie('c18To1n11Concentration'),
                      model_uri=NEON.c18To1n11Concentration, domain=None, range=Optional[float])

slots.c18To3n3Concentration = Slot(uri=NEON.c18To3n3Concentration, name="c18To3n3Concentration", curie=NEON.curie('c18To3n3Concentration'),
                      model_uri=NEON.c18To3n3Concentration, domain=None, range=Optional[float])

slots.c18To3n6Concentration = Slot(uri=NEON.c18To3n6Concentration, name="c18To3n6Concentration", curie=NEON.curie('c18To3n6Concentration'),
                      model_uri=NEON.c18To3n6Concentration, domain=None, range=Optional[float])

slots.c19To0Concentration = Slot(uri=NEON.c19To0Concentration, name="c19To0Concentration", curie=NEON.curie('c19To0Concentration'),
                      model_uri=NEON.c19To0Concentration, domain=None, range=Optional[float])

slots.c20To0Concentration = Slot(uri=NEON.c20To0Concentration, name="c20To0Concentration", curie=NEON.curie('c20To0Concentration'),
                      model_uri=NEON.c20To0Concentration, domain=None, range=Optional[float])

slots.c20To1Concentration = Slot(uri=NEON.c20To1Concentration, name="c20To1Concentration", curie=NEON.curie('c20To1Concentration'),
                      model_uri=NEON.c20To1Concentration, domain=None, range=Optional[float])

slots.c20To2Concentration = Slot(uri=NEON.c20To2Concentration, name="c20To2Concentration", curie=NEON.curie('c20To2Concentration'),
                      model_uri=NEON.c20To2Concentration, domain=None, range=Optional[float])

slots.c20To3n3Concentration = Slot(uri=NEON.c20To3n3Concentration, name="c20To3n3Concentration", curie=NEON.curie('c20To3n3Concentration'),
                      model_uri=NEON.c20To3n3Concentration, domain=None, range=Optional[float])

slots.c20To3n6Concentration = Slot(uri=NEON.c20To3n6Concentration, name="c20To3n6Concentration", curie=NEON.curie('c20To3n6Concentration'),
                      model_uri=NEON.c20To3n6Concentration, domain=None, range=Optional[float])

slots.c20To4n6Concentration = Slot(uri=NEON.c20To4n6Concentration, name="c20To4n6Concentration", curie=NEON.curie('c20To4n6Concentration'),
                      model_uri=NEON.c20To4n6Concentration, domain=None, range=Optional[float])

slots.c20To5n3Concentration = Slot(uri=NEON.c20To5n3Concentration, name="c20To5n3Concentration", curie=NEON.curie('c20To5n3Concentration'),
                      model_uri=NEON.c20To5n3Concentration, domain=None, range=Optional[float])

slots.c21To0Concentration = Slot(uri=NEON.c21To0Concentration, name="c21To0Concentration", curie=NEON.curie('c21To0Concentration'),
                      model_uri=NEON.c21To0Concentration, domain=None, range=Optional[float])

slots.c22To0Concentration = Slot(uri=NEON.c22To0Concentration, name="c22To0Concentration", curie=NEON.curie('c22To0Concentration'),
                      model_uri=NEON.c22To0Concentration, domain=None, range=Optional[float])

slots.c22To1n9Concentration = Slot(uri=NEON.c22To1n9Concentration, name="c22To1n9Concentration", curie=NEON.curie('c22To1n9Concentration'),
                      model_uri=NEON.c22To1n9Concentration, domain=None, range=Optional[float])

slots.c22To2Concentration = Slot(uri=NEON.c22To2Concentration, name="c22To2Concentration", curie=NEON.curie('c22To2Concentration'),
                      model_uri=NEON.c22To2Concentration, domain=None, range=Optional[float])

slots.c23To0Concentration = Slot(uri=NEON.c23To0Concentration, name="c23To0Concentration", curie=NEON.curie('c23To0Concentration'),
                      model_uri=NEON.c23To0Concentration, domain=None, range=Optional[float])

slots.c24To0Concentration = Slot(uri=NEON.c24To0Concentration, name="c24To0Concentration", curie=NEON.curie('c24To0Concentration'),
                      model_uri=NEON.c24To0Concentration, domain=None, range=Optional[float])

slots.c24To1Concentration = Slot(uri=NEON.c24To1Concentration, name="c24To1Concentration", curie=NEON.curie('c24To1Concentration'),
                      model_uri=NEON.c24To1Concentration, domain=None, range=Optional[float])

slots.c8To0Concentration = Slot(uri=NEON.c8To0Concentration, name="c8To0Concentration", curie=NEON.curie('c8To0Concentration'),
                      model_uri=NEON.c8To0Concentration, domain=None, range=Optional[float])

slots.cis16To1n9Concentration = Slot(uri=NEON.cis16To1n9Concentration, name="cis16To1n9Concentration", curie=NEON.curie('cis16To1n9Concentration'),
                      model_uri=NEON.cis16To1n9Concentration, domain=None, range=Optional[float])

slots.cis18To1n9Concentration = Slot(uri=NEON.cis18To1n9Concentration, name="cis18To1n9Concentration", curie=NEON.curie('cis18To1n9Concentration'),
                      model_uri=NEON.cis18To1n9Concentration, domain=None, range=Optional[float])

slots.cis18To2n912Concentration = Slot(uri=NEON.cis18To2n912Concentration, name="cis18To2n912Concentration", curie=NEON.curie('cis18To2n912Concentration'),
                      model_uri=NEON.cis18To2n912Concentration, domain=None, range=Optional[float])

slots.cyclo17To0Concentration = Slot(uri=NEON.cyclo17To0Concentration, name="cyclo17To0Concentration", curie=NEON.curie('cyclo17To0Concentration'),
                      model_uri=NEON.cyclo17To0Concentration, domain=None, range=Optional[float])

slots.cyclo19To0Concentration = Slot(uri=NEON.cyclo19To0Concentration, name="cyclo19To0Concentration", curie=NEON.curie('cyclo19To0Concentration'),
                      model_uri=NEON.cyclo19To0Concentration, domain=None, range=Optional[float])

slots.extractionEfficiency = Slot(uri=NEON.extractionEfficiency, name="extractionEfficiency", curie=NEON.curie('extractionEfficiency'),
                      model_uri=NEON.extractionEfficiency, domain=None, range=Optional[float])

slots.freezeDryMass = Slot(uri=NEON.freezeDryMass, name="freezeDryMass", curie=NEON.curie('freezeDryMass'),
                      model_uri=NEON.freezeDryMass, domain=None, range=Optional[float])

slots.i15To0Concentration = Slot(uri=NEON.i15To0Concentration, name="i15To0Concentration", curie=NEON.curie('i15To0Concentration'),
                      model_uri=NEON.i15To0Concentration, domain=None, range=Optional[float])

slots.i16To0Concentration = Slot(uri=NEON.i16To0Concentration, name="i16To0Concentration", curie=NEON.curie('i16To0Concentration'),
                      model_uri=NEON.i16To0Concentration, domain=None, range=Optional[float])

slots.i17To0Concentration = Slot(uri=NEON.i17To0Concentration, name="i17To0Concentration", curie=NEON.curie('i17To0Concentration'),
                      model_uri=NEON.i17To0Concentration, domain=None, range=Optional[float])

slots.lipidID = Slot(uri=NEON.lipidID, name="lipidID", curie=NEON.curie('lipidID'),
                      model_uri=NEON.lipidID, domain=None, range=Optional[str])

slots.lotNumber = Slot(uri=NEON.lotNumber, name="lotNumber", curie=NEON.curie('lotNumber'),
                      model_uri=NEON.lotNumber, domain=None, range=Optional[str])

slots.trans18To1n9Concentration = Slot(uri=NEON.trans18To1n9Concentration, name="trans18To1n9Concentration", curie=NEON.curie('trans18To1n9Concentration'),
                      model_uri=NEON.trans18To1n9Concentration, domain=None, range=Optional[float])

slots.trans18To2n912Concentration = Slot(uri=NEON.trans18To2n912Concentration, name="trans18To2n912Concentration", curie=NEON.curie('trans18To2n912Concentration'),
                      model_uri=NEON.trans18To2n912Concentration, domain=None, range=Optional[float])

slots.injNum = Slot(uri=NEON.injNum, name="injNum", curie=NEON.curie('injNum'),
                      model_uri=NEON.injNum, domain=None, range=Optional[str])

slots.typeH2o = Slot(uri=NEON.typeH2o, name="typeH2o", curie=NEON.curie('typeH2o'),
                      model_uri=NEON.typeH2o, domain=None, range=Optional[str])

slots.snowPresent = Slot(uri=NEON.snowPresent, name="snowPresent", curie=NEON.curie('snowPresent'),
                      model_uri=NEON.snowPresent, domain=None, range=Optional[str])

slots.pumpPlacementDate = Slot(uri=NEON.pumpPlacementDate, name="pumpPlacementDate", curie=NEON.curie('pumpPlacementDate'),
                      model_uri=NEON.pumpPlacementDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.aDiskHeight = Slot(uri=NEON.aDiskHeight, name="aDiskHeight", curie=NEON.curie('aDiskHeight'),
                      model_uri=NEON.aDiskHeight, domain=None, range=Optional[float])

slots.bagNumber = Slot(uri=NEON.bagNumber, name="bagNumber", curie=NEON.curie('bagNumber'),
                      model_uri=NEON.bagNumber, domain=None, range=Optional[str])

slots.bDiskHeight = Slot(uri=NEON.bDiskHeight, name="bDiskHeight", curie=NEON.curie('bDiskHeight'),
                      model_uri=NEON.bDiskHeight, domain=None, range=Optional[float])

slots.bulkDensDisk = Slot(uri=NEON.bulkDensDisk, name="bulkDensDisk", curie=NEON.curie('bulkDensDisk'),
                      model_uri=NEON.bulkDensDisk, domain=None, range=Optional[float])

slots.diameter = Slot(uri=NEON.diameter, name="diameter", curie=NEON.curie('diameter'),
                      model_uri=NEON.diameter, domain=None, range=Optional[float])

slots.diskDryMass = Slot(uri=NEON.diskDryMass, name="diskDryMass", curie=NEON.curie('diskDryMass'),
                      model_uri=NEON.diskDryMass, domain=None, range=Optional[float])

slots.diskFreshMass = Slot(uri=NEON.diskFreshMass, name="diskFreshMass", curie=NEON.curie('diskFreshMass'),
                      model_uri=NEON.diskFreshMass, domain=None, range=Optional[float])

slots.diskID = Slot(uri=NEON.diskID, name="diskID", curie=NEON.curie('diskID'),
                      model_uri=NEON.diskID, domain=None, range=Optional[str])

slots.logAzimuth = Slot(uri=NEON.logAzimuth, name="logAzimuth", curie=NEON.curie('logAzimuth'),
                      model_uri=NEON.logAzimuth, domain=None, range=Optional[str])

slots.mappingMethod = Slot(uri=NEON.mappingMethod, name="mappingMethod", curie=NEON.curie('mappingMethod'),
                      model_uri=NEON.mappingMethod, domain=None, range=Optional[str])

slots.maxDiskHeight = Slot(uri=NEON.maxDiskHeight, name="maxDiskHeight", curie=NEON.curie('maxDiskHeight'),
                      model_uri=NEON.maxDiskHeight, domain=None, range=Optional[float])

slots.minDiskHeight = Slot(uri=NEON.minDiskHeight, name="minDiskHeight", curie=NEON.curie('minDiskHeight'),
                      model_uri=NEON.minDiskHeight, domain=None, range=Optional[float])

slots.ninetyDiameter = Slot(uri=NEON.ninetyDiameter, name="ninetyDiameter", curie=NEON.curie('ninetyDiameter'),
                      model_uri=NEON.ninetyDiameter, domain=None, range=Optional[float])

slots.qaFreshMass = Slot(uri=NEON.qaFreshMass, name="qaFreshMass", curie=NEON.curie('qaFreshMass'),
                      model_uri=NEON.qaFreshMass, domain=None, range=Optional[str])

slots.sampleEasting = Slot(uri=NEON.sampleEasting, name="sampleEasting", curie=NEON.curie('sampleEasting'),
                      model_uri=NEON.sampleEasting, domain=None, range=Optional[float])

slots.sampleFreshMass = Slot(uri=NEON.sampleFreshMass, name="sampleFreshMass", curie=NEON.curie('sampleFreshMass'),
                      model_uri=NEON.sampleFreshMass, domain=None, range=Optional[float])

slots.sampleNorthing = Slot(uri=NEON.sampleNorthing, name="sampleNorthing", curie=NEON.curie('sampleNorthing'),
                      model_uri=NEON.sampleNorthing, domain=None, range=Optional[float])

slots.isotopeAccuracyQF = Slot(uri=NEON.isotopeAccuracyQF, name="isotopeAccuracyQF", curie=NEON.curie('isotopeAccuracyQF'),
                      model_uri=NEON.isotopeAccuracyQF, domain=None, range=Optional[str])

slots.percentAccuracyQF = Slot(uri=NEON.percentAccuracyQF, name="percentAccuracyQF", curie=NEON.curie('percentAccuracyQF'),
                      model_uri=NEON.percentAccuracyQF, domain=None, range=Optional[str])

slots.chlorophyllSuspectCalQF = Slot(uri=NEON.chlorophyllSuspectCalQF, name="chlorophyllSuspectCalQF", curie=NEON.curie('chlorophyllSuspectCalQF'),
                      model_uri=NEON.chlorophyllSuspectCalQF, domain=None, range=Optional[int])

slots.dissolvedOxygenSuspectCalQF = Slot(uri=NEON.dissolvedOxygenSuspectCalQF, name="dissolvedOxygenSuspectCalQF", curie=NEON.curie('dissolvedOxygenSuspectCalQF'),
                      model_uri=NEON.dissolvedOxygenSuspectCalQF, domain=None, range=Optional[int])

slots.dissOxygenSatSuspectCalQF = Slot(uri=NEON.dissOxygenSatSuspectCalQF, name="dissOxygenSatSuspectCalQF", curie=NEON.curie('dissOxygenSatSuspectCalQF'),
                      model_uri=NEON.dissOxygenSatSuspectCalQF, domain=None, range=Optional[int])

slots.fDOMSuspectCalQF = Slot(uri=NEON.fDOMSuspectCalQF, name="fDOMSuspectCalQF", curie=NEON.curie('fDOMSuspectCalQF'),
                      model_uri=NEON.fDOMSuspectCalQF, domain=None, range=Optional[int])

slots.pHSuspectCalQF = Slot(uri=NEON.pHSuspectCalQF, name="pHSuspectCalQF", curie=NEON.curie('pHSuspectCalQF'),
                      model_uri=NEON.pHSuspectCalQF, domain=None, range=Optional[int])

slots.sensorDepthSuspectCalQF = Slot(uri=NEON.sensorDepthSuspectCalQF, name="sensorDepthSuspectCalQF", curie=NEON.curie('sensorDepthSuspectCalQF'),
                      model_uri=NEON.sensorDepthSuspectCalQF, domain=None, range=Optional[int])

slots.specificCondSuspectCalQF = Slot(uri=NEON.specificCondSuspectCalQF, name="specificCondSuspectCalQF", curie=NEON.curie('specificCondSuspectCalQF'),
                      model_uri=NEON.specificCondSuspectCalQF, domain=None, range=Optional[int])

slots.turbiditySuspectCalQF = Slot(uri=NEON.turbiditySuspectCalQF, name="turbiditySuspectCalQF", curie=NEON.curie('turbiditySuspectCalQF'),
                      model_uri=NEON.turbiditySuspectCalQF, domain=None, range=Optional[int])

slots.wssDewTempNumPts = Slot(uri=NEON.wssDewTempNumPts, name="wssDewTempNumPts", curie=NEON.curie('wssDewTempNumPts'),
                      model_uri=NEON.wssDewTempNumPts, domain=None, range=Optional[float])

slots.wssRHNumPts = Slot(uri=NEON.wssRHNumPts, name="wssRHNumPts", curie=NEON.curie('wssRHNumPts'),
                      model_uri=NEON.wssRHNumPts, domain=None, range=Optional[float])

slots.wssShortRadNumPts = Slot(uri=NEON.wssShortRadNumPts, name="wssShortRadNumPts", curie=NEON.curie('wssShortRadNumPts'),
                      model_uri=NEON.wssShortRadNumPts, domain=None, range=Optional[float])

slots.wssStaPresNumPts = Slot(uri=NEON.wssStaPresNumPts, name="wssStaPresNumPts", curie=NEON.curie('wssStaPresNumPts'),
                      model_uri=NEON.wssStaPresNumPts, domain=None, range=Optional[float])

slots.wssTempTripleNumPts = Slot(uri=NEON.wssTempTripleNumPts, name="wssTempTripleNumPts", curie=NEON.curie('wssTempTripleNumPts'),
                      model_uri=NEON.wssTempTripleNumPts, domain=None, range=Optional[float])

slots.wssWindSpeedNumPts = Slot(uri=NEON.wssWindSpeedNumPts, name="wssWindSpeedNumPts", curie=NEON.curie('wssWindSpeedNumPts'),
                      model_uri=NEON.wssWindSpeedNumPts, domain=None, range=Optional[float])

slots.sondeValve = Slot(uri=NEON.sondeValve, name="sondeValve", curie=NEON.curie('sondeValve'),
                      model_uri=NEON.sondeValve, domain=None, range=Optional[int])

slots.assetID = Slot(uri=NEON.assetID, name="assetID", curie=NEON.curie('assetID'),
                      model_uri=NEON.assetID, domain=None, range=Optional[str])

slots.calCertificateFile = Slot(uri=NEON.calCertificateFile, name="calCertificateFile", curie=NEON.curie('calCertificateFile'),
                      model_uri=NEON.calCertificateFile, domain=None, range=Optional[str])

slots.calCertificateNum = Slot(uri=NEON.calCertificateNum, name="calCertificateNum", curie=NEON.curie('calCertificateNum'),
                      model_uri=NEON.calCertificateNum, domain=None, range=Optional[str])

slots.calculatedStage = Slot(uri=NEON.calculatedStage, name="calculatedStage", curie=NEON.curie('calculatedStage'),
                      model_uri=NEON.calculatedStage, domain=None, range=Optional[float])

slots.calcWaterColumnHeight = Slot(uri=NEON.calcWaterColumnHeight, name="calcWaterColumnHeight", curie=NEON.curie('calcWaterColumnHeight'),
                      model_uri=NEON.calcWaterColumnHeight, domain=None, range=Optional[float])

slots.calibratedPressMean = Slot(uri=NEON.calibratedPressMean, name="calibratedPressMean", curie=NEON.curie('calibratedPressMean'),
                      model_uri=NEON.calibratedPressMean, domain=None, range=Optional[float])

slots.calibratedPressObsCount = Slot(uri=NEON.calibratedPressObsCount, name="calibratedPressObsCount", curie=NEON.curie('calibratedPressObsCount'),
                      model_uri=NEON.calibratedPressObsCount, domain=None, range=Optional[float])

slots.calibratedPressStdDev = Slot(uri=NEON.calibratedPressStdDev, name="calibratedPressStdDev", curie=NEON.curie('calibratedPressStdDev'),
                      model_uri=NEON.calibratedPressStdDev, domain=None, range=Optional[float])

slots.calibratedPressure = Slot(uri=NEON.calibratedPressure, name="calibratedPressure", curie=NEON.curie('calibratedPressure'),
                      model_uri=NEON.calibratedPressure, domain=None, range=Optional[float])

slots.curveID = Slot(uri=NEON.curveID, name="curveID", curie=NEON.curie('curveID'),
                      model_uri=NEON.curveID, domain=None, range=Optional[str])

slots.dischargeAlphaQF = Slot(uri=NEON.dischargeAlphaQF, name="dischargeAlphaQF", curie=NEON.curie('dischargeAlphaQF'),
                      model_uri=NEON.dischargeAlphaQF, domain=None, range=Optional[int])

slots.dischargeBetaQF = Slot(uri=NEON.dischargeBetaQF, name="dischargeBetaQF", curie=NEON.curie('dischargeBetaQF'),
                      model_uri=NEON.dischargeBetaQF, domain=None, range=Optional[int])

slots.dischargeConsistQF = Slot(uri=NEON.dischargeConsistQF, name="dischargeConsistQF", curie=NEON.curie('dischargeConsistQF'),
                      model_uri=NEON.dischargeConsistQF, domain=None, range=Optional[int])

slots.dischargeFinalQF = Slot(uri=NEON.dischargeFinalQF, name="dischargeFinalQF", curie=NEON.curie('dischargeFinalQF'),
                      model_uri=NEON.dischargeFinalQF, domain=None, range=Optional[int])

slots.dischargeFinalQFSciRvw = Slot(uri=NEON.dischargeFinalQFSciRvw, name="dischargeFinalQFSciRvw", curie=NEON.curie('dischargeFinalQFSciRvw'),
                      model_uri=NEON.dischargeFinalQFSciRvw, domain=None, range=Optional[str])

slots.dischargeGapQF = Slot(uri=NEON.dischargeGapQF, name="dischargeGapQF", curie=NEON.curie('dischargeGapQF'),
                      model_uri=NEON.dischargeGapQF, domain=None, range=Optional[int])

slots.dischargeNullQF = Slot(uri=NEON.dischargeNullQF, name="dischargeNullQF", curie=NEON.curie('dischargeNullQF'),
                      model_uri=NEON.dischargeNullQF, domain=None, range=Optional[int])

slots.dischargePersistQF = Slot(uri=NEON.dischargePersistQF, name="dischargePersistQF", curie=NEON.curie('dischargePersistQF'),
                      model_uri=NEON.dischargePersistQF, domain=None, range=Optional[int])

slots.dischargeRangeQF = Slot(uri=NEON.dischargeRangeQF, name="dischargeRangeQF", curie=NEON.curie('dischargeRangeQF'),
                      model_uri=NEON.dischargeRangeQF, domain=None, range=Optional[int])

slots.dischargeSpikeQF = Slot(uri=NEON.dischargeSpikeQF, name="dischargeSpikeQF", curie=NEON.curie('dischargeSpikeQF'),
                      model_uri=NEON.dischargeSpikeQF, domain=None, range=Optional[int])

slots.dischargeStepQF = Slot(uri=NEON.dischargeStepQF, name="dischargeStepQF", curie=NEON.curie('dischargeStepQF'),
                      model_uri=NEON.dischargeStepQF, domain=None, range=Optional[int])

slots.dischargeSuspectCalQF = Slot(uri=NEON.dischargeSuspectCalQF, name="dischargeSuspectCalQF", curie=NEON.curie('dischargeSuspectCalQF'),
                      model_uri=NEON.dischargeSuspectCalQF, domain=None, range=Optional[int])

slots.dischargeValidCalQF = Slot(uri=NEON.dischargeValidCalQF, name="dischargeValidCalQF", curie=NEON.curie('dischargeValidCalQF'),
                      model_uri=NEON.dischargeValidCalQF, domain=None, range=Optional[int])

slots.equivalentStage = Slot(uri=NEON.equivalentStage, name="equivalentStage", curie=NEON.curie('equivalentStage'),
                      model_uri=NEON.equivalentStage, domain=None, range=Optional[float])

slots.gaugeHeight = Slot(uri=NEON.gaugeHeight, name="gaugeHeight", curie=NEON.curie('gaugeHeight'),
                      model_uri=NEON.gaugeHeight, domain=None, range=Optional[float])

slots.maxpostDischarge = Slot(uri=NEON.maxpostDischarge, name="maxpostDischarge", curie=NEON.curie('maxpostDischarge'),
                      model_uri=NEON.maxpostDischarge, domain=None, range=Optional[float])

slots.nonSystematicUnc = Slot(uri=NEON.nonSystematicUnc, name="nonSystematicUnc", curie=NEON.curie('nonSystematicUnc'),
                      model_uri=NEON.nonSystematicUnc, domain=None, range=Optional[float])

slots.sensorStaffGaugeOffset = Slot(uri=NEON.sensorStaffGaugeOffset, name="sensorStaffGaugeOffset", curie=NEON.curie('sensorStaffGaugeOffset'),
                      model_uri=NEON.sensorStaffGaugeOffset, domain=None, range=Optional[float])

slots.stageUnc = Slot(uri=NEON.stageUnc, name="stageUnc", curie=NEON.curie('stageUnc'),
                      model_uri=NEON.stageUnc, domain=None, range=Optional[float])

slots.systematicUnc = Slot(uri=NEON.systematicUnc, name="systematicUnc", curie=NEON.curie('systematicUnc'),
                      model_uri=NEON.systematicUnc, domain=None, range=Optional[float])

slots.withParaUncQlower1Std = Slot(uri=NEON.withParaUncQlower1Std, name="withParaUncQlower1Std", curie=NEON.curie('withParaUncQlower1Std'),
                      model_uri=NEON.withParaUncQlower1Std, domain=None, range=Optional[float])

slots.withParaUncQlower2Std = Slot(uri=NEON.withParaUncQlower2Std, name="withParaUncQlower2Std", curie=NEON.curie('withParaUncQlower2Std'),
                      model_uri=NEON.withParaUncQlower2Std, domain=None, range=Optional[float])

slots.withParaUncQMean = Slot(uri=NEON.withParaUncQMean, name="withParaUncQMean", curie=NEON.curie('withParaUncQMean'),
                      model_uri=NEON.withParaUncQMean, domain=None, range=Optional[float])

slots.withParaUncQMedian = Slot(uri=NEON.withParaUncQMedian, name="withParaUncQMedian", curie=NEON.curie('withParaUncQMedian'),
                      model_uri=NEON.withParaUncQMedian, domain=None, range=Optional[float])

slots.withParaUncQStdDev = Slot(uri=NEON.withParaUncQStdDev, name="withParaUncQStdDev", curie=NEON.curie('withParaUncQStdDev'),
                      model_uri=NEON.withParaUncQStdDev, domain=None, range=Optional[float])

slots.withParaUncQupper1Std = Slot(uri=NEON.withParaUncQupper1Std, name="withParaUncQupper1Std", curie=NEON.curie('withParaUncQupper1Std'),
                      model_uri=NEON.withParaUncQupper1Std, domain=None, range=Optional[float])

slots.withParaUncQupper2Std = Slot(uri=NEON.withParaUncQupper2Std, name="withParaUncQupper2Std", curie=NEON.curie('withParaUncQupper2Std'),
                      model_uri=NEON.withParaUncQupper2Std, domain=None, range=Optional[float])

slots.withRemnUncQlower1Std = Slot(uri=NEON.withRemnUncQlower1Std, name="withRemnUncQlower1Std", curie=NEON.curie('withRemnUncQlower1Std'),
                      model_uri=NEON.withRemnUncQlower1Std, domain=None, range=Optional[float])

slots.withRemnUncQlower2Std = Slot(uri=NEON.withRemnUncQlower2Std, name="withRemnUncQlower2Std", curie=NEON.curie('withRemnUncQlower2Std'),
                      model_uri=NEON.withRemnUncQlower2Std, domain=None, range=Optional[float])

slots.withRemnUncQMean = Slot(uri=NEON.withRemnUncQMean, name="withRemnUncQMean", curie=NEON.curie('withRemnUncQMean'),
                      model_uri=NEON.withRemnUncQMean, domain=None, range=Optional[float])

slots.withRemnUncQMedian = Slot(uri=NEON.withRemnUncQMedian, name="withRemnUncQMedian", curie=NEON.curie('withRemnUncQMedian'),
                      model_uri=NEON.withRemnUncQMedian, domain=None, range=Optional[float])

slots.withRemnUncQStdDev = Slot(uri=NEON.withRemnUncQStdDev, name="withRemnUncQStdDev", curie=NEON.curie('withRemnUncQStdDev'),
                      model_uri=NEON.withRemnUncQStdDev, domain=None, range=Optional[float])

slots.withRemnUncQupper1Std = Slot(uri=NEON.withRemnUncQupper1Std, name="withRemnUncQupper1Std", curie=NEON.curie('withRemnUncQupper1Std'),
                      model_uri=NEON.withRemnUncQupper1Std, domain=None, range=Optional[float])

slots.withRemnUncQUpper2Std = Slot(uri=NEON.withRemnUncQUpper2Std, name="withRemnUncQUpper2Std", curie=NEON.curie('withRemnUncQUpper2Std'),
                      model_uri=NEON.withRemnUncQUpper2Std, domain=None, range=Optional[float])

slots.gasSampleCond = Slot(uri=NEON.gasSampleCond, name="gasSampleCond", curie=NEON.curie('gasSampleCond'),
                      model_uri=NEON.gasSampleCond, domain=None, range=Optional[str])

slots.hoboSampleCond = Slot(uri=NEON.hoboSampleCond, name="hoboSampleCond", curie=NEON.curie('hoboSampleCond'),
                      model_uri=NEON.hoboSampleCond, domain=None, range=Optional[str])

slots.injectateSampleCond = Slot(uri=NEON.injectateSampleCond, name="injectateSampleCond", curie=NEON.curie('injectateSampleCond'),
                      model_uri=NEON.injectateSampleCond, domain=None, range=Optional[str])

slots.saltBackgroundSampleCond = Slot(uri=NEON.saltBackgroundSampleCond, name="saltBackgroundSampleCond", curie=NEON.curie('saltBackgroundSampleCond'),
                      model_uri=NEON.saltBackgroundSampleCond, domain=None, range=Optional[str])

slots.saltTracerSampleCond = Slot(uri=NEON.saltTracerSampleCond, name="saltTracerSampleCond", curie=NEON.curie('saltTracerSampleCond'),
                      model_uri=NEON.saltTracerSampleCond, domain=None, range=Optional[str])

slots.syringeCond = Slot(uri=NEON.syringeCond, name="syringeCond", curie=NEON.curie('syringeCond'),
                      model_uri=NEON.syringeCond, domain=None, range=Optional[str])

slots.alignmentMethod = Slot(uri=NEON.alignmentMethod, name="alignmentMethod", curie=NEON.curie('alignmentMethod'),
                      model_uri=NEON.alignmentMethod, domain=None, range=Optional[str])

slots.analysisCodeFileName = Slot(uri=NEON.analysisCodeFileName, name="analysisCodeFileName", curie=NEON.curie('analysisCodeFileName'),
                      model_uri=NEON.analysisCodeFileName, domain=None, range=Optional[str])

slots.analysisProgram = Slot(uri=NEON.analysisProgram, name="analysisProgram", curie=NEON.curie('analysisProgram'),
                      model_uri=NEON.analysisProgram, domain=None, range=Optional[str])

slots.analysisProgramVersion = Slot(uri=NEON.analysisProgramVersion, name="analysisProgramVersion", curie=NEON.curie('analysisProgramVersion'),
                      model_uri=NEON.analysisProgramVersion, domain=None, range=Optional[str])

slots.chimeraMethod = Slot(uri=NEON.chimeraMethod, name="chimeraMethod", curie=NEON.curie('chimeraMethod'),
                      model_uri=NEON.chimeraMethod, domain=None, range=Optional[str])

slots.clusterMethod = Slot(uri=NEON.clusterMethod, name="clusterMethod", curie=NEON.curie('clusterMethod'),
                      model_uri=NEON.clusterMethod, domain=None, range=Optional[str])

slots.clusterSimilarity = Slot(uri=NEON.clusterSimilarity, name="clusterSimilarity", curie=NEON.curie('clusterSimilarity'),
                      model_uri=NEON.clusterSimilarity, domain=None, range=Optional[float])

slots.completeTaxonomy = Slot(uri=NEON.completeTaxonomy, name="completeTaxonomy", curie=NEON.curie('completeTaxonomy'),
                      model_uri=NEON.completeTaxonomy, domain=None, range=Optional[str])

slots.dnaSampleCodeDataFrame = Slot(uri=NEON.dnaSampleCodeDataFrame, name="dnaSampleCodeDataFrame", curie=NEON.curie('dnaSampleCodeDataFrame'),
                      model_uri=NEON.dnaSampleCodeDataFrame, domain=None, range=Optional[str])

slots.dnaSampleIDDataFrame = Slot(uri=NEON.dnaSampleIDDataFrame, name="dnaSampleIDDataFrame", curie=NEON.curie('dnaSampleIDDataFrame'),
                      model_uri=NEON.dnaSampleIDDataFrame, domain=None, range=Optional[str])

slots.domain = Slot(uri=NEON.domain, name="domain", curie=NEON.curie('domain'),
                      model_uri=NEON.domain, domain=None, range=Optional[str])

slots.referenceDatabase = Slot(uri=NEON.referenceDatabase, name="referenceDatabase", curie=NEON.curie('referenceDatabase'),
                      model_uri=NEON.referenceDatabase, domain=None, range=Optional[str])

slots.referenceDatabaseVersion = Slot(uri=NEON.referenceDatabaseVersion, name="referenceDatabaseVersion", curie=NEON.curie('referenceDatabaseVersion'),
                      model_uri=NEON.referenceDatabaseVersion, domain=None, range=Optional[str])

slots.sequenceMatchMethod = Slot(uri=NEON.sequenceMatchMethod, name="sequenceMatchMethod", curie=NEON.curie('sequenceMatchMethod'),
                      model_uri=NEON.sequenceMatchMethod, domain=None, range=Optional[str])

slots.sequenceMatchThresholdValue = Slot(uri=NEON.sequenceMatchThresholdValue, name="sequenceMatchThresholdValue", curie=NEON.curie('sequenceMatchThresholdValue'),
                      model_uri=NEON.sequenceMatchThresholdValue, domain=None, range=Optional[float])

slots.sequenceMatchValueDescription = Slot(uri=NEON.sequenceMatchValueDescription, name="sequenceMatchValueDescription", curie=NEON.curie('sequenceMatchValueDescription'),
                      model_uri=NEON.sequenceMatchValueDescription, domain=None, range=Optional[str])

slots.downloadFileUrl = Slot(uri=NEON.downloadFileUrl, name="downloadFileUrl", curie=NEON.curie('downloadFileUrl'),
                      model_uri=NEON.downloadFileUrl, domain=None, range=Optional[str])

slots.channelSlope = Slot(uri=NEON.channelSlope, name="channelSlope", curie=NEON.curie('channelSlope'),
                      model_uri=NEON.channelSlope, domain=None, range=Optional[float])

slots.channelSlopeUnc = Slot(uri=NEON.channelSlopeUnc, name="channelSlopeUnc", curie=NEON.curie('channelSlopeUnc'),
                      model_uri=NEON.channelSlopeUnc, domain=None, range=Optional[float])

slots.controlActivationState = Slot(uri=NEON.controlActivationState, name="controlActivationState", curie=NEON.curie('controlActivationState'),
                      model_uri=NEON.controlActivationState, domain=None, range=Optional[int])

slots.controlNumber = Slot(uri=NEON.controlNumber, name="controlNumber", curie=NEON.curie('controlNumber'),
                      model_uri=NEON.controlNumber, domain=None, range=Optional[int])

slots.hydraulicControlType = Slot(uri=NEON.hydraulicControlType, name="hydraulicControlType", curie=NEON.curie('hydraulicControlType'),
                      model_uri=NEON.hydraulicControlType, domain=None, range=Optional[str])

slots.manningCoefficient = Slot(uri=NEON.manningCoefficient, name="manningCoefficient", curie=NEON.curie('manningCoefficient'),
                      model_uri=NEON.manningCoefficient, domain=None, range=Optional[float])

slots.manningCoefficientUnc = Slot(uri=NEON.manningCoefficientUnc, name="manningCoefficientUnc", curie=NEON.curie('manningCoefficientUnc'),
                      model_uri=NEON.manningCoefficientUnc, domain=None, range=Optional[float])

slots.orificeArea = Slot(uri=NEON.orificeArea, name="orificeArea", curie=NEON.curie('orificeArea'),
                      model_uri=NEON.orificeArea, domain=None, range=Optional[float])

slots.orificeAreaUnc = Slot(uri=NEON.orificeAreaUnc, name="orificeAreaUnc", curie=NEON.curie('orificeAreaUnc'),
                      model_uri=NEON.orificeAreaUnc, domain=None, range=Optional[float])

slots.parabolaHeight = Slot(uri=NEON.parabolaHeight, name="parabolaHeight", curie=NEON.curie('parabolaHeight'),
                      model_uri=NEON.parabolaHeight, domain=None, range=Optional[float])

slots.parabolaHeightUnc = Slot(uri=NEON.parabolaHeightUnc, name="parabolaHeightUnc", curie=NEON.curie('parabolaHeightUnc'),
                      model_uri=NEON.parabolaHeightUnc, domain=None, range=Optional[float])

slots.parabolaWidth = Slot(uri=NEON.parabolaWidth, name="parabolaWidth", curie=NEON.curie('parabolaWidth'),
                      model_uri=NEON.parabolaWidth, domain=None, range=Optional[float])

slots.parabolaWidthUnc = Slot(uri=NEON.parabolaWidthUnc, name="parabolaWidthUnc", curie=NEON.curie('parabolaWidthUnc'),
                      model_uri=NEON.parabolaWidthUnc, domain=None, range=Optional[float])

slots.priorActivationStage = Slot(uri=NEON.priorActivationStage, name="priorActivationStage", curie=NEON.curie('priorActivationStage'),
                      model_uri=NEON.priorActivationStage, domain=None, range=Optional[float])

slots.priorActivationStageUnc = Slot(uri=NEON.priorActivationStageUnc, name="priorActivationStageUnc", curie=NEON.curie('priorActivationStageUnc'),
                      model_uri=NEON.priorActivationStageUnc, domain=None, range=Optional[float])

slots.priorCoefficient = Slot(uri=NEON.priorCoefficient, name="priorCoefficient", curie=NEON.curie('priorCoefficient'),
                      model_uri=NEON.priorCoefficient, domain=None, range=Optional[float])

slots.priorCoefficientUnc = Slot(uri=NEON.priorCoefficientUnc, name="priorCoefficientUnc", curie=NEON.curie('priorCoefficientUnc'),
                      model_uri=NEON.priorCoefficientUnc, domain=None, range=Optional[float])

slots.priorExponent = Slot(uri=NEON.priorExponent, name="priorExponent", curie=NEON.curie('priorExponent'),
                      model_uri=NEON.priorExponent, domain=None, range=Optional[float])

slots.priorExponentUnc = Slot(uri=NEON.priorExponentUnc, name="priorExponentUnc", curie=NEON.curie('priorExponentUnc'),
                      model_uri=NEON.priorExponentUnc, domain=None, range=Optional[float])

slots.rectangularWidth = Slot(uri=NEON.rectangularWidth, name="rectangularWidth", curie=NEON.curie('rectangularWidth'),
                      model_uri=NEON.rectangularWidth, domain=None, range=Optional[float])

slots.rectangularWidthUnc = Slot(uri=NEON.rectangularWidthUnc, name="rectangularWidthUnc", curie=NEON.curie('rectangularWidthUnc'),
                      model_uri=NEON.rectangularWidthUnc, domain=None, range=Optional[float])

slots.segmentNumber = Slot(uri=NEON.segmentNumber, name="segmentNumber", curie=NEON.curie('segmentNumber'),
                      model_uri=NEON.segmentNumber, domain=None, range=Optional[int])

slots.stricklerCoefficient = Slot(uri=NEON.stricklerCoefficient, name="stricklerCoefficient", curie=NEON.curie('stricklerCoefficient'),
                      model_uri=NEON.stricklerCoefficient, domain=None, range=Optional[float])

slots.stricklerCoefficientUnc = Slot(uri=NEON.stricklerCoefficientUnc, name="stricklerCoefficientUnc", curie=NEON.curie('stricklerCoefficientUnc'),
                      model_uri=NEON.stricklerCoefficientUnc, domain=None, range=Optional[float])

slots.triangularAngle = Slot(uri=NEON.triangularAngle, name="triangularAngle", curie=NEON.curie('triangularAngle'),
                      model_uri=NEON.triangularAngle, domain=None, range=Optional[float])

slots.triangularAngleUnc = Slot(uri=NEON.triangularAngleUnc, name="triangularAngleUnc", curie=NEON.curie('triangularAngleUnc'),
                      model_uri=NEON.triangularAngleUnc, domain=None, range=Optional[float])

slots.allEventID = Slot(uri=NEON.allEventID, name="allEventID", curie=NEON.curie('allEventID'),
                      model_uri=NEON.allEventID, domain=None, range=Optional[str])

slots.gaugeEventID = Slot(uri=NEON.gaugeEventID, name="gaugeEventID", curie=NEON.curie('gaugeEventID'),
                      model_uri=NEON.gaugeEventID, domain=None, range=Optional[str])

slots.gaugeHeightOffset = Slot(uri=NEON.gaugeHeightOffset, name="gaugeHeightOffset", curie=NEON.curie('gaugeHeightOffset'),
                      model_uri=NEON.gaugeHeightOffset, domain=None, range=Optional[float])

slots.gaugeHeightUnc = Slot(uri=NEON.gaugeHeightUnc, name="gaugeHeightUnc", curie=NEON.curie('gaugeHeightUnc'),
                      model_uri=NEON.gaugeHeightUnc, domain=None, range=Optional[float])

slots.includedInRatingCurve = Slot(uri=NEON.includedInRatingCurve, name="includedInRatingCurve", curie=NEON.curie('includedInRatingCurve'),
                      model_uri=NEON.includedInRatingCurve, domain=None, range=Optional[str])

slots.L1DataQF = Slot(uri=NEON.L1DataQF, name="L1DataQF", curie=NEON.curie('L1DataQF'),
                      model_uri=NEON.L1DataQF, domain=None, range=Optional[str])

slots.maxPostActivationStage = Slot(uri=NEON.maxPostActivationStage, name="maxPostActivationStage", curie=NEON.curie('maxPostActivationStage'),
                      model_uri=NEON.maxPostActivationStage, domain=None, range=Optional[float])

slots.maxPostCoefficient = Slot(uri=NEON.maxPostCoefficient, name="maxPostCoefficient", curie=NEON.curie('maxPostCoefficient'),
                      model_uri=NEON.maxPostCoefficient, domain=None, range=Optional[float])

slots.maxPostExponent = Slot(uri=NEON.maxPostExponent, name="maxPostExponent", curie=NEON.curie('maxPostExponent'),
                      model_uri=NEON.maxPostExponent, domain=None, range=Optional[float])

slots.maxPostGamma1 = Slot(uri=NEON.maxPostGamma1, name="maxPostGamma1", curie=NEON.curie('maxPostGamma1'),
                      model_uri=NEON.maxPostGamma1, domain=None, range=Optional[float])

slots.maxPostGamma2 = Slot(uri=NEON.maxPostGamma2, name="maxPostGamma2", curie=NEON.curie('maxPostGamma2'),
                      model_uri=NEON.maxPostGamma2, domain=None, range=Optional[float])

slots.maxPostZeroFlowOffset = Slot(uri=NEON.maxPostZeroFlowOffset, name="maxPostZeroFlowOffset", curie=NEON.curie('maxPostZeroFlowOffset'),
                      model_uri=NEON.maxPostZeroFlowOffset, domain=None, range=Optional[float])

slots.maxQ = Slot(uri=NEON.maxQ, name="maxQ", curie=NEON.curie('maxQ'),
                      model_uri=NEON.maxQ, domain=None, range=Optional[float])

slots.maxStage = Slot(uri=NEON.maxStage, name="maxStage", curie=NEON.curie('maxStage'),
                      model_uri=NEON.maxStage, domain=None, range=Optional[float])

slots.minQ = Slot(uri=NEON.minQ, name="minQ", curie=NEON.curie('minQ'),
                      model_uri=NEON.minQ, domain=None, range=Optional[float])

slots.minStage = Slot(uri=NEON.minStage, name="minStage", curie=NEON.curie('minStage'),
                      model_uri=NEON.minStage, domain=None, range=Optional[float])

slots.recalculatedL1QF = Slot(uri=NEON.recalculatedL1QF, name="recalculatedL1QF", curie=NEON.curie('recalculatedL1QF'),
                      model_uri=NEON.recalculatedL1QF, domain=None, range=Optional[str])

slots.spagActivationStage = Slot(uri=NEON.spagActivationStage, name="spagActivationStage", curie=NEON.curie('spagActivationStage'),
                      model_uri=NEON.spagActivationStage, domain=None, range=Optional[float])

slots.spagCoefficient = Slot(uri=NEON.spagCoefficient, name="spagCoefficient", curie=NEON.curie('spagCoefficient'),
                      model_uri=NEON.spagCoefficient, domain=None, range=Optional[float])

slots.spagExponent = Slot(uri=NEON.spagExponent, name="spagExponent", curie=NEON.curie('spagExponent'),
                      model_uri=NEON.spagExponent, domain=None, range=Optional[float])

slots.spagGamma1 = Slot(uri=NEON.spagGamma1, name="spagGamma1", curie=NEON.curie('spagGamma1'),
                      model_uri=NEON.spagGamma1, domain=None, range=Optional[float])

slots.spagGamma2 = Slot(uri=NEON.spagGamma2, name="spagGamma2", curie=NEON.curie('spagGamma2'),
                      model_uri=NEON.spagGamma2, domain=None, range=Optional[float])

slots.spagLogPost = Slot(uri=NEON.spagLogPost, name="spagLogPost", curie=NEON.curie('spagLogPost'),
                      model_uri=NEON.spagLogPost, domain=None, range=Optional[float])

slots.spagZeroFlowOffset = Slot(uri=NEON.spagZeroFlowOffset, name="spagZeroFlowOffset", curie=NEON.curie('spagZeroFlowOffset'),
                      model_uri=NEON.spagZeroFlowOffset, domain=None, range=Optional[float])

slots.stdDevActivationStage = Slot(uri=NEON.stdDevActivationStage, name="stdDevActivationStage", curie=NEON.curie('stdDevActivationStage'),
                      model_uri=NEON.stdDevActivationStage, domain=None, range=Optional[float])

slots.stdDevCoefficient = Slot(uri=NEON.stdDevCoefficient, name="stdDevCoefficient", curie=NEON.curie('stdDevCoefficient'),
                      model_uri=NEON.stdDevCoefficient, domain=None, range=Optional[float])

slots.stdDevExponent = Slot(uri=NEON.stdDevExponent, name="stdDevExponent", curie=NEON.curie('stdDevExponent'),
                      model_uri=NEON.stdDevExponent, domain=None, range=Optional[float])

slots.stdDevGamma1 = Slot(uri=NEON.stdDevGamma1, name="stdDevGamma1", curie=NEON.curie('stdDevGamma1'),
                      model_uri=NEON.stdDevGamma1, domain=None, range=Optional[float])

slots.stdDevGamma2 = Slot(uri=NEON.stdDevGamma2, name="stdDevGamma2", curie=NEON.curie('stdDevGamma2'),
                      model_uri=NEON.stdDevGamma2, domain=None, range=Optional[float])

slots.stdDevZeroFlowOffset = Slot(uri=NEON.stdDevZeroFlowOffset, name="stdDevZeroFlowOffset", curie=NEON.curie('stdDevZeroFlowOffset'),
                      model_uri=NEON.stdDevZeroFlowOffset, domain=None, range=Optional[float])

slots.streamDischarge = Slot(uri=NEON.streamDischarge, name="streamDischarge", curie=NEON.curie('streamDischarge'),
                      model_uri=NEON.streamDischarge, domain=None, range=Optional[float])

slots.streamDischargeUnc = Slot(uri=NEON.streamDischargeUnc, name="streamDischargeUnc", curie=NEON.curie('streamDischargeUnc'),
                      model_uri=NEON.streamDischargeUnc, domain=None, range=Optional[float])

slots.waterYear = Slot(uri=NEON.waterYear, name="waterYear", curie=NEON.curie('waterYear'),
                      model_uri=NEON.waterYear, domain=None, range=Optional[str])

slots.X1observed = Slot(uri=NEON.X1observed, name="X1observed", curie=NEON.curie('X1observed'),
                      model_uri=NEON.X1observed, domain=None, range=Optional[float])

slots.X1true = Slot(uri=NEON.X1true, name="X1true", curie=NEON.curie('X1true'),
                      model_uri=NEON.X1true, domain=None, range=Optional[float])

slots.Y1observed = Slot(uri=NEON.Y1observed, name="Y1observed", curie=NEON.curie('Y1observed'),
                      model_uri=NEON.Y1observed, domain=None, range=Optional[float])

slots.Y1residual = Slot(uri=NEON.Y1residual, name="Y1residual", curie=NEON.curie('Y1residual'),
                      model_uri=NEON.Y1residual, domain=None, range=Optional[float])

slots.Y1simulated = Slot(uri=NEON.Y1simulated, name="Y1simulated", curie=NEON.curie('Y1simulated'),
                      model_uri=NEON.Y1simulated, domain=None, range=Optional[float])

slots.Y1stdresidual = Slot(uri=NEON.Y1stdresidual, name="Y1stdresidual", curie=NEON.curie('Y1stdresidual'),
                      model_uri=NEON.Y1stdresidual, domain=None, range=Optional[float])

slots.Y1unbiased = Slot(uri=NEON.Y1unbiased, name="Y1unbiased", curie=NEON.curie('Y1unbiased'),
                      model_uri=NEON.Y1unbiased, domain=None, range=Optional[float])

slots.organicCPercent = Slot(uri=NEON.organicCPercent, name="organicCPercent", curie=NEON.curie('organicCPercent'),
                      model_uri=NEON.organicCPercent, domain=None, range=Optional[float])

slots.organicd13C = Slot(uri=NEON.organicd13C, name="organicd13C", curie=NEON.curie('organicd13C'),
                      model_uri=NEON.organicd13C, domain=None, range=Optional[float])

slots.rawSoilTemp = Slot(uri=NEON.rawSoilTemp, name="rawSoilTemp", curie=NEON.curie('rawSoilTemp'),
                      model_uri=NEON.rawSoilTemp, domain=None, range=Optional[float])

slots.rawSoilMoisture = Slot(uri=NEON.rawSoilMoisture, name="rawSoilMoisture", curie=NEON.curie('rawSoilMoisture'),
                      model_uri=NEON.rawSoilMoisture, domain=None, range=Optional[float])

slots.rawSoilBulkRelPerm = Slot(uri=NEON.rawSoilBulkRelPerm, name="rawSoilBulkRelPerm", curie=NEON.curie('rawSoilBulkRelPerm'),
                      model_uri=NEON.rawSoilBulkRelPerm, domain=None, range=Optional[float])

slots.rawSoilElectricCond = Slot(uri=NEON.rawSoilElectricCond, name="rawSoilElectricCond", curie=NEON.curie('rawSoilElectricCond'),
                      model_uri=NEON.rawSoilElectricCond, domain=None, range=Optional[float])

slots.rawSoilPoreWaterEC = Slot(uri=NEON.rawSoilPoreWaterEC, name="rawSoilPoreWaterEC", curie=NEON.curie('rawSoilPoreWaterEC'),
                      model_uri=NEON.rawSoilPoreWaterEC, domain=None, range=Optional[float])

slots.primerSetID = Slot(uri=NEON.primerSetID, name="primerSetID", curie=NEON.curie('primerSetID'),
                      model_uri=NEON.primerSetID, domain=None, range=Optional[str])

slots.processedSeqFileName = Slot(uri=NEON.processedSeqFileName, name="processedSeqFileName", curie=NEON.curie('processedSeqFileName'),
                      model_uri=NEON.processedSeqFileName, domain=None, range=Optional[str])

slots.rawDataFileDescription = Slot(uri=NEON.rawDataFileDescription, name="rawDataFileDescription", curie=NEON.curie('rawDataFileDescription'),
                      model_uri=NEON.rawDataFileDescription, domain=None, range=Optional[str])

slots.calibrationID = Slot(uri=NEON.calibrationID, name="calibrationID", curie=NEON.curie('calibrationID'),
                      model_uri=NEON.calibrationID, domain=None, range=Optional[str])

slots.gaugeCollectDate = Slot(uri=NEON.gaugeCollectDate, name="gaugeCollectDate", curie=NEON.curie('gaugeCollectDate'),
                      model_uri=NEON.gaugeCollectDate, domain=None, range=Optional[str])

slots.stationHorizontalID = Slot(uri=NEON.stationHorizontalID, name="stationHorizontalID", curie=NEON.curie('stationHorizontalID'),
                      model_uri=NEON.stationHorizontalID, domain=None, range=Optional[str])

slots.labSampleMedium = Slot(uri=NEON.labSampleMedium, name="labSampleMedium", curie=NEON.curie('labSampleMedium'),
                      model_uri=NEON.labSampleMedium, domain=None, range=Optional[str])

slots.totalLipidConcentration = Slot(uri=NEON.totalLipidConcentration, name="totalLipidConcentration", curie=NEON.curie('totalLipidConcentration'),
                      model_uri=NEON.totalLipidConcentration, domain=None, range=Optional[float])

slots.taxonomyFile = Slot(uri=NEON.taxonomyFile, name="taxonomyFile", curie=NEON.curie('taxonomyFile'),
                      model_uri=NEON.taxonomyFile, domain=None, range=Optional[str])

slots.adcpCompassCalibrated = Slot(uri=NEON.adcpCompassCalibrated, name="adcpCompassCalibrated", curie=NEON.curie('adcpCompassCalibrated'),
                      model_uri=NEON.adcpCompassCalibrated, domain=None, range=Optional[str])

slots.adcpCompassError = Slot(uri=NEON.adcpCompassError, name="adcpCompassError", curie=NEON.curie('adcpCompassError'),
                      model_uri=NEON.adcpCompassError, domain=None, range=Optional[float])

slots.loopMBT = Slot(uri=NEON.loopMBT, name="loopMBT", curie=NEON.curie('loopMBT'),
                      model_uri=NEON.loopMBT, domain=None, range=Optional[str])

slots.magneticVariation = Slot(uri=NEON.magneticVariation, name="magneticVariation", curie=NEON.curie('magneticVariation'),
                      model_uri=NEON.magneticVariation, domain=None, range=Optional[float])

slots.riverDepthMean = Slot(uri=NEON.riverDepthMean, name="riverDepthMean", curie=NEON.curie('riverDepthMean'),
                      model_uri=NEON.riverDepthMean, domain=None, range=Optional[float])

slots.riverDischargeMeasDuration = Slot(uri=NEON.riverDischargeMeasDuration, name="riverDischargeMeasDuration", curie=NEON.curie('riverDischargeMeasDuration'),
                      model_uri=NEON.riverDischargeMeasDuration, domain=None, range=Optional[float])

slots.riverVelocityMaximum = Slot(uri=NEON.riverVelocityMaximum, name="riverVelocityMaximum", curie=NEON.curie('riverVelocityMaximum'),
                      model_uri=NEON.riverVelocityMaximum, domain=None, range=Optional[float])

slots.riverWidthMean = Slot(uri=NEON.riverWidthMean, name="riverWidthMean", curie=NEON.curie('riverWidthMean'),
                      model_uri=NEON.riverWidthMean, domain=None, range=Optional[float])

slots.stationaryMBT = Slot(uri=NEON.stationaryMBT, name="stationaryMBT", curie=NEON.curie('stationaryMBT'),
                      model_uri=NEON.stationaryMBT, domain=None, range=Optional[str])

slots.totalDischargeRU = Slot(uri=NEON.totalDischargeRU, name="totalDischargeRU", curie=NEON.curie('totalDischargeRU'),
                      model_uri=NEON.totalDischargeRU, domain=None, range=Optional[float])

slots.velocityUnits = Slot(uri=NEON.velocityUnits, name="velocityUnits", curie=NEON.curie('velocityUnits'),
                      model_uri=NEON.velocityUnits, domain=None, range=Optional[str])

slots.waterTemperature = Slot(uri=NEON.waterTemperature, name="waterTemperature", curie=NEON.curie('waterTemperature'),
                      model_uri=NEON.waterTemperature, domain=None, range=Optional[float])

slots.widthUnits = Slot(uri=NEON.widthUnits, name="widthUnits", curie=NEON.curie('widthUnits'),
                      model_uri=NEON.widthUnits, domain=None, range=Optional[str])

slots.windDirRelativeToFlow = Slot(uri=NEON.windDirRelativeToFlow, name="windDirRelativeToFlow", curie=NEON.curie('windDirRelativeToFlow'),
                      model_uri=NEON.windDirRelativeToFlow, domain=None, range=Optional[str])

slots.windSpeedPrior = Slot(uri=NEON.windSpeedPrior, name="windSpeedPrior", curie=NEON.curie('windSpeedPrior'),
                      model_uri=NEON.windSpeedPrior, domain=None, range=Optional[float])

slots.nitrateNitriteRunID = Slot(uri=NEON.nitrateNitriteRunID, name="nitrateNitriteRunID", curie=NEON.curie('nitrateNitriteRunID'),
                      model_uri=NEON.nitrateNitriteRunID, domain=None, range=Optional[str])

slots.qcIdentifiedBy = Slot(uri=NEON.qcIdentifiedBy, name="qcIdentifiedBy", curie=NEON.curie('qcIdentifiedBy'),
                      model_uri=NEON.qcIdentifiedBy, domain=None, range=Optional[str])

slots.qcIndividualCount = Slot(uri=NEON.qcIndividualCount, name="qcIndividualCount", curie=NEON.curie('qcIndividualCount'),
                      model_uri=NEON.qcIndividualCount, domain=None, range=Optional[str])

slots.gpsAccuracy = Slot(uri=NEON.gpsAccuracy, name="gpsAccuracy", curie=NEON.curie('gpsAccuracy'),
                      model_uri=NEON.gpsAccuracy, domain=None, range=Optional[float])

slots.gpsAccuracyUnits = Slot(uri=NEON.gpsAccuracyUnits, name="gpsAccuracyUnits", curie=NEON.curie('gpsAccuracyUnits'),
                      model_uri=NEON.gpsAccuracyUnits, domain=None, range=Optional[str])

slots.gpsAccuracyValue = Slot(uri=NEON.gpsAccuracyValue, name="gpsAccuracyValue", curie=NEON.curie('gpsAccuracyValue'),
                      model_uri=NEON.gpsAccuracyValue, domain=None, range=Optional[float])

slots.sonarSystemModel = Slot(uri=NEON.sonarSystemModel, name="sonarSystemModel", curie=NEON.curie('sonarSystemModel'),
                      model_uri=NEON.sonarSystemModel, domain=None, range=Optional[str])

slots.plantDescription = Slot(uri=NEON.plantDescription, name="plantDescription", curie=NEON.curie('plantDescription'),
                      model_uri=NEON.plantDescription, domain=None, range=Optional[str])

slots.voucherLifeStage = Slot(uri=NEON.voucherLifeStage, name="voucherLifeStage", curie=NEON.curie('voucherLifeStage'),
                      model_uri=NEON.voucherLifeStage, domain=None, range=Optional[str])

slots.voucherLocality = Slot(uri=NEON.voucherLocality, name="voucherLocality", curie=NEON.curie('voucherLocality'),
                      model_uri=NEON.voucherLocality, domain=None, range=Optional[str])

slots.diBlankCode = Slot(uri=NEON.diBlankCode, name="diBlankCode", curie=NEON.curie('diBlankCode'),
                      model_uri=NEON.diBlankCode, domain=None, range=Optional[str])

slots.diBlankFate = Slot(uri=NEON.diBlankFate, name="diBlankFate", curie=NEON.curie('diBlankFate'),
                      model_uri=NEON.diBlankFate, domain=None, range=Optional[str])

slots.diBlankID = Slot(uri=NEON.diBlankID, name="diBlankID", curie=NEON.curie('diBlankID'),
                      model_uri=NEON.diBlankID, domain=None, range=Optional[str])

slots.filterBlankRep1 = Slot(uri=NEON.filterBlankRep1, name="filterBlankRep1", curie=NEON.curie('filterBlankRep1'),
                      model_uri=NEON.filterBlankRep1, domain=None, range=Optional[str])

slots.filterBlankRep1Code = Slot(uri=NEON.filterBlankRep1Code, name="filterBlankRep1Code", curie=NEON.curie('filterBlankRep1Code'),
                      model_uri=NEON.filterBlankRep1Code, domain=None, range=Optional[str])

slots.filterBlankRep1Fate = Slot(uri=NEON.filterBlankRep1Fate, name="filterBlankRep1Fate", curie=NEON.curie('filterBlankRep1Fate'),
                      model_uri=NEON.filterBlankRep1Fate, domain=None, range=Optional[str])

slots.filterBlankRep1Volume = Slot(uri=NEON.filterBlankRep1Volume, name="filterBlankRep1Volume", curie=NEON.curie('filterBlankRep1Volume'),
                      model_uri=NEON.filterBlankRep1Volume, domain=None, range=Optional[float])

slots.filterBlankRep2 = Slot(uri=NEON.filterBlankRep2, name="filterBlankRep2", curie=NEON.curie('filterBlankRep2'),
                      model_uri=NEON.filterBlankRep2, domain=None, range=Optional[str])

slots.filterBlankRep2Code = Slot(uri=NEON.filterBlankRep2Code, name="filterBlankRep2Code", curie=NEON.curie('filterBlankRep2Code'),
                      model_uri=NEON.filterBlankRep2Code, domain=None, range=Optional[str])

slots.filterBlankRep2Fate = Slot(uri=NEON.filterBlankRep2Fate, name="filterBlankRep2Fate", curie=NEON.curie('filterBlankRep2Fate'),
                      model_uri=NEON.filterBlankRep2Fate, domain=None, range=Optional[str])

slots.filterBlankRep2Volume = Slot(uri=NEON.filterBlankRep2Volume, name="filterBlankRep2Volume", curie=NEON.curie('filterBlankRep2Volume'),
                      model_uri=NEON.filterBlankRep2Volume, domain=None, range=Optional[float])

slots.plantMassOnly = Slot(uri=NEON.plantMassOnly, name="plantMassOnly", curie=NEON.curie('plantMassOnly'),
                      model_uri=NEON.plantMassOnly, domain=None, range=Optional[str])

slots.c16To1Cis11Concentration = Slot(uri=NEON.c16To1Cis11Concentration, name="c16To1Cis11Concentration", curie=NEON.curie('c16To1Cis11Concentration'),
                      model_uri=NEON.c16To1Cis11Concentration, domain=None, range=Optional[float])

slots.c17To0AnteisoConcentration = Slot(uri=NEON.c17To0AnteisoConcentration, name="c17To0AnteisoConcentration", curie=NEON.curie('c17To0AnteisoConcentration'),
                      model_uri=NEON.c17To0AnteisoConcentration, domain=None, range=Optional[float])

slots.c19To1Cis10Concentration = Slot(uri=NEON.c19To1Cis10Concentration, name="c19To1Cis10Concentration", curie=NEON.curie('c19To1Cis10Concentration'),
                      model_uri=NEON.c19To1Cis10Concentration, domain=None, range=Optional[float])

slots.c22To6CisConcentration = Slot(uri=NEON.c22To6CisConcentration, name="c22To6CisConcentration", curie=NEON.curie('c22To6CisConcentration'),
                      model_uri=NEON.c22To6CisConcentration, domain=None, range=Optional[float])

slots.i14To0Concentration = Slot(uri=NEON.i14To0Concentration, name="i14To0Concentration", curie=NEON.curie('i14To0Concentration'),
                      model_uri=NEON.i14To0Concentration, domain=None, range=Optional[float])

slots.lipid10Methyl16To0Concentration = Slot(uri=NEON.lipid10Methyl16To0Concentration, name="lipid10Methyl16To0Concentration", curie=NEON.curie('lipid10Methyl16To0Concentration'),
                      model_uri=NEON.lipid10Methyl16To0Concentration, domain=None, range=Optional[float])

slots.lipid10Methyl17To0Concentration = Slot(uri=NEON.lipid10Methyl17To0Concentration, name="lipid10Methyl17To0Concentration", curie=NEON.curie('lipid10Methyl17To0Concentration'),
                      model_uri=NEON.lipid10Methyl17To0Concentration, domain=None, range=Optional[float])

slots.lipid10Methyl18To0Concentration = Slot(uri=NEON.lipid10Methyl18To0Concentration, name="lipid10Methyl18To0Concentration", curie=NEON.curie('lipid10Methyl18To0Concentration'),
                      model_uri=NEON.lipid10Methyl18To0Concentration, domain=None, range=Optional[float])

slots.groundSurfToThawDist = Slot(uri=NEON.groundSurfToThawDist, name="groundSurfToThawDist", curie=NEON.curie('groundSurfToThawDist'),
                      model_uri=NEON.groundSurfToThawDist, domain=None, range=Optional[float])

slots.groundSurfToWaterDist = Slot(uri=NEON.groundSurfToWaterDist, name="groundSurfToWaterDist", curie=NEON.curie('groundSurfToWaterDist'),
                      model_uri=NEON.groundSurfToWaterDist, domain=None, range=Optional[float])

slots.liquidWaterPresence = Slot(uri=NEON.liquidWaterPresence, name="liquidWaterPresence", curie=NEON.curie('liquidWaterPresence'),
                      model_uri=NEON.liquidWaterPresence, domain=None, range=Optional[str])

slots.thawProbeDepth1 = Slot(uri=NEON.thawProbeDepth1, name="thawProbeDepth1", curie=NEON.curie('thawProbeDepth1'),
                      model_uri=NEON.thawProbeDepth1, domain=None, range=Optional[float])

slots.thawProbeDepth10 = Slot(uri=NEON.thawProbeDepth10, name="thawProbeDepth10", curie=NEON.curie('thawProbeDepth10'),
                      model_uri=NEON.thawProbeDepth10, domain=None, range=Optional[float])

slots.thawProbeDepth2 = Slot(uri=NEON.thawProbeDepth2, name="thawProbeDepth2", curie=NEON.curie('thawProbeDepth2'),
                      model_uri=NEON.thawProbeDepth2, domain=None, range=Optional[float])

slots.thawProbeDepth3 = Slot(uri=NEON.thawProbeDepth3, name="thawProbeDepth3", curie=NEON.curie('thawProbeDepth3'),
                      model_uri=NEON.thawProbeDepth3, domain=None, range=Optional[float])

slots.thawProbeDepth4 = Slot(uri=NEON.thawProbeDepth4, name="thawProbeDepth4", curie=NEON.curie('thawProbeDepth4'),
                      model_uri=NEON.thawProbeDepth4, domain=None, range=Optional[float])

slots.thawProbeDepth5 = Slot(uri=NEON.thawProbeDepth5, name="thawProbeDepth5", curie=NEON.curie('thawProbeDepth5'),
                      model_uri=NEON.thawProbeDepth5, domain=None, range=Optional[float])

slots.thawProbeDepth6 = Slot(uri=NEON.thawProbeDepth6, name="thawProbeDepth6", curie=NEON.curie('thawProbeDepth6'),
                      model_uri=NEON.thawProbeDepth6, domain=None, range=Optional[float])

slots.thawProbeDepth7 = Slot(uri=NEON.thawProbeDepth7, name="thawProbeDepth7", curie=NEON.curie('thawProbeDepth7'),
                      model_uri=NEON.thawProbeDepth7, domain=None, range=Optional[float])

slots.thawProbeDepth8 = Slot(uri=NEON.thawProbeDepth8, name="thawProbeDepth8", curie=NEON.curie('thawProbeDepth8'),
                      model_uri=NEON.thawProbeDepth8, domain=None, range=Optional[float])

slots.thawProbeDepth9 = Slot(uri=NEON.thawProbeDepth9, name="thawProbeDepth9", curie=NEON.curie('thawProbeDepth9'),
                      model_uri=NEON.thawProbeDepth9, domain=None, range=Optional[float])

slots.thawProbeDepthAverage = Slot(uri=NEON.thawProbeDepthAverage, name="thawProbeDepthAverage", curie=NEON.curie('thawProbeDepthAverage'),
                      model_uri=NEON.thawProbeDepthAverage, domain=None, range=Optional[float])

slots.thawProbeDepthStdDev = Slot(uri=NEON.thawProbeDepthStdDev, name="thawProbeDepthStdDev", curie=NEON.curie('thawProbeDepthStdDev'),
                      model_uri=NEON.thawProbeDepthStdDev, domain=None, range=Optional[float])

slots.topOfWellToGroundDist = Slot(uri=NEON.topOfWellToGroundDist, name="topOfWellToGroundDist", curie=NEON.curie('topOfWellToGroundDist'),
                      model_uri=NEON.topOfWellToGroundDist, domain=None, range=Optional[float])

slots.topOfWellToRefusalDist = Slot(uri=NEON.topOfWellToRefusalDist, name="topOfWellToRefusalDist", curie=NEON.curie('topOfWellToRefusalDist'),
                      model_uri=NEON.topOfWellToRefusalDist, domain=None, range=Optional[float])

slots.topOfWellToWaterDist = Slot(uri=NEON.topOfWellToWaterDist, name="topOfWellToWaterDist", curie=NEON.curie('topOfWellToWaterDist'),
                      model_uri=NEON.topOfWellToWaterDist, domain=None, range=Optional[float])

slots.transducerLowered = Slot(uri=NEON.transducerLowered, name="transducerLowered", curie=NEON.curie('transducerLowered'),
                      model_uri=NEON.transducerLowered, domain=None, range=Optional[str])

slots.wellPushedDownToThawLayer = Slot(uri=NEON.wellPushedDownToThawLayer, name="wellPushedDownToThawLayer", curie=NEON.curie('wellPushedDownToThawLayer'),
                      model_uri=NEON.wellPushedDownToThawLayer, domain=None, range=Optional[str])

slots.gasCheckStandardPercentDev = Slot(uri=NEON.gasCheckStandardPercentDev, name="gasCheckStandardPercentDev", curie=NEON.curie('gasCheckStandardPercentDev'),
                      model_uri=NEON.gasCheckStandardPercentDev, domain=None, range=Optional[float])

slots.gasCheckStandardQF = Slot(uri=NEON.gasCheckStandardQF, name="gasCheckStandardQF", curie=NEON.curie('gasCheckStandardQF'),
                      model_uri=NEON.gasCheckStandardQF, domain=None, range=Optional[int])

slots.saltCheckStandardPercentDev = Slot(uri=NEON.saltCheckStandardPercentDev, name="saltCheckStandardPercentDev", curie=NEON.curie('saltCheckStandardPercentDev'),
                      model_uri=NEON.saltCheckStandardPercentDev, domain=None, range=Optional[float])

slots.saltCheckStandardQF = Slot(uri=NEON.saltCheckStandardQF, name="saltCheckStandardQF", curie=NEON.curie('saltCheckStandardQF'),
                      model_uri=NEON.saltCheckStandardQF, domain=None, range=Optional[int])

slots.measurementUncertaintyUnits = Slot(uri=NEON.measurementUncertaintyUnits, name="measurementUncertaintyUnits", curie=NEON.curie('measurementUncertaintyUnits'),
                      model_uri=NEON.measurementUncertaintyUnits, domain=None, range=Optional[str])

slots.methodDetectionLimitUnits = Slot(uri=NEON.methodDetectionLimitUnits, name="methodDetectionLimitUnits", curie=NEON.curie('methodDetectionLimitUnits'),
                      model_uri=NEON.methodDetectionLimitUnits, domain=None, range=Optional[str])

slots.precisionUnits = Slot(uri=NEON.precisionUnits, name="precisionUnits", curie=NEON.curie('precisionUnits'),
                      model_uri=NEON.precisionUnits, domain=None, range=Optional[str])

slots.hoboSampleClass = Slot(uri=NEON.hoboSampleClass, name="hoboSampleClass", curie=NEON.curie('hoboSampleClass'),
                      model_uri=NEON.hoboSampleClass, domain=None, range=Optional[str])

slots.incompleteExperimentQF = Slot(uri=NEON.incompleteExperimentQF, name="incompleteExperimentQF", curie=NEON.curie('incompleteExperimentQF'),
                      model_uri=NEON.incompleteExperimentQF, domain=None, range=Optional[str])

slots.injectateSampleClass = Slot(uri=NEON.injectateSampleClass, name="injectateSampleClass", curie=NEON.curie('injectateSampleClass'),
                      model_uri=NEON.injectateSampleClass, domain=None, range=Optional[str])

slots.vialID = Slot(uri=NEON.vialID, name="vialID", curie=NEON.curie('vialID'),
                      model_uri=NEON.vialID, domain=None, range=Optional[str])

slots.sensorDepthFinalQF = Slot(uri=NEON.sensorDepthFinalQF, name="sensorDepthFinalQF", curie=NEON.curie('sensorDepthFinalQF'),
                      model_uri=NEON.sensorDepthFinalQF, domain=None, range=Optional[int])

slots.iceCover = Slot(uri=NEON.iceCover, name="iceCover", curie=NEON.curie('iceCover'),
                      model_uri=NEON.iceCover, domain=None, range=Optional[str])

slots.measuringMethod = Slot(uri=NEON.measuringMethod, name="measuringMethod", curie=NEON.curie('measuringMethod'),
                      model_uri=NEON.measuringMethod, domain=None, range=Optional[str])

slots.streambedLeafCover = Slot(uri=NEON.streambedLeafCover, name="streambedLeafCover", curie=NEON.curie('streambedLeafCover'),
                      model_uri=NEON.streambedLeafCover, domain=None, range=Optional[str])

slots.dicSampleCode = Slot(uri=NEON.dicSampleCode, name="dicSampleCode", curie=NEON.curie('dicSampleCode'),
                      model_uri=NEON.dicSampleCode, domain=None, range=Optional[str])

slots.dicSampleCond = Slot(uri=NEON.dicSampleCond, name="dicSampleCond", curie=NEON.curie('dicSampleCond'),
                      model_uri=NEON.dicSampleCond, domain=None, range=Optional[str])

slots.dicSampleFate = Slot(uri=NEON.dicSampleFate, name="dicSampleFate", curie=NEON.curie('dicSampleFate'),
                      model_uri=NEON.dicSampleFate, domain=None, range=Optional[str])

slots.dicSampleID = Slot(uri=NEON.dicSampleID, name="dicSampleID", curie=NEON.curie('dicSampleID'),
                      model_uri=NEON.dicSampleID, domain=None, range=Optional[str])

slots.filtSampleBottleSize = Slot(uri=NEON.filtSampleBottleSize, name="filtSampleBottleSize", curie=NEON.curie('filtSampleBottleSize'),
                      model_uri=NEON.filtSampleBottleSize, domain=None, range=Optional[str])

slots.gwwAlkSampleBubbleFree = Slot(uri=NEON.gwwAlkSampleBubbleFree, name="gwwAlkSampleBubbleFree", curie=NEON.curie('gwwAlkSampleBubbleFree'),
                      model_uri=NEON.gwwAlkSampleBubbleFree, domain=None, range=Optional[str])

slots.gwwAlkSampleHeadspace = Slot(uri=NEON.gwwAlkSampleHeadspace, name="gwwAlkSampleHeadspace", curie=NEON.curie('gwwAlkSampleHeadspace'),
                      model_uri=NEON.gwwAlkSampleHeadspace, domain=None, range=Optional[str])

slots.gwwFiltBubbleFree = Slot(uri=NEON.gwwFiltBubbleFree, name="gwwFiltBubbleFree", curie=NEON.curie('gwwFiltBubbleFree'),
                      model_uri=NEON.gwwFiltBubbleFree, domain=None, range=Optional[str])

slots.gwwFiltSampleHeadspace = Slot(uri=NEON.gwwFiltSampleHeadspace, name="gwwFiltSampleHeadspace", curie=NEON.curie('gwwFiltSampleHeadspace'),
                      model_uri=NEON.gwwFiltSampleHeadspace, domain=None, range=Optional[str])

slots.dscTempHydroCond = Slot(uri=NEON.dscTempHydroCond, name="dscTempHydroCond", curie=NEON.curie('dscTempHydroCond'),
                      model_uri=NEON.dscTempHydroCond, domain=None, range=Optional[str])

slots.dscTempHydroCondLoc = Slot(uri=NEON.dscTempHydroCondLoc, name="dscTempHydroCondLoc", curie=NEON.curie('dscTempHydroCondLoc'),
                      model_uri=NEON.dscTempHydroCondLoc, domain=None, range=Optional[str])

slots.gaugeTempHydroCond = Slot(uri=NEON.gaugeTempHydroCond, name="gaugeTempHydroCond", curie=NEON.curie('gaugeTempHydroCond'),
                      model_uri=NEON.gaugeTempHydroCond, domain=None, range=Optional[str])

slots.gaugeTempHydroCondLoc = Slot(uri=NEON.gaugeTempHydroCondLoc, name="gaugeTempHydroCondLoc", curie=NEON.curie('gaugeTempHydroCondLoc'),
                      model_uri=NEON.gaugeTempHydroCondLoc, domain=None, range=Optional[str])

slots.acceptedForAnalysis = Slot(uri=NEON.acceptedForAnalysis, name="acceptedForAnalysis", curie=NEON.curie('acceptedForAnalysis'),
                      model_uri=NEON.acceptedForAnalysis, domain=None, range=Optional[str])

slots.archiveGuid = Slot(uri=NEON.archiveGuid, name="archiveGuid", curie=NEON.curie('archiveGuid'),
                      model_uri=NEON.archiveGuid, domain=None, range=Optional[str])

slots.archiveSampleClass = Slot(uri=NEON.archiveSampleClass, name="archiveSampleClass", curie=NEON.curie('archiveSampleClass'),
                      model_uri=NEON.archiveSampleClass, domain=None, range=Optional[str])

slots.archiveStartDate = Slot(uri=NEON.archiveStartDate, name="archiveStartDate", curie=NEON.curie('archiveStartDate'),
                      model_uri=NEON.archiveStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.containerID = Slot(uri=NEON.containerID, name="containerID", curie=NEON.curie('containerID'),
                      model_uri=NEON.containerID, domain=None, range=Optional[str])

slots.containerMass = Slot(uri=NEON.containerMass, name="containerMass", curie=NEON.curie('containerMass'),
                      model_uri=NEON.containerMass, domain=None, range=Optional[float])

slots.destinationFacility = Slot(uri=NEON.destinationFacility, name="destinationFacility", curie=NEON.curie('destinationFacility'),
                      model_uri=NEON.destinationFacility, domain=None, range=Optional[str])

slots.filterVolume = Slot(uri=NEON.filterVolume, name="filterVolume", curie=NEON.curie('filterVolume'),
                      model_uri=NEON.filterVolume, domain=None, range=Optional[float])

slots.holdingTime = Slot(uri=NEON.holdingTime, name="holdingTime", curie=NEON.curie('holdingTime'),
                      model_uri=NEON.holdingTime, domain=None, range=Optional[Union[str, XSDTime]])

slots.quarantineStatus = Slot(uri=NEON.quarantineStatus, name="quarantineStatus", curie=NEON.curie('quarantineStatus'),
                      model_uri=NEON.quarantineStatus, domain=None, range=Optional[str])

slots.sampleReceived = Slot(uri=NEON.sampleReceived, name="sampleReceived", curie=NEON.curie('sampleReceived'),
                      model_uri=NEON.sampleReceived, domain=None, range=Optional[str])

slots.sentTo = Slot(uri=NEON.sentTo, name="sentTo", curie=NEON.curie('sentTo'),
                      model_uri=NEON.sentTo, domain=None, range=Optional[str])

slots.shipmentMethod = Slot(uri=NEON.shipmentMethod, name="shipmentMethod", curie=NEON.curie('shipmentMethod'),
                      model_uri=NEON.shipmentMethod, domain=None, range=Optional[str])

slots.shipmentService = Slot(uri=NEON.shipmentService, name="shipmentService", curie=NEON.curie('shipmentService'),
                      model_uri=NEON.shipmentService, domain=None, range=Optional[str])

slots.shippedFrom = Slot(uri=NEON.shippedFrom, name="shippedFrom", curie=NEON.curie('shippedFrom'),
                      model_uri=NEON.shippedFrom, domain=None, range=Optional[str])

slots.storageTemperature = Slot(uri=NEON.storageTemperature, name="storageTemperature", curie=NEON.curie('storageTemperature'),
                      model_uri=NEON.storageTemperature, domain=None, range=Optional[str])

slots.trackingNumber = Slot(uri=NEON.trackingNumber, name="trackingNumber", curie=NEON.curie('trackingNumber'),
                      model_uri=NEON.trackingNumber, domain=None, range=Optional[str])

slots.archiveLabSampleMedium = Slot(uri=NEON.archiveLabSampleMedium, name="archiveLabSampleMedium", curie=NEON.curie('archiveLabSampleMedium'),
                      model_uri=NEON.archiveLabSampleMedium, domain=None, range=Optional[str])

slots.qfHeat = Slot(uri=NEON.qfHeat, name="qfHeat", curie=NEON.curie('qfHeat'),
                      model_uri=NEON.qfHeat, domain=None, range=Optional[int])

slots.toxicodendronPossible = Slot(uri=NEON.toxicodendronPossible, name="toxicodendronPossible", curie=NEON.curie('toxicodendronPossible'),
                      model_uri=NEON.toxicodendronPossible, domain=None, range=Optional[str])

slots.qfPresDiff = Slot(uri=NEON.qfPresDiff, name="qfPresDiff", curie=NEON.curie('qfPresDiff'),
                      model_uri=NEON.qfPresDiff, domain=None, range=Optional[str])

slots.extractEffStdConc = Slot(uri=NEON.extractEffStdConc, name="extractEffStdConc", curie=NEON.curie('extractEffStdConc'),
                      model_uri=NEON.extractEffStdConc, domain=None, range=Optional[float])

slots.extractEffStdID = Slot(uri=NEON.extractEffStdID, name="extractEffStdID", curie=NEON.curie('extractEffStdID'),
                      model_uri=NEON.extractEffStdID, domain=None, range=Optional[str])

slots.extractEffStdUnits = Slot(uri=NEON.extractEffStdUnits, name="extractEffStdUnits", curie=NEON.curie('extractEffStdUnits'),
                      model_uri=NEON.extractEffStdUnits, domain=None, range=Optional[str])

slots.co2Trapped = Slot(uri=NEON.co2Trapped, name="co2Trapped", curie=NEON.curie('co2Trapped'),
                      model_uri=NEON.co2Trapped, domain=None, range=Optional[str])

slots.communitySubsampleCode = Slot(uri=NEON.communitySubsampleCode, name="communitySubsampleCode", curie=NEON.curie('communitySubsampleCode'),
                      model_uri=NEON.communitySubsampleCode, domain=None, range=Optional[str])

slots.communitySubsampleFate = Slot(uri=NEON.communitySubsampleFate, name="communitySubsampleFate", curie=NEON.curie('communitySubsampleFate'),
                      model_uri=NEON.communitySubsampleFate, domain=None, range=Optional[str])

slots.communitySubsampleID = Slot(uri=NEON.communitySubsampleID, name="communitySubsampleID", curie=NEON.curie('communitySubsampleID'),
                      model_uri=NEON.communitySubsampleID, domain=None, range=Optional[str])

slots.dnaStandardSampleCode = Slot(uri=NEON.dnaStandardSampleCode, name="dnaStandardSampleCode", curie=NEON.curie('dnaStandardSampleCode'),
                      model_uri=NEON.dnaStandardSampleCode, domain=None, range=Optional[str])

slots.dnaStandardSampleFate = Slot(uri=NEON.dnaStandardSampleFate, name="dnaStandardSampleFate", curie=NEON.curie('dnaStandardSampleFate'),
                      model_uri=NEON.dnaStandardSampleFate, domain=None, range=Optional[str])

slots.dnaStandardSampleID = Slot(uri=NEON.dnaStandardSampleID, name="dnaStandardSampleID", curie=NEON.curie('dnaStandardSampleID'),
                      model_uri=NEON.dnaStandardSampleID, domain=None, range=Optional[str])

slots.standardCreationLocation = Slot(uri=NEON.standardCreationLocation, name="standardCreationLocation", curie=NEON.curie('standardCreationLocation'),
                      model_uri=NEON.standardCreationLocation, domain=None, range=Optional[str])

slots.chironomidVialCode = Slot(uri=NEON.chironomidVialCode, name="chironomidVialCode", curie=NEON.curie('chironomidVialCode'),
                      model_uri=NEON.chironomidVialCode, domain=None, range=Optional[str])

slots.chironomidVialFate = Slot(uri=NEON.chironomidVialFate, name="chironomidVialFate", curie=NEON.curie('chironomidVialFate'),
                      model_uri=NEON.chironomidVialFate, domain=None, range=Optional[str])

slots.chironomidVialID = Slot(uri=NEON.chironomidVialID, name="chironomidVialID", curie=NEON.curie('chironomidVialID'),
                      model_uri=NEON.chironomidVialID, domain=None, range=Optional[str])

slots.dnaSnagDiameter = Slot(uri=NEON.dnaSnagDiameter, name="dnaSnagDiameter", curie=NEON.curie('dnaSnagDiameter'),
                      model_uri=NEON.dnaSnagDiameter, domain=None, range=Optional[float])

slots.dnaSnagLength = Slot(uri=NEON.dnaSnagLength, name="dnaSnagLength", curie=NEON.curie('dnaSnagLength'),
                      model_uri=NEON.dnaSnagLength, domain=None, range=Optional[float])

slots.freezeDriedCode = Slot(uri=NEON.freezeDriedCode, name="freezeDriedCode", curie=NEON.curie('freezeDriedCode'),
                      model_uri=NEON.freezeDriedCode, domain=None, range=Optional[str])

slots.freezeDriedID = Slot(uri=NEON.freezeDriedID, name="freezeDriedID", curie=NEON.curie('freezeDriedID'),
                      model_uri=NEON.freezeDriedID, domain=None, range=Optional[str])

slots.preservedCode = Slot(uri=NEON.preservedCode, name="preservedCode", curie=NEON.curie('preservedCode'),
                      model_uri=NEON.preservedCode, domain=None, range=Optional[str])

slots.preservedID = Slot(uri=NEON.preservedID, name="preservedID", curie=NEON.curie('preservedID'),
                      model_uri=NEON.preservedID, domain=None, range=Optional[str])

slots.analysisResultsQF = Slot(uri=NEON.analysisResultsQF, name="analysisResultsQF", curie=NEON.curie('analysisResultsQF'),
                      model_uri=NEON.analysisResultsQF, domain=None, range=Optional[str])

slots.analyteStandardQF = Slot(uri=NEON.analyteStandardQF, name="analyteStandardQF", curie=NEON.curie('analyteStandardQF'),
                      model_uri=NEON.analyteStandardQF, domain=None, range=Optional[str])

slots.analyteAbsoluteError = Slot(uri=NEON.analyteAbsoluteError, name="analyteAbsoluteError", curie=NEON.curie('analyteAbsoluteError'),
                      model_uri=NEON.analyteAbsoluteError, domain=None, range=Optional[float])

slots.analyteMetricsCount = Slot(uri=NEON.analyteMetricsCount, name="analyteMetricsCount", curie=NEON.curie('analyteMetricsCount'),
                      model_uri=NEON.analyteMetricsCount, domain=None, range=Optional[str])

slots.qaReportingEndDate = Slot(uri=NEON.qaReportingEndDate, name="qaReportingEndDate", curie=NEON.curie('qaReportingEndDate'),
                      model_uri=NEON.qaReportingEndDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.qaReportingStartDate = Slot(uri=NEON.qaReportingStartDate, name="qaReportingStartDate", curie=NEON.curie('qaReportingStartDate'),
                      model_uri=NEON.qaReportingStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.bulkDensSampleID = Slot(uri=NEON.bulkDensSampleID, name="bulkDensSampleID", curie=NEON.curie('bulkDensSampleID'),
                      model_uri=NEON.bulkDensSampleID, domain=None, range=Optional[str])

slots.wavelength = Slot(uri=NEON.wavelength, name="wavelength", curie=NEON.curie('wavelength'),
                      model_uri=NEON.wavelength, domain=None, range=Optional[float])

slots.reflectance = Slot(uri=NEON.reflectance, name="reflectance", curie=NEON.curie('reflectance'),
                      model_uri=NEON.reflectance, domain=None, range=Optional[float])

slots.wavelengthIncrement = Slot(uri=NEON.wavelengthIncrement, name="wavelengthIncrement", curie=NEON.curie('wavelengthIncrement'),
                      model_uri=NEON.wavelengthIncrement, domain=None, range=Optional[float])

slots.protocolActivity = Slot(uri=NEON.protocolActivity, name="protocolActivity", curie=NEON.curie('protocolActivity'),
                      model_uri=NEON.protocolActivity, domain=None, range=Optional[str])

slots.oligochaeteVialCode = Slot(uri=NEON.oligochaeteVialCode, name="oligochaeteVialCode", curie=NEON.curie('oligochaeteVialCode'),
                      model_uri=NEON.oligochaeteVialCode, domain=None, range=Optional[str])

slots.oligochaeteVialFate = Slot(uri=NEON.oligochaeteVialFate, name="oligochaeteVialFate", curie=NEON.curie('oligochaeteVialFate'),
                      model_uri=NEON.oligochaeteVialFate, domain=None, range=Optional[str])

slots.oligochaeteVialID = Slot(uri=NEON.oligochaeteVialID, name="oligochaeteVialID", curie=NEON.curie('oligochaeteVialID'),
                      model_uri=NEON.oligochaeteVialID, domain=None, range=Optional[str])

slots.biomassRemoval = Slot(uri=NEON.biomassRemoval, name="biomassRemoval", curie=NEON.curie('biomassRemoval'),
                      model_uri=NEON.biomassRemoval, domain=None, range=Optional[str])

slots.eventType = Slot(uri=NEON.eventType, name="eventType", curie=NEON.curie('eventType'),
                      model_uri=NEON.eventType, domain=None, range=Optional[str])

slots.fireSeverity = Slot(uri=NEON.fireSeverity, name="fireSeverity", curie=NEON.curie('fireSeverity'),
                      model_uri=NEON.fireSeverity, domain=None, range=Optional[str])

slots.maxQuantity = Slot(uri=NEON.maxQuantity, name="maxQuantity", curie=NEON.curie('maxQuantity'),
                      model_uri=NEON.maxQuantity, domain=None, range=Optional[float])

slots.maxStartDate = Slot(uri=NEON.maxStartDate, name="maxStartDate", curie=NEON.curie('maxStartDate'),
                      model_uri=NEON.maxStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.methodTypeChoice = Slot(uri=NEON.methodTypeChoice, name="methodTypeChoice", curie=NEON.curie('methodTypeChoice'),
                      model_uri=NEON.methodTypeChoice, domain=None, range=Optional[str])

slots.minEndDate = Slot(uri=NEON.minEndDate, name="minEndDate", curie=NEON.curie('minEndDate'),
                      model_uri=NEON.minEndDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.minQuantity = Slot(uri=NEON.minQuantity, name="minQuantity", curie=NEON.curie('minQuantity'),
                      model_uri=NEON.minQuantity, domain=None, range=Optional[float])

slots.name = Slot(uri=NEON.name, name="name", curie=NEON.curie('name'),
                      model_uri=NEON.name, domain=None, range=Optional[str])

slots.otherScientificName = Slot(uri=NEON.otherScientificName, name="otherScientificName", curie=NEON.curie('otherScientificName'),
                      model_uri=NEON.otherScientificName, domain=None, range=Optional[str])

slots.quantityUnit = Slot(uri=NEON.quantityUnit, name="quantityUnit", curie=NEON.curie('quantityUnit'),
                      model_uri=NEON.quantityUnit, domain=None, range=Optional[str])

slots.reporterType = Slot(uri=NEON.reporterType, name="reporterType", curie=NEON.curie('reporterType'),
                      model_uri=NEON.reporterType, domain=None, range=Optional[str])

slots.bgcArchiveMass = Slot(uri=NEON.bgcArchiveMass, name="bgcArchiveMass", curie=NEON.curie('bgcArchiveMass'),
                      model_uri=NEON.bgcArchiveMass, domain=None, range=Optional[float])

slots.horizonDetails = Slot(uri=NEON.horizonDetails, name="horizonDetails", curie=NEON.curie('horizonDetails'),
                      model_uri=NEON.horizonDetails, domain=None, range=Optional[str])

slots.biophysicalCriteria = Slot(uri=NEON.biophysicalCriteria, name="biophysicalCriteria", curie=NEON.curie('biophysicalCriteria'),
                      model_uri=NEON.biophysicalCriteria, domain=None, range=Optional[str])

slots.precisionRepeatabilityUnits = Slot(uri=NEON.precisionRepeatabilityUnits, name="precisionRepeatabilityUnits", curie=NEON.curie('precisionRepeatabilityUnits'),
                      model_uri=NEON.precisionRepeatabilityUnits, domain=None, range=Optional[str])

slots.adequateSampleVol = Slot(uri=NEON.adequateSampleVol, name="adequateSampleVol", curie=NEON.curie('adequateSampleVol'),
                      model_uri=NEON.adequateSampleVol, domain=None, range=Optional[str])

slots.ashMassDataQF = Slot(uri=NEON.ashMassDataQF, name="ashMassDataQF", curie=NEON.curie('ashMassDataQF'),
                      model_uri=NEON.ashMassDataQF, domain=None, range=Optional[str])

slots.enumerationDifferenceMax = Slot(uri=NEON.enumerationDifferenceMax, name="enumerationDifferenceMax", curie=NEON.curie('enumerationDifferenceMax'),
                      model_uri=NEON.enumerationDifferenceMax, domain=None, range=Optional[float])

slots.enumerationDifferenceMean = Slot(uri=NEON.enumerationDifferenceMean, name="enumerationDifferenceMean", curie=NEON.curie('enumerationDifferenceMean'),
                      model_uri=NEON.enumerationDifferenceMean, domain=None, range=Optional[float])

slots.enumerationDifferenceMin = Slot(uri=NEON.enumerationDifferenceMin, name="enumerationDifferenceMin", curie=NEON.curie('enumerationDifferenceMin'),
                      model_uri=NEON.enumerationDifferenceMin, domain=None, range=Optional[float])

slots.qcAnalyzedBy = Slot(uri=NEON.qcAnalyzedBy, name="qcAnalyzedBy", curie=NEON.curie('qcAnalyzedBy'),
                      model_uri=NEON.qcAnalyzedBy, domain=None, range=Optional[str])

slots.BOLDsequenceURL = Slot(uri=NEON.BOLDsequenceURL, name="BOLDsequenceURL", curie=NEON.curie('BOLDsequenceURL'),
                      model_uri=NEON.BOLDsequenceURL, domain=None, range=Optional[str])

slots.BOLDtraceURL = Slot(uri=NEON.BOLDtraceURL, name="BOLDtraceURL", curie=NEON.curie('BOLDtraceURL'),
                      model_uri=NEON.BOLDtraceURL, domain=None, range=Optional[str])

slots.genusPTD = Slot(uri=NEON.genusPTD, name="genusPTD", curie=NEON.curie('genusPTD'),
                      model_uri=NEON.genusPTD, domain=None, range=Optional[float])

slots.NEONsequenceURL = Slot(uri=NEON.NEONsequenceURL, name="NEONsequenceURL", curie=NEON.curie('NEONsequenceURL'),
                      model_uri=NEON.NEONsequenceURL, domain=None, range=Optional[str])

slots.NEONtraceURL = Slot(uri=NEON.NEONtraceURL, name="NEONtraceURL", curie=NEON.curie('NEONtraceURL'),
                      model_uri=NEON.NEONtraceURL, domain=None, range=Optional[str])

slots.speciesPTD = Slot(uri=NEON.speciesPTD, name="speciesPTD", curie=NEON.curie('speciesPTD'),
                      model_uri=NEON.speciesPTD, domain=None, range=Optional[float])

slots.qaSample = Slot(uri=NEON.qaSample, name="qaSample", curie=NEON.curie('qaSample'),
                      model_uri=NEON.qaSample, domain=None, range=Optional[str])

slots.chlorophyllSampleCondition = Slot(uri=NEON.chlorophyllSampleCondition, name="chlorophyllSampleCondition", curie=NEON.curie('chlorophyllSampleCondition'),
                      model_uri=NEON.chlorophyllSampleCondition, domain=None, range=Optional[str])

slots.archiveLocatorID = Slot(uri=NEON.archiveLocatorID, name="archiveLocatorID", curie=NEON.curie('archiveLocatorID'),
                      model_uri=NEON.archiveLocatorID, domain=None, range=Optional[str])

slots.filterCode = Slot(uri=NEON.filterCode, name="filterCode", curie=NEON.curie('filterCode'),
                      model_uri=NEON.filterCode, domain=None, range=Optional[str])

slots.filterManufactureName = Slot(uri=NEON.filterManufactureName, name="filterManufactureName", curie=NEON.curie('filterManufactureName'),
                      model_uri=NEON.filterManufactureName, domain=None, range=Optional[str])

slots.filterProductModel = Slot(uri=NEON.filterProductModel, name="filterProductModel", curie=NEON.curie('filterProductModel'),
                      model_uri=NEON.filterProductModel, domain=None, range=Optional[str])

slots.estimated95percentUC = Slot(uri=NEON.estimated95percentUC, name="estimated95percentUC", curie=NEON.curie('estimated95percentUC'),
                      model_uri=NEON.estimated95percentUC, domain=None, range=Optional[float])

slots.timeZone = Slot(uri=NEON.timeZone, name="timeZone", curie=NEON.curie('timeZone'),
                      model_uri=NEON.timeZone, domain=None, range=Optional[str])

slots.bulkInvertCount = Slot(uri=NEON.bulkInvertCount, name="bulkInvertCount", curie=NEON.curie('bulkInvertCount'),
                      model_uri=NEON.bulkInvertCount, domain=None, range=Optional[str])

slots.cfcIndividual = Slot(uri=NEON.cfcIndividual, name="cfcIndividual", curie=NEON.curie('cfcIndividual'),
                      model_uri=NEON.cfcIndividual, domain=None, range=Optional[str])

slots.fieldSpectrometerSettings = Slot(uri=NEON.fieldSpectrometerSettings, name="fieldSpectrometerSettings", curie=NEON.curie('fieldSpectrometerSettings'),
                      model_uri=NEON.fieldSpectrometerSettings, domain=None, range=Optional[str])

slots.foreopticConnection = Slot(uri=NEON.foreopticConnection, name="foreopticConnection", curie=NEON.curie('foreopticConnection'),
                      model_uri=NEON.foreopticConnection, domain=None, range=Optional[str])

slots.foreopticType = Slot(uri=NEON.foreopticType, name="foreopticType", curie=NEON.curie('foreopticType'),
                      model_uri=NEON.foreopticType, domain=None, range=Optional[str])

slots.leafAge = Slot(uri=NEON.leafAge, name="leafAge", curie=NEON.curie('leafAge'),
                      model_uri=NEON.leafAge, domain=None, range=Optional[str])

slots.leafArrangement = Slot(uri=NEON.leafArrangement, name="leafArrangement", curie=NEON.curie('leafArrangement'),
                      model_uri=NEON.leafArrangement, domain=None, range=Optional[str])

slots.leafExposure = Slot(uri=NEON.leafExposure, name="leafExposure", curie=NEON.curie('leafExposure'),
                      model_uri=NEON.leafExposure, domain=None, range=Optional[str])

slots.leafSamplePosition = Slot(uri=NEON.leafSamplePosition, name="leafSamplePosition", curie=NEON.curie('leafSamplePosition'),
                      model_uri=NEON.leafSamplePosition, domain=None, range=Optional[str])

slots.leafStatus = Slot(uri=NEON.leafStatus, name="leafStatus", curie=NEON.curie('leafStatus'),
                      model_uri=NEON.leafStatus, domain=None, range=Optional[str])

slots.lightSource = Slot(uri=NEON.lightSource, name="lightSource", curie=NEON.curie('lightSource'),
                      model_uri=NEON.lightSource, domain=None, range=Optional[str])

slots.measurementQuantity = Slot(uri=NEON.measurementQuantity, name="measurementQuantity", curie=NEON.curie('measurementQuantity'),
                      model_uri=NEON.measurementQuantity, domain=None, range=Optional[str])

slots.measurementUnits = Slot(uri=NEON.measurementUnits, name="measurementUnits", curie=NEON.curie('measurementUnits'),
                      model_uri=NEON.measurementUnits, domain=None, range=Optional[str])

slots.measurementVenue = Slot(uri=NEON.measurementVenue, name="measurementVenue", curie=NEON.curie('measurementVenue'),
                      model_uri=NEON.measurementVenue, domain=None, range=Optional[str])

slots.reflectanceCondition = Slot(uri=NEON.reflectanceCondition, name="reflectanceCondition", curie=NEON.curie('reflectanceCondition'),
                      model_uri=NEON.reflectanceCondition, domain=None, range=Optional[str])

slots.software = Slot(uri=NEON.software, name="software", curie=NEON.curie('software'),
                      model_uri=NEON.software, domain=None, range=Optional[str])

slots.spectralSampleCode = Slot(uri=NEON.spectralSampleCode, name="spectralSampleCode", curie=NEON.curie('spectralSampleCode'),
                      model_uri=NEON.spectralSampleCode, domain=None, range=Optional[str])

slots.spectralSampleCodeDataFrame = Slot(uri=NEON.spectralSampleCodeDataFrame, name="spectralSampleCodeDataFrame", curie=NEON.curie('spectralSampleCodeDataFrame'),
                      model_uri=NEON.spectralSampleCodeDataFrame, domain=None, range=Optional[str])

slots.spectralSampleFate = Slot(uri=NEON.spectralSampleFate, name="spectralSampleFate", curie=NEON.curie('spectralSampleFate'),
                      model_uri=NEON.spectralSampleFate, domain=None, range=Optional[str])

slots.spectralSampleID = Slot(uri=NEON.spectralSampleID, name="spectralSampleID", curie=NEON.curie('spectralSampleID'),
                      model_uri=NEON.spectralSampleID, domain=None, range=Optional[str])

slots.spectralSampleIDDataFrame = Slot(uri=NEON.spectralSampleIDDataFrame, name="spectralSampleIDDataFrame", curie=NEON.curie('spectralSampleIDDataFrame'),
                      model_uri=NEON.spectralSampleIDDataFrame, domain=None, range=Optional[str])

slots.targetStatus = Slot(uri=NEON.targetStatus, name="targetStatus", curie=NEON.curie('targetStatus'),
                      model_uri=NEON.targetStatus, domain=None, range=Optional[str])

slots.targetType = Slot(uri=NEON.targetType, name="targetType", curie=NEON.curie('targetType'),
                      model_uri=NEON.targetType, domain=None, range=Optional[str])

slots.parentFolderName = Slot(uri=NEON.parentFolderName, name="parentFolderName", curie=NEON.curie('parentFolderName'),
                      model_uri=NEON.parentFolderName, domain=None, range=Optional[str])

slots.archiveDataFileDescription = Slot(uri=NEON.archiveDataFileDescription, name="archiveDataFileDescription", curie=NEON.curie('archiveDataFileDescription'),
                      model_uri=NEON.archiveDataFileDescription, domain=None, range=Optional[str])

slots.archiveDataFileName = Slot(uri=NEON.archiveDataFileName, name="archiveDataFileName", curie=NEON.curie('archiveDataFileName'),
                      model_uri=NEON.archiveDataFileName, domain=None, range=Optional[str])

slots.archiveDataFilePath = Slot(uri=NEON.archiveDataFilePath, name="archiveDataFilePath", curie=NEON.curie('archiveDataFilePath'),
                      model_uri=NEON.archiveDataFilePath, domain=None, range=Optional[str])

slots.archiveParentFolderName = Slot(uri=NEON.archiveParentFolderName, name="archiveParentFolderName", curie=NEON.curie('archiveParentFolderName'),
                      model_uri=NEON.archiveParentFolderName, domain=None, range=Optional[str])

slots.processedSeqFileNameCode = Slot(uri=NEON.processedSeqFileNameCode, name="processedSeqFileNameCode", curie=NEON.curie('processedSeqFileNameCode'),
                      model_uri=NEON.processedSeqFileNameCode, domain=None, range=Optional[str])

slots.processedSeqFileNameFate = Slot(uri=NEON.processedSeqFileNameFate, name="processedSeqFileNameFate", curie=NEON.curie('processedSeqFileNameFate'),
                      model_uri=NEON.processedSeqFileNameFate, domain=None, range=Optional[str])

slots.processedSeqFileNameID = Slot(uri=NEON.processedSeqFileNameID, name="processedSeqFileNameID", curie=NEON.curie('processedSeqFileNameID'),
                      model_uri=NEON.processedSeqFileNameID, domain=None, range=Optional[str])

slots.PDE = Slot(uri=NEON.PDE, name="PDE", curie=NEON.curie('PDE'),
                      model_uri=NEON.PDE, domain=None, range=Optional[float])

slots.freezeDriedFate = Slot(uri=NEON.freezeDriedFate, name="freezeDriedFate", curie=NEON.curie('freezeDriedFate'),
                      model_uri=NEON.freezeDriedFate, domain=None, range=Optional[str])

slots.preservedFate = Slot(uri=NEON.preservedFate, name="preservedFate", curie=NEON.curie('preservedFate'),
                      model_uri=NEON.preservedFate, domain=None, range=Optional[str])

slots.incubationCondition = Slot(uri=NEON.incubationCondition, name="incubationCondition", curie=NEON.curie('incubationCondition'),
                      model_uri=NEON.incubationCondition, domain=None, range=Optional[str])

slots.analyteAccuracyUnits = Slot(uri=NEON.analyteAccuracyUnits, name="analyteAccuracyUnits", curie=NEON.curie('analyteAccuracyUnits'),
                      model_uri=NEON.analyteAccuracyUnits, domain=None, range=Optional[str])

slots.analyteKnownValueUnits = Slot(uri=NEON.analyteKnownValueUnits, name="analyteKnownValueUnits", curie=NEON.curie('analyteKnownValueUnits'),
                      model_uri=NEON.analyteKnownValueUnits, domain=None, range=Optional[str])

slots.analyteStandardDeviationUnits = Slot(uri=NEON.analyteStandardDeviationUnits, name="analyteStandardDeviationUnits", curie=NEON.curie('analyteStandardDeviationUnits'),
                      model_uri=NEON.analyteStandardDeviationUnits, domain=None, range=Optional[str])

slots.filtNutSampleBarcode = Slot(uri=NEON.filtNutSampleBarcode, name="filtNutSampleBarcode", curie=NEON.curie('filtNutSampleBarcode'),
                      model_uri=NEON.filtNutSampleBarcode, domain=None, range=Optional[str])

slots.filtNutSampleClass = Slot(uri=NEON.filtNutSampleClass, name="filtNutSampleClass", curie=NEON.curie('filtNutSampleClass'),
                      model_uri=NEON.filtNutSampleClass, domain=None, range=Optional[str])

slots.filtNutSampleCond = Slot(uri=NEON.filtNutSampleCond, name="filtNutSampleCond", curie=NEON.curie('filtNutSampleCond'),
                      model_uri=NEON.filtNutSampleCond, domain=None, range=Optional[str])

slots.filtNutSampleFate = Slot(uri=NEON.filtNutSampleFate, name="filtNutSampleFate", curie=NEON.curie('filtNutSampleFate'),
                      model_uri=NEON.filtNutSampleFate, domain=None, range=Optional[str])

slots.filtNutSampleID = Slot(uri=NEON.filtNutSampleID, name="filtNutSampleID", curie=NEON.curie('filtNutSampleID'),
                      model_uri=NEON.filtNutSampleID, domain=None, range=Optional[str])

slots.gwwDICBubbleFree = Slot(uri=NEON.gwwDICBubbleFree, name="gwwDICBubbleFree", curie=NEON.curie('gwwDICBubbleFree'),
                      model_uri=NEON.gwwDICBubbleFree, domain=None, range=Optional[str])

slots.rawNutSampleBarcode = Slot(uri=NEON.rawNutSampleBarcode, name="rawNutSampleBarcode", curie=NEON.curie('rawNutSampleBarcode'),
                      model_uri=NEON.rawNutSampleBarcode, domain=None, range=Optional[str])

slots.rawNutSampleClass = Slot(uri=NEON.rawNutSampleClass, name="rawNutSampleClass", curie=NEON.curie('rawNutSampleClass'),
                      model_uri=NEON.rawNutSampleClass, domain=None, range=Optional[str])

slots.rawNutSampleCond = Slot(uri=NEON.rawNutSampleCond, name="rawNutSampleCond", curie=NEON.curie('rawNutSampleCond'),
                      model_uri=NEON.rawNutSampleCond, domain=None, range=Optional[str])

slots.rawNutSampleFate = Slot(uri=NEON.rawNutSampleFate, name="rawNutSampleFate", curie=NEON.curie('rawNutSampleFate'),
                      model_uri=NEON.rawNutSampleFate, domain=None, range=Optional[str])

slots.rawNutSampleID = Slot(uri=NEON.rawNutSampleID, name="rawNutSampleID", curie=NEON.curie('rawNutSampleID'),
                      model_uri=NEON.rawNutSampleID, domain=None, range=Optional[str])

slots.dataCollected = Slot(uri=NEON.dataCollected, name="dataCollected", curie=NEON.curie('dataCollected'),
                      model_uri=NEON.dataCollected, domain=None, range=Optional[str])

slots.initialBandStemDiameter = Slot(uri=NEON.initialBandStemDiameter, name="initialBandStemDiameter", curie=NEON.curie('initialBandStemDiameter'),
                      model_uri=NEON.initialBandStemDiameter, domain=None, range=Optional[float])

slots.initialDendrometerGap = Slot(uri=NEON.initialDendrometerGap, name="initialDendrometerGap", curie=NEON.curie('initialDendrometerGap'),
                      model_uri=NEON.initialDendrometerGap, domain=None, range=Optional[float])

slots.dendrometerHeight = Slot(uri=NEON.dendrometerHeight, name="dendrometerHeight", curie=NEON.curie('dendrometerHeight'),
                      model_uri=NEON.dendrometerHeight, domain=None, range=Optional[float])

slots.tempStemID = Slot(uri=NEON.tempStemID, name="tempStemID", curie=NEON.curie('tempStemID'),
                      model_uri=NEON.tempStemID, domain=None, range=Optional[str])

slots.measurementStrategy = Slot(uri=NEON.measurementStrategy, name="measurementStrategy", curie=NEON.curie('measurementStrategy'),
                      model_uri=NEON.measurementStrategy, domain=None, range=Optional[str])

slots.changedMeasurementLocation = Slot(uri=NEON.changedMeasurementLocation, name="changedMeasurementLocation", curie=NEON.curie('changedMeasurementLocation'),
                      model_uri=NEON.changedMeasurementLocation, domain=None, range=Optional[str])

slots.dendrometerInstallationDate = Slot(uri=NEON.dendrometerInstallationDate, name="dendrometerInstallationDate", curie=NEON.curie('dendrometerInstallationDate'),
                      model_uri=NEON.dendrometerInstallationDate, domain=None, range=Optional[str])

slots.initalGapMeasurementDate = Slot(uri=NEON.initalGapMeasurementDate, name="initalGapMeasurementDate", curie=NEON.curie('initalGapMeasurementDate'),
                      model_uri=NEON.initalGapMeasurementDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.dendrometerGap = Slot(uri=NEON.dendrometerGap, name="dendrometerGap", curie=NEON.curie('dendrometerGap'),
                      model_uri=NEON.dendrometerGap, domain=None, range=Optional[float])

slots.dendrometerCondition = Slot(uri=NEON.dendrometerCondition, name="dendrometerCondition", curie=NEON.curie('dendrometerCondition'),
                      model_uri=NEON.dendrometerCondition, domain=None, range=Optional[str])

slots.bandStemDiameter = Slot(uri=NEON.bandStemDiameter, name="bandStemDiameter", curie=NEON.curie('bandStemDiameter'),
                      model_uri=NEON.bandStemDiameter, domain=None, range=Optional[float])

slots.stemLength = Slot(uri=NEON.stemLength, name="stemLength", curie=NEON.curie('stemLength'),
                      model_uri=NEON.stemLength, domain=None, range=Optional[float])

slots.recordType = Slot(uri=NEON.recordType, name="recordType", curie=NEON.curie('recordType'),
                      model_uri=NEON.recordType, domain=None, range=Optional[str])

slots.curveEndDate = Slot(uri=NEON.curveEndDate, name="curveEndDate", curie=NEON.curie('curveEndDate'),
                      model_uri=NEON.curveEndDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.curveStartDate = Slot(uri=NEON.curveStartDate, name="curveStartDate", curie=NEON.curie('curveStartDate'),
                      model_uri=NEON.curveStartDate, domain=None, range=Optional[Union[str, XSDTime]])

slots.parameterNumber = Slot(uri=NEON.parameterNumber, name="parameterNumber", curie=NEON.curie('parameterNumber'),
                      model_uri=NEON.parameterNumber, domain=None, range=Optional[int])

slots.tempShrubStemID = Slot(uri=NEON.tempShrubStemID, name="tempShrubStemID", curie=NEON.curie('tempShrubStemID'),
                      model_uri=NEON.tempShrubStemID, domain=None, range=Optional[str])

slots.depth10WaterTemp = Slot(uri=NEON.depth10WaterTemp, name="depth10WaterTemp", curie=NEON.curie('depth10WaterTemp'),
                      model_uri=NEON.depth10WaterTemp, domain=None, range=Optional[float])

slots.waterYearToInclude = Slot(uri=NEON.waterYearToInclude, name="waterYearToInclude", curie=NEON.curie('waterYearToInclude'),
                      model_uri=NEON.waterYearToInclude, domain=None, range=Optional[str])

slots.waterYearToIncludeNotes = Slot(uri=NEON.waterYearToIncludeNotes, name="waterYearToIncludeNotes", curie=NEON.curie('waterYearToIncludeNotes'),
                      model_uri=NEON.waterYearToIncludeNotes, domain=None, range=Optional[str])

slots.fluorometerSensitivitySetting = Slot(uri=NEON.fluorometerSensitivitySetting, name="fluorometerSensitivitySetting", curie=NEON.curie('fluorometerSensitivitySetting'),
                      model_uri=NEON.fluorometerSensitivitySetting, domain=None, range=Optional[float])

slots.postAcidificationFluorescence = Slot(uri=NEON.postAcidificationFluorescence, name="postAcidificationFluorescence", curie=NEON.curie('postAcidificationFluorescence'),
                      model_uri=NEON.postAcidificationFluorescence, domain=None, range=Optional[float])

slots.preAcidificationFluorescence = Slot(uri=NEON.preAcidificationFluorescence, name="preAcidificationFluorescence", curie=NEON.curie('preAcidificationFluorescence'),
                      model_uri=NEON.preAcidificationFluorescence, domain=None, range=Optional[float])

slots.responseFactor = Slot(uri=NEON.responseFactor, name="responseFactor", curie=NEON.curie('responseFactor'),
                      model_uri=NEON.responseFactor, domain=None, range=Optional[float])

slots.trapsNotSet = Slot(uri=NEON.trapsNotSet, name="trapsNotSet", curie=NEON.curie('trapsNotSet'),
                      model_uri=NEON.trapsNotSet, domain=None, range=Optional[str])

slots.tickNumber = Slot(uri=NEON.tickNumber, name="tickNumber", curie=NEON.curie('tickNumber'),
                      model_uri=NEON.tickNumber, domain=None, range=Optional[str])

slots.mortalityCause = Slot(uri=NEON.mortalityCause, name="mortalityCause", curie=NEON.curie('mortalityCause'),
                      model_uri=NEON.mortalityCause, domain=None, range=Optional[str])
